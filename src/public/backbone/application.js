/*
   Copyright 2008-2014 SpryMedia Ltd.

 This source file is free software, available under the following license:
   MIT license - http://datatables.net/license

 This source file is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.

 For details please refer to: http://www.datatables.net
   Copyright 2011-2014 SpryMedia Ltd.

 This source file is free software, available under the following license:
   MIT license - http://datatables.net/license/mit

 This source file is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.

 For details please refer to: http://www.datatables.net
 almond 0.3.1 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.
 Available via the MIT or new BSD license.
 see: http://github.com/jrburke/almond for details
*/
!(function (b, a) {
    "object" == typeof module && "object" == typeof module.exports
        ? (module.exports = b.document
              ? a(b, !0)
              : function (b) {
                    if (!b.document) throw Error("jQuery requires a window with a document");
                    return a(b);
                })
        : a(b);
})("undefined" != typeof window ? window : this, function (b, a) {
    function c(a, b) {
        b = b || T;
        var c = b.createElement("script");
        c.text = a;
        b.head.appendChild(c).parentNode.removeChild(c);
    }
    function d(a) {
        var b = !!a && "length" in a && a.length,
            c = m.type(a);
        return "function" !== c && !m.isWindow(a) && ("array" === c || 0 === b || ("number" == typeof b && 0 < b && b - 1 in a));
    }
    function e(a, b) {
        return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase();
    }
    function g(a, b, c) {
        return m.isFunction(b)
            ? m.grep(a, function (a, d) {
                  return !!b.call(a, d, a) !== c;
              })
            : b.nodeType
            ? m.grep(a, function (a) {
                  return (a === b) !== c;
              })
            : "string" != typeof b
            ? m.grep(a, function (a) {
                  return -1 < hb.call(b, a) !== c;
              })
            : Ra.test(b)
            ? m.filter(b, a, c)
            : ((b = m.filter(b, a)),
              m.grep(a, function (a) {
                  return -1 < hb.call(b, a) !== c && 1 === a.nodeType;
              }));
    }
    function f(a, b) {
        for (; (a = a[b]) && 1 !== a.nodeType; );
        return a;
    }
    function k(a) {
        var b = {};
        return (
            m.each(a.match(X) || [], function (a, c) {
                b[c] = !0;
            }),
            b
        );
    }
    function h(a) {
        return a;
    }
    function l(a) {
        throw a;
    }
    function n(a, b, c, d) {
        var e;
        try {
            a && m.isFunction((e = a.promise)) ? e.call(a).done(b).fail(c) : a && m.isFunction((e = a.then)) ? e.call(a, b, c) : b.apply(void 0, [a].slice(d));
        } catch (f) {
            c.apply(void 0, [f]);
        }
    }
    function q() {
        T.removeEventListener("DOMContentLoaded", q);
        b.removeEventListener("load", q);
        m.ready();
    }
    function u() {
        this.expando = m.expando + u.uid++;
    }
    function v(a, b, c) {
        var d;
        if (void 0 === c && 1 === a.nodeType)
            if (((d = "data-" + b.replace(Jc, "-$&").toLowerCase()), (c = a.getAttribute(d)), "string" == typeof c)) {
                try {
                    (d = c), (c = "true" === d || ("false" !== d && ("null" === d ? null : d === +d + "" ? +d : mc.test(d) ? JSON.parse(d) : d)));
                } catch (e) {}
                ua.set(a, b, c);
            } else c = void 0;
        return c;
    }
    function w(a, b, c, d) {
        var e,
            f = 1,
            g = 20,
            h = d
                ? function () {
                      return d.cur();
                  }
                : function () {
                      return m.css(a, b, "");
                  },
            k = h(),
            l = (c && c[3]) || (m.cssNumber[b] ? "" : "px"),
            n = (m.cssNumber[b] || ("px" !== l && +k)) && ib.exec(m.css(a, b));
        if (n && n[3] !== l) {
            l = l || n[3];
            c = c || [];
            n = +k || 1;
            do (f = f || ".5"), (n /= f), m.style(a, b, n + l);
            while (f !== (f = h() / k) && 1 !== f && --g);
        }
        return c && ((n = +n || +k || 0), (e = c[1] ? n + (c[1] + 1) * c[2] : +c[2]), d && ((d.unit = l), (d.start = n), (d.end = e))), e;
    }
    function t(a, b) {
        for (var c, d, e = [], f = 0, g = a.length; f < g; f++)
            if (((d = a[f]), d.style))
                if (((c = d.style.display), b)) {
                    if (("none" === c && ((e[f] = U.get(d, "display") || null), e[f] || (d.style.display = "")), "" === d.style.display && ub(d))) {
                        c = f;
                        var h,
                            k = void 0;
                        h = d.ownerDocument;
                        var l = d.nodeName;
                        h = (d = wc[l]) ? d : ((k = h.body.appendChild(h.createElement(l))), (d = m.css(k, "display")), k.parentNode.removeChild(k), "none" === d && (d = "block"), (wc[l] = d), d);
                        e[c] = h;
                    }
                } else "none" !== c && ((e[f] = "none"), U.set(d, "display", c));
        for (f = 0; f < g; f++) null != e[f] && (a[f].style.display = e[f]);
        return a;
    }
    function y(a, b) {
        var c;
        return (c = "undefined" != typeof a.getElementsByTagName ? a.getElementsByTagName(b || "*") : "undefined" != typeof a.querySelectorAll ? a.querySelectorAll(b || "*") : []), void 0 === b || (b && e(a, b)) ? m.merge([a], c) : c;
    }
    function p(a, b) {
        for (var c = 0, d = a.length; c < d; c++) U.set(a[c], "globalEval", !b || U.get(b[c], "globalEval"));
    }
    function C(a, b, c, d, e) {
        for (var f, g, h, k, l = b.createDocumentFragment(), n = [], q = 0, I = a.length; q < I; q++)
            if (((f = a[q]), f || 0 === f))
                if ("object" === m.type(f)) m.merge(n, f.nodeType ? [f] : f);
                else if (Kc.test(f)) {
                    g = g || l.appendChild(b.createElement("div"));
                    h = (Ga.exec(f) || ["", ""])[1].toLowerCase();
                    h = Ja[h] || Ja._default;
                    g.innerHTML = h[1] + m.htmlPrefilter(f) + h[2];
                    for (h = h[0]; h--; ) g = g.lastChild;
                    m.merge(n, g.childNodes);
                    g = l.firstChild;
                    g.textContent = "";
                } else n.push(b.createTextNode(f));
        l.textContent = "";
        for (q = 0; (f = n[q++]); )
            if (d && -1 < m.inArray(f, d)) e && e.push(f);
            else if (((k = m.contains(f.ownerDocument, f)), (g = y(l.appendChild(f), "script")), k && p(g), c)) for (h = 0; (f = g[h++]); ) fa.test(f.type || "") && c.push(f);
        return l;
    }
    function r() {
        return !0;
    }
    function x() {
        return !1;
    }
    function z() {
        try {
            return T.activeElement;
        } catch (a) {}
    }
    function B(a, b, c, d, e, f) {
        var g, h;
        if ("object" == typeof b) {
            "string" != typeof c && ((d = d || c), (c = void 0));
            for (h in b) B(a, h, c, d, b[h], f);
            return a;
        }
        if ((null == d && null == e ? ((e = c), (d = c = void 0)) : null == e && ("string" == typeof c ? ((e = d), (d = void 0)) : ((e = d), (d = c), (c = void 0))), !1 === e)) e = x;
        else if (!e) return a;
        return (
            1 === f &&
                ((g = e),
                (e = function (a) {
                    return m().off(a), g.apply(this, arguments);
                }),
                (e.guid = g.guid || (g.guid = m.guid++))),
            a.each(function () {
                m.event.add(this, b, e, d, c);
            })
        );
    }
    function G(a, b) {
        return e(a, "table") && e(11 !== b.nodeType ? b : b.firstChild, "tr") ? m(">tbody", a)[0] || a : a;
    }
    function H(a) {
        return (a.type = (null !== a.getAttribute("type")) + "/" + a.type), a;
    }
    function J(a) {
        var b = V.exec(a.type);
        return b ? (a.type = b[1]) : a.removeAttribute("type"), a;
    }
    function A(a, b) {
        var c, d, e, f, g, h;
        if (1 === b.nodeType) {
            if (U.hasData(a) && ((c = U.access(a)), (d = U.set(b, c)), (h = c.events))) for (e in (delete d.handle, (d.events = {}), h)) for (c = 0, d = h[e].length; c < d; c++) m.event.add(b, e, h[e][c]);
            ua.hasData(a) && ((f = ua.access(a)), (g = m.extend({}, f)), ua.set(b, g));
        }
    }
    function ea(a, b, d, e) {
        b = vb.apply([], b);
        var f,
            g,
            h,
            k,
            l = 0,
            n = a.length,
            q = n - 1,
            I = b[0],
            u = m.isFunction(I);
        if (u || (1 < n && "string" == typeof I && !la.checkClone && ia.test(I)))
            return a.each(function (c) {
                var f = a.eq(c);
                u && (b[0] = I.call(this, c, f.html()));
                ea(f, b, d, e);
            });
        if (n && ((f = C(b, a[0].ownerDocument, !1, a, e)), (g = f.firstChild), 1 === f.childNodes.length && (f = g), g || e)) {
            g = m.map(y(f, "script"), H);
            for (h = g.length; l < n; l++) (k = f), l !== q && ((k = m.clone(k, !0, !0)), h && m.merge(g, y(k, "script"))), d.call(a[l], k, l);
            if (h)
                for (f = g[g.length - 1].ownerDocument, m.map(g, J), l = 0; l < h; l++)
                    (k = g[l]), fa.test(k.type || "") && !U.access(k, "globalEval") && m.contains(f, k) && (k.src ? m._evalUrl && m._evalUrl(k.src) : c(k.textContent.replace(ya, ""), f));
        }
        return a;
    }
    function ga(a, b, c) {
        for (var d = b ? m.filter(b, a) : a, e = 0; null != (b = d[e]); e++) c || 1 !== b.nodeType || m.cleanData(y(b)), b.parentNode && (c && m.contains(b.ownerDocument, b) && p(y(b, "script")), b.parentNode.removeChild(b));
        return a;
    }
    function ha(a, b, c) {
        var d,
            e,
            f,
            g,
            h = a.style;
        return (
            (c = c || Tb(a)),
            c &&
                ((g = c.getPropertyValue(b) || c[b]),
                "" !== g || m.contains(a.ownerDocument, a) || (g = m.style(a, b)),
                !la.pixelMarginRight() && xc.test(g) && yc.test(b) && ((d = h.width), (e = h.minWidth), (f = h.maxWidth), (h.minWidth = h.maxWidth = h.width = g), (g = c.width), (h.width = d), (h.minWidth = e), (h.maxWidth = f))),
            void 0 !== g ? g + "" : g
        );
    }
    function va(a, b) {
        return {
            get: function () {
                return a() ? void delete this.get : (this.get = b).apply(this, arguments);
            },
        };
    }
    function L(a) {
        var b = m.cssProps[a];
        if (!b) {
            var b = m.cssProps,
                c;
            a: if (((c = a), !(c in Lc))) {
                for (var d = c[0].toUpperCase() + c.slice(1), e = ob.length; e--; ) if (((c = ob[e] + d), c in Lc)) break a;
                c = void 0;
            }
            b = b[a] = c || a;
        }
        return b;
    }
    function pa(a, b, c) {
        return (a = ib.exec(b)) ? Math.max(0, a[2] - (c || 0)) + (a[3] || "px") : b;
    }
    function wa(a, b, c, d, e) {
        var f = 0;
        for (b = c === (d ? "border" : "content") ? 4 : "width" === b ? 1 : 0; 4 > b; b += 2)
            "margin" === c && (f += m.css(a, c + pb[b], !0, e)),
                d
                    ? ("content" === c && (f -= m.css(a, "padding" + pb[b], !0, e)), "margin" !== c && (f -= m.css(a, "border" + pb[b] + "Width", !0, e)))
                    : ((f += m.css(a, "padding" + pb[b], !0, e)), "padding" !== c && (f += m.css(a, "border" + pb[b] + "Width", !0, e)));
        return f;
    }
    function Ba(a, b, c) {
        var d,
            e = Tb(a),
            f = ha(a, b, e),
            g = "border-box" === m.css(a, "boxSizing", !1, e);
        return xc.test(f)
            ? f
            : ((d = g && (la.boxSizingReliable() || f === a.style[b])), "auto" === f && (f = a["offset" + b[0].toUpperCase() + b.slice(1)]), (f = parseFloat(f) || 0), f + wa(a, b, c || (g ? "border" : "content"), d, e) + "px");
    }
    function W(a, b, c, d, e) {
        return new W.prototype.init(a, b, c, d, e);
    }
    function ra() {
        nc && (!1 === T.hidden && b.requestAnimationFrame ? b.requestAnimationFrame(ra) : b.setTimeout(ra, m.fx.interval), m.fx.tick());
    }
    function Q() {
        return (
            b.setTimeout(function () {
                Ub = void 0;
            }),
            (Ub = m.now())
        );
    }
    function I(a, b) {
        var c,
            d = 0,
            e = { height: a };
        for (b = b ? 1 : 0; 4 > d; d += 2 - b) (c = pb[d]), (e["margin" + c] = e["padding" + c] = a);
        return b && (e.opacity = e.width = a), e;
    }
    function Ca(a, b, c) {
        for (var d, e = (ma.tweeners[b] || []).concat(ma.tweeners["*"]), f = 0, g = e.length; f < g; f++) if ((d = e[f].call(c, b, a))) return d;
    }
    function M(a, b) {
        var c, d, e, f, g;
        for (c in a)
            if (((d = m.camelCase(c)), (e = b[d]), (f = a[c]), Array.isArray(f) && ((e = f[1]), (f = a[c] = f[0])), c !== d && ((a[d] = f), delete a[c]), (g = m.cssHooks[d]), g && "expand" in g))
                for (c in ((f = g.expand(f)), delete a[d], f)) c in a || ((a[c] = f[c]), (b[c] = e));
            else b[d] = e;
    }
    function ma(a, b, c) {
        var d,
            e = 0,
            f = ma.prefilters.length,
            g = m.Deferred().always(function () {
                delete h.elem;
            }),
            h = function () {
                if (d) return !1;
                for (var b = Ub || Q(), b = Math.max(0, k.startTime + k.duration - b), c = 1 - (b / k.duration || 0), D = 0, e = k.tweens.length; D < e; D++) k.tweens[D].run(c);
                return g.notifyWith(a, [k, c, b]), 1 > c && e ? b : (e || g.notifyWith(a, [k, 1, 0]), g.resolveWith(a, [k]), !1);
            },
            k = g.promise({
                elem: a,
                props: m.extend({}, b),
                opts: m.extend(!0, { specialEasing: {}, easing: m.easing._default }, c),
                originalProperties: b,
                originalOptions: c,
                startTime: Ub || Q(),
                duration: c.duration,
                tweens: [],
                createTween: function (b, c) {
                    var d = m.Tween(a, k.opts, b, c, k.opts.specialEasing[b] || k.opts.easing);
                    return k.tweens.push(d), d;
                },
                stop: function (b) {
                    var c = 0,
                        D = b ? k.tweens.length : 0;
                    if (d) return this;
                    for (d = !0; c < D; c++) k.tweens[c].run(1);
                    return b ? (g.notifyWith(a, [k, 1, 0]), g.resolveWith(a, [k, b])) : g.rejectWith(a, [k, b]), this;
                },
            });
        c = k.props;
        for (M(c, k.opts.specialEasing); e < f; e++) if ((b = ma.prefilters[e].call(k, a, c, k.opts))) return m.isFunction(b.stop) && (m._queueHooks(k.elem, k.opts.queue).stop = m.proxy(b.stop, b)), b;
        return (
            m.map(c, Ca, k),
            m.isFunction(k.opts.start) && k.opts.start.call(a, k),
            k.progress(k.opts.progress).done(k.opts.done, k.opts.complete).fail(k.opts.fail).always(k.opts.always),
            m.fx.timer(m.extend(h, { elem: a, anim: k, queue: k.opts.queue })),
            k
        );
    }
    function za(a) {
        return (a.match(X) || []).join(" ");
    }
    function ta(a) {
        return (a.getAttribute && a.getAttribute("class")) || "";
    }
    function aa(a, b, c, d) {
        var e;
        if (Array.isArray(b))
            m.each(b, function (b, D) {
                c || Be.test(a) ? d(a, D) : aa(a + "[" + ("object" == typeof D && null != D ? b : "") + "]", D, c, d);
            });
        else if (c || "object" !== m.type(b)) d(a, b);
        else for (e in b) aa(a + "[" + e + "]", b[e], c, d);
    }
    function ca(a) {
        return function (b, c) {
            "string" != typeof b && ((c = b), (b = "*"));
            var d,
                e = 0,
                f = b.toLowerCase().match(X) || [];
            if (m.isFunction(c)) for (; (d = f[e++]); ) "+" === d[0] ? ((d = d.slice(1) || "*"), (a[d] = a[d] || []).unshift(c)) : (a[d] = a[d] || []).push(c);
        };
    }
    function Ka(a, b, c, d) {
        function e(h) {
            var k;
            return (
                (f[h] = !0),
                m.each(a[h] || [], function (a, h) {
                    var l = h(b, c, d);
                    return "string" != typeof l || g || f[l] ? (g ? !(k = l) : void 0) : (b.dataTypes.unshift(l), e(l), !1);
                }),
                k
            );
        }
        var f = {},
            g = a === ed;
        return e(b.dataTypes[0]) || (!f["*"] && e("*"));
    }
    function Sa(a, b) {
        var c,
            d,
            e = m.ajaxSettings.flatOptions || {};
        for (c in b) void 0 !== b[c] && ((e[c] ? a : d || (d = {}))[c] = b[c]);
        return d && m.extend(!0, a, d), a;
    }
    var na = [],
        T = b.document,
        bc = Object.getPrototypeOf,
        ab = na.slice,
        vb = na.concat,
        Gb = na.push,
        hb = na.indexOf,
        Hb = {},
        zc = Hb.toString,
        cc = Hb.hasOwnProperty,
        Ac = cc.toString,
        dc = Ac.call(Object),
        la = {},
        m = function (a, b) {
            return new m.fn.init(a, b);
        },
        Mc = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
        ec = /^-ms-/,
        N = /-([a-z])/g,
        wb = function (a, b) {
            return b.toUpperCase();
        };
    m.fn = m.prototype = {
        jquery: "3.2.1",
        constructor: m,
        length: 0,
        toArray: function () {
            return ab.call(this);
        },
        get: function (a) {
            return null == a ? ab.call(this) : 0 > a ? this[a + this.length] : this[a];
        },
        pushStack: function (a) {
            a = m.merge(this.constructor(), a);
            return (a.prevObject = this), a;
        },
        each: function (a) {
            return m.each(this, a);
        },
        map: function (a) {
            return this.pushStack(
                m.map(this, function (b, c) {
                    return a.call(b, c, b);
                })
            );
        },
        slice: function () {
            return this.pushStack(ab.apply(this, arguments));
        },
        first: function () {
            return this.eq(0);
        },
        last: function () {
            return this.eq(-1);
        },
        eq: function (a) {
            var b = this.length;
            a = +a + (0 > a ? b : 0);
            return this.pushStack(0 <= a && a < b ? [this[a]] : []);
        },
        end: function () {
            return this.prevObject || this.constructor();
        },
        push: Gb,
        sort: na.sort,
        splice: na.splice,
    };
    m.extend = m.fn.extend = function () {
        var a,
            b,
            c,
            d,
            e,
            f,
            g = arguments[0] || {},
            h = 1,
            k = arguments.length,
            l = !1;
        "boolean" == typeof g && ((l = g), (g = arguments[h] || {}), h++);
        "object" == typeof g || m.isFunction(g) || (g = {});
        for (h === k && ((g = this), h--); h < k; h++)
            if (null != (a = arguments[h]))
                for (b in a)
                    (c = g[b]),
                        (d = a[b]),
                        g !== d &&
                            (l && d && (m.isPlainObject(d) || (e = Array.isArray(d)))
                                ? (e ? ((e = !1), (f = c && Array.isArray(c) ? c : [])) : (f = c && m.isPlainObject(c) ? c : {}), (g[b] = m.extend(l, f, d)))
                                : void 0 !== d && (g[b] = d));
        return g;
    };
    m.extend({
        expando: "jQuery" + ("3.2.1" + Math.random()).replace(/\D/g, ""),
        isReady: !0,
        error: function (a) {
            throw Error(a);
        },
        noop: function () {},
        isFunction: function (a) {
            return "function" === m.type(a);
        },
        isWindow: function (a) {
            return null != a && a === a.window;
        },
        isNumeric: function (a) {
            var b = m.type(a);
            return ("number" === b || "string" === b) && !isNaN(a - parseFloat(a));
        },
        isPlainObject: function (a) {
            var b, c;
            return !(!a || "[object Object]" !== zc.call(a)) && (!(b = bc(a)) || ((c = cc.call(b, "constructor") && b.constructor), "function" == typeof c && Ac.call(c) === dc));
        },
        isEmptyObject: function (a) {
            for (var b in a) return !1;
            return !0;
        },
        type: function (a) {
            return null == a ? a + "" : "object" == typeof a || "function" == typeof a ? Hb[zc.call(a)] || "object" : typeof a;
        },
        globalEval: function (a) {
            c(a);
        },
        camelCase: function (a) {
            return a.replace(ec, "ms-").replace(N, wb);
        },
        each: function (a, b) {
            var c,
                e = 0;
            if (d(a)) for (c = a.length; e < c && !1 !== b.call(a[e], e, a[e]); e++);
            else for (e in a) if (!1 === b.call(a[e], e, a[e])) break;
            return a;
        },
        trim: function (a) {
            return null == a ? "" : (a + "").replace(Mc, "");
        },
        makeArray: function (a, b) {
            var c = b || [];
            return null != a && (d(Object(a)) ? m.merge(c, "string" == typeof a ? [a] : a) : Gb.call(c, a)), c;
        },
        inArray: function (a, b, c) {
            return null == b ? -1 : hb.call(b, a, c);
        },
        merge: function (a, b) {
            for (var c = +b.length, d = 0, e = a.length; d < c; d++) a[e++] = b[d];
            return (a.length = e), a;
        },
        grep: function (a, b, c) {
            for (var d = [], e = 0, f = a.length, g = !c; e < f; e++) (c = !b(a[e], e)), c !== g && d.push(a[e]);
            return d;
        },
        map: function (a, b, c) {
            var e,
                f,
                g = 0,
                h = [];
            if (d(a)) for (e = a.length; g < e; g++) (f = b(a[g], g, c)), null != f && h.push(f);
            else for (g in a) (f = b(a[g], g, c)), null != f && h.push(f);
            return vb.apply([], h);
        },
        guid: 1,
        proxy: function (a, b) {
            var c, d, e;
            if (("string" == typeof b && ((c = a[b]), (b = a), (a = c)), m.isFunction(a)))
                return (
                    (d = ab.call(arguments, 2)),
                    (e = function () {
                        return a.apply(b || this, d.concat(ab.call(arguments)));
                    }),
                    (e.guid = a.guid = a.guid || m.guid++),
                    e
                );
        },
        now: Date.now,
        support: la,
    });
    "function" == typeof Symbol && (m.fn[Symbol.iterator] = na[Symbol.iterator]);
    m.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (a, b) {
        Hb["[object " + b + "]"] = b.toLowerCase();
    });
    var Aa = (function (a) {
        function b(a, c, d, D) {
            var e,
                f,
                g,
                O,
                h,
                k = c && c.ownerDocument,
                Z = c ? c.nodeType : 9;
            if (((d = d || []), "string" != typeof a || !a || (1 !== Z && 9 !== Z && 11 !== Z))) return d;
            if (!D && ((c ? c.ownerDocument || c : L) !== N && A(c), (c = c || N), H)) {
                if (11 !== Z && (O = Gb.exec(a)))
                    if ((e = O[1]))
                        if (9 === Z) {
                            if (!(f = c.getElementById(e))) return d;
                            if (f.id === e) return d.push(f), d;
                        } else {
                            if (k && (f = k.getElementById(e)) && ca(c, f) && f.id === e) return d.push(f), d;
                        }
                    else {
                        if (O[2]) return Ka.apply(d, c.getElementsByTagName(a)), d;
                        if ((e = O[3]) && Q.getElementsByClassName && c.getElementsByClassName) return Ka.apply(d, c.getElementsByClassName(e)), d;
                    }
                if (!(!Q.qsa || E[a + " "] || (na && na.test(a)))) {
                    if (1 !== Z) (k = c), (h = a);
                    else if ("object" !== c.nodeName.toLowerCase()) {
                        (g = c.getAttribute("id")) ? (g = g.replace(fa, ia)) : c.setAttribute("id", (g = J));
                        f = B(a);
                        for (e = f.length; e--; ) f[e] = "#" + g + " " + u(f[e]);
                        h = f.join(",");
                        k = (cb.test(a) && q(c.parentNode)) || c;
                    }
                    if (h)
                        try {
                            return Ka.apply(d, k.querySelectorAll(h)), d;
                        } catch (l) {
                        } finally {
                            g === J && c.removeAttribute("id");
                        }
                }
            }
            return ma(a.replace(va, "$1"), c, d, D);
        }
        function c() {
            function a(c, d) {
                return b.push(c + " ") > M.cacheLength && delete a[b.shift()], (a[c + " "] = d);
            }
            var b = [];
            return a;
        }
        function d(a) {
            return (a[J] = !0), a;
        }
        function e(a) {
            var b = N.createElement("fieldset");
            try {
                return !!a(b);
            } catch (c) {
                return !1;
            } finally {
                b.parentNode && b.parentNode.removeChild(b);
            }
        }
        function f(a, b) {
            for (var c = a.split("|"), d = c.length; d--; ) M.attrHandle[c[d]] = b;
        }
        function g(a, b) {
            var c = b && a,
                d = c && 1 === a.nodeType && 1 === b.nodeType && a.sourceIndex - b.sourceIndex;
            if (d) return d;
            if (c) for (; (c = c.nextSibling); ) if (c === b) return -1;
            return a ? 1 : -1;
        }
        function h(a) {
            return function (b) {
                return "input" === b.nodeName.toLowerCase() && b.type === a;
            };
        }
        function k(a) {
            return function (b) {
                var c = b.nodeName.toLowerCase();
                return ("input" === c || "button" === c) && b.type === a;
            };
        }
        function l(a) {
            return function (b) {
                return "form" in b
                    ? b.parentNode && !1 === b.disabled
                        ? "label" in b
                            ? "label" in b.parentNode
                                ? b.parentNode.disabled === a
                                : b.disabled === a
                            : b.isDisabled === a || (b.isDisabled !== !a && ua(b) === a)
                        : b.disabled === a
                    : "label" in b && b.disabled === a;
            };
        }
        function n(a) {
            return d(function (b) {
                return (
                    (b = +b),
                    d(function (c, d) {
                        for (var D, e = a([], c.length, b), f = e.length; f--; ) c[(D = e[f])] && (c[D] = !(d[D] = c[D]));
                    })
                );
            });
        }
        function q(a) {
            return a && "undefined" != typeof a.getElementsByTagName && a;
        }
        function I() {}
        function u(a) {
            for (var b = 0, c = a.length, d = ""; b < c; b++) d += a[b].value;
            return d;
        }
        function r(a, b, c) {
            var d = b.dir,
                D = b.next,
                e = D || d,
                f = c && "parentNode" === e,
                g = ea++;
            return b.first
                ? function (b, c, D) {
                      for (; (b = b[d]); ) if (1 === b.nodeType || f) return a(b, c, D);
                      return !1;
                  }
                : function (b, c, O) {
                      var h,
                          k,
                          Z,
                          l = [T, g];
                      if (O)
                          for (; (b = b[d]); ) {
                              if ((1 === b.nodeType || f) && a(b, c, O)) return !0;
                          }
                      else
                          for (; (b = b[d]); )
                              if (1 === b.nodeType || f)
                                  if (((Z = b[J] || (b[J] = {})), (k = Z[b.uniqueID] || (Z[b.uniqueID] = {})), D && D === b.nodeName.toLowerCase())) b = b[d] || b;
                                  else {
                                      if ((h = k[e]) && h[0] === T && h[1] === g) return (l[2] = h[2]);
                                      if (((k[e] = l), (l[2] = a(b, c, O)))) return !0;
                                  }
                      return !1;
                  };
        }
        function x(a) {
            return 1 < a.length
                ? function (b, c, d) {
                      for (var D = a.length; D--; ) if (!a[D](b, c, d)) return !1;
                      return !0;
                  }
                : a[0];
        }
        function m(a, b, c, d, D) {
            for (var e, f = [], g = 0, O = a.length, h = null != b; g < O; g++) (e = a[g]) && ((c && !c(e, d, D)) || (f.push(e), h && b.push(g)));
            return f;
        }
        function Ca(a, c, e, f, g, O) {
            return (
                f && !f[J] && (f = Ca(f)),
                g && !g[J] && (g = Ca(g, O)),
                d(function (d, O, h, k) {
                    var Z,
                        l,
                        Qa = [],
                        sa = [],
                        n = O.length,
                        q;
                    if (!(q = d)) {
                        q = c || "*";
                        for (var da = h.nodeType ? [h] : h, Mb = [], I = 0, u = da.length; I < u; I++) b(q, da[I], Mb);
                        q = Mb;
                    }
                    q = !a || (!d && c) ? q : m(q, Qa, a, h, k);
                    da = e ? (g || (d ? a : n || f) ? [] : O) : q;
                    if ((e && e(q, da, h, k), f)) for (Z = m(da, sa), f(Z, [], h, k), h = Z.length; h--; ) (l = Z[h]) && (da[sa[h]] = !(q[sa[h]] = l));
                    if (d) {
                        if (g || a) {
                            if (g) {
                                Z = [];
                                for (h = da.length; h--; ) (l = da[h]) && Z.push((q[h] = l));
                                g(null, (da = []), Z, k);
                            }
                            for (h = da.length; h--; ) (l = da[h]) && -1 < (Z = g ? pa(d, l) : Qa[h]) && (d[Z] = !(O[Z] = l));
                        }
                    } else (da = m(da === O ? da.splice(n, da.length) : da)), g ? g(null, O, da, k) : Ka.apply(O, da);
                })
            );
        }
        function p(a) {
            var b,
                c,
                d,
                D = a.length,
                e = M.relative[a[0].type];
            c = e || M.relative[" "];
            for (
                var f = e ? 1 : 0,
                    g = r(
                        function (a) {
                            return a === b;
                        },
                        c,
                        !0
                    ),
                    O = r(
                        function (a) {
                            return -1 < pa(b, a);
                        },
                        c,
                        !0
                    ),
                    h = [
                        function (a, c, d) {
                            a = (!e && (d || c !== za)) || ((b = c).nodeType ? g(a, c, d) : O(a, c, d));
                            return (b = null), a;
                        },
                    ];
                f < D;
                f++
            )
                if ((c = M.relative[a[f].type])) h = [r(x(h), c)];
                else {
                    if (((c = M.filter[a[f].type].apply(null, a[f].matches)), c[J])) {
                        for (d = ++f; d < D && !M.relative[a[d].type]; d++);
                        return Ca(1 < f && x(h), 1 < f && u(a.slice(0, f - 1).concat({ value: " " === a[f - 2].type ? "*" : "" })).replace(va, "$1"), c, f < d && p(a.slice(f, d)), d < D && p((a = a.slice(d))), d < D && u(a));
                    }
                    h.push(c);
                }
            return x(h);
        }
        function w(a, c) {
            var e = 0 < c.length,
                f = 0 < a.length,
                g = function (d, g, O, h, k) {
                    var Z,
                        l,
                        Qa,
                        sa = 0,
                        n = "0",
                        q = d && [],
                        da = [],
                        Mb = za,
                        I = d || (f && M.find.TAG("*", k)),
                        u = (T += null == Mb ? 1 : Math.random() || 0.1),
                        r = I.length;
                    for (k && (za = g === N || g || k); n !== r && null != (Z = I[n]); n++) {
                        if (f && Z) {
                            l = 0;
                            for (g || Z.ownerDocument === N || (A(Z), (O = !H)); (Qa = a[l++]); )
                                if (Qa(Z, g || N, O)) {
                                    h.push(Z);
                                    break;
                                }
                            k && (T = u);
                        }
                        e && ((Z = !Qa && Z) && sa--, d && q.push(Z));
                    }
                    if (((sa += n), e && n !== sa)) {
                        for (l = 0; (Qa = c[l++]); ) Qa(q, da, g, O);
                        if (d) {
                            if (0 < sa) for (; n--; ) q[n] || da[n] || (da[n] = Sa.call(h));
                            da = m(da);
                        }
                        Ka.apply(h, da);
                        k && !d && 0 < da.length && 1 < sa + c.length && b.uniqueSort(h);
                    }
                    return k && ((T = u), (za = Mb)), q;
                };
            return e ? d(g) : g;
        }
        var v,
            Q,
            M,
            t,
            z,
            B,
            y,
            ma,
            za,
            C,
            ta,
            A,
            N,
            G,
            H,
            na,
            aa,
            Ba,
            ca,
            J = "sizzle" + 1 * new Date(),
            L = a.document,
            T = 0,
            ea = 0,
            Aa = c(),
            wb = c(),
            E = c(),
            ga = function (a, b) {
                return a === b && (ta = !0), 0;
            },
            bc = {}.hasOwnProperty,
            ha = [],
            Sa = ha.pop,
            W = ha.push,
            Ka = ha.push,
            vb = ha.slice,
            pa = function (a, b) {
                for (var c = 0, d = a.length; c < d; c++) if (a[c] === b) return c;
                return -1;
            },
            X = /[\x20\t\r\n\f]+/g,
            va = /^[\x20\t\r\n\f]+|((?:^|[^\\])(?:\\.)*)[\x20\t\r\n\f]+$/g,
            ra = /^[\x20\t\r\n\f]*,[\x20\t\r\n\f]*/,
            ab = /^[\x20\t\r\n\f]*([>+~]|[\x20\t\r\n\f])[\x20\t\r\n\f]*/,
            U = /=[\x20\t\r\n\f]*([^\]'"]*?)[\x20\t\r\n\f]*\]/g,
            V = /:((?:\\.|[\w-]|[^\x00-\xa0])+)(?:\((('((?:\\.|[^\\'])*)'|"((?:\\.|[^\\"])*)")|((?:\\.|[^\\()[\]]|\[[\x20\t\r\n\f]*((?:\\.|[\w-]|[^\x00-\xa0])+)(?:[\x20\t\r\n\f]*([*^$|!~]?=)[\x20\t\r\n\f]*(?:'((?:\\.|[^\\'])*)'|"((?:\\.|[^\\"])*)"|((?:\\.|[\w-]|[^\x00-\xa0])+))|)[\x20\t\r\n\f]*\])*)|.*)\)|)/,
            xb = /^(?:\\.|[\w-]|[^\x00-\xa0])+$/,
            jb = {
                ID: /^#((?:\\.|[\w-]|[^\x00-\xa0])+)/,
                CLASS: /^\.((?:\\.|[\w-]|[^\x00-\xa0])+)/,
                TAG: /^((?:\\.|[\w-]|[^\x00-\xa0])+|[*])/,
                ATTR: /^\[[\x20\t\r\n\f]*((?:\\.|[\w-]|[^\x00-\xa0])+)(?:[\x20\t\r\n\f]*([*^$|!~]?=)[\x20\t\r\n\f]*(?:'((?:\\.|[^\\'])*)'|"((?:\\.|[^\\"])*)"|((?:\\.|[\w-]|[^\x00-\xa0])+))|)[\x20\t\r\n\f]*\]/,
                PSEUDO: /^:((?:\\.|[\w-]|[^\x00-\xa0])+)(?:\((('((?:\\.|[^\\'])*)'|"((?:\\.|[^\\"])*)")|((?:\\.|[^\\()[\]]|\[[\x20\t\r\n\f]*((?:\\.|[\w-]|[^\x00-\xa0])+)(?:[\x20\t\r\n\f]*([*^$|!~]?=)[\x20\t\r\n\f]*(?:'((?:\\.|[^\\'])*)'|"((?:\\.|[^\\"])*)"|((?:\\.|[\w-]|[^\x00-\xa0])+))|)[\x20\t\r\n\f]*\])*)|.*)\)|)/,
                CHILD: /^:(only|first|last|nth|nth-last)-(child|of-type)(?:\([\x20\t\r\n\f]*(even|odd|(([+-]|)(\d*)n|)[\x20\t\r\n\f]*(?:([+-]|)[\x20\t\r\n\f]*(\d+)|))[\x20\t\r\n\f]*\)|)/i,
                bool: /^(?:checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped)$/i,
                needsContext: /^[\x20\t\r\n\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\([\x20\t\r\n\f]*((?:-\d)?\d*)[\x20\t\r\n\f]*\)|)(?=[^-]|$)/i,
            },
            wa = /^(?:input|select|textarea|button)$/i,
            pc = /^h\d$/i,
            hb = /^[^{]+\{\s*\[native \w/,
            Gb = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
            cb = /[+~]/,
            bb = /\\([\da-f]{1,6}[\x20\t\r\n\f]?|([\x20\t\r\n\f])|.)/gi,
            Ra = function (a, b, c) {
                a = "0x" + b - 65536;
                return a !== a || c ? b : 0 > a ? String.fromCharCode(a + 65536) : String.fromCharCode((a >> 10) | 55296, (1023 & a) | 56320);
            },
            fa = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
            ia = function (a, b) {
                return b ? ("\x00" === a ? "\ufffd" : a.slice(0, -1) + "\\" + a.charCodeAt(a.length - 1).toString(16) + " ") : "\\" + a;
            },
            la = function () {
                A();
            },
            ua = r(
                function (a) {
                    return !0 === a.disabled && ("form" in a || "label" in a);
                },
                { dir: "parentNode", next: "legend" }
            );
        try {
            Ka.apply((ha = vb.call(L.childNodes)), L.childNodes), ha[L.childNodes.length].nodeType;
        } catch (Yi) {
            Ka = {
                apply: ha.length
                    ? function (a, b) {
                          W.apply(a, vb.call(b));
                      }
                    : function (a, b) {
                          for (var c = a.length, d = 0; (a[c++] = b[d++]); );
                          a.length = c - 1;
                      },
            };
        }
        Q = b.support = {};
        z = b.isXML = function (a) {
            a = a && (a.ownerDocument || a).documentElement;
            return !!a && "HTML" !== a.nodeName;
        };
        A = b.setDocument = function (a) {
            var b, c;
            a = a ? a.ownerDocument || a : L;
            return a !== N && 9 === a.nodeType && a.documentElement
                ? ((N = a),
                  (G = N.documentElement),
                  (H = !z(N)),
                  L !== N && (c = N.defaultView) && c.top !== c && (c.addEventListener ? c.addEventListener("unload", la, !1) : c.attachEvent && c.attachEvent("onunload", la)),
                  (Q.attributes = e(function (a) {
                      return (a.className = "i"), !a.getAttribute("className");
                  })),
                  (Q.getElementsByTagName = e(function (a) {
                      return a.appendChild(N.createComment("")), !a.getElementsByTagName("*").length;
                  })),
                  (Q.getElementsByClassName = hb.test(N.getElementsByClassName)),
                  (Q.getById = e(function (a) {
                      return (G.appendChild(a).id = J), !N.getElementsByName || !N.getElementsByName(J).length;
                  })),
                  Q.getById
                      ? ((M.filter.ID = function (a) {
                            var b = a.replace(bb, Ra);
                            return function (a) {
                                return a.getAttribute("id") === b;
                            };
                        }),
                        (M.find.ID = function (a, b) {
                            if ("undefined" != typeof b.getElementById && H) {
                                var c = b.getElementById(a);
                                return c ? [c] : [];
                            }
                        }))
                      : ((M.filter.ID = function (a) {
                            var b = a.replace(bb, Ra);
                            return function (a) {
                                return (a = "undefined" != typeof a.getAttributeNode && a.getAttributeNode("id")) && a.value === b;
                            };
                        }),
                        (M.find.ID = function (a, b) {
                            if ("undefined" != typeof b.getElementById && H) {
                                var c,
                                    d,
                                    D,
                                    e = b.getElementById(a);
                                if (e) {
                                    if (((c = e.getAttributeNode("id")), c && c.value === a)) return [e];
                                    D = b.getElementsByName(a);
                                    for (d = 0; (e = D[d++]); ) if (((c = e.getAttributeNode("id")), c && c.value === a)) return [e];
                                }
                                return [];
                            }
                        })),
                  (M.find.TAG = Q.getElementsByTagName
                      ? function (a, b) {
                            return "undefined" != typeof b.getElementsByTagName ? b.getElementsByTagName(a) : Q.qsa ? b.querySelectorAll(a) : void 0;
                        }
                      : function (a, b) {
                            var c,
                                d = [],
                                D = 0,
                                e = b.getElementsByTagName(a);
                            if ("*" === a) {
                                for (; (c = e[D++]); ) 1 === c.nodeType && d.push(c);
                                return d;
                            }
                            return e;
                        }),
                  (M.find.CLASS =
                      Q.getElementsByClassName &&
                      function (a, b) {
                          if ("undefined" != typeof b.getElementsByClassName && H) return b.getElementsByClassName(a);
                      }),
                  (aa = []),
                  (na = []),
                  (Q.qsa = hb.test(N.querySelectorAll)) &&
                      (e(function (a) {
                          G.appendChild(a).innerHTML = "<a id='" + J + "'></a><select id='" + J + "-\r\\' msallowcapture=''><option selected=''></option></select>";
                          a.querySelectorAll("[msallowcapture^='']").length && na.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")");
                          a.querySelectorAll("[selected]").length || na.push("\\[[\\x20\\t\\r\\n\\f]*(?:value|checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped)");
                          a.querySelectorAll("[id~=" + J + "-]").length || na.push("~=");
                          a.querySelectorAll(":checked").length || na.push(":checked");
                          a.querySelectorAll("a#" + J + "+*").length || na.push(".#.+[+~]");
                      }),
                      e(function (a) {
                          a.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";
                          var b = N.createElement("input");
                          b.setAttribute("type", "hidden");
                          a.appendChild(b).setAttribute("name", "D");
                          a.querySelectorAll("[name=d]").length && na.push("name[\\x20\\t\\r\\n\\f]*[*^$|!~]?=");
                          2 !== a.querySelectorAll(":enabled").length && na.push(":enabled", ":disabled");
                          G.appendChild(a).disabled = !0;
                          2 !== a.querySelectorAll(":disabled").length && na.push(":enabled", ":disabled");
                          a.querySelectorAll("*,:x");
                          na.push(",.*:");
                      })),
                  (Q.matchesSelector = hb.test((Ba = G.matches || G.webkitMatchesSelector || G.mozMatchesSelector || G.oMatchesSelector || G.msMatchesSelector))) &&
                      e(function (a) {
                          Q.disconnectedMatch = Ba.call(a, "*");
                          Ba.call(a, "[s!='']:x");
                          aa.push(
                              "!=",
                              ":((?:\\\\.|[\\w-]|[^\x00-\\xa0])+)(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|\\[[\\x20\\t\\r\\n\\f]*((?:\\\\.|[\\w-]|[^\x00-\\xa0])+)(?:[\\x20\\t\\r\\n\\f]*([*^$|!~]?=)[\\x20\\t\\r\\n\\f]*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|((?:\\\\.|[\\w-]|[^\x00-\\xa0])+))|)[\\x20\\t\\r\\n\\f]*\\])*)|.*)\\)|)"
                          );
                      }),
                  (na = na.length && new RegExp(na.join("|"))),
                  (aa = aa.length && new RegExp(aa.join("|"))),
                  (b = hb.test(G.compareDocumentPosition)),
                  (ca =
                      b || hb.test(G.contains)
                          ? function (a, b) {
                                var c = 9 === a.nodeType ? a.documentElement : a,
                                    d = b && b.parentNode;
                                return a === d || !(!d || 1 !== d.nodeType || !(c.contains ? c.contains(d) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(d)));
                            }
                          : function (a, b) {
                                if (b) for (; (b = b.parentNode); ) if (b === a) return !0;
                                return !1;
                            }),
                  (ga = b
                      ? function (a, b) {
                            if (a === b) return (ta = !0), 0;
                            var c = !a.compareDocumentPosition - !b.compareDocumentPosition;
                            return c
                                ? c
                                : ((c = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1),
                                  1 & c || (!Q.sortDetached && b.compareDocumentPosition(a) === c)
                                      ? a === N || (a.ownerDocument === L && ca(L, a))
                                          ? -1
                                          : b === N || (b.ownerDocument === L && ca(L, b))
                                          ? 1
                                          : C
                                          ? pa(C, a) - pa(C, b)
                                          : 0
                                      : 4 & c
                                      ? -1
                                      : 1);
                        }
                      : function (a, b) {
                            if (a === b) return (ta = !0), 0;
                            var c,
                                d = 0;
                            c = a.parentNode;
                            var D = b.parentNode,
                                e = [a],
                                f = [b];
                            if (!c || !D) return a === N ? -1 : b === N ? 1 : c ? -1 : D ? 1 : C ? pa(C, a) - pa(C, b) : 0;
                            if (c === D) return g(a, b);
                            for (c = a; (c = c.parentNode); ) e.unshift(c);
                            for (c = b; (c = c.parentNode); ) f.unshift(c);
                            for (; e[d] === f[d]; ) d++;
                            return d ? g(e[d], f[d]) : e[d] === L ? -1 : f[d] === L ? 1 : 0;
                        }),
                  N)
                : N;
        };
        b.matches = function (a, c) {
            return b(a, null, null, c);
        };
        b.matchesSelector = function (a, c) {
            if (((a.ownerDocument || a) !== N && A(a), (c = c.replace(U, "='$1']")), !(!Q.matchesSelector || !H || E[c + " "] || (aa && aa.test(c)) || (na && na.test(c)))))
                try {
                    var d = Ba.call(a, c);
                    if (d || Q.disconnectedMatch || (a.document && 11 !== a.document.nodeType)) return d;
                } catch (e) {}
            return 0 < b(c, N, null, [a]).length;
        };
        b.contains = function (a, b) {
            return (a.ownerDocument || a) !== N && A(a), ca(a, b);
        };
        b.attr = function (a, b) {
            (a.ownerDocument || a) !== N && A(a);
            var c = M.attrHandle[b.toLowerCase()],
                c = c && bc.call(M.attrHandle, b.toLowerCase()) ? c(a, b, !H) : void 0;
            return void 0 !== c ? c : Q.attributes || !H ? a.getAttribute(b) : (c = a.getAttributeNode(b)) && c.specified ? c.value : null;
        };
        b.escape = function (a) {
            return (a + "").replace(fa, ia);
        };
        b.error = function (a) {
            throw Error("Syntax error, unrecognized expression: " + a);
        };
        b.uniqueSort = function (a) {
            var b,
                c = [],
                d = 0,
                D = 0;
            if (((ta = !Q.detectDuplicates), (C = !Q.sortStable && a.slice(0)), a.sort(ga), ta)) {
                for (; (b = a[D++]); ) b === a[D] && (d = c.push(D));
                for (; d--; ) a.splice(c[d], 1);
            }
            return (C = null), a;
        };
        t = b.getText = function (a) {
            var b,
                c = "",
                d = 0;
            if ((b = a.nodeType))
                if (1 === b || 9 === b || 11 === b) {
                    if ("string" == typeof a.textContent) return a.textContent;
                    for (a = a.firstChild; a; a = a.nextSibling) c += t(a);
                } else {
                    if (3 === b || 4 === b) return a.nodeValue;
                }
            else for (; (b = a[d++]); ) c += t(b);
            return c;
        };
        M = b.selectors = {
            cacheLength: 50,
            createPseudo: d,
            match: jb,
            attrHandle: {},
            find: {},
            relative: { ">": { dir: "parentNode", first: !0 }, " ": { dir: "parentNode" }, "+": { dir: "previousSibling", first: !0 }, "~": { dir: "previousSibling" } },
            preFilter: {
                ATTR: function (a) {
                    return (a[1] = a[1].replace(bb, Ra)), (a[3] = (a[3] || a[4] || a[5] || "").replace(bb, Ra)), "~=" === a[2] && (a[3] = " " + a[3] + " "), a.slice(0, 4);
                },
                CHILD: function (a) {
                    return (
                        (a[1] = a[1].toLowerCase()),
                        "nth" === a[1].slice(0, 3) ? (a[3] || b.error(a[0]), (a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * ("even" === a[3] || "odd" === a[3]))), (a[5] = +(a[7] + a[8] || "odd" === a[3]))) : a[3] && b.error(a[0]),
                        a
                    );
                },
                PSEUDO: function (a) {
                    var b,
                        c = !a[6] && a[2];
                    return jb.CHILD.test(a[0])
                        ? null
                        : (a[3] ? (a[2] = a[4] || a[5] || "") : c && V.test(c) && (b = B(c, !0)) && (b = c.indexOf(")", c.length - b) - c.length) && ((a[0] = a[0].slice(0, b)), (a[2] = c.slice(0, b))), a.slice(0, 3));
                },
            },
            filter: {
                TAG: function (a) {
                    var b = a.replace(bb, Ra).toLowerCase();
                    return "*" === a
                        ? function () {
                              return !0;
                          }
                        : function (a) {
                              return a.nodeName && a.nodeName.toLowerCase() === b;
                          };
                },
                CLASS: function (a) {
                    var b = Aa[a + " "];
                    return (
                        b ||
                        ((b = new RegExp("(^|[\\x20\\t\\r\\n\\f])" + a + "([\\x20\\t\\r\\n\\f]|$)")) &&
                            Aa(a, function (a) {
                                return b.test(("string" == typeof a.className && a.className) || ("undefined" != typeof a.getAttribute && a.getAttribute("class")) || "");
                            }))
                    );
                },
                ATTR: function (a, c, d) {
                    return function (e) {
                        e = b.attr(e, a);
                        return null == e
                            ? "!=" === c
                            : !c ||
                                  ((e += ""),
                                  "=" === c
                                      ? e === d
                                      : "!=" === c
                                      ? e !== d
                                      : "^=" === c
                                      ? d && 0 === e.indexOf(d)
                                      : "*=" === c
                                      ? d && -1 < e.indexOf(d)
                                      : "$=" === c
                                      ? d && e.slice(-d.length) === d
                                      : "~=" === c
                                      ? -1 < (" " + e.replace(X, " ") + " ").indexOf(d)
                                      : "|=" === c && (e === d || e.slice(0, d.length + 1) === d + "-"));
                    };
                },
                CHILD: function (a, b, c, d, D) {
                    var e = "nth" !== a.slice(0, 3),
                        f = "last" !== a.slice(-4),
                        g = "of-type" === b;
                    return 1 === d && 0 === D
                        ? function (a) {
                              return !!a.parentNode;
                          }
                        : function (b, c, O) {
                              var h, k, Z, l, Qa, sa;
                              c = e !== f ? "nextSibling" : "previousSibling";
                              var n = b.parentNode,
                                  da = g && b.nodeName.toLowerCase();
                              O = !O && !g;
                              var q = !1;
                              if (n) {
                                  if (e) {
                                      for (; c; ) {
                                          for (l = b; (l = l[c]); ) if (g ? l.nodeName.toLowerCase() === da : 1 === l.nodeType) return !1;
                                          sa = c = "only" === a && !sa && "nextSibling";
                                      }
                                      return !0;
                                  }
                                  if (((sa = [f ? n.firstChild : n.lastChild]), f && O))
                                      for (
                                          l = n, Z = l[J] || (l[J] = {}), k = Z[l.uniqueID] || (Z[l.uniqueID] = {}), h = k[a] || [], q = (Qa = h[0] === T && h[1]) && h[2], l = Qa && n.childNodes[Qa];
                                          (l = (++Qa && l && l[c]) || (q = Qa = 0) || sa.pop());

                                      ) {
                                          if (1 === l.nodeType && ++q && l === b) {
                                              k[a] = [T, Qa, q];
                                              break;
                                          }
                                      }
                                  else if ((O && ((l = b), (Z = l[J] || (l[J] = {})), (k = Z[l.uniqueID] || (Z[l.uniqueID] = {})), (h = k[a] || []), (Qa = h[0] === T && h[1]), (q = Qa)), !1 === q))
                                      for (
                                          ;
                                          (l = (++Qa && l && l[c]) || (q = Qa = 0) || sa.pop()) &&
                                          ((g ? l.nodeName.toLowerCase() !== da : 1 !== l.nodeType) || !++q || (O && ((Z = l[J] || (l[J] = {})), (k = Z[l.uniqueID] || (Z[l.uniqueID] = {})), (k[a] = [T, q])), l !== b));

                                      );
                                  return (q -= D), q === d || (0 === q % d && 0 <= q / d);
                              }
                          };
                },
                PSEUDO: function (a, c) {
                    var e,
                        f = M.pseudos[a] || M.setFilters[a.toLowerCase()] || b.error("unsupported pseudo: " + a);
                    return f[J]
                        ? f(c)
                        : 1 < f.length
                        ? ((e = [a, a, "", c]),
                          M.setFilters.hasOwnProperty(a.toLowerCase())
                              ? d(function (a, b) {
                                    for (var d, D = f(a, c), e = D.length; e--; ) (d = pa(a, D[e])), (a[d] = !(b[d] = D[e]));
                                })
                              : function (a) {
                                    return f(a, 0, e);
                                })
                        : f;
                },
            },
            pseudos: {
                not: d(function (a) {
                    var b = [],
                        c = [],
                        D = y(a.replace(va, "$1"));
                    return D[J]
                        ? d(function (a, b, c, d) {
                              var e;
                              c = D(a, null, d, []);
                              for (d = a.length; d--; ) (e = c[d]) && (a[d] = !(b[d] = e));
                          })
                        : function (a, d, e) {
                              return (b[0] = a), D(b, null, e, c), (b[0] = null), !c.pop();
                          };
                }),
                has: d(function (a) {
                    return function (c) {
                        return 0 < b(a, c).length;
                    };
                }),
                contains: d(function (a) {
                    return (
                        (a = a.replace(bb, Ra)),
                        function (b) {
                            return -1 < (b.textContent || b.innerText || t(b)).indexOf(a);
                        }
                    );
                }),
                lang: d(function (a) {
                    return (
                        xb.test(a || "") || b.error("unsupported lang: " + a),
                        (a = a.replace(bb, Ra).toLowerCase()),
                        function (b) {
                            var c;
                            do if ((c = H ? b.lang : b.getAttribute("xml:lang") || b.getAttribute("lang"))) return (c = c.toLowerCase()), c === a || 0 === c.indexOf(a + "-");
                            while ((b = b.parentNode) && 1 === b.nodeType);
                            return !1;
                        }
                    );
                }),
                target: function (b) {
                    var c = a.location && a.location.hash;
                    return c && c.slice(1) === b.id;
                },
                root: function (a) {
                    return a === G;
                },
                focus: function (a) {
                    return a === N.activeElement && (!N.hasFocus || N.hasFocus()) && !!(a.type || a.href || ~a.tabIndex);
                },
                enabled: l(!1),
                disabled: l(!0),
                checked: function (a) {
                    var b = a.nodeName.toLowerCase();
                    return ("input" === b && !!a.checked) || ("option" === b && !!a.selected);
                },
                selected: function (a) {
                    return a.parentNode && a.parentNode.selectedIndex, !0 === a.selected;
                },
                empty: function (a) {
                    for (a = a.firstChild; a; a = a.nextSibling) if (6 > a.nodeType) return !1;
                    return !0;
                },
                parent: function (a) {
                    return !M.pseudos.empty(a);
                },
                header: function (a) {
                    return pc.test(a.nodeName);
                },
                input: function (a) {
                    return wa.test(a.nodeName);
                },
                button: function (a) {
                    var b = a.nodeName.toLowerCase();
                    return ("input" === b && "button" === a.type) || "button" === b;
                },
                text: function (a) {
                    var b;
                    return "input" === a.nodeName.toLowerCase() && "text" === a.type && (null == (b = a.getAttribute("type")) || "text" === b.toLowerCase());
                },
                first: n(function () {
                    return [0];
                }),
                last: n(function (a, b) {
                    return [b - 1];
                }),
                eq: n(function (a, b, c) {
                    return [0 > c ? c + b : c];
                }),
                even: n(function (a, b) {
                    for (var c = 0; c < b; c += 2) a.push(c);
                    return a;
                }),
                odd: n(function (a, b) {
                    for (var c = 1; c < b; c += 2) a.push(c);
                    return a;
                }),
                lt: n(function (a, b, c) {
                    for (b = 0 > c ? c + b : c; 0 <= --b; ) a.push(b);
                    return a;
                }),
                gt: n(function (a, b, c) {
                    for (c = 0 > c ? c + b : c; ++c < b; ) a.push(c);
                    return a;
                }),
            },
        };
        M.pseudos.nth = M.pseudos.eq;
        for (v in { radio: !0, checkbox: !0, file: !0, password: !0, image: !0 }) M.pseudos[v] = h(v);
        for (v in { submit: !0, reset: !0 }) M.pseudos[v] = k(v);
        I.prototype = M.filters = M.pseudos;
        M.setFilters = new I();
        B = b.tokenize = function (a, c) {
            var d, e, f, g, O, h, k;
            if ((O = wb[a + " "])) return c ? 0 : O.slice(0);
            O = a;
            h = [];
            for (k = M.preFilter; O; ) {
                (d && !(e = ra.exec(O))) || (e && (O = O.slice(e[0].length) || O), h.push((f = [])));
                d = !1;
                (e = ab.exec(O)) && ((d = e.shift()), f.push({ value: d, type: e[0].replace(va, " ") }), (O = O.slice(d.length)));
                for (g in M.filter) !(e = jb[g].exec(O)) || (k[g] && !(e = k[g](e))) || ((d = e.shift()), f.push({ value: d, type: g, matches: e }), (O = O.slice(d.length)));
                if (!d) break;
            }
            return c ? O.length : O ? b.error(a) : wb(a, h).slice(0);
        };
        return (
            (y = b.compile = function (a, b) {
                var c,
                    d = [],
                    D = [],
                    e = E[a + " "];
                if (!e) {
                    b || (b = B(a));
                    for (c = b.length; c--; ) (e = p(b[c])), e[J] ? d.push(e) : D.push(e);
                    e = E(a, w(D, d));
                    e.selector = a;
                }
                return e;
            }),
            (ma = b.select = function (a, b, c, d) {
                var D,
                    e,
                    f,
                    g,
                    O,
                    h = "function" == typeof a && a,
                    k = !d && B((a = h.selector || a));
                if (((c = c || []), 1 === k.length)) {
                    if (((e = k[0] = k[0].slice(0)), 2 < e.length && "ID" === (f = e[0]).type && 9 === b.nodeType && H && M.relative[e[1].type])) {
                        if (((b = (M.find.ID(f.matches[0].replace(bb, Ra), b) || [])[0]), !b)) return c;
                        h && (b = b.parentNode);
                        a = a.slice(e.shift().value.length);
                    }
                    for (D = jb.needsContext.test(a) ? 0 : e.length; D-- && ((f = e[D]), !M.relative[(g = f.type)]); )
                        if ((O = M.find[g]) && (d = O(f.matches[0].replace(bb, Ra), (cb.test(e[0].type) && q(b.parentNode)) || b))) {
                            if ((e.splice(D, 1), (a = d.length && u(e)), !a)) return Ka.apply(c, d), c;
                            break;
                        }
                }
                return (h || y(a, k))(d, b, !H, c, !b || (cb.test(a) && q(b.parentNode)) || b), c;
            }),
            (Q.sortStable = J.split("").sort(ga).join("") === J),
            (Q.detectDuplicates = !!ta),
            A(),
            (Q.sortDetached = e(function (a) {
                return 1 & a.compareDocumentPosition(N.createElement("fieldset"));
            })),
            e(function (a) {
                return (a.innerHTML = "<a href='#'></a>"), "#" === a.firstChild.getAttribute("href");
            }) ||
                f("type|href|height|width", function (a, b, c) {
                    if (!c) return a.getAttribute(b, "type" === b.toLowerCase() ? 1 : 2);
                }),
            (Q.attributes &&
                e(function (a) {
                    return (a.innerHTML = "<input/>"), a.firstChild.setAttribute("value", ""), "" === a.firstChild.getAttribute("value");
                })) ||
                f("value", function (a, b, c) {
                    if (!c && "input" === a.nodeName.toLowerCase()) return a.defaultValue;
                }),
            e(function (a) {
                return null == a.getAttribute("disabled");
            }) ||
                f("checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", function (a, b, c) {
                    var d;
                    if (!c) return !0 === a[b] ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null;
                }),
            b
        );
    })(b);
    m.find = Aa;
    m.expr = Aa.selectors;
    m.expr[":"] = m.expr.pseudos;
    m.uniqueSort = m.unique = Aa.uniqueSort;
    m.text = Aa.getText;
    m.isXMLDoc = Aa.isXML;
    m.contains = Aa.contains;
    m.escapeSelector = Aa.escape;
    var xb = function (a, b, c) {
            for (var d = [], e = void 0 !== c; (a = a[b]) && 9 !== a.nodeType; )
                if (1 === a.nodeType) {
                    if (e && m(a).is(c)) break;
                    d.push(a);
                }
            return d;
        },
        bb = function (a, b) {
            for (var c = []; a; a = a.nextSibling) 1 === a.nodeType && a !== b && c.push(a);
            return c;
        },
        cb = m.expr.match.needsContext,
        pc = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,
        Ra = /^.[^:#\[\.,]*$/;
    m.filter = function (a, b, c) {
        var d = b[0];
        return (
            c && (a = ":not(" + a + ")"),
            1 === b.length && 1 === d.nodeType
                ? m.find.matchesSelector(d, a)
                    ? [d]
                    : []
                : m.find.matches(
                      a,
                      m.grep(b, function (a) {
                          return 1 === a.nodeType;
                      })
                  )
        );
    };
    m.fn.extend({
        find: function (a) {
            var b,
                c,
                d = this.length,
                e = this;
            if ("string" != typeof a)
                return this.pushStack(
                    m(a).filter(function () {
                        for (b = 0; b < d; b++) if (m.contains(e[b], this)) return !0;
                    })
                );
            c = this.pushStack([]);
            for (b = 0; b < d; b++) m.find(a, e[b], c);
            return 1 < d ? m.uniqueSort(c) : c;
        },
        filter: function (a) {
            return this.pushStack(g(this, a || [], !1));
        },
        not: function (a) {
            return this.pushStack(g(this, a || [], !0));
        },
        is: function (a) {
            return !!g(this, "string" == typeof a && cb.test(a) ? m(a) : a || [], !1).length;
        },
    });
    var Ib,
        jb = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;
    (m.fn.init = function (a, b, c) {
        var d, e;
        if (!a) return this;
        if (((c = c || Ib), "string" == typeof a)) {
            if (((d = "<" === a[0] && ">" === a[a.length - 1] && 3 <= a.length ? [null, a, null] : jb.exec(a)), !d || (!d[1] && b))) return !b || b.jquery ? (b || c).find(a) : this.constructor(b).find(a);
            if (d[1]) {
                if (((b = b instanceof m ? b[0] : b), m.merge(this, m.parseHTML(d[1], b && b.nodeType ? b.ownerDocument || b : T, !0)), pc.test(d[1]) && m.isPlainObject(b)))
                    for (d in b) m.isFunction(this[d]) ? this[d](b[d]) : this.attr(d, b[d]);
                return this;
            }
            return (e = T.getElementById(d[2])), e && ((this[0] = e), (this.length = 1)), this;
        }
        return a.nodeType ? ((this[0] = a), (this.length = 1), this) : m.isFunction(a) ? (void 0 !== c.ready ? c.ready(a) : a(m)) : m.makeArray(a, this);
    }).prototype = m.fn;
    Ib = m(T);
    var gd = /^(?:parents|prev(?:Until|All))/,
        hd = { children: !0, contents: !0, next: !0, prev: !0 };
    m.fn.extend({
        has: function (a) {
            var b = m(a, this),
                c = b.length;
            return this.filter(function () {
                for (var a = 0; a < c; a++) if (m.contains(this, b[a])) return !0;
            });
        },
        closest: function (a, b) {
            var c,
                d = 0,
                e = this.length,
                f = [],
                g = "string" != typeof a && m(a);
            if (!cb.test(a))
                for (; d < e; d++)
                    for (c = this[d]; c && c !== b; c = c.parentNode)
                        if (11 > c.nodeType && (g ? -1 < g.index(c) : 1 === c.nodeType && m.find.matchesSelector(c, a))) {
                            f.push(c);
                            break;
                        }
            return this.pushStack(1 < f.length ? m.uniqueSort(f) : f);
        },
        index: function (a) {
            return a ? ("string" == typeof a ? hb.call(m(a), this[0]) : hb.call(this, a.jquery ? a[0] : a)) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
        },
        add: function (a, b) {
            return this.pushStack(m.uniqueSort(m.merge(this.get(), m(a, b))));
        },
        addBack: function (a) {
            return this.add(null == a ? this.prevObject : this.prevObject.filter(a));
        },
    });
    m.each(
        {
            parent: function (a) {
                return (a = a.parentNode) && 11 !== a.nodeType ? a : null;
            },
            parents: function (a) {
                return xb(a, "parentNode");
            },
            parentsUntil: function (a, b, c) {
                return xb(a, "parentNode", c);
            },
            next: function (a) {
                return f(a, "nextSibling");
            },
            prev: function (a) {
                return f(a, "previousSibling");
            },
            nextAll: function (a) {
                return xb(a, "nextSibling");
            },
            prevAll: function (a) {
                return xb(a, "previousSibling");
            },
            nextUntil: function (a, b, c) {
                return xb(a, "nextSibling", c);
            },
            prevUntil: function (a, b, c) {
                return xb(a, "previousSibling", c);
            },
            siblings: function (a) {
                return bb((a.parentNode || {}).firstChild, a);
            },
            children: function (a) {
                return bb(a.firstChild);
            },
            contents: function (a) {
                return e(a, "iframe") ? a.contentDocument : (e(a, "template") && (a = a.content || a), m.merge([], a.childNodes));
            },
        },
        function (a, b) {
            m.fn[a] = function (c, d) {
                var e = m.map(this, b, c);
                return "Until" !== a.slice(-5) && (d = c), d && "string" == typeof d && (e = m.filter(d, e)), 1 < this.length && (hd[a] || m.uniqueSort(e), gd.test(a) && e.reverse()), this.pushStack(e);
            };
        }
    );
    var X = /[^\x20\t\r\n\f]+/g;
    m.Callbacks = function (a) {
        a = "string" == typeof a ? k(a) : m.extend({}, a);
        var b,
            c,
            d,
            e,
            f = [],
            g = [],
            h = -1,
            l = function () {
                e = e || a.once;
                for (d = b = !0; g.length; h = -1) for (c = g.shift(); ++h < f.length; ) !1 === f[h].apply(c[0], c[1]) && a.stopOnFalse && ((h = f.length), (c = !1));
                a.memory || (c = !1);
                b = !1;
                e && (f = c ? [] : "");
            },
            n = {
                add: function () {
                    return (
                        f &&
                            (c && !b && ((h = f.length - 1), g.push(c)),
                            (function Ae(b) {
                                m.each(b, function (b, c) {
                                    m.isFunction(c) ? (a.unique && n.has(c)) || f.push(c) : c && c.length && "string" !== m.type(c) && Ae(c);
                                });
                            })(arguments),
                            c && !b && l()),
                        this
                    );
                },
                remove: function () {
                    return (
                        m.each(arguments, function (a, b) {
                            for (var c; -1 < (c = m.inArray(b, f, c)); ) f.splice(c, 1), c <= h && h--;
                        }),
                        this
                    );
                },
                has: function (a) {
                    return a ? -1 < m.inArray(a, f) : 0 < f.length;
                },
                empty: function () {
                    return f && (f = []), this;
                },
                disable: function () {
                    return (e = g = []), (f = c = ""), this;
                },
                disabled: function () {
                    return !f;
                },
                lock: function () {
                    return (e = g = []), c || b || (f = c = ""), this;
                },
                locked: function () {
                    return !!e;
                },
                fireWith: function (a, c) {
                    return e || ((c = c || []), (c = [a, c.slice ? c.slice() : c]), g.push(c), b || l()), this;
                },
                fire: function () {
                    return n.fireWith(this, arguments), this;
                },
                fired: function () {
                    return !!d;
                },
            };
        return n;
    };
    m.extend({
        Deferred: function (a) {
            var c = [
                    ["notify", "progress", m.Callbacks("memory"), m.Callbacks("memory"), 2],
                    ["resolve", "done", m.Callbacks("once memory"), m.Callbacks("once memory"), 0, "resolved"],
                    ["reject", "fail", m.Callbacks("once memory"), m.Callbacks("once memory"), 1, "rejected"],
                ],
                d = "pending",
                e = {
                    state: function () {
                        return d;
                    },
                    always: function () {
                        return f.done(arguments).fail(arguments), this;
                    },
                    catch: function (a) {
                        return e.then(null, a);
                    },
                    pipe: function () {
                        var a = arguments;
                        return m
                            .Deferred(function (b) {
                                m.each(c, function (c, d) {
                                    var e = m.isFunction(a[d[4]]) && a[d[4]];
                                    f[d[1]](function () {
                                        var a = e && e.apply(this, arguments);
                                        a && m.isFunction(a.promise) ? a.promise().progress(b.notify).done(b.resolve).fail(b.reject) : b[d[0] + "With"](this, e ? [a] : arguments);
                                    });
                                });
                                a = null;
                            })
                            .promise();
                    },
                    then: function (a, d, e) {
                        function f(a, c, d, e) {
                            return function () {
                                var D = this,
                                    O = arguments,
                                    k = function () {
                                        var b, k;
                                        if (!(a < g)) {
                                            if (((b = d.apply(D, O)), b === c.promise())) throw new TypeError("Thenable self-resolution");
                                            k = b && ("object" == typeof b || "function" == typeof b) && b.then;
                                            m.isFunction(k)
                                                ? e
                                                    ? k.call(b, f(g, c, h, e), f(g, c, l, e))
                                                    : (g++, k.call(b, f(g, c, h, e), f(g, c, l, e), f(g, c, h, c.notifyWith)))
                                                : (d !== h && ((D = void 0), (O = [b])), (e || c.resolveWith)(D, O));
                                        }
                                    },
                                    Z = e
                                        ? k
                                        : function () {
                                              try {
                                                  k();
                                              } catch (b) {
                                                  m.Deferred.exceptionHook && m.Deferred.exceptionHook(b, Z.stackTrace), a + 1 >= g && (d !== l && ((D = void 0), (O = [b])), c.rejectWith(D, O));
                                              }
                                          };
                                a ? Z() : (m.Deferred.getStackHook && (Z.stackTrace = m.Deferred.getStackHook()), b.setTimeout(Z));
                            };
                        }
                        var g = 0;
                        return m
                            .Deferred(function (b) {
                                c[0][3].add(f(0, b, m.isFunction(e) ? e : h, b.notifyWith));
                                c[1][3].add(f(0, b, m.isFunction(a) ? a : h));
                                c[2][3].add(f(0, b, m.isFunction(d) ? d : l));
                            })
                            .promise();
                    },
                    promise: function (a) {
                        return null != a ? m.extend(a, e) : e;
                    },
                },
                f = {};
            return (
                m.each(c, function (a, b) {
                    var g = b[2],
                        h = b[5];
                    e[b[1]] = g.add;
                    h &&
                        g.add(
                            function () {
                                d = h;
                            },
                            c[3 - a][2].disable,
                            c[0][2].lock
                        );
                    g.add(b[3].fire);
                    f[b[0]] = function () {
                        return f[b[0] + "With"](this === f ? void 0 : this, arguments), this;
                    };
                    f[b[0] + "With"] = g.fireWith;
                }),
                e.promise(f),
                a && a.call(f, f),
                f
            );
        },
        when: function (a) {
            var b = arguments.length,
                c = b,
                d = Array(c),
                e = ab.call(arguments),
                f = m.Deferred(),
                g = function (a) {
                    return function (c) {
                        d[a] = this;
                        e[a] = 1 < arguments.length ? ab.call(arguments) : c;
                        --b || f.resolveWith(d, e);
                    };
                };
            if (1 >= b && (n(a, f.done(g(c)).resolve, f.reject, !b), "pending" === f.state() || m.isFunction(e[c] && e[c].then))) return f.then();
            for (; c--; ) n(e[c], g(c), f.reject);
            return f.promise();
        },
    });
    var qc = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
    m.Deferred.exceptionHook = function (a, c) {
        b.console && b.console.warn && a && qc.test(a.name) && b.console.warn("jQuery.Deferred exception: " + a.message, a.stack, c);
    };
    m.readyException = function (a) {
        b.setTimeout(function () {
            throw a;
        });
    };
    var Da = m.Deferred();
    m.fn.ready = function (a) {
        return (
            Da.then(a)["catch"](function (a) {
                m.readyException(a);
            }),
            this
        );
    };
    m.extend({
        isReady: !1,
        readyWait: 1,
        ready: function (a) {
            (!0 === a ? --m.readyWait : m.isReady) || ((m.isReady = !0), (!0 !== a && 0 < --m.readyWait) || Da.resolveWith(T, [m]));
        },
    });
    m.ready.then = Da.then;
    "complete" === T.readyState || ("loading" !== T.readyState && !T.documentElement.doScroll) ? b.setTimeout(m.ready) : (T.addEventListener("DOMContentLoaded", q), b.addEventListener("load", q));
    var yb = function (a, b, c, d, e, f, g) {
            var h = 0,
                k = a.length,
                l = null == c;
            if ("object" === m.type(c)) for (h in ((e = !0), c)) yb(a, b, h, c[h], !0, f, g);
            else if (
                void 0 !== d &&
                ((e = !0),
                m.isFunction(d) || (g = !0),
                l &&
                    (g
                        ? (b.call(a, d), (b = null))
                        : ((l = b),
                          (b = function (a, b, c) {
                              return l.call(m(a), c);
                          }))),
                b)
            )
                for (; h < k; h++) b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));
            return e ? a : l ? b.call(a) : k ? b(a[0], c) : f;
        },
        Bc = function (a) {
            return 1 === a.nodeType || 9 === a.nodeType || !+a.nodeType;
        };
    u.uid = 1;
    u.prototype = {
        cache: function (a) {
            var b = a[this.expando];
            return b || ((b = {}), Bc(a) && (a.nodeType ? (a[this.expando] = b) : Object.defineProperty(a, this.expando, { value: b, configurable: !0 }))), b;
        },
        set: function (a, b, c) {
            var d;
            a = this.cache(a);
            if ("string" == typeof b) a[m.camelCase(b)] = c;
            else for (d in b) a[m.camelCase(d)] = b[d];
            return a;
        },
        get: function (a, b) {
            return void 0 === b ? this.cache(a) : a[this.expando] && a[this.expando][m.camelCase(b)];
        },
        access: function (a, b, c) {
            return void 0 === b || (b && "string" == typeof b && void 0 === c) ? this.get(a, b) : (this.set(a, b, c), void 0 !== c ? c : b);
        },
        remove: function (a, b) {
            var c,
                d = a[this.expando];
            if (void 0 !== d) {
                if (void 0 !== b) for (Array.isArray(b) ? (b = b.map(m.camelCase)) : ((b = m.camelCase(b)), (b = (b in d) ? [b] : b.match(X) || [])), c = b.length; c--; ) delete d[b[c]];
                (void 0 === b || m.isEmptyObject(d)) && (a.nodeType ? (a[this.expando] = void 0) : delete a[this.expando]);
            }
        },
        hasData: function (a) {
            a = a[this.expando];
            return void 0 !== a && !m.isEmptyObject(a);
        },
    };
    var U = new u(),
        ua = new u(),
        mc = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
        Jc = /[A-Z]/g;
    m.extend({
        hasData: function (a) {
            return ua.hasData(a) || U.hasData(a);
        },
        data: function (a, b, c) {
            return ua.access(a, b, c);
        },
        removeData: function (a, b) {
            ua.remove(a, b);
        },
        _data: function (a, b, c) {
            return U.access(a, b, c);
        },
        _removeData: function (a, b) {
            U.remove(a, b);
        },
    });
    m.fn.extend({
        data: function (a, b) {
            var c,
                d,
                e,
                f = this[0],
                g = f && f.attributes;
            if (void 0 === a) {
                if (this.length && ((e = ua.get(f)), 1 === f.nodeType && !U.get(f, "hasDataAttrs"))) {
                    for (c = g.length; c--; ) g[c] && ((d = g[c].name), 0 === d.indexOf("data-") && ((d = m.camelCase(d.slice(5))), v(f, d, e[d])));
                    U.set(f, "hasDataAttrs", !0);
                }
                return e;
            }
            return "object" == typeof a
                ? this.each(function () {
                      ua.set(this, a);
                  })
                : yb(
                      this,
                      function (b) {
                          var c;
                          if (f && void 0 === b) {
                              if (((c = ua.get(f, a)), void 0 !== c) || ((c = v(f, a)), void 0 !== c)) return c;
                          } else
                              this.each(function () {
                                  ua.set(this, a, b);
                              });
                      },
                      null,
                      b,
                      1 < arguments.length,
                      null,
                      !0
                  );
        },
        removeData: function (a) {
            return this.each(function () {
                ua.remove(this, a);
            });
        },
    });
    m.extend({
        queue: function (a, b, c) {
            var d;
            if (a) return (b = (b || "fx") + "queue"), (d = U.get(a, b)), c && (!d || Array.isArray(c) ? (d = U.access(a, b, m.makeArray(c))) : d.push(c)), d || [];
        },
        dequeue: function (a, b) {
            b = b || "fx";
            var c = m.queue(a, b),
                d = c.length,
                e = c.shift(),
                f = m._queueHooks(a, b),
                g = function () {
                    m.dequeue(a, b);
                };
            "inprogress" === e && ((e = c.shift()), d--);
            e && ("fx" === b && c.unshift("inprogress"), delete f.stop, e.call(a, g, f));
            !d && f && f.empty.fire();
        },
        _queueHooks: function (a, b) {
            var c = b + "queueHooks";
            return (
                U.get(a, c) ||
                U.access(a, c, {
                    empty: m.Callbacks("once memory").add(function () {
                        U.remove(a, [b + "queue", c]);
                    }),
                })
            );
        },
    });
    m.fn.extend({
        queue: function (a, b) {
            var c = 2;
            return (
                "string" != typeof a && ((b = a), (a = "fx"), c--),
                arguments.length < c
                    ? m.queue(this[0], a)
                    : void 0 === b
                    ? this
                    : this.each(function () {
                          var c = m.queue(this, a, b);
                          m._queueHooks(this, a);
                          "fx" === a && "inprogress" !== c[0] && m.dequeue(this, a);
                      })
            );
        },
        dequeue: function (a) {
            return this.each(function () {
                m.dequeue(this, a);
            });
        },
        clearQueue: function (a) {
            return this.queue(a || "fx", []);
        },
        promise: function (a, b) {
            var c,
                d = 1,
                e = m.Deferred(),
                f = this,
                g = this.length,
                h = function () {
                    --d || e.resolveWith(f, [f]);
                };
            "string" != typeof a && ((b = a), (a = void 0));
            for (a = a || "fx"; g--; ) (c = U.get(f[g], a + "queueHooks")) && c.empty && (d++, c.empty.add(h));
            return h(), e.promise(b);
        },
    });
    var Vb = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
        ib = new RegExp("^(?:([+-])=|)(" + Vb + ")([a-z%]*)$", "i"),
        pb = ["Top", "Right", "Bottom", "Left"],
        ub = function (a, b) {
            return (a = b || a), "none" === a.style.display || ("" === a.style.display && m.contains(a.ownerDocument, a) && "none" === m.css(a, "display"));
        },
        kb = function (a, b, c, d) {
            var e,
                f = {};
            for (e in b) (f[e] = a.style[e]), (a.style[e] = b[e]);
            c = c.apply(a, d || []);
            for (e in b) a.style[e] = f[e];
            return c;
        },
        wc = {};
    m.fn.extend({
        show: function () {
            return t(this, !0);
        },
        hide: function () {
            return t(this);
        },
        toggle: function (a) {
            return "boolean" == typeof a
                ? a
                    ? this.show()
                    : this.hide()
                : this.each(function () {
                      ub(this) ? m(this).show() : m(this).hide();
                  });
        },
    });
    var gc = /^(?:checkbox|radio)$/i,
        Ga = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i,
        fa = /^$|\/(?:java|ecma)script/i,
        Ja = {
            option: [1, "<select multiple='multiple'>", "</select>"],
            thead: [1, "<table>", "</table>"],
            col: [2, "<table><colgroup>", "</colgroup></table>"],
            tr: [2, "<table><tbody>", "</tbody></table>"],
            td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
            _default: [0, "", ""],
        };
    Ja.optgroup = Ja.option;
    Ja.tbody = Ja.tfoot = Ja.colgroup = Ja.caption = Ja.thead;
    Ja.th = Ja.td;
    var Kc = /<|&#?\w+;/;
    !(function () {
        var a = T.createDocumentFragment().appendChild(T.createElement("div")),
            b = T.createElement("input");
        b.setAttribute("type", "radio");
        b.setAttribute("checked", "checked");
        b.setAttribute("name", "t");
        a.appendChild(b);
        la.checkClone = a.cloneNode(!0).cloneNode(!0).lastChild.checked;
        a.innerHTML = "<textarea>x</textarea>";
        la.noCloneChecked = !!a.cloneNode(!0).lastChild.defaultValue;
    })();
    var Ta = T.documentElement,
        jd = /^key/,
        Oc = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
        kd = /^([^.]*)(?:\.(.+)|)/;
    m.event = {
        global: {},
        add: function (a, b, c, d, e) {
            var f, g, h, k, l, n, q, I, u, r;
            if ((l = U.get(a)))
                for (
                    c.handler && ((f = c), (c = f.handler), (e = f.selector)),
                        e && m.find.matchesSelector(Ta, e),
                        c.guid || (c.guid = m.guid++),
                        (k = l.events) || (k = l.events = {}),
                        (g = l.handle) ||
                            (g = l.handle = function (b) {
                                return "undefined" != typeof m && m.event.triggered !== b.type ? m.event.dispatch.apply(a, arguments) : void 0;
                            }),
                        b = (b || "").match(X) || [""],
                        l = b.length;
                    l--;

                )
                    (h = kd.exec(b[l]) || []),
                        (u = r = h[1]),
                        (h = (h[2] || "").split(".").sort()),
                        u &&
                            ((q = m.event.special[u] || {}),
                            (u = (e ? q.delegateType : q.bindType) || u),
                            (q = m.event.special[u] || {}),
                            (n = m.extend({ type: u, origType: r, data: d, handler: c, guid: c.guid, selector: e, needsContext: e && m.expr.match.needsContext.test(e), namespace: h.join(".") }, f)),
                            (I = k[u]) || ((I = k[u] = []), (I.delegateCount = 0), (q.setup && !1 !== q.setup.call(a, d, h, g)) || (a.addEventListener && a.addEventListener(u, g))),
                            q.add && (q.add.call(a, n), n.handler.guid || (n.handler.guid = c.guid)),
                            e ? I.splice(I.delegateCount++, 0, n) : I.push(n),
                            (m.event.global[u] = !0));
        },
        remove: function (a, b, c, d, e) {
            var f,
                g,
                h,
                k,
                l,
                n,
                q,
                I,
                u,
                r,
                x,
                Ca = U.hasData(a) && U.get(a);
            if (Ca && (k = Ca.events)) {
                b = (b || "").match(X) || [""];
                for (l = b.length; l--; )
                    if (((h = kd.exec(b[l]) || []), (u = x = h[1]), (r = (h[2] || "").split(".").sort()), u)) {
                        q = m.event.special[u] || {};
                        u = (d ? q.delegateType : q.bindType) || u;
                        I = k[u] || [];
                        h = h[2] && new RegExp("(^|\\.)" + r.join("\\.(?:.*\\.|)") + "(\\.|$)");
                        for (g = f = I.length; f--; )
                            (n = I[f]),
                                (!e && x !== n.origType) ||
                                    (c && c.guid !== n.guid) ||
                                    (h && !h.test(n.namespace)) ||
                                    (d && d !== n.selector && ("**" !== d || !n.selector)) ||
                                    (I.splice(f, 1), n.selector && I.delegateCount--, q.remove && q.remove.call(a, n));
                        g && !I.length && ((q.teardown && !1 !== q.teardown.call(a, r, Ca.handle)) || m.removeEvent(a, u, Ca.handle), delete k[u]);
                    } else for (u in k) m.event.remove(a, u + b[l], c, d, !0);
                m.isEmptyObject(k) && U.remove(a, "handle events");
            }
        },
        dispatch: function (a) {
            var b = m.event.fix(a),
                c,
                d,
                e,
                f,
                g,
                h,
                k = Array(arguments.length);
            d = (U.get(this, "events") || {})[b.type] || [];
            var l = m.event.special[b.type] || {};
            k[0] = b;
            for (c = 1; c < arguments.length; c++) k[c] = arguments[c];
            if (((b.delegateTarget = this), !l.preDispatch || !1 !== l.preDispatch.call(this, b))) {
                h = m.event.handlers.call(this, b, d);
                for (c = 0; (f = h[c++]) && !b.isPropagationStopped(); )
                    for (b.currentTarget = f.elem, d = 0; (g = f.handlers[d++]) && !b.isImmediatePropagationStopped(); )
                        (b.rnamespace && !b.rnamespace.test(g.namespace)) ||
                            ((b.handleObj = g), (b.data = g.data), (e = ((m.event.special[g.origType] || {}).handle || g.handler).apply(f.elem, k)), void 0 !== e && !1 === (b.result = e) && (b.preventDefault(), b.stopPropagation()));
                return l.postDispatch && l.postDispatch.call(this, b), b.result;
            }
        },
        handlers: function (a, b) {
            var c,
                d,
                e,
                f,
                g,
                h = [],
                k = b.delegateCount,
                l = a.target;
            if (k && l.nodeType && !("click" === a.type && 1 <= a.button))
                for (; l !== this; l = l.parentNode || this)
                    if (1 === l.nodeType && ("click" !== a.type || !0 !== l.disabled)) {
                        f = [];
                        g = {};
                        for (c = 0; c < k; c++) (d = b[c]), (e = d.selector + " "), void 0 === g[e] && (g[e] = d.needsContext ? -1 < m(e, this).index(l) : m.find(e, this, null, [l]).length), g[e] && f.push(d);
                        f.length && h.push({ elem: l, handlers: f });
                    }
            return (l = this), k < b.length && h.push({ elem: l, handlers: b.slice(k) }), h;
        },
        addProp: function (a, b) {
            Object.defineProperty(m.Event.prototype, a, {
                enumerable: !0,
                configurable: !0,
                get: m.isFunction(b)
                    ? function () {
                          if (this.originalEvent) return b(this.originalEvent);
                      }
                    : function () {
                          if (this.originalEvent) return this.originalEvent[a];
                      },
                set: function (b) {
                    Object.defineProperty(this, a, { enumerable: !0, configurable: !0, writable: !0, value: b });
                },
            });
        },
        fix: function (a) {
            return a[m.expando] ? a : new m.Event(a);
        },
        special: {
            load: { noBubble: !0 },
            focus: {
                trigger: function () {
                    if (this !== z() && this.focus) return this.focus(), !1;
                },
                delegateType: "focusin",
            },
            blur: {
                trigger: function () {
                    if (this === z() && this.blur) return this.blur(), !1;
                },
                delegateType: "focusout",
            },
            click: {
                trigger: function () {
                    if ("checkbox" === this.type && this.click && e(this, "input")) return this.click(), !1;
                },
                _default: function (a) {
                    return e(a.target, "a");
                },
            },
            beforeunload: {
                postDispatch: function (a) {
                    void 0 !== a.result && a.originalEvent && (a.originalEvent.returnValue = a.result);
                },
            },
        },
    };
    m.removeEvent = function (a, b, c) {
        a.removeEventListener && a.removeEventListener(b, c);
    };
    m.Event = function (a, b) {
        return this instanceof m.Event
            ? (a && a.type
                  ? ((this.originalEvent = a),
                    (this.type = a.type),
                    (this.isDefaultPrevented = a.defaultPrevented || (void 0 === a.defaultPrevented && !1 === a.returnValue) ? r : x),
                    (this.target = a.target && 3 === a.target.nodeType ? a.target.parentNode : a.target),
                    (this.currentTarget = a.currentTarget),
                    (this.relatedTarget = a.relatedTarget))
                  : (this.type = a),
              b && m.extend(this, b),
              (this.timeStamp = (a && a.timeStamp) || m.now()),
              void (this[m.expando] = !0))
            : new m.Event(a, b);
    };
    m.Event.prototype = {
        constructor: m.Event,
        isDefaultPrevented: x,
        isPropagationStopped: x,
        isImmediatePropagationStopped: x,
        isSimulated: !1,
        preventDefault: function () {
            var a = this.originalEvent;
            this.isDefaultPrevented = r;
            a && !this.isSimulated && a.preventDefault();
        },
        stopPropagation: function () {
            var a = this.originalEvent;
            this.isPropagationStopped = r;
            a && !this.isSimulated && a.stopPropagation();
        },
        stopImmediatePropagation: function () {
            var a = this.originalEvent;
            this.isImmediatePropagationStopped = r;
            a && !this.isSimulated && a.stopImmediatePropagation();
            this.stopPropagation();
        },
    };
    m.each(
        {
            altKey: !0,
            bubbles: !0,
            cancelable: !0,
            changedTouches: !0,
            ctrlKey: !0,
            detail: !0,
            eventPhase: !0,
            metaKey: !0,
            pageX: !0,
            pageY: !0,
            shiftKey: !0,
            view: !0,
            char: !0,
            charCode: !0,
            key: !0,
            keyCode: !0,
            button: !0,
            buttons: !0,
            clientX: !0,
            clientY: !0,
            offsetX: !0,
            offsetY: !0,
            pointerId: !0,
            pointerType: !0,
            screenX: !0,
            screenY: !0,
            targetTouches: !0,
            toElement: !0,
            touches: !0,
            which: function (a) {
                var b = a.button;
                return null == a.which && jd.test(a.type) ? (null != a.charCode ? a.charCode : a.keyCode) : !a.which && void 0 !== b && Oc.test(a.type) ? (1 & b ? 1 : 2 & b ? 3 : 4 & b ? 2 : 0) : a.which;
            },
        },
        m.event.addProp
    );
    m.each({ mouseenter: "mouseover", mouseleave: "mouseout", pointerenter: "pointerover", pointerleave: "pointerout" }, function (a, b) {
        m.event.special[a] = {
            delegateType: b,
            bindType: b,
            handle: function (a) {
                var c,
                    d = a.relatedTarget,
                    e = a.handleObj;
                return (d && (d === this || m.contains(this, d))) || ((a.type = e.origType), (c = e.handler.apply(this, arguments)), (a.type = b)), c;
            },
        };
    });
    m.fn.extend({
        on: function (a, b, c, d) {
            return B(this, a, b, c, d);
        },
        one: function (a, b, c, d) {
            return B(this, a, b, c, d, 1);
        },
        off: function (a, b, c) {
            var d, e;
            if (a && a.preventDefault && a.handleObj) return (d = a.handleObj), m(a.delegateTarget).off(d.namespace ? d.origType + "." + d.namespace : d.origType, d.selector, d.handler), this;
            if ("object" == typeof a) {
                for (e in a) this.off(e, b, a[e]);
                return this;
            }
            return (
                (!1 !== b && "function" != typeof b) || ((c = b), (b = void 0)),
                !1 === c && (c = x),
                this.each(function () {
                    m.event.remove(this, a, c, b);
                })
            );
        },
    });
    var E = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,
        La = /<script|<style|<link/i,
        ia = /checked\s*(?:[^=]|=\s*.checked.)/i,
        V = /^true\/(.*)/,
        ya = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
    m.extend({
        htmlPrefilter: function (a) {
            return a.replace(E, "<$1></$2>");
        },
        clone: function (a, b, c) {
            var d,
                e,
                f,
                g,
                h = a.cloneNode(!0),
                k = m.contains(a.ownerDocument, a);
            if (!(la.noCloneChecked || (1 !== a.nodeType && 11 !== a.nodeType) || m.isXMLDoc(a)))
                for (g = y(h), f = y(a), d = 0, e = f.length; d < e; d++) {
                    var l = f[d],
                        n = g[d],
                        q = n.nodeName.toLowerCase();
                    "input" === q && gc.test(l.type) ? (n.checked = l.checked) : ("input" !== q && "textarea" !== q) || (n.defaultValue = l.defaultValue);
                }
            if (b)
                if (c) for (f = f || y(a), g = g || y(h), d = 0, e = f.length; d < e; d++) A(f[d], g[d]);
                else A(a, h);
            return (g = y(h, "script")), 0 < g.length && p(g, !k && y(a, "script")), h;
        },
        cleanData: function (a) {
            for (var b, c, d, e = m.event.special, f = 0; void 0 !== (c = a[f]); f++)
                if (Bc(c)) {
                    if ((b = c[U.expando])) {
                        if (b.events) for (d in b.events) e[d] ? m.event.remove(c, d) : m.removeEvent(c, d, b.handle);
                        c[U.expando] = void 0;
                    }
                    c[ua.expando] && (c[ua.expando] = void 0);
                }
        },
    });
    m.fn.extend({
        detach: function (a) {
            return ga(this, a, !0);
        },
        remove: function (a) {
            return ga(this, a);
        },
        text: function (a) {
            return yb(
                this,
                function (a) {
                    return void 0 === a
                        ? m.text(this)
                        : this.empty().each(function () {
                              (1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType) || (this.textContent = a);
                          });
                },
                null,
                a,
                arguments.length
            );
        },
        append: function () {
            return ea(this, arguments, function (a) {
                (1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType) || G(this, a).appendChild(a);
            });
        },
        prepend: function () {
            return ea(this, arguments, function (a) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    var b = G(this, a);
                    b.insertBefore(a, b.firstChild);
                }
            });
        },
        before: function () {
            return ea(this, arguments, function (a) {
                this.parentNode && this.parentNode.insertBefore(a, this);
            });
        },
        after: function () {
            return ea(this, arguments, function (a) {
                this.parentNode && this.parentNode.insertBefore(a, this.nextSibling);
            });
        },
        empty: function () {
            for (var a, b = 0; null != (a = this[b]); b++) 1 === a.nodeType && (m.cleanData(y(a, !1)), (a.textContent = ""));
            return this;
        },
        clone: function (a, b) {
            return (
                (a = null != a && a),
                (b = null == b ? a : b),
                this.map(function () {
                    return m.clone(this, a, b);
                })
            );
        },
        html: function (a) {
            return yb(
                this,
                function (a) {
                    var b = this[0] || {},
                        c = 0,
                        d = this.length;
                    if (void 0 === a && 1 === b.nodeType) return b.innerHTML;
                    if ("string" == typeof a && !La.test(a) && !Ja[(Ga.exec(a) || ["", ""])[1].toLowerCase()]) {
                        a = m.htmlPrefilter(a);
                        try {
                            for (; c < d; c++) (b = this[c] || {}), 1 === b.nodeType && (m.cleanData(y(b, !1)), (b.innerHTML = a));
                            b = 0;
                        } catch (e) {}
                    }
                    b && this.empty().append(a);
                },
                null,
                a,
                arguments.length
            );
        },
        replaceWith: function () {
            var a = [];
            return ea(
                this,
                arguments,
                function (b) {
                    var c = this.parentNode;
                    0 > m.inArray(this, a) && (m.cleanData(y(this)), c && c.replaceChild(b, this));
                },
                a
            );
        },
    });
    m.each({ appendTo: "append", prependTo: "prepend", insertBefore: "before", insertAfter: "after", replaceAll: "replaceWith" }, function (a, b) {
        m.fn[a] = function (a) {
            for (var c = [], d = m(a), e = d.length - 1, f = 0; f <= e; f++) (a = f === e ? this : this.clone(!0)), m(d[f])[b](a), Gb.apply(c, a.get());
            return this.pushStack(c);
        };
    });
    var yc = /^margin/,
        xc = new RegExp("^(" + Vb + ")(?!px)[a-z%]+$", "i"),
        Tb = function (a) {
            var c = a.ownerDocument.defaultView;
            return (c && c.opener) || (c = b), c.getComputedStyle(a);
        };
    !(function () {
        function a() {
            if (h) {
                h.style.cssText = "box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%";
                h.innerHTML = "";
                Ta.appendChild(g);
                var k = b.getComputedStyle(h);
                c = "1%" !== k.top;
                f = "2px" === k.marginLeft;
                d = "4px" === k.width;
                h.style.marginRight = "50%";
                e = "4px" === k.marginRight;
                Ta.removeChild(g);
                h = null;
            }
        }
        var c,
            d,
            e,
            f,
            g = T.createElement("div"),
            h = T.createElement("div");
        h.style &&
            ((h.style.backgroundClip = "content-box"),
            (h.cloneNode(!0).style.backgroundClip = ""),
            (la.clearCloneStyle = "content-box" === h.style.backgroundClip),
            (g.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute"),
            g.appendChild(h),
            m.extend(la, {
                pixelPosition: function () {
                    return a(), c;
                },
                boxSizingReliable: function () {
                    return a(), d;
                },
                pixelMarginRight: function () {
                    return a(), e;
                },
                reliableMarginLeft: function () {
                    return a(), f;
                },
            }));
    })();
    var Jd = /^(none|table(?!-c[ea]).+)/,
        hc = /^--/,
        Ee = { position: "absolute", visibility: "hidden", display: "block" },
        Wb = { letterSpacing: "0", fontWeight: "400" },
        ob = ["Webkit", "Moz", "ms"],
        Lc = T.createElement("div").style;
    m.extend({
        cssHooks: {
            opacity: {
                get: function (a, b) {
                    if (b) {
                        var c = ha(a, "opacity");
                        return "" === c ? "1" : c;
                    }
                },
            },
        },
        cssNumber: { animationIterationCount: !0, columnCount: !0, fillOpacity: !0, flexGrow: !0, flexShrink: !0, fontWeight: !0, lineHeight: !0, opacity: !0, order: !0, orphans: !0, widows: !0, zIndex: !0, zoom: !0 },
        cssProps: { float: "cssFloat" },
        style: function (a, b, c, d) {
            if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {
                var e,
                    f,
                    g,
                    h = m.camelCase(b),
                    k = hc.test(b),
                    l = a.style;
                return (
                    k || (b = L(h)),
                    (g = m.cssHooks[b] || m.cssHooks[h]),
                    void 0 === c
                        ? g && "get" in g && void 0 !== (e = g.get(a, !1, d))
                            ? e
                            : l[b]
                        : ((f = typeof c),
                          "string" === f && (e = ib.exec(c)) && e[1] && ((c = w(a, b, e)), (f = "number")),
                          null != c &&
                              c === c &&
                              ("number" === f && (c += (e && e[3]) || (m.cssNumber[h] ? "" : "px")),
                              la.clearCloneStyle || "" !== c || 0 !== b.indexOf("background") || (l[b] = "inherit"),
                              (g && "set" in g && void 0 === (c = g.set(a, c, d))) || (k ? l.setProperty(b, c) : (l[b] = c))),
                          void 0)
                );
            }
        },
        css: function (a, b, c, d) {
            var e,
                f,
                g,
                h = m.camelCase(b);
            return (
                hc.test(b) || (b = L(h)),
                (g = m.cssHooks[b] || m.cssHooks[h]),
                g && "get" in g && (e = g.get(a, !0, c)),
                void 0 === e && (e = ha(a, b, d)),
                "normal" === e && b in Wb && (e = Wb[b]),
                "" === c || c ? ((f = parseFloat(e)), !0 === c || isFinite(f) ? f || 0 : e) : e
            );
        },
    });
    m.each(["height", "width"], function (a, b) {
        m.cssHooks[b] = {
            get: function (a, c, d) {
                if (c)
                    return !Jd.test(m.css(a, "display")) || (a.getClientRects().length && a.getBoundingClientRect().width)
                        ? Ba(a, b, d)
                        : kb(a, Ee, function () {
                              return Ba(a, b, d);
                          });
            },
            set: function (a, c, d) {
                var e,
                    f = d && Tb(a);
                d = d && wa(a, b, d, "border-box" === m.css(a, "boxSizing", !1, f), f);
                return d && (e = ib.exec(c)) && "px" !== (e[3] || "px") && ((a.style[b] = c), (c = m.css(a, b))), pa(a, c, d);
            },
        };
    });
    m.cssHooks.marginLeft = va(la.reliableMarginLeft, function (a, b) {
        if (b)
            return (
                (parseFloat(ha(a, "marginLeft")) ||
                    a.getBoundingClientRect().left -
                        kb(a, { marginLeft: 0 }, function () {
                            return a.getBoundingClientRect().left;
                        })) + "px"
            );
    });
    m.each({ margin: "", padding: "", border: "Width" }, function (a, b) {
        m.cssHooks[a + b] = {
            expand: function (c) {
                var d = 0,
                    e = {};
                for (c = "string" == typeof c ? c.split(" ") : [c]; 4 > d; d++) e[a + pb[d] + b] = c[d] || c[d - 2] || c[0];
                return e;
            },
        };
        yc.test(a) || (m.cssHooks[a + b].set = pa);
    });
    m.fn.extend({
        css: function (a, b) {
            return yb(
                this,
                function (a, b, c) {
                    var d,
                        e = {},
                        f = 0;
                    if (Array.isArray(b)) {
                        c = Tb(a);
                        for (d = b.length; f < d; f++) e[b[f]] = m.css(a, b[f], !1, c);
                        return e;
                    }
                    return void 0 !== c ? m.style(a, b, c) : m.css(a, b);
                },
                a,
                b,
                1 < arguments.length
            );
        },
    });
    m.Tween = W;
    W.prototype = {
        constructor: W,
        init: function (a, b, c, d, e, f) {
            this.elem = a;
            this.prop = c;
            this.easing = e || m.easing._default;
            this.options = b;
            this.start = this.now = this.cur();
            this.end = d;
            this.unit = f || (m.cssNumber[c] ? "" : "px");
        },
        cur: function () {
            var a = W.propHooks[this.prop];
            return a && a.get ? a.get(this) : W.propHooks._default.get(this);
        },
        run: function (a) {
            var b,
                c = W.propHooks[this.prop];
            return (
                this.options.duration ? (this.pos = b = m.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration)) : (this.pos = b = a),
                (this.now = (this.end - this.start) * b + this.start),
                this.options.step && this.options.step.call(this.elem, this.now, this),
                c && c.set ? c.set(this) : W.propHooks._default.set(this),
                this
            );
        },
    };
    W.prototype.init.prototype = W.prototype;
    W.propHooks = {
        _default: {
            get: function (a) {
                var b;
                return 1 !== a.elem.nodeType || (null != a.elem[a.prop] && null == a.elem.style[a.prop]) ? a.elem[a.prop] : ((b = m.css(a.elem, a.prop, "")), b && "auto" !== b ? b : 0);
            },
            set: function (a) {
                m.fx.step[a.prop] ? m.fx.step[a.prop](a) : 1 !== a.elem.nodeType || (null == a.elem.style[m.cssProps[a.prop]] && !m.cssHooks[a.prop]) ? (a.elem[a.prop] = a.now) : m.style(a.elem, a.prop, a.now + a.unit);
            },
        },
    };
    W.propHooks.scrollTop = W.propHooks.scrollLeft = {
        set: function (a) {
            a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now);
        },
    };
    m.easing = {
        linear: function (a) {
            return a;
        },
        swing: function (a) {
            return 0.5 - Math.cos(a * Math.PI) / 2;
        },
        _default: "swing",
    };
    m.fx = W.prototype.init;
    m.fx.step = {};
    var Ub,
        nc,
        Pc = /^(?:toggle|show|hide)$/,
        lb = /queueHooks$/;
    m.Animation = m.extend(ma, {
        tweeners: {
            "*": [
                function (a, b) {
                    var c = this.createTween(a, b);
                    return w(c.elem, a, ib.exec(b), c), c;
                },
            ],
        },
        tweener: function (a, b) {
            m.isFunction(a) ? ((b = a), (a = ["*"])) : (a = a.match(X));
            for (var c, d = 0, e = a.length; d < e; d++) (c = a[d]), (ma.tweeners[c] = ma.tweeners[c] || []), ma.tweeners[c].unshift(b);
        },
        prefilters: [
            function (a, b, c) {
                var d,
                    e,
                    f,
                    g,
                    h,
                    k,
                    l,
                    n,
                    q = "width" in b || "height" in b,
                    I = this,
                    u = {},
                    r = a.style,
                    x = a.nodeType && ub(a),
                    p = U.get(a, "fxshow");
                c.queue ||
                    ((g = m._queueHooks(a, "fx")),
                    null == g.unqueued &&
                        ((g.unqueued = 0),
                        (h = g.empty.fire),
                        (g.empty.fire = function () {
                            g.unqueued || h();
                        })),
                    g.unqueued++,
                    I.always(function () {
                        I.always(function () {
                            g.unqueued--;
                            m.queue(a, "fx").length || g.empty.fire();
                        });
                    }));
                for (d in b)
                    if (((e = b[d]), Pc.test(e))) {
                        if ((delete b[d], (f = f || "toggle" === e), e === (x ? "hide" : "show"))) {
                            if ("show" !== e || !p || void 0 === p[d]) continue;
                            x = !0;
                        }
                        u[d] = (p && p[d]) || m.style(a, d);
                    }
                if (((k = !m.isEmptyObject(b)), k || !m.isEmptyObject(u)))
                    for (d in (q &&
                        1 === a.nodeType &&
                        ((c.overflow = [r.overflow, r.overflowX, r.overflowY]),
                        (l = p && p.display),
                        null == l && (l = U.get(a, "display")),
                        (n = m.css(a, "display")),
                        "none" === n && (l ? (n = l) : (t([a], !0), (l = a.style.display || l), (n = m.css(a, "display")), t([a]))),
                        ("inline" === n || ("inline-block" === n && null != l)) &&
                            "none" === m.css(a, "float") &&
                            (k ||
                                (I.done(function () {
                                    r.display = l;
                                }),
                                null == l && ((n = r.display), (l = "none" === n ? "" : n))),
                            (r.display = "inline-block"))),
                    c.overflow &&
                        ((r.overflow = "hidden"),
                        I.always(function () {
                            r.overflow = c.overflow[0];
                            r.overflowX = c.overflow[1];
                            r.overflowY = c.overflow[2];
                        })),
                    (k = !1),
                    u))
                        k ||
                            (p ? "hidden" in p && (x = p.hidden) : (p = U.access(a, "fxshow", { display: l })),
                            f && (p.hidden = !x),
                            x && t([a], !0),
                            I.done(function () {
                                x || t([a]);
                                U.remove(a, "fxshow");
                                for (d in u) m.style(a, d, u[d]);
                            })),
                            (k = Ca(x ? p[d] : 0, d, I)),
                            d in p || ((p[d] = k.start), x && ((k.end = k.start), (k.start = 0)));
            },
        ],
        prefilter: function (a, b) {
            b ? ma.prefilters.unshift(a) : ma.prefilters.push(a);
        },
    });
    m.speed = function (a, b, c) {
        var d = a && "object" == typeof a ? m.extend({}, a) : { complete: c || (!c && b) || (m.isFunction(a) && a), duration: a, easing: (c && b) || (b && !m.isFunction(b) && b) };
        return (
            m.fx.off ? (d.duration = 0) : "number" != typeof d.duration && (d.duration in m.fx.speeds ? (d.duration = m.fx.speeds[d.duration]) : (d.duration = m.fx.speeds._default)),
            (null != d.queue && !0 !== d.queue) || (d.queue = "fx"),
            (d.old = d.complete),
            (d.complete = function () {
                m.isFunction(d.old) && d.old.call(this);
                d.queue && m.dequeue(this, d.queue);
            }),
            d
        );
    };
    m.fn.extend({
        fadeTo: function (a, b, c, d) {
            return this.filter(ub).css("opacity", 0).show().end().animate({ opacity: b }, a, c, d);
        },
        animate: function (a, b, c, d) {
            var e = m.isEmptyObject(a),
                f = m.speed(b, c, d);
            b = function () {
                var b = ma(this, m.extend({}, a), f);
                (e || U.get(this, "finish")) && b.stop(!0);
            };
            return (b.finish = b), e || !1 === f.queue ? this.each(b) : this.queue(f.queue, b);
        },
        stop: function (a, b, c) {
            var d = function (a) {
                var b = a.stop;
                delete a.stop;
                b(c);
            };
            return (
                "string" != typeof a && ((c = b), (b = a), (a = void 0)),
                b && !1 !== a && this.queue(a || "fx", []),
                this.each(function () {
                    var b = !0,
                        e = null != a && a + "queueHooks",
                        f = m.timers,
                        D = U.get(this);
                    if (e) D[e] && D[e].stop && d(D[e]);
                    else for (e in D) D[e] && D[e].stop && lb.test(e) && d(D[e]);
                    for (e = f.length; e--; ) f[e].elem !== this || (null != a && f[e].queue !== a) || (f[e].anim.stop(c), (b = !1), f.splice(e, 1));
                    (!b && c) || m.dequeue(this, a);
                })
            );
        },
        finish: function (a) {
            return (
                !1 !== a && (a = a || "fx"),
                this.each(function () {
                    var b,
                        c = U.get(this),
                        d = c[a + "queue"];
                    b = c[a + "queueHooks"];
                    var e = m.timers,
                        f = d ? d.length : 0;
                    c.finish = !0;
                    m.queue(this, a, []);
                    b && b.stop && b.stop.call(this, !0);
                    for (b = e.length; b--; ) e[b].elem === this && e[b].queue === a && (e[b].anim.stop(!0), e.splice(b, 1));
                    for (b = 0; b < f; b++) d[b] && d[b].finish && d[b].finish.call(this);
                    delete c.finish;
                })
            );
        },
    });
    m.each(["toggle", "show", "hide"], function (a, b) {
        var c = m.fn[b];
        m.fn[b] = function (a, d, e) {
            return null == a || "boolean" == typeof a ? c.apply(this, arguments) : this.animate(I(b, !0), a, d, e);
        };
    });
    m.each({ slideDown: I("show"), slideUp: I("hide"), slideToggle: I("toggle"), fadeIn: { opacity: "show" }, fadeOut: { opacity: "hide" }, fadeToggle: { opacity: "toggle" } }, function (a, b) {
        m.fn[a] = function (a, c, d) {
            return this.animate(b, a, c, d);
        };
    });
    m.timers = [];
    m.fx.tick = function () {
        var a,
            b = 0,
            c = m.timers;
        for (Ub = m.now(); b < c.length; b++) (a = c[b]), a() || c[b] !== a || c.splice(b--, 1);
        c.length || m.fx.stop();
        Ub = void 0;
    };
    m.fx.timer = function (a) {
        m.timers.push(a);
        m.fx.start();
    };
    m.fx.interval = 13;
    m.fx.start = function () {
        nc || ((nc = !0), ra());
    };
    m.fx.stop = function () {
        nc = null;
    };
    m.fx.speeds = { slow: 600, fast: 200, _default: 400 };
    m.fn.delay = function (a, c) {
        return (
            (a = m.fx ? m.fx.speeds[a] || a : a),
            (c = c || "fx"),
            this.queue(c, function (c, d) {
                var e = b.setTimeout(c, a);
                d.stop = function () {
                    b.clearTimeout(e);
                };
            })
        );
    };
    (function () {
        var a = T.createElement("input"),
            b = T.createElement("select").appendChild(T.createElement("option"));
        a.type = "checkbox";
        la.checkOn = "" !== a.value;
        la.optSelected = b.selected;
        a = T.createElement("input");
        a.value = "t";
        a.type = "radio";
        la.radioValue = "t" === a.value;
    })();
    var qb,
        Ua = m.expr.attrHandle;
    m.fn.extend({
        attr: function (a, b) {
            return yb(this, m.attr, a, b, 1 < arguments.length);
        },
        removeAttr: function (a) {
            return this.each(function () {
                m.removeAttr(this, a);
            });
        },
    });
    m.extend({
        attr: function (a, b, c) {
            var d,
                e,
                f = a.nodeType;
            if (3 !== f && 8 !== f && 2 !== f)
                return "undefined" == typeof a.getAttribute
                    ? m.prop(a, b, c)
                    : ((1 === f && m.isXMLDoc(a)) || (e = m.attrHooks[b.toLowerCase()] || (m.expr.match.bool.test(b) ? qb : void 0)),
                      void 0 !== c
                          ? null === c
                              ? void m.removeAttr(a, b)
                              : e && "set" in e && void 0 !== (d = e.set(a, c, b))
                              ? d
                              : (a.setAttribute(b, c + ""), c)
                          : e && "get" in e && null !== (d = e.get(a, b))
                          ? d
                          : ((d = m.find.attr(a, b)), null == d ? void 0 : d));
        },
        attrHooks: {
            type: {
                set: function (a, b) {
                    if (!la.radioValue && "radio" === b && e(a, "input")) {
                        var c = a.value;
                        return a.setAttribute("type", b), c && (a.value = c), b;
                    }
                },
            },
        },
        removeAttr: function (a, b) {
            var c,
                d = 0,
                e = b && b.match(X);
            if (e && 1 === a.nodeType) for (; (c = e[d++]); ) a.removeAttribute(c);
        },
    });
    qb = {
        set: function (a, b, c) {
            return !1 === b ? m.removeAttr(a, c) : a.setAttribute(c, c), c;
        },
    };
    m.each(m.expr.match.bool.source.match(/\w+/g), function (a, b) {
        var c = Ua[b] || m.find.attr;
        Ua[b] = function (a, b, d) {
            var e,
                f,
                D = b.toLowerCase();
            return d || ((f = Ua[D]), (Ua[D] = e), (e = null != c(a, b, d) ? D : null), (Ua[D] = f)), e;
        };
    });
    var Kd = /^(?:input|select|textarea|button)$/i,
        ld = /^(?:a|area)$/i;
    m.fn.extend({
        prop: function (a, b) {
            return yb(this, m.prop, a, b, 1 < arguments.length);
        },
        removeProp: function (a) {
            return this.each(function () {
                delete this[m.propFix[a] || a];
            });
        },
    });
    m.extend({
        prop: function (a, b, c) {
            var d,
                e,
                f = a.nodeType;
            if (3 !== f && 8 !== f && 2 !== f)
                return (
                    (1 === f && m.isXMLDoc(a)) || ((b = m.propFix[b] || b), (e = m.propHooks[b])),
                    void 0 !== c ? (e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : (a[b] = c)) : e && "get" in e && null !== (d = e.get(a, b)) ? d : a[b]
                );
        },
        propHooks: {
            tabIndex: {
                get: function (a) {
                    var b = m.find.attr(a, "tabindex");
                    return b ? parseInt(b, 10) : Kd.test(a.nodeName) || (ld.test(a.nodeName) && a.href) ? 0 : -1;
                },
            },
        },
        propFix: { for: "htmlFor", class: "className" },
    });
    la.optSelected ||
        (m.propHooks.selected = {
            get: function (a) {
                a = a.parentNode;
                return a && a.parentNode && a.parentNode.selectedIndex, null;
            },
            set: function (a) {
                a = a.parentNode;
                a && (a.selectedIndex, a.parentNode && a.parentNode.selectedIndex);
            },
        });
    m.each("tabIndex readOnly maxLength cellSpacing cellPadding rowSpan colSpan useMap frameBorder contentEditable".split(" "), function () {
        m.propFix[this.toLowerCase()] = this;
    });
    m.fn.extend({
        addClass: function (a) {
            var b,
                c,
                d,
                e,
                f,
                g,
                h = 0;
            if (m.isFunction(a))
                return this.each(function (b) {
                    m(this).addClass(a.call(this, b, ta(this)));
                });
            if ("string" == typeof a && a)
                for (b = a.match(X) || []; (c = this[h++]); )
                    if (((e = ta(c)), (d = 1 === c.nodeType && " " + za(e) + " "))) {
                        for (g = 0; (f = b[g++]); ) 0 > d.indexOf(" " + f + " ") && (d += f + " ");
                        d = za(d);
                        e !== d && c.setAttribute("class", d);
                    }
            return this;
        },
        removeClass: function (a) {
            var b,
                c,
                d,
                e,
                f,
                g,
                h = 0;
            if (m.isFunction(a))
                return this.each(function (b) {
                    m(this).removeClass(a.call(this, b, ta(this)));
                });
            if (!arguments.length) return this.attr("class", "");
            if ("string" == typeof a && a)
                for (b = a.match(X) || []; (c = this[h++]); )
                    if (((e = ta(c)), (d = 1 === c.nodeType && " " + za(e) + " "))) {
                        for (g = 0; (f = b[g++]); ) for (; -1 < d.indexOf(" " + f + " "); ) d = d.replace(" " + f + " ", " ");
                        d = za(d);
                        e !== d && c.setAttribute("class", d);
                    }
            return this;
        },
        toggleClass: function (a, b) {
            var c = typeof a;
            return "boolean" == typeof b && "string" === c
                ? b
                    ? this.addClass(a)
                    : this.removeClass(a)
                : m.isFunction(a)
                ? this.each(function (c) {
                      m(this).toggleClass(a.call(this, c, ta(this), b), b);
                  })
                : this.each(function () {
                      var b, d, e, f;
                      if ("string" === c) for (d = 0, e = m(this), f = a.match(X) || []; (b = f[d++]); ) e.hasClass(b) ? e.removeClass(b) : e.addClass(b);
                      else (void 0 !== a && "boolean" !== c) || ((b = ta(this)), b && U.set(this, "__className__", b), this.setAttribute && this.setAttribute("class", b || !1 === a ? "" : U.get(this, "__className__") || ""));
                  });
        },
        hasClass: function (a) {
            var b,
                c = 0;
            for (a = " " + a + " "; (b = this[c++]); ) if (1 === b.nodeType && -1 < (" " + za(ta(b)) + " ").indexOf(a)) return !0;
            return !1;
        },
    });
    var mb = /\r/g;
    m.fn.extend({
        val: function (a) {
            var b,
                c,
                d,
                e = this[0];
            if (arguments.length)
                return (
                    (d = m.isFunction(a)),
                    this.each(function (c) {
                        var e;
                        1 === this.nodeType &&
                            ((e = d ? a.call(this, c, m(this).val()) : a),
                            null == e
                                ? (e = "")
                                : "number" == typeof e
                                ? (e += "")
                                : Array.isArray(e) &&
                                  (e = m.map(e, function (a) {
                                      return null == a ? "" : a + "";
                                  })),
                            (b = m.valHooks[this.type] || m.valHooks[this.nodeName.toLowerCase()]),
                            (b && "set" in b && void 0 !== b.set(this, e, "value")) || (this.value = e));
                    })
                );
            if (e) return (b = m.valHooks[e.type] || m.valHooks[e.nodeName.toLowerCase()]), b && "get" in b && void 0 !== (c = b.get(e, "value")) ? c : ((c = e.value), "string" == typeof c ? c.replace(mb, "") : null == c ? "" : c);
        },
    });
    m.extend({
        valHooks: {
            option: {
                get: function (a) {
                    var b = m.find.attr(a, "value");
                    return null != b ? b : za(m.text(a));
                },
            },
            select: {
                get: function (a) {
                    var b,
                        c,
                        d = a.options,
                        f = a.selectedIndex,
                        g = "select-one" === a.type,
                        h = g ? null : [],
                        k = g ? f + 1 : d.length;
                    for (c = 0 > f ? k : g ? f : 0; c < k; c++)
                        if (((b = d[c]), !((!b.selected && c !== f) || b.disabled || (b.parentNode.disabled && e(b.parentNode, "optgroup"))))) {
                            if (((a = m(b).val()), g)) return a;
                            h.push(a);
                        }
                    return h;
                },
                set: function (a, b) {
                    for (var c, d, e = a.options, f = m.makeArray(b), g = e.length; g--; ) (d = e[g]), (d.selected = -1 < m.inArray(m.valHooks.option.get(d), f)) && (c = !0);
                    return c || (a.selectedIndex = -1), f;
                },
            },
        },
    });
    m.each(["radio", "checkbox"], function () {
        m.valHooks[this] = {
            set: function (a, b) {
                if (Array.isArray(b)) return (a.checked = -1 < m.inArray(m(a).val(), b));
            },
        };
        la.checkOn ||
            (m.valHooks[this].get = function (a) {
                return null === a.getAttribute("value") ? "on" : a.value;
            });
    });
    var Xb = /^(?:focusinfocus|focusoutblur)$/;
    m.extend(m.event, {
        trigger: function (a, c, d, e) {
            var f,
                g,
                h,
                k,
                l,
                n,
                q,
                I = [d || T],
                u = cc.call(a, "type") ? a.type : a;
            f = cc.call(a, "namespace") ? a.namespace.split(".") : [];
            if (
                ((g = h = d = d || T),
                3 !== d.nodeType &&
                    8 !== d.nodeType &&
                    !Xb.test(u + m.event.triggered) &&
                    (-1 < u.indexOf(".") && ((f = u.split(".")), (u = f.shift()), f.sort()),
                    (l = 0 > u.indexOf(":") && "on" + u),
                    (a = a[m.expando] ? a : new m.Event(u, "object" == typeof a && a)),
                    (a.isTrigger = e ? 2 : 3),
                    (a.namespace = f.join(".")),
                    (a.rnamespace = a.namespace ? new RegExp("(^|\\.)" + f.join("\\.(?:.*\\.|)") + "(\\.|$)") : null),
                    (a.result = void 0),
                    a.target || (a.target = d),
                    (c = null == c ? [a] : m.makeArray(c, [a])),
                    (q = m.event.special[u] || {}),
                    e || !q.trigger || !1 !== q.trigger.apply(d, c)))
            ) {
                if (!e && !q.noBubble && !m.isWindow(d)) {
                    k = q.delegateType || u;
                    for (Xb.test(k + u) || (g = g.parentNode); g; g = g.parentNode) I.push(g), (h = g);
                    h === (d.ownerDocument || T) && I.push(h.defaultView || h.parentWindow || b);
                }
                for (f = 0; (g = I[f++]) && !a.isPropagationStopped(); )
                    (a.type = 1 < f ? k : q.bindType || u),
                        (n = (U.get(g, "events") || {})[a.type] && U.get(g, "handle")) && n.apply(g, c),
                        (n = l && g[l]) && n.apply && Bc(g) && ((a.result = n.apply(g, c)), !1 === a.result && a.preventDefault());
                return (
                    (a.type = u),
                    e ||
                        a.isDefaultPrevented() ||
                        (q._default && !1 !== q._default.apply(I.pop(), c)) ||
                        !Bc(d) ||
                        (l && m.isFunction(d[u]) && !m.isWindow(d) && ((h = d[l]), h && (d[l] = null), (m.event.triggered = u), d[u](), (m.event.triggered = void 0), h && (d[l] = h))),
                    a.result
                );
            }
        },
        simulate: function (a, b, c) {
            a = m.extend(new m.Event(), c, { type: a, isSimulated: !0 });
            m.event.trigger(a, null, b);
        },
    });
    m.fn.extend({
        trigger: function (a, b) {
            return this.each(function () {
                m.event.trigger(a, b, this);
            });
        },
        triggerHandler: function (a, b) {
            var c = this[0];
            if (c) return m.event.trigger(a, b, c, !0);
        },
    });
    m.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), function (a, b) {
        m.fn[b] = function (a, c) {
            return 0 < arguments.length ? this.on(b, null, a, c) : this.trigger(b);
        };
    });
    m.fn.extend({
        hover: function (a, b) {
            return this.mouseenter(a).mouseleave(b || a);
        },
    });
    la.focusin = "onfocusin" in b;
    la.focusin ||
        m.each({ focus: "focusin", blur: "focusout" }, function (a, b) {
            var c = function (a) {
                m.event.simulate(b, a.target, m.event.fix(a));
            };
            m.event.special[b] = {
                setup: function () {
                    var d = this.ownerDocument || this,
                        e = U.access(d, b);
                    e || d.addEventListener(a, c, !0);
                    U.access(d, b, (e || 0) + 1);
                },
                teardown: function () {
                    var d = this.ownerDocument || this,
                        e = U.access(d, b) - 1;
                    e ? U.access(d, b, e) : (d.removeEventListener(a, c, !0), U.remove(d, b));
                },
            };
        });
    var Jb = b.location,
        Cc = m.now(),
        md = /\?/;
    m.parseXML = function (a) {
        var c;
        if (!a || "string" != typeof a) return null;
        try {
            c = new b.DOMParser().parseFromString(a, "text/xml");
        } catch (d) {
            c = void 0;
        }
        return (c && !c.getElementsByTagName("parsererror").length) || m.error("Invalid XML: " + a), c;
    };
    var Be = /\[\]$/,
        nd = /\r?\n/g,
        Va = /^(?:submit|button|image|reset|file)$/i,
        Fe = /^(?:input|select|textarea|keygen)/i;
    m.param = function (a, b) {
        var c,
            d = [],
            e = function (a, b) {
                var c = m.isFunction(b) ? b() : b;
                d[d.length] = encodeURIComponent(a) + "=" + encodeURIComponent(null == c ? "" : c);
            };
        if (Array.isArray(a) || (a.jquery && !m.isPlainObject(a)))
            m.each(a, function () {
                e(this.name, this.value);
            });
        else for (c in a) aa(c, a[c], b, e);
        return d.join("&");
    };
    m.fn.extend({
        serialize: function () {
            return m.param(this.serializeArray());
        },
        serializeArray: function () {
            return this.map(function () {
                var a = m.prop(this, "elements");
                return a ? m.makeArray(a) : this;
            })
                .filter(function () {
                    var a = this.type;
                    return this.name && !m(this).is(":disabled") && Fe.test(this.nodeName) && !Va.test(a) && (this.checked || !gc.test(a));
                })
                .map(function (a, b) {
                    var c = m(this).val();
                    return null == c
                        ? null
                        : Array.isArray(c)
                        ? m.map(c, function (a) {
                              return { name: b.name, value: a.replace(nd, "\r\n") };
                          })
                        : { name: b.name, value: c.replace(nd, "\r\n") };
                })
                .get();
        },
    });
    var Ge = /%20/g,
        Ld = /#.*$/,
        od = /([?&])_=[^&]*/,
        pd = /^(.*?):[ \t]*([^\r\n]*)$/gm,
        qd = /^(?:GET|HEAD)$/,
        Qc = /^\/\//,
        Md = {},
        ed = {},
        Rc = "*/".concat("*"),
        Sc = T.createElement("a");
    Sc.href = Jb.href;
    m.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: Jb.href,
            type: "GET",
            isLocal: /^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Jb.protocol),
            global: !0,
            processData: !0,
            async: !0,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: { "*": Rc, text: "text/plain", html: "text/html", xml: "application/xml, text/xml", json: "application/json, text/javascript" },
            contents: { xml: /\bxml\b/, html: /\bhtml/, json: /\bjson\b/ },
            responseFields: { xml: "responseXML", text: "responseText", json: "responseJSON" },
            converters: { "* text": String, "text html": !0, "text json": JSON.parse, "text xml": m.parseXML },
            flatOptions: { url: !0, context: !0 },
        },
        ajaxSetup: function (a, b) {
            return b ? Sa(Sa(a, m.ajaxSettings), b) : Sa(m.ajaxSettings, a);
        },
        ajaxPrefilter: ca(Md),
        ajaxTransport: ca(ed),
        ajax: function (a, c) {
            function d(a, c, D, h) {
                var l,
                    O,
                    I,
                    u,
                    da = c;
                if (!n) {
                    n = !0;
                    k && b.clearTimeout(k);
                    e = void 0;
                    g = h || "";
                    z.readyState = 0 < a ? 4 : 0;
                    h = (200 <= a && 300 > a) || 304 === a;
                    if (D) {
                        I = r;
                        for (var Q = z, M, t, B, y, vc = I.contents, ma = I.dataTypes; "*" === ma[0]; ) ma.shift(), void 0 === M && (M = I.mimeType || Q.getResponseHeader("Content-Type"));
                        if (M)
                            for (t in vc)
                                if (vc[t] && vc[t].test(M)) {
                                    ma.unshift(t);
                                    break;
                                }
                        if (ma[0] in D) B = ma[0];
                        else {
                            for (t in D) {
                                if (!ma[0] || I.converters[t + " " + ma[0]]) {
                                    B = t;
                                    break;
                                }
                                y || (y = t);
                            }
                            B = B || y;
                        }
                        D = B ? (B !== ma[0] && ma.unshift(B), D[B]) : void 0;
                        I = D;
                    }
                    var za;
                    a: {
                        D = r;
                        M = I;
                        t = z;
                        B = h;
                        var N, C, ta;
                        I = {};
                        Q = D.dataTypes.slice();
                        if (Q[1]) for (N in D.converters) I[N.toLowerCase()] = D.converters[N];
                        for (y = Q.shift(); y; )
                            if ((D.responseFields[y] && (t[D.responseFields[y]] = M), !ta && B && D.dataFilter && (M = D.dataFilter(M, D.dataType)), (ta = y), (y = Q.shift())))
                                if ("*" === y) y = ta;
                                else if ("*" !== ta && ta !== y) {
                                    if (((N = I[ta + " " + y] || I["* " + y]), !N))
                                        for (za in I)
                                            if (((C = za.split(" ")), C[1] === y && (N = I[ta + " " + C[0]] || I["* " + C[0]]))) {
                                                !0 === N ? (N = I[za]) : !0 !== I[za] && ((y = C[0]), Q.unshift(C[1]));
                                                break;
                                            }
                                    if (!0 !== N)
                                        if (N && D["throws"]) M = N(M);
                                        else
                                            try {
                                                M = N(M);
                                            } catch (G) {
                                                za = { state: "parsererror", error: N ? G : "No conversion from " + ta + " to " + y };
                                                break a;
                                            }
                                }
                        za = { state: "success", data: M };
                    }
                    I = za;
                    h
                        ? (r.ifModified && ((u = z.getResponseHeader("Last-Modified")), u && (m.lastModified[f] = u), (u = z.getResponseHeader("etag")), u && (m.etag[f] = u)),
                          204 === a || "HEAD" === r.type ? (da = "nocontent") : 304 === a ? (da = "notmodified") : ((da = I.state), (l = I.data), (O = I.error), (h = !O)))
                        : ((O = da), (!a && da) || ((da = "error"), 0 > a && (a = 0)));
                    z.status = a;
                    z.statusText = (c || da) + "";
                    h ? p.resolveWith(x, [l, da, z]) : p.rejectWith(x, [z, da, O]);
                    z.statusCode(v);
                    v = void 0;
                    q && Ca.trigger(h ? "ajaxSuccess" : "ajaxError", [z, r, h ? l : O]);
                    w.fireWith(x, [z, da]);
                    q && (Ca.trigger("ajaxComplete", [z, r]), --m.active || m.event.trigger("ajaxStop"));
                }
            }
            "object" == typeof a && ((c = a), (a = void 0));
            c = c || {};
            var e,
                f,
                g,
                h,
                k,
                l,
                n,
                q,
                I,
                u,
                r = m.ajaxSetup({}, c),
                x = r.context || r,
                Ca = r.context && (x.nodeType || x.jquery) ? m(x) : m.event,
                p = m.Deferred(),
                w = m.Callbacks("once memory"),
                v = r.statusCode || {},
                Q = {},
                M = {},
                t = "canceled",
                z = {
                    readyState: 0,
                    getResponseHeader: function (a) {
                        var b;
                        if (n) {
                            if (!h) for (h = {}; (b = pd.exec(g)); ) h[b[1].toLowerCase()] = b[2];
                            b = h[a.toLowerCase()];
                        }
                        return null == b ? null : b;
                    },
                    getAllResponseHeaders: function () {
                        return n ? g : null;
                    },
                    setRequestHeader: function (a, b) {
                        return null == n && ((a = M[a.toLowerCase()] = M[a.toLowerCase()] || a), (Q[a] = b)), this;
                    },
                    overrideMimeType: function (a) {
                        return null == n && (r.mimeType = a), this;
                    },
                    statusCode: function (a) {
                        var b;
                        if (a)
                            if (n) z.always(a[z.status]);
                            else for (b in a) v[b] = [v[b], a[b]];
                        return this;
                    },
                    abort: function (a) {
                        a = a || t;
                        return e && e.abort(a), d(0, a), this;
                    },
                };
            if (
                (p.promise(z),
                (r.url = ((a || r.url || Jb.href) + "").replace(Qc, Jb.protocol + "//")),
                (r.type = c.method || c.type || r.method || r.type),
                (r.dataTypes = (r.dataType || "*").toLowerCase().match(X) || [""]),
                null == r.crossDomain)
            ) {
                l = T.createElement("a");
                try {
                    (l.href = r.url), (l.href = l.href), (r.crossDomain = Sc.protocol + "//" + Sc.host != l.protocol + "//" + l.host);
                } catch (B) {
                    r.crossDomain = !0;
                }
            }
            if ((r.data && r.processData && "string" != typeof r.data && (r.data = m.param(r.data, r.traditional)), Ka(Md, r, c, z), n)) return z;
            (q = m.event && r.global) && 0 === m.active++ && m.event.trigger("ajaxStart");
            r.type = r.type.toUpperCase();
            r.hasContent = !qd.test(r.type);
            f = r.url.replace(Ld, "");
            r.hasContent
                ? r.data && r.processData && 0 === (r.contentType || "").indexOf("application/x-www-form-urlencoded") && (r.data = r.data.replace(Ge, "+"))
                : ((u = r.url.slice(f.length)), r.data && ((f += (md.test(f) ? "&" : "?") + r.data), delete r.data), !1 === r.cache && ((f = f.replace(od, "$1")), (u = (md.test(f) ? "&" : "?") + "_=" + Cc++ + u)), (r.url = f + u));
            r.ifModified && (m.lastModified[f] && z.setRequestHeader("If-Modified-Since", m.lastModified[f]), m.etag[f] && z.setRequestHeader("If-None-Match", m.etag[f]));
            ((r.data && r.hasContent && !1 !== r.contentType) || c.contentType) && z.setRequestHeader("Content-Type", r.contentType);
            z.setRequestHeader("Accept", r.dataTypes[0] && r.accepts[r.dataTypes[0]] ? r.accepts[r.dataTypes[0]] + ("*" !== r.dataTypes[0] ? ", " + Rc + "; q=0.01" : "") : r.accepts["*"]);
            for (I in r.headers) z.setRequestHeader(I, r.headers[I]);
            if (r.beforeSend && (!1 === r.beforeSend.call(x, z, r) || n)) return z.abort();
            if (((t = "abort"), w.add(r.complete), z.done(r.success), z.fail(r.error), (e = Ka(ed, r, c, z)))) {
                if (((z.readyState = 1), q && Ca.trigger("ajaxSend", [z, r]), n)) return z;
                r.async &&
                    0 < r.timeout &&
                    (k = b.setTimeout(function () {
                        z.abort("timeout");
                    }, r.timeout));
                try {
                    (n = !1), e.send(Q, d);
                } catch (B) {
                    if (n) throw B;
                    d(-1, B);
                }
            } else d(-1, "No Transport");
            return z;
        },
        getJSON: function (a, b, c) {
            return m.get(a, b, c, "json");
        },
        getScript: function (a, b) {
            return m.get(a, void 0, b, "script");
        },
    });
    m.each(["get", "post"], function (a, b) {
        m[b] = function (a, c, d, e) {
            return m.isFunction(c) && ((e = e || d), (d = c), (c = void 0)), m.ajax(m.extend({ url: a, type: b, dataType: e, data: c, success: d }, m.isPlainObject(a) && a));
        };
    });
    m._evalUrl = function (a) {
        return m.ajax({ url: a, type: "GET", dataType: "script", cache: !0, async: !1, global: !1, throws: !0 });
    };
    m.fn.extend({
        wrapAll: function (a) {
            var b;
            return (
                this[0] &&
                    (m.isFunction(a) && (a = a.call(this[0])),
                    (b = m(a, this[0].ownerDocument).eq(0).clone(!0)),
                    this[0].parentNode && b.insertBefore(this[0]),
                    b
                        .map(function () {
                            for (var a = this; a.firstElementChild; ) a = a.firstElementChild;
                            return a;
                        })
                        .append(this)),
                this
            );
        },
        wrapInner: function (a) {
            return m.isFunction(a)
                ? this.each(function (b) {
                      m(this).wrapInner(a.call(this, b));
                  })
                : this.each(function () {
                      var b = m(this),
                          c = b.contents();
                      c.length ? c.wrapAll(a) : b.append(a);
                  });
        },
        wrap: function (a) {
            var b = m.isFunction(a);
            return this.each(function (c) {
                m(this).wrapAll(b ? a.call(this, c) : a);
            });
        },
        unwrap: function (a) {
            return (
                this.parent(a)
                    .not("body")
                    .each(function () {
                        m(this).replaceWith(this.childNodes);
                    }),
                this
            );
        },
    });
    m.expr.pseudos.hidden = function (a) {
        return !m.expr.pseudos.visible(a);
    };
    m.expr.pseudos.visible = function (a) {
        return !!(a.offsetWidth || a.offsetHeight || a.getClientRects().length);
    };
    m.ajaxSettings.xhr = function () {
        try {
            return new b.XMLHttpRequest();
        } catch (a) {}
    };
    var He = { 0: 200, 1223: 204 },
        Dc = m.ajaxSettings.xhr();
    la.cors = !!Dc && "withCredentials" in Dc;
    la.ajax = Dc = !!Dc;
    m.ajaxTransport(function (a) {
        var c, d;
        if (la.cors || (Dc && !a.crossDomain))
            return {
                send: function (e, f) {
                    var g,
                        h = a.xhr();
                    if ((h.open(a.type, a.url, a.async, a.username, a.password), a.xhrFields)) for (g in a.xhrFields) h[g] = a.xhrFields[g];
                    a.mimeType && h.overrideMimeType && h.overrideMimeType(a.mimeType);
                    a.crossDomain || e["X-Requested-With"] || (e["X-Requested-With"] = "XMLHttpRequest");
                    for (g in e) h.setRequestHeader(g, e[g]);
                    c = function (a) {
                        return function () {
                            c &&
                                ((c = d = h.onload = h.onerror = h.onabort = h.onreadystatechange = null),
                                "abort" === a
                                    ? h.abort()
                                    : "error" === a
                                    ? "number" != typeof h.status
                                        ? f(0, "error")
                                        : f(h.status, h.statusText)
                                    : f(He[h.status] || h.status, h.statusText, "text" !== (h.responseType || "text") || "string" != typeof h.responseText ? { binary: h.response } : { text: h.responseText }, h.getAllResponseHeaders()));
                        };
                    };
                    h.onload = c();
                    d = h.onerror = c("error");
                    void 0 !== h.onabort
                        ? (h.onabort = d)
                        : (h.onreadystatechange = function () {
                              4 === h.readyState &&
                                  b.setTimeout(function () {
                                      c && d();
                                  });
                          });
                    c = c("abort");
                    try {
                        h.send((a.hasContent && a.data) || null);
                    } catch (k) {
                        if (c) throw k;
                    }
                },
                abort: function () {
                    c && c();
                },
            };
    });
    m.ajaxPrefilter(function (a) {
        a.crossDomain && (a.contents.script = !1);
    });
    m.ajaxSetup({
        accepts: { script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript" },
        contents: { script: /\b(?:java|ecma)script\b/ },
        converters: {
            "text script": function (a) {
                return m.globalEval(a), a;
            },
        },
    });
    m.ajaxPrefilter("script", function (a) {
        void 0 === a.cache && (a.cache = !1);
        a.crossDomain && (a.type = "GET");
    });
    m.ajaxTransport("script", function (a) {
        if (a.crossDomain) {
            var b, c;
            return {
                send: function (d, e) {
                    b = m("<script>")
                        .prop({ charset: a.scriptCharset, src: a.url })
                        .on(
                            "load error",
                            (c = function (a) {
                                b.remove();
                                c = null;
                                a && e("error" === a.type ? 404 : 200, a.type);
                            })
                        );
                    T.head.appendChild(b[0]);
                },
                abort: function () {
                    c && c();
                },
            };
        }
    });
    var rd = [],
        sd = /(=)\?(?=&|$)|\?\?/;
    m.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function () {
            var a = rd.pop() || m.expando + "_" + Cc++;
            return (this[a] = !0), a;
        },
    });
    m.ajaxPrefilter("json jsonp", function (a, c, d) {
        var e,
            f,
            g,
            h = !1 !== a.jsonp && (sd.test(a.url) ? "url" : "string" == typeof a.data && 0 === (a.contentType || "").indexOf("application/x-www-form-urlencoded") && sd.test(a.data) && "data");
        if (h || "jsonp" === a.dataTypes[0])
            return (
                (e = a.jsonpCallback = m.isFunction(a.jsonpCallback) ? a.jsonpCallback() : a.jsonpCallback),
                h ? (a[h] = a[h].replace(sd, "$1" + e)) : !1 !== a.jsonp && (a.url += (md.test(a.url) ? "&" : "?") + a.jsonp + "=" + e),
                (a.converters["script json"] = function () {
                    return g || m.error(e + " was not called"), g[0];
                }),
                (a.dataTypes[0] = "json"),
                (f = b[e]),
                (b[e] = function () {
                    g = arguments;
                }),
                d.always(function () {
                    void 0 === f ? m(b).removeProp(e) : (b[e] = f);
                    a[e] && ((a.jsonpCallback = c.jsonpCallback), rd.push(e));
                    g && m.isFunction(f) && f(g[0]);
                    g = f = void 0;
                }),
                "script"
            );
    });
    la.createHTMLDocument = (function () {
        var a = T.implementation.createHTMLDocument("").body;
        return (a.innerHTML = "<form></form><form></form>"), 2 === a.childNodes.length;
    })();
    m.parseHTML = function (a, b, c) {
        if ("string" != typeof a) return [];
        "boolean" == typeof b && ((c = b), (b = !1));
        var d, e, f;
        return (
            b || (la.createHTMLDocument ? ((b = T.implementation.createHTMLDocument("")), (d = b.createElement("base")), (d.href = T.location.href), b.head.appendChild(d)) : (b = T)),
            (e = pc.exec(a)),
            (f = !c && []),
            e ? [b.createElement(e[1])] : ((e = C([a], b, f)), f && f.length && m(f).remove(), m.merge([], e.childNodes))
        );
    };
    m.fn.load = function (a, b, c) {
        var d,
            e,
            f,
            g = this,
            h = a.indexOf(" ");
        return (
            -1 < h && ((d = za(a.slice(h))), (a = a.slice(0, h))),
            m.isFunction(b) ? ((c = b), (b = void 0)) : b && "object" == typeof b && (e = "POST"),
            0 < g.length &&
                m
                    .ajax({ url: a, type: e || "GET", dataType: "html", data: b })
                    .done(function (a) {
                        f = arguments;
                        g.html(d ? m("<div>").append(m.parseHTML(a)).find(d) : a);
                    })
                    .always(
                        c &&
                            function (a, b) {
                                g.each(function () {
                                    c.apply(this, f || [a.responseText, b, a]);
                                });
                            }
                    ),
            this
        );
    };
    m.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "), function (a, b) {
        m.fn[b] = function (a) {
            return this.on(b, a);
        };
    });
    m.expr.pseudos.animated = function (a) {
        return m.grep(m.timers, function (b) {
            return a === b.elem;
        }).length;
    };
    m.offset = {
        setOffset: function (a, b, c) {
            var d,
                e,
                f,
                g,
                h,
                k,
                l = m.css(a, "position"),
                n = m(a),
                q = {};
            "static" === l && (a.style.position = "relative");
            h = n.offset();
            f = m.css(a, "top");
            k = m.css(a, "left");
            ("absolute" === l || "fixed" === l) && -1 < (f + k).indexOf("auto") ? ((d = n.position()), (g = d.top), (e = d.left)) : ((g = parseFloat(f) || 0), (e = parseFloat(k) || 0));
            m.isFunction(b) && (b = b.call(a, c, m.extend({}, h)));
            null != b.top && (q.top = b.top - h.top + g);
            null != b.left && (q.left = b.left - h.left + e);
            "using" in b ? b.using.call(a, q) : n.css(q);
        },
    };
    m.fn.extend({
        offset: function (a) {
            if (arguments.length)
                return void 0 === a
                    ? this
                    : this.each(function (b) {
                          m.offset.setOffset(this, a, b);
                      });
            var b,
                c,
                d,
                e,
                f = this[0];
            if (f)
                return f.getClientRects().length
                    ? ((d = f.getBoundingClientRect()), (b = f.ownerDocument), (c = b.documentElement), (e = b.defaultView), { top: d.top + e.pageYOffset - c.clientTop, left: d.left + e.pageXOffset - c.clientLeft })
                    : { top: 0, left: 0 };
        },
        position: function () {
            if (this[0]) {
                var a,
                    b,
                    c = this[0],
                    d = { top: 0, left: 0 };
                return (
                    "fixed" === m.css(c, "position")
                        ? (b = c.getBoundingClientRect())
                        : ((a = this.offsetParent()), (b = this.offset()), e(a[0], "html") || (d = a.offset()), (d = { top: d.top + m.css(a[0], "borderTopWidth", !0), left: d.left + m.css(a[0], "borderLeftWidth", !0) })),
                    { top: b.top - d.top - m.css(c, "marginTop", !0), left: b.left - d.left - m.css(c, "marginLeft", !0) }
                );
            }
        },
        offsetParent: function () {
            return this.map(function () {
                for (var a = this.offsetParent; a && "static" === m.css(a, "position"); ) a = a.offsetParent;
                return a || Ta;
            });
        },
    });
    m.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (a, b) {
        var c = "pageYOffset" === b;
        m.fn[a] = function (d) {
            return yb(
                this,
                function (a, d, e) {
                    var f;
                    return m.isWindow(a) ? (f = a) : 9 === a.nodeType && (f = a.defaultView), void 0 === e ? (f ? f[b] : a[d]) : void (f ? f.scrollTo(c ? f.pageXOffset : e, c ? e : f.pageYOffset) : (a[d] = e));
                },
                a,
                d,
                arguments.length
            );
        };
    });
    m.each(["top", "left"], function (a, b) {
        m.cssHooks[b] = va(la.pixelPosition, function (a, c) {
            if (c) return (c = ha(a, b)), xc.test(c) ? m(a).position()[b] + "px" : c;
        });
    });
    m.each({ Height: "height", Width: "width" }, function (a, b) {
        m.each({ padding: "inner" + a, content: b, "": "outer" + a }, function (c, d) {
            m.fn[d] = function (e, f) {
                var g = arguments.length && (c || "boolean" != typeof e),
                    h = c || (!0 === e || !0 === f ? "margin" : "border");
                return yb(
                    this,
                    function (b, c, e) {
                        var f;
                        return m.isWindow(b)
                            ? 0 === d.indexOf("outer")
                                ? b["inner" + a]
                                : b.document.documentElement["client" + a]
                            : 9 === b.nodeType
                            ? ((f = b.documentElement), Math.max(b.body["scroll" + a], f["scroll" + a], b.body["offset" + a], f["offset" + a], f["client" + a]))
                            : void 0 === e
                            ? m.css(b, c, h)
                            : m.style(b, c, e, h);
                    },
                    b,
                    g ? e : void 0,
                    g
                );
            };
        });
    });
    m.fn.extend({
        bind: function (a, b, c) {
            return this.on(a, null, b, c);
        },
        unbind: function (a, b) {
            return this.off(a, null, b);
        },
        delegate: function (a, b, c, d) {
            return this.on(b, a, c, d);
        },
        undelegate: function (a, b, c) {
            return 1 === arguments.length ? this.off(a, "**") : this.off(b, a || "**", c);
        },
    });
    m.holdReady = function (a) {
        a ? m.readyWait++ : m.ready(!0);
    };
    m.isArray = Array.isArray;
    m.parseJSON = JSON.parse;
    m.nodeName = e;
    "function" == typeof define &&
        define.amd &&
        define("jquery", [], function () {
            return m;
        });
    var Ie = b.jQuery,
        Nd = b.$;
    return (
        (m.noConflict = function (a) {
            return b.$ === m && (b.$ = Nd), a && b.jQuery === m && (b.jQuery = Ie), m;
        }),
        a || (b.jQuery = b.$ = m),
        m
    );
});
(function (b) {
    "function" === typeof define && define.amd ? define(["jquery"], b) : "object" === typeof exports ? (module.exports = b) : b(jQuery);
})(function (b) {
    function a(a) {
        var c = a || window.event,
            d = [].slice.call(arguments, 1),
            f = 0,
            q = 0,
            u = 0,
            v = 0,
            v = 0;
        a = b.event.fix(c);
        a.type = "mousewheel";
        c.wheelDelta && (f = c.wheelDelta);
        c.detail && (f = -1 * c.detail);
        c.deltaY && (f = u = -1 * c.deltaY);
        c.deltaX && ((q = c.deltaX), (f = -1 * q));
        void 0 !== c.wheelDeltaY && (u = c.wheelDeltaY);
        void 0 !== c.wheelDeltaX && (q = -1 * c.wheelDeltaX);
        v = Math.abs(f);
        if (!e || v < e) e = v;
        v = Math.max(Math.abs(u), Math.abs(q));
        if (!g || v < g) g = v;
        c = 0 < f ? "floor" : "ceil";
        f = Math[c](f / e);
        q = Math[c](q / g);
        u = Math[c](u / g);
        d.unshift(a, f, q, u);
        return (b.event.dispatch || b.event.handle).apply(this, d);
    }
    var c = ["wheel", "mousewheel", "DOMMouseScroll", "MozMousePixelScroll"],
        d = "onwheel" in document || 9 <= document.documentMode ? ["wheel"] : ["mousewheel", "DomMouseScroll", "MozMousePixelScroll"],
        e,
        g;
    if (b.event.fixHooks) for (var f = c.length; f; ) b.event.fixHooks[c[--f]] = b.event.mouseHooks;
    b.event.special.mousewheel = {
        setup: function () {
            if (this.addEventListener) for (var b = d.length; b; ) this.addEventListener(d[--b], a, !1);
            else this.onmousewheel = a;
        },
        teardown: function () {
            if (this.removeEventListener) for (var b = d.length; b; ) this.removeEventListener(d[--b], a, !1);
            else this.onmousewheel = null;
        },
    };
    b.fn.extend({
        mousewheel: function (a) {
            return a ? this.bind("mousewheel", a) : this.trigger("mousewheel");
        },
        unmousewheel: function (a) {
            return this.unbind("mousewheel", a);
        },
    });
});
(function (b) {
    if ("undefined" !== typeof module && module.exports) module.exports = b(this);
    else if ("function" === typeof define && define.amd) {
        var a = this;
        define("i18n", function () {
            return b(a);
        });
    } else this.I18n = b(this);
})(function (b) {
    var a = (b && b.I18n) || {},
        c = Array.prototype.slice,
        d = function (a) {
            return ("0" + a.toString()).substr(-2);
        },
        e = {
            day_names: "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),
            abbr_day_names: "Sun Mon Tue Wed Thu Fri Sat".split(" "),
            month_names: [null, "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            abbr_month_names: [null, "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            meridian: ["AM", "PM"],
        },
        g = { precision: 3, separator: ".", delimiter: ",", strip_insignificant_zeros: !1 },
        f = { unit: "$", precision: 2, format: "%u%n", sign_first: !0, delimiter: ",", separator: "." },
        k = { unit: "%", precision: 3, format: "%n%u", separator: ".", delimiter: "" },
        h = [null, "kb", "mb", "gb", "tb"],
        l = /(?:\{\{|%\{)(.*?)(?:\}\}?)/gm,
        n = {};
    a.reset = function () {
        this.locale = this.defaultLocale = "en";
        this.defaultSeparator = ".";
        this.placeholder = l;
        this.fallbacks = !1;
        this.translations = n;
        this.missingBehaviour = "message";
        this.missingTranslationPrefix = "";
    };
    a.initializeOptions = function () {
        "undefined" === typeof this.defaultLocale && null !== this.defaultLocale && (this.defaultLocale = "en");
        "undefined" === typeof this.locale && null !== this.locale && (this.locale = "en");
        "undefined" === typeof this.defaultSeparator && null !== this.defaultSeparator && (this.defaultSeparator = ".");
        "undefined" === typeof this.placeholder && null !== this.placeholder && (this.placeholder = l);
        "undefined" === typeof this.fallbacks && null !== this.fallbacks && (this.fallbacks = !1);
        "undefined" === typeof this.translations && null !== this.translations && (this.translations = n);
    };
    a.initializeOptions();
    a.locales = {};
    a.locales.get = function (b) {
        var c = this[b] || this[a.locale] || this["default"];
        "function" === typeof c && (c = c(b));
        !1 === c instanceof Array && (c = [c]);
        return c;
    };
    a.locales["default"] = function (b) {
        var c = [],
            d = [],
            e;
        b && c.push(b);
        !b && a.locale && c.push(a.locale);
        a.fallbacks && a.defaultLocale && c.push(a.defaultLocale);
        c.forEach(function (b) {
            e = b.split("-")[0];
            ~d.indexOf(b) || d.push(b);
            a.fallbacks && e && e !== b && !~d.indexOf(e) && d.push(e);
        });
        c.length || c.push("en");
        return d;
    };
    a.pluralization = {};
    a.pluralization.get = function (b) {
        return this[b] || this[a.locale] || this["default"];
    };
    a.pluralization["default"] = function (a) {
        switch (a) {
            case 0:
                return ["zero", "other"];
            case 1:
                return ["one"];
            default:
                return ["other"];
        }
    };
    a.currentLocale = function () {
        return this.locale || this.defaultLocale;
    };
    a.isSet = function (a) {
        return void 0 !== a && null !== a;
    };
    a.lookup = function (a, b) {
        b = this.prepareOptions(b);
        var c = this.locales.get(b.locale).slice(),
            d,
            e;
        for (a = this.getFullScope(a, b); c.length; )
            if (((d = c.shift()), (e = a.split(this.defaultSeparator)), (d = this.translations[d]))) {
                for (; e.length && ((d = d[e.shift()]), void 0 !== d && null !== d); );
                if (void 0 !== d && null !== d) return d;
            }
        if (this.isSet(b.defaultValue)) return b.defaultValue;
    };
    a.meridian = function () {
        var a = this.lookup("time"),
            b = this.lookup("date");
        return a && a.am && a.pm ? [a.am, a.pm] : b && b.meridian ? b.meridian : e.meridian;
    };
    a.prepareOptions = function () {
        for (var a = c.call(arguments), b = {}, d; a.length; ) if (((d = a.shift()), "object" == typeof d)) for (var e in d) d.hasOwnProperty(e) && (this.isSet(b[e]) || (b[e] = d[e]));
        return b;
    };
    a.createTranslationOptions = function (a, b) {
        var c = [{ scope: a }];
        this.isSet(b.defaults) && (c = c.concat(b.defaults));
        this.isSet(b.defaultValue) && (c.push({ message: b.defaultValue }), delete b.defaultValue);
        return c;
    };
    a.translate = function (a, b) {
        b = this.prepareOptions(b);
        var c;
        if (
            !this.createTranslationOptions(a, b).some(function (a) {
                this.isSet(a.scope) ? (c = this.lookup(a.scope, b)) : this.isSet(a.message) && (c = a.message);
                if (void 0 !== c && null !== c) return !0;
            }, this)
        )
            return this.missingTranslation(a, b);
        "string" === typeof c ? (c = this.interpolate(c, b)) : c instanceof Object && this.isSet(b.count) && (c = this.pluralize(b.count, c, b));
        return c;
    };
    a.interpolate = function (a, b) {
        b = this.prepareOptions(b);
        var c = a.match(this.placeholder),
            d,
            e;
        if (!c) return a;
        for (; c.length; )
            (d = c.shift()),
                (e = d.replace(this.placeholder, "$1")),
                (e = this.isSet(b[e]) ? b[e].toString().replace(/\$/gm, "_#$#_") : e in b ? this.nullPlaceholder(d, a) : this.missingPlaceholder(d, a)),
                (d = new RegExp(d.replace(/\{/gm, "\\{").replace(/\}/gm, "\\}"))),
                (a = a.replace(d, e));
        return a.replace(/_#\$#_/g, "$");
    };
    a.pluralize = function (a, b, c) {
        c = this.prepareOptions(c);
        var d, e, f;
        d = b instanceof Object ? b : this.lookup(b, c);
        if (!d) return this.missingTranslation(b, c);
        for (b = this.pluralization.get(c.locale)(a); b.length; )
            if (((e = b.shift()), this.isSet(d[e]))) {
                f = d[e];
                break;
            }
        c.count = String(a);
        return this.interpolate(f, c);
    };
    a.missingTranslation = function (a, b) {
        if ("guess" == this.missingBehaviour) {
            var c = a.split(".").slice(-1)[0];
            return (
                (0 < this.missingTranslationPrefix.length ? this.missingTranslationPrefix : "") +
                c.replace("_", " ").replace(/([a-z])([A-Z])/g, function (a, b, c) {
                    return b + " " + c.toLowerCase();
                })
            );
        }
        c = this.getFullScope(a, b);
        return '[missing "' + [this.currentLocale(), c].join(this.defaultSeparator) + '" translation]';
    };
    a.missingPlaceholder = function (a, b) {
        return "[missing " + a + " value]";
    };
    a.nullPlaceholder = function () {
        return a.missingPlaceholder.apply(a, arguments);
    };
    a.toNumber = function (a, b) {
        b = this.prepareOptions(b, this.lookup("number.format"), g);
        var c = 0 > a,
            d = Math.abs(a).toFixed(b.precision).toString().split("."),
            e = [],
            f = b.format || "%n",
            c = c ? "-" : "";
        a = d[0];
        for (d = d[1]; 0 < a.length; ) e.unshift(a.substr(Math.max(0, a.length - 3), 3)), (a = a.substr(0, a.length - 3));
        e = e.join(b.delimiter);
        b.strip_insignificant_zeros && d && (d = d.replace(/0+$/, ""));
        0 < b.precision && d && (e += b.separator + d);
        f = b.sign_first ? "%s" + f : f.replace("%n", "%s%n");
        return (e = f.replace("%u", b.unit).replace("%n", e).replace("%s", c));
    };
    a.toCurrency = function (a, b) {
        b = this.prepareOptions(b, this.lookup("number.currency.format"), this.lookup("number.format"), f);
        return this.toNumber(a, b);
    };
    a.localize = function (a, b, c) {
        c || (c = {});
        switch (a) {
            case "currency":
                return this.toCurrency(b);
            case "number":
                return (a = this.lookup("number.format")), this.toNumber(b, a);
            case "percentage":
                return this.toPercentage(b);
            default:
                return (a = a.match(/^(date|time)/) ? this.toTime(a, b) : b.toString()), this.interpolate(a, c);
        }
    };
    a.parseDate = function (a) {
        var b;
        if ("object" == typeof a) return a;
        if ((b = a.toString().match(/(\d{4})-(\d{2})-(\d{2})(?:[ T](\d{2}):(\d{2}):(\d{2})([\.,]\d{1,3})?)?(Z|\+00:?00)?/))) {
            for (a = 1; 6 >= a; a++) b[a] = parseInt(b[a], 10) || 0;
            --b[2];
            a = b[7] ? 1e3 * ("0" + b[7]) : null;
            b = b[8] ? new Date(Date.UTC(b[1], b[2], b[3], b[4], b[5], b[6], a)) : new Date(b[1], b[2], b[3], b[4], b[5], b[6], a);
        } else
            "number" == typeof a
                ? ((b = new Date()), b.setTime(a))
                : a.match(/([A-Z][a-z]{2}) ([A-Z][a-z]{2}) (\d+) (\d+:\d+:\d+) ([+-]\d+) (\d+)/)
                ? ((b = new Date()), b.setTime(Date.parse([RegExp.$1, RegExp.$2, RegExp.$3, RegExp.$6, RegExp.$4, RegExp.$5].join(" "))))
                : (a.match(/\d+ \d+:\d+:\d+ [+-]\d+ \d+/), (b = new Date()), b.setTime(Date.parse(a)));
        return b;
    };
    a.strftime = function (b, c) {
        var f = this.lookup("date"),
            g = a.meridian();
        f || (f = {});
        var f = this.prepareOptions(f, e),
            h = b.getDay(),
            k = b.getDate(),
            l = b.getFullYear(),
            n = b.getMonth() + 1,
            r = b.getHours(),
            x = r,
            z = 11 < r ? 1 : 0,
            B = b.getSeconds(),
            G = b.getMinutes(),
            H = b.getTimezoneOffset(),
            J = Math.floor(Math.abs(H / 60)),
            A = Math.abs(H) - 60 * J,
            H = (0 < H ? "-" : "+") + (2 > J.toString().length ? "0" + J : J) + (2 > A.toString().length ? "0" + A : A);
        12 < x ? (x -= 12) : 0 === x && (x = 12);
        c = c.replace("%a", f.abbr_day_names[h]);
        c = c.replace("%A", f.day_names[h]);
        c = c.replace("%b", f.abbr_month_names[n]);
        c = c.replace("%B", f.month_names[n]);
        c = c.replace("%d", d(k));
        c = c.replace("%e", k);
        c = c.replace("%-d", k);
        c = c.replace("%H", d(r));
        c = c.replace("%-H", r);
        c = c.replace("%I", d(x));
        c = c.replace("%-I", x);
        c = c.replace("%m", d(n));
        c = c.replace("%-m", n);
        c = c.replace("%M", d(G));
        c = c.replace("%-M", G);
        c = c.replace("%p", g[z]);
        c = c.replace("%S", d(B));
        c = c.replace("%-S", B);
        c = c.replace("%w", h);
        c = c.replace("%y", d(l));
        c = c.replace("%-y", d(l).replace(/^0+/, ""));
        c = c.replace("%Y", l);
        return (c = c.replace("%z", H));
    };
    a.toTime = function (a, b) {
        var c = this.parseDate(b),
            d = this.lookup(a);
        return c.toString().match(/invalid/i) || !d ? c.toString() : this.strftime(c, d);
    };
    a.toPercentage = function (a, b) {
        b = this.prepareOptions(b, this.lookup("number.percentage.format"), this.lookup("number.format"), k);
        return this.toNumber(a, b);
    };
    a.toHumanSize = function (a, b) {
        for (var c = a, d = 0, e; 1024 <= c && 4 > d; ) (c /= 1024), (d += 1);
        0 === d ? ((d = this.t("number.human.storage_units.units.byte", { count: c })), (e = 0)) : ((d = this.t("number.human.storage_units.units." + h[d])), (e = 0 === c - Math.floor(c) ? 0 : 1));
        b = this.prepareOptions(b, { unit: d, precision: e, format: "%n%u", delimiter: "" });
        return this.toNumber(c, b);
    };
    a.getFullScope = function (a, b) {
        b = this.prepareOptions(b);
        a.constructor === Array && (a = a.join(this.defaultSeparator));
        b.scope && (a = [b.scope, a].join(this.defaultSeparator));
        return a;
    };
    a.t = a.translate;
    a.l = a.localize;
    a.p = a.pluralize;
    return a;
});
I18n.translations || (I18n.translations = {});
I18n.translations.en = {
    date: {
        abbr_day_names: "Sun Mon Tue Wed Thu Fri Sat".split(" "),
        abbr_month_names: [null, "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        day_names: "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),
        formats: { default: "%Y-%m-%d", long: "%B %e, %Y", only_day: "%e", short: "%e %b" },
        month_names: [null, "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        order: ["year", "month", "day"],
    },
    envoy: {
        cond_flags: {
            acb_ctrl: {
                bmudatabounds: "BMU Data Bounds Error",
                bmuhardwareerror: "BMU Hardware Error",
                bmuimageerror: "BMU Image Error",
                bmumaxcurrentwarning: "BMU Max Current Warning",
                bmusenseerror: "BMU Sense Error",
                cellmaxtemperror: "Cell Max Temperature Error",
                cellmaxtempwarning: "Cell Max Temperature Warning",
                cellmaxvoltageerror: "Cell Max Voltage Error",
                cellmaxvoltagewarning: "Cell Max Voltage Warning",
                cellmintemperror: "Cell Min Temperature Error",
                cellmintempwarning: "Cell Min Temperature Warning",
                cellminvoltageerror: "Cell Min Voltage Error",
                cellminvoltagewarning: "Cell Min Voltage Warning",
                cibcanerror: "CIB CAN Error",
                cibimageerror: "CIB Image Error",
                cibspierror: "CIB SPI Error",
            },
            nsrb_ctrl: {
                acfreqhigh: "AC Frequency High",
                acfreqlow: "AC Frequency Low",
                acfrequencyoor: "AC Frequency Out Of Range",
                acvoltageavgline1: "AC Voltage Avg Out Of Range - Phase 1",
                acvoltageavgline2: "AC Voltage Avg Out Of Range - Phase 2",
                acvoltageavgline3: "AC Voltage Avg Out Of Range - Phase 3",
                acvoltagehighline1: "AC Voltage High - Phase 1",
                acvoltagehighline2: "AC Voltage Out Of Range - Phase 2",
                acvoltagehighline3: "AC Voltage High - Phase 3",
                acvoltagelowline1: "AC Voltage Low - Phase 1",
                acvoltagelowline2: "AC Voltage Out Of Range - Phase 2",
                acvoltagelowline3: "AC Voltage Low - Phase 3",
                acvoltageoorline1: "AC Voltage Out Of Range - Phase 1",
                acvoltageoorline2: "AC Voltage Out Of Range - Phase 2",
                acvoltageoorline3: "AC Voltage Out Of Range - Phase 3",
                buttonpress: "Button Pressed",
                dcgriderror: "DC Grid Current Error",
                dcgridhigh: "DC Grid Current High",
                dcgridlow: "DC Grid Current Low",
                relayforced: "Relay Forced",
                relayopen: "Relay Open",
                rocof: "Rate of Change of Frequency Error",
            },
            obs_strs: {
                discovering: "Discovering",
                failure: "Failure to report",
                flasherror: "Flash Error",
                notmonitored: "Not Monitored",
                ok: "Normal",
                plmerror: "PLM Error",
                secmodeenterfailure: "Secure mode enter failure",
                secmodeexitfailure: "Secure mode exit failure",
                sleeping: "Sleep Mode On",
                verifing: "Verifying Device",
            },
            pcu_chan: {
                acMonitorError: "AC Monitor Error",
                acfrequencyhigh: "AC Frequency High",
                acfrequencylow: "AC Frequency Low",
                acfrequencyoor: "AC Frequency Out Of Range",
                acvoltage_avg_hi: "AC Voltage Average High",
                acvoltagehigh: "AC Voltage High",
                acvoltagelow: "AC Voltage Low",
                acvoltageoor: "AC Voltage Out Of Range",
                acvoltageoosp1: "AC Voltage Out Of Range - Phase 1",
                acvoltageoosp2: "AC Voltage Out Of Range - Phase 2",
                acvoltageoosp3: "AC Voltage Out Of Range - Phase 3",
                agfpowerlimiting: "AGF Power Limiting",
                dcresistancelow: "DC Resistance Low",
                dcresistancelowpoweroff: "DC Resistance Low - Power Off",
                dcvoltagetoohigh: "DC Voltage Too High",
                dcvoltagetoolow: "DC Voltage Too Low",
                dfdt: "AC Frequency Changing too Fast",
                gfitripped: "GFI Tripped",
                gridgone: "Grid Gone",
                gridinstability: "Grid Instability",
                gridoffsethi: "Grid Offset Hi",
                gridoffsetlow: "Grid Offset Low",
                hardwareError: "Hardware Error",
                hardwareWarning: "Hardware Warning",
                highskiprate: "High Skip Rate",
                invalidinterval: "Invalid Interval",
                pwrgenoffbycmd: "Power generation off by command",
                skippedcycles: "Skipped Cycles",
                vreferror: "Voltage Ref Error",
            },
            pcu_ctrl: {
                alertactive: "Alert Active",
                altpwrgenmode: "Alternate Power Generation Mode",
                altvfsettings: "Alternate Voltage and Frequency Settings",
                badflashimage: "Bad Flash Image",
                bricked: "No Grid Profile",
                commandedreset: "Commanded Reset",
                criticaltemperature: "Critical Temperature",
                "dc-pwr-low": "DC Power Too Low",
                iuplinkproblem: "IUP Link Problem",
                manutestmode: "In Manu Test Mode",
                nsync: "Grid Perturbation Unsynchronized",
                overtemperature: "Over Temperature",
                poweronreset: "Power On Reset",
                pwrgenoffbycmd: "Power generation off by command",
                runningonac: "Running on AC",
                "sleep-mode": "Sleep Mode On",
                tpmtest: "Transient Grid Profile",
                unexpectedreset: "Unexpected Reset",
                watchdogreset: "Watchdog Reset",
            },
            rgm_chan: { check_meter: "Meter Error", power_quality: "Poor Power Quality" },
        },
        global: {
            cleared: "Clear",
            copyright_notice: "2007-2014, [e] Enphase Energy, Inc. All rights reserved.",
            copyright_notice_01: "[e] Enphase Energy, Inc. All rights reserved.",
            cs_phone_number: "XXX-XXX-XXXX",
            disable: "Disable",
            disabled: "Disabled",
            enable: "Enable",
            enabled: "Enabled",
            enlighten_token_link: "Get the token here",
            false: "False",
            none: "None",
            notapplicable: "n/a",
            ok: "OK",
            page_not_found_msg1: "Page Not Found",
            page_not_found_msg2: "The page you tried to view does not exist",
            page_not_found_msg3: 'Try the <a href="/">home</a> page',
            serialnumber: "Serial Number",
            set: "Set",
            too_many_installer_sessions_msg1: "Too many installer sessions active",
            too_many_installer_sessions_msg2: "Consider closing other installer session windows",
            too_many_installer_sessions_msg3: "Too many requests active for this resource, please retry in a couple minutes",
            true: "True",
            unknown: "Unknown",
        },
        paging: {
            all: "All",
            clearchoices: "Reset Table",
            info: "Showing _START_ to _END_ of _TOTAL_ entries",
            infoempty: "Showing 0 to 0 of 0 entries",
            infofiltered: "(filtered from _MAX_ total entries)",
            lengthmenu: "Show _MENU_ entries",
            processing: "Processing...",
            search: "Search:",
            zerorecords: "No matching records found",
        },
    },
    envoy_backbone: {
        ac_batteries: {
            manage_options: {
                active: "Active (%{count})",
                active_count: { counting: { one: "Active (%{count})", other: "Active (%{count})", zero: "Active (%{count})" } },
                deleted: "Deleted (%{count})",
                deleted_count: { counting: { one: "Deleted (%{count})", other: "Deleted (%{count})", zero: "Deleted (%{count})" } },
            },
            max_temp: "Max Temp: ",
            nav: { all: "All", manage: "Manage", status: "Status" },
            no_inverters: "There are no batteries.",
            no_inverters_search: 'No AC Batteries were found matching "%{search_term}".',
            sleep_mode: {
                enable_failed: "The attempt to put the selected batteries into sleep mode failed. Please try again in a few minutes. If this problem continues, contact customer support.",
                prompt_to_cancel: { desc: "A battery must be in sleep mode before it can be safely disconnected.</br></br>Are you sure you want to stop the battery from going into sleep mode?" },
                prompt_to_sleep_modal: {
                    desc: "Batteries must be in sleep mode before they can be safely disconnected.</br></br><b>Note:</b> Batteries will charge or discharge to %{min}-%{max}% state of charge before entering sleep mode.",
                    target_soc_label: "Target State of Charge",
                    target_soc_link_text: "Change target state of charge",
                    warning: "Warning: Once a battery is put into sleep mode it can only be taken out of sleep mode by a professional installer.",
                },
                prompt_to_wake: "A battery must be in sleep mode before it can be safely disconnected.</br></br>Are you sure you want to turn sleep mode off?",
                sleep_btn: "Sleep",
            },
            state_of_charge: "State of Charge: ",
            status_options: {
                cancel_sleep_label: "Stop",
                comm_nocount: "Comm",
                power_nocount: "Operating",
                preparing_to_sleep_text: "Entering Sleep Mode",
                profile_nocount: "Config",
                wake_sleep_label: "Turn Off",
                waking_label: "Exiting Sleep Mode",
            },
        },
        app_title: "Envoy Mobile",
        authentication: {
            authentication_with_authms: "Login with Enphase",
            bad_jwt: "Bad token",
            insert_token_headline: "Token Authentication",
            title: "Authentication",
            token_headline: "Token",
            token_link: "Visit %{auth_authority} to get your token",
            token_submit: "Submit",
            too_many_sessions: "Too many sessions",
            verifying_jwt: "Verifying token",
        },
        buttons: {
            cancel: "Cancel",
            change: "Change",
            close: "Close",
            connect: "Connect",
            edit: "Edit",
            forget: "Forget",
            forget_network: "Forget this Network",
            ok: "OK",
            sleep_off: "Turn Sleep Mode Off",
            sleep_on: "Turn Sleep Mode On",
            start_scan: "Start Scan",
            stop: "Stop",
            update: "Update",
        },
        cellular: {
            carrier: "Carrier",
            connected: "Connected",
            connection_status: "Connection Status",
            iccid: "ICCID (Cell Number)",
            imsi: "IMSI (Subscriber ID)",
            mei: "Modem IMEI Number",
            no_modem: "No cellular modem detected",
            not_connected: "Not Connected",
            page_title: "Cellular Configuration",
        },
        comm_check: {
            communication_level: "Communications Level",
            description: "Check signal strength between the Envoy and the microinverters.",
            devices: "Devices",
            in_progress: "Communications Check in Progress",
            remaining_time: "%{minutes} minutes remaining",
            remaining_time_one: "< 1 minute remaining",
            start: "Start Communications Check",
            stop: "Stop Communications Check",
            title: "Communications Check",
        },
        comms: {
            communicating: "Communicating",
            description: "The Envoy\u2019s list of communicating microinverters includes the serial numbers of all devices that are receiving messages from the Envoy and reporting production and status information.",
            not_communicating: "Not Communicating",
            title: "Microinverters Communicating",
        },
        countries: {
            AD: "Andorra",
            AE: "United Arab Emirates",
            AF: "Afghanistan",
            AG: "Antigua and Barbuda",
            AI: "Anguilla",
            AL: "Albania",
            AM: "Armenia",
            AQ: "Antarctica",
            AR: "Argentina",
            AS: "American Samoa",
            AT: "Austria",
            AU: "Australia",
            AW: "Aruba",
            AZ: "Azerbaijan",
            BA: "Bosnia and Herzegovina",
            BB: "Barbados",
            BD: "Bangladesh",
            BE: "Belgium",
            BF: "Burkina Faso",
            BG: "Bulgaria",
            BH: "Bahrain",
            BI: "Burundi",
            BJ: "Benin",
            BM: "Bermuda",
            BN: "Brunei Darussalam",
            BO: "Bolivia, Plurinational State of",
            BR: "Brazil",
            BS: "Bahamas",
            BT: "Bhutan",
            BV: "Bouvet Island",
            BW: "Botswana",
            BY: "Belarus",
            BZ: "Belize",
            CA: "Canada",
            CC: "Cocos (Keeling) Islands",
            CF: "Central African Republic",
            CG: "Congo",
            CH: "Switzerland",
            CI: "Cd'Ivoire",
            CK: "Cook Islands",
            CL: "Chile",
            CM: "Cameroon",
            CN: "China",
            CO: "Colombia",
            CR: "Costa Rica",
            CV: "Cape Verde",
            CX: "Christmas Island",
            CY: "Cyprus",
            CZ: "Czech Republic",
            DE: "Germany",
            DJ: "Djibouti",
            DK: "Denmark",
            DM: "Dominica",
            DO: "Dominican Republic",
            DZ: "Algeria",
            EC: "Ecuador",
            EE: "Estonia",
            EG: "Egypt",
            EH: "Western Sahara",
            ER: "Eritrea",
            ES: "Spain",
            ET: "Ethiopia",
            FI: "Finland",
            FJ: "Fiji",
            FK: "Falkland Islands (Malvinas)",
            FM: "Micronesia, Federated States of",
            FO: "Faroe Islands",
            FR: "France",
            GA: "Gabon",
            GB: "United Kingdom",
            GD: "Grenada",
            GE: "Georgia",
            GF: "French Guiana",
            GH: "Ghana",
            GI: "Gibraltar",
            GL: "Greenland",
            GM: "Gambia",
            GN: "Guinea",
            GP: "Guadeloupe",
            GQ: "Equatorial Guinea",
            GR: "Greece",
            GS: "South Georgia and the South Sandwich Islands",
            GT: "Guatemala",
            GU: "Guam",
            GW: "Guinea-Bissau",
            GY: "Guyana",
            HK: "Hong Kong",
            HM: "Heard Island and McDonald Islands",
            HN: "Honduras",
            HR: "Croatia",
            HT: "Haiti",
            HU: "Hungary",
            ID: "Indonesia",
            IE: "Ireland",
            IL: "Israel",
            IN: "India",
            IO: "British Indian Ocean Territory",
            IS: "Iceland",
            IT: "Italy",
            JM: "Jamaica",
            JO: "Jordan",
            JP: "Japan",
            KE: "Kenya",
            KG: "Kyrgyzstan",
            KH: "Cambodia",
            KI: "Kiribati",
            KM: "Comoros",
            KN: "Saint Kitts and Nevis",
            KR: "Korea, Republic of",
            KW: "Kuwait",
            KY: "Cayman Islands",
            KZ: "Kazakhstan",
            LA: "Lao People's Democratic Republic",
            LB: "Lebanon",
            LC: "Saint Lucia",
            LI: "Liechtenstein",
            LK: "Sri Lanka",
            LR: "Liberia",
            LS: "Lesotho",
            LT: "Lithuania",
            LU: "Luxembourg",
            LV: "Latvia",
            MA: "Morocco",
            MC: "Monaco",
            MD: "Moldova, Republic of",
            ME: "Montenegro",
            MG: "Madagascar",
            MH: "Marshall Islands",
            ML: "Mali",
            MM: "Myanmar",
            MN: "Mongolia",
            MO: "Macao",
            MP: "Northern Mariana Islands",
            MQ: "Martinique",
            MR: "Mauritania",
            MS: "Montserrat",
            MT: "Malta",
            MU: "Mauritius",
            MV: "Maldives",
            MW: "Malawi",
            MX: "Mexico",
            MY: "Malaysia",
            MZ: "Mozambique",
            NA: "Namibia",
            NC: "New Caledonia",
            NE: "Niger",
            NF: "Norfolk Island",
            NG: "Nigeria",
            NI: "Nicaragua",
            NL: "Netherlands",
            NO: "Norway",
            NP: "Nepal",
            NR: "Nauru",
            NU: "Niue",
            NZ: "New Zealand",
            OM: "Oman",
            PA: "Panama",
            PE: "Peru",
            PF: "French Polynesia",
            PG: "Papua New Guinea",
            PH: "Philippines",
            PK: "Pakistan",
            PL: "Poland",
            PM: "Saint Pierre and Miquelon",
            PN: "Pitcairn",
            PR: "Puerto Rico",
            PT: "Portugal",
            PW: "Palau",
            PY: "Paraguay",
            QA: "Qatar",
            RO: "Romania",
            RU: "Russian Federation",
            SA: "Saudi Arabia",
            SB: "Solomon Islands",
            SC: "Seychelles",
            SE: "Sweden",
            SG: "Singapore",
            SH: "Saint Helena, Ascension and Tristan da Cunha",
            SI: "Slovenia",
            SJ: "Svalbard and Jan Mayen",
            SK: "Slovakia",
            SL: "Sierra Leone",
            SM: "San Marino",
            SN: "Senegal",
            SO: "Somalia",
            SR: "Suriname",
            ST: "Sao Tome and Principe",
            SV: "El Salvador",
            SY: "Syrian Arab Republic",
            SZ: "Swaziland",
            TC: "Turks and Caicos Islands",
            TD: "Chad",
            TF: "French Southern Territories",
            TG: "Togo",
            TH: "Thailand",
            TJ: "Tajikistan",
            TK: "Tokelau",
            TL: "Timor-Leste",
            TM: "Turkmenistan",
            TN: "Tunisia",
            TO: "Tonga",
            TR: "Turkey",
            TT: "Trinidad and Tobago",
            TV: "Tuvalu",
            TZ: "Tanzania, United Republic of",
            UA: "Ukraine",
            UG: "Uganda",
            UM: "United States Minor Outlying Islands",
            US: "United States",
            UY: "Uruguay",
            UZ: "Uzbekistan",
            VA: "Holy See (Vatican City State)",
            VC: "Saint Vincent and the Grenadines",
            VE: "Venezuela, Bolivarian Republic of",
            VG: "Virgin Islands, British",
            VI: "Virgin Islands, U.S.",
            VN: "Viet Nam",
            VU: "Vanuatu",
            WF: "Wallis and Futuna",
            WS: "Samoa",
            YE: "Yemen",
            YT: "Mayotte",
            ZA: "South Africa",
            ZM: "Zambia",
            ZW: "Zimbabwe",
        },
        counts: "%{actual_count}/%{expected_count}",
        detected: {
            battery_target_seperate: { one: "%{count} battery", other: "%{count} batteries", zero: "%{count} batteries" },
            description:
                "The Envoy\u2019s list of detected microinverters includes all serial numbers discovered by a device scan or provisioned with the Installer Toolkit. When microinverters have been detected, they can send and receive additional data from the Envoy.",
            detected: "Detected",
            device_target: "Device Target: %{count}",
            device_target_title: "Device Target: ",
            discovered: "Discovered:",
            installed: "Installed",
            micro_target_seperate: { one: "%{count} microinverter", other: "%{count} microinverters", zero: "%{count} microinverters" },
            nsr_target_separate: { one: "%{count} Q-Relay", other: "%{count} Q-Relays", zero: "%{count} Q-Relays" },
            provisioned: "Provisioned:",
            remaining_duration: { one: "Remaining Duration: %{count} hour %{minutes} mins", other: "Remaining Duration: %{count} hours %{minutes} mins", zero: "Remaining Duration: %{count} hours %{minutes} mins" },
            remaining_hour_one: "1 hour",
            remaining_hours: "%{hours} hours",
            remaining_minute_one: "1 minute remaining",
            remaining_minutes: "%{minutes} minutes remaining",
            remaining_priority: {
                one: "Remaining Priority Duration: %{count} hour %{minutes} mins",
                other: "Remaining Priority Duration: %{count} hours %{minutes} mins",
                zero: "Remaining Priority Duration: %{count} hours %{minutes} mins",
            },
            remaining_time: "%{minutes} minutes remaining",
            remaining_time_one: "< 1 minute remaining",
            scan_inprogress: "Device Scan in Progress",
            scan_start: "Start Device Scan",
            scan_stop: "Stop Scan",
            title: "Microinverters Detected",
        },
        device_alert_messages: {
            meters_not_enabled: "The production and consumption meters must be configured for Batteries to operate.",
            no_phase_assignment: "Batteries will not operate until they are assigned to phases.",
            not_configured: "The Batteries must be configured before they will operate.",
        },
        devices: {
            detected: "Detected",
            detected_total_count: "%{detected_count} of %{total_count}",
            device_info: {
                change_phase: "Change Phase",
                comm_level: "Comm Level: ",
                comm_level_2_4_ghz: "Comm Level (2.4 GHz): ",
                comm_level_sub_ghz: "Comm Level (Sub GHz): ",
                detected: "Detected: ",
                discovered: "Discovered via device scan / Pre Provisioned ",
                grid_profile: "Grid Profile: ",
                last_comm: "Last Communication: ",
                last_report: "Last Report: ",
                notapplicable: "n/a",
                param_table: "Parameter Table: ",
                part_number: "Part Number: ",
                pending_condition_clear: '"%{condition_flag}" clear condition command is in progress.',
                phase: "Phase: ",
                phase_unknown: "No phase selected",
                provisioned: "Assigned via provisioning",
                running_image: "Running Image: ",
                select_phase: "Select Phase",
                status: "Status: ",
                unknown: "Unknown",
                updated: "Updated ",
                view_in_array: "View in Array",
            },
            device_scan: "Device Scan",
            device_scan_short: "Scan",
            scan_state: { active: "Active", inactive: "Inactive", scan_disabled: "Disabled", scan_inhibited: "Inhibited", scan_suspended: "Suspended" },
        },
        encharge_batteries: {
            manage_options: {
                active: "Active (%{count})",
                active_count: { counting: { one: "Active (%{count})", other: "Active (%{count})", zero: "Active (%{count})" } },
                deleted: "Deleted (%{count})",
                deleted_count: { counting: { one: "Deleted (%{count})", other: "Deleted (%{count})", zero: "Deleted (%{count})" } },
            },
            nav: { all: "All", manage: "Manage", status: "Status" },
            no_inverters: "There are no encharge batteries.",
            no_inverters_search: 'No Encharge Batteries were found matching "%{search_term}".',
            phase_labels: { "ph-a": "L1(A)", "ph-b": "L2(B)", "ph-c": "L3(C)", "ph-unk": "No phase selected", "ph-updating": "Updating...", select_one: "Select One" },
            status_options: {
                cancel_sleep_label: "Stop",
                comm_nocount: "Comm",
                power_nocount: "Operating",
                preparing_to_sleep_text: "Entering Sleep Mode",
                profile_nocount: "Config",
                wake_sleep_label: "Turn Off",
                waking_label: "Exiting Sleep Mode",
            },
            title: "Encharge",
        },
        enpowers: {
            manage_options: {
                active: "Active (%{count})",
                active_count: { counting: { one: "Active (%{count})", other: "Active (%{count})", zero: "Active (%{count})" } },
                deleted: "Deleted (%{count})",
                deleted_count: { counting: { one: "Deleted (%{count})", other: "Deleted (%{count})", zero: "Deleted (%{count})" } },
            },
            max_temp: "Max Temp: ",
            nav: { all: "All", manage: "Manage", status: "Status" },
            no_inverters: "There is no Enpower device.",
            no_inverters_search: 'No Enpower device found matching "%{search_term}".',
            state_of_grid: { closed: "Closed", open: "Open", title: "State of Grid: " },
            status_options: { comm_nocount: "Comm", power_nocount: "Operating", profile_nocount: "Config" },
            title: "Enpower",
        },
        errors: {
            error_message: "Sorry, there's a problem getting data from the Envoy. If this continues, contact customer support.",
            interface_not_dhcp: "Sorry, you cannot get a new IP address. Switch the Envoy IP setting to DHCP first.",
            not_allowed: "Sorry, your requested change is not permitted and could not be saved.",
            not_authorized: "Sorry, you are not authorized to view that page.",
            save_failed: "Sorry, your changes could not be saved. ",
            start_scan_target_too_low:
                "<p>You've indicated that you expect %{expected_count} microinverters to report to this Envoy, and %{expected_count} have already been detected.</p><p>Before starting a device scan, <a href='#' class='open-target-count'>increase the number of microinverters expected</a> or delete one or more microinverters from the <a href='#' class='open-manage-devices'>manage devices screen</a>.</p>",
            start_scan_target_too_low_battery: {
                one: "<p>You've indicated that you expect %{count} battery to report to this Envoy, and that has already been detected.</p>",
                other: "<p>You've indicated that you expect %{count} batteries to report to this Envoy, and that many have already been detected.</p>",
                zero: "<p>You've indicated that you expect %{count} batteries to report to this Envoy, and that many have already been detected.</p>",
            },
            start_scan_target_too_low_battery_end:
                "<p>Before starting a device scan, <a href='#' class='open-target-count'>increase the number of batteries expected</a> or delete one or more batteries from the <a href='#' class='open-manage-devices-battery'>manage devices screen</a>.</p>",
            start_scan_target_too_low_both:
                "<p>The expected number of devices have already been detected.</p><p>Before starting a device scan, <a href='#' class='open-target-count'>increase the number of devices expected</a> or delete one or more microinverters or batteries.</p>",
            start_scan_target_too_low_micro: {
                one: "<p>You've indicated that you expect %{count} microinverter to report to this Envoy, and that has already been detected.</p>",
                other: "<p>You've indicated that you expect %{count} microinverters to report to this Envoy, and that many have already been detected.</p>",
                zero: "<p>You've indicated that you expect %{count} microinverters to report to this Envoy, and that many have already been detected.</p>",
            },
            start_scan_target_too_low_micro_end:
                "<p>Before starting a device scan, <a href='#' class='open-target-count'>increase the number of microinverters expected</a> or delete one or more microinverters from the <a href='#' class='open-manage-devices'>manage devices screen</a>.</p>",
            start_scan_target_too_low_nsr: {
                one: "<p>You've indicated that you expect %{count} Q-Relay to report to this Envoy, and that has already been detected.</p>",
                other: "<p>You've indicated that you expect %{count} Q-Relays to report to this Envoy, and that many have already been detected.</p>",
                zero: "<p>You've indicated that you expect %{count} Q-Relays to report to this Envoy, and that many have already been detected.</p>",
            },
            start_scan_target_too_low_nsr_end:
                "<p>Before starting a device scan, <a href='#' class='open-target-count'>increase the number of Q-Relays expected</a> or delete one or more Q-Relays from the <a href='#' class='open-manage-devices-nsr'>manage devices screen</a>.</p>",
            start_scan_title: "Device Scan Unavailable",
            timeout_message:
                "Sorry, it's taking too long to get data from the Envoy. Make sure the Envoy is powered on, and that the Envoy and this device are both connected to the same local network. If the problem continues, contact customer support.",
            title: "Error",
            tunnel_close_failed: "Attempt to close the connection to Enphase support failed. If this continues, contact customer support.",
            tunnel_failed_title: "Connection Failed",
            tunnel_open_failed: "The Envoy must be connected to the Internet to open a connection to Enphase. If the Envoy has an Internet connection and this problem continues, contact customer support.",
        },
        ethernet: {
            buttons: { dhcp: "Use DHCP", new_ip: "Get New IP Address", static: "Use Static IP" },
            confirm_change: { description: "This may interrupt communications with the Envoy and require you to re-connect.", title: "Change Ethernet Configuration?" },
            confirm_static: {
                description: "This will assign the current DHCP IP address and other configurations as static values. If you choose to proceed, you can update these values on the next screen.",
                title: "Change Ethernet Configuration?",
            },
            gateway_ip: "Gateway IP",
            ip_address: "IP Address",
            ip_setting: "IP Setting",
            netmask: "Netmask",
            new_ip_modal: { description: "This may interrupt communications with the Envoy and require you to re-connect.", title: "Get New IP Address?" },
            no_config: "No ethernet connection detected.",
            page_title: "Ethernet Configuration",
            primary_dns: "Primary DNS Server",
            secondary_dns: "Secondary DNS Server",
            type: { dhcp: "DHCP", static: "Static IP" },
        },
        forms: { search: "Search", search_prompt: "Serial Number", select_prompt: "Select One" },
        global_nav: {
            acb: "AC Battery",
            comms: "Comms",
            detected: "Detected",
            encharge: "Encharge",
            encharge_batteries: "Encharge",
            enpower: "Enpower",
            meters: "Meters",
            meters_small: "Meters",
            microinverters: "Microinverters",
            microinverters_short: "Micros",
            more: "More",
            network: "Network",
            nsr: "Q Relays",
            overview: "Overview",
            power: "Power",
            profiles: "Profiles",
        },
        initial_setup: {
            continue: "Continue",
            device_prompt: "Enter the number of devices that you expect to report to this Envoy.",
            eu_profile_prompt: "Select a location-specific grid profile.",
            migration_in_progress_message: "profiles being updated",
            na_profile_prompt: "The system is using the factory-installed grid profile settings. You can select a location-specific grid profile below.",
            system_size: "System Size",
        },
        jquery_validate: {
            messages: {
                addedTierPercent: "Please enter a number\u00a0greater than the percent\u00a0of baseline\u00a0entered for {0}.",
                an_number: "Please enter a valid number.",
                creditcard: "Please enter a valid credit card number.",
                date: "Please enter a valid date.",
                dateISO: "Please enter a valid date (ISO).",
                digits: "Please enter only digits.",
                domain: "Please enter a valid IP v4 address (xxx.xxx.xxx.xxx) or URL (google.com)",
                email: "Please enter a valid email address.",
                equalTo: "Please enter the same value again.",
                ipv4: "Please enter a valid IP v4 address. (xxx.xxx.xxx.xxx)",
                max: "Please enter a value less than or equal to {0}.",
                maxlength: "Please enter no more than {0} characters.",
                min: "Please enter a value greater than or equal to {0}.",
                minlength: "Please enter at least {0} characters.",
                number: "Please enter a valid number.",
                range: "Please enter a value between {0} and {1}.",
                rangelength: "Please enter a value between {0} and {1} characters long.",
                remote: "Please fix this field.",
                required: "This field is required.",
                url: "Please enter a valid URL.",
                wep_key: "Please enter a valid WEP Key (10, 26, or 58 characters, which may include 0-9 or A-F).",
            },
        },
        loading: "Please wait, loading",
        meters: {
            active_energy: "Active Energy",
            active_energy_lt: "Active Energy",
            active_power: "Active Power",
            apparent_energy: "Apparent Energy",
            apparent_power: "Apparent Power",
            consumption: "Consumption Meter",
            consumption_meter: {
                enable_meter: "Enable Consumption Meter",
                measurement_type: "Metered Circuit",
                meter_type_desc: "Does the circuit passing through the consumption CTs include load with solar production or load only?",
                meter_type_desc_singular: "Does the circuit passing through the consumption CT include load with solar production or load only?",
                meter_type_warning: "Be sure that the selections above are correct.",
            },
            current: "Current",
            current_ct: {
                current_ct_settings: "CT Current Settings",
                custom_cts_installed: "Custom %{meter_type} CTs Installed",
                primary: "Primary",
                remove_desc: "Tap OK to confirm that you are using standard Enphase %{meter_type} CTs.",
                remove_settings: "Remove Custom CT Settings?",
                secondary: "Secondary",
                turns: "Turns",
            },
            descriptors: { lifetime: "Lifetime", lifetime_lag: "Lagging (Lifetime)", lifetime_lead: "Leading (Lifetime)", today: "Today", today_lag: "Lagging (Today)", today_lead: "Leading (Today)" },
            enable_consumption_meter: "Enable Consumption Meter",
            enable_consumption_modal: {
                description: "Once you enable this meter, it cannot be disabled and the type cannot be changed.",
                description_mode_three: "Once you enable this meter, you cannot disable it, change the type, or decrease the number of phases.",
                description_mode_three_post_enable: "Once you do this, you will not be able to decrease the number of phases.",
                note_three: "<strong>Note: the number of phases will also be increased on the production meter.</strong>",
                note_three_post_enable: "<strong>Note: the number of phases will also be increased on the production meter.</strong>",
                title: 'Enable Meter with "%{type}" Metering?',
                title_mode_three: "Enable Meter with Metered Circuit: %{type} and Phases Metered: %{phCount}?",
                title_mode_three_post_enable: "Update Phases Metered to %{phCount}?",
            },
            enable_meter: "Enable Consumption Meter",
            enable_modal: { description: "Once you enable this meter, it cannot be disabled and the type cannot be changed.", title: "Enable Meter with %{type} Metering?" },
            enable_production_meter: "Enable Production Meter",
            enable_production_modal: {
                description: "Once you enable this meter, it cannot be disabled.",
                description_mode_three: "Once you enable this meter, you cannot disable it or decrease the number of phases.",
                description_mode_three_post_enable: "Once you do this, you will not be able to decrease the number of phases.",
                note_three: "<strong>Note: the number of phases will also be increased on the consumption meter.</strong>",
                note_three_post_enable: "<strong>Note: the number of phases will also be increased on the consumption meter.</strong>",
                title: "Enable Meter?",
                title_mode_three: "Enable Meter with Phases Metered: %{phCount}?",
                title_mode_three_post_enable: "Update Phases Metered to %{phCount}?",
            },
            enable_production_prompt: "The production meter must be enabled before these readings can be displayed.",
            freq_analysis: { btn_change_data_type: "Toggle Data", plc_activity: "Activity", plc_power_spectrum: "Power Spectrum", power_line_analy: "Power Line Communication Analysis" },
            id: "EID",
            internal_meters: "Internal Meters",
            latest_reading: "Latest Reading",
            lifetime_energy: "Lifetime",
            load_contains_storage_message: "Load readings include storage activity.",
            measurement_type: "Type",
            meter_change_warning: "You cannot change them once the meter is enabled.",
            meter_mode: { single: "Single-Phase (L-N)", split: "Single-Phase (L-L)", three: "Multi-Phase" },
            meter_readings: "Readings",
            meter_state: { disabled: "Disabled", enabled: "Enabled" },
            meter_status: {
                "check-wiring": "Check Wiring",
                meter_setup: "Set up metering now",
                meters_not_enabled: "Meters Not Enabled",
                normal: "Normal",
                "not-metering": "Meter Not Enabled",
                status_flags: {
                    "negative-production": "Production readings are negative. Check CT orientation and leads, compared with voltage connections.",
                    "negative-total-consumption": "Consumption readings are negative. Check CT orientation and leads, compared with voltage connections.",
                    "power-on-unused-phase": "Power detected on an unused phase. Check CT lead connections, compared with voltage connections.",
                    "production-imbalance": "Production not balanced between phases. Check CT lead connections and voltage connections.",
                },
            },
            meter_type: { "net-consumption": "Net", "total-consumption": "Total" },
            meter_type_desc: "If the consumption CTs are on a circuit that solar production flows through, leave type set to <b>Net</b>. If not, change type to <b>Total</b>.",
            meter_type_verbose: { "net-consumption": "Load with solar production", "total-consumption": "Load only" },
            meter_type_warning: "Be sure to set the meter type correctly. You cannot change them once the meter is enabled.",
            mode: "Mode",
            multi_phase_options: { mphase_0: "Not Selected", mphase_1: "L1(A)", mphase_2: "L1(A) + L2(B)", mphase_3: "L1(A) + L2(B) + L3(C)" },
            multi_phase_warning: {
                consumption: {
                    post_continue: "The meter is not yet enabled. Verify the readings, then tap <strong>Enable Consumption Meter</strong> at the bottom of the screen.",
                    pre_continue: "The meter is not yet enabled. Select the Phases Metered and Metered Circuit, then tap <strong>View Readings</strong>.",
                    pre_continue_one: "The meter is not yet enabled. Select the Metered Circuit, then tap <strong>View Readings</strong>.",
                },
                production: {
                    post_continue: "The meter is not yet enabled. Verify the readings, then tap <strong>Enable Production Meter</strong> at the bottom of the screen.",
                    pre_continue: "The meter is not yet enabled. Select the Phases Metered, then tap <strong>View Readings</strong>.",
                },
            },
            net_consumption_desc: "These readings reflect the difference between the total home load and solar production. They should approximately match the home's utility meter readings.",
            net_consumption_title: "Net Consumption",
            no_consumption: "No consumption meter configured for this Envoy.",
            no_meters: "No meters detected.",
            no_production: "No production meter configured for this Envoy.",
            phase_count: "Phases Metered",
            phase_count_desc: "Select which of the meter phases you have wired.",
            phase_labels: { phase_1: "L1(A)", phase_2: "L2(B)", phase_3: "L3(C)" },
            pmu: {
                add_another: "Add Another",
                add_meter: "Add Power Meter",
                config: {
                    add: "Add Selected Meters",
                    meters_description: "Power meters detected on this network:",
                    network_warning: "Before adding a meter, be sure that the Envoy has an Ethernet connection with a static IP address. This should be configured both on the router and on the Envoy.",
                    no_meters_description:
                        "No power meters detected<div class='alert alert-info'><b>Note:</b> It may take up to an hour for power meters to be detected. To facilitate detection, make sure that the power meter is on the same local subnet as the Envoy.</div>",
                    remove: "Remove Power Meter",
                    title: "Power Meter Configuration",
                },
                labels: { fw_version: "Firmware Version", ip: "IP Address", mac_address: "Mac Address", manufacturer: "Manufacturer", part_number: "Part Number", production: "Production", serial_number: "Serial Number", status: "Status" },
                phase_coupler: "A phase coupler is required for microinverters installed on L2 or L3 to communicate with the Envoy.",
            },
            power_exporting: "(Exporting to Grid)",
            power_factor: "Power Factor",
            power_importing: "(Importing from Grid)",
            production: "Production Meter",
            reactive_energy: "Reactive Energy",
            reactive_power: "Reactive Power",
            single_phase_warning: {
                consumption: {
                    post_continue: "The meter is not yet enabled. Verify the readings, then tap <strong>Enable Consumption Meter</strong> at the bottom of the screen.",
                    pre_continue: "The meter is not yet enabled. Select the Metered Circuit, then tap <strong>View Readings</strong>.",
                },
                production: {
                    post_continue: "The meter is not yet enabled. Verify the readings, then tap <strong>Enable Production Meter</strong> at the bottom of the screen.",
                    pre_continue: "The meter is not yet enabled. Tap <strong>View Readings</strong> to view and verify the readings.",
                },
            },
            status: "Status",
            title: "Meters",
            today_energy: "Today",
            total_consumption_desc: "These readings reflect the total home load.",
            total_consumption_na: "The production meter must be enabled before these readings can be displayed.",
            total_consumption_title: "Total Consumption",
            type: { eim: "Envoy Integrated Meter", pmu: "Power Meter", rgm: "Enphase RGM" },
            unavailable: "n/a",
            update_settings: "Update",
            view_readings: "View Readings",
            wizard: {
                batt_off: { counting: { one: "Make sure the Enphase Battery circuit is switched OFF.", other: "Make sure the Enphase Battery circuits are switched OFF." } },
                battery_reminder: "<b>Remember to switch the Enphase battery circuit on.</b>",
                btn_next: "Next",
                btn_try_again: "Try Again",
                bullet_load_increase: "Did the total home load increase as you expected?",
                bullet_meters_match: "Does the home's utility meter approximately match this reading?",
                bullet_phase_select: "Is solar production flowing to the grid measured by the consumption CT?",
                bullet_pv_on: "Switch ON the PV breakers and wait for the reconnection period to complete. PV should start to produce power in 5 minutes or less, then tap <strong>Next</strong>.",
                bullet_turn_on_load: "Turn on a known load, such as a heat gun, then tap <b>Next</b>.",
                check_meters: "Check<br>Meters",
                check_title: " Check %{meter_type} Meter",
                confirm_ct_routing: "Make sure that all of the home loads are routed through the consumption CTs.",
                consumption_appears_good: "The consumption meter appears to have been configured correctly.",
                consumption_ct_direction: "Check that the arrow on the consumption CTs are pointing in the direction of energy flow toward the load center.",
                consumption_cts_installed: "Did you install consumption CTs?",
                consumption_enable_prompt: "Tap <strong>Enable Consumption Meter</strong> to complete meter setup.",
                consumption_looks_good: "Consumption readings look good!",
                consumption_neg: "Consumption readings are negative. Check the following, then tap <b>Try Again</b>.",
                consumption_not_enabled: "Consumption Meter Not Enabled",
                consumption_phase_sel_net: "Consumption CT includes solar production.",
                consumption_phase_sel_total: "Consumption CT does not include solar production.",
                ct_bw_correct: "Make sure that the blue and white wires are connected to the correct positions in the terminal block.",
                desc: "Use our step-by-step wizard to ensure that the internal meters are wired and configured correctly.",
                desc_consumption: "Use our step-by-step wizard to ensure that the consumption meter is wired and configured correctly.",
                desc_production: "Use our step-by-step wizard to ensure that the production meter is wired and configured correctly.",
                done: "Done",
                enable_button: "Enable %{meterType} Meter",
                enough_sun: "Make sure there is enough sunlight reaching the PV modules to power up the microinverters.",
                exit_check: "Are you sure you want to exit the Meter Check?",
                exit_conf: { desc: "Are you sure you want to leave the production meter setup wizard? You'll need to start over if you want to use the wizard again.", neg_button: "Go Back", title: "Exit Wizard?" },
                exit_wizard: "Exit Wizard",
                get_started: "Get Started",
                load_didnt_increase: "Total home load did not increase as expected. Check the following, then tap <b>Try Again</b>.",
                manual_prompt: "Manual Meter Setup",
                most_common: "(Most common setup)",
                negative: "NO",
                phase_select_prompt: "Select the phases metered based on how the Envoy-S is wired: ",
                positive: "YES",
                power_exporting: "Exporting",
                power_importing: "Importing",
                prod_enable_desc1: "Production readings are close to zero, as expected.",
                prod_enable_desc2: "Tap <strong>Enable Production Meter</strong> to complete meter setup.",
                prod_meter_enabled: "The production meter is enabled.",
                prod_su1_pv_on: {
                    counting: {
                        one: "Make sure the PV circuit is switched ON and are producing power (the reconnection period has completed).",
                        other: "Make sure the PV circuits are switched ON and are producing power (the reconnection period has completed).",
                    },
                },
                prod_su2_pv_off: "Switch OFF the PV breakers, then tap <b>Next</b>.",
                prod_ts_p4: {
                    desc: "Production readings are negative. Check the following, then tap Try Again.",
                    ts1: {
                        counting: {
                            one: "Make sure the PV circuit is switched ON and are producing power (the reconnection period has completed).",
                            other: "Make sure the PV circuits are switched ON and are producing power (the reconnection period has completed).",
                        },
                    },
                    ts2: { counting: { one: "Make sure the Enphase Battery circuit is switched OFF.", other: "Make sure the Enphase Battery circuits are switched OFF." } },
                    ts3: {
                        counting: {
                            one: "Check that the arrow on the production CT is pointing in the direction of energy flow toward the load center.",
                            other: "Check that the arrow on the production CTs are pointing in the direction of energy flow toward the load center.",
                        },
                    },
                    ts5: {
                        counting: {
                            one: "Make sure that the wires running through the production CT only include PV generation (and not any loads).",
                            other: "Make sure that the wires running through the production CTs only include PV generation (and not any loads).",
                        },
                    },
                    ts6: "Ensure that the CTs are clamped on the correct phases with respect to the Envoy power terminal.",
                },
                prod_ts_p5: {
                    desc: "Production readings are higher than they should be. Check the following, then tap <b>Try Again</b>.",
                    ts2: {
                        counting: {
                            one: "Make sure that the wires running through the production CT only include PV generation (and not any loads).",
                            other: "Make sure that the wires running through the production CTs only include PV generation (and not any loads). ",
                        },
                    },
                },
                production_not_enabled: "Production Meter Not Enabled",
                pv_off: { counting: { one: "Make sure the PV circuit is switched OFF.", other: "Make sure the PV circuits are switched OFF." } },
                pv_reminder: "<b>Remember to switch the PV circuit on.</b> It will take approximately 5 minutes for the microinverters to report power production.",
                readings_dont_match1: "We're not sure why the readings don't match the home's utility meter. Tap <b>Try Again</b> to change the configuration setting for the location of the consumption CTs to see if that helps.",
                readings_dont_match2: "If that doesn't help, you can exit the wizard and use the <b>Manual Meter Setup</b> option instead. We suggest you contact Enphase Support for assistance before proceeding.",
                readings_dont_match_post: "Please contact Enphase Support for assistance and inform them that you have performed the meter check but the readings still don't match the utility meter.",
                reset_timer: "Reset Timer",
                setup_title: " Set Up %{meter_type} Meter",
                start_timer: "Start Timer",
                stop_timer: "Stop Timer",
                sw_off_batt: { counting: { one: "Switch OFF the Enphase Battery circuit.", other: "Switch OFF the Enphase Battery circuits." } },
                sw_off_pv: "Switch OFF the PV breakers.",
                total_cons_not_reduced: "Turning on the PV circuit didn't reduce total consumption. Check the following, then tap <b>Try Again</b>.",
                total_load: "Total home load",
                trouble_c6_desc1: "If you've followed all of the on-screen instructions and consumption readings are still negative, ",
                trouble_c8_desc1: "If you've followed all of the on-screen instructions and total consumption is still not reduced by turning on the PV circuit, ",
                trouble_desc2: "We suggest you contact Enphase Support at <a href='tel:%{dial_num}'> %{disp_num}</a> for assistance before proceeding.",
                trouble_install_guide: "Please refer to the <strong>Envoy Metered Installation Guide</strong>",
                trouble_manual_prompt: " or you can exit the wizard and use the <strong>Manual Meter Setup</strong> option instead.",
                trouble_p0_5: {
                    desc: {
                        counting: {
                            one: "You've indicated that only %{selected_phases} is metered, but there is power on %{phaseStr}.",
                            other: "You've indicated that only %{selected_phases} are metered, but there is power on %{phaseStr}.",
                        },
                    },
                    ts1: "Check the wiring. Are the phases wired correctly?",
                    ts_no_resp: "Fix the wiring, then tap <b>Try Again</b>.",
                    ts_yes_resp: "Change the phases metered selection to match the wiring, then tap <b>Try Again</b>.",
                },
                trouble_p0_desc1: "If you've followed all of the on-screen instructions and there is still power on an unused phase, ",
                trouble_p4_desc1: "If you've followed all of the on-screen instructions and production readings are still negative, ",
                trouble_p5_desc1: "If you've followed all of the on-screen instructions and production readings are still higher than expected, ",
                trouble_p7_desc1: "If you've followed all of the on-screen instructions and the home load still does not increase as expected, ",
                trouble_prompt: "Having trouble getting past this step?",
                unable_to_see_meter: "If you are not able to access <strong>POWER</strong> readings on the utility meter or measure with a portable meter, then click <strong>Continue</strong>.",
            },
        },
        microinverters: {
            condition_clear: { description: 'This will send a command to clear the "%{condition_flag}" status on this microinverter.', title: "Clear Condition?" },
            manage_options: {
                active: "Active (%{count})",
                active_count: { counting: { one: "Active (%{count})", other: "Active (%{count})", zero: "Active (%{count})" } },
                delete_btn: "Delete",
                deleted: "Deleted (%{count})",
                deleted_count: { counting: { one: "Deleted (%{count})", other: "Deleted (%{count})", zero: "Deleted (%{count})" } },
                restore_btn: "Restore",
            },
            nav: { all: "All", manage: "Manage", status: "Status" },
            no_inverters: "There are no microinverters.",
            no_inverters_search: 'No microinverters were found matching "%{search_term}".',
            phase_labels: { "ph-a": "L1(A)", "ph-b": "L2(B)", "ph-c": "L3(C)", "ph-unk": "No phase selected", "ph-updating": "Updating...", select_one: "Select One" },
            phase_prompt_label: "Select a phase for AC Battery %{serial_num}",
            scan_close: "Close",
            scan_disabled: "Device scanning is currently unavailable due to a conflicting scan running on another Envoy.",
            scan_inhibited: "To add more microinterters to this Envoy, you must use the Installer Toolkit to provision them or contact Enphase Customer support to re-enable device scanning.",
            scan_inprogress: "Device Scan in Progress",
            scan_settings: {
                advanced_options: "More Options",
                device_total: "Device Target",
                device_total_description: "If you enter a device target, Envoy will stop scanning when its detected microinverters total reaches that number.",
                device_total_error_1: "Device total must be between %{already_detected} (the number of devices already detected) and %{device_total_max}.",
                device_total_error_2: "Device total must be greater than %{already_detected} (the number of devices already detected).",
                hours: "hours",
                less_options: "Less Options",
                minutes: "mins",
                optional: "(optional)",
                priority_duration: "Priority Duration",
                priority_duration_description: "If you enter a priority duration, Envoy will make device scanning its only activity for that period.",
                priority_duration_error: "Priority duration cannot be longer than scan duration.",
                scan_duration: "Scan Duration",
                scan_duration_error: "Scan duration must be between 1 minute and 8 hours.",
                scan_options: { min_120: "2 hours", min_15: "15 minutes", min_240: "4 hours", min_30: "30 minutes", min_480: "8 hours", min_60: "1 hour" },
                time_description: "hh:mm",
            },
            scan_start: "Start Scan",
            scan_stop: "Stop Scan",
            scan_suspended: "Device scanning is currently unavailable due to a microinverter upgrade.",
            status_options: { comm: "Comm (%{count})", comm_nocount: "Comm", power: "Power (%{count})", power_nocount: "Power", profile: "Profile (%{count})", profile_nocount: "Profile" },
        },
        monitoring: {
            connected: "Connected to Enlighten",
            high_bandwidth: "Standard",
            last_report: "Last Report:",
            low_bandwidth: "Low-Bandwidth",
            more_info: "More Info",
            no_report: "Never Reported",
            not_connected: "Not Connected to Enlighten",
            report_setting: "Report Setting",
            report_setting_cellular_desc: "This Envoy has an Enphase cellular modem and reports 15-minute interval data to Enlighten four times per day (low-bandwidth).",
            report_setting_diagnostic: "Diagnostic Mode On: %{minutes} minutes remaining",
            report_setting_enable_diagnostic: "You may enable Diagnostic Mode for two hours. While in Diagnostic Mode, the Envoy will typically report 5-minute interval data to Enlighten every 5 minutes (during daylight hours).",
            report_setting_high_desc:
                "This Envoy is set to standard reporting, which typically reports 5-minute interval data to Enlighten every 5 minutes during daylight hours. You may switch to low-bandwidth, which reports 15-minute interval data to Enlighten four times per day.",
            report_setting_low_desc:
                "This Envoy is set to low-bandwidth reporting, which reports 15-minute interval data to Enlighten four times per day. You may switch to standard reporting, which typically reports 5-minute interval data to Enlighten every 5 minutes during daylight hours.",
            report_setting_modal: {
                diagnostic_desc: "Confirm enabling Diagnostic Mode for two hours.",
                high_desc: "Confirm switch to standard reporting.",
                low_desc: "Confirm switch to low-bandwidth reporting.",
                title: "Report Setting Change",
            },
            report_setting_options: { diagnostic: "Enable Diagnostic Mode", high: "Switch to Standard Reporting", low: "Switch to Low-Bandwidth" },
            title: "Monitoring",
        },
        more: {
            about: {
                cellular_ip: "Cellular IP Address",
                cellular_mac_address: "Cellular Mac Address",
                db_size: "Database Size",
                db_size_stats: "%{db_size} (%{percent}% full)",
                ethernet_ip: "Ethernet IP Address",
                ethernet_mac_address: "Ethernet Mac Address",
                is_nonvoy: "This Envoy is programmed for configuring unmonitored systems.",
                part_number: "Part Number",
                serial_number: "Serial Number",
                sw_build_date: "Software Build Date",
                sw_version: "Software Version",
                timezone: "Current Timezone",
                title: "About This Envoy",
                wifi_ip: "Wi-Fi IP Address",
                wifi_mac_address: "Wi-Fi Mac Address",
            },
            datetime: { date: "Date", time: "Time", timezone: "Time Zone", title: "Date & Time", update_timezone: "Update Time Zone" },
            events: { event_date_line: "%{date} (Event ID %{event_id})", no_events: "There are no events.", title: "Events" },
            support_connection: {
                close: "Close Connection",
                description_close: "The secure connection to Enphase support is open.",
                description_open: "Create a secure connection so Enphase support personnel can troubleshoot this system remotely.",
                open: "Open Connection",
                title: "Connection to Enphase Support",
            },
            system: { title: "System" },
        },
        network: {
            diagnostic_tools: {
                check_connectivity: "Check Network Connectivity",
                check_network_route: "Check Network Route",
                gateway_ip: "Gateway IP",
                ip_address: "IP Address",
                mac_address: "Mac Address",
                netmask: "Netmask",
                network_connectivity: "Network Connectivity Check",
                network_connectivity_desc: "Run a collection of basic network diagnostic checks on the Envoy.",
                network_route: "Network Route Check",
                network_route_desc: "See the Envoy's path to the Internet for all available network interfaces.",
                ping: "Ping",
                ping_desc: "Enter an IP address or URL to test the Envoy's connectivity to your router or other network host.",
                ping_ip: "Ping Address",
                primary_dns: "Primary DNS Server",
                results_title: "Results",
                secondary_dns: "Secondary DNS Server",
                timestamp: "Last Checked",
                title: "Diagnostic Tools",
            },
            network_configuration: { active_network: "Active", title: "Network Configuration", types: { cellular: "Cellular", ethernet: "Ethernet", none: "None", wifi: "Wi-Fi" } },
            network_connectivity_check: {
                connectivity_enlighten: "Connectivity to Enlighten",
                connectivity_enphase: "Connectivity to Enphase",
                enlighten_dns_lookup: "Enlighten DNS Lookup",
                enphase_dns_lookup: "Enphase DNS Lookup",
                gateway_ping: "Gateway Ping",
                google_dns_lookup: "Google DNS Lookup",
                google_ping: "Google Ping",
                primary_dns_ping: "Primary DNS Ping",
                primary_interface: "Network Tested",
                result: { fail: "Failed", pass: "Good" },
                secondary_dns_ping: "Secondary DNS Ping",
                timestamp: "Last Checked",
                title: "Results",
            },
            network_route_check: { destination: "Destination", flags: "Flags", gateway: "Gateway", genmask: "Genmask", metric: "Metric", network: "Network", ref: "Ref", results_title: "Results", timestamp: "Last Checked", use: "Use" },
            title: "Network",
        },
        not_available: "Not Available",
        nsr: {
            line_status_heading: "Lines Connected:",
            line_status_help_text:
                "<ul><li>At least one of the Q-Relay lines is not connected.</li><li>Check that the Q-Relay is installed wired correctly.</li><li>Push the test button to retry.</li><li>If this is intentional then this can be ignored.</li></ul>",
            line_status_help_title: "Q-Relay Line Connection Help",
            lines: "Line %{num}:",
            reason_strings: "unknown reason;Hardware error;Button press;Force command from Envoy;AC line 1 voltage error;AC line 2 voltage error;AC line 3 voltage error;AC line 1 frequency error;Grid DC error;AC line 1 voltage low;AC line 1 voltage high;AC line 1 frequency low;AC line 1 frequency high;AC line 2 voltage low;AC line 2 voltage high;AC line 3 voltage low;AC line 3 voltage high;Grid DC low;Grid DC high;Rocof;AC Average line 1;AC average line 2;AC average line 3".split(
                ";"
            ),
            relay_heading: "Relay:",
        },
        nsrs: {
            manage_options: {
                active: "Active (%{count})",
                active_count: { counting: { one: "Active (%{count})", other: "Active (%{count})", zero: "Active (%{count})" } },
                deleted: "Deleted (%{count})",
                deleted_count: { counting: { one: "Deleted (%{count})", other: "Deleted (%{count})", zero: "Deleted (%{count})" } },
            },
            nav: { all: "All", manage: "Manage", status: "Status" },
            no_inverters: "There are no Q Relays",
            no_inverters_search: 'No Q Relays were found matching "%{search_term}".',
            status_options: { comm_nocount: "Comm", power_nocount: "Operating", profile_nocount: "Config" },
            title: "Relays Q",
        },
        overview: {
            ac_batteries: {
                communicating: "Communicating",
                default_profile_set: "Factory-Installed Grid Profile",
                detected: "Detected",
                factory_installed: "Factory-Installed",
                factory_installed_config: "Factory-Installed Configurations",
                not_set: "Not Set",
                producing_power: "Operating",
                profile_set: "Configured",
                total: "AC Batteries",
            },
            ac_batteries_counts: {
                communicating: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Communicating</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                    },
                },
                detected: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Detected</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                    },
                },
                producing_power: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Operating</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Operating</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Operating</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Operating</span>",
                    },
                },
                profile_set: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Configured</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Configured</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Configured</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Configured</span>",
                    },
                },
                total: {
                    counting: {
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>AC Battery</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>AC Batteries</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>AC Batteries</span>",
                    },
                },
            },
            ac_battery_state: {
                charging: "Charging",
                discharging: "Discharging",
                full: "Full",
                idle: "Idle",
                soc_full: "%{operating_state} (State of Charge %{percent}%)",
                soc_percent: "(State of Charge %{percent}%)",
                soc_state: "%{operating_state}",
            },
            alerts: "Alerts",
            consumption: "Consumption Meter",
            consumption_meter_label: "Consumption",
            current_consumption: "Current Power Consumption",
            current_production: "Current Power Production",
            devices: { detected: "Detected" },
            encharge_batteries: {
                communicating: "Communicating",
                default_profile_set: "Factory-Installed Grid Profile",
                detected: "Detected",
                factory_installed: "Factory-Installed",
                factory_installed_config: "Factory-Installed Configurations",
                not_set: "Not Set",
                producing_power: "Operating",
                profile_set: "Configured",
                total: "AC Batteries",
            },
            enpowers: { communicating: "Communicating", default_profile_set: "Factory-Installed Grid Profile", detected: "Detected", profile_set: "Profile Set", total: "Enpower Devices" },
            enpowers_summary: { connected: { false: "Not Connected to Enpower", true: "Connected to Enpower" }, grid_status: { false: "OFF", title: "Grid Status", true: "ON" }, title: "Enpower" },
            includes_storage_label: "(includes storage activity)",
            inverter_production: "Microinverter Production",
            inverters_update_status: { "in-progress": "Microinverter upgrade in progress. This typically takes 15 to 30 minutes to complete." },
            ip_address: "IP Address",
            latest_power: "Latest Power",
            lifetime: "Lifetime",
            lifetime_energy: "Lifetime Energy",
            meter_production: "Production Meter",
            metering: "Metering",
            microinverter_counts: {
                communicating: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Communicating</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                    },
                },
                detected: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Detected</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                    },
                },
                producing_power: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Producing Power</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Producing Power</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Producing Power</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Producing Power</span>",
                    },
                },
                profile_set: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Profile Set</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Profile Set</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Profile Set</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Profile Set</span>",
                    },
                },
                total: {
                    counting: {
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Microinverter</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Microinverters</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Microinverters</span>",
                    },
                },
            },
            microinverters: { communicating: "Communicating", default_profile_set: "Factory-Installed Grid Profile", detected: "Detected", producing_power: "Producing Power", profile_set: "Profile Set", total: "Microinverters" },
            net_power: "Net Power",
            new_microinverter_counts: {
                communicating: {
                    counting_acb: { one: "Communicating", other: "Communicating", zero: "Communicating" },
                    counting_encharge: { one: "Communicating", other: "Communicating", zero: "Communicating" },
                    counting_microinverters: { one: "Communicating", other: "Communicating", zero: "Communicating" },
                    counting_nsr: { one: "Communicating", other: "Communicating", zero: "Communicating" },
                },
                detected: {
                    counting_acb: { one: "Detected", other: "Detected", zero: "Detected" },
                    counting_encharge: { one: "Detected", other: "Detected", zero: "Detected" },
                    counting_microinverters: { one: "Detected", other: "Detected", zero: "Detected" },
                    counting_nsr: { one: "Detected", other: "Detected", zero: "Detected" },
                },
                producing_power: {
                    counting_acb: { one: "Operating", other: "Operating", zero: "Operating" },
                    counting_encharge: { one: "Operating", other: "Operating", zero: "Operating" },
                    counting_microinverters: { one: "Producing Power", other: "Producing Power", zero: "Producing Power" },
                    counting_nsr: { one: "Operating", other: "Operating", zero: "Operating" },
                },
                profile_set: {
                    counting_acb: { one: "Configured", other: "Configured", zero: "Configured" },
                    counting_encharge: { one: "Configured", other: "Configured", zero: "Configured" },
                    counting_microinverters: { one: "Profile Set", other: "Profile Set", zero: "Profile Set" },
                    counting_nsr: { one: "Configured", other: "Configured", zero: "Configured" },
                },
                total: {
                    counting_acb: { one: "AC Battery", other: "AC Batteries", zero: "AC Batteries" },
                    counting_encharge: { one: "Encharge Battery", other: "Encharge Batteries", zero: "Encharge Batteries" },
                    counting_microinverters: { one: "Microinverter", other: "Microinverters", zero: "Microinverters" },
                    counting_nsr: { one: "Q Relay", other: "Q Relays", zero: "Q Relays" },
                },
            },
            nsr: {
                detected_total_count: "%{detected_count} of %{total_count}",
                profile_label: "Profile",
                profile_not_set: "Not Configured",
                profile_set: "Configured",
                relay_state_closed: "Closed",
                relay_state_label: "State",
                relay_state_open: "Open",
                section_title: "Q Relay",
            },
            power_exporting: "Exporting to Grid",
            power_importing: "Importing from Grid",
            production: "Production",
            production_meter_label: "Production",
            profile: "Profile",
            scan_modal: {
                description: "No microinverters have been detected. Do you want to start a device scan?",
                description_battery: "No batteries have been detected. Do you want to start a device scan?",
                description_both: "No microinverters or batteries have been detected. Do you want to start a device scan?",
                description_nsr: "No Q-Relays have been detected. Do you want to start a device scan?",
                scan_timeout_description:
                    "<p>Only %{detected_count} of %{target_count} microinverters have been detected. Do you want to restart the device scan to discover the remaining microinverter(s) or <a href='#' class='open-target-count'>change the number of microinverters expected</a>?</p>",
                scan_timeout_description_battery: "<p>Only %{detected_count} of %{target_count} batteries have been detected.",
                scan_timeout_description_battery_second: {
                    one: "Do you want to restart the device scan to discover the remaining battery or <a href='#' class='open-target-count'>change the number of batteries expected</a>?</p>",
                    other: "Do you want to restart the device scan to discover the remaining batteries or <a href='#' class='open-target-count'>change the number of batteries expected</a>?</p>",
                },
                scan_timeout_description_both:
                    "<p>Only %{detected_count_micro} of %{target_count_micro} microinverters and %{detected_count_battery} of %{target_count_battery} batteries have been detected. Do you want to restart the device scan to discover the remaining devices or <a href='#' class='open-target-count'>change the number of devices expected</a>?</p>",
                scan_timeout_description_micro: "<p>Only %{detected_count} of %{target_count} microinverters have been detected.",
                scan_timeout_description_micro_second: {
                    one: "Do you want to restart the device scan to discover the remaining microinverter or <a href='#' class='open-target-count'>change the number of microinverters expected</a>?</p>",
                    other: "Do you want to restart the device scan to discover the remaining microinverters or <a href='#' class='open-target-count'>change the number of microinverters expected</a>?</p>",
                },
                scan_timeout_title: "Restart Device Scan?",
                title: "Start Device Scan?",
            },
            scan_state: { active: "Scan Active", inactive: "Scan Inactive", scan_inhibited: "Scan Inhibited" },
            set_expected: { error: "Value must be a number between 1 and 600.", label: "Enter the number of microinverters that you expect to report to this Envoy.", prompt: "# Microinverters" },
            set_expected_acb: { error: "Value must be a number between 0 and 39.", label: "Enter the number of AC Batteries that you expect to report to this Envoy.", prompt: "# AC Batteries" },
            set_expected_nsr: { error: "Value must be a number between 0 and 3.", label: "Enter the number of Q Relays that you expect to report to this Envoy.", prompt: "# Q Relays" },
            software_version: "Software Version",
            stat_title: "Power & Energy",
            storage: "Storage",
            tariff_rate_structure: "Tariff/Rate Structure",
        },
        pending: "(pending...)",
        power: {
            charging: "Charging",
            description: "Microinverters will produce power as long as there is sufficient sunlight and the utility grid is within allowable voltage and frequency ranges (as specified by local regulation).",
            discharging: "Discharging",
            idle: "Idle",
            last_report: "Last Report:",
            not_operating: "Not Operating",
            not_producing: "Not Producing",
            operating: "Operating",
            producing: "Producing Power",
            title: "Microinverters Producing Power",
        },
        profiles: {
            ac_batteries: {
                configuration_label: "Configuration",
                false: "No",
                no_profile_description: "You must provide the following information to configure the batteries before they will begin to operate.",
                no_profile_warning: "The grid profile you select here will also be applied to the Enpower, Microinverters, and Encharges installed with this system.",
                profile_complete: "Configuration Complete",
                profile_incomplete: "Configuration Incomplete",
                profile_propagating: "Configuring Batteries",
                true: "Yes",
            },
            apply: "Apply Grid Profile",
            config_batteries: "Configure Batteries",
            country_label: "Country Regulatory Specification",
            encharge_batteries: {
                configuration_label: "Configuration",
                no_profile_description: "You must provide the following information to configure the batteries before they will begin to operate.",
                no_profile_warning: "The grid profile you select here will also be applied to the Enpower, Microinverters, and AC Batteries installed with this system.",
                profile_complete: "Configuration Complete",
                profile_incomplete: "Configuration Incomplete",
                profile_propagating: "Configuring Batteries",
            },
            enpowers: {
                no_profile_description: "You must provide the following information to configure the enpower before it will begin to operate.",
                no_profile_warning: "The grid profile you select here will also be applied to the Microinverters, AC Batteries and Encharges installed with this system.",
                profile_complete: "Configuration Complete",
                profile_incomplete: "Configuration Incomplete",
                profile_propagating: "Configuring Enpower",
            },
            eu_no_profile_description: "You must select a location-specific grid profile before the microinverters will begin producing power.",
            eu_no_profile_label: "No Profile",
            eu_no_profile_vogel_description: "You must select a location-specific grid profile.",
            microinverters: {
                configuration_label: "Configuration",
                no_profile_warning: "The grid profile you select here will also be applied to the Enpower, AC Batteries and Encharges installed with this system.",
                profile_complete: "Propagation Complete",
                profile_incomplete: "Propagation Incomplete",
                profile_propagating: "Propagating Profile",
            },
            na_no_profile_description: "The microinverters are using the factory-installed grid profile settings. You can select a location-specific grid profile below.",
            na_no_profile_label: "Factory Installed Settings",
            no_profile_warning: "The grid profile you select here will also be applied to the Enpower, Microinverters, AC Batteries and Encharges installed with this system.",
            no_profiles: "There are no profiles available. You must either connect this Envoy to the Internet and select via Enlighten, or use Installer Toolkit to download a profile package and upload to this Envoy.",
            no_profiles_info:
                "If this system requires a location-specific grid profile, you must either connect this Envoy to the Internet and select via Enlighten, or use Installer Toolkit to download a profile package and upload to this Envoy.",
            nsrs: {
                configuration_label: "Configuration",
                no_profile_warning: "The grid profile you select here will also be applied to the Enpower, Microinverters, AC Batteries and Encharges installed with this system.",
                profile_complete: "Propagation Complete",
                profile_incomplete: "Propagation Incomplete",
                profile_propagating: "Propagating Profile",
            },
            profile_complete: "Propagation Complete",
            profile_incomplete: "Propagation Incomplete",
            profile_label: "Grid Profile",
            profile_propagating: "Propagating Profile",
            title: "Grid Profile",
            tpm_state: { 0: "Pending", 1: "Propagating", 2: "Profile Set", 3: "Unsettable", 4: "Failed", 5: "Upgrading", 6: "ALT-V/F" },
        },
        public_nav: {
            change_password: "Change Password",
            copyright_html: "&copy;2008-%{current_year} Enphase Energy Inc. All rights reserved.",
            enphase: "Enphase Energy",
            installer_login: "Installer Login",
            language: "Language",
            privacy: "Privacy",
            settings: "Settings",
            terms: "Terms",
        },
        select2: {
            format_matches: { counting: { one: "One result is available, press enter to select it.", other: "%{count} results are available, use up and down arrow keys to navigate." } },
            input_too_long: { counting: { one: "Please delete %{count} character", other: "Please delete %{count} characters" } },
            input_too_short: "Please enter %{count} or more characters",
            loading_more: "Loading more results...",
            no_matches: "No matches found for %{term}",
            no_results: "No matches found",
            searching: "Searching...",
            selection_too_big: { counting: { one: "You can only select %{count} item.", other: "You can only select %{count} items." } },
        },
        serial_number: "Serial Number",
        system: {
            power_control: {
                disabled_desc: "Power Production Disabled",
                enabled_desc: "Power Production Enabled",
                modal: {
                    desc_set_off: "This will <strong>disable</strong> system power production.",
                    desc_set_on: "This will <strong>enable</strong> system power production.",
                    title: "System Power Control",
                    verify: "Are you sure this is what you want?",
                },
            },
        },
        tariff: {
            add_peak: "Add Peak %{num}",
            add_tier: "Add Tier %{num}",
            base_rate_label: "Base Rate",
            baseline: "Baseline",
            charge_at_night: "Charge batteries from the grid at night",
            chg_at_night_desc: "Enable this option to set the batteries to charge from the grid during nighttime.",
            config_details: "Configuration Details",
            day_names: ["Weekday", "Weekend"],
            greater_than: "Greater than",
            hour_connector: "to",
            month_connector: "through",
            not_set: "Not Set",
            off_peak_label: "Off-Peak",
            peak_hours_label: "Peak %{num} Hours",
            peak_label: "Peak %{num}",
            peak_rate_label: "Peak %{num} Rate",
            peak_start_time: "Peak Start Time:",
            per_day: "per day",
            per_month: "per month",
            percent_of_baseline: "% of Baseline",
            remove: "Remove",
            seasonal_rate_desc: "Enable this option if rate differs between seasons.",
            seasonal_select_label: "Rate differs between seasons",
            select_type: "Select Type",
            single_rate: "Single Rate",
            summer_rate_label: "Summer",
            tariff_rate_title: "Tariff/Rate Structure",
            tariff_type_warning: "For a Time of Use tariff/rate structure you must provide at least one peak rate. If there is no peak rate, select Single Rate instead of Time of Use.",
            tier: "Tier %{num}",
            tiered: "Tiered",
            time_of_use: "Time of Use",
            unit_label: "kWh",
            up_to: "Up to",
            weekday_add_peak: "Add Weekday Peak %{num}",
            weekday_base_rate_label: "Weekday Base Rate",
            weekday_off_peak_rate_label: "Weekday Off-Peak Rate",
            weekday_peak_hours_label: "Weekday Peak %{num} Hours",
            weekday_peak_rate_label: "Weekday Peak %{num} Rate",
            weekdays_label: "Weekday",
            weekdays_rate_label: "Weekday",
            weekend_add_peak: "Add Weekend Peak %{num}",
            weekend_base_rate_label: "Weekend Base Rate",
            weekend_label: "Weekend",
            weekend_off_peak_rate_label: "Weekend Off-Peak Rate",
            weekend_peak_hours_label: "Weekend Peak %{num} Hours",
            weekend_peak_rate_label: "Weekend Peak %{num} Rate",
            weekend_rate_desc: "Enable this option if rate differs between weekdays and weekends.",
            weekend_select_label: "Rate differs between weekday and weekend",
            winter_months_desc: "To set Winter, select Summer months above.",
            winter_rate_label: "Winter",
            zero_not_allowed: "Zero is not a valid value",
        },
        wifi: {
            ap_mode_config: {
                confirm_switch_modal: { description: "This may interrupt communications with the Envoy and require you to re-connect.", title_false: "Disable AP Mode?", title_true: "Enable AP Mode?" },
                description_disabled: "Enable AP mode to allow this Envoy to operate as a wireless Access Point (AP). This will allow wireless devices in the vicinity to connect to the Envoy.",
                description_enabled: "This Envoy is currently operating as a wireless Access Point (AP).",
                disable: "Disable AP Mode",
                enable: "Enable AP Mode",
                time_remaining: { one: "Time Remaining: %{count} hour %{minutes} mins", other: "Time Remaining: %{count} hours %{minutes} mins", zero: "Time Remaining: %{count} hours %{minutes} mins" },
                title_disabled: "AP Mode Disabled",
                title_enabled: "AP Mode Enabled",
            },
            available_networks: "Available Networks",
            connect: {
                confirm_connect: "Confirm Network",
                connect_to_site: "Connect to %{site_name}?",
                connect_warning: "Note: This may interrupt communications with the Envoy and require you to re-connect.",
                connection_failure_explanation: "Unable to connect to network %{site_name}.",
                wait_join: "Please wait while the Envoy connects to %{site_name}...",
            },
            connect_incomplete: { description: "It's taking longer than expected to confirm a connection to %{site_name}. If the network connection was not successful, please try again.", title: "Sorry..." },
            connect_success: {
                description:
                    "<p>The Envoy has successfully connected to %{site_name}.</p><p><a href='#' class='open-overview'>Return to Overview.</a></p><p>Note: It may take up to a minute before the Enlighten connection status is updated.</p>",
                title: "Successfully Connected",
            },
            connection_lost: "This device has lost its connection to the Envoy.",
            connection_status: { attempting_to_connect: "Attempting to connect...", connecting: "Connecting...", connection_lost: "Connection Lost", failed: "Connection Failed", not_connected: "Not connected" },
            country_config: {
                description: "Select your country (ISO 3166-1 alpha-2 code) to optimize Wi-Fi signal strength in accordance with your national regulatory agency.",
                optional: "(optional)",
                select_prompt: "Select Country",
                title: "Country",
                update: "Update Country",
            },
            current_connection: "Connected to <span class='network_name'>%{network_name}</span>",
            enter_password: "Enter the password for %{site_name}.",
            forget: {
                forget_network_header: 'Forget Wi-Fi Network "%{network_name}"?',
                forget_warning: "Note: This may interrupt communications with the Envoy and require you to re-connect.",
                ok_to_forget: "This Envoy will no longer use this network to connect to Enlighten.",
                wait_forget: "Please wait while the Envoy forgets the network...",
            },
            forget_failed: { description: "Attempt to forget the Wi-Fi Network failed. If this continues, contact customer support.", title: "Sorry..." },
            forget_incomplete: {
                description:
                    "It's taking longer than expected to confirm forget Wi-Fi Network. Due to this, it is unlikely that your Envoy can still communicate with this application. Please check the network settings on your device and then reconnect to the Envoy.",
                title: "Sorry...",
            },
            gateway_ip: "Gateway IP: ",
            ip_address: "IP Address: ",
            join_another_network: { button: "Select Another Network", title: "Select Another Network" },
            join_network: { button: "View Networks", title: "Select Network" },
            network_changed_explanation:
                "The network connection on your device has changed. Due to this it is unlikely that your Envoy can still communicate with this application. Please check the network settings on your device and then reconnect to the Envoy.",
            network_changed_title: "Network Connection Changed",
            no_networks_found: "No networks found",
            not_configured_prompt: "Select a wireless network for this Envoy to use to connect to Enlighten.",
            other_network: {
                confirm_switch_modal: { description: "This may interrupt communications with the Envoy and require you to re-connect.", title: "Connect to Other Network?" },
                connect: "Connect",
                description: "Connect to an access point which is not configured to broadcast its ESSID.",
                name: "Name (ESSID)",
                password: "Password",
                security: "Security",
                security_mode: { None: "None", WEP: "WEP", "WPA-PSK": "WPA Personal", "WPA2-PSK": "WPA2 Personal" },
                title: "Connect Other Network",
                wpa_algorithm: "WPA Algorithm",
                wpa_algorithm_type: { CCMP: "CCMP", None: "None", TKIP: "TKIP", "TKIP+CCMP": "TKIP + CCMP" },
            },
            page_title: "Wi-Fi Configuration",
            password_required: "Password Required",
            please_wait: "Please Wait",
            title: "Wi-Fi Network",
            unsupported_site: "Unsupported Network",
            unsupported_site_explanation: "This network uses a security method that is not supported by the Envoy.",
            wifi: "Wi-Fi",
            wifi_hardware_missing: "Wi-Fi hardware not found",
            wifi_waiting_note: "This process may take up to 3 minutes, and you may need to reconnect to the Envoy once it completes.",
        },
        wireless_connection: { connected: "Connected", last_report: "Last Report:", not_connected: "Not Connected", signal_strength: "Signal Strength:", subghz: "Sub GHz", title: "Wireless Connection Links", zigbee_2_4: "2.4 GHz" },
    },
    lwui: {
        admin: {
            cross_domain_traffic: { status_msgs: { cross_domain_traffic: "Cross domain traffic reported", no_cross_domain_traffic: "No cross domain traffic reported", updated: "Updated" } },
            network_connectivity: {
                error_msgs: {
                    bad_device_ip: "Bad device IP address and/or network mask.",
                    bad_gateway_address: "Bad gateway IP address.",
                    gateway_subnet: "Gateway IP address not within subnet %{subnet}",
                    invalid_primary_dns: "Primary DNS address is not a valid IP address.",
                    invalid_secondary_dns: "Secondary DNS address is not a valid IP address.",
                },
            },
            security_admin: {
                status_msg: {
                    new_confirm_password_mismatch: "New and confirm password do not match",
                    old_password_mismatch: "Old password not correct",
                    password_file_missing: "Administrator password file(s) missing",
                    password_update_failure: "Password update failed",
                    password_update_failure_error: "Error: Password change failed",
                    password_update_successful: "Password update successful",
                },
            },
            wireless_connectivity: {
                advanced_settings: {
                    button_apply: "Apply",
                    regulatory_domain: "Country Code (ISO 3166-1 Alpha-2)",
                    regulatory_legend: "Select your country from this list.  This defines the permissible radio frequencies and transmission strength in accordance with your national regulatory agency.",
                },
                ap_mode: { active: "active", inactive: "inactive", name: "AP name:", start: "Start AP Mode", status: "AP Mode status:", stop: "Stop AP Mode", timeout: "minutes to AP timeout:" },
                busy_joining: "Attempting to Connect to the Network",
                busy_scanning: "Scanning for Wi-Fi Networks",
                busy_testing: "Testing Connection",
                connection_test: { failed: "Connection test failed.  Please check your settings.", successful: "Connection test was successful.  You may join the network." },
                current_settings: {
                    dhcp_waiting: "Requesting DHCP address from Wi-Fi Network",
                    forget_network: "Forget this Network",
                    label_gateway_ip: "Gateway IP",
                    link_status: "Status",
                    no_config: "No Wi-Fi connection is configured",
                    no_device: "No compatible Wi-Fi device detected",
                    status_connected: "Connected",
                    status_connecting: "Establishing connection",
                    status_stopped: "Wi-Fi stopped",
                    unavailable: "unavailable",
                    verified_config: "Verified Wi-Fi Network",
                },
                device_information: {
                    device: "Device",
                    driver_name: "Driver Name",
                    hw_version: "Hardware Version",
                    mac_address: "MAC Address",
                    manufacturer: "Manufacturer",
                    model: "Model",
                    usb_slot_num: "USB Slot #",
                    usb_spec_version: "USB Specification Version",
                    vendor: "Vendor",
                },
                forget_msg: "This action will delete the current wireless configuration and drop the connection.  If you are connected wirelessly, your connection to the Envoy will be lost.",
                legend_advanced_settings: "Advanced Settings",
                legend_ap_mode: "Envoy AP Mode",
                legend_current_settings: "Current Wi-Fi Settings",
                legend_device_information: "Device Information",
                legend_manual_configuration: "Manual Configuration",
                legend_site_survey: "Available Wi-Fi Networks",
                manual_configuration: {
                    algorithm: "WPA Algorithm",
                    button_clear: "Clear Form",
                    button_connect: "Join Network",
                    button_test: "Test Connection",
                    channel: "Wireless Channel",
                    essid_length: "The ESSID must be 1 to 32 characters long",
                    info_msg: "The following settings are necessary only for connecting with an access point which is not configured to broadcast its ESSID.",
                    mhz: "MHz",
                    network_name: "Wireless Network Name (ESSID)",
                    password: "Password/PSK",
                    password_unneeded: "A password is unnecessary for an open system",
                    password_wep: "WEP keys must be either 10, 26, or 58 hexadecimal digits",
                    password_wep_chars: "WEP keys must be comprised of only numbers and the letters A-F",
                    password_wpa: "WPA/WPA2-PSK passwords must be at least 8 and no greater than 63 characters",
                    security_mode: "Wireless Security Mode",
                },
                site_survey: { button_rescan: "Re-Scan", info_msg: "Select a network from the list.", none_found: "No networks found" },
                test_msg: "The Wi-Fi connection will now be tested to confirm that the settings are valid.  The current connection to the Envoy will be lost temporarily during the connection test.",
            },
        },
        home: {
            event_tbl_col_hdr: { date: "Date", details: "Details", device: "Device", event: "Event", eventId: "Event Id" },
            warnings: {
                acb_critical_temp: "An elevated internal temperature is detected in one or more of the AC Batteries. Check the Installation and Operation Manual for instructions.",
                acb_needs_meters: "An Envoy-S with metering is required to complete system commissioning. AC Batteries requiring metering have been detected, and this Envoy-S does not have metering.",
                acdisco_active: "AC disconnect active. Envoy cannot communicate with microinverters.",
                acdisco_fail: "AC disconnect failure. Check AC disconnect relay.",
                both_meter_enabled: "Both the production and consumption meters must be enabled to complete system commissioning.",
                check_date_warn_msg:
                    "The system time is invalid.  Until this is corrected the Envoy will not be able to communicate with microinverters.  If the Envoy is not configured to use NTP, or is not able to contact the configured NTP servers, this will need to be corrected manually via the <a href='/admin/lib/date_time_display'> Date and Time Administration controls.</a>",
                cross_domain_traffic: "Communications from other Envoy(s) have been detected.",
                date_invalid: "The system time is invalid. Connect the Envoy to the Internet so that its time can be set correctly.",
                db_warn_msg: "The Envoy has not been able to send data to Enlighten, and local storage is nearly full. Connect the Envoy to the Internet to avoid data loss.",
                eim_consumption_check_wiring: "The power consumption meter is not properly connected. Please check the wiring.",
                eim_production_check_wiring: "The power production meter is not properly connected. Please check the wiring.",
                envoy_needs_meters: "An Envoy-S with metering is required to complete system commissioning. A grid profile requiring metering has been selected, and this Envoy-S does not have metering.",
                legend: "Warning",
                no_enlighten_report: "The system has never reported to Enlighten. Connect the Envoy to the Internet to establish a connection with Enlighten.",
                no_phase_assignment: "AC Batteries must be assigned to phases to complete system commissioning.",
                pcu_limit_warn_msg: "The number of microinverters detected exceeds the Envoy\u2019s Monitoring Configuration. Contact Enphase Energy Customer Support.",
                pcu_limit_warn_msg2: "The number of microinverters detected exceeds the Envoy's default Monitoring Configuration.  The Envoy requires an Internet connection to set the Monitoring Configuration.",
                pel_profile_requires_meters: "The production and consumption meters must be configured to support power export limiting.",
                phase_assoc_failed: "Phase detection failed. Check the Installation and Operation Manual for instructions.",
                pim_profile_requires_meters: "Multi-phase production and consumption metering must be enabled to support phase imbalance management and loss of phase detection.",
            },
        },
    },
    number: {
        currency: { format: { delimiter: ",", format: "%u %n", precision: 2, separator: ".", significant: !1, strip_insignificant_zeros: !1, unit: "$" } },
        format: { delimiter: ",", precision: 3, separator: ".", significant: !1, strip_insignificant_zeros: !1 },
        human: {
            decimal_units: { format: "%n %u", units: { billion: "Billion", million: "Million", quadrillion: "Quadrillion", thousand: "Thousand", trillion: "Trillion", unit: "" } },
            format: { delimiter: "", precision: 3, significant: !0, strip_insignificant_zeros: !0 },
            storage_units: { format: "%n %u", units: { byte: { one: "Byte", other: "Bytes" }, gb: "GB", kb: "KB", mb: "MB", tb: "TB" } },
        },
        percentage: { format: { delimiter: "" } },
        precision: { format: { delimiter: "" } },
    },
    scripts: { data: { verify_internet_connection_message: "Your system has never reported to Enlighten. Verify the Internet connection." } },
    time: {
        am: "AM",
        formats: {
            default: "%d/%m/%Y %I\u00a0:%M %p",
            default_date_time_no_pad: "%d/%m/%Y %-I:%M %p",
            hour_meridian: "%-H:00",
            long: "%B %d, %Y %H:%M",
            noday_nozone_datetime_secs_ui: "%d %b, %Y %-I:%M:%S %p",
            noday_nozone_datetime_ui: "%d %b, %Y %-I:%M %p",
            nozone_datetime: "%a %d %b %Y %I:%M %p",
            short: "%d %b %H:%M",
            short_date: "%d/%m/%Y",
            time_only: "%H:%M",
        },
        pm: "PM",
    },
    units: {
        amps: "A",
        bool: "Boolean",
        degrees: "degrees",
        hertz: "Hz",
        hertz_per_sec: "Hz / s",
        lagging: "Lagging",
        milliseconds: "ms",
        millivolts: "mV",
        none: "",
        percent: "%",
        percent_per_hertz: "% / Hz",
        percent_per_min: "% / min",
        seconds: "s",
        volts: "V",
    },
};
I18n.translations.fr = {
    date: {
        abbr_day_names: "dim lun mar mer jeu ven sam".split(" "),
        abbr_month_names: [null, "jan", "f\u00e9v", "mar", "avr", "mai", "jun", "jul", "ao\u00fb", "sep", "oct", "nov", "d\u00e9c"],
        day_names: "dimanche lundi mardi mercredi jeudi vendredi samedi".split(" "),
        formats: { default: "%Y-%m-%d", long: "%B %e, %Y", only_day: "%e", short: "%e %b" },
        month_names: [null, "janvier", "f\u00e9vrier", "mars", "avril", "mai", "juin", "juillet", "ao\u00fbt", "septembre", "octobre", "novembre", "d\u00e9cembre"],
        order: ["ann\u00e9e", "mois", "jour"],
    },
    envoy: {
        cond_flags: {
            acb_ctrl: {
                bmudatabounds: "Erreur de limites des donn\u00e9es du dispositif de contr\u00f4le des batteries",
                bmuhardwareerror: "Erreur mat\u00e9rielle du dispositif de contr\u00f4le des batteries",
                bmuimageerror: "Erreur d\u2019image du dispositif de contr\u00f4le des batteries",
                bmumaxcurrentwarning: "Avertissement en cours pour le max. du dispositif de contr\u00f4le des batteries",
                bmusenseerror: "Erreur de d\u00e9tection du dispositif de contr\u00f4le des batteries",
                cellmaxtemperror: "Erreur de temp\u00e9rature maximale de la cellule",
                cellmaxtempwarning: "Avertissement de temp\u00e9rature maximale de la cellule",
                cellmaxvoltageerror: "Erreur de tension maximale de la cellule",
                cellmaxvoltagewarning: "Avertissement de tension maximale de la cellule",
                cellmintemperror: "Erreur de temp\u00e9rature minimale de la cellule",
                cellmintempwarning: "Avertissement de temp\u00e9rature minimale de la cellule",
                cellminvoltageerror: "Erreur de tension minimale de la cellule",
                cellminvoltagewarning: "Avertissement de tension minimale de la cellule",
                cibcanerror: "Erreur du bus CAN CIB",
                cibimageerror: "Erreur d\u2019image de l\u2019interface de fournisseur de service",
                cibspierror: "Erreur de l\u2019interface de fournisseur de service CIB",
            },
            nsrb_ctrl: {
                acfreqhigh: "Fr\u00e9quence AC \u00e9lev\u00e9e",
                acfreqlow: "Fr\u00e9quence AC basse",
                acfrequencyoor: "Fr\u00e9quence AC hors plage",
                acvoltageavgline1: "Moyenne de tension AC hors plage \u2013 Phase\u00a01",
                acvoltageavgline2: "Moyenne de tension AC hors plage \u2013 Phase\u00a02",
                acvoltageavgline3: "Moyenne de tension AC hors plage \u2013 Phase\u00a03",
                acvoltagehighline1: "Tension AC \u00e9lev\u00e9e \u2013 Phase\u00a01",
                acvoltagehighline2: "Tension AC hors plage \u2013 Phase\u00a02",
                acvoltagehighline3: "Tension AC \u00e9lev\u00e9e \u2013 Phase\u00a03",
                acvoltagelowline1: "Tension AC basse \u2013 Phase\u00a01",
                acvoltagelowline2: "Tension AC hors plage \u2013 Phase\u00a02",
                acvoltagelowline3: "Tension AC basse \u2013 Phase\u00a03",
                acvoltageoorline1: "Tension AC hors plage \u2013 Phase\u00a01",
                acvoltageoorline2: "Tension AC hors plage \u2013 Phase\u00a02",
                acvoltageoorline3: "Tension AC hors plage \u2013 Phase\u00a03",
                buttonpress: "Bouton press\u00e9",
                dcgriderror: "Erreur de courant de grille DC",
                dcgridhigh: "DC Grid Courant \u00c9lev\u00e9",
                dcgridlow: "Courant de grille DC faible",
                relayforced: "Relais forc\u00e9",
                relayopen: "Relais ouvert",
                rocof: "Erreur de taux de changement de fr\u00e9quence",
            },
            obs_strs: {
                discovering: "D\u00e9tection",
                failure: "\u00c9chec de cr\u00e9ation de rapport",
                flasherror: "Erreur flash",
                notmonitored: "Non surveill\u00e9",
                ok: "Normal",
                plmerror: "Erreur PLM",
                secmodeenterfailure: "\u00c9chec de l\u2019entr\u00e9e en mode s\u00e9curis\u00e9",
                secmodeexitfailure: "\u00c9chec de la sortie du mode s\u00e9curis\u00e9",
                sleeping: "Mode veille activ\u00e9",
                verifing: "P\u00e9riph\u00e9rique en cours de v\u00e9rification",
            },
            pcu_chan: {
                acMonitorError: "Erreur du moniteur AC",
                acfrequencyhigh: "Fr\u00e9quence AC \u00e9lev\u00e9e",
                acfrequencylow: "Fr\u00e9quence AC basse",
                acfrequencyoor: "Fr\u00e9quence AC hors plage",
                acvoltage_avg_hi: "Moyenne de tension AC \u00e9lev\u00e9e",
                acvoltagehigh: "Tension AC \u00e9lev\u00e9e",
                acvoltagelow: "Tension AC basse",
                acvoltageoor: "Tension AC hors plage",
                acvoltageoosp1: "Tension AC hors plage \u2013 Phase\u00a01",
                acvoltageoosp2: "Tension AC hors plage \u2013 Phase\u00a02",
                acvoltageoosp3: "Tension AC hors plage \u2013 Phase\u00a03",
                agfpowerlimiting: "Limitation de puissance AGF",
                dcresistancelow: "R\u00e9sistance DC faible",
                dcresistancelowpoweroff: "R\u00e9sistance DC faible - hors tension",
                dcvoltagetoohigh: "Tension DC trop \u00e9lev\u00e9e",
                dcvoltagetoolow: "Tension DC trop faible",
                dfdt: "Changement de fr\u00e9quence AC trop rapide",
                gfitripped: "RCD d\u00e9clench\u00e9",
                gridgone: "R\u00e9seau absent",
                gridinstability: "Instabilit\u00e9 du r\u00e9seau",
                gridoffsethi: "Compensation r\u00e9seau \u00e9lev\u00e9e",
                gridoffsetlow: "Compensation r\u00e9seau basse",
                hardwareError: "Erreur mat\u00e9rielle",
                hardwareWarning: "Avertissement mat\u00e9riel",
                highskiprate: "Taux d\u2019abandon \u00e9lev\u00e9",
                invalidinterval: "Intervalle non valide",
                pwrgenoffbycmd: "Production d\u2019\u00e9nergie d\u00e9sactiv\u00e9e par commande",
                skippedcycles: "Cycles ignor\u00e9s",
                vreferror: "Erreur de r\u00e9f\u00e9rence de tension",
            },
            pcu_ctrl: {
                alertactive: "Alerte active",
                altpwrgenmode: "Autre mode de g\u00e9n\u00e9ration de puissance",
                altvfsettings: "Autres param\u00e8tres de tension et de fr\u00e9quence",
                badflashimage: "Image flash incorrecte",
                bricked: "Pas de profil r\u00e9seau",
                commandedreset: "R\u00e9initialisation command\u00e9e",
                criticaltemperature: "Temp\u00e9rature critique",
                "dc-pwr-low": "Tension DC trop faible",
                iuplinkproblem: "Probl\u00e8me de liaison IUP",
                manutestmode: "En mode Test manuel",
                nsync: "D\u00e9synchronisation r\u00e9seau",
                overtemperature: "Surchauffe",
                poweronreset: "R\u00e9initialisation \u00e0 la mise sous tension",
                pwrgenoffbycmd: "Production d\u2019\u00e9nergie d\u00e9sactiv\u00e9e par commande",
                runningonac: "Fonctionnement sur secteur",
                "sleep-mode": "Mode veille activ\u00e9",
                tpmtest: "Profil r\u00e9seau transitoire",
                unexpectedreset: "R\u00e9initialisation inattendue",
                watchdogreset: "R\u00e9initialisation de la surveillance",
            },
            rgm_chan: { check_meter: "Erreur de l\u2019appareil de mesure", power_quality: "Mauvaise qualit\u00e9 de l\u2019alimentation" },
        },
        global: {
            cleared: "Supprimer",
            copyright_notice: "2007-2014, [e] Enphase Energy, Inc. Tous droits r\u00e9serv\u00e9s.",
            copyright_notice_01: "[e] Enphase Energy, Inc. Tous droits r\u00e9serv\u00e9s.",
            cs_phone_number: "XXX-XXX-XXXX",
            disable: "D\u00e9sactiver",
            disabled: "D\u00e9sactiv\u00e9e",
            enable: "Activer",
            enabled: "Activ\u00e9",
            enlighten_token_link: "Obtenir le jeton ici",
            false: "Faux",
            none: "Aucun",
            notapplicable: "s/o",
            ok: "OK",
            page_not_found_msg1: "Page introuvable",
            page_not_found_msg2: "La page que vous tentez d\u2019afficher n\u2019existe pas.",
            page_not_found_msg3: 'Essayez la page d\u2019<a href="/">accueil</a>',
            serialnumber: "Num\u00e9ro de s\u00e9rie",
            set: "D\u00e9finir",
            too_many_installer_sessions_msg1: "Trop de sessions d\u2019installateur actives",
            too_many_installer_sessions_msg2: "Pensez \u00e0 fermer d\u2019autres fen\u00eatres de session d\u2019installateur",
            too_many_installer_sessions_msg3: "Trop de requ\u00eates actives pour cette ressource, veuillez r\u00e9essayer dans quelques minutes",
            true: "Vrai",
            unknown: "Inconnu",
        },
        paging: {
            all: "Tout",
            clearchoices: "R\u00e9initialiser tableau",
            info: "Affichage de _START_ \u00e0 _END_ sur _TOTAL_ entr\u00e9es",
            infoempty: "Affichage de 0 \u00e0 0 sur 0 entr\u00e9es",
            infofiltered: "(filtr\u00e9 de _MAX_ entr\u00e9es au total)",
            lengthmenu: "Afficher les entr\u00e9es _MENU_",
            processing: "Traitement en cours...",
            search: "Rechercher\u00a0:",
            zerorecords: "Aucun enregistrement trouv\u00e9",
        },
    },
    envoy_backbone: {
        ac_batteries: {
            alert: {
                meters_not_enabled: "Les compteurs de production et de consommation doivent \u00eatre configur\u00e9s pour que les batteries AC fonctionnent.",
                no_phase_assignment: "Les batteries AC ne fonctionneront pas tant qu\u2019elles ne sont pas affect\u00e9es aux phases.",
                not_configured: "Les batteries AC doivent \u00eatre configur\u00e9es avant de pouvoir fonctionner.",
            },
            manage_options: {
                active: "Actif (%{count})",
                active_count: { counting: { one: "Actif (%{count})", other: "Actif (%{count})", zero: "Actif (%{count})" } },
                deleted: "Supprim\u00e9 (%{count})",
                deleted_count: { counting: { one: "Supprim\u00e9 (%{count})", other: "Supprim\u00e9 (%{count})", zero: "Supprim\u00e9 (%{count})" } },
            },
            max_temp: "Temp. max.\u00a0: ",
            nav: { all: "Tout", manage: "G\u00e9rer", status: "Etat" },
            no_inverters: "Il n\u2019y a aucune batterie.",
            no_inverters_search: "Aucune batterie trouv\u00e9e correspondant \u00e0 \u00ab\u00a0%{search_term}\u00a0\u00bb.",
            sleep_mode: {
                enable_failed: "La tentative de mise en mode veille des batteries a \u00e9chou\u00e9. Veuillez r\u00e9essayer dans quelques minutes. Si le probl\u00e8me persiste, contactez le support client.",
                prompt_to_cancel: {
                    desc:
                        "Une batterie doit \u00eatre en mode veille avant de pouvoir \u00eatre d\u00e9connect\u00e9e en toute s\u00e9curit\u00e9.</br></br>\u00cates-vous s\u00fbr de vouloir arr\u00eater le processus de mise en veille de la batterie\u00a0?",
                },
                prompt_to_sleep_modal: {
                    desc:
                        "Les batteries doivent \u00eatre en mode veille pour que vous puissiez les d\u00e9connecter en toute s\u00e9curit\u00e9.</br></br><b>Remarque\u00a0:</b> les batteries se chargeront ou se d\u00e9chargeront \u00e0 un \u00e9tat de charge compris entre %{min}\u2013%{max}% avant de passer en mode veille.",
                    target_soc_label: "Etat de chargement cible",
                    target_soc_link_text: "Changer l\u2019\u00e9tat de chargement cible",
                    warning: "Avertissement\u00a0: lorsque la batterie est mise en mode veille, seul un installateur professionnel peut la faire sortir du mode veille.",
                },
                prompt_to_wake: "Une batterie doit \u00eatre en mode veille avant de pouvoir \u00eatre d\u00e9connect\u00e9e en toute s\u00e9curit\u00e9.</br></br>\u00cates-vous s\u00fbr de vouloir d\u00e9sactiver le mode veille\u00a0?",
                sleep_btn: "Mode veille",
            },
            state_of_charge: "Etat du chargement&nbsp;: ",
            status_options: {
                cancel_sleep_label: "Arr\u00eater",
                comm_nocount: "Comm.",
                power_nocount: "En fonctionnement",
                preparing_to_sleep_text: "Passage en mode veille",
                profile_nocount: "Config.",
                wake_sleep_label: "D\u00e9sactiver",
                waking_label: "Sortie du mode veille",
            },
        },
        app_title: "Envoy Mobile",
        authentication: {
            authentication_with_authms: "Se connecter avec Enphase",
            bad_jwt: "Mauvais jeton",
            insert_token_headline: "Se connecter avec Enphase",
            title: "Authentification",
            token_headline: "Jeton",
            token_link: "Visitez %{auth_authority} pour obtenir votre jeton",
            token_submit: "Soumettre",
            too_many_sessions: "Too many sessions",
            verifying_jwt: "V\u00e9rification du jeton",
        },
        buttons: {
            cancel: "Annuler",
            change: "Modifier",
            close: "Fermer",
            connect: "Se connecter",
            edit: "Modifier",
            forget: "Oublier",
            forget_network: "Oubliez ce r\u00e9seau",
            ok: "OK",
            sleep_off: "D\u00e9sactiver le mode veille",
            sleep_on: "Activer le mode veille",
            start_scan: "D\u00e9marrer",
            stop: "Arr\u00eater",
            update: "Mettre \u00e0 jour",
        },
        cellular: {
            carrier: "Transporteur",
            connected: "Connect\u00e9",
            connection_status: "Etat de la connexion",
            iccid: "ICCID (num\u00e9ro de cellule)",
            imsi: "IMSI (ID abonn\u00e9)",
            mei: "Num\u00e9ro IMEI du modem",
            no_modem: "Aucun modem cellulaire d\u00e9tect\u00e9",
            not_connected: "Non connect\u00e9",
            page_title: "Configuration du cellulaire",
        },
        comm_check: {
            communication_level: "Niveau de communication",
            description: "V\u00e9rifiez la force du signal entre l\u2019Envoy et les micro-onduleurs.",
            devices: "El\u00e9m.",
            in_progress: "Contr\u00f4le des communications en cours",
            remaining_time: "%{minutes}\u00a0minutes restantes",
            remaining_time_one: "<\u00a01\u00a0minute restante",
            start: "Commencer le contr\u00f4le des communications",
            stop: "Arr\u00eater le contr\u00f4le des communications",
            title: "Contr\u00f4le des communications",
        },
        comms: {
            communicating: "Communication",
            description:
                "La liste des micro-onduleurs en communication de l\u2019Envoy inclut les num\u00e9ros de s\u00e9rie de tous les appareils qui re\u00e7oivent des messages de l\u2019Envoy et qui envoient des informations d\u2019\u00e9tat et des rapports de production.",
            not_communicating: "Ne communique pas",
            title: "Micro-onduleurs en communication",
        },
        countries: {
            AD: "Andorre",
            AE: "\u00c9mirats arabes unis",
            AF: "Afghanistan",
            AG: "Antigua-et-Barbuda",
            AI: "Anguilla",
            AL: "Albanie",
            AM: "Arm\u00e9nie",
            AQ: "Antarctique",
            AR: "Argentine",
            AS: "Samoa am\u00e9ricaines",
            AT: "Autriche",
            AU: "Australie",
            AW: "Aruba",
            AZ: "Azerba\u00efdjan",
            BA: "Bosnie-Herz\u00e9govine",
            BB: "Barbade",
            BD: "Bangladesh",
            BE: "Belgique",
            BF: "Burkina Faso",
            BG: "Bulgarie",
            BH: "Bahre\u00efn",
            BI: "Burundi",
            BJ: "B\u00e9nin",
            BM: "Bermudes",
            BN: "Brunei Darussalam",
            BO: "Bolivie, \u00c9tat plurinational de",
            BR: "Br\u00e9sil",
            BS: "Bahamas",
            BT: "Bhoutan",
            BV: "Bouvet, \u00eele",
            BW: "Botswana",
            BY: "Bi\u00e9lorussie",
            BZ: "Belize",
            CA: "Canada",
            CC: "Cocos (Keeling), \u00eeles",
            CF: "Centrafricaine, R\u00e9publique",
            CG: "Congo",
            CH: "Suisse",
            CI: "C\u00f4te d\u2019Ivoire",
            CK: "Cook, \u00eeles",
            CL: "Chili",
            CM: "Cameroun",
            CN: "Chine",
            CO: "Colombie",
            CR: "Costa Rica",
            CV: "Cap-Vert",
            CX: "Christmas, \u00eele",
            CY: "Chypre",
            CZ: "R\u00e9publique tch\u00e8que",
            DE: "Allemagne",
            DJ: "Djibouti",
            DK: "Danemark",
            DM: "Dominique",
            DO: "Dominicaine, R\u00e9publique",
            DZ: "Alg\u00e9rie",
            EC: "\u00c9quateur",
            EE: "Estonie",
            EG: "\u00c9gypte",
            EH: "Sahara-Occidental",
            ER: "\u00c9rythr\u00e9e",
            ES: "Espagne",
            ET: "\u00c9thiopie",
            FI: "Finlande",
            FJ: "Fidji",
            FK: "Malouines, \u00eeles",
            FM: "Micron\u00e9sie, \u00c9tats f\u00e9d\u00e9r\u00e9s de",
            FO: "F\u00e9ro\u00e9, \u00eeles",
            FR: "France",
            GA: "Gabon",
            GB: "Royaume-Uni",
            GD: "Grenade",
            GE: "G\u00e9orgie",
            GF: "Guyane fran\u00e7aise",
            GH: "Ghana",
            GI: "Gibraltar",
            GL: "Groenland",
            GM: "Gambie",
            GN: "Guin\u00e9e",
            GP: "Guadeloupe",
            GQ: "Guin\u00e9e \u00c9quatoriale",
            GR: "Gr\u00e8ce",
            GS: "G\u00e9orgie du Sud et \u00celes Sandwich du Sud",
            GT: "Guatemala",
            GU: "Guam",
            GW: "Guin\u00e9e-Bissau",
            GY: "Guyana",
            HK: "Hong-Kong",
            HM: "Heard et McDonald, \u00eeles",
            HN: "Honduras",
            HR: "Croatie",
            HT: "Ha\u00efti",
            HU: "Hongrie",
            ID: "Indon\u00e9sie",
            IE: "Irlande",
            IL: "Isra\u00ebl",
            IN: "Inde",
            IO: "Territoire britannique de l\u2019Oc\u00e9an Indien",
            IS: "Islande",
            IT: "Italie",
            JM: "Jama\u00efque",
            JO: "Jordanie",
            JP: "Japon",
            KE: "Kenya",
            KG: "Kirghizistan",
            KH: "Cambodge",
            KI: "Kiribati",
            KM: "Comores",
            KN: "Saint-Kitts-Et-Nevis",
            KR: "Cor\u00e9e, R\u00e9publique de",
            KW: "Kowe\u00eft",
            KY: "Ca\u00efmans, \u00eeles",
            KZ: "Kazakhstan",
            LA: "Laos, R\u00e9publique d\u00e9mocratique populaire du",
            LB: "Liban",
            LC: "Sainte-Lucie",
            LI: "Liechtenstein",
            LK: "Sri Lanka",
            LR: "Lib\u00e9ria",
            LS: "Lesotho",
            LT: "Lituanie",
            LU: "Luxembourg",
            LV: "Lettonie",
            MA: "Maroc",
            MC: "Monaco",
            MD: "Moldavie, R\u00e9publique de",
            ME: "Mont\u00e9n\u00e9gro",
            MG: "Madagascar",
            MH: "Marshall, \u00eeles",
            ML: "Mali",
            MM: "Myanmar",
            MN: "Mongolie",
            MO: "Macao",
            MP: "Mariannes du Nord, \u00eeles",
            MQ: "Martinique",
            MR: "Mauritanie",
            MS: "Montserrat",
            MT: "Malte",
            MU: "Maurice",
            MV: "Maldives",
            MW: "Malawi",
            MX: "Mexique",
            MY: "Malaisie",
            MZ: "Mozambique",
            NA: "Namibie",
            NC: "Nouvelle-Cal\u00e9donie",
            NE: "Niger",
            NF: "Norfolk, \u00eele",
            NG: "Nigeria",
            NI: "Nicaragua",
            NL: "Pays-Bas",
            NO: "Norv\u00e8ge",
            NP: "N\u00e9pal",
            NR: "Nauru",
            NU: "Niou\u00e9",
            NZ: "Nouvelle-Z\u00e9lande",
            OM: "Oman",
            PA: "Panama",
            PE: "P\u00e9rou",
            PF: "Polyn\u00e9sie fran\u00e7aise",
            PG: "Papouasie-Nouvelle-Guin\u00e9e",
            PH: "Philippines",
            PK: "Pakistan",
            PL: "Pologne",
            PM: "St-Pierre et Miquelon, \u00eele",
            PN: "Pitcairn",
            PR: "Puerto Rico",
            PT: "Portugal",
            PW: "Palaos",
            PY: "Paraguay",
            QA: "Qatar",
            RO: "Roumanie",
            RU: "F\u00e9d\u00e9ration de Russie",
            SA: "Arabie Saoudite",
            SB: "Salomon, \u00eeles",
            SC: "Seychelles",
            SE: "Su\u00e8de",
            SG: "Singapour",
            SH: "Sainte-H\u00e9l\u00e8ne, Ascension et Tristan da Cunha",
            SI: "Slov\u00e9nie",
            SJ: "Svalbard et \u00cele de Jan Mayen",
            SK: "Slovaquie",
            SL: "Sierra Leone",
            SM: "Saint-Marin",
            SN: "S\u00e9n\u00e9gal",
            SO: "Somalie",
            SR: "Suriname",
            ST: "Sao Tom\u00e9-et-Principe",
            SV: "El Salvador",
            SY: "R\u00e9publique arabe syrienne",
            SZ: "Swaziland",
            TC: "Turques et Ca\u00efques, \u00eeles",
            TD: "Tchad",
            TF: "Terres australes fran\u00e7aises",
            TG: "Togo",
            TH: "Tha\u00eflande",
            TJ: "Tadjikistan",
            TK: "Tokelau",
            TL: "Timor-Oriental",
            TM: "Turkm\u00e9nistan",
            TN: "Tunisie",
            TO: "Tonga",
            TR: "Turquie",
            TT: "Trinit\u00e9-et-Tobago",
            TV: "Tuvalu",
            TZ: "Tanzanie, R\u00e9publique unie de",
            UA: "Ukraine",
            UG: "Ouganda",
            UM: "Etats-Unis, \u00eeles mineures \u00e9loign\u00e9es des",
            US: "Etats-Unis",
            UY: "Uruguay",
            UZ: "Ouzb\u00e9kistan",
            VA: "Saint-Si\u00e8ge (\u00c9tat de la Cit\u00e9 du Vatican)",
            VC: "Saint-Vincent-et-les-Grenadines",
            VE: "Venezuela, R\u00e9publique bolivarienne du",
            VG: "Vierges britanniques, \u00eeles",
            VI: "Vierges am\u00e9ricaines, \u00eeles",
            VN: "Vi\u00eat Nam",
            VU: "Vanuatu",
            WF: "\u00celes Wallis-et-Futuna",
            WS: "Samoa",
            YE: "Y\u00e9men",
            YT: "Mayotte",
            ZA: "Afrique du Sud",
            ZM: "Zambie",
            ZW: "Zimbabwe",
        },
        counts: "%{actual_count}/%{expected_count}",
        detected: {
            battery_target_seperate: { one: "%{count}\u00a0batterie", other: "%{count}\u00a0batterie", zero: "%{count}\u00a0batterie" },
            description:
                "La liste des micro-onduleurs d\u00e9tect\u00e9s de l\u2019Envoy inclut tous les num\u00e9ros de s\u00e9rie d\u00e9couverts lors d\u2019une analyse des appareils ou mis \u00e0 disposition avec Installer Toolkit. Une fois les micro-onduleurs d\u00e9tect\u00e9s, ils peuvent envoyer et recevoir des donn\u00e9es vers/depuis l\u2019Envoy.",
            detected: "D\u00e9tect\u00e9e(s)",
            device_target: "P\u00e9riph\u00e9riques cible\u00a0: %{count}",
            device_target_title: "P\u00e9riph\u00e9riques cible\u00a0: ",
            discovered: "D\u00e9couvert\u00a0:",
            installed: "Install\u00e9",
            micro_target_seperate: { one: "%{count}\u00a0micro-onduleur", other: "%{count}\u00a0micro-onduleurs", zero: "%{count}\u00a0micro-onduleurs" },
            nsr_target_separate: { one: "%{count} Q-Relais", other: "%{count} Q-Relais", zero: "%{count} Q-Relais" },
            provisioned: "Mis \u00e0 disposition\u00a0:",
            remaining_duration: {
                one: "Dur\u00e9e restante\u00a0: %{count}\u00a0heure %{minutes}\u00a0minutes",
                other: "Dur\u00e9e restante\u00a0: %{count}\u00a0heures %{minutes}\u00a0minutes",
                zero: "Dur\u00e9e restante\u00a0: %{count}\u00a0heures %{minutes}\u00a0minutes",
            },
            remaining_hour_one: "1\u00a0heure",
            remaining_hours: "%{hours}\u00a0heures",
            remaining_minute_one: "1\u00a0minute restante",
            remaining_minutes: "%{minutes}\u00a0minutes restantes",
            remaining_priority: {
                one: "Dur\u00e9e restante de la priorit\u00e9\u00a0: %{count}\u00a0heure %{minutes}\u00a0minutes",
                other: "Dur\u00e9e restante de la priorit\u00e9\u00a0: %{count}\u00a0heures %{minutes}\u00a0minutes",
                zero: "Dur\u00e9e restante de la priorit\u00e9\u00a0: %{count}\u00a0heures %{minutes}\u00a0minutes",
            },
            remaining_time: "%{minutes}\u00a0minutes restantes",
            remaining_time_one: "<\u00a01\u00a0minute restante",
            scan_inprogress: "Recherche de p\u00e9riph\u00e9riques en cours",
            scan_start: "D\u00e9marrer la recherche de p\u00e9riph\u00e9riques",
            scan_stop: "Arr\u00eater",
            title: "Micro-onduleurs d\u00e9tect\u00e9s",
        },
        device_alert_messages: {
            meters_not_enabled: "Les compteurs de production et de consommation doivent \u00eatre configur\u00e9s pour que les batteries fonctionnent.",
            no_phase_assignment: "Les batteries ne fonctionneront pas tant qu\u2019elles ne sont pas affect\u00e9es aux phases.",
            not_configured: "Les batteries doivent \u00eatre configur\u00e9es avant de pouvoir fonctionner.",
        },
        devices: {
            detected: "D\u00e9tect\u00e9(s)",
            detected_total_count: "%{detected_count} sur %{total_count}",
            device_info: {
                change_phase: "Changer de phase",
                comm_level: "Niveau de comm.\u00a0: ",
                comm_level_2_4_ghz: "[FR] Comm Level (2.4 GHz): ",
                comm_level_sub_ghz: "[FR] Comm Level (Sub GHz): ",
                detected: "D\u00e9tect\u00e9(s) : ",
                discovered: "D\u00e9couvert via la recherche de p\u00e9riph\u00e9riques",
                grid_profile: "Profil r\u00e9seau\u00a0: ",
                last_comm: "Derni\u00e8re communication\u00a0: ",
                last_report: "Dernier rapport\u00a0: ",
                notapplicable: "s/o",
                param_table: "Table de param\u00e8tres\u00a0: ",
                part_number: "R\u00e9f\u00e9rence\u00a0: ",
                pending_condition_clear: "La commande de suppression de la condition \u00ab\u00a0%{condition_flag}\u00a0\u00bb est en cours.",
                phase: "Phase\u00a0: ",
                phase_unknown: "Aucune phase s\u00e9lectionn\u00e9e",
                provisioned: "Attribu\u00e9 via la mise \u00e0 disposition",
                running_image: "Image d\u2019ex\u00e9cution\u00a0: ",
                select_phase: "S\u00e9lectionnez une phase",
                status: "Etat : ",
                unknown: "Inconnu",
                updated: "Mis \u00e0 jour ",
                view_in_array: "Afficher dans le champ PV",
            },
            device_scan: "Recherche de p\u00e9riph\u00e9riques",
            device_scan_short: "Recherche",
            scan_state: { active: "Actif", inactive: "Inactif", scan_disabled: "D\u00e9sactiv\u00e9e", scan_inhibited: "Interdite", scan_suspended: "Suspendue" },
        },
        encharge_batteries: {
            manage_options: {
                active: "[FR] Active (%{count})",
                active_count: { counting: { one: "[FR] Active (%{count})", other: "[FR] Active (%{count})", zero: "[FR] Active (%{count})" } },
                deleted: "[FR] Deleted (%{count})",
                deleted_count: { counting: { one: "[FR] Deleted (%{count})", other: "[FR] Deleted (%{count})", zero: "[FR] Deleted (%{count})" } },
            },
            nav: { all: "Tout", manage: "G\u00e9rer", status: "Etat" },
            no_inverters: "[FR] There are no encharge batteries.",
            no_inverters_search: '[FR] No Encharge Batteries were found matching "%{search_term}".',
            phase_labels: { "ph-a": "[FR] L1(A)", "ph-b": "[FR] L2(B)", "ph-c": "[FR] L3(C)", "ph-unk": "[FR] No phase selected", "ph-updating": "[FR] Updating...", select_one: "[FR] Select One" },
            status_options: {
                cancel_sleep_label: "[FR] Stop",
                comm_nocount: "[FR] Comm",
                power_nocount: "[FR] Operating",
                preparing_to_sleep_text: "[FR] Entering Sleep Mode",
                profile_nocount: "[FR] Config",
                wake_sleep_label: "[FR] Turn Off",
                waking_label: "[FR] Exiting Sleep Mode",
            },
            title: "[FR] Encharge",
        },
        enpowers: {
            manage_options: {
                active: "[FR] Active (%{count})",
                active_count: { counting: { one: "[FR] Active (%{count})", other: "[FR] Active (%{count})", zero: "[FR] Active (%{count})" } },
                deleted: "[FR] Deleted (%{count})",
                deleted_count: { counting: { one: "[FR] Deleted (%{count})", other: "[FR] Deleted (%{count})", zero: "[FR] Deleted (%{count})" } },
            },
            max_temp: "[FR] Max Temp: ",
            nav: { all: "[FR] All", manage: "[FR] Manage", status: "[FR] Status" },
            no_inverters: "[FR] There is no Enpower device.",
            no_inverters_search: '[FR] No Enpower device found matching "%{search_term}".',
            state_of_grid: { closed: "[FR] Closed", open: "[FR] Open", title: "[FR] State of Grid: " },
            status_options: { comm_nocount: "[FR] Comm", power_nocount: "[FR] Operating", profile_nocount: "[FR] Config" },
            title: "[FR] Enpower",
        },
        errors: {
            error_message: "D\u00e9sol\u00e9, il y a un probl\u00e8me dans la r\u00e9ception des donn\u00e9es depuis l\u2019Envoy. Si le probl\u00e8me persiste, contactez le support client.",
            interface_not_dhcp: "D\u00e9sol\u00e9, vous ne pouvez pas obtenir une nouvelle adresse\u00a0IP. D\u00e9finissez d\u2019abord le param\u00e8tre\u00a0IP de l\u2019Envoy sur\u00a0DHCP.",
            not_allowed: "D\u00e9sol\u00e9, la modification que vous avez demand\u00e9e n\u2019est pas autoris\u00e9e et n\u2019a pas pu \u00eatre enregistr\u00e9e.",
            not_authorized: "D\u00e9sol\u00e9, vous n\u2019\u00eates pas autoris\u00e9 \u00e0 afficher cette page.",
            save_failed: "D\u00e9sol\u00e9, vos modifications n\u2019ont pas pu \u00eatre enregistr\u00e9es. ",
            start_scan_target_too_low:
                "<p>Vous avez indiqu\u00e9 pr\u00e9voir que %{expected_count}\u00a0micro-onduleurs envoient des rapports \u00e0 cet Envoy, et que %{expected_count} ont d\u00e9j\u00e0 \u00e9t\u00e9 d\u00e9tect\u00e9s.</p><p>Avant une recherche de p\u00e9riph\u00e9riques, <a href='#' class='open-target-count'>augmentez le nombre de micro-onduleurs attendus</a> ou supprimez un ou plusieurs micro-onduleurs de l\u2019<a href='#' class='open-manage-devices'>\u00e9cran de gestion de p\u00e9riph\u00e9riques</a>.</p>",
            start_scan_target_too_low_battery: {
                one: "<p>Vous avez indiqu\u00e9 pr\u00e9voir qu\u2019%{count}\u00a0batterie envoie des rapports \u00e0 cet Envoy, et que ce nombre a d\u00e9j\u00e0 \u00e9t\u00e9 d\u00e9tect\u00e9.</p>",
                other: "<p>Vous avez indiqu\u00e9 pr\u00e9voir que %{count}\u00a0batteries envoient des rapports \u00e0 cet Envoy, et que ce nombre a d\u00e9j\u00e0 \u00e9t\u00e9 d\u00e9tect\u00e9.</p>",
                zero: "<p>Vous avez indiqu\u00e9 pr\u00e9voir que %{count}\u00a0batteries envoient des rapports \u00e0 cet Envoy, et que ce nombre a d\u00e9j\u00e0 \u00e9t\u00e9 d\u00e9tect\u00e9.</p>",
            },
            start_scan_target_too_low_battery_end:
                "<p>Avant une recherche de p\u00e9riph\u00e9riques, <a href='#' class='open-target-count'>augmentez le nombre de batteries attendues</a>, ou supprimez uns ou plusieurs batteries de l\u2019<a href='#' class='open-manage-devices-battery'>\u00e9cran de gestion de p\u00e9riph\u00e9riques</a></p>",
            start_scan_target_too_low_both:
                "<p>Le nombre attendu de p\u00e9riph\u00e9riques a d\u00e9j\u00e0 \u00e9t\u00e9 d\u00e9tect\u00e9.</p><p>Avant une recherche de p\u00e9riph\u00e9riques, <a href='#' class='open-target-count'>augmentez le nombre de p\u00e9riph\u00e9riques attendus</a>, ou supprimez un(e) ou plusieurs micro-onduleurs ou batteries.</p>",
            start_scan_target_too_low_micro: {
                one: "<p>Vous avez indiqu\u00e9 pr\u00e9voir qu\u2019%{count}\u00a0micro-onduleur envoie des rapports \u00e0 cet Envoy, et qu\u2019il a d\u00e9j\u00e0 \u00e9t\u00e9 d\u00e9tect\u00e9.</p>",
                other: "<p>Vous avez indiqu\u00e9 pr\u00e9voir que %{count}\u00a0micro-onduleurs envoient des rapports \u00e0 cet Envoy, et que ce nombre a d\u00e9j\u00e0 \u00e9t\u00e9 d\u00e9tect\u00e9.</p>",
                zero: "<p>Vous avez indiqu\u00e9 pr\u00e9voir que %{count}\u00a0micro-onduleurs envoient des rapports \u00e0 cet Envoy, et que ce nombre a d\u00e9j\u00e0 \u00e9t\u00e9 d\u00e9tect\u00e9.</p>",
            },
            start_scan_target_too_low_micro_end:
                "<p>Avant une recherche de p\u00e9riph\u00e9riques, <a href='#' class='open-target-count'>augmentez le nombre de micro-onduleurs attendus</a>, ou supprimez un ou plusieurs micro-onduleurs de l\u2019<a href='#' class='open-manage-devices'>\u00e9cran de gestion de p\u00e9riph\u00e9rique</a>s.</p>",
            start_scan_target_too_low_nsr: {
                one: "<p>Vous avez indiqu\u00e9 pr\u00e9voir qu\u2019%{count}\u00a0Q-Relais envoie des rapports \u00e0 cet Envoy, et que ce nombre a d\u00e9j\u00e0 \u00e9t\u00e9 d\u00e9tect\u00e9.</p>",
                other: "<p>Vous avez indiqu\u00e9 pr\u00e9voir que %{count}\u00a0Q-Relais envoient des rapports \u00e0 cet Envoy, et que ce nombre a d\u00e9j\u00e0 \u00e9t\u00e9 d\u00e9tect\u00e9.</p>",
                zero: "<p>Vous avez indiqu\u00e9 pr\u00e9voir que %{count}\u00a0Q-Relais envoient des rapports \u00e0 cet Envoy, et que ce nombre a d\u00e9j\u00e0 \u00e9t\u00e9 d\u00e9tect\u00e9.</p>",
            },
            start_scan_target_too_low_nsr_end:
                "<p>Avant une recherche de p\u00e9riph\u00e9riques, <a href='#' class='open-target-count'>augmentez le nombre de Q-Relais attendues</a>, ou supprimez uns ou plusieurs Q-Relais de l\u2019<a href='#' class='open-manage-devices-nsr'>\u00e9cran de gestion de p\u00e9riph\u00e9riques</a></p>",
            start_scan_title: "Recherche de p\u00e9riph\u00e9riques indisponible",
            timeout_message:
                "D\u00e9sol\u00e9, la r\u00e9ception des donn\u00e9es depuis l\u2019Envoy prend trop de temps. V\u00e9rifiez que l\u2019Envoy est sous tension, mais aussi que l\u2019Envoy et que cet appareil sont tous les deux connect\u00e9s au m\u00eame r\u00e9seau local. Si le probl\u00e8me persiste, contactez le support client.",
            title: "Erreur",
            tunnel_close_failed: "La tentative de fermeture de la connexion au support Enphase a \u00e9chou\u00e9. Si le probl\u00e8me persiste, contactez le support client.",
            tunnel_failed_title: "Echec de la connexion",
            tunnel_open_failed:
                "L\u2019Envoy doit \u00eatre connect\u00e9 \u00e0 Internet pour ouvrir une connexion \u00e0 Enphase. Si l\u2019Envoy est connect\u00e9 \u00e0 Internet et que le probl\u00e8me persiste, contactez le support client.",
        },
        ethernet: {
            buttons: { dhcp: "Utiliser le protocole DHCP", new_ip: "Nouvelle adresse\u00a0IP", static: "Utiliser l\u2019IP statique" },
            confirm_change: { description: "Cela peut interrompre les communications avec l\u2019Envoy et n\u00e9cessiter que vous vous reconnectiez.", title: "Modifier la configuration Ethernet" },
            confirm_static: {
                description:
                    "Cela d\u00e9finira l\u2019adresse\u00a0IP DHCP actuelle et d\u2019autres configurations comme des valeurs statiques. Si vous choisissez de continuer, vous pouvez mettre \u00e0 jour ces valeurs sur l\u2019\u00e9cran suivant.",
                title: "Modifier la configuration Ethernet",
            },
            gateway_ip: "Adresse\u00a0IP de la passerelle",
            ip_address: "Adresse IP",
            ip_setting: "Param\u00e8tre IP",
            netmask: "Masque r\u00e9seau",
            new_ip_modal: { description: "Cela peut interrompre les communications avec l\u2019Envoy et n\u00e9cessiter que vous vous reconnectiez.", title: "Obtenir une nouvelle adresse\u00a0IP\u00a0?" },
            no_config: "Aucune connexion Ethernet d\u00e9tect\u00e9e",
            page_title: "Configuration Ethernet",
            primary_dns: "Serveur DNS principal",
            secondary_dns: "Serveur DNS secondaire",
            type: { dhcp: "DHCP", static: "IP statique" },
        },
        forms: { search: "Rechercher", search_prompt: "Num\u00e9ro de s\u00e9rie", select_prompt: "S\u00e9lectionner une" },
        global_nav: {
            acb: "[FR] AC Battery",
            comms: "Comm.",
            detected: "D\u00e9tect\u00e9",
            encharge: "[FR] Encharge",
            encharge_batteries: "[FR] Encharge",
            enpower: "[FR] Enpower",
            meters: "Compteurs",
            meters_small: "Comp-<br/>teurs",
            microinverters: "Micro-onduleurs",
            microinverters_short: "Micros",
            more: "Plus",
            network: "R\u00e9seau",
            nsr: "Relais Q",
            overview: "Aper\u00e7u",
            power: "Puissance",
            profiles: "Profils",
            storage: "Batterie AC",
        },
        initial_setup: {
            continue: "Continuer",
            device_prompt: "Saisissez le nombre d\u2019appareils dont vous voulez envoyer les rapports \u00e0 cet Envoy.",
            eu_profile_prompt: "S\u00e9lectionnez un profil r\u00e9seau propre \u00e0 l\u2019emplacement.",
            migration_in_progress_message: "profils en cours de mise \u00e0 jour",
            na_profile_prompt: "Le syst\u00e8me utilise les r\u00e9glages du profil r\u00e9seau install\u00e9s en usine. Vous pouvez s\u00e9lectionner un profil r\u00e9seau propre \u00e0 l\u2019emplacement ci-dessous.",
            system_size: "Taille du syst\u00e8me",
        },
        jquery_validate: {
            messages: {
                addedTierPercent: "Veuillez saisir un chiffre\u00a0sup\u00e9rieur au pourcentage\u00a0r\u00e9f\u00e9rentiel\u00a0saisi ci-dessous pour la valeur {0}.",
                an_number: "Veuillez fournir un num\u00e9ro valide.",
                creditcard: "Veuillez fournir un num\u00e9ro de carte de cr\u00e9dit valide.",
                date: "Veuillez fournir une date valide.",
                dateISO: "Veuillez fournir une date valide (ISO).",
                digits: "Veuillez fournir seulement des chiffres.",
                domain: "Veuillez fournir une adresse IPv4 (xxx.xxx.xxx.xxx) ou une URL (google.com) valide",
                email: "Veuillez fournir une adresse \u00e9lectronique valide.",
                equalTo: "Veuillez ressaisir la m\u00eame valeur.",
                ipv4: "Veuillez fournir une adresse IP v4 valide. (xxx.xxx.xxx.xxx)",
                max: "Veuillez fournir une valeur inf\u00e9rieure ou \u00e9gale \u00e0 {0}.",
                maxlength: "Veuillez saisir {0}\u00a0caract\u00e8res maximum.",
                min: "Veuillez fournir une valeur sup\u00e9rieure ou \u00e9gale \u00e0 {0}.",
                minlength: "Veuillez saisir au moins {0}\u00a0caract\u00e8res.",
                number: "Veuillez fournir un num\u00e9ro valide.",
                range: "Saisissez une valeur comprise entre {0} et {1}.",
                rangelength: "Veuillez fournir une valeur contenant entre {0} et {1}\u00a0caract\u00e8res.",
                remote: "Veuillez corriger ce champ.",
                required: "Ce champ est obligatoire.",
                url: "Veuillez fournir une adresse URL valide.",
                wep_key: "Veuillez fournir une cl\u00e9 WEP valide (10, 26 ou 58\u00a0caract\u00e8res, qui peuvent inclure des chiffres de 0\u00a0\u00e0\u00a09 et des lettres de A\u00a0\u00e0\u00a0F).",
            },
        },
        loading: "Veuillez patienter, chargement en cours",
        meters: {
            active_energy: "Energie active",
            active_energy_lt: "Energie active",
            active_power: "Puissance active",
            apparent_energy: "\u00c9nergie apparente",
            apparent_power: "Puissance apparente",
            consumption: "Compteur de consommation \u00e9lectrique",
            consumption_meter: {
                enable_meter: "Activer le compteur de consommation \u00e9lectr.",
                measurement_type: "Circuit mesur\u00e9",
                meter_type_desc: "Le circuit qui passe via les transformateurs de courant de consommation comprend-il la charge avec la production photovolta\u00efque ou seulement la charge\u00a0?",
                meter_type_desc_singular: "Le circuit qui passe via les transformateurs de courant de consommation comprend-il la charge avec la production photovolta\u00efque ou seulement la charge\u00a0?",
                meter_type_warning: "Assurez-vous que les s\u00e9lections ci-dessus sont correctes.",
            },
            current: "Courant",
            current_ct: {
                current_ct_settings: "Param\u00e8tres actuels du transformateur de courant",
                custom_cts_installed: "Transformateur de courant %{meter_type} personnalis\u00e9 install\u00e9",
                primary: "Principal",
                remove_desc: "Appuyez sur OK pour confirmer que vous utilisez des transformateurs de courant %{meter_type} Enphase standards.",
                remove_settings: "Supprimer les param\u00e8tres personnalis\u00e9s du transformateur de courant\u00a0?",
                secondary: "Secondaire",
                turns: "Tours",
            },
            descriptors: { lifetime: "Cumul", lifetime_lag: "Inductif (cumul)", lifetime_lead: "Capacitif (cumul)", today: "Aujourd\u2019hui", today_lag: "Inductif (aujourd\u2019hui)", today_lead: "Capacitif (aujourd\u2019hui)" },
            enable_consumption_meter: "Activer le compteur de consommation \u00e9lectr.",
            enable_consumption_modal: {
                description: "Une fois ce compteur activ\u00e9, il ne peut pas \u00eatre d\u00e9sactiv\u00e9 et le type ne peut pas \u00eatre modifi\u00e9.",
                description_mode_three: "Une fois que vous activez ce compteur, vous ne pouvez pas changer le type, le d\u00e9sactiver ni diminuer le nombre de phases.",
                description_mode_three_post_enable: "Une fois que vous aurez fait cela, vous ne pourrez pas diminuer le nombre de phases.",
                note_three: "<strong>Remarque\u00a0: le nombre de phases augmentera \u00e9galement sur le compteur de production.</strong>",
                note_three_post_enable: "<strong>Remarque\u00a0: le nombre de phases augmentera \u00e9galement sur le compteur de production.</strong>",
                title: 'Activer la mesure\u00a0"%{type}" sur le compteur\u00a0?',
                title_mode_three: "Activer le compteur avec les circuits mesur\u00e9s\u00a0: %{type} et les phases mesur\u00e9es\u00a0: %{phCount}\u00a0? %{phCount}\u00a0?",
                title_mode_three_post_enable: "Mettre \u00e0 jour les phases mesur\u00e9es\u00a0: %{phCount}\u00a0?",
            },
            enable_meter: "Activer le compteur de consommation \u00e9lectr.",
            enable_modal: { description: "Une fois ce compteur activ\u00e9, il ne peut pas \u00eatre d\u00e9sactiv\u00e9 et le type ne peut pas \u00eatre modifi\u00e9.", title: "Activer la mesure %{type} sur le compteur\u00a0?" },
            enable_production_meter: "Activer le compteur de production \u00e9lectr.",
            enable_production_modal: {
                description: "Une fois ce compteur activ\u00e9, il ne peut pas \u00eatre d\u00e9sactiv\u00e9.",
                description_mode_three: "Une fois que vous activez ce compteur, vous ne pouvez pas le d\u00e9sactiver ni diminuer le nombre de phases.",
                description_mode_three_post_enable: "Une fois que vous aurez fait cela, vous ne pourrez pas diminuer le nombre de phases.",
                note_three: "<strong>Remarque\u00a0: le nombre de phases augmentera \u00e9galement sur le compteur de consommation.</strong>",
                note_three_post_enable: "<strong>Remarque\u00a0: le nombre de phases augmentera \u00e9galement sur le compteur de consommation.</strong>",
                title: "Activer le compteur ?",
                title_mode_three: "Activer le compteur avec les phases mesur\u00e9es\u00a0: %{phCount}\u00a0?",
                title_mode_three_post_enable: "Mettre \u00e0 jour les phases mesur\u00e9es\u00a0: %{phCount}\u00a0?",
            },
            enable_production_prompt: "Le compteur de production doit \u00eatre activ\u00e9 avant que ces relev\u00e9s puissent \u00eatre affich\u00e9s.",
            freq_analysis: {
                btn_change_data_type: "Activer/d\u00e9sactiver les donn\u00e9es",
                plc_activity: "Activit\u00e9",
                plc_power_spectrum: "Spectre de puissance",
                power_line_analy: "Analyse de la communication par ligne \u00e9lectrique",
            },
            id: "EID",
            internal_meters: "Compteurs internes",
            latest_reading: "Lecture la plus r\u00e9cente",
            lifetime_energy: "Cumul",
            load_contains_storage_message: "Les relev\u00e9s de charge comprennent l\u2019activit\u00e9 de stockage.",
            measurement_type: "Type",
            meter_change_warning: "Vous ne pouvez pas modifier cela une fois le compteur activ\u00e9.",
            meter_mode: { single: "Monophas\u00e9 (L-N)", split: "Monophas\u00e9 (L-L)", three: "Polyphas\u00e9" },
            meter_readings: "Relev\u00e9s",
            meter_state: { disabled: "D\u00e9sactiv\u00e9e", enabled: "Activ\u00e9" },
            meter_status: {
                "check-wiring": "V\u00e9rifier le c\u00e2blage",
                meter_setup: "Configurer la mesure maintenant",
                meters_not_enabled: "Compteurs non activ\u00e9s",
                normal: "Normal",
                "not-metering": "Compteur non activ\u00e9",
                status_flags: {
                    "negative-production": "Les relev\u00e9s de production sont n\u00e9gatifs. Contr\u00f4lez les c\u00e2bles et l\u2019orientation du transformateur de courant, par rapport aux connexions de tension.",
                    "negative-total-consumption": "Les relev\u00e9s de consommation sont n\u00e9gatifs. Contr\u00f4lez les c\u00e2bles et l\u2019orientation du transformateur de courant, par rapport aux connexions de tension.",
                    "power-on-unused-phase": "Courant d\u00e9tect\u00e9 sur une phase inutilis\u00e9e. Contr\u00f4lez les c\u00e2bles de connexion au transformateur de courant, par rapport aux connexions de tension.",
                    "production-imbalance": "Production non \u00e9quilibr\u00e9e entre les phases. Contr\u00f4lez les c\u00e2bles de connexion au transformateur de courant et les connexions de tension.",
                },
            },
            meter_type: { "net-consumption": "Net", "total-consumption": "Total" },
            meter_type_desc: "Si les CT de consommation sont sur un circuit dans lequel passe un flux de production photovolta\u00efque, laissez le type d\u00e9fini sur <b>Net</b>. Sinon, remplacez le type par <b>Total</b>.",
            meter_type_verbose: { "net-consumption": "Charge avec la production photovolta\u00efque", "total-consumption": "Charge uniquement" },
            meter_type_warning: "Assurez-vous de configurer le type de compteur correctement. Vous ne pouvez pas modifier cela une fois le compteur activ\u00e9.",
            mode: "Mode",
            multi_phase_options: { mphase_0: "Non s\u00e9lectionn\u00e9e", mphase_1: "L1(A)", mphase_2: "L1(A) + L2(B)", mphase_3: "L1(A) + L2(B) + L3(C)" },
            multi_phase_warning: {
                consumption: {
                    post_continue:
                        "Le compteur n\u2019a pas encore \u00e9t\u00e9 activ\u00e9. V\u00e9rifiez les relev\u00e9s, puis appuyez sur <strong>Activer le compteur de consommation \u00e9lectrique</strong> en bas de l\u2019\u00e9cran.",
                    pre_continue: "Le compteur n\u2019a pas encore \u00e9t\u00e9 activ\u00e9. S\u00e9lectionnez Phases mesur\u00e9es et Circuit mesur\u00e9, puis appuyez sur <strong>Afficher les relev\u00e9s</strong>.",
                    pre_continue_one: "Le compteur n\u2019a pas encore \u00e9t\u00e9 activ\u00e9. S\u00e9lectionnez Circuit mesur\u00e9, puis appuyez sur <strong>Afficher les relev\u00e9s</strong>.",
                },
                production: {
                    post_continue:
                        "Le compteur n\u2019a pas encore \u00e9t\u00e9 activ\u00e9. V\u00e9rifiez les relev\u00e9s, puis appuyez sur <strong>Activer le compteur de production \u00e9lectrique</strong> en bas de l\u2019\u00e9cran.",
                    pre_continue: "Le compteur n\u2019a pas encore \u00e9t\u00e9 activ\u00e9. S\u00e9lectionnez Phases mesur\u00e9es, puis appuyez sur <strong>Afficher les relev\u00e9s</strong>.",
                },
            },
            net_consumption_desc:
                "Ces relev\u00e9s refl\u00e8tent la diff\u00e9rence entre la charge domestique totale et la production photovolta\u00efque. Ils devraient correspondre approximativement aux relev\u00e9s du compteur domestique du fournisseur.",
            net_consumption_title: "Consommation nette",
            no_consumption: "Aucun compteur de consommation configur\u00e9 pour ce syst\u00e8me.",
            no_meters: "Aucun compteur d\u00e9tect\u00e9.",
            no_production: "Aucun compteur de production \u00e9lectrique configur\u00e9 pour ce syst\u00e8me.",
            phase_count: "Phases mesur\u00e9es",
            phase_count_desc: "S\u00e9lectionnez la/les phase(s) du compteur que vous avez raccord\u00e9e(s).",
            phase_labels: { phase_1: "L1(A)", phase_2: "L2(B)", phase_3: "L3(C)" },
            pmu: {
                add_another: "Ajouter un autre",
                add_meter: "Ajouter un compteur d\u2019\u00e9nergie",
                config: {
                    add: "Ajouter les compteurs s\u00e9lectionn\u00e9s",
                    meters_description: "Compteurs d\u2019\u00e9nergie d\u00e9tect\u00e9s sur ce r\u00e9seau\u00a0:",
                    network_warning:
                        "Avant d\u2019ajouter un compteur, assurez-vous que l\u2019Envoy dispose d\u2019une connexion Ethernet et d\u2019une adresse\u00a0IP statique. Ceci doit \u00eatre configur\u00e9 sur le routeur et sur l\u2019Envoy.",
                    no_meters_description:
                        "Aucun compteur d\u00e9tect\u00e9.<div class='alert alert-info'><b>Remarque\u00a0:</b></div><div class='alert alert-info'> la d\u00e9tection des compteurs d\u2019\u00e9nergie peut prendre jusqu\u2019\u00e0 une heure.</div><div class='alert alert-info'> Pour faciliter la d\u00e9tection, assurez-vous que le compteur d\u2019\u00e9nergie est sur le m\u00eame sous-r\u00e9seau local que l\u2019Envoy.</div>",
                    remove: "Supprimer un compteur d\u2019\u00e9nergie",
                    title: "Configuration du compteur d\u2019\u00e9nergie",
                },
                labels: {
                    fw_version: "Version du Firmware",
                    ip: "Adresse IP",
                    mac_address: "Adresse Mac",
                    manufacturer: "Fabricant",
                    part_number: "R\u00e9f\u00e9rence",
                    production: "Production",
                    serial_number: "Num\u00e9ro de s\u00e9rie",
                    status: "Etat",
                },
                phase_coupler: "Un coupleur de phase est requis pour que les micro-onduleurs install\u00e9s sur L2 ou L3 communiquent avec l\u2019Envoy.",
            },
            power_exporting: "(Exportation vers le r\u00e9seau)",
            power_factor: "Facteur de puissance",
            power_importing: "Importation depuis le r\u00e9seau",
            production: "Compteur de production \u00e9lectrique",
            reactive_energy: "\u00c9nergie r\u00e9active",
            reactive_power: "Puissance r\u00e9active",
            single_phase_warning: {
                consumption: {
                    post_continue:
                        "Le compteur n\u2019a pas encore \u00e9t\u00e9 activ\u00e9. V\u00e9rifiez les relev\u00e9s, puis appuyez sur <strong>Activer le compteur de consommation \u00e9lectrique</strong> en bas de l\u2019\u00e9cran.",
                    pre_continue: "Le compteur n\u2019a pas encore \u00e9t\u00e9 activ\u00e9. S\u00e9lectionnez Circuit mesur\u00e9, puis appuyez sur <strong>Afficher les relev\u00e9s</strong>.",
                },
                production: {
                    post_continue:
                        "Le compteur n\u2019a pas encore \u00e9t\u00e9 activ\u00e9. V\u00e9rifiez les relev\u00e9s, puis appuyez sur <strong>Activer le compteur de production \u00e9lectrique</strong> en bas de l\u2019\u00e9cran.",
                    pre_continue: "Le compteur n\u2019a pas encore \u00e9t\u00e9 activ\u00e9. Appuyez sur <strong>Afficher les relev\u00e9s</strong> pour afficher et v\u00e9rifier les relev\u00e9s.",
                },
            },
            status: "Etat",
            title: "Compteurs",
            today_energy: "Aujourd\u2019hui",
            total_consumption_desc: "Ces relev\u00e9s refl\u00e8tent la charge domestique totale.",
            total_consumption_na: "Le compteur de production doit \u00eatre activ\u00e9 avant que ces relev\u00e9s puissent \u00eatre affich\u00e9s.",
            total_consumption_title: "Consommation totale",
            type: { eim: "Compteur Envoy int\u00e9gr\u00e9", pmu: "Compteur d\u2019\u00e9nergie", rgm: "Enphase RGM" },
            unavailable: "s/o",
            update_settings: "Mettre \u00e0 jour",
            view_readings: "Afficher les relev\u00e9s",
            wizard: {
                batt_off: { counting: { one: "Assurez-vous que le circuit de la batterie Enphase est \u00c9TEINT.", other: "Assurez-vous que les circuits de la batterie Enphase sont \u00c9TEINTS." } },
                battery_reminder: "<b>Rappelez-vous d\u2019allumer le circuit de la batterie Enphase.</b>",
                btn_next: "Suivant",
                btn_try_again: "R\u00e9essayer",
                bullet_load_increase: "La charge totale du foyer a-t-elle augment\u00e9 comme pr\u00e9vu\u00a0?",
                bullet_meters_match: "Le relev\u00e9 du compteur r\u00e9sidentiel du service public correspond-il approximativement \u00e0 ce relev\u00e9\u00a0?",
                bullet_phase_select: "La production photovolta\u00efque afflue-t-elle vers le r\u00e9seau mesur\u00e9 par le transformateur de courant de consommation\u00a0?",
                bullet_pv_on:
                    "ALLUMEZ les disjoncteurs du circuit PV et attendez la fin de la p\u00e9riode de reconnexion. Le syst\u00e8me photovolta\u00efque devrait commencer \u00e0 produire de l\u2019\u00e9lectricit\u00e9 au bout de 5\u00a0minutes maximum. Appuyez ensuite sur <strong>Suivant</strong>.",
                bullet_turn_on_load: "Allumez une charge connue, comme un pistolet thermique, puis appuyez sur <b>Suivant</b>.",
                check_meters: "V\u00e9rifier<br>les compteurs",
                check_title: " V\u00e9rifier le compteur %{meter_type}",
                confirm_ct_routing: "Assurez-vous que l\u2019ensemble des charges r\u00e9sidentielles est achemin\u00e9 via les transformateurs de courant de consommation.",
                consumption_appears_good: "Le compteur de consommation semble avoir \u00e9t\u00e9 correctement configur\u00e9.",
                consumption_ct_direction: "V\u00e9rifiez que la pointe de la fl\u00e8che sur les transformateurs de courant de consommation est orient\u00e9e dans la direction du flux d\u2019\u00e9nergie, vers le centre de charge.",
                consumption_cts_installed: "Avez-vous install\u00e9 des transformateurs de courant de consommation\u00a0?",
                consumption_enable_prompt: "Appuyez sur <strong>Activer le compteur de consommation \u00e9lectr.</strong> pour terminer la configuration du compteur.",
                consumption_looks_good: "Les relev\u00e9s de consommation semblent corrects\u00a0!",
                consumption_neg: "Les relev\u00e9s de consommation sont n\u00e9gatifs. V\u00e9rifiez les \u00e9l\u00e9ments suivants, puis appuyez sur <b>R\u00e9essayer</b>.",
                consumption_not_enabled: "Compteur de consommation non activ\u00e9",
                consumption_phase_sel_net: "Le transformateur de courant de consommation inclut la production photovolta\u00efque.",
                consumption_phase_sel_total: "Le transformateur de courant de consommation n\u2019inclut pas la production photovolta\u00efque.",
                ct_bw_correct: "Assurez-vous que les c\u00e2bles bleu et blanc sont connect\u00e9s aux positions correctes dans le bornier.",
                desc: "Utilisez notre assistant \u00e9tape par \u00e9tape pour vous assurer que les compteurs internes sont c\u00e2bl\u00e9s et configur\u00e9s correctement.",
                desc_consumption: "Utilisez notre assistant \u00e9tape par \u00e9tape pour vous assurer que le compteur de consommation est c\u00e2bl\u00e9 et configur\u00e9 correctement.",
                desc_production: "Utilisez notre assistant \u00e9tape par \u00e9tape pour vous assurer que le compteur de production est c\u00e2bl\u00e9 et configur\u00e9 correctement.",
                done: "Termin\u00e9",
                enable_button: "Activer le compteur %{meterType}",
                enough_sun: "Assurez-vous que le rayonnement solaire atteignant les modules photovolta\u00efques est suffisant pour alimenter les micro-onduleurs.",
                exit_check: "\u00cates-vous s\u00fbr de vouloir sortir de la V\u00e9rification du compteur\u00a0?",
                exit_conf: {
                    desc: "\u00cates-vous s\u00fbr de vouloir quitter l\u2019assistant de configuration du compteur de production\u00a0? Vous devrez recommencer si vous voulez utiliser \u00e0 nouveau l\u2019assistant.",
                    neg_button: "Retour",
                    title: "Sortir de l\u2019assistant\u00a0?",
                },
                exit_wizard: "Sortir de l\u2019assistant",
                get_started: "D\u00e9marrage",
                load_didnt_increase: "La charge r\u00e9sidentielle totale n\u2019a pas augment\u00e9 comme pr\u00e9vu. V\u00e9rifiez les \u00e9l\u00e9ments suivants, puis appuyez sur <b>R\u00e9essayer</b>.",
                manual_prompt: "Configuration manuelle du compteur",
                most_common: "(Configuration la plus courante)",
                negative: "NON",
                phase_select_prompt: "S\u00e9lectionnez les phases mesur\u00e9es d\u2019apr\u00e8s la mani\u00e8re dont est c\u00e2bl\u00e9 l\u2019Envoy-S\u00a0: ",
                positive: "OUI",
                power_exporting: "Exportation en cours",
                power_importing: "Importation en cours",
                prod_enable_desc1: "Les relev\u00e9s de production sont proches de z\u00e9ro, comme pr\u00e9vu.",
                prod_enable_desc2: "Appuyez sur <strong>Activer le compteur de production \u00e9lectr.</strong> pour terminer la configuration du compteur.",
                prod_meter_enabled: "Le compteur de production est activ\u00e9.",
                prod_su1_pv_on: {
                    counting: {
                        one: "Assurez-vous que le circuit PV est allum\u00e9 et qu\u2019il produit de l\u2019\u00e9lectricit\u00e9 (p\u00e9riode de reconnexion termin\u00e9e).",
                        other: "Assurez-vous que les circuits PV sont allum\u00e9s et qu\u2019ils produisent de l\u2019\u00e9lectricit\u00e9 (p\u00e9riode de reconnexion termin\u00e9e).",
                    },
                },
                prod_su2_pv_off: "\u00c9TEIGNEZ les disjoncteurs, puis appuyez sur <b>Suivant</b>.",
                prod_ts_p4: {
                    desc: "Les relev\u00e9s de production sont n\u00e9gatifs. V\u00e9rifiez les \u00e9l\u00e9ments suivants, puis appuyez sur R\u00e9essayer.",
                    ts1: {
                        counting: {
                            one: "Assurez-vous que le circuit PV est allum\u00e9 et qu\u2019il produit de l\u2019\u00e9lectricit\u00e9 (p\u00e9riode de reconnexion termin\u00e9e).",
                            other: "Assurez-vous que les circuits PV sont allum\u00e9s et qu\u2019ils produisent de l\u2019\u00e9lectricit\u00e9 (p\u00e9riode de reconnexion termin\u00e9e).",
                        },
                    },
                    ts2: { counting: { one: "Assurez-vous que le circuit de la batterie Enphase est \u00c9TEINT.", other: "Assurez-vous que les circuits de la batterie Enphase sont \u00c9TEINTS." } },
                    ts3: {
                        counting: {
                            one: "V\u00e9rifiez que la pointe de la fl\u00e8che sur le transformateur de courant de production est orient\u00e9e dans la direction du flux d\u2019\u00e9nergie, vers le centre de charge.",
                            other: "V\u00e9rifiez que la pointe de la fl\u00e8che sur les transformateurs de courant de production est orient\u00e9e dans la direction du flux d\u2019\u00e9nergie, vers le centre de charge.",
                        },
                    },
                    ts5: {
                        counting: {
                            one: "Assurez-vous que les c\u00e2bles passant dans le transformateur de courant ne concernent que la production d\u2019\u00e9nergie photovolta\u00efque (et non pas une quelconque charge).",
                            other: "Assurez-vous que les c\u00e2bles passant dans les transformateurs de courant ne concernent que la production d\u2019\u00e9nergie photovolta\u00efque (et non pas une quelconque charge).",
                        },
                    },
                    ts6: "V\u00e9rifiez que les transformateurs de courant sont branch\u00e9s aux phases correctes par rapport \u00e0 la borne d\u2019alimentation Envoy.",
                },
                prod_ts_p5: {
                    desc: "Les relev\u00e9s montrent une production plus \u00e9lev\u00e9e qu\u2019elle ne devrait l\u2019\u00eatre. V\u00e9rifiez les \u00e9l\u00e9ments suivants, puis appuyez sur <b>R\u00e9essayer</b>.",
                    ts2: {
                        counting: {
                            one: "Assurez-vous que les c\u00e2bles passant dans le transformateur de courant ne concernent que la production d\u2019\u00e9nergie photovolta\u00efque (et non pas une quelconque charge).",
                            other: "Assurez-vous que les c\u00e2bles passant dans les transformateurs de courant ne concernent que la production d\u2019\u00e9nergie photovolta\u00efque (et non pas une quelconque charge). ",
                        },
                    },
                },
                production_not_enabled: "Compteur de production non activ\u00e9",
                pv_off: { counting: { one: "Assurez-vous que le circuit\u00a0PV est \u00c9TEINT.", other: "Assurez-vous que les circuits\u00a0PV sont \u00c9TEINTS." } },
                pv_reminder: "<b>Rappelez-vous d\u2019allumer le circuit PV.</b> Les micro-onduleurs mettront environ 5 minutes \u00e0 rapporter la production de courant.",
                readings_dont_match1:
                    "Nous ne sommes pas certains de la raison pour laquelle les relev\u00e9s ne correspondent pas \u00e0 ceux du compteur r\u00e9sidentiel du service public. Appuyez sur <b>R\u00e9essayer </b>pour changer le param\u00e8tre de configuration de l\u2019emplacement des transformateurs de courant de consommation, afin de voir si cela r\u00e9sout la situation.",
                readings_dont_match2:
                    "Si cela ne r\u00e9sout pas la situation, vous pouvez sortir de l\u2019assistant et utiliser l\u2019option <b>Configuration manuelle du compteur</b> \u00e0 la place. Nous vous conseillons de contacter l\u2019assistance Enphase avant de poursuivre.",
                readings_dont_match_post:
                    "Veuillez contacter l\u2019assistance Enphase pour obtenir de l\u2019aide et l\u2019informer que vous avez effectu\u00e9 la v\u00e9rification du compteur, mais que les relev\u00e9s ne correspondent toujours pas \u00e0 ceux du compteur du service public.",
                reset_timer: "R\u00e9initialiser la minuterie",
                setup_title: " Configurer le compteur %{meter_type}",
                start_timer: "D\u00e9marrer la minuterie",
                stop_timer: "Arr\u00eater la minuterie",
                sw_off_batt: { counting: { one: "\u00c9TEIGNEZ le circuit de la batterie Enphase.", other: "\u00c9TEIGNEZ les circuits de la batterie Enphase." } },
                sw_off_pv: "\u00c9TEIGNEZ les disjoncteurs du circuit\u00a0PV.",
                total_cons_not_reduced: "L\u2019allumage du circuit\u00a0PV n\u2019a pas r\u00e9duit la consommation totale. V\u00e9rifiez les \u00e9l\u00e9ments suivants, puis appuyez sur <b>R\u00e9essayer</b>.",
                total_load: "Charge r\u00e9sidentielle totale",
                trouble_c6_desc1: "Si vous avez suivi toutes les instructions \u00e0 l\u2019\u00e9cran et que les relev\u00e9s de consommation sont toujours n\u00e9gatifs, ",
                trouble_c8_desc1: "Si vous avez suivi toutes les instructions \u00e0 l\u2019\u00e9cran et que la consommation totale n\u2019est toujours pas r\u00e9duite lorsque vous activez le circuit PV, ",
                trouble_desc2: "Nous vous conseillons de contacter l\u2019assistance Enphase au <a href='tel:%{dial_num}'> %{disp_num}</a> avant de poursuivre.",
                trouble_install_guide: "Veuillez consulter le <strong>guide d\u2019installation Envoy Metered</strong>",
                trouble_manual_prompt: " ou sortir de l\u2019assistant et utiliser l\u2019option <strong>Configuration manuelle du compteur</strong> \u00e0 la place.",
                trouble_p0_5: {
                    desc: {
                        counting: {
                            one: "Vous avez indiqu\u00e9 que seule %{selected_phases} est mesur\u00e9e. Pourtant, un courant subsiste sur %{phaseStr}.",
                            other: "Vous avez indiqu\u00e9 que seules %{selected_phases} sont mesur\u00e9es. Pourtant, un courant subsiste sur %{phaseStr}.",
                        },
                    },
                    ts1: "V\u00e9rifiez le c\u00e2blage. Les phases sont-elles correctement c\u00e2bl\u00e9es\u00a0?",
                    ts_no_resp: "V\u00e9rifiez le c\u00e2blage, puis appuyez sur <b>R\u00e9essayer</b>.",
                    ts_yes_resp: "Modifiez la s\u00e9lection de phases mesur\u00e9es pour qu\u2019elle corresponde au c\u00e2blage, puis appuyez sur <b>R\u00e9essayer</b>.",
                },
                trouble_p0_desc1: "Si vous avez suivi toutes les instructions \u00e0 l\u2019\u00e9cran et qu\u2019un courant subsiste sur une phase inutilis\u00e9e, ",
                trouble_p4_desc1: "Si vous avez suivi toutes les instructions \u00e0 l\u2019\u00e9cran et que les relev\u00e9s de production sont toujours n\u00e9gatifs, ",
                trouble_p5_desc1: "Si vous avez suivi toutes les instructions \u00e0 l\u2019\u00e9cran et que les relev\u00e9s de production sont toujours plus \u00e9lev\u00e9s que pr\u00e9vu, ",
                trouble_p7_desc1: "Si vous avez suivi toutes les instructions \u00e0 l\u2019\u00e9cran et que la charge r\u00e9sidentielle n\u2019augmente toujours pas comme pr\u00e9vu, ",
                trouble_prompt: "Vous avez des difficult\u00e9s \u00e0 passer cette \u00e9tape\u00a0?",
                unable_to_see_meter:
                    "Si vous ne parvenez pas \u00e0 acc\u00e9der aux <strong>RELEV\u00c9S </strong>du compteur du service public ni \u00e0 les mesurer \u00e0 l\u2019aide d\u2019un appareil de mesure portatif, cliquez sur <strong>Continuer</strong>.",
            },
        },
        microinverters: {
            condition_clear: { description: "Cela enverra une commande pour supprimer le statut \u00ab\u00a0%{condition_flag}\u00a0\u00bb sur ce micro-onduleur.", title: "Supprimer la condition\u00a0?" },
            manage_options: {
                active: "Actif (%{count})",
                active_count: { counting: { one: "Actif (%{count})", other: "Actif (%{count})", zero: "Actif (%{count})" } },
                delete_btn: "Supprimer",
                deleted: "Supprim\u00e9 (%{count})",
                deleted_count: { counting: { one: "Supprim\u00e9 (%{count})", other: "Supprim\u00e9s (%{count})", zero: "Supprim\u00e9 (%{count})" } },
                restore_btn: "Restaurer",
            },
            nav: { all: "Tout", manage: "G\u00e9rer", status: "Etat" },
            no_inverters: "Il n\u2019y a aucun micro-onduleur.",
            no_inverters_search: "Aucun micro-onduleur trouv\u00e9 correspondant \u00e0 \u00ab\u00a0%{search_term}\u00a0\u00bb.",
            phase_labels: { "ph-a": "L1(A)", "ph-b": "L2(B)", "ph-c": "L3(C)", "ph-unk": "Aucune phase s\u00e9lectionn\u00e9e", "ph-updating": "Mise \u00e0 jour...", select_one: "S\u00e9lectionner une" },
            phase_prompt_label: "S\u00e9lectionnez une phase pour la batterie AC %{serial_num}",
            scan_close: "Fermer",
            scan_disabled: "La recherche de p\u00e9riph\u00e9riques est actuellement indisponible \u00e0 cause d\u2019une recherche en cours sur un autre appareil Envoy.",
            scan_inhibited:
                "Pour ajouter d\u2019autres micro-onduleurs \u00e0 cet Envoy, vous devez utiliser Installer Toolkit pour les mettre \u00e0 disposition ou contacter l\u2019assistance client\u00e8le Enphase pour r\u00e9activer la recherche de p\u00e9riph\u00e9riques.",
            scan_inprogress: "Recherche de p\u00e9riph\u00e9riques en cours",
            scan_settings: {
                advanced_options: "Autres options",
                device_total: "Cible du p\u00e9riph\u00e9rique",
                device_total_description: "Si vous saisissez une cible du p\u00e9riph\u00e9rique, Envoy arr\u00eate la recherche de p\u00e9riph\u00e9riques d\u00e8s que le nombre total de micro-onduleurs est atteint.",
                device_total_error_1: "Le total de p\u00e9riph\u00e9riques doit \u00eatre compris entre %{already_detected} (nombre de p\u00e9riph\u00e9riques d\u00e9j\u00e0 d\u00e9tect\u00e9s) et %{device_total_max}.",
                device_total_error_2: "Le nombre total de p\u00e9riph\u00e9riques doit \u00eatre sup\u00e9rieur \u00e0 %{already_detected} (nombre de p\u00e9riph\u00e9riques d\u00e9j\u00e0 d\u00e9tect\u00e9s).",
                hours: "heures",
                less_options: "Moins d\u2019options",
                minutes: "minutes",
                optional: "(facultatif)",
                priority_duration: "Dur\u00e9e de la priorit\u00e9",
                priority_duration_description: "Si vous saisissez une dur\u00e9e de priorit\u00e9, Envoy se consacre exclusivement \u00e0 la recherche de p\u00e9riph\u00e9riques pendant cette p\u00e9riode.",
                priority_duration_error: "La dur\u00e9e de la priorit\u00e9 ne peut pas \u00eatre sup\u00e9rieure \u00e0 celle du scan.",
                scan_duration: "Dur\u00e9e de la recherche",
                scan_duration_error: "La dur\u00e9e de la recherche doit \u00eatre comprise entre 1\u00a0minute et 8\u00a0heures.",
                scan_options: { min_120: "2\u00a0heures", min_15: "15\u00a0minutes", min_240: "4\u00a0heures", min_30: "30\u00a0minutes", min_480: "8\u00a0heures", min_60: "1\u00a0heure" },
                time_description: "hh:mm",
            },
            scan_start: "D\u00e9marrer",
            scan_stop: "Arr\u00eater",
            scan_suspended: "La recherche de p\u00e9riph\u00e9riques est actuellement indisponible \u00e0 cause d\u2019une mise \u00e0 niveau de micro-onduleur.",
            status_options: { comm: "Comm. (%{count})", comm_nocount: "Comm.", power: "Puissance (%{count})", power_nocount: "Puissance", profile: "Profil (%{count})", profile_nocount: "Profil" },
        },
        monitoring: {
            connected: "Connect\u00e9 \u00e0 Enlighten",
            high_bandwidth: "Standard",
            last_report: "Dernier rapport\u00a0:",
            low_bandwidth: "Bande passante faible",
            more_info: "Plus d\u2019infos",
            no_report: "Aucun rapport g\u00e9n\u00e9r\u00e9",
            not_connected: "Non connect\u00e9 \u00e0 Enlighten",
            report_setting: "Param\u00e8tre de rapport",
            report_setting_cellular_desc:
                "Cet Envoy est \u00e9quip\u00e9 d\u2019un modem cellulaire Enphase\u00a0; il envoie \u00e0 Enlighten des rapports de donn\u00e9es sur des intervalles de 15\u00a0minutes quatre fois par jour (bande passante faible).",
            report_setting_diagnostic: "Mode de diagnostic activ\u00e9\u00a0: %{minutes}\u00a0minutes restantes",
            report_setting_enable_diagnostic:
                "Vous pouvez activer le mode diagnostic pendant deux heures. En mode diagnostic, l\u2019Envoy envoie typiquement \u00e0 Enlighten des rapports de donn\u00e9es sur des intervalles de 5\u00a0minutes toutes les 5\u00a0minutes pendant les heures du jour.",
            report_setting_high_desc:
                "Cet Envoy est d\u00e9fini sur la g\u00e9n\u00e9ration de rapports standard\u00a0; il envoie \u00e0 Enlighten des rapports de donn\u00e9es toutes les 5\u00a0minutes pendant les heures du jour. Vous pouvez passer \u00e0 la g\u00e9n\u00e9ration de rapports \u00e0 bande passante faible\u00a0; il envoie alors \u00e0 Enlighten des rapports de donn\u00e9es sur des intervalles de 15\u00a0minutes quatre fois par jour.",
            report_setting_low_desc:
                "Cet Envoy est d\u00e9fini sur la g\u00e9n\u00e9ration de rapports \u00e0 bande passante faible\u00a0; il envoie \u00e0 Enlighten des rapports de donn\u00e9es sur des intervalles de 15\u00a0minutes quatre fois par jour. Vous pouvez passer \u00e0 la g\u00e9n\u00e9ration de rapports standard\u00a0; il envoie alors \u00e0 Enlighten des rapports de donn\u00e9es toutes les 5\u00a0minutes pendant les heures du jour.",
            report_setting_modal: {
                diagnostic_desc: "Confirmer l\u2019activation du mode diagnostic pendant deux heures.",
                high_desc: "Confirmer le passage au rapport standard.",
                low_desc: "Confirmer le passage au rapport en faible bande passante.",
                title: "Modification du param\u00e8tre de rapport",
            },
            report_setting_options: { diagnostic: "Activer le mode diagnostic", high: "Passer au rapport standard", low: "Passer \u00e0 la bande passante faible" },
            title: "Surveillance",
        },
        more: {
            about: {
                cellular_ip: "Adresse\u00a0IP cellulaire",
                cellular_mac_address: "Adresse Mac cellulaire",
                db_size: "Taille de la base de donn\u00e9es",
                db_size_stats: "%{db_size} (remplie \u00e0 %{percent}\u00a0%)",
                ethernet_ip: "Adresse IP Ethernet",
                ethernet_mac_address: "Adresse Mac Ethernet",
                is_nonvoy: "Cet Envoy est programm\u00e9 pour configurer les syst\u00e8mes non surveill\u00e9s.",
                part_number: "R\u00e9f\u00e9rence",
                serial_number: "Num\u00e9ro de s\u00e9rie",
                sw_build_date: "Date de version logicielle",
                sw_version: "Version logicielle",
                timezone: "Fuseau horaire actuel",
                title: "\u00c0 propos de cet Envoy",
                wifi_ip: "Adresse\u00a0IP Wi-Fi",
                wifi_mac_address: "Adresse Mac Wi-Fi",
            },
            datetime: { date: "Date", time: "Heure", timezone: "Fuseau horaire", title: "Date et heure", update_timezone: "Mettre \u00e0 jour le fuseau horaire" },
            events: { event_date_line: "%{date} (ID d\u2019\u00e9v\u00e9nement %{event_id})", no_events: "Aucun \u00e9v\u00e9nement.", title: "\u00c9v\u00e9nements" },
            support_connection: {
                close: "Fermer la connexion",
                description_close: "La connexion s\u00e9curis\u00e9e \u00e0 l\u2019assistance Enphase est ouverte.",
                description_open: "Cr\u00e9ez une connexion s\u00e9curis\u00e9e pour que l\u2019\u00e9quipe d\u2019assistance d\u2019Enphase puisse proc\u00e9der au d\u00e9pannage \u00e0 distance.",
                open: "Ouvrir la connexion",
                title: "Connexion \u00e0 l\u2019assistance Enphase",
            },
            system: { title: "Syst\u00e8me" },
        },
        network: {
            diagnostic_tools: {
                check_connectivity: "V\u00e9rifier la connectivit\u00e9 r\u00e9seau",
                check_network_route: "V\u00e9rifier le trajet sur le r\u00e9seau",
                gateway_ip: "Adresse\u00a0IP de la passerelle",
                ip_address: "Adresse IP",
                mac_address: "Adresse Mac",
                netmask: "Masque r\u00e9seau",
                network_connectivity: "V\u00e9rification de la connectivit\u00e9 r\u00e9seau",
                network_connectivity_desc: "Ex\u00e9cutez un ensemble de v\u00e9rifications de diagnostic r\u00e9seau sur l\u2019Envoy.",
                network_route: "V\u00e9rification du trajet r\u00e9seau",
                network_route_desc: "V\u00e9rifiez le chemin de l\u2019Envoy \u00e0 Internet pour toutes les interfaces r\u00e9seau disponibles.",
                ping: "Ping",
                ping_desc: "Saisissez une adresse\u00a0IP ou une\u00a0URL pour tester la connectivit\u00e9 de l\u2019Envoy \u00e0 votre routeur ou \u00e0 tout autre h\u00f4te r\u00e9seau.",
                ping_ip: "Ping sur l\u2019adresse",
                primary_dns: "Serveur DNS principal",
                results_title: "R\u00e9sultats",
                secondary_dns: "Serveur DNS secondaire",
                timestamp: "Derni\u00e8re v\u00e9rification",
                title: "Outils de diagnostic",
            },
            network_configuration: { active_network: "Actif", title: "Configuration du r\u00e9seau", types: { cellular: "Cellulaire", ethernet: "Ethernet", none: "Aucun", wifi: "Wi-Fi" } },
            network_connectivity_check: {
                connectivity_enlighten: "Connexion \u00e0 Enlighten",
                connectivity_enphase: "Connexion \u00e0 Enphase",
                enlighten_dns_lookup: "Recherche de DNS Enlighten",
                enphase_dns_lookup: "Recherche de DNS Enphase",
                gateway_ping: "Ping de passerelle",
                google_dns_lookup: "Recherche de DNS Google",
                google_ping: "Ping Google",
                primary_dns_ping: "Ping de DNS principal",
                primary_interface: "R\u00e9seau test\u00e9",
                result: { fail: "\u00c9chec", pass: "Bon" },
                secondary_dns_ping: "Ping de DNS secondaire",
                timestamp: "Derni\u00e8re v\u00e9rification",
                title: "R\u00e9sultats",
            },
            network_route_check: {
                destination: "Destination",
                flags: "Indicateurs",
                gateway: "Passerelle",
                genmask: "Masque r\u00e9seau de destination",
                metric: "M\u00e9trique",
                network: "R\u00e9seau",
                ref: "R\u00e9f",
                results_title: "R\u00e9sultats",
                timestamp: "Derni\u00e8re v\u00e9rification",
                use: "Utilisation",
            },
            title: "R\u00e9seau",
        },
        not_available: "Non disponible",
        nsr: {
            line_status_heading: "Lignes connect\u00e9es\u00a0:",
            line_status_help_text:
                "<ul><li>Au moins l\u2019une des lignes du relais\u00a0Q n\u2019est pas connect\u00e9e.</li><li>V\u00e9rifiez que le relais\u00a0Q est install\u00e9 correctement.</li><li>Appuyez sur le bouton de test pour r\u00e9essayer.</li><li>Si c\u2019est intentionnel, cela peut \u00eatre ignor\u00e9.</li></ul>",
            line_status_help_title: "Aide \u00e0 la connexion relais Q",
            lines: "Ligne %{num}\u00a0:",
            reason_strings: "raison inconnue;Erreur mat\u00e9rielle;Pression sur bouton;Commande forc\u00e9e depuis l\u2019Envoy;Erreur de tension sur ligne CA 1;Erreur de tension sur ligne CA 2;Erreur de tension sur ligne CA 3;Erreur de fr\u00e9quence sur ligne CA 1;Erreur CC sur le r\u00e9seau;Tension faible sur ligne CA 1;Tension \u00e9lev\u00e9e sur ligne CA 1;Fr\u00e9quence faible sur ligne CA 1;Fr\u00e9quence \u00e9lev\u00e9e sur ligne CA 1;Tension faible sur ligne CA 2;Tension \u00e9lev\u00e9e sur ligne CA 2;Tension faible sur ligne CA 3;Tension \u00e9lev\u00e9e sur ligne CA 3;CC basse sur le r\u00e9seau;CC haute sur le r\u00e9seau;Rocof;Moyenne CA sur ligne 1;Moyenne CA sur ligne 2;Moyenne CA sur ligne 3".split(
                ";"
            ),
            relay_heading: "Relais\u00a0:",
        },
        nsrs: {
            manage_options: {
                active: "Actif (%{count})",
                active_count: { counting: { one: "Actif (%{count})", other: "Actif (%{count})", zero: "Actif (%{count})" } },
                deleted: "Supprim\u00e9 (%{count})",
                deleted_count: { counting: { one: "Supprim\u00e9 (%{count})", other: "Supprim\u00e9 (%{count})", zero: "Supprim\u00e9 (%{count})" } },
            },
            nav: { all: "Tout", manage: "G\u00e9rer", status: "Etat" },
            no_inverters: "Aucun relais Q.",
            no_inverters_search: "Aucun relais Q trouv\u00e9 correspondant \u00e0 \u00ab\u00a0%{search_term}\u00a0\u00bb.",
            status_options: { comm_nocount: "Comm.", power_nocount: "En fonctionnement", profile_nocount: "Config." },
            title: "[FR] Relays Q",
        },
        overview: {
            ac_batteries: {
                communicating: "Communication",
                default_profile_set: "Profil r\u00e9seau install\u00e9 en usine",
                detected: "D\u00e9tect\u00e9e(s)",
                factory_installed: "Install\u00e9e en usine",
                factory_installed_config: "Configurations install\u00e9es en usine",
                not_set: "Non d\u00e9fini",
                producing_power: "En fonctionnement",
                profile_set: "configur\u00e9e",
                total: "Batteries\u00a0AC",
            },
            ac_batteries_counts: {
                communicating: {
                    counting: {
                        none: "<span class='value initial'></span>\u00a0<span class='descriptor'>en communication</span>",
                        one: "<span class='value'>%{count}</span>\u00a0<span class='descriptor'>en communication</span>",
                        other: "<span class='value'>%{count}</span>\u00a0<span class='descriptor'>en communication</span>",
                        zero: "<span class='value'>%{count}</span>\u00a0<span class='descriptor'>en communication</span>",
                    },
                },
                detected: {
                    counting: {
                        none: "<span class='value initial'></span>\u00a0<span class='descriptor'>d\u00e9tect\u00e9e(s)</span>",
                        one: "<span class='value'>%{count}</span>\u00a0<span class='descriptor'>d\u00e9tect\u00e9e(s)</span>",
                        other: "<span class='value'>%{count}</span>\u00a0<span class='descriptor'>d\u00e9tect\u00e9e(s)</span>",
                        zero: "<span class='value'>%{count}</span>\u00a0<span class='descriptor'>d\u00e9tect\u00e9e(s)</span>",
                    },
                },
                producing_power: {
                    counting: {
                        none: "<span class='value initial'></span>\u00a0<span class='descriptor'>en fonctionnement</span>",
                        one: "<span class='value'>%{count}</span>\u00a0<span class='descriptor'>en fonctionnement</span>",
                        other: "<span class='value'>%{count}</span>\u00a0<span class='descriptor'>en fonctionnement</span>",
                        zero: "<span class='value'>%{count}</span>\u00a0<span class='descriptor'>en fonctionnement</span>",
                    },
                },
                profile_set: {
                    counting: {
                        none: "<span class='value initial'></span>\u00a0<span class='descriptor'>configur\u00e9e(s)</span>",
                        one: "<span class='value'>%{count}</span>\u00a0<span class='descriptor'>configur\u00e9e(s)</span>",
                        other: "<span class='value'>%{count}</span>\u00a0<span class='descriptor'>configur\u00e9e(s)</span>",
                        zero: "<span class='value'>%{count}</span>\u00a0<span class='descriptor'>configur\u00e9e(s)</span>",
                    },
                },
                total: {
                    counting: {
                        one: "<span class='value'>%{count}</span>\u00a0<span class='descriptor'>batterie AC</span>",
                        other: "<span class='value'>%{count}</span>\u00a0<span class='descriptor'>batteries AC</span>",
                        zero: "<span class='value'>%{count}</span>\u00a0<span class='descriptor'>batteries AC</span>",
                    },
                },
            },
            ac_battery_state: {
                charging: "Chargement",
                discharging: "D\u00e9chargement",
                full: "Chargement complet",
                idle: "\u00c0 l\u2019arr\u00eat",
                soc_full: "%{operating_state} (\u00e9tat de la charge %{percent}%)",
                soc_percent: "\u00e9tat de la charge %{percentCharge}%",
                soc_state: "%{operating_state}",
            },
            alerts: "Alertes",
            consumption: "Compteur de consommation \u00e9lectrique",
            consumption_meter_label: "Consommation",
            current_consumption: "Consommation actuelle d\u2019\u00e9lectricit\u00e9",
            current_production: "Production actuelle d\u2019\u00e9lectricit\u00e9",
            devices: { detected: "D\u00e9tect\u00e9(s)" },
            encharge_batteries: {
                communicating: "[FR] Communicating",
                default_profile_set: "[FR] Factory-Installed Grid Profile",
                detected: "[FR] Detected",
                factory_installed: "[FR] Factory-Installed",
                factory_installed_config: "[FR] Factory-Installed Configurations",
                not_set: "[FR] Not Set",
                producing_power: "[FR] Operating",
                profile_set: "[FR] Configured",
                total: "[FR] AC Batteries",
            },
            enpowers: { communicating: "[FR] Communicating", default_profile_set: "[FR] Factory-Installed Grid Profile", detected: "[FR] Detected", profile_set: "[FR] Profile Set", total: "[FR] Enpower Devices" },
            enpowers_summary: { connected: { false: "[FR] Not Connected to Enpower", true: "[FR] Connected to Enpower" }, grid_status: { false: "[FR] OFF", title: "[FR] Grid Status", true: "[FR] ON" }, title: "[FR] Enpower" },
            includes_storage_label: "(comprend l\u2019activit\u00e9 de stockage)",
            inverter_production: "Production du micro-onduleur",
            inverters_update_status: { "in-progress": "Mise \u00e0 jour en cours du micro-onduleur. Cette t\u00e2che prend habituellement de 15 \u00e0 30 minutes." },
            ip_address: "Adresse IP",
            latest_power: "Puissance la plus r\u00e9cente",
            lifetime: "Cumul",
            lifetime_energy: "Cumul production",
            meter_production: "Compteur de production \u00e9lectrique",
            metering: "Mesure",
            microinverter_counts: {
                communicating: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>en communication</span>",
                        one: "<span class='value'>%{count}</span>\u00a0<span class='descriptor'>en communication</span>",
                        other: "<span class='value'>%{count}</span>\u00a0<span class='descriptor'>en communication</span>",
                        zero: "<span class='value'>%{count}</span>\u00a0<span class='descriptor'>en communication</span>",
                    },
                },
                detected: {
                    counting: {
                        none: "<span class='value initial'></span>\u00a0<span class='descriptor'>d\u00e9tect\u00e9(s)</span>",
                        one: "<span class='value'>%{count}</span>\u00a0<span class='descriptor'>d\u00e9tect\u00e9(s)</span>",
                        other: "<span class='value'>%{count}</span>\u00a0<span class='descriptor'>d\u00e9tect\u00e9(s)</span>",
                        zero: "<span class='value'>%{count}</span>\u00a0<span class='descriptor'>d\u00e9tect\u00e9(s)</span>",
                    },
                },
                producing_power: {
                    counting: {
                        none: "<span class='value initial'></span>\u00a0<span class='descriptor'>en train de produire de l\u2019\u00e9lectricit\u00e9</span>",
                        one: "<span class='value'>%{count}</span>\u00a0<span class='descriptor'>en train de produire de l\u2019\u00e9lectricit\u00e9</span>",
                        other: "<span class='value'>%{count}</span>\u00a0<span class='descriptor'>en train de produire de l\u2019\u00e9lectricit\u00e9</span>",
                        zero: "<span class='value'>%{count}</span>\u00a0<span class='descriptor'>en train de produire de l\u2019\u00e9lectricit\u00e9</span>",
                    },
                },
                profile_set: {
                    counting: {
                        none: "<span class='value initial'></span>\u00a0<span class='descriptor'>profil d\u00e9fini</span>",
                        one: "<span class='value'>%{count}</span>\u00a0<span class='descriptor'>profil d\u00e9fini</span>",
                        other: "<span class='value'>%{count}</span>\u00a0<span class='descriptor'>profil d\u00e9fini</span>",
                        zero: "<span class='value'>%{count}</span>\u00a0<span class='descriptor'>profil d\u00e9fini</span>",
                    },
                },
                total: {
                    counting: {
                        one: "<span class='value'>%{count}</span>\u00a0<span class='descriptor'>micro-onduleur</span>",
                        other: "<span class='value'>%{count}</span>\u00a0<span class='descriptor'>micro-onduleurs</span>",
                        zero: "<span class='value'>%{count}</span>\u00a0<span class='descriptor'>micro-onduleurs</span>",
                    },
                },
            },
            microinverters: {
                communicating: "Communication",
                default_profile_set: "Profil r\u00e9seau install\u00e9 en usine",
                detected: "D\u00e9tect\u00e9e(s)",
                producing_power: "Produisent de l\u2019\u00e9lectricit\u00e9",
                profile_set: "Profil d\u00e9fini",
                total: "Micro-onduleurs",
            },
            net_power: "Puissance nette",
            new_microinverter_counts: {
                communicating: {
                    counting_acb: { one: "en communication", other: "en communication", zero: "en communication" },
                    counting_encharge: { one: "[FR] Communicating", other: "[FR] Communicating", zero: "[FR] Communicating" },
                    counting_microinverters: { one: "en communication", other: "en communication", zero: "en communication" },
                    counting_nsr: { one: "en communication", other: "en communication", zero: "en communication" },
                },
                detected: {
                    counting_acb: { one: "D\u00e9tect\u00e9e(s)", other: "D\u00e9tect\u00e9e(s)", zero: "D\u00e9tect\u00e9e(s)" },
                    counting_encharge: { one: "[FR] Detected", other: "[FR] Detected", zero: "[FR] Detected" },
                    counting_microinverters: { one: "D\u00e9tect\u00e9e(s)", other: "D\u00e9tect\u00e9e(s)", zero: "D\u00e9tect\u00e9e(s)" },
                    counting_nsr: { one: "D\u00e9tect\u00e9e(s)", other: "D\u00e9tect\u00e9e(s)", zero: "D\u00e9tect\u00e9e(s)" },
                },
                producing_power: {
                    counting_acb: { one: "En fonctionnement", other: "En fonctionnement", zero: "En fonctionnement" },
                    counting_encharge: { one: "[FR] Operating", other: "[FR] Operating", zero: "[FR] Operating" },
                    counting_microinverters: { one: "Produisent de l\u2019\u00e9lectricit\u00e9", other: "Produisent de l\u2019\u00e9lectricit\u00e9", zero: "Produisent de l\u2019\u00e9lectricit\u00e9" },
                    counting_nsr: { one: "En fonctionnement", other: "En fonctionnement", zero: "En fonctionnement" },
                },
                profile_set: {
                    counting_acb: { one: "configur\u00e9e", other: "configur\u00e9e", zero: "configur\u00e9e" },
                    counting_encharge: { one: "[FR] Configured", other: "[FR] Configured", zero: "[FR] Configured" },
                    counting_microinverters: { one: "Profil d\u00e9fini", other: "Profil d\u00e9fini", zero: "Profil d\u00e9fini" },
                    counting_nsr: { one: "configur\u00e9e", other: "configur\u00e9e", zero: "configur\u00e9e" },
                },
                total: {
                    counting_acb: { one: "Batterie\u00a0AC", other: "Batteries\u00a0AC", zero: "Batteries\u00a0AC" },
                    counting_encharge: { one: "[FR] Encharge Battery", other: "[FR] Encharge Batteries", zero: "[FR] Encharge Batteries" },
                    counting_microinverters: { one: "Micro-onduleur", other: "Micro-onduleurs", zero: "Micro-onduleurs" },
                    counting_nsr: { one: "Relais Q", other: "Relais Q", zero: "Relais Q" },
                },
            },
            nsr: {
                detected_total_count: "%{detected_count} sur %{total_count}",
                profile_label: "Profil",
                profile_not_set: "Non configur\u00e9",
                profile_set: "configur\u00e9e",
                relay_state_closed: "Ferm\u00e9",
                relay_state_label: "\u00c9tat",
                relay_state_open: "Ouvert",
                section_title: "Relais Q",
            },
            power_exporting: "Exportation vers r\u00e9seau",
            power_importing: "Importation depuis le r\u00e9seau",
            production: "Production",
            production_meter_label: "Production",
            profile: "Profil",
            scan_modal: {
                description: "Aucun micro-onduleur n\u2019a \u00e9t\u00e9 d\u00e9tect\u00e9. Souhaitez-vous d\u00e9marrer une recherche de p\u00e9riph\u00e9riques\u00a0?",
                description_battery: "Aucune batterie n\u2019a \u00e9t\u00e9 d\u00e9tect\u00e9e. Souhaitez-vous d\u00e9marrer une recherche de p\u00e9riph\u00e9riques\u00a0?",
                description_both: "Aucun micro-onduleur ni batterie n\u2019ont \u00e9t\u00e9 d\u00e9tect\u00e9s. Souhaitez-vous d\u00e9marrer une recherche de p\u00e9riph\u00e9riques\u00a0?",
                description_nsr: "Aucun relais Q n'a \u00e9t\u00e9 d\u00e9tect\u00e9. Souhaitez-vous d\u00e9marrer une recherche de p\u00e9riph\u00e9riques\u00a0?",
                scan_timeout_description:
                    "<p>Seuls %{detected_count}\u00a0micro-onduleurs sur %{target_count} ont \u00e9t\u00e9 d\u00e9tect\u00e9s.</p><p>Souhaitez-vous red\u00e9marrer la recherche de p\u00e9riph\u00e9riques pour d\u00e9couvrir le(s) micro-onduleur(s) restant(s) ou <a href='#' class='open-target-count'>modifier le nombre de micro-onduleurs attendu</a>\u00a0?</p>",
                scan_timeout_description_battery: "<p>Seules %{detected_count}\u00a0batteries sur %{target_count} ont \u00e9t\u00e9 d\u00e9tect\u00e9es.",
                scan_timeout_description_battery_second: {
                    one: "Souhaitez-vous red\u00e9marrer la recherche de p\u00e9riph\u00e9riques pour d\u00e9couvrir la batterie restante ou <a href='#' class='open-target-count'>modifier le nombre de batteries attendues</a>\u00a0?</p>",
                    other:
                        "Souhaitez-vous red\u00e9marrer la recherche de p\u00e9riph\u00e9riques pour d\u00e9couvrir les batteries restantes ou <a href='#' class='open-target-count'>modifier le nombre de batteries attendues</a>\u00a0?</p>",
                },
                scan_timeout_description_both:
                    "<p>Seuls %{detected_count_micro}\u00a0micro-onduleurs sur %{target_count_micro} et %{detected_count_battery}\u00a0batteries sur %{target_count_battery} ont \u00e9t\u00e9 d\u00e9tect\u00e9s.</p><p>Souhaitez-vous red\u00e9marrer la recherche de p\u00e9riph\u00e9riques pour d\u00e9couvrir les p\u00e9riph\u00e9riques restants ou <a href='#' class='open-target-count'>modifier le nombre de p\u00e9riph\u00e9riques attendus</a>\u00a0?</p>",
                scan_timeout_description_micro: "<p>Seuls %{detected_count}\u00a0micro-onduleurs sur %{target_count} ont \u00e9t\u00e9 d\u00e9tect\u00e9s.",
                scan_timeout_description_micro_second: {
                    one:
                        "Souhaitez-vous red\u00e9marrer la recherche de p\u00e9riph\u00e9riques pour d\u00e9couvrir le micro-onduleur restant ou <a href='#' class='open-target-count'>modifier le nombre de micro-onduleurs attendus</a>\u00a0?</p>",
                    other:
                        "Souhaitez-vous red\u00e9marrer la recherche de p\u00e9riph\u00e9riques pour d\u00e9couvrir les micro-onduleurs restants ou <a href='#' class='open-target-count'>modifier le nombre de micro-onduleurs attendus</a>\u00a0?</p>",
                },
                scan_timeout_title: "Red\u00e9marrer la recherche de p\u00e9riph\u00e9riques ?",
                title: "D\u00e9marrer la recherche de p\u00e9riph\u00e9riques\u00a0?",
            },
            scan_state: { active: "Recherche activ\u00e9e", inactive: "Recherche inactive", scan_inhibited: "Recherche interdite" },
            set_expected: { error: "La valeur doit \u00eatre un nombre compris entre 1 et 600.", label: "Veuillez saisir le nombre de micro-onduleurs qui enverront des rapports \u00e0 cet Envoy.", prompt: "# Micro-onduleurs" },
            set_expected_acb: { error: "La valeur doit \u00eatre un nombre compris entre 0 et 39.", label: "Veuillez saisir le nombre de batteries\u00a0AC qui enverront des rapports \u00e0 cet Envoy.", prompt: "# Batteries AC" },
            set_expected_nsr: { error: "La valeur doit \u00eatre un nombre compris entre 0 et 3.", label: "Veuillez saisir le nombre de Q-Relais qui enverront des rapports \u00e0 cet Envoy.", prompt: "# Q-Relais" },
            software_version: "Version logicielle",
            stat_title: "Puissance et \u00e9nergie",
            storage: "Batterie AC",
            tariff_rate_structure: "Structure du tarif/taux",
        },
        pending: "(en attente...)",
        power: {
            charging: "Chargement",
            description:
                "Les micro-onduleurs g\u00e9n\u00e9reront de la puissance tant que la lumi\u00e8re du soleil sera suffisante et que le r\u00e9seau sera dans les plages de tension et de fr\u00e9quence autoris\u00e9es (comme sp\u00e9cifi\u00e9 par les r\u00e9glementations locales).",
            discharging: "D\u00e9chargement",
            idle: "\u00c0 l\u2019arr\u00eat",
            last_report: "Dernier rapport\u00a0:",
            not_operating: "\u00c0 l\u2019arr\u00eat",
            not_producing: "Hors production",
            operating: "En fonctionnement",
            producing: "Produisent de l\u2019\u00e9lectricit\u00e9",
            title: "Micro-onduleurs produisent de l\u2019\u00e9lectricit\u00e9",
        },
        profiles: {
            ac_batteries: {
                configuration_label: "Configuration",
                false: "Non",
                no_profile_description: "Avant que les batteries puissent commencer \u00e0 fonctionner, vous devez renseigner les informations suivantes pour les configurer.",
                no_profile_warning: "Le profil r\u00e9seau que vous s\u00e9lectionnez ici sera \u00e9galement appliqu\u00e9 aux micro-onduleurs install\u00e9s pour ce syst\u00e8me.",
                profile_complete: "Configuration termin\u00e9e",
                profile_incomplete: "Configuration incompl\u00e8te",
                profile_propagating: "Configuration de batteries",
                true: "Oui",
            },
            apply: "Appliquer le profil r\u00e9seau",
            config_batteries: "Configurer les batteries",
            country_label: "Sp\u00e9cifications r\u00e9glementaires propres au pays",
            encharge_batteries: {
                configuration_label: "[FR] Configuration",
                no_profile_description: "[FR] You must provide the following information to configure the batteries before they will begin to operate.",
                no_profile_warning: "[FR] The grid profile you select here will also be applied to the Enpower, Microinverters, and AC Batteries installed with this system.",
                profile_complete: "[FR] Configuration Complete",
                profile_incomplete: "[FR] Configuration Incomplete",
                profile_propagating: "[FR] Configuring Batteries",
            },
            enpowers: {
                no_profile_description: "[FR] You must provide the following information to configure the enpower before it will begin to operate.",
                no_profile_warning: "[FR] The grid profile you select here will also be applied to the Microinverters, AC Batteries and Encharges installed with this system.",
                profile_complete: "[FR] Configuration Complete",
                profile_incomplete: "[FR] Configuration Incomplete",
                profile_propagating: "[FR] Configuring Enpower",
            },
            eu_no_profile_description: "Vous devez s\u00e9lectionner un profil r\u00e9seau propre \u00e0 l\u2019emplacement pour que les micro-onduleurs commencent \u00e0 produire de l\u2019\u00e9lectricit\u00e9.",
            eu_no_profile_label: "Aucun profil",
            eu_no_profile_vogel_description: "Vous devez s\u00e9lectionner un profil r\u00e9seau propre \u00e0 l\u2019emplacement.",
            microinverters: {
                configuration_label: "Configuration",
                no_profile_warning: "Le profil r\u00e9seau que vous s\u00e9lectionnez ici sera \u00e9galement appliqu\u00e9 aux batteries AC install\u00e9es pour ce syst\u00e8me.",
                profile_complete: "Propagation termin\u00e9e",
                profile_incomplete: "Propagation incompl\u00e8te",
                profile_propagating: "Propagation du profil",
            },
            na_no_profile_description: "Les micro-onduleurs utilisent les r\u00e9glages du profil r\u00e9seau install\u00e9s en usine. Vous pouvez s\u00e9lectionner un profil r\u00e9seau propre \u00e0 l\u2019emplacement ci-dessous.",
            na_no_profile_label: "Param\u00e8tres install\u00e9s en usine",
            no_profile_warning: "Le profil r\u00e9seau que vous s\u00e9lectionnez ici sera \u00e9galement appliqu\u00e9 aux batteries AC install\u00e9es pour ce syst\u00e8me.",
            no_profiles:
                "Aucun profil disponible. Vous devez soit connecter cet Envoy \u00e0 Internet et faire la s\u00e9lection via Enlighten, soit utiliser Installer Toolkit pour t\u00e9l\u00e9charger un package de profil et le t\u00e9l\u00e9charger sur cet Envoy.",
            no_profiles_info:
                "Si votre installation se situe dans une zone qui n\u00e9cessite des param\u00e8tres de profil de r\u00e9seau sp\u00e9cifiques, Vous devez soit connecter cet Envoy \u00e0 Internet et faire la s\u00e9lection via Enlighten, soit utiliser Installer Toolkit pour t\u00e9l\u00e9charger un package de profil et le t\u00e9l\u00e9charger sur cet Envoy.",
            nsrs: {
                configuration_label: "Configuration",
                no_profile_warning: "Le profil r\u00e9seau que vous s\u00e9lectionnez ici sera \u00e9galement appliqu\u00e9 aux batteries AC install\u00e9es pour ce syst\u00e8me.",
                profile_complete: "Propagation termin\u00e9e",
                profile_incomplete: "Propagation incompl\u00e8te",
                profile_propagating: "Propagation du profil",
            },
            profile_complete: "Propagation termin\u00e9e",
            profile_incomplete: "Propagation incompl\u00e8te",
            profile_label: "Profil r\u00e9seau",
            profile_propagating: "Propagation du profil",
            title: "Profil r\u00e9seau",
            tpm_state: { 0: "En attente", 1: "En propagation", 2: "Profil d\u00e9fini", 3: "Non r\u00e9glable", 4: "\u00c9chec", 5: "Mise \u00e0 jour", 6: "ALT-V/F" },
        },
        public_nav: {
            change_password: "Modifier le mot de passe",
            copyright_html: "&copy;2008-%{current_year} Enphase Energy, Inc. Tous droits r\u00e9serv\u00e9s.",
            enphase: "Enphase Energy",
            installer_login: "Connexion de l\u2019installateur",
            language: "Langue",
            privacy: "Confidentialit\u00e9",
            settings: "Param\u00e8tres",
            terms: "Clauses",
        },
        select2: {
            format_matches: {
                counting: {
                    one: "Un r\u00e9sultat est disponible, appuyez sur la touche Entr\u00e9e pour le s\u00e9lectionner.",
                    other: "%{count}\u00a0r\u00e9sultats sont disponibles, utilisez les fl\u00e8ches vers le haut et vers le bas pour naviguer entre eux.",
                },
            },
            input_too_long: { counting: { one: "Supprimez %{count}\u00a0caract\u00e8re", other: "Supprimez %{count}\u00a0caract\u00e8res" } },
            input_too_short: "Saisissez au moins %{count}\u00a0caract\u00e8res",
            loading_more: "Chargement de plus de r\u00e9sultats en cours...",
            no_matches: "Aucun r\u00e9sultat trouv\u00e9 pour %{term}",
            no_results: "Aucun r\u00e9sultat trouv\u00e9",
            searching: "Recherche...",
            selection_too_big: { counting: { one: "Vous ne pouvez s\u00e9lectionner que %{count}\u00a0\u00e9l\u00e9ment.", other: "Vous ne pouvez s\u00e9lectionner que %{count}\u00a0\u00e9l\u00e9ments." } },
        },
        serial_number: "Num\u00e9ro de s\u00e9rie",
        system: {
            power_control: {
                disabled_desc: "Production d\u2019\u00e9lectricit\u00e9 d\u00e9sactiv\u00e9e",
                enabled_desc: "Production d\u2019\u00e9lectricit\u00e9 activ\u00e9e",
                modal: {
                    desc_set_off: "La production d\u2019\u00e9lectricit\u00e9 du syst\u00e8me sera <strong>d\u00e9sactiv\u00e9e</strong>.",
                    desc_set_on: "La production d\u2019\u00e9lectricit\u00e9 du syst\u00e8me sera <strong>activ\u00e9e</strong>.",
                    title: "Contr\u00f4le de la puissance du syst\u00e8me",
                    verify: "\u00cates-vous s\u00fbr de vouloir continuer\u00a0?",
                },
            },
        },
        tariff: {
            add_peak: "Ajouter pic %{num}",
            add_tier: "Ajouter niveau %{num}",
            base_rate_label: "Tarif de base",
            baseline: "Point de comparaison",
            charge_at_night: "Charger les batteries \u00e0 partir du r\u00e9seau la nuit",
            chg_at_night_desc: "Activez cette option pour que les batteries se chargent \u00e0 partir du r\u00e9seau pendant la nuit.",
            config_details: "D\u00e9tails de la configuration",
            day_names: ["Jour de semaine", "Week-end"],
            greater_than: "Sup\u00e9rieur \u00e0",
            hour_connector: "vers",
            month_connector: "via",
            not_set: "Non d\u00e9fini",
            off_peak_label: "Heures creuses",
            peak_hours_label: "%{num} heures pleines",
            peak_label: "Pic %{num}",
            peak_rate_label: "Tarif de pointe %{num}",
            peak_start_time: "Heure de d\u00e9but de cr\u00eate\u00a0:",
            per_day: "par jour",
            per_month: "par mois",
            percent_of_baseline: "% du point de comparaison",
            remove: "Supprimer",
            seasonal_rate_desc: "Activez cette option si le tarif varie d\u2019une saison \u00e0 une autre.",
            seasonal_select_label: "Le tarif varie suivant les saisons",
            select_type: "S\u00e9lectionnez le type",
            single_rate: "Taux unique",
            summer_rate_label: "Et\u00e9",
            tariff_rate_title: "Structure du tarif/taux",
            tariff_type_warning:
                "Pour un tarif/une structure de tarifs en fonction du temps d\u2019utilisation, vous devez au moins fournir un tarif heures pleines. En l\u2019absence de tarif de pointe, s\u00e9lectionnez le tarif unique plut\u00f4t que le temps d\u2019utilisation.",
            tier: "Niveau %{num}",
            tiered: "Progressif",
            time_of_use: "Heure d\u2019utilisation",
            unit_label: "kWh",
            up_to: "Jusqu\u2019\u00e0",
            weekday_add_peak: "Ajouter pic %{num} de jour de semaine",
            weekday_base_rate_label: "Tarif de base de jour de semaine",
            weekday_off_peak_rate_label: "Tarif heures creuses de jour de semaine",
            weekday_peak_hours_label: "%{num} heures pleines de jour de semaine",
            weekday_peak_rate_label: "Tarif de pointe %{num} de jour de semaine",
            weekdays_label: "Jour de semaine",
            weekdays_rate_label: "Jour de semaine",
            weekend_add_peak: "Ajouter pic %{num} de week-end",
            weekend_base_rate_label: "Tarif de base de weekend",
            weekend_label: "Week-end",
            weekend_off_peak_rate_label: "Tarif heures creuses de weekend",
            weekend_peak_hours_label: "%{num} heures pleines de weekend",
            weekend_peak_rate_label: "Tarif de pointe %{num} de weekend",
            weekend_rate_desc: "Activez cette option si le tarif varie pour les jours de semaine et le week-end.",
            weekend_select_label: "Le tarif varie entre les jours de semaine et le weekend",
            winter_months_desc: "Pour d\u00e9finir l\u2019option Hiver, s\u00e9lectionnez d\u2019abord les mois d\u2019\u00e9t\u00e9 ci-dessus.",
            winter_rate_label: "Hiver",
            zero_not_allowed: "Z\u00e9ro n\u2019est pas une valeur valide",
        },
        wifi: {
            ap_mode_config: {
                confirm_switch_modal: {
                    description: "Cela peut interrompre les communications avec l\u2019Envoy et n\u00e9cessiter que vous vous reconnectiez.",
                    title_false: "D\u00e9sactiver le mode\u00a0AP\u00a0?",
                    title_true: "Activer le mode\u00a0AP\u00a0?",
                },
                description_disabled:
                    "Activez le mode\u00a0AP pour permettre \u00e0 cet Envoy de fonctionner comme un point d\u2019acc\u00e8s (AP) sans fil. Cela permettra aux p\u00e9riph\u00e9riques sans fil \u00e0 proximit\u00e9 de se connecter \u00e0 l\u2019Envoy.",
                description_enabled: "Cet Envoy fonctionne actuellement comme un point d\u2019acc\u00e8s (AP) sans fil.",
                disable: "D\u00e9sactiver le mode\u00a0AP",
                enable: "Activer le mode\u00a0AP",
                time_remaining: {
                    one: "Dur\u00e9e restante\u00a0: %{count}\u00a0heure %{minutes}\u00a0minutes",
                    other: "Dur\u00e9e restante\u00a0: %{count}\u00a0heures %{minutes}\u00a0minutes",
                    zero: "Dur\u00e9e restante\u00a0: %{count}\u00a0heures %{minutes}\u00a0minutes",
                },
                title_disabled: "Mode\u00a0AP d\u00e9sactiv\u00e9",
                title_enabled: "Mode\u00a0AP activ\u00e9",
            },
            available_networks: "R\u00e9seaux disponibles",
            connect: {
                confirm_connect: "Confirmer le r\u00e9seau",
                connect_to_site: "Se connecter \u00e0 %{site_name}\u00a0?",
                connect_warning: "Remarque\u00a0: Cela peut interrompre les communications avec l\u2019Envoy et n\u00e9cessiter que vous vous reconnectiez.",
                connection_failure_explanation: "Impossible de se connecter au r\u00e9seau %{site_name}.",
                wait_join: "Veuillez patienter pendant que l\u2019Envoy se connecte \u00e0 %{site_name}...",
            },
            connect_incomplete: {
                description: "La confirmation de la connexion \u00e0 %{site_name} prend plus de temps que pr\u00e9vu. Si la connexion au r\u00e9seau a \u00e9chou\u00e9, veuillez essayer \u00e0 nouveau.",
                title: "D\u00e9sol\u00e9...",
            },
            connect_success: {
                description:
                    "<p>L\u2019Envoy a \u00e9tabli la connexion avec %{site_name}.</p><p><a href='#' class='open-overview'>Revenir \u00e0 l\u2019aper\u00e7u.</a></p><p>Remarque\u00a0:</p><p> la mise \u00e0 jour de l\u2019\u00e9tat de la connexion \u00e0 Enlighten peut prendre jusqu\u2019\u00e0 une minute.</p>",
                title: "Connexion \u00e9tablie",
            },
            connection_lost: "Ce p\u00e9riph\u00e9rique a perdu la connexion \u00e0 l\u2019Envoy.",
            connection_status: { attempting_to_connect: "Tentative de connexion...", connecting: "Connexion...", connection_lost: "Connexion perdue", failed: "Echec de la connexion", not_connected: "Non connect\u00e9(e)" },
            country_config: {
                description: "S\u00e9lectionner votre pays (code ISO 3166-1 alpha-2) pour optimiser la puissance du signal Wi-Fi conform\u00e9ment aux exigences de votre agence r\u00e9glementaire nationale.",
                optional: "(facultatif)",
                select_prompt: "S\u00e9lectionner un pays",
                title: "Pays",
                update: "Mettre \u00e0 jour le pays",
            },
            current_connection: "Connect\u00e9 au r\u00e9seau <span class='network_name'>%{network_name}</span>",
            enter_password: "Saisissez le mot de passe pour %{site_name}.",
            forget: {
                forget_network_header: "Oublier le r\u00e9seau Wi-Fi \u00ab\u00a0%{network_name}\u00a0\u00bb\u00a0?",
                forget_warning: "Remarque\u00a0: Cela peut interrompre les communications avec l\u2019Envoy et n\u00e9cessiter que vous vous reconnectiez.",
                ok_to_forget: "Cet Envoy n\u2019utilisera plus ce r\u00e9seau pour se connecter \u00e0 Enlighten.",
                wait_forget: "Veuillez patienter pendant que l\u2019Envoy oublie ce r\u00e9seau...",
            },
            forget_failed: { description: "La tentative d\u2019oubli du r\u00e9seau Wi-Fi a \u00e9chou\u00e9. Si le probl\u00e8me persiste, contactez le support client.", title: "D\u00e9sol\u00e9..." },
            forget_incomplete: {
                description:
                    "L\u2019oubli du r\u00e9seau Wi-Fi prend plus longtemps que pr\u00e9vu. Pour cette raison, il est peu probable que votre Envoy puisse encore communiquer avec cette application. Veuillez v\u00e9rifier les param\u00e8tres r\u00e9seau de votre p\u00e9riph\u00e9rique, puis reconnectez-le \u00e0 l\u2019Envoy.",
                title: "D\u00e9sol\u00e9...",
            },
            gateway_ip: "Adresse\u00a0IP de la passerelle\u00a0: ",
            ip_address: "Adresse\u00a0IP\u00a0: ",
            join_another_network: { button: "S\u00e9lectionner un autre r\u00e9seau", title: "S\u00e9lectionner un autre r\u00e9seau" },
            join_network: { button: "Afficher les r\u00e9seaux", title: "S\u00e9lectionner un r\u00e9seau" },
            network_changed_explanation:
                "La connexion r\u00e9seau de votre p\u00e9riph\u00e9rique a \u00e9t\u00e9 modifi\u00e9e. Pour cette raison, il est peu probable que votre Envoy puisse encore communiquer avec cette application. Veuillez v\u00e9rifier les param\u00e8tres r\u00e9seau de votre p\u00e9riph\u00e9rique, puis reconnectez-le \u00e0 l\u2019Envoy.",
            network_changed_title: "Connexion r\u00e9seau modifi\u00e9e",
            no_networks_found: "Aucun r\u00e9seau trouv\u00e9",
            not_configured_prompt: "S\u00e9lectionnez un r\u00e9seau sans fil que cet Envoy utilisera pour se connecter \u00e0 Enlighten.",
            other_network: {
                confirm_switch_modal: { description: "Cela peut interrompre les communications avec l\u2019Envoy et n\u00e9cessiter que vous vous reconnectiez.", title: "Se connecter \u00e0 un autre r\u00e9seau\u00a0?" },
                connect: "Se connecter",
                description: "Se connecter \u00e0 un point d\u2019acc\u00e8s qui n\u2019est pas configur\u00e9 pour diffuser son ESSID.",
                name: "Nom (ESSID)",
                password: "Mot de passe",
                security: "S\u00e9curit\u00e9",
                security_mode: { None: "Aucun", WEP: "WEP", "WPA-PSK": "Personnel WPA", "WPA2-PSK": "Personnel WPA2" },
                title: "Connecter un autre r\u00e9seau",
                wpa_algorithm: "Algorithme WPA",
                wpa_algorithm_type: { CCMP: "CCMP", None: "Aucun", TKIP: "TKIP", "TKIP+CCMP": "TKIP + CCMP" },
            },
            page_title: "Configuration Wi-Fi",
            password_required: "Mot de passe requis",
            please_wait: "Veuillez patienter",
            title: "R\u00e9seau Wi-Fi",
            unsupported_site: "R\u00e9seau non pris en charge",
            unsupported_site_explanation: "Ce r\u00e9seau utilise une m\u00e9thode de s\u00e9curisation qui n\u2019est pas prise en charge par l\u2019Envoy.",
            wifi: "Wi-Fi",
            wifi_hardware_missing: "Mat\u00e9riel Wi-Fi introuvable",
            wifi_waiting_note: "Ce processus peut prendre jusqu\u2019\u00e0 3\u00a0minutes et vous pourriez avoir \u00e0 vous reconnecter \u00e0 l\u2019Envoy une fois termin\u00e9.",
        },
        wireless_connection: {
            connected: "[FR] Connected",
            last_report: "[FR] Last Report:",
            not_connected: "[FR] Not Connected",
            signal_strength: "[FR] Signal Strength:",
            subghz: "[FR] Sub GHz",
            title: "[FR] Wireless Connection Links",
            zigbee_2_4: "[FR] 2.4 GHz",
        },
    },
    lwui: {
        admin: {
            cross_domain_traffic: { status_msgs: { cross_domain_traffic: "Trafic interdomaines annonc\u00e9", no_cross_domain_traffic: "Pas de trafic interdomaines annonc\u00e9", updated: "Mis \u00e0 jour" } },
            network_connectivity: {
                error_msgs: {
                    bad_device_ip: "Adresse IP d\u2019\u00e9l\u00e9ment et/ou masque r\u00e9seau incorrect.",
                    bad_gateway_address: "Adresse\u00a0IP de la passerelle incorrecte.",
                    gateway_subnet: "L\u2019adresse IP de la passerelle n\u2019est pas comprise dans le sous-r\u00e9seau %{subnet}",
                    invalid_primary_dns: "L\u2019adresse DNS principale n\u2019est pas une adresse IP correcte.",
                    invalid_secondary_dns: "L\u2019adresse DNS secondaire n\u2019est pas une adresse IP correcte.",
                },
            },
            security_admin: {
                status_msg: {
                    new_confirm_password_mismatch: "Le nouveau mot de passe et le mot de passe de confirmation sont diff\u00e9rents",
                    old_password_mismatch: "Ancien mot de passe incorrect",
                    password_file_missing: "Fichier(s) de mot de passe administrateur manquant(s)",
                    password_update_failure: "La mise \u00e0 jour du mot de passe a \u00e9chou\u00e9",
                    password_update_failure_error: "Erreur\u00a0: La modification du mot de passe a \u00e9chou\u00e9",
                    password_update_successful: "La mise \u00e0 jour du mot de passe a r\u00e9ussi",
                },
            },
            wireless_connectivity: {
                advanced_settings: {
                    button_apply: "Appliquer",
                    regulatory_domain: "Code du pays (ISO\u00a03166-1 Alpha-2)",
                    regulatory_legend:
                        "S\u00e9lectionnez votre pays dans cette liste.  Cela d\u00e9finit la puissance de transmission et les fr\u00e9quences radio autoris\u00e9es conform\u00e9ment aux exigences de votre agence r\u00e9glementaire nationale.",
                },
                ap_mode: {
                    active: "actif",
                    inactive: "inactif",
                    name: "Nom\u00a0AP\u00a0:",
                    start: "D\u00e9marrer le mode\u00a0AP",
                    status: "Statut du mode\u00a0AP\u00a0:",
                    stop: "Arr\u00eater le mode\u00a0AP",
                    timeout: "minutes avant la temporisation\u00a0AP\u00a0:",
                },
                busy_joining: "Tentative de connexion au r\u00e9seau",
                busy_scanning: "Recherche de r\u00e9seaux Wi-Fi",
                busy_testing: "Test de la connexion",
                connection_test: { failed: "Le test de la connexion a \u00e9chou\u00e9.  V\u00e9rifiez vos param\u00e8tres.", successful: "Le test de la connexion a r\u00e9ussi.  Vous pouvez rejoindre le r\u00e9seau." },
                current_settings: {
                    dhcp_waiting: "Demande de l\u2019adresse DHCP du r\u00e9seau Wi-Fi",
                    forget_network: "Oubliez ce r\u00e9seau",
                    label_gateway_ip: "Adresse\u00a0IP de la passerelle",
                    link_status: "Etat",
                    no_config: "Aucune connexion Wi-Fi n\u2019est configur\u00e9e",
                    no_device: "Aucun p\u00e9riph\u00e9rique Wi-Fi d\u00e9tect\u00e9",
                    status_connected: "Connect\u00e9",
                    status_connecting: "\u00c9tablissement de la connexion",
                    status_stopped: "Wi-Fi arr\u00eat\u00e9e",
                    unavailable: "indisponible",
                    verified_config: "R\u00e9seau Wi-Fi v\u00e9rifi\u00e9",
                },
                device_information: {
                    device: "P\u00e9riph\u00e9rique",
                    driver_name: "Nom du pilote",
                    hw_version: "Version mat\u00e9rielle",
                    mac_address: "Adresse MAC",
                    manufacturer: "Fabricant",
                    model: "Mod\u00e8le",
                    usb_slot_num: "N\u00b0 d\u2019emplacement USB",
                    usb_spec_version: "Version de la sp\u00e9cification USB",
                    vendor: "Fournisseur",
                },
                forget_msg: "Cette action va supprimer la configuration sans fil actuelle et va couper la connexion.  Si vous \u00eates connect\u00e9 sans fil, votre connexion \u00e0 l\u2019Envoy sera perdue.",
                legend_advanced_settings: "Param\u00e8tres avanc\u00e9s",
                legend_ap_mode: "Mode Envoy\u00a0AP",
                legend_current_settings: "Param\u00e8tres Wi-Fi actuels",
                legend_device_information: "Informations sur le p\u00e9riph\u00e9rique",
                legend_manual_configuration: "Configuration manuelle",
                legend_site_survey: "R\u00e9seaux Wi-Fi disponibles",
                manual_configuration: {
                    algorithm: "Algorithme WPA",
                    button_clear: "Vider le formulaire",
                    button_connect: "Rejoindre le r\u00e9seau",
                    button_test: "Tester la connexion",
                    channel: "Canal sans fil",
                    essid_length: "L\u2019ESSID doit comporter entre 1\u00a0et\u00a032 caract\u00e8res",
                    info_msg: "Les param\u00e8tres suivants ne sont n\u00e9cessaires que pour se connecter avec un point d\u2019acc\u00e8s qui n\u2019est pas configur\u00e9 pour diffuser son ESSID.",
                    mhz: "MHz",
                    network_name: "Nom du r\u00e9seau sans fil (ESSID)",
                    password: "Mot de passe/PSK",
                    password_unneeded: "Un mot de passe n\u2019est pas n\u00e9cessaire pour un r\u00e9seau ouvert",
                    password_wep: "Les cl\u00e9s WEP doivent comporter 10, 26 ou 58 chiffres hexad\u00e9cimaux",
                    password_wep_chars: "Les cl\u00e9s WEP ne peuvent comporter que des chiffres et les lettres A-F",
                    password_wpa: "Les mots de passe WPA/WPA2-PSK doivent comporter 8\u00a0caract\u00e8res au minimum et 63\u00a0caract\u00e8res au maximum",
                    security_mode: "Mode de s\u00e9curit\u00e9 sans fil",
                },
                site_survey: { button_rescan: "R\u00e9analyser", info_msg: "S\u00e9lectionnez un r\u00e9seau dans la liste.", none_found: "Aucun r\u00e9seau trouv\u00e9" },
                test_msg:
                    "La connexion Wi-Fi va maintenant \u00eatre test\u00e9e pour confirmer que les param\u00e8tres sont valides.  La connexion actuelle \u00e0 l\u2019Envoy va \u00eatre temporairement \u00eatre perdue pendant le test de connexion.",
            },
        },
        home: {
            event_tbl_col_hdr: { date: "Date", details: "D\u00e9tails", device: "P\u00e9riph\u00e9rique", event: "Ev\u00e9nement", eventId: "ID d\u2019\u00e9v\u00e9nement" },
            warnings: {
                acb_critical_temp: "Une temp\u00e9rature interne \u00e9lev\u00e9e est d\u00e9tect\u00e9e sur une ou plusieurs des batteries\u00a0AC. Consultez les instructions dans le Manuel d\u2019installation et d\u2019utilisation.",
                acb_needs_meters: "Un Envoy-S avec compteur est requis pour terminer la mise en service du syst\u00e8me. Des batteries AC exigeant un compteur ont \u00e9t\u00e9 d\u00e9tect\u00e9es et cet Envoy-S n\u2019a pas de compteur.",
                acdisco_active: "Sectionneur AC actif. Envoy ne peut pas communiquer avec les micro-onduleurs.",
                acdisco_fail: "Panne du sectionneur AC. V\u00e9rifiez le relais du sectionneur AC.",
                both_meter_enabled: "Les compteurs de production et de consommation doivent tous deux \u00eatre activ\u00e9s pour terminer la mise \u00e0 disposition du syst\u00e8me.",
                check_date_warn_msg:
                    "L\u2019heure du syst\u00e8me n\u2019est pas valide.  Tant que cette correction n\u2019est pas effectu\u00e9e, Envoy ne peut pas communiquer avec les micro-onduleurs.  Si Envoy n\u2019est pas configur\u00e9 pour utiliser le protocole NTP ou ne parvient pas \u00e0 communiquer avec les serveurs NTP configur\u00e9s, vous devez effectuer la modification manuellement par l\u2019interm\u00e9diaire des <a href=\u2019/admin/lib/date_time_display\u2019>contr\u00f4les d\u2019administration de date et d\u2019heure.</a>",
                cross_domain_traffic: "Des communications avec d\u2019autres Envoy ont \u00e9t\u00e9 d\u00e9tect\u00e9es.",
                date_invalid: "L\u2019heure du syst\u00e8me n\u2019est pas valide. Connectez l\u2019Envoy \u00e0 Internet pour d\u00e9finir son heure correctement.",
                db_warn_msg: "L\u2019Envoy n\u2019a pas pu envoyer de donn\u00e9es \u00e0 Enlighten et le stockage local est presque plein. Connectez l\u2019Envoy \u00e0 Internet pour \u00e9viter toute perte de donn\u00e9es.",
                eim_consumption_check_wiring: "Le compteur de consommation d\u2019\u00e9nergie est mal connect\u00e9. V\u00e9rifiez le c\u00e2blage.",
                eim_production_check_wiring: "Le compteur de production d\u2019\u00e9nergie est mal connect\u00e9. V\u00e9rifiez le c\u00e2blage.",
                envoy_needs_meters:
                    "Un Envoy-S avec compteur est requis pour terminer la mise en service du syst\u00e8me. Un profil de r\u00e9seau exigeant un compteur a \u00e9t\u00e9 s\u00e9lectionn\u00e9 et cet Envoy-S n\u2019a pas de compteur.",
                legend: "Avertissement",
                no_enlighten_report: "Le syst\u00e8me n\u2019a jamais envoy\u00e9 de rapport \u00e0 Enlighten. Connectez l\u2019Envoy \u00e0 Internet pour \u00e9tablir une connexion \u00e0 Enlighten.",
                no_phase_assignment: "Les batteries AC doivent \u00eatre affect\u00e9es aux phases pour terminer la mise en service du syst\u00e8me.",
                pcu_limit_warn_msg: "Le nombre de micro-onduleurs d\u00e9tect\u00e9s est sup\u00e9rieur \u00e0 la configuration de la surveillance de l\u2019Envoy. Contactez l\u2019assistance client\u00e8le d\u2019Enphase Energy.",
                pcu_limit_warn_msg2:
                    "Le nombre de micro-onduleurs d\u00e9tect\u00e9s est sup\u00e9rieur \u00e0 la configuration de la surveillance par d\u00e9faut de l\u2019Envoy.  L\u2019Envoy a besoin d\u2019une connexion Internet pour d\u00e9finir la configuration de la surveillance.",
                pel_profile_requires_meters: "Les compteurs de production et de consommation doivent \u00eatre configur\u00e9s pour prendre en charge la restriction de l\u2019exportation d\u2019\u00e9lectricit\u00e9.",
                phase_assoc_failed: "La d\u00e9tection des phases a \u00e9chou\u00e9. Consultez les instructions dans le Manuel d\u2019installation et d\u2019utilisation.",
                pim_profile_requires_meters:
                    "La mesure de la production et de la consommation polyphas\u00e9es doit \u00eatre activ\u00e9e pour prendre en charge la gestion du d\u00e9s\u00e9quilibre de phase et l\u2019absence de d\u00e9tection des phases.",
            },
        },
    },
    number: {
        currency: { format: { delimiter: ",", format: "%u %n", precision: 2, separator: ".", significant: !1, strip_insignificant_zeros: !1, unit: "$" } },
        format: { delimiter: "", precision: 3, separator: ",", significant: !1, strip_insignificant_zeros: !1 },
        human: {
            decimal_units: { format: "%n %u", units: { billion: "Billion", million: "Million", quadrillion: "Quadrillion", thousand: "Thousand", trillion: "Trillion", unit: "" } },
            format: { delimiter: "", precision: 3, significant: !0, strip_insignificant_zeros: !0 },
            storage_units: { format: "%n %u", units: { byte: { one: "Byte", other: "Bytes" }, gb: "GB", kb: "KB", mb: "MB", tb: "TB" } },
        },
        percentage: { format: { delimiter: "" } },
        precision: { format: { delimiter: "" } },
    },
    scripts: { data: { verify_internet_connection_message: "Votre syst\u00e8me n\u2019a jamais envoy\u00e9 de rapport \u00e0 Enlighten. V\u00e9rifiez la connexion Internet." } },
    time: {
        am: "Matin",
        formats: {
            default: "%d/%m/%Y %I :%M %p",
            default_date_time_no_pad: "%d/%m/%Y %-I:%M %p",
            hour_meridian: "%-I %p",
            long: "%B %d, %Y %H:%M",
            noday_nozone_datetime_secs_ui: "%d %b, %Y %-I:%M:%S %p",
            noday_nozone_datetime_ui: "%d %b, %Y %-I:%M %p",
            nozone_datetime: "%a %d %b %Y %I:%M %p",
            short: "%d %b %H:%M",
            short_date: "%d/%m/%Y",
            time_only: "%H:%M",
        },
        pm: "Apr\u00e8s-midi",
    },
    units: {
        amps: " A",
        bool: "Bool\u00e9en",
        degrees: "degr\u00e9s",
        hertz: " Hz",
        hertz_per_sec: "Hz / s",
        lagging: "Isolant thermique",
        milliseconds: " ms",
        millivolts: "mV",
        none: "",
        percent: " %",
        percent_per_hertz: "% / Hz",
        percent_per_min: "% / min",
        seconds: " s",
        volts: "V",
    },
};
I18n.translations.it = {
    date: {
        abbr_day_names: "dom lun mar mer gio ven sab".split(" "),
        abbr_month_names: [null, "Gen", "Feb", "Mar", "Apr", "Mag", "Giu", "Lug", "Ago", "Set", "Ott", "Nov", "Dic"],
        day_names: "domenica luned\u00ec marted\u00ec mercoled\u00ec gioved\u00ec venerd\u00ec sabato".split(" "),
        formats: { default: "%Y-%m-%d", long: "%B %e, %Y", only_day: "%e", short: "%e %b" },
        month_names: [null, "Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre"],
        order: ["anno", "mese", "giorno"],
    },
    envoy: {
        cond_flags: {
            acb_ctrl: {
                bmudatabounds: "Errore limiti dati BMU",
                bmuhardwareerror: "Errore hardware BMU",
                bmuimageerror: "Errore immagine BMU",
                bmumaxcurrentwarning: "Avviso corrente max BMU",
                bmusenseerror: "Errore rilevamento BMU",
                cellmaxtemperror: "Errore temperatura max cella",
                cellmaxtempwarning: "Avviso temperatura max cella",
                cellmaxvoltageerror: "Errore tensione max cella",
                cellmaxvoltagewarning: "Avviso tensione max cella",
                cellmintemperror: "Errore temperatura min cella",
                cellmintempwarning: "Avviso temperatura min cella",
                cellminvoltageerror: "Errore tensione min cella",
                cellminvoltagewarning: "Avviso tensione min cella",
                cibcanerror: "Errore CAN CIB",
                cibimageerror: "Errore immagine CIB",
                cibspierror: "Errore SPI CIB",
            },
            nsrb_ctrl: {
                acfreqhigh: "Frequenza CA alta",
                acfreqlow: "Frequenza CA bassa",
                acfrequencyoor: "Frequenza CA fuori gamma",
                acvoltageavgline1: "Tensione CA media fuori gamma - Fase 1",
                acvoltageavgline2: "Tensione CA media fuori gamma - Fase 2",
                acvoltageavgline3: "Tensione CA media fuori gamma - Fase 3",
                acvoltagehighline1: "Tensione CA alta - Fase 1",
                acvoltagehighline2: "Tensione CA fuori gamma - Fase 2",
                acvoltagehighline3: "Tensione CA fuori alta - Fase 3",
                acvoltagelowline1: "Tensione CA bassa - Fase 1",
                acvoltagelowline2: "Tensione CA fuori gamma - Fase 2",
                acvoltagelowline3: "Tensione CA fuori bassa - Fase 3",
                acvoltageoorline1: "Tensione CA fuori gamma - Fase 1",
                acvoltageoorline2: "Tensione CA fuori gamma - Fase 2",
                acvoltageoorline3: "Tensione CA fuori gamma - Fase 3",
                buttonpress: "Pulsante premuto",
                dcgriderror: "Errore corrente DC Grid",
                dcgridhigh: "Corrente di griglia DC alta",
                dcgridlow: "Corrente di griglia DC bassa",
                relayforced: "Rel\u00e8 forzato",
                relayopen: "Rel\u00e8 aperto",
                rocof: "Errore percentuale di cambiamento di frequenza",
            },
            obs_strs: {
                discovering: "Individuazione",
                failure: "Report non riuscito",
                flasherror: "Errore Flash",
                notmonitored: "Non controllato",
                ok: "Normale",
                plmerror: "Errore PLM",
                secmodeenterfailure: "Impossibile attivare la modalit\u00e0 sicura",
                secmodeexitfailure: "Impossibile uscire dalla modalit\u00e0 sicura",
                sleeping: "Modalit\u00e0 di riposo ON",
                verifing: "Verifica del dispositivo in corso",
            },
            pcu_chan: {
                acMonitorError: "Errore monitor CA",
                acfrequencyhigh: "Frequenza CA alta",
                acfrequencylow: "Frequenza CA bassa",
                acfrequencyoor: "Frequenza CA fuori gamma",
                acvoltage_avg_hi: "Tensione CA media alta",
                acvoltagehigh: "Tensione CA alta",
                acvoltagelow: "Tensione CA bassa",
                acvoltageoor: "Tensione CA fuori gamma",
                acvoltageoosp1: "Tensione CA fuori gamma - Fase 1",
                acvoltageoosp2: "Tensione CA fuori gamma - Fase 2",
                acvoltageoosp3: "Tensione CA fuori gamma - Fase 3",
                agfpowerlimiting: "Limite di potenza AGF",
                dcresistancelow: "Resistenza CC bassa",
                dcresistancelowpoweroff: "Resistenza CC bassa, spento",
                dcvoltagetoohigh: "Tensione CC troppo alta",
                dcvoltagetoolow: "Tensione CC troppo bassa",
                dfdt: "Cambiamento di frequenza CA troppo rapido",
                gfitripped: "Intervento dell'interruttore differenziale automatico",
                gridgone: "Rete assente",
                gridinstability: "Instabilit\u00e0 rete",
                gridoffsethi: "Offset rete alto",
                gridoffsetlow: "Offset rete basso",
                hardwareError: "Errore hardware",
                hardwareWarning: "Avviso hardware",
                highskiprate: "Elevata frequenza di salti",
                invalidinterval: "Intervallo non valido",
                pwrgenoffbycmd: "Generazione potenza disattivata su comando",
                skippedcycles: "Cicli saltati",
                vreferror: "Errore riferimento tensione",
            },
            pcu_ctrl: {
                alertactive: "Allarme attivo",
                altpwrgenmode: "Modalit\u00e0 di generazione potenza alternativa",
                altvfsettings: "Impostazioni tensione alternata e frequenza",
                badflashimage: "Immagine flash non valida",
                bricked: "Nessun profilo rete",
                commandedreset: "Reimpostazione su comando",
                criticaltemperature: "Temperatura critica",
                "dc-pwr-low": "Potenza CC troppo bassa",
                iuplinkproblem: "Problema collegamento IUP",
                manutestmode: "In modalit\u00e0 di test manuale",
                nsync: "Perturbazione rete non sincronizzata",
                overtemperature: "Surriscaldamento",
                poweronreset: "Reimpostazione all'avvio",
                pwrgenoffbycmd: "Generazione potenza disattivata su comando",
                runningonac: "Funzionamento in CA",
                "sleep-mode": "Modalit\u00e0 di riposo ON",
                tpmtest: "Profilo rete temporaneo",
                unexpectedreset: "Reimpostazione imprevista",
                watchdogreset: "Reimpostazione controllo",
            },
            rgm_chan: { check_meter: "Errore contatore", power_quality: "Qualit\u00e0 potenza scarsa" },
        },
        global: {
            cleared: "Cancella",
            copyright_notice: "2007-2014, [e] Enphase Energy, Inc. Tutti i diritti riservati.",
            copyright_notice_01: "[e] Enphase Energy, Inc. Tutti i diritti riservati.",
            cs_phone_number: "XXX-XXX-XXXX",
            disable: "Disabilita",
            disabled: "Disabilitata",
            enable: "Abilita",
            enabled: "Abilitato",
            enlighten_token_link: "Ottieni token qui",
            false: "Falso",
            none: "Nessuna",
            notapplicable: "n/a",
            ok: "OK",
            page_not_found_msg1: "Pagina non trovata",
            page_not_found_msg2: "La pagina che si sta tentando di visualizzare non esiste",
            page_not_found_msg3: 'Provare ad accedere alla <a href="/">home</a> page',
            serialnumber: "Numero di serie",
            set: "Imposta",
            too_many_installer_sessions_msg1: "Troppe sessioni di installazione attive",
            too_many_installer_sessions_msg2: "Provare a chiudere le altre finestre delle sessioni di installazione",
            too_many_installer_sessions_msg3: "Troppe richieste attive per questa risorsa. Riprovare tra qualche minuto",
            true: "Vero",
            unknown: "Sconosciuto",
        },
        paging: {
            all: "Tutto",
            clearchoices: "Ripristina tabella",
            info: "Visualizzazione di _TOTAL_ voci dal _START_ al _END_",
            infoempty: "Visualizzazione voci da 0 a 0 di 0 totali",
            infofiltered: "(filtro da _MAX_ voci totali)",
            lengthmenu: "Mostra voci _MENU_",
            processing: "Elaborazione in corso...",
            search: "Cerca:",
            zerorecords: "Non sono stati trovati record corrispondenti",
        },
    },
    envoy_backbone: {
        ac_batteries: {
            batteries_detected: "Rilevate",
            detected_total_count: "%{detected_count}\u00a0di %{total_count}",
            manage_options: {
                active: "Attiva (%{count})",
                active_count: { counting: { one: "Attiva (%{count})", other: "Attiva (%{count})", zero: "Attiva (%{count})" } },
                deleted: "Eliminata (%{count})",
                deleted_count: { counting: { one: "Eliminata (%{count})", other: "Eliminata (%{count})", zero: "Eliminata (%{count})" } },
            },
            max_temp: "Temp. max: ",
            nav: { all: "Tutto", manage: "Gestisci", status: "Stato" },
            no_inverters: "Non sono presenti batterie.",
            no_inverters_search: 'Impossibile trovare batterie CA corrispondenti a "%{search_term}".',
            sleep_mode: {
                enable_failed: "Inserimento delle batterie in modalit\u00e0 di riposo non riuscito. Riprovare tra qualche minuto. Se il problema persiste, contattare l'assistenza clienti.",
                prompt_to_cancel: { desc: "Per scollegare la batteria in tutta sicurezza, deve essere inserita la modalit\u00e0 di riposo.</br></br>Impedire alla batteria di entrare in modalit\u00e0 di riposo?" },
                prompt_to_sleep_modal: {
                    desc:
                        "Per scollegare le batterie in tutta sicurezza, deve essere inserita la modalit\u00e0 di riposo.</br></br><b>Nota:</b> prima di entrare in modalit\u00e0 di riposo, le batterie verranno caricate o scaricate allo stato di carica %{min}-%{max}%.",
                    target_soc_label: "Stato della carica previsto",
                    target_soc_link_text: "Modifica stato della carica previsto",
                    warning: "Avviso: una volta inserita la modalit\u00e0 di riposo per la batteria, tale modalit\u00e0 pu\u00f2 essere disattivata solo da un installatore professionista.",
                },
                prompt_to_wake: "Per scollegare la batteria in tutta sicurezza, deve essere inserita la modalit\u00e0 di riposo.</br></br>Spegnere la modalit\u00e0 di riposo?",
                sleep_btn: "Modalit\u00e0 di riposo",
            },
            state_of_charge: "Stato della carica: ",
            status_options: {
                cancel_sleep_label: "Interrompi",
                comm_nocount: "Com",
                power_nocount: "Funzionante",
                preparing_to_sleep_text: "Inserimento modalit\u00e0 di riposo",
                profile_nocount: "Config",
                wake_sleep_label: "Spegni",
                waking_label: "Uscita modalit\u00e0 di riposo",
            },
        },
        app_title: "Envoy Mobile",
        authentication: {
            authentication_with_authms: "Accedi con Enphase",
            bad_jwt: "Token errato",
            insert_token_headline: "Autenticazione con token",
            title: "Autenticazione",
            token_headline: "Token",
            token_link: "Visitare %{auth_authority} per ottenere il token",
            token_submit: "Invia",
            too_many_sessions: "Too many sessions",
            verifying_jwt: "Verifica token in corso",
        },
        buttons: {
            cancel: "Annulla",
            change: "Cambia",
            close: "Chiudi",
            connect: "Connetti",
            edit: "Modifica",
            forget: "Non memorizzare",
            forget_network: "Non memorizzare questa rete",
            ok: "OK",
            sleep_off: "Spegni modalit\u00e0 di riposo",
            sleep_on: "Attiva modalit\u00e0 di riposo",
            start_scan: "Avvia scansione",
            stop: "Interrompi",
            update: "Aggiorna",
        },
        cellular: {
            carrier: "Operatore",
            connected: "Connessione stabilita",
            connection_status: "Stato connessione",
            iccid: "ICCID (numero cella)",
            imsi: "IMSI (ID sottoscrittore)",
            mei: "Numero IMEI modem",
            no_modem: "Nessuna configurazione modem cellulare",
            not_connected: "Connessione assente",
            page_title: "Configurazione cellulare",
        },
        comm_check: {
            communication_level: "Livello di comunicazioni",
            description: "Verificare l'intensit\u00e0 del segnale tra Envoy e i microinverter.",
            devices: "Dispositivi",
            in_progress: "Verifica comunicaz. in corso",
            remaining_time: "%{minutes}\u00a0minuti restanti",
            remaining_time_one: "< 1 minuto restante",
            start: "Avvia verifica comunicaz.",
            stop: "Interrompi verifica comunicaz.",
            title: "Verifica comunicaz.",
        },
        comms: {
            communicating: "Comunicazione in corso",
            description: "L'elenco di microinverter che comunicano di Envoy comprende i numeri di serie di tutti i dispositivi che stanno ricevendo messaggi da Envoy e inviando informazioni su produzione e stato.",
            not_communicating: "Comunicazione assente",
            title: "Microinverter che comunicano",
        },
        countries: {
            AD: "Andorra",
            AE: "Emirati Arabi Uniti",
            AF: "Afghanistan",
            AG: "Antigua e Barbuda",
            AI: "Anguilla",
            AL: "Albania",
            AM: "Armenia",
            AQ: "Antartide",
            AR: "Argentina",
            AS: "Samoa Americane",
            AT: "Austria",
            AU: "Australia",
            AW: "Aruba",
            AZ: "Azerbaigian",
            BA: "Bosnia-Erzegovina",
            BB: "Barbados",
            BD: "Bangladesh",
            BE: "Belgio",
            BF: "Burkina Faso",
            BG: "Bulgaria",
            BH: "Bahrain",
            BI: "Burundi",
            BJ: "Benin",
            BM: "Bermuda",
            BN: "Brunei Darussalam",
            BO: "Bolivia, stato plurinazionale della",
            BR: "Brasile",
            BS: "Bahamas",
            BT: "Bhutan",
            BV: "Isola Bouvet",
            BW: "Botswana",
            BY: "Bielorussia",
            BZ: "Belize",
            CA: "Canada",
            CC: "Isole Cocos (Keeling)",
            CF: "Repubblica Centrafricana",
            CG: "Congo",
            CH: "Svizzera",
            CI: "Costa d'Avorio",
            CK: "Isole Cook",
            CL: "Cile",
            CM: "Camerun",
            CN: "Cina",
            CO: "Colombia",
            CR: "Costa Rica",
            CV: "Capo Verde",
            CX: "Isola Christmas",
            CY: "Cipro",
            CZ: "Repubblica Ceca",
            DE: "Germania",
            DJ: "Gibuti",
            DK: "Danimarca",
            DM: "Dominica",
            DO: "Repubblica Dominicana",
            DZ: "Algeria",
            EC: "Ecuador",
            EE: "Estonia",
            EG: "Egitto",
            EH: "Sahara Occidentale",
            ER: "Eritrea",
            ES: "Spagna",
            ET: "Etiopia",
            FI: "Finlandia",
            FJ: "Figi",
            FK: "Isole Falkland (Malvine)",
            FM: "Micronesia, Stati federati della",
            FO: "Isole F\u00e6r \u00d8er",
            FR: "Francia",
            GA: "Gabon",
            GB: "Regno Unito",
            GD: "Grenada",
            GE: "Georgia",
            GF: "Guayana Francese",
            GH: "Ghana",
            GI: "Gibilterra",
            GL: "Groenlandia",
            GM: "Gambia",
            GN: "Guinea",
            GP: "Guadalupa",
            GQ: "Guinea Equatoriale",
            GR: "Grecia",
            GS: "Georgia del Sud e Sandwich Australi",
            GT: "Guatemala",
            GU: "Guam",
            GW: "Guinea-Bissau",
            GY: "Guyana",
            HK: "Hong Kong",
            HM: "Isole Heard e McDonald",
            HN: "Honduras",
            HR: "Croazia",
            HT: "Haiti",
            HU: "Ungheria",
            ID: "Indonesia",
            IE: "Irlanda",
            IL: "Israele",
            IN: "India",
            IO: "Territorio britannico dell\u2019Oceano Indiano",
            IS: "Islanda",
            IT: "Italia",
            JM: "Giamaica",
            JO: "Giordania",
            JP: "Giappone",
            KE: "Kenya",
            KG: "Kirghizistan",
            KH: "Cambogia",
            KI: "Kiribati",
            KM: "Comore",
            KN: "Saint Kitts e Nevis",
            KR: "Corea, Repubblica di",
            KW: "Kuwait",
            KY: "Isole Cayman",
            KZ: "Kazakhstan",
            LA: "Repubblica democratica popolare del Laos",
            LB: "Libano",
            LC: "Saint Lucia",
            LI: "Liechtenstein",
            LK: "Sri Lanka",
            LR: "Liberia",
            LS: "Lesotho",
            LT: "Lituania",
            LU: "Lussemburgo",
            LV: "Lettonia",
            MA: "Marocco",
            MC: "Monaco",
            MD: "Moldova, Repubblica",
            ME: "Montenegro",
            MG: "Madagascar",
            MH: "Isole Marshall",
            ML: "Mali",
            MM: "Myanmar",
            MN: "Mongolia",
            MO: "Macao",
            MP: "Isole Marianne Settentrionali",
            MQ: "Martinica",
            MR: "Mauritania",
            MS: "Montserrat",
            MT: "Malta",
            MU: "Mauritius",
            MV: "Maldive",
            MW: "Malawi",
            MX: "Messico",
            MY: "Malaysia",
            MZ: "Mozambico",
            NA: "Namibia",
            NC: "Nuova Caledonia",
            NE: "Niger",
            NF: "Isola Norfolk",
            NG: "Nigeria",
            NI: "Nicaragua",
            NL: "Paesi Bassi",
            NO: "Norvegia",
            NP: "Nepal",
            NR: "Nauru",
            NU: "Niue",
            NZ: "Nuova Zelanda",
            OM: "Oman",
            PA: "Panama",
            PE: "Per\u00f9",
            PF: "Polinesia Francese",
            PG: "Papua Nuova Guinea",
            PH: "Filippine",
            PK: "Pakistan",
            PL: "Polonia",
            PM: "Saint Pierre e Miquelon",
            PN: "Pitcairn",
            PR: "Portorico",
            PT: "Portogallo",
            PW: "Palau",
            PY: "Paraguay",
            QA: "Qatar",
            RO: "Romania",
            RU: "Russia",
            SA: "Arabia Saudita",
            SB: "Isole Salomone",
            SC: "Seychelles",
            SE: "Svezia",
            SG: "Singapore",
            SH: "Sant'Elena, Ascensione e Tristan da Cunha",
            SI: "Slovenia",
            SJ: "Svalbard e Jan Mayen",
            SK: "Slovacchia",
            SL: "Sierra Leone",
            SM: "San Marino",
            SN: "Senegal",
            SO: "Somalia",
            SR: "Suriname",
            ST: "S\u00e3o Tom\u00e9 e Pr\u00edncipe",
            SV: "El Salvador",
            SY: "Siria",
            SZ: "Swaziland",
            TC: "Isole Turks e Caicos",
            TD: "Ciad",
            TF: "Territori australi francesi",
            TG: "Togo",
            TH: "Thailandia",
            TJ: "Tagikistan",
            TK: "Tokelau",
            TL: "Timor Orientale",
            TM: "Turkmenistan",
            TN: "Tunisia",
            TO: "Tonga",
            TR: "Turchia",
            TT: "Trinidad e Tobago",
            TV: "Tuvalu",
            TZ: "Tanzania, Repubblica unita di",
            UA: "Ucraina",
            UG: "Uganda",
            UM: "Isole Minori degli Stati Uniti d'America",
            US: "Stati Uniti",
            UY: "Uruguay",
            UZ: "Uzbekistan",
            VA: "Santa Sede (Stato citt\u00e0 del Vaticano)",
            VC: "Saint Vincent e Grenadine",
            VE: "Venezuela, Repubblica Bolivariana del",
            VG: "Isole Vergini britanniche",
            VI: "Isole Vergini americane",
            VN: "Vietnam",
            VU: "Vanuatu",
            WF: "Wallis e Futuna",
            WS: "Samoa",
            YE: "Yemen",
            YT: "Mayotte",
            ZA: "Sudafrica",
            ZM: "Zambia",
            ZW: "Zimbabwe",
        },
        counts: "%{actual_count}/%{expected_count}",
        detected: {
            battery_target_seperate: { one: "%{count} batteria", other: "%{count} batterie", zero: "%{count} batterie" },
            description:
                "L'elenco di microinverter rilevati di Envoy comprende tutti i numeri di serie ottenuti tramite scansione dei dispositivi o provisioning con Installer Toolkit. Una volta rilevati i microinverter, questi potranno inviare e ricevere dati aggiuntivi da Envoy.",
            detected: "Rilevate",
            device_target: "Obiettivo dispositivo: %{count}",
            device_target_title: "Obiettivo dispositivo: ",
            discovered: "Rilevato:",
            installed: "Installato",
            micro_target_seperate: { one: "%{count} microinverter", other: "%{count} microinverter", zero: "%{count} microinverter" },
            nsr_target_separate: { one: "%{count} Q-Relay", other: "%{count} Q-Relays", zero: "%{count} Q-Relays" },
            provisioned: "Provisioning completato:",
            remaining_duration: { one: "Durata residua: %{count} ora %{minutes} minuti", other: "Durata residua: %{count} ore %{minutes} minuti", zero: "Durata residua: %{count} ore %{minutes} minuti" },
            remaining_hour_one: "1 ora",
            remaining_hours: "%{hours} ore",
            remaining_minute_one: "1 minuto restante",
            remaining_minutes: "%{minutes}\u00a0minuti restanti",
            remaining_priority: {
                one: "Durata priorit\u00e0 residua: %{count} ora %{minutes} minuti",
                other: "Durata priorit\u00e0 residua: %{count} ore %{minutes} minuti",
                zero: "Durata priorit\u00e0 residua: %{count} ore %{minutes} minuti",
            },
            remaining_time: "%{minutes}\u00a0minuti restanti",
            remaining_time_one: "< 1 minuto restante",
            scan_inprogress: "Scansione dispositivi in corso",
            scan_start: "Avvia scansione dispositivo",
            scan_stop: "Interrompi scansione",
            title: "Microinverter rilevati",
        },
        device_alert_messages: {
            meters_not_enabled: "Configurare i contatori di produzione e consumo per consentire il funzionamento delle batterie.",
            no_phase_assignment: "Le batterie non funzioneranno finch\u00e9 non vengono assegnate alle fasi.",
            not_configured: "Configurare le batterie per consentirne il funzionamento.",
        },
        devices: {
            detected: "Rilevate",
            detected_total_count: "%{detected_count} di %{total_count}",
            device_info: {
                change_phase: "Cambia fase",
                comm_level: "Livello com.: ",
                comm_level_2_4_ghz: "[IT] Comm Level (2.4 GHz): ",
                comm_level_sub_ghz: "[IT] Comm Level (Sub GHz): ",
                detected: "Rilevato: ",
                discovered: "Rilevato tramite scansione dispositivo",
                grid_profile: "Profilo rete: ",
                last_comm: "Ultima comunicazione: ",
                last_report: "Ultimo report: ",
                notapplicable: "n/a",
                param_table: "Tabella parametri: ",
                part_number: "Numero di parte: ",
                pending_condition_clear: 'Invio comando di eliminazione della condizione "%{condition_flag}" in corso.',
                phase: "Fase: ",
                phase_unknown: "Nessuna fase selezionata",
                provisioned: "Assegnato tramite provisioning",
                running_image: "Immagine in esecuzione: ",
                select_phase: "Seleziona fase",
                status: "Stato: ",
                unknown: "Sconosciuto",
                updated: "Aggiornato ",
                view_in_array: "Visualizza nella matrice",
            },
            device_scan: "Scansione dispositivi",
            device_scan_short: "Scansione",
            scan_state: { active: "Attivo", inactive: "Inattiva", scan_disabled: "Disabilitata", scan_inhibited: "Bloccata", scan_suspended: "Sospesa" },
        },
        encharge_batteries: {
            manage_options: {
                active: "[IT] Active (%{count})",
                active_count: { counting: { one: "[IT] Active (%{count})", other: "[IT] Active (%{count})", zero: "[IT] Active (%{count})" } },
                deleted: "[IT] Deleted (%{count})",
                deleted_count: { counting: { one: "[IT] Deleted (%{count})", other: "[IT] Deleted (%{count})", zero: "[IT] Deleted (%{count})" } },
            },
            nav: { all: "Tutte", manage: "Gestisci", status: "Stato" },
            no_inverters: "[IT] There are no encharge batteries.",
            no_inverters_search: '[IT] No Encharge Batteries were found matching "%{search_term}".',
            phase_labels: { "ph-a": "[IT] L1(A)", "ph-b": "[IT] L2(B)", "ph-c": "[IT] L3(C)", "ph-unk": "[IT] No phase selected", "ph-updating": "[IT] Updating...", select_one: "[IT] Select One" },
            status_options: {
                cancel_sleep_label: "[IT] Stop",
                comm_nocount: "[IT] Comm",
                power_nocount: "[IT] Operating",
                preparing_to_sleep_text: "[IT] Entering Sleep Mode",
                profile_nocount: "[IT] Config",
                wake_sleep_label: "[IT] Turn Off",
                waking_label: "[IT] Exiting Sleep Mode",
            },
            title: "[IT] Encharge",
        },
        enpowers: {
            manage_options: {
                active: "[IT] Active (%{count})",
                active_count: { counting: { one: "[IT] Active (%{count})", other: "[IT] Active (%{count})", zero: "[IT] Active (%{count})" } },
                deleted: "[IT] Deleted (%{count})",
                deleted_count: { counting: { one: "[IT] Deleted (%{count})", other: "[IT] Deleted (%{count})", zero: "[IT] Deleted (%{count})" } },
            },
            max_temp: "[IT] Max Temp: ",
            nav: { all: "[IT] All", manage: "[IT] Manage", status: "[IT] Status" },
            no_inverters: "[IT] There is no Enpower device.",
            no_inverters_search: '[IT] No Enpower device found matching "%{search_term}".',
            state_of_grid: { closed: "[IT] Closed", open: "[IT] Open", title: "[IT] State of Grid: " },
            status_options: { comm_nocount: "[IT] Comm", power_nocount: "[IT] Operating", profile_nocount: "[IT] Config" },
            title: "[IT] Enpower",
        },
        errors: {
            error_message: "Si \u00e8 verificato un errore durante l'acquisizione dei dati da Envoy. Se il problema persiste, contattare l'assistenza clienti.",
            interface_not_dhcp: "Impossibile ottenere un nuovo indirizzo IP. Modificare le impostazioni IP Envoy in DHCP.",
            not_allowed: "La modifica richiesta non \u00e8 consentita e non \u00e8 stata salvata.",
            not_authorized: "L'utente non \u00e8 autorizzato a visualizzare la pagina.",
            save_failed: "Modifiche non salvate. ",
            start_scan_target_too_low:
                "<p>\u00c8 stato specificato che Envoy deve ricevere report da %{expected_count} microinverter e ne sono gi\u00e0 stati rilevati %{expected_count}.</p><p>Prima di avviare la scansione dispositivi, <a href='#' class='open-target-count'>aumentare il numero di microinverter previsti</a> oppure aprire la <a href='#' class='open-manage-devices'>schermata di gestione dei dispositivi</a> ed eliminare uno o pi\u00f9 microinverter.</p>",
            start_scan_target_too_low_battery: {
                one: "<p>\u00c8 stato specificato che Envoy deve ricevere report da %{count} batteria e tale numero \u00e8 gi\u00e0 stato raggiunto.</p>",
                other: "<p>\u00c8 stato specificato che Envoy deve ricevere report da %{count} batterie e tale numero \u00e8 gi\u00e0 stato raggiunto.</p>",
                zero: "<p>\u00c8 stato specificato che Envoy deve ricevere report da %{count} batterie e tale numero \u00e8 gi\u00e0 stato raggiunto.</p>",
            },
            start_scan_target_too_low_battery_end:
                "<p>Prima di avviare la scansione dispositivi, <a href='#' class='open-target-count'>aumentare il numero di batterie previste</a> oppure aprire la schermata di <a href='#' class='open-manage-devices-battery'>gestione dei dispositivi</a> ed eliminare una o pi\u00f9 batterie.</p>",
            start_scan_target_too_low_both:
                "<p>Il numero di dispositivi previsto \u00e8 gi\u00e0 stato rilevato.</p><p>Prima di avviare la scansione dispositivi, <a href='#' class='open-target-count'>aumentare il numero dei dispositivi previsti</a> o eliminare uno o pi\u00f9 microinverter o batterie.</p>",
            start_scan_target_too_low_micro: {
                one: "<p>\u00c8 stato specificato che Envoy deve ricevere report da %{count} microinverter e tale numero \u00e8 gi\u00e0 stato raggiunto.</p>",
                other: "<p>\u00c8 stato specificato che Envoy deve ricevere report da %{count} microinverter e tale numero \u00e8 gi\u00e0 stato raggiunto.</p>",
                zero: "<p>\u00c8 stato specificato che Envoy deve ricevere report da %{count} microinverter e tale numero \u00e8 gi\u00e0 stato raggiunto.</p>",
            },
            start_scan_target_too_low_micro_end:
                "<p>Prima di avviare la scansione dispositivi, <a href='#' class='open-target-count'>aumentare il numero di microinverter previsti</a> oppure aprire la schermata di <a href='#' class='open-manage-devices'>gestione dei dispositivi</a> ed eliminare uno o pi\u00f9 microinverter.</p>",
            start_scan_target_too_low_nsr: {
                one: "<p>\u00c8 stato specificato che Envoy deve ricevere report da %{count} Q-Relay e tale numero \u00e8 gi\u00e0 stato raggiunto.</p>",
                other: "<p>\u00c8 stato specificato che Envoy deve ricevere report da %{count} Q-Relay e tale numero \u00e8 gi\u00e0 stato raggiunto.</p>",
                zero: "<p>\u00c8 stato specificato che Envoy deve ricevere report da %{count} Q-Relay e tale numero \u00e8 gi\u00e0 stato raggiunto.</p>",
            },
            start_scan_target_too_low_nsr_end:
                "<p>Prima di avviare la scansione dispositivi, <a href='#' class='open-target-count'>aumentare il numero di Q-Relay previste</a> oppure aprire la schermata di <a href='#' class='open-manage-devices-nsr'>gestione dei dispositivi</a> ed eliminare una o pi\u00f9 Q-Relay.</p>",
            start_scan_title: "Scansione dispositivi non disponibile",
            timeout_message:
                "L'acquisizione dei dati da Envoy sta richiedendo troppo tempo. Assicurarsi che Envoy sia attivato e che sia collegato alla stessa rete locale del dispositivo in uso. Se il problema persiste, contattare l'assistenza clienti.",
            title: "Errore",
            tunnel_close_failed: "Tentativo di terminare la connessione con l'assistenza Enphase non riuscito. Se il problema persiste, contattare l'assistenza clienti.",
            tunnel_failed_title: "Connessione non riuscita",
            tunnel_open_failed: "Per connettersi con Enphase, Envoy deve essere collegato a Internet. Se Envoy \u00e8 collegato a Internet ma il problema persiste, contattare l'assistenza clienti.",
        },
        ethernet: {
            buttons: { dhcp: "Utilizza DHCP", new_ip: "Ottieni nuovo indirizzo IP", static: "Usa IP statico" },
            confirm_change: { description: "La comunicazione con Envoy potrebbe essere interrotta e potrebbe essere necessario connettersi nuovamente.", title: "Modificare configurazione Ethernet?" },
            confirm_static: {
                description: "In questo modo, l'indirizzo IP DHCP e altre configurazioni verranno assegnati come valori statici. Se si sceglie di continuare, \u00e8 possibile aggiornare questi valori nella schermata successiva.",
                title: "Modificare configurazione Ethernet?",
            },
            gateway_ip: "IP gateway",
            ip_address: "Indirizzo IP",
            ip_setting: "Impostazione IP",
            netmask: "Netmask",
            new_ip_modal: { description: "La comunicazione con Envoy potrebbe essere interrotta e potrebbe essere necessario connettersi nuovamente.", title: "Ottieni nuovo indirizzo IP?" },
            no_config: "Nessuna connessione Ethernet rilevata.",
            page_title: "Configurazione Ethernet",
            primary_dns: "Server DNS primario",
            secondary_dns: "Server DNS secondario",
            type: { dhcp: "DHCP", static: "IP statico" },
        },
        forms: { search: "Cerca", search_prompt: "Numero di serie", select_prompt: "Selezionare un elemento" },
        global_nav: {
            acb: "[IT] AC Battery",
            comms: "Comunicaz.",
            detected: "Rilevato",
            encharge: "[IT] Encharge",
            encharge_batteries: "[IT] Encharge",
            enpower: "[IT] Enpower",
            meters: "Contatori",
            meters_small: "Conta-<br/>tori",
            microinverters: "Microinverter",
            microinverters_short: "Micro",
            more: "Altro",
            network: "Rete",
            nsr: "Rel\u00e8 Q",
            overview: "Overview",
            power: "Potenza",
            profiles: "Profili",
            storage: "Batterie CA",
        },
        initial_setup: {
            continue: "Continua",
            device_prompt: "Inserire il numero di dispositivi che dovrebbero inviare report a Envoy.",
            eu_profile_prompt: "Selezionare un profilo di rete specifico per la localit\u00e0.",
            migration_in_progress_message: "profili in fase di aggiornamento",
            na_profile_prompt: "Il sistema sta usando le impostazioni del profilo di rete preinstallato. Di seguito \u00e8 possibile selezionare un profilo di rete specifico per la localit\u00e0.",
            system_size: "Dimensione sistema",
        },
        jquery_validate: {
            messages: {
                addedTierPercent: "Immettere un numero\u00a0maggiore della percentuale\u00a0del valore di riferimento\u00a0inserito per {0}.",
                an_number: "Inserisci un numero valido.",
                creditcard: "Inserisci un numero di carta di credito valido.",
                date: "Inserisci una data valida.",
                dateISO: "Inserisci una data valida (ISO).",
                digits: "Inserisci solo numeri.",
                domain: "Immettere un indirizzo IP v4 (xxx.xxx.xxx.xxx) o un URL (google.com) valido",
                email: "Inserisci un indirizzo email valido.",
                equalTo: "Inserisci nuovamente lo stesso valore.",
                ipv4: "Immettere un indirizzo IP v4 valido. (xxx.xxx.xxx.xxx)",
                max: "Immettere un valore minore o uguale a {0}",
                maxlength: "Non inserire pi\u00f9 di {0} caratteri.",
                min: "Immettere un valore maggiore o uguale a {0}",
                minlength: "Immettere almeno {0} caratteri.",
                number: "Inserisci un numero valido.",
                range: "Immettere un valore compreso fra {0} e {1}.",
                rangelength: "Immettere un valore compreso tra {0} e {1} caratteri.",
                remote: "Controlla questo campo.",
                required: "Campo obbligatorio.",
                url: "Inserisci un indirizzo web valido.",
                wep_key: "Inserire una chiave WEP valida (10, 26 o 58 caratteri, che possono comprendere numeri da 0 a 9 o lettere dalla A alla F).",
            },
        },
        loading: "Caricamento in corso. Attendere",
        meters: {
            active_energy: "Energia attiva",
            active_energy_lt: "Energia attiva",
            active_power: "Potenza attiva",
            apparent_energy: "Energia apparente",
            apparent_power: "Potenza apparente",
            consumption: "Contatore di consumo",
            consumption_meter: {
                enable_meter: "Abilita contatore di consumo",
                measurement_type: "Circuito conteggiato",
                meter_type_desc: "Il circuito che attraversa i trasformatori di corrente di consumo comprende la produzione solare oltre al carico o soltanto il carico?",
                meter_type_desc_singular: "Il circuito che attraversa i trasformatori di corrente di consumo comprende la produzione solare oltre al carico o soltanto il carico?",
                meter_type_warning: "Assicurarsi che le selezioni qui sopra siano corrette.",
            },
            current: "Corrente",
            current_ct: {
                current_ct_settings: "Impostazioni attuali trasformatore di corrente",
                custom_cts_installed: "Trasformatori di corrente %{meter_type} personalizzati installati",
                primary: "Principale",
                remove_desc: "Toccare OK per confermare l'utilizzo dei trasformatori di corrente Enphase %{meter_type} standard.",
                remove_settings: "Rimuovere le impostazioni per il trasformatore di corrente personalizzato?",
                secondary: "Secondario",
                turns: "Curvature",
            },
            descriptors: { lifetime: "Ciclo di vita", lifetime_lag: "In ritardo (ciclo di vita)", lifetime_lead: "In anticipo (ciclo di vita)", today: "Oggi", today_lag: "In ritardo (oggi)", today_lead: "In anticipo (oggi)" },
            enable_consumption_meter: "Abilita contatore di consumo",
            enable_consumption_modal: {
                description: "Una volta abilitato il contatore, non si potr\u00e0 disabilitare e non sar\u00e0 possibile cambiare il tipo.",
                description_mode_three: "Una volta abilitato questo contatore, non sar\u00e0 possibile disattivarlo e cambiare il tipo, n\u00e9 diminuire il numero delle fasi.",
                description_mode_three_post_enable: "Una volta eseguito l'aggiornamento, non sar\u00e0 possibile diminuire il numero delle fasi.",
                note_three: "<strong>Nota: il numero delle fasi aumenter\u00e0 anche sul contatore di produzione.</strong>",
                note_three_post_enable: "<strong>Nota: il numero delle fasi aumenter\u00e0 anche sul contatore di produzione.</strong>",
                title: 'Abilitare il contatore il conteggio "%{type}"?',
                title_mode_three: "Abilitare il contatore con il circuito conteggiato: %{type} e le fasi conteggiate: %{phCount}?",
                title_mode_three_post_enable: "Aggiornare le fasi conteggiate a %{phCount}?",
            },
            enable_meter: "Abilita contatore di consumo",
            enable_modal: { description: "Una volta abilitato il contatore, non si potr\u00e0 disabilitare e non sar\u00e0 possibile cambiare il tipo.", title: "Abilitare il contatore il conteggio %{type}?" },
            enable_production_meter: "Abilita contatore produzione",
            enable_production_modal: {
                description: "Una volta abilitato il contatore, non si potr\u00e0 disabilitare.",
                description_mode_three: "Una volta abilitato questo contatore, non sar\u00e0 possibile disattivarlo n\u00e9 diminuire il numero delle fasi.",
                description_mode_three_post_enable: "Una volta eseguito l'aggiornamento, non sar\u00e0 possibile diminuire il numero delle fasi.",
                note_three: "<strong>Nota: il numero delle fasi aumenter\u00e0 anche sul contatore di consumo.</strong>",
                note_three_post_enable: "<strong>Nota: il numero delle fasi aumenter\u00e0 anche sul contatore di consumo.</strong>",
                title: "Abilitare il contatore?",
                title_mode_three: "Abilitare il contatore con le fasi conteggiate: %{phCount}?",
                title_mode_three_post_enable: "Aggiornare le fasi conteggiate a %{phCount}?",
            },
            enable_production_prompt: "Per visualizzare le letture \u00e8 necessario abilitare il contatore di produzione.",
            freq_analysis: { btn_change_data_type: "Attiva/disattiva dati", plc_activity: "Attivit\u00e0", plc_power_spectrum: "Spettro di potenza", power_line_analy: "Analisi comunicazione su linea elettrica" },
            id: "EID",
            internal_meters: "Contatori interni",
            latest_reading: "Lettura pi\u00f9 recente",
            lifetime_energy: "Ciclo di vita",
            load_contains_storage_message: "Le letture del caricamento includono le attivit\u00e0 di accumulo di energia.",
            measurement_type: "Tipo",
            meter_change_warning: "Non sar\u00e0 possibile modificare queste impostazioni una volta abilitato il contatore.",
            meter_mode: { single: "Monofase (L-N)", split: "Monofase (L-L)", three: "Multifase" },
            meter_readings: "Letture",
            meter_state: { disabled: "Disabilitata", enabled: "Abilitato" },
            meter_status: {
                "check-wiring": "Verifica cablaggio",
                meter_setup: "Configura misurazione ora",
                meters_not_enabled: "Contatori non abilitati",
                normal: "Normale",
                "not-metering": "Contatore non abilitato",
                status_flags: {
                    "negative-production": "Le letture sulla produzione sono negative. Controllare\u00a0l'orientamento dei trasformatori di corrente e dei cavi, confrontandoli con le connessioni di voltaggio.",
                    "negative-total-consumption": "Le letture sul consumo sono negative. Controllare\u00a0l'orientamento dei trasformatori di corrente e dei cavi, confrontandoli con le connessioni di voltaggio.",
                    "power-on-unused-phase": "Si rileva energia su una fase non utilizzata. Controllare\u00a0le connessioni dei cavi dei trasformatori di corrente e le connessioni di voltaggio.",
                    "production-imbalance": "La produzione tra fasi non \u00e8 bilanciata. Controllare\u00a0le connessioni dei cavi dei trasformatori di corrente e le connessioni di voltaggio.",
                },
            },
            meter_type: { "net-consumption": "Netta", "total-consumption": "Totale" },
            meter_type_desc: "Se i\u00a0contatori di consumo si trovano in un circuito in cui\u00a0passa la produzione solare, lasciare il tipo impostato su <b>Netta</b>. In caso contrario, impostarlo su <b>Totale</b>.",
            meter_type_verbose: { "net-consumption": "Carico con produzione solare", "total-consumption": "Solo carico" },
            meter_type_warning: "Verificare di avere impostato il tipo di contatore corretto. Non sar\u00e0 possibile modificare queste impostazioni una volta abilitato il contatore.",
            mode: "Modalit\u00e0",
            multi_phase_options: { mphase_0: "Non selezionata", mphase_1: "L1(A)", mphase_2: "L1(A) + L2(B)", mphase_3: "L1(A) + L2(B) + L3(C)" },
            multi_phase_warning: {
                consumption: {
                    post_continue: "Il contatore non \u00e8 ancora abilitato. Verificare le letture, quindi toccare <strong>Abilita contatore di consumo</strong> nella parte inferiore della schermata.",
                    pre_continue: "Il contatore non \u00e8 ancora abilitato. Selezionare le fasi conteggiate e il circuito conteggiato, quindi toccare <strong>Visualizza letture</strong>.",
                    pre_continue_one: "Il contatore non \u00e8 ancora abilitato. Selezionare il circuito conteggiato, quindi toccare <strong>Visualizza letture</strong>.",
                },
                production: {
                    post_continue: "Il contatore non \u00e8 ancora abilitato. Verificare le letture, quindi toccare <strong>Abilita contatore di produzione</strong> nella parte inferiore della schermata.",
                    pre_continue: "Il contatore non \u00e8 ancora abilitato. Selezionare le fasi conteggiate, quindi toccare <strong>Visualizza letture</strong>.",
                },
            },
            net_consumption_desc:
                "Queste letture riflettono la differenza tra il carico totale dell'abitazione e la produzione di energia solare. Dovrebbero corrispondere approssimativamente alle letture del contatore della rete di distribuzione dell'abitazione.",
            net_consumption_title: "Consumo netto",
            no_consumption: "Nessun contatore di consumo configurato per il dispositivo Envoy in uso.",
            no_meters: "Nessun contatore rilevato.",
            no_production: "Nessun contatore di produzione configurato per il dispositivo Envoy in uso.",
            phase_count: "Fasi conteggiate",
            phase_count_desc: "Selezionare le fasi del contatore cablate.",
            phase_labels: { phase_1: "L1(A)", phase_2: "L2(B)", phase_3: "L3(C)" },
            pmu: {
                add_another: "Aggiungi un altro",
                add_meter: "Aggiungi contatore di potenza",
                config: {
                    add: "Aggiungi contatori selezionati",
                    meters_description: "Contatori di potenza rilevati in questa rete:",
                    network_warning: "Prima di aggiungere un contatore, assicurarsi che Envoy disponga di una connessione Ethernet con un indirizzo IP statico. Effettuare la configurazione sia sul router sia su Envoy.",
                    no_meters_description:
                        "Nessun contatore di potenza rilevato<div class='alert alert-info'><b>Nota:</b></div><div class='alert alert-info'>il rilevamento dei contatori di potenza potrebbe richiedere fino a un'ora.</div><div class='alert alert-info'>Per facilitare il rilevamento, assicurarsi che il contatore di potenza sia nella stessa sottorete locale di Envoy.</div>",
                    remove: "Rimuovi contatore di potenza",
                    title: "Configurazione contatore di potenza",
                },
                labels: {
                    fw_version: "Versione firmware",
                    ip: "Indirizzo IP",
                    mac_address: "Indirizzo Mac",
                    manufacturer: "Produttore",
                    part_number: "Numero di parte",
                    production: "Produzione",
                    serial_number: "Numero di serie",
                    status: "Stato",
                },
                phase_coupler: "Per la comunicazione con Envoy, \u00e8 richiesto un accoppiatore di fase per i microinverter installati su L2 o L3.",
            },
            power_exporting: "(Esportazione nella rete)",
            power_factor: "Fattore di potenza",
            power_importing: "(Importazione della rete)",
            production: "Contatore produzione",
            reactive_energy: "Energia reattiva",
            reactive_power: "Potenza reattiva",
            single_phase_warning: {
                consumption: {
                    post_continue: "Il contatore non \u00e8 ancora abilitato. Verificare le letture, quindi toccare <strong>Abilita contatore di consumo</strong> nella parte inferiore della schermata.",
                    pre_continue: "Il contatore non \u00e8 ancora abilitato. Selezionare il circuito conteggiato, quindi toccare <strong>Visualizza letture</strong>.",
                },
                production: {
                    post_continue: "Il contatore non \u00e8 ancora abilitato. Verificare le letture, quindi toccare <strong>Abilita contatore di produzione</strong> nella parte inferiore della schermata.",
                    pre_continue: "Il contatore non \u00e8 ancora abilitato. Toccare <strong>Visualizza letture</strong> per visualizzare e verificare le letture.",
                },
            },
            status: "Stato",
            title: "Contatori",
            today_energy: "Oggi",
            total_consumption_desc: "Queste letture riflettono il carico totale dell'abitazione.",
            total_consumption_na: "Per visualizzare le letture \u00e8 necessario abilitare il contatore di produzione.",
            total_consumption_title: "Consumo totale",
            type: { eim: "Contatore integrato Envoy", pmu: "Contatore di potenza", rgm: "RGM Enphase" },
            unavailable: "n/a",
            update_settings: "Aggiorna",
            view_readings: "Visualizza letture",
            wizard: {
                batt_off: { counting: { one: "Assicurarsi che il circuito della batteria Enphase sia SPENTO.", other: "Assicurarsi che i circuiti delle batterie Enphase siano SPENTI." } },
                battery_reminder: "<b>Ricordare di accendere il circuito della batteria Enphase.</b>",
                btn_next: "Successivo",
                btn_try_again: "Riprova",
                bullet_load_increase: "Il carico totale dell'abitazione \u00e8 aumentato come previsto?",
                bullet_meters_match: "La lettura del contatore della rete di distribuzione dell'abitazione si avvicina approssimativamente al valore rilevato?",
                bullet_phase_select: "La produzione solare che attraversa la rete viene misurata dal trasformatore di corrente di consumo?",
                bullet_pv_on:
                    "ACCENDERE gli interruttori del circuito fotovoltaico e attendere il completamento del periodo di riconnessione. Il circuito fotovoltaico dovrebbe iniziare a produrre energia in massimo 5 minuti, quindi \u00e8 possibile toccare <strong>Successivo</strong>.",
                bullet_turn_on_load: "Accendere un carico noto, ad esempio una pistola termica, quindi toccare <b>Successivo</b>.",
                check_meters: "Controlla<br>contatori",
                check_title: " Controlla contatore %{meter_type}",
                confirm_ct_routing: "Assicurarsi che tutti i carichi dell'abitazione vengano instradati attraverso i trasformatori di corrente di consumo.",
                consumption_appears_good: "Il contatore di consumo sembra configurato correttamente.",
                consumption_ct_direction: "Verificare che la freccia nei trasformatori di corrente di consumo sia rivolta in direzione del flusso di energia verso il quadro elettrico.",
                consumption_cts_installed: "Sono stati installati i trasformatori di corrente di consumo?",
                consumption_enable_prompt: "Toccare <strong>Abilita contatore di consumo</strong> per completare la configurazione del contatore.",
                consumption_looks_good: "Le letture sul consumo sembrano buone.",
                consumption_neg: "Le letture sul consumo sono negative. Controllare quanto segue, quindi toccare <b>Riprova</b>.",
                consumption_not_enabled: "Contatore di consumo non abilitato",
                consumption_phase_sel_net: "Il trasformatore di corrente di consumo include la produzione solare.",
                consumption_phase_sel_total: "Il trasformatore di corrente di consumo non include la produzione solare.",
                ct_bw_correct: "Assicurarsi che i fili blu e bianco siano collegati alle posizioni corrette nella morsettiera.",
                desc: "Utilizzare la nostra procedura guidata passo passo per verificare che i contatori interni siano cablati e configurati in modo corretto.",
                desc_consumption: "Utilizzare la nostra procedura guidata passo passo per verificare che il contatore di consumo sia cablato e configurato in modo corretto.",
                desc_production: "Utilizzare la nostra procedura guidata passo passo per verificare che il contatore di produzione sia cablato e configurato in modo corretto.",
                done: "Fine",
                enable_button: "Abilita contatore %{meterType}",
                enough_sun: "Assicurarsi che i moduli fotovoltaici abbiano un'esposizione sufficiente alla luce per l'accensione dei microinverter.",
                exit_check: "Uscire dal Meter Check?",
                exit_conf: {
                    desc: "Abbandonare la configurazione guidata del contatore di produzione? Se si intende utilizzare nuovamente la procedura guidata, sar\u00e0 necessario ricominciare dall'inizio.",
                    neg_button: "Torna indietro",
                    title: "Uscire dalla procedura guidata?",
                },
                exit_wizard: "Esci dalla procedura guidata",
                get_started: "Per iniziare",
                load_didnt_increase: "Il carico totale dell'abitazione non \u00e8 aumentato come previsto. Controllare quanto segue, quindi toccare <b>Riprova</b>.",
                manual_prompt: "Configurazione manuale contatore",
                most_common: "(configurazione pi\u00f9 comune)",
                negative: "NO",
                phase_select_prompt: "Selezionare le fasi conteggiate in base alla modalit\u00e0 di cablaggio di Envoy-S: ",
                positive: "S\u00cc",
                power_exporting: "Esportazione",
                power_importing: "Importazione",
                prod_enable_desc1: "Le letture sulla produzione sono vicine allo zero, come previsto.",
                prod_enable_desc2: "Toccare <strong>Abilita contatore di produzione</strong> per completare la configurazione del contatore.",
                prod_meter_enabled: "Il contatore di produzione \u00e8 abilitato.",
                prod_su1_pv_on: {
                    counting: {
                        one: "Assicurarsi che il circuito del sistema fotovoltaico sia ACCESO e che produca energia (il periodo di riconnessione deve essere completo).",
                        other: "Assicurarsi che i circuiti del sistema fotovoltaico siano ACCESI e che producano energia (il periodo di riconnessione deve essere completo).",
                    },
                },
                prod_su2_pv_off: "SPEGNERE gli interruttori del circuito fotovoltaico, quindi toccare <b>Successivo</b>.",
                prod_ts_p4: {
                    desc: "Le letture sulla produzione sono negative. Controllare quanto segue, quindi toccare Riprova.",
                    ts1: {
                        counting: {
                            one: "Assicurarsi che il circuito del sistema fotovoltaico sia ACCESO e che produca energia (il periodo di riconnessione deve essere completo).",
                            other: "Assicurarsi che i circuiti del sistema fotovoltaico siano ACCESI e che producano energia (il periodo di riconnessione deve essere completo).",
                        },
                    },
                    ts2: { counting: { one: "Assicurarsi che il circuito della batteria Enphase sia SPENTO.", other: "Assicurarsi che i circuiti delle batterie Enphase siano SPENTI." } },
                    ts3: {
                        counting: {
                            one: "Verificare che la freccia nel trasformatore di corrente di produzione sia rivolta in direzione del flusso di energia verso il quadro elettrico.",
                            other: "Verificare che la freccia nei trasformatori di corrente di produzione sia rivolta in direzione del flusso di energia verso il quadro elettrico.",
                        },
                    },
                    ts5: {
                        counting: {
                            one: "Verificare che i fili che passano attraverso il trasformatore di corrente di produzione includano solo la generazione di energia fotovoltaica (e nessun carico).",
                            other: "Verificare che i fili che passano attraverso i trasformatori di corrente di produzione includano solo la generazione di energia fotovoltaica (e nessun carico).",
                        },
                    },
                    ts6: "Assicurarsi che i trasformatori di corrente siano configurati sulle fasi corrette rispetto al terminale di alimentazione Envoy.",
                },
                prod_ts_p5: {
                    desc: "Le letture sulla produzione sono maggiori del previsto. Controllare quanto segue, quindi toccare <b>Riprova</b>.",
                    ts2: {
                        counting: {
                            one: "Verificare che i fili che passano attraverso il trasformatore di corrente di produzione includano solo la generazione di energia fotovoltaica (e nessun carico).",
                            other: "Verificare che i fili che passano attraverso i trasformatori di corrente di produzione includano solo la generazione di energia fotovoltaica (e nessun carico). ",
                        },
                    },
                },
                production_not_enabled: "Contatore di produzione non abilitato",
                pv_off: { counting: { one: "Assicurarsi che il circuito fotovoltaico sia SPENTO.", other: "Assicurarsi che i circuiti fotovoltaici siano SPENTI." } },
                pv_reminder: "<b>Ricordare di accendere il circuito fotovoltaico.</b> I microinverter inizieranno a segnalare la produzione di energia dopo circa 5 minuti.",
                readings_dont_match1:
                    "Non riusciamo a determinare il motivo per cui le letture non corrispondano al contatore della rete di distribuzione dell'abitazione. Toccare <b>Riprova</b> per provare a modificare l'impostazione di configurazione relativa alla posizione dei trasformatori di corrente di consumo.",
                readings_dont_match2:
                    "Se il problema non viene risolto, \u00e8 possibile uscire dalla procedura guidata e utilizzare l'opzione <b>Configurazione manuale contatore</b>. Consigliamo di contattare l'assistenza Enphase per ricevere supporto prima di procedere.",
                readings_dont_match_post: "Contattare l'assistenza Enphase per supporto, comunicando che le letture non corrispondono al contatore della rete di distribuzione neanche dopo aver controllato il contatore.",
                reset_timer: "Azzera timer",
                setup_title: " Configura contatore %{meter_type}",
                start_timer: "Avvia timer",
                stop_timer: "Arresta timer",
                sw_off_batt: { counting: { one: "SPEGNERE il circuito della batteria Enphase.", other: "SPEGNERE i circuiti delle batterie Enphase." } },
                sw_off_pv: "SPEGNERE gli interruttori del circuito fotovoltaico.",
                total_cons_not_reduced: "L'accensione del circuito fotovoltaico non ha ridotto il consumo totale. Controllare quanto segue, quindi toccare <b>Riprova</b>.",
                total_load: "Carico totale abitazione",
                trouble_c6_desc1: "Se sono state seguite tutte le istruzioni visualizzate sullo schermo e le letture dei consumi sono ancora negative, ",
                trouble_c8_desc1: "Se sono state seguite tutte le istruzioni visualizzate sullo schermo e il consumo totale ancora non si riduce accendendo il circuito fotovoltaico, ",
                trouble_desc2: "Consigliamo di contattare l'assistenza Enphase al numero <a href='tel:%{dial_num}'>%{disp_num}</a> per ricevere supporto prima di procedere.",
                trouble_install_guide: "Fare riferimento alla <strong>guida all\u2019installazione di Envoy Metered</strong>",
                trouble_manual_prompt: " o uscire dalla procedura guidata e utilizzare l'opzione <strong>Configurazione manuale contatore</strong>.",
                trouble_p0_5: {
                    desc: {
                        counting: {
                            one: "\u00c8 stato indicato che viene conteggiata solo %{selected_phases}, tuttavia \u00e8 presente energia in %{phaseStr}.",
                            other: "\u00c8 stato indicato che vengono conteggiate solo %{selected_phases}, tuttavia \u00e8 presente energia in %{phaseStr}.",
                        },
                    },
                    ts1: "Verificare il cablaggio. Tutte le fasi sono cablate correttamente?",
                    ts_no_resp: "Correggere il cablaggio, quindi toccare <b>Riprova</b>.",
                    ts_yes_resp: "Modificare la selezione delle fasi conteggiate affinch\u00e9 corrispondano al cablaggio, quindi toccare <b>Riprova</b>.",
                },
                trouble_p0_desc1: "Se sono state seguite tutte le istruzioni visualizzate sullo schermo ma si riscontra ancora energia in una fase non utilizzata, ",
                trouble_p4_desc1: "Se sono state seguite tutte le istruzioni visualizzate sullo schermo e le letture della produzione sono ancora negative, ",
                trouble_p5_desc1: "Se sono state seguite tutte le istruzioni visualizzate sullo schermo e le letture della produzione sono maggiori del previsto, ",
                trouble_p7_desc1: "Se sono state seguite tutte le istruzioni visualizzate sullo schermo e il carico dell'abitazione non aumenta come previsto, ",
                trouble_prompt: "Si riscontrano problemi durante il passaggio?",
                unable_to_see_meter:
                    "Se non \u00e8 possibile accedere alle letture della <strong>POTENZA</strong> sul contatore della rete di distribuzione n\u00e9 eseguire la misurazione con un contatore portatile, fare clic su <strong>Continua</strong>.",
            },
        },
        microinverters: {
            condition_clear: { description: 'In tal modo viene inviato un comando per eliminare lo stato "%{condition_flag}" sul microinverter.', title: "Eliminare la condizione?" },
            detected_total_count: "%{detected_count}\u00a0di %{total_count}",
            manage_options: {
                active: "Attiva (%{count})",
                active_count: { counting: { one: "Attiva (%{count})", other: "Attiva (%{count})", zero: "Attiva (%{count})" } },
                delete_btn: "Elimina",
                deleted: "Eliminata (%{count})",
                deleted_count: { counting: { one: "Eliminata (%{count})", other: "Eliminata (%{count})", zero: "Eliminata (%{count})" } },
                restore_btn: "Ripristina",
            },
            nav: { all: "Tutto", manage: "Gestisci", status: "Stato" },
            no_inverters: "Nessun microinverter disponibile.",
            no_inverters_search: 'Impossibile trovare microinverter corrispondenti a "%{search_term}".',
            phase_labels: { "ph-a": "L1(A)", "ph-b": "L2(B)", "ph-c": "L3(C)", "ph-unk": "Nessuna fase selezionata", "ph-updating": "In aggiornamento...", select_one: "Selezionare un elemento" },
            phase_prompt_label: "Selezionare una fase per la batteria CA %{serial_num}",
            scan_close: "Chiudi",
            scan_disabled: "La scansione del dispositivo al momento non \u00e8 disponibile a causa del conflitto con una scansione eseguita su un altro Envoy.",
            scan_inhibited:
                "Per aggiungere altri microinverter al dispositivo Envoy in uso, \u00e8 necessario utilizzare Installer Toolkit per eseguirne il provisioning oppure contattare l'assistenza clienti Enphase per riabilitare la scansione del dispositivo.",
            scan_inprogress: "Scansione dispositivi in corso",
            scan_settings: {
                advanced_options: "Altre opzioni",
                device_total: "Obiettivo dispositivo",
                device_total_description: "Se viene immesso l'obiettivo del dispositivo, Envoy arrester\u00e0 la scansione quando il totale dei microinverter rilevati raggiunger\u00e0 il numero immesso.",
                device_total_error_1: "Il numero totale di dispositivi deve essere compreso tra %{already_detected} (numero di dispositivi gi\u00e0 rilevati) e %{device_total_max}.",
                device_total_error_2: "Il numero totale di dispositivi deve essere maggiore di %{already_detected} (numero di dispositivi gi\u00e0 rilevati).",
                hours: "ore",
                less_options: "Meno opzioni",
                minutes: "minuti",
                optional: "(facoltativo)",
                priority_duration: "Durata priorit\u00e0",
                priority_duration_description: "Se viene immessa la durata di una priorit\u00e0, Envoy render\u00e0 la scansione di dispositivi l'unica attivit\u00e0 per il periodo di tempo specificato.",
                priority_duration_error: "La durata della priorit\u00e0 non pu\u00f2 essere superiore alla durata della scansione.",
                scan_duration: "Durata scansione",
                scan_duration_error: "La durata della scansione deve essere compresa tra 1 minuto e 8 ore.",
                scan_options: { min_120: "2 ore", min_15: "15 minuti", min_240: "4 ore", min_30: "30 minuti", min_480: "8 ore", min_60: "1 ora" },
                time_description: "hh:mm",
            },
            scan_start: "Avvia scansione",
            scan_state: { active: "Attivo", inactive: "Inattiva", scan_disabled: "Disabilitata", scan_inhibited: "Bloccata", scan_suspended: "Sospesa" },
            scan_stop: "Interrompi scansione",
            scan_suspended: "La scansione del dispositivo al momento non \u00e8 disponibile a causa di un aggiornamento del microinverter.",
            status_options: { comm: "Com. (%{count})", comm_nocount: "Com.", power: "Potenza (%{count})", power_nocount: "Potenza", profile: "Profilo (%{count})", profile_nocount: "Profilo" },
        },
        monitoring: {
            connected: "Collegato a Enlighten",
            high_bandwidth: "Standard",
            last_report: "Ultimo report:",
            low_bandwidth: "Banda ridotta",
            more_info: "Altre informazioni",
            no_report: "Nessun report inviato",
            not_connected: "Non collegato a Enlighten",
            report_setting: "Impostazione report",
            report_setting_cellular_desc: "L'Envoy in uso dispone di un modem cellulare Enphase e invia a Enlighten dati su intervalli di 15 minuti quattro volte al giorno (larghezza di banda ridotta).",
            report_setting_diagnostic: "Modalit\u00e0 diagnostica attiva: %{minutes}\u00a0minuti restanti",
            report_setting_enable_diagnostic:
                "\u00c8 possibile abilitare la modalit\u00e0 diagnostica per due ore. In modalit\u00e0 diagnostica, di norma Envoy invier\u00e0 a Enlighten i dati su intervalli di 5 minuti ogni 5 minuti durante le ore diurne.",
            report_setting_high_desc:
                "L'invio di report per l'Envoy in uso \u00e8 impostato sui valori standard. Questa impostazione prevede che durante le ore diurne i dati su intervalli di 5 minuti vengano inviati a Enlighten ogni 5 minuti. \u00c8 possibile selezionare l'utilizzo di una larghezza di banda ridotta, in cui dati su intervalli di 15 minuti vengono inviati a Enlighten quattro volte al giorno.",
            report_setting_low_desc:
                "L'invio di report per l'Envoy in uso \u00e8 impostato su larghezza di banda ridotta. Questa impostazione di Envoy prevede che i dati su intervalli di 15 minuti vengano inviati a Enlighten quattro volte al giorno. \u00c8 possibile selezionare l'utilizzo dei valori standard, in cui durante le ore diurne i dati su intervalli di 5 minuti vengono inviati a Enlighten ogni 5 minuti.",
            report_setting_modal: {
                diagnostic_desc: "Confermare l'abilitazione della modalit\u00e0 diagnostica per due ore.",
                high_desc: "Confermare il passaggio all'invio di report su valori standard.",
                low_desc: "Confermare il passaggio all'invio di report su larghezza di banda ridotta.",
                title: "Modifica impostazioni report",
            },
            report_setting_options: { diagnostic: "Abilitare la modalit\u00e0 diagnostica", high: "Utilizza a valori standard", low: "Utilizza larghezza di banda ridotta" },
            title: "Monitoraggio",
        },
        more: {
            about: {
                cellular_ip: "Indirizzo IP cellulare",
                cellular_mac_address: "Indirizzo Mac cellulare",
                db_size: "Dimensione database",
                db_size_stats: "%{db_size} (%{percent}% pieno)",
                ethernet_ip: "Indirizzo IP Ethernet",
                ethernet_mac_address: "Indirizzo Mac Ethernet",
                is_nonvoy: "Questo Envoy \u00e8 programmato per configurare sistemi non monitorati.",
                part_number: "Numero di parte",
                serial_number: "Numero di serie",
                sw_build_date: "Data di build del software",
                sw_version: "Versione software",
                timezone: "Fuso orario corrente",
                title: "Informazioni sul dispositivo Envoy in uso",
                wifi_ip: "Indirizzo IP Wi-Fi",
                wifi_mac_address: "Indirizzo Mac Wi-Fi",
            },
            datetime: { date: "Data", time: "Ora", timezone: "Fuso orario", title: "Data e ora", update_timezone: "Aggiorna fuso orario" },
            events: { event_date_line: "%{date} (ID evento %{event_id})", no_events: "Nessun evento disponibile.", title: "Eventi" },
            support_connection: {
                close: "Chiudi connessione",
                description_close: "La connessione sicura all'assistenza Enphase \u00e8 aperta.",
                description_open: "La creazione di una connessione sicura all'assistenza Enphase consente di risolvere i problemi del sistema da remoto.",
                open: "Apri connessione",
                title: "Connessione all'assistenza Enphase",
            },
            system: { title: "Sistema" },
        },
        network: {
            diagnostic_tools: {
                check_connectivity: "Verifica connettivit\u00e0 di rete",
                check_network_route: "Verifica route di rete",
                gateway_ip: "IP gateway",
                ip_address: "Indirizzo IP",
                mac_address: "Indirizzo Mac",
                netmask: "Netmask",
                network_connectivity: "Verifica connettivit\u00e0 di rete",
                network_connectivity_desc: "Eseguire una serie di controlli diagnostici di rete di base sull'Envoy in uso.",
                network_route: "Verifica route di rete",
                network_route_desc: "Visualizzare il percorso dell'Envoy verso Internet per individuare le interfacce di rete disponibili.",
                ping: "Ping",
                ping_desc: "Immettere un indirizzo IP o un URL per verificare la connettivit\u00e0 dell'Envoy al router o ad altri host di rete.",
                ping_ip: "Indirizzo ping",
                primary_dns: "Server DNS primario",
                results_title: "Risultati",
                secondary_dns: "Server DNS secondario",
                timestamp: "Ultima verifica",
                title: "Strumenti di diagnostica",
            },
            network_configuration: { active_network: "Attivo", title: "Configurazione di rete", types: { cellular: "Cellulare", ethernet: "Ethernet", none: "Nessuna", wifi: "Wi-Fi" } },
            network_connectivity_check: {
                connectivity_enlighten: "Connettivit\u00e0 a Enlighten",
                connectivity_enphase: "Connettivit\u00e0 a Enphase",
                enlighten_dns_lookup: "Ricerca DNS Enlighten",
                enphase_dns_lookup: "Ricerca DNS Enphase",
                gateway_ping: "Ping gateway",
                google_dns_lookup: "Ricerca DNS Google",
                google_ping: "Ping Google",
                primary_dns_ping: "Ping DNS primario",
                primary_interface: "Rete verificata",
                result: { fail: "Operazione non riuscita", pass: "Buona" },
                secondary_dns_ping: "Ping DNS secondario",
                timestamp: "Ultima verifica",
                title: "Risultati",
            },
            network_route_check: {
                destination: "Destinazione",
                flags: "Flag",
                gateway: "Gateway",
                genmask: "Netmask",
                metric: "Metriche",
                network: "Rete",
                ref: "Riferimento",
                results_title: "Risultati",
                timestamp: "Ultima verifica",
                use: "Utilizzo",
            },
            title: "Rete",
        },
        not_available: "Non disponibile",
        nsr: {
            line_status_heading: "Linee collegate:",
            line_status_help_text:
                "<ul><li>Almeno una delle linee rel\u00e8 Q non \u00e8 collegata.</li><li>Verificare che il rel\u00e8 Q sia installato e cablato correttamente.</li><li>Premere il pulsante di test per riprovare.</li><li>Se questa configurazione \u00e8 intenzionale, \u00e8 possibile ignorare il presente messaggio.</li></ul>",
            line_status_help_title: "Guida per la connessione linee rel\u00e8 Q",
            lines: "Linea %{num}:",
            reason_strings: "motivo sconosciuto;Errore hardware;Pressione pulsante;Imposizione comando da Envoy;Errore tensione CA linea 1;Errore tensione CA linea 2;Errore tensione CA linea 3;Errore frequenza CA linea 1;Errore corrente CC;Tensione CA linea 1 bassa;Tensione CA linea 1 alta;Frequenza CA linea 1 bassa;Frequenza CA linea 1 alta;Tensione CA linea 2 bassa;Tensione CA linea 2 alta;Tensione CA linea 3 bassa;Tensione CA linea 3 alta;Corrente CC bassa;Corrente CC alta;Rocof;CA media linea 1;CA media linea 2;CA media linea 3".split(
                ";"
            ),
            relay_heading: "Rel\u00e8:",
        },
        nsrs: {
            manage_options: {
                active: "Attiva (%{count})",
                active_count: { counting: { one: "Attiva (%{count})", other: "Attiva (%{count})", zero: "Attiva (%{count})" } },
                deleted: "Eliminata (%{count})",
                deleted_count: { counting: { one: "Eliminata (%{count})", other: "Eliminata (%{count})", zero: "Eliminata (%{count})" } },
            },
            nav: { all: "Tutte", manage: "Gestisci", status: "Stato" },
            no_inverters: "Nessun rel\u00e8 Q disponibile",
            no_inverters_search: 'Impossibile trovare rel\u00e8 Q corrispondenti a "%{search_term}".',
            status_options: { comm_nocount: "Com", power_nocount: "Funzionante", profile_nocount: "Config" },
            title: "[IT] Relays Q",
        },
        overview: {
            ac_batteries: {
                communicating: "Comunicazione in corso",
                default_profile_set: "Profilo di rete preinstallato",
                detected: "Rilevate",
                factory_installed: "Preinstallato",
                factory_installed_config: "Configurazioni preinstallate",
                not_set: "Non impostato",
                producing_power: "Funzionante",
                profile_set: "configurata",
                total: "Batterie CA",
            },
            ac_batteries_counts: {
                communicating: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>In comunicazione</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>in comunicazione</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>in comunicazione</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>in comunicazione</span>",
                    },
                },
                detected: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Rilevati</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>rilevati</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>rilevati</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>rilevati</span>",
                    },
                },
                producing_power: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>In funzione</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>in funzione</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>in funzione</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>in funzione</span>",
                    },
                },
                profile_set: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Configurate</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>configurata</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>configurate</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>configurate</span>",
                    },
                },
                total: {
                    counting: {
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>batteria CA</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>batterie CA</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>batterie CA</span>",
                    },
                },
            },
            ac_battery_state: {
                charging: "In carica",
                discharging: "In esaurimento",
                full: "Piena",
                idle: "Inattiva",
                soc_full: "%{operating_state} (stato della carica %{percent}%)",
                soc_percent: "(Stato della carica %{percent}%)",
                soc_state: "%{operating_state}",
            },
            alerts: "Allarmi",
            consumption: "Contatore di consumo",
            consumption_meter_label: "Consumo",
            current_consumption: "Consumo energetico corrente",
            current_production: "Produzione di energia corrente",
            devices: { detected: "Rilevate" },
            encharge_batteries: {
                communicating: "[IT] Communicating",
                default_profile_set: "[IT] Factory-Installed Grid Profile",
                detected: "[IT] Detected",
                factory_installed: "[IT] Factory-Installed",
                factory_installed_config: "[IT] Factory-Installed Configurations",
                not_set: "[IT] Not Set",
                producing_power: "[IT] Operating",
                profile_set: "[IT] Configured",
                total: "[IT] AC Batteries",
            },
            enpowers: { communicating: "[IT] Communicating", default_profile_set: "[IT] Factory-Installed Grid Profile", detected: "[IT] Detected", profile_set: "[IT] Profile Set", total: "[IT] Enpower Devices" },
            enpowers_summary: { connected: { false: "[IT] Not Connected to Enpower", true: "[IT] Connected to Enpower" }, grid_status: { false: "[IT] OFF", title: "[IT] Grid Status", true: "[IT] ON" }, title: "[IT] Enpower" },
            includes_storage_label: "(include attivit\u00e0 di accumulo di energia)",
            inverter_production: "Produzione microinverter",
            inverters_update_status: { "in-progress": "Aggiornamento microinverter in corso. Questa operazione generalmente richiede tra i 15 e i 30 minuti." },
            ip_address: "Indirizzo IP",
            latest_power: "Ultima potenza",
            lifetime: "Ciclo di vita",
            lifetime_energy: "Energia dall'installazione",
            meter_production: "Contatore produzione",
            metering: "Misurazione",
            microinverter_counts: {
                communicating: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>In comunicazione</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>in comunicazione</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>in comunicazione</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>in comunicazione</span>",
                    },
                },
                detected: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Rilevati</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>rilevato</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>rilevati</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>rilevati</span>",
                    },
                },
                producing_power: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>In produzione di energia</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>in produzione di energia</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>in produzione di energia</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>in produzione di energia</span>",
                    },
                },
                profile_set: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Profilo impostato</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>profilo impostato</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>profilo impostato</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>profilo impostato</span>",
                    },
                },
                total: {
                    counting: {
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>microinverter</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>microinverter</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>microinverter</span>",
                    },
                },
            },
            microinverters: {
                communicating: "Comunicazione in corso",
                default_profile_set: "Profilo di rete preinstallato",
                detected: "Rilevate",
                producing_power: "Produzione potenza in corso",
                profile_set: "Profilo impostato",
                total: "Microinverter",
            },
            net_power: "Potenza netta",
            new_microinverter_counts: {
                communicating: {
                    counting_acb: { one: "Comunicazione in corso", other: "Comunicazione in corso", zero: "Comunicazione in corso" },
                    counting_encharge: { one: "[IT] Communicating", other: "[IT] Communicating", zero: "[IT] Communicating" },
                    counting_microinverters: { one: "Comunicazione in corso", other: "Comunicazione in corso", zero: "Comunicazione in corso" },
                    counting_nsr: { one: "Comunicazione in corso", other: "Comunicazione in corso", zero: "Comunicazione in corso" },
                },
                detected: {
                    counting_acb: { one: "Rilevate", other: "Rilevate", zero: "Rilevate" },
                    counting_encharge: { one: "[IT] Detected", other: "[IT] Detected", zero: "[IT] Detected" },
                    counting_microinverters: { one: "Rilevate", other: "Rilevate", zero: "Rilevate" },
                    counting_nsr: { one: "Rilevate", other: "Rilevate", zero: "Rilevate" },
                },
                producing_power: {
                    counting_acb: { one: "Funzionante", other: "Funzionante", zero: "Funzionante" },
                    counting_encharge: { one: "[IT] Operating", other: "[IT] Operating", zero: "[IT] Operating" },
                    counting_microinverters: { one: "Produzione potenza in corso", other: "Produzione potenza in corso", zero: "Produzione potenza in corso" },
                    counting_nsr: { one: "Funzionante", other: "Funzionante", zero: "Funzionante" },
                },
                profile_set: {
                    counting_acb: { one: "configurata", other: "configurata", zero: "configurata" },
                    counting_encharge: { one: "[IT] Configured", other: "[IT] Configured", zero: "[IT] Configured" },
                    counting_microinverters: { one: "Profilo impostato", other: "Profilo impostato", zero: "Profilo impostato" },
                    counting_nsr: { one: "configurata", other: "configurata", zero: "configurata" },
                },
                total: {
                    counting_acb: { one: "Batteria CA", other: "Batterie CA", zero: "Batterie CA" },
                    counting_encharge: { one: "[IT] Encharge Battery", other: "[IT] Encharge Batteries", zero: "[IT] Encharge Batteries" },
                    counting_microinverters: { one: "Microinverter", other: "Microinverter", zero: "Microinverter" },
                    counting_nsr: { one: "Rel\u00e8 Q", other: "Rel\u00e8 Q", zero: "Rel\u00e8 Q" },
                },
            },
            nsr: {
                detected_total_count: "%{detected_count}\u00a0di %{total_count}",
                profile_label: "Profilo",
                profile_not_set: "Non configurato",
                profile_set: "configurata",
                relay_state_closed: "Chiuso",
                relay_state_label: "Stato",
                relay_state_open: "Aperto",
                section_title: "Rel\u00e8 Q",
            },
            power_exporting: "Esportazione della rete",
            power_importing: "Importazione nella rete",
            production: "Produzione",
            production_meter_label: "Produzione",
            profile: "Profilo",
            scan_modal: {
                description: "Non \u00e8 stato rilevato alcun microinverter. Avviare una scansione dispositivi?",
                description_battery: "Non sono state rilevate batterie. Avviare una scansione dispositivi?",
                description_both: "Non sono stati rilevati microinverter n\u00e9 batterie. Avviare una scansione dispositivi?",
                description_nsr: "Non sono state rilevate Q-Relay. Avviare una scansione dispositivi?",
                scan_timeout_description:
                    "<p>Sono stati rilevati solo %{detected_count} microinverter su %{target_count}. Riavviare la scansione dispositivi per rilevare i microinverter non individuati o <a href='#' class='open-target-count'>modificare il numero dei microinverter previsti</a>?</p>",
                scan_timeout_description_battery: "<p>Sono state rilevato solo %{detected_count} batterie su %{target_count}.",
                scan_timeout_description_battery_second: {
                    one: "Riavviare la scansione dispositivi per rilevare la batteria non individuata o <a href='#' class='open-target-count'>modificare il numero delle batterie previste</a>?</p>",
                    other: "Riavviare la scansione dispositivi per rilevare le batterie non individuate o <a href='#' class='open-target-count'>modificare il numero delle batterie previste</a>?</p>",
                },
                scan_timeout_description_both:
                    "<p>Sono stati rilevati solo %{detected_count_micro} microinverter su %{target_count_micro} e %{detected_count_battery} batterie su %{target_count_battery}. Riavviare la scansione dispositivi per rilevare i dispositivi non individuati o <a href='#' class='open-target-count'>modificare il numero dei dispositivi previsti</a>?</p>",
                scan_timeout_description_micro: "<p>Sono stati rilevati solo %{detected_count} microinverter su %{target_count}.",
                scan_timeout_description_micro_second: {
                    one: "Riavviare la scansione dispositivi per rilevare il microinverter non individuato o <a href='#' class='open-target-count'>modificare il numero dei microinverter previsti</a>?</p>",
                    other: "Riavviare la scansione dispositivi per rilevare i microinverter non individuati o <a href='#' class='open-target-count'>modificare il numero dei microinverter previsti</a>?</p>",
                },
                scan_timeout_title: "Riavviare la scansione del dispositivo?",
                title: "Avviare scansione dispositivo?",
            },
            scan_state: { active: "Scansione attiva", inactive: "Scansione inattiva", scan_inhibited: "Scansione bloccata" },
            set_expected: { error: "Il valore deve essere un numero compreso fra 1 e 600.", label: "Inserire il numero di microinverter che dovrebbero inviare report a questo Envoy.", prompt: "# microinverter" },
            set_expected_acb: { error: "Il valore deve essere un numero compreso fra 0 e 39.", label: "Inserire il numero di batterie CA che dovrebbero inviare report al dispositivo Envoy.", prompt: "# Batterie CA" },
            set_expected_nsr: { error: "Il valore deve essere un numero compreso fra 0 e 3.", label: "Inserire il numero di Q-Relay CA che dovrebbero inviare report al dispositivo Envoy.", prompt: "# Q-Relays" },
            software_version: "Versione software",
            stat_title: "Potenza ed energia",
            storage: "Batterie CA",
            tariff_rate_structure: "Struttura della tariffazione/tasso",
        },
        pending: "(in attesa...)",
        power: {
            charging: "In carica",
            description:
                "I microinverter produrranno potenza finch\u00e9 ci saranno condizioni di luce solare idonee e tensione e frequenza della rete di distribuzione saranno comprese negli intervalli ammessi (specificati dalle norme locali).",
            discharging: "In esaurimento",
            idle: "Inattiva",
            last_report: "Ultimo report:",
            not_operating: "Non funzionante",
            not_producing: "Nessuna produzione",
            operating: "Funzionante",
            producing: "Produzione potenza in corso",
            title: "Microinverter che producono potenza",
        },
        profiles: {
            ac_batteries: {
                configuration_label: "Configurazione",
                false: "No",
                no_profile_description: "Fornire le informazioni seguenti per la configurazione delle batterie prima che entrino in funzione.",
                no_profile_warning: "Il profilo di rete qui selezionato sar\u00e0 applicato anche ai microinverter installati con questo sistema.",
                profile_complete: "Configurazione completata",
                profile_incomplete: "Configurazione incompleta",
                profile_propagating: "Configurazione batterie in corso",
                true: "S\u00ec",
            },
            apply: "Applica profilo rete",
            config_batteries: "Configura batterie",
            country_label: "Specifiche normative del paese",
            encharge_batteries: {
                configuration_label: "[IT] Configuration",
                no_profile_description: "[IT] You must provide the following information to configure the batteries before they will begin to operate.",
                no_profile_warning: "[IT] The grid profile you select here will also be applied to the Enpower, Microinverters, and AC Batteries installed with this system.",
                profile_complete: "[IT] Configuration Complete",
                profile_incomplete: "[IT] Configuration Incomplete",
                profile_propagating: "[IT] Configuring Batteries",
            },
            enpowers: {
                no_profile_description: "[IT] You must provide the following information to configure the enpower before it will begin to operate.",
                no_profile_warning: "[IT] The grid profile you select here will also be applied to the Microinverters, AC Batteries and Encharges installed with this system.",
                profile_complete: "[IT] Configuration Complete",
                profile_incomplete: "[IT] Configuration Incomplete",
                profile_propagating: "[IT] Configuring Enpower",
            },
            eu_no_profile_description: "\u00c8 necessario selezionare un profilo di rete specifico per la localit\u00e0 affinch\u00e9 i microinverter inizino a produrre potenza.",
            eu_no_profile_label: "Nessun profilo",
            eu_no_profile_vogel_description: "\u00c8 necessario selezionare un profilo di rete specifico per la localit\u00e0.",
            microinverters: {
                configuration_label: "Configurazione",
                no_profile_warning: "Il profilo di rete qui selezionato sar\u00e0 applicato anche alle batterie CA installate con questo sistema.",
                profile_complete: "Propagazione completata",
                profile_incomplete: "Propagazione non completata",
                profile_propagating: "Propagazione profilo in corso",
            },
            na_no_profile_description: "I microinverter stanno usando le impostazioni del profilo di rete preinstallato. Di seguito \u00e8 possibile selezionare un profilo di rete specifico per la localit\u00e0.",
            na_no_profile_label: "Impostazioni predefinite",
            no_profile_warning: "Il profilo di rete qui selezionato sar\u00e0 applicato anche alle batterie CA installate con questo sistema.",
            no_profiles: "Non sono disponibili profili. \u00c8 necessario connettere Envoy a Internet ed effettuare la selezione tramite Enlighten o utilizzare Installer Toolkit per scaricare un pacchetto del profilo e caricarlo su Envoy.",
            no_profiles_info:
                "Se l'impianto si trova in un'area che richiede impostazioni specifiche del profilo di rete, \u00e8 necessario connettere Envoy a Internet ed effettuare la selezione tramite Enlighten o utilizzare Installer Toolkit per scaricare un pacchetto del profilo e caricarlo su Envoy.",
            nsrs: {
                configuration_label: "Configurazione",
                no_profile_warning: "Il profilo di rete qui selezionato sar\u00e0 applicato anche alle batterie CA installate con questo sistema.",
                profile_complete: "Propagazione completata",
                profile_incomplete: "Propagazione non completata",
                profile_propagating: "Propagazione profilo in corso",
            },
            profile_complete: "Propagazione completata",
            profile_incomplete: "Propagazione non completata",
            profile_label: "Profilo rete",
            profile_propagating: "Propagazione profilo in corso",
            title: "Profilo rete",
            tpm_state: { 0: "In attesa", 1: "Propagazione in corso", 2: "Profilo impostato", 3: "Non impostabile", 4: "Operazione non riuscita", 5: "Aggiornamento", 6: "ALT-V/F" },
        },
        public_nav: {
            change_password: "Modifica password",
            copyright_html: "&copy;2008-%{current_year} Enphase Energy Inc. Tutti i diritti riservati.",
            enphase: "Enphase Energy",
            installer_login: "Accesso installatore",
            language: "Lingua",
            privacy: "Informativa sulla privacy",
            settings: "Impostazioni",
            terms: "Termini",
        },
        select2: {
            format_matches: { counting: { one: "Un risultato disponibile, premere Invio per selezionarlo.", other: "%{count} risultati disponibili, utilizzare i tasti freccia per spostarsi da un elemento all'altro." } },
            input_too_long: { counting: { one: "Eliminare %{count} carattere", other: "Eliminare %{count} caratteri" } },
            input_too_short: "Immettere %{count} o pi\u00f9 caratteri",
            loading_more: "Caricamento ulteriori risultati in corso...",
            no_matches: "Nessuna corrispondenza trovata per %{term}",
            no_results: "Nessuna corrispondenza trovata",
            searching: "Ricerca in corso...",
            selection_too_big: { counting: { one: "\u00c8 possibile selezionare solo %{count} elemento.", other: "\u00c8 possibile selezionare solo %{count} elementi." } },
        },
        serial_number: "Numero di serie",
        system: {
            power_control: {
                disabled_desc: "Produzione di energia disabilitata",
                enabled_desc: "Produzione di energia abilitata",
                modal: {
                    desc_set_off: "L'operazione <strong>disabilita</strong> la produzione di energia.",
                    desc_set_on: "L'operazione <strong>abilita</strong> la produzione di energia.",
                    title: "Controllo potenza sistema",
                    verify: "Confermare?",
                },
            },
        },
        tariff: {
            add_peak: "Aggiungi %{num} di picco",
            add_tier: "Aggiungi fascia %{num}",
            base_rate_label: "Tariffa di base",
            baseline: "Base",
            charge_at_night: "Carica batterie dalla rete di notte",
            chg_at_night_desc: "Abilitare questa opzione per impostare la carica delle batterie dalla rete durante la notte.",
            config_details: "Dettagli configurazione",
            day_names: ["Giorno feriale", "Fine settimana"],
            greater_than: "Maggiore di",
            hour_connector: "a",
            month_connector: "attraverso",
            not_set: "Non impostato",
            off_peak_label: "Non di punta",
            peak_hours_label: "%{num} ore di picco",
            peak_label: "Picco %{num}",
            peak_rate_label: "Tariffa %{num} di picco",
            peak_start_time: "Ora di inizio picco:",
            per_day: "al giorno",
            per_month: "per mese",
            percent_of_baseline: "% della base",
            remove: "Rimuovi",
            seasonal_rate_desc: "Abilitare questa opzione se la tariffa varia in base alla stagione.",
            seasonal_select_label: "La tariffa varia in base alle stagioni",
            select_type: "Seleziona un tipo",
            single_rate: "Tasso singolo",
            summer_rate_label: "Tariffe estive",
            tariff_rate_title: "Struttura della tariffazione/tasso",
            tariff_type_warning:
                "Per le strutture con tariffa basata sul tempo di utilizzo, \u00e8 necessario fornire almeno una tariffa di picco. In assenza di tariffe di picco, selezionare Tariffa singola anzich\u00e9 Tempo di utilizzo.",
            tier: "Fascia %{num}",
            tiered: "Tariffa differenziata",
            time_of_use: "Tempo di utilizzo",
            unit_label: "kWh",
            up_to: "Fino a",
            weekday_add_peak: "Aggiungi %{num} di picco per giorni feriali",
            weekday_base_rate_label: "Tariffa di base per giorni feriali",
            weekday_off_peak_rate_label: "Tariffa ore non di punta per giorni feriali",
            weekday_peak_hours_label: "%{num} ore di picco per giorni feriali",
            weekday_peak_rate_label: "Tariffa %{num} di picco per giorni feriali",
            weekdays_label: "Giorno feriale",
            weekdays_rate_label: "Giorno feriale",
            weekend_add_peak: "Aggiungi %{num} di picco per fine settimana",
            weekend_base_rate_label: "Tariffa di base per fine settimana",
            weekend_label: "Fine settimana",
            weekend_off_peak_rate_label: "Tariffa ore non di punta per fine settimana",
            weekend_peak_hours_label: "%{num} ore di picco per fine settimana",
            weekend_peak_rate_label: "Tariffa %{num} di picco per fine settimana",
            weekend_rate_desc: "Abilitare questa opzione se la tariffa varia a seconda che si tratti di giorni feriali o fine settimana.",
            weekend_select_label: "La tariffa varia tra giorni feriali e fine settimana",
            winter_months_desc: "Per impostare i mesi invernali, selezionare i mesi estivi sopra.",
            winter_rate_label: "Tariffe invernali",
            zero_not_allowed: "Zero non \u00e8 un valore valido",
        },
        wifi: {
            ap_mode_config: {
                confirm_switch_modal: {
                    description: "La comunicazione con Envoy potrebbe essere interrotta e potrebbe essere necessario connettersi nuovamente.",
                    title_false: "Disabilitare modalit\u00e0 AP?",
                    title_true: "Abilitare modalit\u00e0 AP?",
                },
                description_disabled: "Abilitare la modalit\u00e0 AP per consentire a Envoy di funzionare come Access Point (AP) wireless. In questo modo i dispositivi wireless nelle vicinanze potranno connettersi a Envoy.",
                description_enabled: "Al momento Envoy funziona come Access Point (AP) wireless.",
                disable: "Disabilit\u00e0 modalit\u00e0 AP",
                enable: "Abilita modalit\u00e0 AP",
                time_remaining: { one: "Tempo rimanente: %{count} ora %{minutes} minuti", other: "Tempo rimanente: %{count} ore %{minutes} minuti", zero: "Tempo rimanente: %{count} ore %{minutes} minuti" },
                title_disabled: "Modalit\u00e0 AP disabilitata",
                title_enabled: "Modalit\u00e0 AP abilitata",
            },
            available_networks: "Reti disponibili",
            connect: {
                confirm_connect: "Conferma rete",
                connect_to_site: "Connettere a %{site_name}?",
                connect_warning: "Nota: La comunicazione con Envoy potrebbe essere interrotta e potrebbe essere necessario connettersi nuovamente.",
                connection_failure_explanation: "Impossibile effettuare il collegamento alla rete %{site_name}.",
                wait_join: "Attendere il collegamento di Envoy a %{site_name}...",
            },
            connect_incomplete: { description: "La conferma della connessione a %{site_name} sta richiedendo pi\u00f9 del previsto. Se il collegamento di rete non \u00e8 stato effettuato, riprovare.", title: "Spiacente..." },
            connect_success: {
                description:
                    "<p>Envoy si \u00e8 connesso a %{site_name}.</p><p><a href='#' class='open-overview'>Torna alla panoramica.</a></p><p>Nota: l'aggiornamento dello stato di connessione di Enlighten pu\u00f2 richiedere fino a un minuto.</p>",
                title: "Connessione stabilita",
            },
            connection_lost: "La connessione tra il dispositivo ed Envoy si \u00e8 interrotta.",
            connection_status: { attempting_to_connect: "Tentativo di connessione...", connecting: "Connessione...", connection_lost: "Connessione interrotta", failed: "Connessione non riuscita", not_connected: "Non connesso" },
            country_config: {
                description: "Selezionare il proprio paese (ISO 3166-1 codice alpha-2) per ottimizzare l'intensit\u00e0 del segnale Wi-Fi secondo le disposizioni dell'ente normativo nazionale.",
                optional: "(facoltativo)",
                select_prompt: "Seleziona il paese",
                title: "Paese",
                update: "Aggiorna paese",
            },
            current_connection: "Collegato a <span class='network_name'>%{network_name}</span>",
            enter_password: "Immettere la password per %{site_name}.",
            forget: {
                forget_network_header: 'Non memorizzare la rete Wi-Fi "%{network_name}"?',
                forget_warning: "Nota: La comunicazione con Envoy potrebbe essere interrotta e potrebbe essere necessario connettersi nuovamente.",
                ok_to_forget: "Per la connessione a Enlighten di Envoy non sar\u00e0 pi\u00f9 utilizzata questa rete.",
                wait_forget: "Attendere che Envoy venga scollegato dalla rete...",
            },
            forget_failed: { description: "Tentativo di dissociare la rete Wi-Fi fallito. Se il problema persiste, contattare l'assistenza clienti.", title: "Spiacente..." },
            forget_incomplete: {
                description:
                    "La conferma della dissociazione della rete Wi-Fi sta richiedendo pi\u00f9 tempo del previsto. Di conseguenza, \u00e8 improbabile che sia consentita ancora la comunicazione tra Envoy e l'applicazione. Verificare le impostazioni di rete sul dispositivo ed eseguire nuovamente la connessione a Envoy.",
                title: "Spiacente...",
            },
            gateway_ip: "IP gateway: ",
            ip_address: "Indirizzo IP: ",
            join_another_network: { button: "Selezionare un'altra rete", title: "Selezionare un'altra rete" },
            join_network: { button: "Visualizza reti", title: "Selezionare la rete" },
            network_changed_explanation:
                "La connessione di rete del dispositivo \u00e8 cambiata. Di conseguenza, \u00e8 improbabile che sia consentita ancora la comunicazione tra Envoy e l'applicazione. Verificare le impostazioni di rete sul dispositivo ed eseguire nuovamente la connessione a Envoy.",
            network_changed_title: "Connessione di rete cambiata",
            no_networks_found: "Nessuna rete trovata",
            not_configured_prompt: "Selezionare una rete wireless per questo dispositivo Envoy da utilizzare per la connessione a Enlighten.",
            other_network: {
                confirm_switch_modal: { description: "La comunicazione con Envoy potrebbe essere interrotta e potrebbe essere necessario connettersi nuovamente.", title: "Connettere ad altra rete?" },
                connect: "Connetti",
                description: "Connettere a un punto di accesso non configurato per inviare il proprio ESSID.",
                name: "Nome (ESSID)",
                password: "Password",
                security: "Protezione",
                security_mode: { None: "Nessuna", WEP: "WEP", "WPA-PSK": "Personale WPA", "WPA2-PSK": "Personale WPA2" },
                title: "Connetti altra rete",
                wpa_algorithm: "Algoritmo WPA",
                wpa_algorithm_type: { CCMP: "CCMP", None: "Nessuna", TKIP: "TKIP", "TKIP+CCMP": "TKIP + CCMP" },
            },
            page_title: "Configurazione Wi-Fi",
            password_required: "Password obbligatoria",
            please_wait: "Attendere",
            title: "Rete Wi-Fi",
            unsupported_site: "Rete non supportata",
            unsupported_site_explanation: "Questa rete si avvale di un metodo di protezione non supportato da Envoy.",
            wifi: "Wi-Fi",
            wifi_hardware_missing: "Hardware Wi-Fi non trovato",
            wifi_waiting_note: "Questo processo potrebbe richiedere fino a 3 minuti e successivamente potrebbe essere necessario connettersi di nuovo a Envoy.",
        },
        wireless_connection: {
            connected: "[IT] Connected",
            last_report: "[IT] Last Report:",
            not_connected: "[IT] Not Connected",
            signal_strength: "[IT] Signal Strength:",
            subghz: "[IT] Sub GHz",
            title: "[IT] Wireless Connection Links",
            zigbee_2_4: "[IT] 2.4 GHz",
        },
    },
    lwui: {
        admin: {
            cross_domain_traffic: { status_msgs: { cross_domain_traffic: "Traffico tra domini incrociati segnalato", no_cross_domain_traffic: "Nessun traffico tra domini incrociati segnalato", updated: "Aggiornato" } },
            network_connectivity: {
                error_msgs: {
                    bad_device_ip: "Indirizzo IP e/o maschera di rete non validi.",
                    bad_gateway_address: "Indirizzo IP gateway non valido.",
                    gateway_subnet: "Indirizzo IP gateway non compreso nella subnet %{subnet}",
                    invalid_primary_dns: "L'indirizzo DNS primario non \u00e8 un indirizzo IP valido.",
                    invalid_secondary_dns: "L'indirizzo DNS secondario non \u00e8 un indirizzo IP valido.",
                },
            },
            security_admin: {
                status_msg: {
                    new_confirm_password_mismatch: "La password nuova e la password di conferma non corrispondono",
                    old_password_mismatch: "Vecchia password non corretta",
                    password_file_missing: "File password amministratore mancanti",
                    password_update_failure: "Aggiornamento password non riuscito",
                    password_update_failure_error: "Errore: Modifica password non riuscita",
                    password_update_successful: "Aggiornamento password riuscito",
                },
            },
            wireless_connectivity: {
                advanced_settings: {
                    button_apply: "Applica",
                    regulatory_domain: "Codice paese (ISO 3166-1 alpha-2)",
                    regulatory_legend: "Selezionare il proprio paese dall'elenco.  Definisce frequenze radio e potenza della trasmissione consentite secondo le disposizioni dell'ente normativo nazionale.",
                },
                ap_mode: { active: "attivo", inactive: "inattivo", name: "Nome AP:", start: "Avvia modalit\u00e0 AP", status: "Stato modalit\u00e0 AP:", stop: "Arresta modalit\u00e0 AP", timeout: "minuti al timeout dell'AP:" },
                busy_joining: "Tentativo di connessione alla rete in corso",
                busy_scanning: "Ricerca reti Wi-Fi in corso",
                busy_testing: "Test della connessione in corso",
                connection_test: { failed: "Test della connessione non riuscito.  Verificare le impostazioni.", successful: "Test della connessione completato correttamente.  \u00c8 possibile connettersi alla rete." },
                current_settings: {
                    dhcp_waiting: "Richiesta dell'indirizzo DHCP dalla rete Wi-Fi in corso",
                    forget_network: "Non memorizzare questa rete",
                    label_gateway_ip: "IP gateway",
                    link_status: "Stato",
                    no_config: "Nessuna connessione Wi-Fi configurata",
                    no_device: "Nessun dispositivo Wi-Fi compatibile rilevato",
                    status_connected: "Connessione stabilita",
                    status_connecting: "Connessione in corso",
                    status_stopped: "Connessione Wi-Fi interrotta",
                    unavailable: "non disponibile",
                    verified_config: "Rete Wi-Fi verificata",
                },
                device_information: {
                    device: "Dispositivo",
                    driver_name: "Nome driver",
                    hw_version: "Versione hardware",
                    mac_address: "Indirizzo MAC",
                    manufacturer: "Produttore",
                    model: "Modello",
                    usb_slot_num: "Numero slot USB",
                    usb_spec_version: "Versione specifiche USB",
                    vendor: "Fornitore",
                },
                forget_msg: "Questa operazione eliminer\u00e0 la configurazione wireless corrente e interromper\u00e0 la connessione.  Se \u00e8 stata effettuata una connessione wireless, la connessione a Envoy sar\u00e0 interrotta.",
                legend_advanced_settings: "Impostazioni avanzate",
                legend_ap_mode: "Modalit\u00e0 AP Envoy",
                legend_current_settings: "Impostazioni Wi-Fi correnti",
                legend_device_information: "Informazioni dispositivo",
                legend_manual_configuration: "Configurazione manuale",
                legend_site_survey: "Reti Wi-Fi disponibili",
                manual_configuration: {
                    algorithm: "Algoritmo WPA",
                    button_clear: "Cancella modulo",
                    button_connect: "Connetti alla rete",
                    button_test: "Prova connessione",
                    channel: "Canale wireless",
                    essid_length: "L'ESSID deve essere compreso fra 1 e 32 caratteri",
                    info_msg: "Le impostazioni di seguito sono necessarie soltanto per connettersi con un punto d'accesso non configurato per inviare il proprio ESSID.",
                    mhz: "MHz",
                    network_name: "Nome rete wireless (ESSID)",
                    password: "Password/PSK",
                    password_unneeded: "I sistemi aperti non richiedono una password",
                    password_wep: "Le chiavi WEP devono contenere 10, 26 o 58 cifre esadecimali.",
                    password_wep_chars: "Le chiavi WEP devono contenere soltanto numeri e lettere dalla A alla F",
                    password_wpa: "Le password WPA/WPA2-PSK devono essere comprese fra 8 e 63 caratteri",
                    security_mode: "Modalit\u00e0 protezione wireless",
                },
                site_survey: { button_rescan: "Esegui nuova ricerca", info_msg: "Selezionare una rete dall'elenco.", none_found: "Nessuna rete trovata" },
                test_msg: "Verr\u00e0 eseguito un test della connessione Wi-Fi per confermare che le impostazioni siano valide.  Durante tale test, la connessione a Envoy sar\u00e0 temporaneamente interrotta.",
            },
        },
        home: {
            event_tbl_col_hdr: { date: "Data", details: "Dettagli", device: "Dispositivo", event: "Evento", eventId: "ID evento" },
            warnings: {
                acb_critical_temp: "\u00c8 stata rilevata una temperatura interna elevata in una o pi\u00f9 batterie CA. Per le istruzioni consultare il Manuale di installazione e uso.",
                acb_needs_meters:
                    "Per completare il commissioning del sistema, \u00e8 necessario un dispositivo Envoy-S con misurazione. Sono state rilevate batterie CA che richiedono la misurazione e il dispositivo Envoy-S \u00e8 senza misurazione.",
                acdisco_active: "Sezionatore CA attivo. Envoy non \u00e8 in grado di comunicare con i microinverter.",
                acdisco_fail: "Guasto del sezionatore CA. Controllare il rel\u00e8 del sezionatore CA.",
                both_meter_enabled: "Per completare il commissioning del sistema, devono essere abilitati sia i contatori di produzione che quelli di consumo.",
                check_date_warn_msg:
                    "Ora di sistema non valida.  Se non viene corretta, Envoy non sar\u00e0 in grado di comunicare con i microinverter.  Se Envoy non \u00e8 configurato per utilizzare NTP o se non \u00e8 in grado di contattare i server NTP configurati, sar\u00e0 necessario eseguire una correzione manuale tramite i <a href='/admin/lib/date_time_display'>controlli di amministrazione di data e ora.</a>",
                cross_domain_traffic: "Sono state rilevate comunicazioni da altri Envoy.",
                date_invalid: "Ora di sistema non valida. Collegare Envoy a Internet per impostare l'ora correttamente.",
                db_warn_msg: "Impossibile inviare dati a Enlighten da parte di Envoy; spazio di archiviazione locale quasi esaurito. Collegare Envoy a Internet per evitare la perdita di dati.",
                eim_consumption_check_wiring: "Contatore consumo di potenza non collegato correttamente. Verificare il cablaggio.",
                eim_production_check_wiring: "Contatore produzione di potenza non collegato correttamente. Verificare il cablaggio.",
                envoy_needs_meters:
                    "Per completare il commissioning del sistema, \u00e8 necessario un dispositivo Envoy-S con misurazione. \u00c8 stato selezionato un profilo di rete che richiede la misurazione e il dispositivo Envoy-S \u00e8 senza misurazione.",
                legend: "Avvertenza",
                no_enlighten_report: "Il sistema non ha mai inviato report a Enlighten. Collegare Envoy a Internet per stabilire una connessione con Enlighten.",
                no_phase_assignment: "Per completare il commissioning del sistema, \u00e8 necessario assegnare le batterie CA alle fasi.",
                pcu_limit_warn_msg: "Il numero di microinverter rilevati supera la configurazione di monitoraggio di Envoy. Contattare l'assistenza clienti Enphase Energy.",
                pcu_limit_warn_msg2:
                    "Il numero di microinverter rilevati supera la configurazione di monitoraggio predefinita di Envoy.  Per impostare la configurazione di monitoraggio, \u00e8 necessario che Envoy sia connesso a Internet.",
                pel_profile_requires_meters: "Configurare i contatori di produzione e consumo per supportare il limite di esportazione di energia (PEL).",
                phase_assoc_failed: "Rilevamento fase non riuscito. Per le istruzioni consultare il Manuale di installazione e uso.",
                pim_profile_requires_meters: "Abilitare le misurazioni di produzione e consumo multifase per supportare la gestione dello squilibro di fase e il rilevamento della perdita di fase.",
            },
        },
    },
    number: {
        currency: { format: { delimiter: ",", format: "%u %n", precision: 2, separator: ".", significant: !1, strip_insignificant_zeros: !1, unit: "$" } },
        format: { delimiter: ",", precision: 3, separator: ".", significant: !1, strip_insignificant_zeros: !1 },
        human: {
            decimal_units: { format: "%n %u", units: { billion: "Billion", million: "Million", quadrillion: "Quadrillion", thousand: "Thousand", trillion: "Trillion", unit: "" } },
            format: { delimiter: "", precision: 3, significant: !0, strip_insignificant_zeros: !0 },
            storage_units: { format: "%n %u", units: { byte: { one: "Byte", other: "Bytes" }, gb: "GB", kb: "KB", mb: "MB", tb: "TB" } },
        },
        percentage: { format: { delimiter: "" } },
        precision: { format: { delimiter: "" } },
    },
    scripts: { data: { verify_internet_connection_message: "Il sistema in uso non ha mai inviato report a Enlighten. Verificare la connessione di rete." } },
    time: {
        am: "AM",
        formats: {
            default: "%d/%m/%Y %I :%M %p",
            default_date_time_no_pad: "%d/%m/%Y %-I:%M %p",
            hour_meridian: "%-I %p",
            long: "%B %d, %Y %H:%M",
            noday_nozone_datetime_secs_ui: "%d %b, %Y %-I:%M:%S %p",
            noday_nozone_datetime_ui: "%d %b, %Y %-I:%M %p",
            nozone_datetime: "%a %d %b %Y %I:%M %p",
            short: "%d %b %H:%M",
            short_date: "%d/%m/%Y",
            time_only: "%H:%M",
        },
        pm: "PM",
    },
    units: {
        amps: "A",
        bool: "Booleana",
        degrees: "gradi",
        hertz: "Hz",
        hertz_per_sec: "Hz/s",
        lagging: "Ritardo",
        milliseconds: "ms",
        millivolts: "mV",
        none: "",
        percent: "%",
        percent_per_hertz: "%/Hz",
        percent_per_min: "%/min",
        seconds: "s",
        volts: "V",
    },
};
I18n.translations.de = {
    date: {
        abbr_day_names: "So Mo Di Mi Do Fr Sa".split(" "),
        abbr_month_names: [null, "Jan", "Feb", "M\u00e4r", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"],
        day_names: "Sonntag Montag Dienstag Mittwoch Donnerstag Freitag Samstag".split(" "),
        formats: { default: "%Y-%m-%d", long: "%B %e, %Y", only_day: "%e", short: "%e %b" },
        month_names: [null, "Januar", "Februar", "M\u00e4rz", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"],
        order: ["Jahr", "Monat", "Tag"],
    },
    envoy: {
        cond_flags: {
            acb_ctrl: {
                bmudatabounds: "BMU-Datenbegrenzungsfehler",
                bmuhardwareerror: "BMU-Hardwarefehler",
                bmuimageerror: "BMU-Bildfehler",
                bmumaxcurrentwarning: "BMU Max Strom Warnung",
                bmusenseerror: "BMU-Erkennungsfehler",
                cellmaxtemperror: "Zelle Max Temperatur Fehler",
                cellmaxtempwarning: "Zelle Max Temperatur Warnung",
                cellmaxvoltageerror: "Zelle Max Spannung Fehler",
                cellmaxvoltagewarning: "Zelle Max Spannung Warnung",
                cellmintemperror: "Zelle Min Temperatur Fehler",
                cellmintempwarning: "Zelle Min Temperatur Warnung",
                cellminvoltageerror: "Zelle Min Spannung Fehler",
                cellminvoltagewarning: "Zelle Min Spannung Warnung",
                cibcanerror: "CIB CAN-Fehler",
                cibimageerror: "CIB-Bildfehler",
                cibspierror: "CIB SPI-Fehler",
            },
            nsrb_ctrl: {
                acfreqhigh: "Wechselfrequenz hoch",
                acfreqlow: "Wechselfrequenz niedrig",
                acfrequencyoor: "Wechselspannungsfrequenz au\u00dferhalb des zul\u00e4ssigen Bereichs",
                acvoltageavgline1: "Durchschnittliche Wechselspannung au\u00dferhalb des zul\u00e4ssigen Bereichs \u2013 Phase 1",
                acvoltageavgline2: "Durchschnittliche Wechselspannung au\u00dferhalb des zul\u00e4ssigen Bereichs \u2013 Phase 2",
                acvoltageavgline3: "Durchschnittliche Wechselspannung au\u00dferhalb des zul\u00e4ssigen Bereichs \u2013 Phase 3",
                acvoltagehighline1: "Wechselspannung hoch \u2013 Phase 1",
                acvoltagehighline2: "Wechselspannung au\u00dferhalb des zul\u00e4ssigen Bereichs \u2013 Phase 2",
                acvoltagehighline3: "Wechselspannung hoch \u2013 Phase 3",
                acvoltagelowline1: "Wechselspannung niedrig \u2013 Phase 1",
                acvoltagelowline2: "Wechselspannung au\u00dferhalb des zul\u00e4ssigen Bereichs \u2013 Phase 2",
                acvoltagelowline3: "Wechselspannung niedrig \u2013 Phase 3",
                acvoltageoorline1: "Wechselspannung au\u00dferhalb des zul\u00e4ssigen Bereichs \u2013 Phase 1",
                acvoltageoorline2: "Wechselspannung au\u00dferhalb des zul\u00e4ssigen Bereichs \u2013 Phase 2",
                acvoltageoorline3: "Wechselspannung au\u00dferhalb des zul\u00e4ssigen Bereichs \u2013 Phase 3",
                buttonpress: "Taste gedr\u00fcckt",
                dcgriderror: "DC-Grid-Stromfehler",
                dcgridhigh: "DC-Gitterstrom hoch",
                dcgridlow: "DC-Grid-Strom niedrig",
                relayforced: "Relais schaltet zwangsweise",
                relayopen: "Relais offen",
                rocof: "Fehler \u00c4nderungsrate der Frequenz",
            },
            obs_strs: {
                discovering: "Entdeckungsmodus",
                failure: "Berichtsfehler",
                flasherror: "Flash-Fehler",
                notmonitored: "Nicht \u00fcberwacht",
                ok: "Normal",
                plmerror: "PLM-Fehler",
                secmodeenterfailure: "Fehler beim Eintritt in sicheren Modus",
                secmodeexitfailure: "Fehler beim Verlassen des sicheren Modus",
                sleeping: "Ruhemodus EIN",
                verifing: "Pr\u00fcfger\u00e4t",
            },
            pcu_chan: {
                acMonitorError: "AC-Monitorfehler",
                acfrequencyhigh: "Wechselfrequenz hoch",
                acfrequencylow: "Wechselfrequenz niedrig",
                acfrequencyoor: "Wechselspannungsfrequenz au\u00dferhalb des zul\u00e4ssigen Bereichs",
                acvoltage_avg_hi: "Durchschnittliche Wechselspannung hoch",
                acvoltagehigh: "Wechselspannung hoch",
                acvoltagelow: "Wechselspannung niedrig",
                acvoltageoor: "Wechselspannung au\u00dferhalb des zul\u00e4ssigen Bereichs",
                acvoltageoosp1: "Wechselspannung au\u00dferhalb des zul\u00e4ssigen Bereichs \u2013 Phase 1",
                acvoltageoosp2: "Wechselspannung au\u00dferhalb des zul\u00e4ssigen Bereichs \u2013 Phase 2",
                acvoltageoosp3: "Wechselspannung au\u00dferhalb des zul\u00e4ssigen Bereichs \u2013 Phase 3",
                agfpowerlimiting: "AGF Strombegrenzung",
                dcresistancelow: "Gleichstromwiderstand niedrig",
                dcresistancelowpoweroff: "Gleichstromwiderstand niedrig \u2013 Ger\u00e4t ausgeschaltet",
                dcvoltagetoohigh: "Gleichspannung zu hoch",
                dcvoltagetoolow: "Gleichspannung zu niedrig",
                dfdt: "Wechselspannungsfrequenz \u00e4ndert zu schnell",
                gfitripped: "GFI ausgel\u00f6st",
                gridgone: "Stromausfall",
                gridinstability: "Netzinstabilit\u00e4t",
                gridoffsethi: "Netzversatz hoch",
                gridoffsetlow: "Netzversatz niedrig",
                hardwareError: "Hardwarefehler",
                hardwareWarning: "Hardwarewarnung",
                highskiprate: "Hohe Auslassrate",
                invalidinterval: "Ung\u00fcltiges Intervall",
                pwrgenoffbycmd: "Stromerzeugung durch Befehl ausgeschaltet",
                skippedcycles: "\u00dcbersprungene Zyklen",
                vreferror: "Spannungsreferenzfehler",
            },
            pcu_ctrl: {
                alertactive: "Warnung aktiv",
                altpwrgenmode: "Alternativer Stromerzeugungsmodus",
                altvfsettings: "Alternative Spannungs- und Frequenzeinstellungen",
                badflashimage: "Schlechtes Flash-Bild",
                bricked: "Kein Netzprofil",
                commandedreset: "Angefordertes Zur\u00fccksetzen",
                criticaltemperature: "Kritische Temperatur",
                "dc-pwr-low": "DC-Leistung zu niedrig",
                iuplinkproblem: "Problem mit IUP-Link",
                manutestmode: "Im manuellen Testmodus",
                nsync: "Netzst\u00f6rung nicht synchronisiert",
                overtemperature: "\u00dcberhitzung",
                poweronreset: "Power-On-Reset",
                pwrgenoffbycmd: "Stromerzeugung durch Befehl ausgeschaltet",
                runningonac: "L\u00e4uft mit Wechselstrom",
                "sleep-mode": "Ruhemodus EIN",
                tpmtest: "Transientes Netzprofil",
                unexpectedreset: "Unerwartetes Zur\u00fccksetzen",
                watchdogreset: "Watchdog-Reset",
            },
            rgm_chan: { check_meter: "Messger\u00e4tefehler", power_quality: "Schlechte Leistungsqualit\u00e4t" },
        },
        global: {
            cleared: "L\u00f6schen",
            copyright_notice: "2007\u20132014, [e] Enphase Energy, Inc. Alle Rechte vorbehalten.",
            copyright_notice_01: "[e] Enphase Energy, Inc. Alle Rechte vorbehalten.",
            cs_phone_number: "XXX-XXX-XXXX",
            disable: "Deaktivieren",
            disabled: "Deaktiviert",
            enable: "Aktivieren",
            enabled: "Aktiviert",
            enlighten_token_link: "Token hier abrufen",
            false: "Falsch",
            none: "Keine",
            notapplicable: "--",
            ok: "OK",
            page_not_found_msg1: "Seite nicht gefunden",
            page_not_found_msg2: "Die Seite, die Sie anzeigen m\u00f6chten, ist nicht vorhanden",
            page_not_found_msg3: 'Versuchen Sie es mit der <a href="/">Startseite</a>',
            serialnumber: "Seriennummer",
            set: "Festlegen",
            too_many_installer_sessions_msg1: "Zu viele aktive Installer-Sitzungen",
            too_many_installer_sessions_msg2: "Schlie\u00dfen Sie ggf. andere Fenster von Installer-Sitzungen",
            too_many_installer_sessions_msg3: "F\u00fcr diese Ressource sind zu viele Anforderungen aktiv, bitte versuchen Sie es in wenigen Minuten erneut",
            true: "Wahr",
            unknown: "Unbekannt",
        },
        paging: {
            all: "Alle",
            clearchoices: "Tabelle zur\u00fccksetzen",
            info: "Eintr\u00e4ge _START_ bis _END_ von _TOTAL_ Eintr\u00e4gen werden angezeigt.",
            infoempty: "Eintr\u00e4ge 0 bis 0 von 0 Eintr\u00e4gen werden angezeigt.",
            infofiltered: "(gefiltert aus _MAX_ Gesamteintr\u00e4gen)",
            lengthmenu: "_MENU_-Eintr\u00e4ge anzeigen",
            processing: "Verarbeitung ...",
            search: "Suchen:",
            zerorecords: "Keine passenden Eintr\u00e4ge gefunden",
        },
    },
    envoy_backbone: {
        ac_batteries: {
            manage_options: {
                active: "Aktiv (%{count})",
                active_count: { counting: { one: "Aktiv (%{count})", other: "Aktiv (%{count})", zero: "Aktiv (%{count})" } },
                deleted: "Gel\u00f6scht (%{count})",
                deleted_count: { counting: { one: "Gel\u00f6scht (%{count})", other: "Gel\u00f6scht (%{count})", zero: "Gel\u00f6scht (%{count})" } },
            },
            max_temp: "Max. Temp: ",
            nav: { all: "Alle", manage: "Verwalten", status: "Status" },
            no_inverters: "Es sind keine Batterien vorhanden.",
            no_inverters_search: 'Es wurden keine AC-Batterien gefunden, die "%{search_term}" entsprechen.',
            sleep_mode: {
                enable_failed:
                    "Beim Versuch, die ausgew\u00e4hlten Batterien in den Ruhemodus zu versetzen, ist ein Fehler aufgetreten. Versuchen Sie es in wenigen Minuten erneut. Sollte das Problem weiterhin bestehen, wenden Sie sich an den Kundendienst.",
                prompt_to_cancel: { desc: "Eine Batterie muss sich im Ruhemodus befinden, bevor sie sicher abgeklemmt werden kann.</br></br>M\u00f6chten Sie die Batterie wirklich daran hindern, in den Ruhemodus zu wechseln?" },
                prompt_to_sleep_modal: {
                    desc:
                        "Batterien m\u00fcssen sich im Energiesparmodus befinden, bevor sie sicher abgeklemmt werden k\u00f6nnen.</br></br><b>Hinweis:</b> Batterien werden bis zum Ladezustand %{min}-%{max}% geladen oder entladen, bevor sie in den Ruhemodus versetzt werden.",
                    target_soc_label: "Zielladezustand",
                    target_soc_link_text: "Zielladezustand \u00e4ndern",
                    warning: "Warnung: Nachdem eine Batterie in den Ruhemodus versetzt wurde, kann sie nur von einem professionellen Installateur wieder aktiviert werden.",
                },
                prompt_to_wake: "Eine Batterie muss sich im Ruhemodus befinden, bevor sie sicher abgeklemmt werden kann.</br></br>M\u00f6chten Sie die Batterie wirklich daran hindern, in den Ruhemodus zu wechseln?",
                sleep_btn: "Im Ruhezustand",
            },
            state_of_charge: "Ladezustand: ",
            status_options: {
                cancel_sleep_label: "Stopp",
                comm_nocount: "Komm.",
                power_nocount: "In Betrieb",
                preparing_to_sleep_text: "Wechselt in Ruhemodus",
                profile_nocount: "Konfig",
                wake_sleep_label: "Ausschalten",
                waking_label: "Ruhemodus wird beendet",
            },
        },
        app_title: "Envoy Mobil",
        authentication: {
            authentication_with_authms: "Loggen Sie sich mit Enphase ein",
            bad_jwt: "Schlechter Token",
            insert_token_headline: "Token-Authentifizierung",
            title: "Authentifizierung",
            token_headline: "Token",
            token_link: "Besuchen Sie %{auth_authority}, um Ihr Token zu erhalten",
            token_submit: "Absenden",
            too_many_sessions: "Too many sessions",
            verifying_jwt: "Verifiziere Token",
        },
        buttons: {
            cancel: "Abbrechen",
            change: "\u00c4ndern",
            close: "Schlie\u00dfen",
            connect: "Verbinden",
            edit: "Bearbeiten",
            forget: "Vergessen",
            forget_network: "Dieses Netzwerk vergessen",
            ok: "OK",
            sleep_off: "Ruhemodus DEAKTIVIEREN",
            sleep_on: "Ruhemodus AKTIVIEREN",
            start_scan: "Suche starten",
            stop: "Stopp",
            update: "Aktualisieren",
        },
        cellular: {
            carrier: "Anbieter",
            connected: "Verbunden",
            connection_status: "Verbindungsstatus",
            iccid: "ICCID (Mobiltelefon-ID)",
            imsi: "IMSI (Abonnenten-ID)",
            mei: "IMEI-Nummer des Modems",
            no_modem: "Kein drahtloses Modem erkannt",
            not_connected: "Keine Verbindung",
            page_title: "Drahtlose Konfiguration",
        },
        comm_check: {
            communication_level: "Kommunikationsstufe",
            description: "Signalst\u00e4rke zwischen dem Envoy und den Mikrowandlern \u00fcberpr\u00fcfen.",
            devices: "Ger\u00e4te",
            in_progress: "Kommunikationstest l\u00e4uft",
            remaining_time: "%{minutes} Minuten verbleibend",
            remaining_time_one: "< 1 Minute verbleibend",
            start: "Kommunikationstest starten",
            stop: "Kommunikationstest anhalten",
            title: "Kommunikationstest",
        },
        comms: {
            communicating: "Kommunizierend",
            description:
                "In der Liste der kommunizierenden Mikro-Wechselrichter des Envoys sind die Seriennummern s\u00e4mtlicher Ger\u00e4te enthalten, die Meldungen vom Envoy erhalten und Energieerzeugungs- und Statusinformationen melden.",
            not_communicating: "Nicht Kommunizierend",
            title: "Kommunizierende Mikro-Wechselrichter",
        },
        countries: {
            AD: "Andorra",
            AE: "Vereinigte Arabische Emirate",
            AF: "Afghanistan",
            AG: "Antigua und Barbuda",
            AI: "Anguilla",
            AL: "Albanien",
            AM: "Armenien",
            AQ: "Antarktis",
            AR: "Argentinien",
            AS: "Amerikanisch-Samoa",
            AT: "\u00d6sterreich",
            AU: "Australien",
            AW: "Aruba",
            AZ: "Aserbaidschan",
            BA: "Bosnien und Herzegowina",
            BB: "Barbados",
            BD: "Bangladesch",
            BE: "Belgien",
            BF: "Burkina Faso",
            BG: "Bulgarien",
            BH: "Bahrain",
            BI: "Burundi",
            BJ: "Benin",
            BM: "Bermuda",
            BN: "Brunei Darussalam",
            BO: "Bolivien, Plurinationaler Staat",
            BR: "Brasilien",
            BS: "Bahamas",
            BT: "Bhutan",
            BV: "Bouvetinsel",
            BW: "Botswana",
            BY: "Wei\u00dfrussland (Belarus)",
            BZ: "Belize",
            CA: "Kanada",
            CC: "Kokosinseln (Keelinginseln)",
            CF: "Zentralafrikanische Republik",
            CG: "Kongo",
            CH: "Schweiz",
            CI: "Elfenbeink\u00fcste",
            CK: "Cookinseln",
            CL: "Chile",
            CM: "Kamerun",
            CN: "China",
            CO: "Kolumbien",
            CR: "Costa Rica",
            CV: "Kap Verde",
            CX: "Weihnachtsinsel",
            CY: "Zypern",
            CZ: "Tschechische Republik",
            DE: "Deutschland",
            DJ: "Dschibuti",
            DK: "D\u00e4nemark",
            DM: "Dominica",
            DO: "Dominikanische Republik",
            DZ: "Algerien",
            EC: "Ecuador",
            EE: "Estland",
            EG: "\u00c4gypten",
            EH: "Westsahara",
            ER: "Eritrea",
            ES: "Spanien",
            ET: "\u00c4thiopien",
            FI: "Finnland",
            FJ: "Fidschi",
            FK: "Falklandinseln(Malwinen)",
            FM: "Mikronesien, F\u00f6derierte Staaten",
            FO: "F\u00e4r\u00f6er",
            FR: "Frankreich",
            GA: "Gabun",
            GB: "Gro\u00dfbritannien",
            GD: "Grenada",
            GE: "Georgia",
            GF: "Franz\u00f6sisch-Guayana",
            GH: "Ghana",
            GI: "Gibraltar",
            GL: "Gr\u00f6nland",
            GM: "Gambia",
            GN: "Guinea",
            GP: "Guadeloupe",
            GQ: "\u00c4quatorialguinea",
            GR: "Griechenland",
            GS: "S\u00fcdgeorgien und die S\u00fcdlichen Sandwichinseln",
            GT: "Guatemala",
            GU: "Guam",
            GW: "Guinea-Bissau",
            GY: "Guyana",
            HK: "Hongkong",
            HM: "Heard-Insel und McDonald-Inseln",
            HN: "Honduras",
            HR: "Kroatien",
            HT: "Haiti",
            HU: "Ungarn",
            ID: "Indonesien",
            IE: "Irland",
            IL: "Israel",
            IN: "Indien",
            IO: "Britisches Territorium im Indischen Ozean",
            IS: "Island",
            IT: "Italien",
            JM: "Jamaika",
            JO: "Jordanien",
            JP: "Japan",
            KE: "Kenia",
            KG: "Kirgisistan",
            KH: "Kambodscha",
            KI: "Kiribati",
            KM: "Komoren",
            KN: "St. Kitts und Nevis",
            KR: "Korea, Republik",
            KW: "Kuwait",
            KY: "Kaimaninseln",
            KZ: "Kasachstan",
            LA: "Laos, Demokratische Volksrepublik",
            LB: "Libanon",
            LC: "St. Lucia",
            LI: "Liechtenstein",
            LK: "Sri Lanka",
            LR: "Liberia",
            LS: "Lesotho",
            LT: "Litauen",
            LU: "Luxemburg",
            LV: "Lettland",
            MA: "Marokko",
            MC: "Monaco",
            MD: "Moldau, Republik",
            ME: "Montenegro",
            MG: "Madagaskar",
            MH: "Marshallinseln",
            ML: "Mali",
            MM: "Myanmar",
            MN: "Mongolei",
            MO: "Macao",
            MP: "N\u00f6rdliche Marianen",
            MQ: "Martinique",
            MR: "Mauretanien",
            MS: "Montserrat",
            MT: "Malta",
            MU: "Mauritius",
            MV: "Malediven",
            MW: "Malawi",
            MX: "Mexiko",
            MY: "Malaysia",
            MZ: "Mosambik",
            NA: "Namibia",
            NC: "Neukaledonien",
            NE: "Niger",
            NF: "Norfolkinsel",
            NG: "Nigeria",
            NI: "Nicaragua",
            NL: "Niederlande",
            NO: "Norwegen",
            NP: "Nepal",
            NR: "Nauru",
            NU: "Niue",
            NZ: "Neuseeland",
            OM: "Oman",
            PA: "Panama",
            PE: "Peru",
            PF: "Franz\u00f6sisch-Polynesien",
            PG: "Papua-Neuguinea",
            PH: "Philippinen",
            PK: "Pakistan",
            PL: "Polen",
            PM: "Saint-Pierre und Miquelon",
            PN: "Pitcairninseln",
            PR: "Puerto Rico",
            PT: "Portugal",
            PW: "Palau",
            PY: "Paraguay",
            QA: "Katar",
            RO: "Rum\u00e4nien",
            RU: "Russische F\u00f6deration",
            SA: "Saudi-Arabien",
            SB: "Salomonen",
            SC: "Seychellen",
            SE: "Schweden",
            SG: "Singapur",
            SH: "St. Helena, Ascension und Tristan da Cunha",
            SI: "Slowenien",
            SJ: "Svalbard und Jan Mayen",
            SK: "Slowakei",
            SL: "Sierra Leone",
            SM: "San Marino",
            SN: "Senegal",
            SO: "Somalia",
            SR: "Suriname",
            ST: "S\u00e3o Tome und Pr\u00edncipe",
            SV: "El Salvador",
            SY: "Syrien, Arabische Republik",
            SZ: "Swasiland",
            TC: "Turks- und Caicosinseln",
            TD: "Tschad",
            TF: "Franz\u00f6sische S\u00fcdgebiete",
            TG: "Togo",
            TH: "Thailand",
            TJ: "Tadschikistan",
            TK: "Tokelau",
            TL: "Timor-Leste (Osttimor)",
            TM: "Turkmenistan",
            TN: "Tunesien",
            TO: "Tonga",
            TR: "T\u00fcrkei",
            TT: "Trinidad und Tobago",
            TV: "Tuvalu",
            TZ: "Tansania, Vereinigte Republik",
            UA: "Ukraine",
            UG: "Uganda",
            UM: "Amerikanisch-Ozeanien",
            US: "USA",
            UY: "Uruguay",
            UZ: "Usbekistan",
            VA: "Heiliger Stuhl (Vatikanstadt)",
            VC: "St. Vincent und die Grenadinen",
            VE: "Venezuela, Bolivarische Republik",
            VG: "Jungferninseln, Britisch",
            VI: "Jungferninseln, USA",
            VN: "Vietnam",
            VU: "Vanuatu",
            WF: "Wallis und Futuna",
            WS: "Samoa",
            YE: "Jemen",
            YT: "Mayotte",
            ZA: "S\u00fcdafrika",
            ZM: "Sambia",
            ZW: "Simbabwe",
        },
        counts: "%{actual_count}/%{expected_count}",
        detected: {
            battery_target_seperate: { one: "%{count} Batterie", other: "%{count} Batterien", zero: "%{count} Batterien" },
            description:
                "In der Liste der erkannten Mikro-Wechselrichter des Envoys sind alle Seriennummern enthalten, die im Rahmen einer Ger\u00e4tesuche ermittelt oder vom Installer Toolkit bereitgestellt wurden. Wenn Mikro-Wechselrichter erkannt wurden, k\u00f6nnen diese zus\u00e4tzliche Daten an das Envoy senden bzw. vom Envoy empfangen.",
            detected: "Erkannt",
            device_target: "Ger\u00e4teziel: %{count}",
            device_target_title: "Ger\u00e4teziel: ",
            discovered: "Erkannt:",
            installed: "Installiert",
            micro_target_seperate: { one: "%{count} Mikro-Wechselrichter", other: "%{count} Mikro-Wechselrichter", zero: "%{count} Mikro-Wechselrichter" },
            nsr_target_separate: { one: "%{count} Q-Relais", other: "%{count} Q-Relais", zero: "%{count} Q-Relais" },
            provisioned: "Bereitgestellt:",
            remaining_duration: { one: "Verbleibende Dauer: %{count} Stunde %{minutes} Minuten", other: "Verbleibende Dauer: %{count} Stunden %{minutes} Minuten", zero: "Verbleibende Dauer: %{count} Stunden %{minutes} Minuten" },
            remaining_hour_one: "1 Stunde",
            remaining_hours: "%{hours} Stunden",
            remaining_minute_one: "1 Minute verbleibend",
            remaining_minutes: "%{minutes} Minuten verbleibend",
            remaining_priority: {
                one: "Verbleibende Priorit\u00e4tsdauer: %{count} Stunde %{minutes} Minuten",
                other: "Verbleibende Priorit\u00e4tsdauer: %{count} Stunden %{minutes} Minuten",
                zero: "Verbleibende Priorit\u00e4tsdauer: %{count} Stunden %{minutes} Minuten",
            },
            remaining_time: "%{minutes} Minuten verbleibend",
            remaining_time_one: "< 1 Minute verbleibend",
            scan_inprogress: "Ger\u00e4tesuche l\u00e4uft",
            scan_start: "Ger\u00e4tesuche starten",
            scan_stop: "Suche stoppen",
            title: "Mikro-Wechselrichter erkannt",
        },
        device_alert_messages: {
            meters_not_enabled: "Die Produktions- und Verbrauchsmessger\u00e4te m\u00fcssen konfiguriert werden, damit Batterien verwendet werden k\u00f6nnen.",
            no_phase_assignment: "Batterien funktionieren erst, nachdem sie Phasen zugewiesen wurden.",
            not_configured: "Die Batterien m\u00fcssen konfiguriert werden, bevor sie eingesetzt werden k\u00f6nnen.",
        },
        devices: {
            detected: "Erkannt",
            detected_total_count: "%{detected_count} von %{total_count}",
            device_info: {
                change_phase: "Phase \u00e4ndern",
                comm_level: "Komm.stufe: ",
                comm_level_2_4_ghz: "[DE] Comm Level (2.4 GHz): ",
                comm_level_sub_ghz: "[DE] Comm Level (Sub GHz): ",
                detected: "Erkannt: ",
                discovered: "Durch Ger\u00e4tesuche gefunden",
                grid_profile: "Netzprofil: ",
                last_comm: "Letzte Kommunikation: ",
                last_report: "Letzter Bericht: ",
                notapplicable: "--",
                param_table: "Parametertabelle: ",
                part_number: "Teilenummer: ",
                pending_condition_clear: 'Zustandsl\u00f6schbefehl "%{condition_flag}" wird ausgef\u00fchrt.',
                phase: "Phase: ",
                phase_unknown: "Keine Phase ausgew\u00e4hlt",
                provisioned: "Durch Bereitstellung zugewiesen",
                running_image: "Ausgef\u00fchrtes Image: ",
                select_phase: "Phase ausw\u00e4hlen",
                status: "Status: ",
                unknown: "Unbekannt",
                updated: "Aktualisiert ",
                view_in_array: "Im Feld anzeigen",
            },
            device_scan: "Ger\u00e4tesuche",
            device_scan_short: "Suchen",
            scan_state: { active: "Aktiv", inactive: "Inaktiv", scan_disabled: "Deaktiviert", scan_inhibited: "Unterdr\u00fcckt", scan_suspended: "Unterbrochen" },
        },
        encharge_batteries: {
            manage_options: {
                active: "[DE] Active (%{count})",
                active_count: { counting: { one: "[DE] Active (%{count})", other: "[DE] Active (%{count})", zero: "[DE] Active (%{count})" } },
                deleted: "[DE] Deleted (%{count})",
                deleted_count: { counting: { one: "[DE] Deleted (%{count})", other: "[DE] Deleted (%{count})", zero: "[DE] Deleted (%{count})" } },
            },
            nav: { all: "Alle", manage: "Verwalten", status: "Status" },
            no_inverters: "[DE] There are no encharge batteries.",
            no_inverters_search: '[DE] No Encharge Batteries were found matching "%{search_term}".',
            phase_labels: { "ph-a": "[DE] L1(A)", "ph-b": "[DE] L2(B)", "ph-c": "[DE] L3(C)", "ph-unk": "[DE] No phase selected", "ph-updating": "[DE] Updating...", select_one: "[DE] Select One" },
            status_options: {
                cancel_sleep_label: "[DE] Stop",
                comm_nocount: "[DE] Comm",
                power_nocount: "[DE] Operating",
                preparing_to_sleep_text: "[DE] Entering Sleep Mode",
                profile_nocount: "[DE] Config",
                wake_sleep_label: "[DE] Turn Off",
                waking_label: "[DE] Exiting Sleep Mode",
            },
            title: "[DE] Encharge",
        },
        enpowers: {
            manage_options: {
                active: "[DE] Active (%{count})",
                active_count: { counting: { one: "[DE] Active (%{count})", other: "[DE] Active (%{count})", zero: "[DE] Active (%{count})" } },
                deleted: "[DE] Deleted (%{count})",
                deleted_count: { counting: { one: "[DE] Deleted (%{count})", other: "[DE] Deleted (%{count})", zero: "[DE] Deleted (%{count})" } },
            },
            max_temp: "[DE] Max Temp: ",
            nav: { all: "[DE] All", manage: "[DE] Manage", status: "[DE] Status" },
            no_inverters: "[DE] There is no Enpower device.",
            no_inverters_search: '[DE] No Enpower device found matching "%{search_term}".',
            state_of_grid: { closed: "[DE] Closed", open: "[DE] Open", title: "[DE] State of Grid: " },
            status_options: { comm_nocount: "[DE] Comm", power_nocount: "[DE] Operating", profile_nocount: "[DE] Config" },
            title: "[DE] Enpower",
        },
        errors: {
            error_message: "Beim Abrufen von Daten vom Envoy ist leider ein Fehler aufgetreten. Wenn das Problem weiterhin besteht, wenden Sie sich an den Kundensupport.",
            interface_not_dhcp: "Sie k\u00f6nnen leider keine neue IP-Adresse erhalten. Zuerst die IP-Einstellung des Envoy auf DHCP umschalten.",
            not_allowed: "Die von Ihnen angeforderte \u00c4nderung ist nicht zul\u00e4ssig und konnte nicht gespeichert werden.",
            not_authorized: "Sie sind leider nicht berechtigt, diese Seite anzuzeigen.",
            save_failed: "Ihre \u00c4nderungen konnten nicht gespeichert werden. ",
            start_scan_target_too_low:
                "<p>Sie haben angegeben, dass %{expected_count} Mikro-Wechselrichter Daten an das Envoy \u00fcbertragen sollen, und %{expected_count} wurden bereits erkannt.</p><p>Bevor Sie die Ger\u00e4tesuche starten, <a href='#' class='open-target-count'>erh\u00f6hen Sie die Anzahl der erwarteten Mikro-Wechselrichter</a> oder l\u00f6schen Sie einen oder mehrere Mikro-Wechselrichter aus dem <a href='#' class='open-manage-devices'>Ger\u00e4teverwaltungsbildschirm</a>.</p>",
            start_scan_target_too_low_battery: {
                one: "<p>Sie haben angegeben, dass %{count} Batterie Daten an das Envoy \u00fcbertragen soll, und diese wurde bereits erkannt.</p>",
                other: "<p>Sie haben angegeben, dass %{count} Batterien Daten an das Envoy \u00fcbertragen soll, und dass viele bereits erkannt wurden.</p>",
                zero: "<p>Sie haben angegeben, dass %{count} Batterien Daten an das Envoy \u00fcbertragen soll, und dass viele bereits erkannt wurden.</p>",
            },
            start_scan_target_too_low_battery_end:
                "<p>Bevor Sie die Ger\u00e4tesuche starten, <a href='#' class='open-target-count'>erh\u00f6hen Sie die Anzahl der erwarteten Batterien</a> oder l\u00f6schen Sie einen oder mehrere Batterien aus dem <a href='#' class='open-manage-devices-battery'>Ger\u00e4teverwaltungsbildschirm</a>.</p>",
            start_scan_target_too_low_both:
                "<p>Die erwartete Anzahl der Ger\u00e4te wurde bereits erkannt.</p><p>Bevor Sie die Ger\u00e4tesuche starten, <a href='#' class='open-target-count'>erh\u00f6hen Sie die Anzahl der erwarteten Ger\u00e4te</a> oder l\u00f6schen Sie einen oder mehrere Mikro-Wechselrichter oder Batterien.</p>",
            start_scan_target_too_low_micro: {
                one: "<p>Sie haben angegeben, dass %{count} Mikrowechselrichter Daten an das Envoy \u00fcbertragen sollen, und dies wurde bereits erkannt.</p>",
                other: "<p>Sie haben angegeben, dass %{count} Mikrowechselrichter Daten an das Envoy \u00fcbertragen sollen, und dass viele bereits erkannt wurden.</p>",
                zero: "<p>Sie haben angegeben, dass %{count} Mikrowechselrichter Daten an das Envoy \u00fcbertragen sollen, und dass viele bereits erkannt wurden.</p>",
            },
            start_scan_target_too_low_micro_end:
                "<p>Bevor Sie die Ger\u00e4tesuche starten, <a href='#' class='open-target-count'>erh\u00f6hen Sie die Anzahl der erwarteten Mikro-Wechselrichter</a> oder l\u00f6schen Sie einen oder mehrere Mikro-Wechselrichter aus dem <a href='#' class='open-manage-devices'>Ger\u00e4teverwaltungsbildschirm</a>.</p>",
            start_scan_target_too_low_nsr: {
                one: "<p>Sie haben angegeben, dass %{count} Q-Relay Daten an das Envoy \u00fcbertragen soll, und diese wurde bereits erkannt.</p>",
                other: "<p>Sie haben angegeben, dass %{count} Q-Relay Daten an das Envoy \u00fcbertragen soll, und dass viele bereits erkannt wurden.</p>",
                zero: "<p>Sie haben angegeben, dass %{count} Q-Relay Daten an das Envoy \u00fcbertragen soll, und dass viele bereits erkannt wurden.</p>",
            },
            start_scan_target_too_low_nsr_end:
                "<p>Bevor Sie die Ger\u00e4tesuche starten, <a href='#' class='open-target-count'>erh\u00f6hen Sie die Anzahl der erwarteten Q-Relay</a> oder l\u00f6schen Sie einen oder mehrere Q-Relay aus dem <a href='#' class='open-manage-devices-nsr'>Ger\u00e4teverwaltungsbildschirm</a>.</p>",
            start_scan_title: "Ger\u00e4tesuche nicht verf\u00fcgbar",
            timeout_message:
                "Das Abrufen von Daten vom Envoy dauert leider zu lange. \u00dcberpr\u00fcfen Sie, ob das Envoy eingeschaltet ist und ob das Envoy und dieses Ger\u00e4t mit demselben LAN verbunden sind. Sollte das Problem weiterhin bestehen, wenden Sie sich an den Kundensupport.",
            title: "Fehler",
            tunnel_close_failed: "Der Versuch, eine Verbindung zum Enphase-Support zu trennen, ist fehlgeschlagen. Wenn das Problem weiterhin besteht, wenden Sie sich an den Kundensupport.",
            tunnel_failed_title: "Verbindung fehlgeschlagen",
            tunnel_open_failed:
                "Um eine Verbindung mit Enphase herstellen zu k\u00f6nnen, muss das Envoy mit dem Internet verbunden sein. Wenn das Envoy \u00fcber eine Internetverbindung verf\u00fcgt, dieses Problem aber weiterhin besteht, wenden Sie sich an den Kundensupport.",
        },
        ethernet: {
            buttons: { dhcp: "DHCP verwenden", new_ip: "Neue IP-Adresse abrufen", static: "Statische IP verwenden" },
            confirm_change: { description: "Dadurch kann die Kommunikation mit dem Envoy unterbrochen werden, und Sie m\u00fcssen erneut eine Verbindung herstellen.", title: "Ethernet-Konfiguration \u00e4ndern?" },
            confirm_static: {
                description: "Dadurch werden die aktuelle DHCP-IP-Adresse und andere Konfigurationen als statische Werte zugewiesen. Wenn Sie fortfahren, k\u00f6nnen Sie diese Werte auf dem n\u00e4chsten Bildschirm aktualisieren.",
                title: "Ethernet-Konfiguration \u00e4ndern?",
            },
            gateway_ip: "Gateway-IP",
            ip_address: "IP-Adresse",
            ip_setting: "IP-Einstellung",
            netmask: "Netzmaske",
            new_ip_modal: { description: "Dadurch kann die Kommunikation mit dem Envoy unterbrochen werden, und Sie m\u00fcssen erneut eine Verbindung herstellen.", title: "Neue IP-Adresse abrufen?" },
            no_config: "Keine Ethernet-Verbindung erkannt.",
            page_title: "Ethernet-Konfiguration",
            primary_dns: "Prim\u00e4rer DNS-Server",
            secondary_dns: "Sekund\u00e4rer DNS-Server",
            type: { dhcp: "DHCP", static: "Statische IP" },
        },
        forms: { search: "Suchen", search_prompt: "Seriennummer", select_prompt: "Ausw\u00e4hlen" },
        global_nav: {
            acb: "[DE] AC Battery",
            comms: "Verbindung",
            detected: "Erkannt",
            encharge: "[DE] Encharge",
            encharge_batteries: "[DE] Encharge",
            enpower: "[DE] Enpower",
            meters: "Messger\u00e4te",
            meters_small: "Mess-<br/>ger\u00e4te",
            microinverters: "Mikro-Wechselrichter",
            microinverters_short: "Mikros",
            more: "Mehr",
            network: "Netzwerk",
            nsr: "Q-Relais",
            overview: "\u00dcbersicht",
            power: "Leistung",
            profiles: "Profile",
            storage: "AC-Batterien",
        },
        initial_setup: {
            continue: "Fortfahren",
            device_prompt: "Geben Sie die Anzahl an Ger\u00e4ten an, die erwartungsgem\u00e4\u00df Daten an dieses Envoy \u00fcbertragen sollen.",
            eu_profile_prompt: "W\u00e4hlen Sie ein standortspezifisches Netzprofil aus.",
            migration_in_progress_message: "Profile werden aktualisiert",
            na_profile_prompt: "Das System verwendet die werkseitig installierten Netzprofileinstellungen. Sie k\u00f6nnen unten ein standortspezifisches Netzprofil ausw\u00e4hlen.",
            system_size: "Systemgr\u00f6\u00dfe",
        },
        jquery_validate: {
            messages: {
                addedTierPercent: "Geben Sie eine Ziffer\u00a0gr\u00f6\u00dfer als der Prozentsatz,\u00a0der f\u00fcr {0} eingegebenen Basis,\u00a0ein.",
                an_number: "Geben Sie bitte eine Nummer ein.",
                creditcard: "Geben Sie eine g\u00fcltige Kreditkartennummer ein.",
                date: "Geben Sie ein g\u00fcltiges Datum ein.",
                dateISO: "Bitte geben Sie ein g\u00fcltiges Datum ein (ISO).",
                digits: "Geben Sie bitte nur Ziffern ein.",
                domain: "Geben Sie eine g\u00fcltige IPv4-Adresse (xxx.xxx.xxx.xxx) oder eine URL (google.com) ein.",
                email: "Geben Sie eine g\u00fcltige E-Mail-Adresse ein.",
                equalTo: "Bitte denselben Wert wiederholen.",
                ipv4: "Geben Sie eine g\u00fcltige IPv4-Adresse ein. (xxx.xxx.xxx.xxx)",
                max: "Geben Sie einen Wert kleiner oder gleich {0} ein.",
                maxlength: "Geben Sie maximal {0} Zeichen ein.",
                min: "Geben Sie einen Wert gr\u00f6\u00dfer oder gleich {0} ein.",
                minlength: "Geben Sie mindestens {0} Zeichen ein.",
                number: "Geben Sie bitte eine Nummer ein.",
                range: "Geben Sie einen Wert zwischen {0} und {1} ein.",
                rangelength: "Geben Sie einen Wert ein, der zwischen {0} und {1} Zeichen lang ist.",
                remote: "Korrigieren Sie dieses Feld.",
                required: "Dieses Feld ist ein Pflichtfeld.",
                url: "Geben Sie eine g\u00fcltige URL ein.",
                wep_key: "Geben Sie einen g\u00fcltigen WEP-Schl\u00fcssel ein (10, 26 oder 58 Zeichen, kann 0\u20139 und A\u2013F enthalten).",
            },
        },
        loading: "Bitte warten, wird geladen",
        meters: {
            active_energy: "Aktive Energie",
            active_energy_lt: "Aktive Energie",
            active_power: "Wirkleistung",
            apparent_energy: "Scheinenergie",
            apparent_power: "Scheinleistung",
            consumption: "Verbrauchsmessger\u00e4t",
            consumption_meter: {
                enable_meter: "Verbrauchsmessger\u00e4t aktivieren",
                measurement_type: "Gemessener Stromkreis",
                meter_type_desc: "Umfasst der Stromkreis durch die Verbraucher-CTs die Last der Solarproduktion oder nur die Last?",
                meter_type_desc_singular: "Umfasst der Stromkreis durch die Verbraucher-CTs die Last der Solarproduktion oder nur die Last?",
                meter_type_warning: "\u00dcberpr\u00fcfen Sie, ob die oben gew\u00e4hlte Auswahl korrekt ist.",
            },
            current: "Spannung",
            current_ct: {
                current_ct_settings: "Einstellungen CT-Strom",
                custom_cts_installed: "Benutzerdefinierte %{meter_type}-CTs installiert",
                primary: "Prim\u00e4r",
                remove_desc: "Tippen Sie auf OK, wenn Sie Standard-%{meter_type}-CTs von Enphase verwenden.",
                remove_settings: "Benutzerdefinierte CT-Einstellungen entfernen?",
                secondary: "Sekund\u00e4r",
                turns: "Male",
            },
            descriptors: { lifetime: "Lebensdauer", lifetime_lag: "Nacheilend (Lebensdauer)", lifetime_lead: "Voreilend (Lebensdauer)", today: "Heute", today_lag: "Nacheilend (heute)", today_lead: "Voreilend (heute)" },
            enable_consumption_meter: "Verbrauchsmessger\u00e4t aktivieren",
            enable_consumption_modal: {
                description: "Nachdem Sie dieses Messger\u00e4t aktiviert haben, kann es nicht mehr deaktiviert und der Typ nicht mehr ge\u00e4ndert werden.",
                description_mode_three: "Sobald Sie dieses Messger\u00e4t aktiviert haben, k\u00f6nnen Sie es nicht wieder deaktivieren oder die Phasenzahl reduzieren.",
                description_mode_three_post_enable: "Sobald Sie dies tun, k\u00f6nnen Sie die Phasenzahl nicht wieder reduzieren.",
                note_three: "<strong>Hinweis: die Phasenzahl wird auch am Verbrauchsmessger\u00e4t erh\u00f6ht.</strong>",
                note_three_post_enable: "<strong>Hinweis: die Phasenzahl wird auch am Verbrauchsmessger\u00e4t erh\u00f6ht.</strong>",
                title: 'Messger\u00e4t mit "%{type}"-Messung aktivieren?',
                title_mode_three: "Aktivierung des Messger\u00e4ts mit zu messendem Stromkreis: %{type} und Messphasen: %{phCount}?",
                title_mode_three_post_enable: "Gemessene Phasen zu %{phCount} aktualisieren?",
            },
            enable_meter: "Verbrauchsmessger\u00e4t aktivieren",
            enable_modal: { description: "Nachdem Sie dieses Messger\u00e4t aktiviert haben, kann es nicht mehr deaktiviert und der Typ nicht mehr ge\u00e4ndert werden.", title: "Messger\u00e4t mit %{type} Messung aktivieren?" },
            enable_production_meter: "Erzeugungsmessger\u00e4t aktivieren",
            enable_production_modal: {
                description: "Sobald dieser Z\u00e4hler aktiviert ist, kann er nicht mehr deaktiviert werden.",
                description_mode_three: "Sobald Sie dieses Messger\u00e4t aktiviert haben, k\u00f6nnen Sie es nicht wieder deaktivieren oder die Phasenzahl reduzieren.",
                description_mode_three_post_enable: "Sobald Sie dies tun, k\u00f6nnen Sie die Phasenzahl nicht wieder reduzieren.",
                note_three: "<strong>Hinweis: die Phasenzahl wird auch am Verbrauchsmessger\u00e4t erh\u00f6ht.</strong>",
                note_three_post_enable: "<strong>Hinweis: die Phasenzahl wird auch am Verbrauchsmessger\u00e4t erh\u00f6ht.</strong>",
                title: "Messger\u00e4t aktivieren?",
                title_mode_three: "Aktivierung des Messger\u00e4ts mit Messphasen: %{phCount}?",
                title_mode_three_post_enable: "Gemessene Phasen zu %{phCount} aktualisieren?",
            },
            enable_production_prompt: "Der Stromerzeugungsmesser muss aktiviert werden, bevor Messwerte angezeigt werden k\u00f6nnen.",
            freq_analysis: { btn_change_data_type: "Daten umschalten", plc_activity: "Aktivit\u00e4t", plc_power_spectrum: "Leistungsspektrum", power_line_analy: "Stromkabel-Kommunikationsanalyse" },
            id: "EID",
            internal_meters: "Interne Messger\u00e4te",
            latest_reading: "Letzte Ablesung",
            lifetime_energy: "Lebensdauer",
            load_contains_storage_message: "Lastmesswerte umfassen ebenfalls die Lageraktivit\u00e4t.",
            measurement_type: "Typ",
            meter_change_warning: "Sie k\u00f6nnen diese Einstellung nicht mehr \u00e4ndern, nachdem das Messger\u00e4t aktiviert wurde.",
            meter_mode: { single: "Einphasig (L-N)", split: "Einphasig (L-L)", three: "Mehrphasig" },
            meter_readings: "Ablesungen",
            meter_state: { disabled: "Deaktiviert", enabled: "Aktiviert" },
            meter_status: {
                "check-wiring": "Kabel pr\u00fcfen",
                meter_setup: "Messung jetzt einrichten",
                meters_not_enabled: "Messger\u00e4te nicht aktiviert",
                normal: "Normal",
                "not-metering": "Messger\u00e4t nicht aktiviert",
                status_flags: {
                    "negative-production": "Produktionsmesswerte sind negativ. Die Ausrichtung von CT und die Schutzleiter im Vergleich zu den Spannungsanschl\u00fcssen pr\u00fcfen.",
                    "negative-total-consumption": "Die Verbrauchsablesungen sind negativ. Die Ausrichtung von CT und die Schutzleiter im Vergleich zu den Spannungsanschl\u00fcssen pr\u00fcfen.",
                    "power-on-unused-phase": "Es wurde Strom in einer nicht genutzten Phase erkannt.",
                    "production-imbalance": "Produktion zwischen Phasen nicht ausgeglichen. CT-Schutzleiteranschl\u00fcsse und Spannungsanschl\u00fcsse \u00fcberpr\u00fcfen.",
                },
            },
            meter_type: { "net-consumption": "Netto", "total-consumption": "Gesamtzahl" },
            meter_type_desc: "Wenn die Verbrauchs-CTs an einen Stromkreis angeschlossen sind, durch den die Solarstromproduktion flie\u00dft, behalten Sie den Typ <b>Netto</b> bei. Wenn nicht, \u00e4ndern Sie den Typ in <b>Gesamt</b>.",
            meter_type_verbose: { "net-consumption": "Lastbetrieb mit Solarproduktion", "total-consumption": "Nur Last" },
            meter_type_warning: "Achten Sie darauf, dass der Messger\u00e4tetyp korrekt eingestellt ist. Sie k\u00f6nnen diese Einstellung nicht mehr \u00e4ndern, nachdem das Messger\u00e4t aktiviert wurde.",
            mode: "Modus",
            multi_phase_options: { mphase_0: "Nicht ausgew\u00e4hlt", mphase_1: "L1(A)", mphase_2: "L1(A) + L2(B)", mphase_3: "L1(A) + L2(B) + L3(C)" },
            multi_phase_warning: {
                consumption: {
                    post_continue: "Das Messger\u00e4t ist noch nicht aktiviert. \u00dcberpr\u00fcfen Sie die Messewerte und tippen Sie anschlie\u00dfend unten im Bildschirm auf <strong>Verbrauchsmessger\u00e4t aktivieren</strong>.",
                    pre_continue: "Das Messger\u00e4t ist noch nicht aktiviert. W\u00e4hlen Sie die zu messenden Phasen und den zu messenden Stromkreis aus und tippen Sie anschlie\u00dfend auf <strong>Messwerte anzeigen</strong>.",
                    pre_continue_one: "Das Messger\u00e4t ist noch nicht aktiviert. W\u00e4hlen Sie den zu messenden Stromkreis aus und tippen Sie anschlie\u00dfend auf <strong>Messwerte anzeigen</strong>.",
                },
                production: {
                    post_continue: "Das Messger\u00e4t ist noch nicht aktiviert. \u00dcberpr\u00fcfen Sie die Messewerte und tippen Sie anschlie\u00dfend unten im Bildschirm auf <strong>Produktionsmessger\u00e4t aktivieren</strong>.",
                    pre_continue: "Das Messger\u00e4t ist noch nicht aktiviert. W\u00e4hlen Sie die zu messenden Phasen aus und tippen Sie anschlie\u00dfend auf <strong>Messwerte anzeigen</strong>.",
                },
            },
            net_consumption_desc: "Diese Messwerte stellen die Differenz der Gesamt-Heimlast und der Solarerzeugung dar. Sie sollten ungef\u00e4hr den Messwerten des Hilfsmessger\u00e4ts des Hauses entsprechen.",
            net_consumption_title: "Nettostromverbrauch",
            no_consumption: "F\u00fcr dieses Envoy ist kein Verbrauchsmessger\u00e4t konfiguriert.",
            no_meters: "Keine Messger\u00e4te erkannt.",
            no_production: "F\u00fcr dieses Envoy ist kein Erzeugungsmessger\u00e4t konfiguriert.",
            phase_count: "Messphasen",
            phase_count_desc: "W\u00e4hlen Sie aus, welche Messphasen Sie verdrahtet haben.",
            phase_labels: { phase_1: "L1(A)", phase_2: "L2(B)", phase_3: "L3(C)" },
            pmu: {
                add_another: "Weiteres hinzuf\u00fcgen",
                add_meter: "Strommessger\u00e4t hinzuf\u00fcgen",
                config: {
                    add: "Ausgew\u00e4hlte Messger\u00e4te hinzuf\u00fcgen",
                    meters_description: "In diesem Netzwerk erkannte Leistungsmessger\u00e4te:",
                    network_warning:
                        "Stellen Sie vor dem Hinzuf\u00fcgen eines Messger\u00e4ts sicher, dass das Envoy \u00fcber eine Ethernet-Verbindung mit einer statischen IP-Adresse verf\u00fcgt. Diese Konfiguration muss sowohl am Router als auch am Envoy vorgenommen werden.",
                    no_meters_description:
                        "Keine Strommessger\u00e4te erkannt<div class='alert alert-info'><b>Hinweis:</b> Die Erkennung von Strommessger\u00e4ten kann bis zu einer Stunde dauern. Um die Erkennung zu erleichtern, sollte sich das Strommessger\u00e4t im selben lokalen Teilnetz befinden wie das Envoy.</div>",
                    remove: "Strommessger\u00e4t entfernen",
                    title: "Konfiguration des Leistungsmessger\u00e4ts",
                },
                labels: { fw_version: "Firmware-Version", ip: "IP-Adresse", mac_address: "Mac-Adresse", manufacturer: "Hersteller", part_number: "Teilenummer", production: "Stromerzeugung", serial_number: "Seriennummer", status: "Status" },
                phase_coupler: "Zur Kommunikation mit dem Envoy ist f\u00fcr auf L2 oder L3 installierte Mikro-Wechselrichter ein Phasenkoppler erforderlich.",
            },
            power_exporting: "Export ins Netz wird ausgef\u00fchrt",
            power_factor: "Leistungsfaktor",
            power_importing: "Import ins Netz wird ausgef\u00fchrt",
            production: "Erzeugungsmessger\u00e4t",
            reactive_energy: "Blindenergie",
            reactive_power: "Blindleistung",
            single_phase_warning: {
                consumption: {
                    post_continue: "Das Messger\u00e4t ist noch nicht aktiviert. \u00dcberpr\u00fcfen Sie die Messewerte und tippen Sie anschlie\u00dfend unten im Bildschirm auf <strong>Verbrauchsmessger\u00e4t aktivieren</strong>.",
                    pre_continue: "Das Messger\u00e4t ist noch nicht aktiviert. W\u00e4hlen Sie den zu messenden Stromkreis aus und tippen Sie anschlie\u00dfend auf <strong>Messwerte anzeigen</strong>.",
                },
                production: {
                    post_continue: "Das Messger\u00e4t ist noch nicht aktiviert. \u00dcberpr\u00fcfen Sie die Messewerte und tippen Sie anschlie\u00dfend unten im Bildschirm auf <strong>Produktionsmessger\u00e4t aktivieren</strong>.",
                    pre_continue: "Das Messger\u00e4t ist noch nicht aktiviert. Tippen Sie auf <strong>Messwerte anzeigen</strong>, um die Messwerte anzuzeigen und zu pr\u00fcfen.",
                },
            },
            status: "Status",
            title: "Messger\u00e4te",
            today_energy: "Heute",
            total_consumption_desc: "Diese Messwerte geben die Gesamt-Heimlast wieder.",
            total_consumption_na: "Der Stromerzeugungsmesser muss aktiviert werden, bevor Messwerte angezeigt werden k\u00f6nnen.",
            total_consumption_title: "Gesamtstromverbrauch",
            type: { eim: "Integriertes Envoy-Messger\u00e4t", pmu: "Strommessger\u00e4t", rgm: "Enphase RGM" },
            unavailable: "--",
            update_settings: "Aktualisieren",
            view_readings: "Messwerte anzeigen",
            wizard: {
                batt_off: { counting: { one: "Der Enphase-Batteriestromkreis muss AUSGESCHALTET sein.", other: "Die Enphase-Batteriestromkreise m\u00fcssen AUSGESCHALTET sein." } },
                battery_reminder: "<b>Schalten Sie den Enphase-Batteriestromkreis ein.</b>",
                btn_next: "Weiter",
                btn_try_again: "Erneut versuchen",
                bullet_load_increase: "Ist die Gesamtlast des Haushalts wie erwartet gestiegen?",
                bullet_meters_match: "Entsprechen die Messwerte des Hausstromz\u00e4hlers ungef\u00e4hr dieser Messung?",
                bullet_phase_select: "Flie\u00dft der erzeugte Solarstrom durch das vom Verbrauchs-CT gemessene Netz?",
                bullet_pv_on:
                    "Schalten Sie die PV-Trennschalter EIN und warten Sie, bis die Verbindung wieder hergestellt ist. Nach h\u00f6chstens 5 Minuten sollte vom PV Strom produziert werden. Dr\u00fccken Sie dann auf <strong>Weiter</strong>.",
                bullet_turn_on_load: "Schalten Sie eine neue Last, etwa eine Hei\u00dfluftpistole, ein und tippen Sie auf <b>Weiter</b>.",
                check_meters: "Messger\u00e4te<br>pr\u00fcfen",
                check_title: " %{meter_type}-Messger\u00e4t pr\u00fcfen",
                confirm_ct_routing: "S\u00e4mtliche Lastleitungen des Haushalts m\u00fcssen \u00fcber die Verbrauchs-CTs laufen.",
                consumption_appears_good: "Das Verbrauchsmessger\u00e4t wurde offenbar korrekt konfiguriert.",
                consumption_ct_direction: "Pr\u00fcfen Sie, ob der Pfeil auf den Verbrauchs-CTs in Stromflussrichtung zur Verteilerstation zeigen.",
                consumption_cts_installed: "Haben Sie Verbrauchs-CTs installiert?",
                consumption_enable_prompt: "Tippen Sie auf <strong>Verbrauchsmessger\u00e4t aktivieren</strong>, um die Einrichtung abzuschlie\u00dfen.",
                consumption_looks_good: "Die Verbrauchsmesswerte sehen gut aus!",
                consumption_neg: "Die Verbrauchsablesungen sind negativ. Pr\u00fcfen Sie Folgendes und tippen Sie anschlie\u00dfend auf <b>Erneut versuchen</b>.",
                consumption_not_enabled: "Das Verbrauchsmessger\u00e4t ist nicht aktiviert.",
                consumption_phase_sel_net: "Der Verbrauchs-CD enth\u00e4lt den erzeugten Solarstrom.",
                consumption_phase_sel_total: "Der Verbrauchs-CD enth\u00e4lt nicht den erzeugten Solarstrom.",
                ct_bw_correct: "Die blauen und wei\u00dfen Dr\u00e4hte m\u00fcssen an den richtigen Klemmen am Klemmenblock angeschlossen sein.",
                desc: "Nutzen Sie den Assistenten, damit die internen Messger\u00e4te richtig verdrahtet und konfiguriert werden.",
                desc_consumption: "Nutzen Sie den Assistenten, damit das Verbrauchsmessger\u00e4t richtig verdrahtet und konfiguriert wird.",
                desc_production: "Nutzen Sie den Assistenten, damit das Erzeugungsmessger\u00e4t richtig verdrahtet und konfiguriert wird.",
                done: "Fertig",
                enable_button: "Messger\u00e4t %{meterType} aktivieren",
                enough_sun: "\u00dcberpr\u00fcfen Sie, ob die PV-Module ausreichend vom Sonnenlicht beschienen werden, so dass die Mikro-Wechselrichter arbeiten k\u00f6nnen.",
                exit_check: "Sind Sie sicher, dass Sie die Messger\u00e4tepr\u00fcfung verlassen m\u00f6chten?",
                exit_conf: {
                    desc: "M\u00f6chten Sie den Assistenten zur Einrichtung des Erzeugungsmessger\u00e4ts beenden? Wenn Sie den Assistenten erneut verwenden m\u00f6chten, m\u00fcssen Sie von vorn beginnen.",
                    neg_button: "Zur\u00fcckgehen",
                    title: "Assistenten beenden?",
                },
                exit_wizard: "Assistenten beenden",
                get_started: "Erste Schritte",
                load_didnt_increase: "Die Gesamtlast des Haushalts ist nicht wie erwartet gestiegen. Pr\u00fcfen Sie Folgendes und tippen Sie anschlie\u00dfend auf <b>Erneut versuchen</b>.",
                manual_prompt: "Manuelle Messger\u00e4teeinrichtung",
                most_common: "(H\u00e4ufigste Einrichtung)",
                negative: "NEIN",
                phase_select_prompt: "W\u00e4hlen Sie die zu messenden Phasen abh\u00e4ngig von der Verdrahtung des Envoy-S aus: ",
                positive: "JA",
                power_exporting: "Export",
                power_importing: "Import",
                prod_enable_desc1: "Die Stromerzeugungsmesswerte liegen wie erwartet nahe Null.",
                prod_enable_desc2: "Tippen Sie auf <strong>Erzeugungsmessger\u00e4t aktivieren</strong>, um die Einrichtung abzuschlie\u00dfen.",
                prod_meter_enabled: "Das Erzeugungsmessger\u00e4t ist aktiviert.",
                prod_su1_pv_on: {
                    counting: {
                        one: "Stellen Sie sicher, das der PV-Stromkreis EINGESCHALTET ist und Strom erzeugt wird (Verbindung wurde wiederhergestellt).",
                        other: "Stellen Sie sicher, das die PV-Stromkreise EINGESCHALTET sind und Strom erzeugt wird (Verbindung wurde wiederhergestellt).",
                    },
                },
                prod_su2_pv_off: "Schalten Sie die PV-Leistungsschalter AUS und tippen Sie auf <b>Weiter</b>.",
                prod_ts_p4: {
                    desc: "Produktionsmesswerte sind negativ. Pr\u00fcfen Sie Folgendes und tippen Sie anschlie\u00dfend auf \u201eErneut versuchen\u201c.",
                    ts1: {
                        counting: {
                            one: "Stellen Sie sicher, das der PV-Stromkreis EINGESCHALTET ist und Strom erzeugt wird (Verbindung wurde wiederhergestellt).",
                            other: "Stellen Sie sicher, das die PV-Stromkreise EINGESCHALTET sind und Strom erzeugt wird (Verbindung wurde wiederhergestellt).",
                        },
                    },
                    ts2: { counting: { one: "Der Enphase-Batteriestromkreis muss AUSGESCHALTET sein.", other: "Die Enphase-Batteriestromkreise m\u00fcssen AUSGESCHALTET sein." } },
                    ts3: {
                        counting: {
                            one: "Pr\u00fcfen Sie, ob der Pfeil auf dem Stromerzeugungs-CT in Stromflussrichtung zur Verteilerstation zeigt.",
                            other: "Pr\u00fcfen Sie, ob die Pfeile auf den Stromerzeugungs-CTs in Stromflussrichtung zur Verteilerstation zeigen.",
                        },
                    },
                    ts5: {
                        counting: {
                            one: "Achten Sie darauf, dass die durch den Stromerzeugungs-CT f\u00fchrenden Leitungen nur solche f\u00fcr die PV-Erzeugung (und keine Lastleitungen) umfassen.",
                            other: "Achten Sie darauf, dass die durch die Stromerzeugungs-CTs f\u00fchrenden Leitungen nur solche f\u00fcr die PV-Stromerzeugung (und keine Lastleitungen) umfassen.",
                        },
                    },
                    ts6: "Stellen Sie sicher, dass die CTs unter Ber\u00fccksichtigung des Envoy-Stromterminals an der korrekten Phase angeklemmt sind.",
                },
                prod_ts_p5: {
                    desc: "Die Stromerzeugungsmesswerte sind h\u00f6her als erwartet. Pr\u00fcfen Sie Folgendes und tippen Sie anschlie\u00dfend auf <b>Erneut versuchen</b>.",
                    ts2: {
                        counting: {
                            one: "Achten Sie darauf, dass die durch den Stromerzeugungs-CT f\u00fchrenden Leitungen nur solche f\u00fcr die PV-Erzeugung (und keine Lastleitungen) umfassen.",
                            other: "Achten Sie darauf, dass die durch die Stromerzeugungs-CTs f\u00fchrenden Leitungen nur solche f\u00fcr die PV-Stromerzeugung (und keine Lastleitungen) umfassen. ",
                        },
                    },
                },
                production_not_enabled: "Das Erzeugungsmessger\u00e4t ist nicht aktiviert.",
                pv_off: { counting: { one: "Der PV-Stromkreis muss AUSGESCHALTET sein.", other: "Die PV-Stromkreise m\u00fcssen AUSGESCHALTET sein." } },
                pv_reminder: "<b>Schalten Sie den Enphase-Batteriestromkreis ein.</b> Es dauert ca. 5\u00a0Minuten, bis an den Mikro-Wechselrichtern die Stromerzeugung abzulesen ist.",
                readings_dont_match1:
                    "Wir sind uns nicht sicher, warum die Messwerte nicht denen des Stromz\u00e4hlers entsprechen. Tippen Sie auf <b>Erneut versuchen</b>, um die Konfigurationseinstellungen f\u00fcr den Ort, an dem sich die Verbrauchs-CTs befinden, zu \u00e4ndern.",
                readings_dont_match2:
                    "Falls dies nicht hilft, k\u00f6nnen Sie den Assistenten beenden und stattdessen die Option <b>Manuelle Messger\u00e4teeinrichtung</b> verwenden. Wenden Sie sich an den Enphase-Support, bevor Sie fortfahren.",
                readings_dont_match_post: "Wenden Sie sich an den Enphase-Support und geben Sie an, dass die Messwerte auch nach der Messger\u00e4tepr\u00fcfung nicht den Messergebnissen des Stromz\u00e4hlers entsprechen.",
                reset_timer: "Timer zur\u00fccksetzen",
                setup_title: " %{meter_type}-Messger\u00e4t einrichten",
                start_timer: "Timer starten",
                stop_timer: "Timer anhalten",
                sw_off_batt: { counting: { one: "Schalten Sie den Enphase-Batteriestromkreis AUS.", other: "Schalten Sie die Enphase-Batteriestromkreise AUS." } },
                sw_off_pv: "Schalten Sie die PV-Leistungsschalter AUS.",
                total_cons_not_reduced: "Durch das Einschalten des PV-Stromkreises ist der Gesamtverbrauch nicht zur\u00fcckgegangen. Pr\u00fcfen Sie Folgendes und tippen Sie anschlie\u00dfend auf \u201eErneut versuchen\u201c.",
                total_load: "Gesamtlast des Haushalts",
                trouble_c6_desc1: "Wenn Sie alle Anweisungen auf dem Bildschirm befolgt haben und immer noch ein negativer Wert f\u00fcr den Stromverbrauch gemessen wird, ",
                trouble_c8_desc1: "Wenn Sie alle Anweisungen auf dem Bildschirm befolgt haben und sich der Gesamtverbrauch noch immer nicht durch Einschalten des PV-Stromkreises senken l\u00e4sst, ",
                trouble_desc2: "Wenden Sie sich an den Enphase-Support unter der Telefonnummer <a href='tel:%{dial_num}'>%{disp_num}</a> , bevor Sie fortfahren.",
                trouble_install_guide: "Weitere Informationen hierzu finden Sie in der <strong>Envoy Metered Installationsanleitung</strong>",
                trouble_manual_prompt: " oder Sie k\u00f6nnen den Assistenten beenden und stattdessen die Option <strong>Manuelle Messger\u00e4teeinrichtung</strong> verwenden.",
                trouble_p0_5: {
                    desc: {
                        counting: {
                            one: "Sie haben angegeben, dass nur %{selected_phases} gemessen wird, aber Strom an %{phaseStr} anliegt.",
                            other: "Sie haben angegeben, dass nur %{selected_phases} gemessen werden, aber Strom an %{phaseStr} anliegt.",
                        },
                    },
                    ts1: "\u00dcberpr\u00fcfen Sie die Verkabelung. Sind die Phasen richtig angeschlossen?",
                    ts_no_resp: "Beheben Sie eventuelle Verkabelungsfehler und tippen Sie anschlie\u00dfend auf <b>Erneut versuchen</b>.",
                    ts_yes_resp: "Passen Sie die Auswahl der gemessenen Phasen an die Verkabelung an und tippen Sie anschlie\u00dfend auf <b>Erneut versuchen</b>.",
                },
                trouble_p0_desc1: "Wenn Sie alle Anweisungen auf dem Bildschirm befolgt haben und in einer ungenutzten Phase dennoch weiterhin Strom gemessen wird,  ",
                trouble_p4_desc1: "Wenn Sie alle Anweisungen auf dem Bildschirm befolgt haben und immer noch ein negativer Wert f\u00fcr die Stromerzeugung gemessen wird, ",
                trouble_p5_desc1: "Wenn Sie alle Anweisungen auf dem Bildschirm befolgt haben und immer noch ein zu hoher Wert f\u00fcr die Stromerzeugung gemessen wird, ",
                trouble_p7_desc1: "Wenn Sie alle Anweisungen auf dem Bildschirm befolgt haben und die Strombelastung im Haus immer noch nicht wie zu erwarten steigt, ",
                trouble_prompt: "Probleme bei diesem Schritt?",
                unable_to_see_meter: "Wenn Sie auf dem Messger\u00e4t keine <strong>STROM</strong>-Messwerte ablesen k\u00f6nnen oder Sie ein tragbares Messger\u00e4t verwenden, klicken Sie auf <strong>Fortfahren</strong>.",
            },
        },
        microinverters: {
            condition_clear: { description: 'Damit wird ein Befehl zum L\u00f6schen des Status "%{condition_flag}" auf diesem Mikro-Wechselrichter gesendet.', title: "Zustand l\u00f6schen?" },
            manage_options: {
                active: "Aktiv (%{count})",
                active_count: { counting: { one: "Aktiv (%{count})", other: "Aktiv (%{count})", zero: "Aktiv (%{count})" } },
                delete_btn: "L\u00f6schen",
                deleted: "Gel\u00f6scht (%{count})",
                deleted_count: { counting: { one: "Gel\u00f6scht (%{count})", other: "Gel\u00f6scht (%{count})", zero: "Gel\u00f6scht (%{count})" } },
                restore_btn: "Wiederherstellen",
            },
            nav: { all: "Alle", manage: "Verwalten", status: "Status" },
            no_inverters: "Es sind keine Mikro-Wechselrichter vorhanden.",
            no_inverters_search: 'Es wurden keine zu "%{search_term}" passenden Mikro-Wechselrichter gefunden.',
            phase_labels: { "ph-a": "L1(A)", "ph-b": "L2(B)", "ph-c": "L3(C)", "ph-unk": "Keine Phase ausgew\u00e4hlt", "ph-updating": "Wird aktualisiert...", select_one: "Ausw\u00e4hlen" },
            phase_prompt_label: "W\u00e4hlen Sie eine Phase f\u00fcr die AC-Batterie %{serial_num}",
            scan_close: "Schlie\u00dfen",
            scan_disabled: "Die Ger\u00e4tesuche ist im Moment aufgrund einer damit in Konflikt stehenden Suche eines anderen Envoys nicht m\u00f6glich.",
            scan_inhibited:
                "Um diesem Envoy weitere Mikro-Wechselrichter hinzuzuf\u00fcgen, m\u00fcssen Sie das Installer Toolkit verwenden, um sie bereitstellen zu k\u00f6nnen. Sie k\u00f6nnen sich auch an den Enphase-Kundendienst wenden, um die Ger\u00e4tsuche erneut zu aktivieren.",
            scan_inprogress: "Ger\u00e4tesuche l\u00e4uft",
            scan_settings: {
                advanced_options: "Weitere Optionen",
                device_total: "Ger\u00e4teziel",
                device_total_description: "Wenn Sie ein Ger\u00e4teziel angeben, h\u00e4lt das Envoy den Suchvorgang an, sobald erkannt wird, dass diese Gesamtzahl an Mikro-Wechselrichtern erreicht wurde.",
                device_total_error_1: "Die Gesamtzahl an Ger\u00e4ten muss zwischen %{already_detected} (Anzahl der bereits erkannten Ger\u00e4te) und %{device_total_max} liegen.",
                device_total_error_2: "Die Gesamtzahl an Ger\u00e4ten muss gr\u00f6\u00dfer sein als %{already_detected} (Anzahl der bereits erkannten Ger\u00e4te).",
                hours: "Stunden",
                less_options: "Weniger Optionen",
                minutes: "Minuten",
                optional: "(optional)",
                priority_duration: "Priorit\u00e4tsdauer",
                priority_duration_description: "Wenn Sie eine Priorit\u00e4tsdauer eingeben, f\u00fchrt das Envoy in diesem Zeitraum ausschlie\u00dflich die Ger\u00e4tesuche durch.",
                priority_duration_error: "Priorit\u00e4tsdauer kann nicht l\u00e4nger als Suchdauer sein.",
                scan_duration: "Suchdauer",
                scan_duration_error: "Die Suchdauer muss zwischen 1 Minute und 8 Stunden lang sein.",
                scan_options: { min_120: "2 Stunden", min_15: "15 Minuten", min_240: "4 Stunden", min_30: "30 Minuten", min_480: "8 Stunden", min_60: "1 Stunde" },
                time_description: "hh:mm",
            },
            scan_start: "Suche starten",
            scan_stop: "Suche stoppen",
            scan_suspended: "Die Ger\u00e4tesuche ist im Moment aufgrund eines Mikro-Wechselrichterupgrades nicht m\u00f6glich.",
            status_options: { comm: "Komm. (%{count})", comm_nocount: "Komm.", power: "Leistung (%{count})", power_nocount: "Leistung", profile: "Netzprofil (%{count})", profile_nocount: "Netzprofil" },
        },
        monitoring: {
            connected: "Verbindung mit Enlighten herstellen",
            high_bandwidth: "Standard",
            last_report: "Letzter Bericht:",
            low_bandwidth: "Niedrige Bandbreite",
            more_info: "Mehr Infos",
            no_report: "Noch nie Berichte gesendet",
            not_connected: "Nicht mit Enlighten verbunden",
            report_setting: "Berichtseinstellung",
            report_setting_cellular_desc: "Dieses Envoy verf\u00fcgt \u00fcber ein Enphase-Drahtlosmodem und sendet in 15-Minuten-Intervallen erfasste Daten viermal pro Tag an Enlighten (niedrige Bandbreite).",
            report_setting_diagnostic: "Diagnosemodus ein: %{minutes} Minuten verbleibend",
            report_setting_enable_diagnostic:
                "Sie k\u00f6nnen den Diagnosemodus f\u00fcr zwei Stunden aktivieren. Im Diagnosemodus meldet der Envoy in der Regel in 5-Minuten-Intervallen erfasste Daten an\u00a0Enlighten (zu Tageslichtzeiten).",
            report_setting_high_desc:
                "Dieses Envoy ist auf Standardberichterstattung eingestellt. Das bedeutet, dass zu Tageslichtzeiten in der Regel in 5-Minuten-Intervallen erfasste Daten alle 5 Minuten an Enlighten gesendet werden. Sie k\u00f6nnen auf niedrige Bandbreite umstellen, sodass in 15-Minuten-Intervallen erfasste Daten viermal pro Tag an Enlighten gesendet werden.",
            report_setting_low_desc:
                "Dieses Envoy ist auf Berichterstattung mit niedriger Bandbreite eingestellt. Dies bedeutet, dass in 15-Minuten-Intervallen erfasste Daten viermal pro Tag an Enlighten gesendet werden. Sie k\u00f6nnen auf Standardberichterstattung umstellen, sodass zu Tageslichtzeiten in der Regel in 5-Minuten-Intervallen erfasste Daten alle 5 Minuten an Enlighten gesendet werden.",
            report_setting_modal: {
                diagnostic_desc: "Best\u00e4tigen Sie die Aktivierung des Diagnosemodus f\u00fcr zwei Stunden.",
                high_desc: "Wechsel zu Standardberichterstattung best\u00e4tigen.",
                low_desc: "Wechsel zu Berichterstattung mit niedriger Bandbreite best\u00e4tigen.",
                title: "\u00c4nderung der Berichtseinstellung",
            },
            report_setting_options: { diagnostic: "Aktivierung des Diagnosemodus", high: "Auf Standardberichterstattung umstellen", low: "Auf niedrige Bandbreite umstellen" },
            title: "\u00dcberwachung",
        },
        more: {
            about: {
                cellular_ip: "Drahtlose IP-Adresse",
                cellular_mac_address: "Mobile MAC-Adresse",
                db_size: "Datenbankgr\u00f6\u00dfe",
                db_size_stats: "%{db_size} (%{percent}% belegt)",
                ethernet_ip: "Ethernet-IP-Adresse",
                ethernet_mac_address: "Ethernet-MAC-Adresse",
                is_nonvoy: "Dieses Envoy ist darauf programmiert, nicht \u00fcberwachte Systeme zu konfigurieren.",
                part_number: "Teilenummer",
                serial_number: "Seriennummer",
                sw_build_date: "Software-Build-Datum",
                sw_version: "Softwareversion",
                timezone: "Aktuelle Zeitzone",
                title: "Info \u00fcber dieses Envoy",
                wifi_ip: "WLAN IP-Adresse",
                wifi_mac_address: "WLAN-MAC-Adresse",
            },
            datetime: { date: "Datum", time: "Uhrzeit", timezone: "Zeitzone", title: "Datum/Uhrzeit", update_timezone: "Zeitzone aktualisieren" },
            events: { event_date_line: "%{date} (Ereignis-ID %{event_id})", no_events: "Es sind keine Ereignisse vorhanden.", title: "Ereignisse" },
            support_connection: {
                close: "Verbindung schlie\u00dfen",
                description_close: "Die sichere Verbindung mit dem Enphase-Support ist offen.",
                description_open: "Sichere Verbindung herstellen, sodass das Support-Personal eine Fernproblembehebung f\u00fcr dieses System durchf\u00fchren kann.",
                open: "Verbindung \u00f6ffnen",
                title: "Verbindung mit Enphase-Support",
            },
            system: { title: "System" },
        },
        network: {
            diagnostic_tools: {
                check_connectivity: "Netzwerkverbindung testen",
                check_network_route: "Netzwerkroute testen",
                gateway_ip: "Gateway-IP",
                ip_address: "IP-Adresse",
                mac_address: "Mac-Adresse",
                netmask: "Netzmaske",
                network_connectivity: "Netzwerkverbindungstest",
                network_connectivity_desc: "Mehrere grundlegende Netzdiagnosepr\u00fcfungen f\u00fcr das Envoy durchf\u00fchren.",
                network_route: "Netzwerkroutentest",
                network_route_desc: "Informationen zu den verf\u00fcgbaren Netzwerkschnittstellen finden Sie in der Internetverbindung (Pfad) des Envoys.",
                ping: "Ping",
                ping_desc: "Geben Sie eine IP-Adresse oder eine URL ein, um die Verbindung des Envoys zu Ihrem Router oder einem anderen Netzwerkhost zu \u00fcberpr\u00fcfen.",
                ping_ip: "Ping-Adresse",
                primary_dns: "Prim\u00e4rer DNS-Server",
                results_title: "Ergebnisse",
                secondary_dns: "Sekund\u00e4rer DNS-Server",
                timestamp: "Zuletzt gepr\u00fcft",
                title: "Diagnosewerkzeuge",
            },
            network_configuration: { active_network: "Aktiv", title: "Netzwerkkonfiguration", types: { cellular: "Drahtlos", ethernet: "Ethernet", none: "Keine", wifi: "WLAN" } },
            network_connectivity_check: {
                connectivity_enlighten: "Verbindung zu Enlighten",
                connectivity_enphase: "Verbindung zu Enphase",
                enlighten_dns_lookup: "Enlighten DNS-Suche",
                enphase_dns_lookup: "Enphase DNS-Suche",
                gateway_ping: "Gateway-Ping",
                google_dns_lookup: "Google DNS-Suche",
                google_ping: "Google-Ping",
                primary_dns_ping: "Prim\u00e4rer DNS-Ping",
                primary_interface: "Netzwerk getestet",
                result: { fail: "Fehlgeschlagen", pass: "Gut" },
                secondary_dns_ping: "Sekund\u00e4rer DNS-Ping",
                timestamp: "Zuletzt gepr\u00fcft",
                title: "Ergebnisse",
            },
            network_route_check: {
                destination: "Ziel",
                flags: "Kennzeichen",
                gateway: "Gateway",
                genmask: "Genmask",
                metric: "Metrik",
                network: "Netzwerk",
                ref: "Referenz",
                results_title: "Ergebnisse",
                timestamp: "Zuletzt gepr\u00fcft",
                use: "Verwenden",
            },
            title: "Netzwerk",
        },
        not_available: "Nicht verf\u00fcgbar",
        nsr: {
            line_status_heading: "Verbundene Leitungen:",
            line_status_help_text:
                "<ul><li>Mindestens eine der Q-Relais-Leitungen ist nicht verbunden.</li><li>Pr\u00fcfen Sie, ob das Q-Relais richtig verdrahtet wurde.</li><li>Dr\u00fccken Sie die Test-Taste, um es erneut zu versuchen.</li><li>Wenn dies so beabsichtigt ist, kann es ignoriert werden.</li></ul>",
            line_status_help_title: "Verbindungshilfe Q-Relais-Leitung",
            lines: "Leitung %{num}:",
            reason_strings: "Unbekannter Grund;Hardwarefehler;Tastendruck;Befehl von Envoy erzwingen;Fehler AC-Spannung Leitung 1;Fehler AC-Spannung Leitung 2;Fehler AC-Spannung Leitung 3;Fehler AC-Frequenz Leitung 1;Fehler Netz-DC;AC-Spannung Leitung 1 niedrig;AC-Spannung Leitung 1 hoch;AC-Frequenz Leitung 1 niedrig;AC-Frequenz Leitung 1 hoch;AC-Spannung Leitung 2 niedrig;AC-Spannung Leitung 2 hoch;AC-Spannung Leitung 3 niedrig;AC-Spannung Leitung 3 hoch;Netz-DC niedrig;Netz-DC hoch;Rocof;Durchschnittliche AC-Spannung Leitung 1;Durchschnittliche AC-Spannung Leitung 2;Durchschnittliche AC-Spannung Leitung 3".split(
                ";"
            ),
            relay_heading: "Relais:",
        },
        nsrs: {
            manage_options: {
                active: "Aktiv (%{count})",
                active_count: { counting: { one: "Aktiv (%{count})", other: "Aktiv (%{count})", zero: "Aktiv (%{count})" } },
                deleted: "Gel\u00f6scht (%{count})",
                deleted_count: { counting: { one: "Gel\u00f6scht (%{count})", other: "Gel\u00f6scht (%{count})", zero: "Gel\u00f6scht (%{count})" } },
            },
            nav: { all: "Alle", manage: "Verwalten", status: "Status" },
            no_inverters: "Es sind keine Q-Relais vorhanden",
            no_inverters_search: 'Es wurden keine zu "%{search_term}" passenden Q-Relais gefunden.',
            status_options: { comm_nocount: "Komm.", power_nocount: "In Betrieb", profile_nocount: "Konfig" },
            title: "[DE] Relays Q",
        },
        overview: {
            ac_batteries: {
                communicating: "Kommunizierend",
                default_profile_set: "Werkseitig installiertes Netzprofil",
                detected: "Erkannt",
                factory_installed: "Werkseitig installiert",
                factory_installed_config: "Werkseitig installierte Konfigurationen",
                not_set: "Nicht festgelegt",
                producing_power: "In Betrieb",
                profile_set: "Konfiguriert",
                total: "AC-Batterien",
            },
            ac_batteries_counts: {
                communicating: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>kommunizierend</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>kommunizierend</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>kommunizierend</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>kommunizierend</span>",
                    },
                },
                detected: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>erkannt</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>erkannt</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>erkannt</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>erkannt</span>",
                    },
                },
                producing_power: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>in Betrieb</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>in Betrieb</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>in Betrieb</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>in Betrieb</span>",
                    },
                },
                profile_set: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>konfiguriert</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>konfiguriert</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>konfiguriert</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>konfiguriert</span>",
                    },
                },
                total: {
                    counting: {
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>AC-Batterie</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>AC-Batterien</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>AC-Batterien</span>",
                    },
                },
            },
            ac_battery_state: {
                charging: "L\u00e4dt",
                discharging: "Entl\u00e4dt",
                full: "Voll",
                idle: "Leerlauf",
                soc_full: "%{operating_state} (Ladestand %{percent}%)",
                soc_percent: "(Ladezustand %{percent}%)",
                soc_state: "%{operating_state}",
            },
            alerts: "Warnungen",
            consumption: "Verbrauchsmessger\u00e4t",
            consumption_meter_label: "Verbrauch",
            current_consumption: "Aktueller Stromverbrauch",
            current_production: "Aktuelle Stromerzeugung",
            devices: { detected: "Erkannt" },
            encharge_batteries: {
                communicating: "[DE] Communicating",
                default_profile_set: "[DE] Factory-Installed Grid Profile",
                detected: "[DE] Detected",
                factory_installed: "[DE] Factory-Installed",
                factory_installed_config: "[DE] Factory-Installed Configurations",
                not_set: "[DE] Not Set",
                producing_power: "[DE] Operating",
                profile_set: "[DE] Configured",
                total: "[DE] AC Batteries",
            },
            enpowers: { communicating: "[DE] Communicating", default_profile_set: "[DE] Factory-Installed Grid Profile", detected: "[DE] Detected", profile_set: "[DE] Profile Set", total: "[DE] Enpower Devices" },
            enpowers_summary: { connected: { false: "[DE] Not Connected to Enpower", true: "[DE] Connected to Enpower" }, grid_status: { false: "[DE] OFF", title: "[DE] Grid Status", true: "[DE] ON" }, title: "[DE] Enpower" },
            includes_storage_label: "(einschlie\u00dflich Lageraktivit\u00e4t)",
            inverter_production: "Erzeugung Mikro-Wechselrichter",
            inverters_update_status: { "in-progress": "Mikro-Wechselrichterupgrade wird durchgef\u00fchrt. Dieser Vorgang dauert in der Regel 15-30 Minuten." },
            ip_address: "IP-Adresse",
            latest_power: "Neueste Leistung",
            lifetime: "Lebensdauer",
            lifetime_energy: "Energie Gesamtbetriebszeit",
            meter_production: "Erzeugungsmessger\u00e4t",
            metering: "Messung",
            microinverter_counts: {
                communicating: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>kommunizierend</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>kommunizierend</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>kommunizierend</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>kommunizierend</span>",
                    },
                },
                detected: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>erkannt</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>erkannt</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>erkannt</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>erkannt</span>",
                    },
                },
                producing_power: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>produzieren Strom</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>produzieren Strom</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>produzieren Strom</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>produzieren Strom</span>",
                    },
                },
                profile_set: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Profil festg.</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Profil festg.</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Profil festg.</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Profil festg.</span>",
                    },
                },
                total: {
                    counting: {
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Mikro-Wechselrichter</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Mikro-Wechselrichter</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Mikro-Wechselrichter</span>",
                    },
                },
            },
            microinverters: {
                communicating: "Kommunizierend",
                default_profile_set: "Werkseitig installiertes Netzprofil",
                detected: "Erkannt",
                producing_power: "Produzieren Strom",
                profile_set: "Profil festg.",
                total: "Mikro-Wechselrichter",
            },
            net_power: "Nettoleistung",
            new_microinverter_counts: {
                communicating: {
                    counting_acb: { one: "Kommunizierend", other: "Kommunizierend", zero: "Kommunizierend" },
                    counting_encharge: { one: "[DE] Communicating", other: "[DE] Communicating", zero: "[DE] Communicating" },
                    counting_microinverters: { one: "Kommunizierend", other: "Kommunizierend", zero: "Kommunizierend" },
                    counting_nsr: { one: "Kommunizierend", other: "Kommunizierend", zero: "Kommunizierend" },
                },
                detected: {
                    counting_acb: { one: "Erkannt", other: "Erkannt", zero: "Erkannt" },
                    counting_encharge: { one: "[DE] Detected", other: "[DE] Detected", zero: "[DE] Detected" },
                    counting_microinverters: { one: "Erkannt", other: "Erkannt", zero: "Erkannt" },
                    counting_nsr: { one: "Erkannt", other: "Erkannt", zero: "Erkannt" },
                },
                producing_power: {
                    counting_acb: { one: "In Betrieb", other: "In Betrieb", zero: "In Betrieb" },
                    counting_encharge: { one: "[DE] Operating", other: "[DE] Operating", zero: "[DE] Operating" },
                    counting_microinverters: { one: "Produzieren Strom", other: "Produzieren Strom", zero: "Produzieren Strom" },
                    counting_nsr: { one: "In Betrieb", other: "In Betrieb", zero: "In Betrieb" },
                },
                profile_set: {
                    counting_acb: { one: "Konfiguriert", other: "Konfiguriert", zero: "Konfiguriert" },
                    counting_encharge: { one: "[DE] Configured", other: "[DE] Configured", zero: "[DE] Configured" },
                    counting_microinverters: { one: "Profil festg.", other: "Profil festg.", zero: "Profil festg." },
                    counting_nsr: { one: "Konfiguriert", other: "Konfiguriert", zero: "Konfiguriert" },
                },
                total: {
                    counting_acb: { one: "AC-Batterie", other: "AC-Batterien", zero: "AC-Batterien" },
                    counting_encharge: { one: "[DE] Encharge Battery", other: "[DE] Encharge Batteries", zero: "[DE] Encharge Batteries" },
                    counting_microinverters: { one: "Mikro-Wechselrichter", other: "Mikro-Wechselrichter", zero: "Mikro-Wechselrichter" },
                    counting_nsr: { one: "Q-Relais", other: "Q-Relais", zero: "Q-Relais" },
                },
            },
            nsr: {
                detected_total_count: "%{detected_count} von %{total_count}",
                profile_label: "Netzprofil",
                profile_not_set: "Nicht konfiguriert",
                profile_set: "Konfiguriert",
                relay_state_closed: "Geschlossen",
                relay_state_label: "Status",
                relay_state_open: "Ge\u00f6ffnet",
                section_title: "Q-Relais",
            },
            power_exporting: "Export ins Netz wird ausgef\u00fchrt",
            power_importing: "Import ins Netz wird ausgef\u00fchrt",
            production: "Stromerzeugung",
            production_meter_label: "Stromerzeugung",
            profile: "Netzprofil",
            scan_modal: {
                description: "Es wurden keine Mikro-Wechselrichter gefunden. M\u00f6chten Sie eine Ger\u00e4tesuche starten?",
                description_battery: "Es wurden keine Batterien gefunden. M\u00f6chten Sie eine Ger\u00e4tesuche starten?",
                description_both: "Es wurden keine Mikro-Wechselrichter oder Batterien gefunden. M\u00f6chten Sie eine Ger\u00e4tesuche starten?",
                description_nsr: "Es wurden keine Q-Relais erkannt. M\u00f6chten Sie eine Ger\u00e4tesuche starten?",
                scan_timeout_description:
                    "<p>Nur %{detected_count} von %{target_count} Mikro-Wechselrichter wurden gefunden.</p><p>M\u00f6chten Sie die Ger\u00e4tesuche erneut starten, um die verbleibenden Mikro-Wechselrichter zu <a href='#' class='open-target-count'>suchen oder um die Anzahl der erwarteten Mikro-Wechselrichter zu \u00e4ndern</a>?</p>",
                scan_timeout_description_battery: "<p>Nur %{detected_count} von %{target_count} Batterien wurden gefunden.",
                scan_timeout_description_battery_second: {
                    one: "M\u00f6chten Sie die Ger\u00e4tesuche erneut starten, um die verbleibende Batterie zu suchen oder um <a href='#' class='open-target-count'>die Anzahl der erwarteten Batterien zu \u00e4ndern</a>?</p>",
                    other: "M\u00f6chten Sie die Ger\u00e4tesuche erneut starten, um die verbleibenden Batterien zu suchen oder um <a href='#' class='open-target-count'>die Anzahl der erwarteten Batterien zu \u00e4ndern</a>?</p>",
                },
                scan_timeout_description_both:
                    "<p>Nur %{detected_count_micro} von %{target_count_micro} Mikro-Wechselrichtern und %{detected_count_battery} von %{target_count_battery} Batterien wurden erkannt.</p><p>M\u00f6chten Sie die Ger\u00e4tesuche erneut starten, um die verbleibenden Ger\u00e4te zu suchen oder <a href='#' class='open-target-count'>um die Anzahl der erwarteten Ger\u00e4te zu \u00e4ndern</a>?</p>",
                scan_timeout_description_micro: "<p>Nur %{detected_count} von %{target_count} Mikro-Wechselrichter wurden gefunden.",
                scan_timeout_description_micro_second: {
                    one:
                        "M\u00f6chten Sie die Ger\u00e4tesuche erneut starten, um die verbleibenden Mikro-Wechselrichter zu suchen oder um <a href='#' class='open-target-count'>die Anzahl der erwarteten Mikro-Wechselrichter zu \u00e4ndern</a>?</p>",
                    other:
                        "M\u00f6chten Sie die Ger\u00e4tesuche erneut starten, um die verbleibenden Mikro-Wechselrichter zu suchen oder um <a href='#' class='open-target-count'>die Anzahl der erwarteten Mikro-Wechselrichter zu \u00e4ndern</a>?</p>",
                },
                scan_timeout_title: "Ger\u00e4tesuche starten?",
                title: "Ger\u00e4tesuche starten?",
            },
            scan_state: { active: "Suche aktiv", inactive: "Suche inaktiv", scan_inhibited: "Suche unterdr\u00fcckt" },
            set_expected: {
                error: "Der Wert muss eine Zahl zwischen 1 und 600 sein.",
                label: "Geben Sie die Anzahl an Mikro-Wechselrichtern an, die erwartungsgem\u00e4\u00df Daten an dieses Envoy \u00fcbertragen sollen.",
                prompt: "# Mikro-Wechselrichter",
            },
            set_expected_acb: { error: "Der Wert muss eine Zahl zwischen 0 und 39 sein.", label: "Geben Sie die Anzahl an AC-Batterien an, die Daten an das Envoy \u00fcbertragen sollen.", prompt: "# AC-Batterien" },
            set_expected_nsr: { error: "Der Wert muss eine Zahl zwischen 0 und 3 sein.", label: "Geben Sie die Anzahl an Q-Relais an, die erwartungsgem\u00e4\u00df Daten an dieses Envoy \u00fcbertragen sollen.", prompt: "# Q-Relais" },
            software_version: "Softwareversion",
            stat_title: "Leistung und Energie",
            storage: "AC-Batterien",
            tariff_rate_structure: "Tarif-/Ratenstruktur",
        },
        pending: "(ausstehend...)",
        power: {
            charging: "L\u00e4dt",
            description:
                "Mikro-Wechselrichter erzeugen Strom, solange gen\u00fcgend Sonnenlicht verf\u00fcgbar ist und das Stromnetz hinsichtlich Versorgungsspannung und Frequenz innerhalb der zul\u00e4ssigen Werte liegt (gem\u00e4\u00df den \u00f6rtlichen Bestimmungen).",
            discharging: "Entl\u00e4dt",
            idle: "Leerlauf",
            last_report: "Letzter Bericht:",
            not_operating: "Nicht in Betrieb",
            not_producing: "Nicht produzierend",
            operating: "In Betrieb",
            producing: "Produzieren Strom",
            title: "Stromerzeugende Mikro-Wechselrichter",
        },
        profiles: {
            ac_batteries: {
                configuration_label: "Konfiguration",
                false: "Nein",
                no_profile_description: "Sie m\u00fcssen die folgenden Informationen angeben, um die Batterien zu konfigurieren, bevor diese einsatzbereit sind.",
                no_profile_warning: "Das hier ausgew\u00e4hlte Rasterprofil wird auch auf die in diesem System installierten Mikro-Wechselrichter angewendet.",
                profile_complete: "Konfiguration abgeschlossen",
                profile_incomplete: "Konfiguration nicht abgeschlossen",
                profile_propagating: "Konfigurieren von Batterien",
                true: "Ja",
            },
            apply: "Netzprofil anwenden",
            config_batteries: "Batterie konfigurieren",
            country_label: "Durch das Land vorgeschriebene Spezifikation",
            encharge_batteries: {
                configuration_label: "[DE] Configuration",
                no_profile_description: "[DE] You must provide the following information to configure the batteries before they will begin to operate.",
                no_profile_warning: "[DE] The grid profile you select here will also be applied to the Enpower, Microinverters, and AC Batteries installed with this system.",
                profile_complete: "[DE] Configuration Complete",
                profile_incomplete: "[DE] Configuration Incomplete",
                profile_propagating: "[DE] Configuring Batteries",
            },
            enpowers: {
                no_profile_description: "[DE] You must provide the following information to configure the enpower before it will begin to operate.",
                no_profile_warning: "[DE] The grid profile you select here will also be applied to the Microinverters, AC Batteries and Encharges installed with this system.",
                profile_complete: "[DE] Configuration Complete",
                profile_incomplete: "[DE] Configuration Incomplete",
                profile_propagating: "[DE] Configuring Enpower",
            },
            eu_no_profile_description: "Sie m\u00fcssen ein standortspezifisches Netzprofil ausw\u00e4hlen, bevor die Mikro-Wechselrichter mit der Energieerzeugung beginnen.",
            eu_no_profile_label: "Kein Profil",
            eu_no_profile_vogel_description: "Sie m\u00fcssen ein standortspezifisches Netzprofil ausw\u00e4hlen.",
            microinverters: {
                configuration_label: "Konfiguration",
                no_profile_warning: "Das hier ausgew\u00e4hlte Rasterprofil wird auch auf die in diesem System installierten AC-Batterien angewendet.",
                profile_complete: "Propagieren abgeschlossen",
                profile_incomplete: "Propagieren nicht abgeschlossen",
                profile_propagating: "Profil wird propagiert",
            },
            na_no_profile_description: "Die Mikro-Wechselrichter verwenden die werkseitig installierten Netzprofileinstellungen. Sie k\u00f6nnen unten ein standortspezifisches Netzprofil ausw\u00e4hlen.",
            na_no_profile_label: "Werkseinstellungen",
            no_profile_warning: "Das hier ausgew\u00e4hlte Rasterprofil wird auch auf die in diesem System installierten AC-Batterien angewendet.",
            no_profiles:
                "Es sind keine Profile verf\u00fcgbar. Sie m\u00fcssen mit diesem Envoy\u00a0entweder\u00a0eine Verbindung zum Internet aufbauen und \u00fcber Enlighten ausw\u00e4hlen, oder das\u00a0Installer-Toolkit verwenden, um ein Profilpaket herunterzuladen und es auf diesen\u00a0Envoy hochladen.",
            no_profiles_info:
                "Wenn sich die Installation in einem Gebiet befindet, in dem standortspezifische Netzprofileinstellungen erforderlich sind, sie m\u00fcssen mit diesem Envoy\u00a0entweder\u00a0eine Verbindung zum Internet aufbauen und \u00fcber Enlighten ausw\u00e4hlen, oder das\u00a0Installer-Toolkit verwenden, um ein Profilpaket herunterzuladen und es auf diesen\u00a0Envoy hochladen.",
            nsrs: {
                configuration_label: "Konfiguration",
                no_profile_warning: "Das hier ausgew\u00e4hlte Rasterprofil wird auch auf die in diesem System installierten AC-Batterien angewendet.",
                profile_complete: "Propagieren abgeschlossen",
                profile_incomplete: "Propagieren nicht abgeschlossen",
                profile_propagating: "Profil wird propagiert",
            },
            profile_complete: "Propagieren abgeschlossen",
            profile_incomplete: "Propagieren nicht abgeschlossen",
            profile_label: "Netzprofil",
            profile_propagating: "Profil wird propagiert",
            title: "Netzprofil",
            tpm_state: { 0: "Ausstehend", 1: "Wird propagiert", 2: "Profil festg.", 3: "Nicht einstellbar", 4: "Fehlgeschlagen", 5: "Aktualisieren", 6: "ALT-V/F" },
        },
        public_nav: {
            change_password: "Kennwort \u00e4ndern",
            copyright_html: "&copy;2008-%{current_year} Enphase Energy, Inc. Alle Rechte vorbehalten.",
            enphase: "Enphase Energy",
            installer_login: "Installateuranmeldung",
            language: "Sprache",
            privacy: "Datenschutz",
            settings: "Einstellungen",
            terms: "Bedingungen",
        },
        select2: {
            format_matches: {
                counting: {
                    one: "Ein Ergebnis ist verf\u00fcgbar, dr\u00fccken Sie die Eingabetaste, um es auszuw\u00e4hlen.",
                    other: "%{count} Ergebnisse sind verf\u00fcgbar, verwenden Sie die Pfeiltasten (nach oben und nach unten) zum Navigieren.",
                },
            },
            input_too_long: { counting: { one: "L\u00f6schen Sie %{count} Zeichen", other: "L\u00f6schen Sie %{count} Zeichen" } },
            input_too_short: "Geben Sie mindestens %{count} Zeichen ein",
            loading_more: "Weitere Ergebnisse werden geladen...",
            no_matches: "Keine \u00dcbereinstimmungen gefunden f\u00fcr %{term}",
            no_results: "Keine \u00dcbereinstimmungen gefunden",
            searching: "Ger\u00e4te suchen...",
            selection_too_big: { counting: { one: "Sie k\u00f6nnen nur %{count} Element ausw\u00e4hlen.", other: "Sie k\u00f6nnen nur %{count} Elemente ausw\u00e4hlen." } },
        },
        serial_number: "Seriennummer",
        system: {
            power_control: {
                disabled_desc: "Stromerzeugung deaktiviert",
                enabled_desc: "Stromerzeugung aktiviert",
                modal: {
                    desc_set_off: "Damit <strong>deaktivieren</strong> Sie die Stromerzeugung.",
                    desc_set_on: "Damit <strong>aktivieren</strong> Sie die Stromerzeugung.",
                    title: "Systemleistungssteuerung",
                    verify: "M\u00f6chten Sie fortfahren?",
                },
            },
        },
        tariff: {
            add_peak: "Spitzenwert %{num} hinzuf\u00fcgen",
            add_tier: "Stufe hinzuf\u00fcgen %{num}",
            base_rate_label: "Basisrate",
            baseline: "Basis",
            charge_at_night: "Batterien bei Nacht \u00fcber das Netz laden",
            chg_at_night_desc: "Aktivieren Sie diese Option, wenn die Batterien w\u00e4hrend der Nacht geladen werden sollen.",
            config_details: "Konfigurationsdetails",
            day_names: ["Wochentag", "Wochenende"],
            greater_than: "Gr\u00f6\u00dfer als",
            hour_connector: "zu",
            month_connector: "bis",
            not_set: "Nicht festgelegt",
            off_peak_label: "Nieder",
            peak_hours_label: "Spitzenstunden %{num}",
            peak_label: "Spitzenwert %{num}",
            peak_rate_label: "Spitzenrate %{num}",
            peak_start_time: "Spitzenstartzeit:",
            per_day: "pro Tag",
            per_month: "pro Monat",
            percent_of_baseline: "% der Basis",
            remove: "Entfernen",
            seasonal_rate_desc: "Aktivieren Sie diese Option, wenn sich die Rate zwischen den Jahreszeiten \u00e4ndert.",
            seasonal_select_label: "Rate unterscheidet sich zwischen den Jahreszeiten",
            select_type: "Typ ausw\u00e4hlen",
            single_rate: "Einzelrate",
            summer_rate_label: "Sommerraten",
            tariff_rate_title: "Tarif-/Ratenstruktur",
            tariff_type_warning: "Bei einem Nutzungszeit-Tarif/einer Nutzungszeit-Ratenstruktur m\u00fcssen Sie mindestens eine Spitzenrate angeben. Wenn es keine Spitzenrate gibt, w\u00e4hlen Sie statt der Nutzungsdauer die Einzelrate.",
            tier: "Stufe %{num}",
            tiered: "Mehrstufige Rate",
            time_of_use: "Nutzungszeit",
            unit_label: "kWh",
            up_to: "Bis zu",
            weekday_add_peak: "Wochentag-Spitzenwert %{num} hinzuf\u00fcgen",
            weekday_base_rate_label: "Wochentag-Basisrate",
            weekday_off_peak_rate_label: "Wochentag-Niedertarifrate",
            weekday_peak_hours_label: "Wochentag-Spitzenstunden %{num}",
            weekday_peak_rate_label: "Wochentag-Spitzenrate %{num}",
            weekdays_label: "Wochentag",
            weekdays_rate_label: "Wochentag",
            weekend_add_peak: "Wochenend-Spitzenwert %{num} hinzuf\u00fcgen",
            weekend_base_rate_label: "Wochenend-Basisrate",
            weekend_label: "Wochenende",
            weekend_off_peak_rate_label: "Wochenend-Niedertarifrate",
            weekend_peak_hours_label: "Wochenend-Spitzenstunden %{num}",
            weekend_peak_rate_label: "Wochenend-Spitzenrate %{num}",
            weekend_rate_desc: "Aktivieren Sie diese Option, wenn sich die Rate zwischen Wochentagen und Wochenenden \u00e4ndert.",
            weekend_select_label: "Rate unterscheidet sich zwischen Wochentag und Wochenende",
            winter_months_desc: "W\u00e4hlen Sie zur Einstellung des Winters die obigen Sommermonate aus.",
            winter_rate_label: "Winterraten",
            zero_not_allowed: "Null ist kein g\u00fcltiger Wert",
        },
        wifi: {
            ap_mode_config: {
                confirm_switch_modal: {
                    description: "Dadurch kann die Kommunikation mit dem Envoy unterbrochen werden, und Sie m\u00fcssen erneut eine Verbindung herstellen.",
                    title_false: "AP-Modus deaktivieren?",
                    title_true: "AP-Modus aktivieren?",
                },
                description_disabled:
                    "Aktivieren Sie den AP-Modus, um dieses Envoy als drahtlosen Zugriffspunkt (Access Point, AP) zu verwenden. Dadurch k\u00f6nnen Drahtlosger\u00e4te in der N\u00e4he eine Verbindung zum Envoy herstellen.",
                description_enabled: "Dieses Envoy wird im Moment als drahtloser Zugriffspunkt (Access Point, AP) verwendet.",
                disable: "AP-Modus deaktivieren",
                enable: "AP-Modus aktivieren",
                time_remaining: { one: "Verbleibende Zeit: %{count} Stunde %{minutes} Minuten", other: "Verbleibende Zeit: %{count} Stunden %{minutes} Minuten", zero: "Verbleibende Zeit: %{count} Stunden %{minutes} Minuten" },
                title_disabled: "AP-Modus deaktiviert",
                title_enabled: "AP-Modus aktiviert",
            },
            available_networks: "Verf\u00fcgbare Netzwerke",
            connect: {
                confirm_connect: "Netzwerk best\u00e4tigen",
                connect_to_site: "Mit %{site_name} verbinden?",
                connect_warning: "Hinweis: Dadurch kann die Kommunikation mit dem Envoy unterbrochen werden, und Sie m\u00fcssen erneut eine Verbindung herstellen.",
                connection_failure_explanation: "Verbindung zu Netzwerk %{site_name} kann nicht hergestellt werden.",
                wait_join: "Bitte warten, Verbindung zwischen Envoy und %{site_name} wird hergestellt...",
            },
            connect_incomplete: {
                description: "Das Best\u00e4tigen der Verbindung mit %{site_name} dauert l\u00e4nger als erwartet. Wenn die Netzwerkverbindung nicht erfolgreich ist, wiederholen Sie den Vorgang.",
                title: "Entschuldigung...",
            },
            connect_success: {
                description:
                    "<p>Der Envoy hat sich erfolgreich mit %{site_name} verbunden.</p><p><a href='#' class='open-overview'>Zur\u00fcck zur \u00dcbersicht.</a></p><p>Hinweis: Es kann bis zu einer Minute dauern, bis der Enlighten-Verbindungsstatus aktualisiert wird.</p>",
                title: "Erfolgreich verbunden",
            },
            connection_lost: "Die Verbindung zwischen diesem Ger\u00e4t und dem Envoy wurde unterbrochen.",
            connection_status: { attempting_to_connect: "Verbindungsaufbau l\u00e4uft...", connecting: "Verbinden...", connection_lost: "Verbindung unterbrochen", failed: "Verbindung fehlgeschlagen", not_connected: "Keine Verbindung" },
            country_config: {
                description: "Land ausw\u00e4hlen (ISO 3166-1 Alpha-2-Code), um die Wi-Fi-Signalst\u00e4rke gem\u00e4\u00df der nationalen Aufsichtsbeh\u00f6rde zu optimieren.",
                optional: "(optional)",
                select_prompt: "Land Ausw\u00e4hlen",
                title: "Land",
                update: "Land aktualisieren",
            },
            current_connection: "Verbunden mit <span class='network_name'>%{network_name}</span>",
            enter_password: "Geben Sie das Kennwort f\u00fcr %{site_name} ein.",
            forget: {
                forget_network_header: 'WLAN "%{network_name}" vergessen?',
                forget_warning: "Hinweis: Dadurch kann die Kommunikation mit dem Envoy unterbrochen werden, und Sie m\u00fcssen erneut eine Verbindung herstellen.",
                ok_to_forget: "Dieses Envoy wird dieses Netzwerk nicht l\u00e4nger f\u00fcr die Verbindung zu Enlighten verwenden.",
                wait_forget: "Bitte warten, Netzwerk wird vom Envoy vergessen...",
            },
            forget_failed: { description: "Der Versuch, das WLAN-Netzwerk zu l\u00f6schen, ist fehlgeschlagen. Wenn das Problem weiterhin besteht, wenden Sie sich an den Kundensupport.", title: "Entschuldigung..." },
            forget_incomplete: {
                description:
                    "Der\u00a0L\u00f6schbest\u00e4tigungsvorgang des WLAN-Netzwerks dauert l\u00e4nger als erwartet. Daher ist es unwahrscheinlich, dass Ihr\u00a0Envoy weiterhin mit dieser Anwendung kommunizieren kann. \u00dcberpr\u00fcfen Sie bitte die Netzwerkeinstellungen auf Ihrem Ger\u00e4t, und stellen Sie dann erneut eine Verbindung mit dem Envoy her.",
                title: "Entschuldigung...",
            },
            gateway_ip: "Gateway-IP: ",
            ip_address: "IP-Adresse: ",
            join_another_network: { button: "Anderes Netzwerk ausw\u00e4hlen", title: "Anderes Netzwerk ausw\u00e4hlen" },
            join_network: { button: "Netzwerke anzeigen", title: "Netzwerk ausw\u00e4hlen" },
            network_changed_explanation:
                "Die Netzwerkverbindung Ihres Ger\u00e4ts wurde ge\u00e4ndert. Daher ist es unwahrscheinlich, dass Ihr Envoy weiterhin mit dieser Anwendung kommunizieren kann. \u00dcberpr\u00fcfen Sie bitte die Netzwerkeinstellungen auf Ihrem Ger\u00e4t, und stellen Sie dann erneut eine Verbindung mit dem Envoy her.",
            network_changed_title: "Netzwerkverbindung wurde ge\u00e4ndert",
            no_networks_found: "Keine Netzwerke gefunden",
            not_configured_prompt: "W\u00e4hlen Sie ein kabelloses Netzwerk f\u00fcr die Verbindung zwischen diesem Envoy und Enlighten.",
            other_network: {
                confirm_switch_modal: { description: "Dadurch kann die Kommunikation mit dem Envoy unterbrochen werden, und Sie m\u00fcssen erneut eine Verbindung herstellen.", title: "Mit anderem Netzwerk verbinden?" },
                connect: "Verbinden",
                description: "Mit einem Zugriffspunkt verbinden, der nicht f\u00fcr die Aussendung seiner ESSID konfiguriert ist.",
                name: "Name (ESSID)",
                password: "Kennwort",
                security: "Sicherheit",
                security_mode: { None: "Keine", WEP: "WEP", "WPA-PSK": "Pers\u00f6nlicher WPA", "WPA2-PSK": "Pers\u00f6nlicher WPA2" },
                title: "Anderes Netzwerk verbinden",
                wpa_algorithm: "WPA-Algorithmus",
                wpa_algorithm_type: { CCMP: "CCMP", None: "Keine", TKIP: "TKIP", "TKIP+CCMP": "TKIP + CCMP" },
            },
            page_title: "WLAN-Konfiguration",
            password_required: "Kennwort erforderlich",
            please_wait: "Bitte warten",
            title: "WLAN",
            unsupported_site: "Netzwerk nicht unterst\u00fctzt",
            unsupported_site_explanation: "Von diesem Netzwerk wird eine Sicherheitsmethode verwendet, die vom Envoy nicht unterst\u00fctzt wird.",
            wifi: "WLAN",
            wifi_hardware_missing: "WLAN-Hardware nicht gefunden",
            wifi_waiting_note: "Dieser Vorgang kann bis zu 3 Minuten dauern, und am Ende m\u00fcssen Sie eine erneute Verbindung mit dem Envoy herstellen.",
        },
        wireless_connection: {
            connected: "[DE] Connected",
            last_report: "[DE] Last Report:",
            not_connected: "[DE] Not Connected",
            signal_strength: "[DE] Signal Strength:",
            subghz: "[DE] Sub GHz",
            title: "[DE] Wireless Connection Links",
            zigbee_2_4: "[DE] 2.4 GHz",
        },
    },
    lwui: {
        admin: {
            cross_domain_traffic: {
                status_msgs: { cross_domain_traffic: "Datenverkehr aus Dom\u00e4nen\u00fcbergriff gemeldet", no_cross_domain_traffic: "Kein Datenverkehr aus Dom\u00e4nen\u00fcbergriff gemeldet", updated: "Aktualisiert" },
            },
            network_connectivity: {
                error_msgs: {
                    bad_device_ip: "Fehlerhafte Ger\u00e4te-IP-Adresse und/oder Netzwerkmaske.",
                    bad_gateway_address: "Fehlerhafte Gateway-IP-Adresse.",
                    gateway_subnet: "Gateway-IP-Adresse befindet sich nicht im Subnetz %{subnet}",
                    invalid_primary_dns: "Prim\u00e4re DNS-Adresse ist keine g\u00fcltige IP-Adresse.",
                    invalid_secondary_dns: "Sekund\u00e4re DNS-Adresse ist keine g\u00fcltige IP-Adresse.",
                },
            },
            security_admin: {
                status_msg: {
                    new_confirm_password_mismatch: "Neues und Best\u00e4tigungskennwort stimmen nicht \u00fcberein",
                    old_password_mismatch: "Altes Kennwort nicht korrekt",
                    password_file_missing: "Administratorkennwortdatei(en) fehlt/fehlen",
                    password_update_failure: "Fehler bei der Kennwortaktualisierung",
                    password_update_failure_error: "Fehler: Fehler bei der Kennwort\u00e4nderung",
                    password_update_successful: "Kennwortaktualisierung erfolgreich",
                },
            },
            wireless_connectivity: {
                advanced_settings: {
                    button_apply: "Anwenden",
                    regulatory_domain: "L\u00e4ndercode (ISO 3166-1 Alpha-2)",
                    regulatory_legend: "W\u00e4hlen Sie Ihr Land aus dieser Liste aus.  Dies definiert die zul\u00e4ssigen Radiofrequenzen und die Sendest\u00e4rke in \u00dcbereinstimmung mit Ihrer nationalen Regulierungsbeh\u00f6rde.",
                },
                ap_mode: { active: "aktiv", inactive: "inaktiv", name: "PA-Name:", start: "PA-Modus starten", status: "Status PA-Modus:", stop: "PA-Modus anhalten", timeout: "Minuten bis PA-Zeit\u00fcberschreitung:" },
                busy_joining: "Verbindungsversuch zum Netzwerk",
                busy_scanning: "Suche nach WLAN-Netzwerken",
                busy_testing: "\u00dcberpr\u00fcfen der Verbindung",
                connection_test: { failed: "Verbindungstest fehlgeschlagen.  \u00dcberpr\u00fcfen Sie Ihre Einstellungen.", successful: "Verbindungstest war erfolgreich.  Sie k\u00f6nnen sich beim Netzwerk anmelden." },
                current_settings: {
                    dhcp_waiting: "DHCP-Adresse vom WLAN-Netzwerk anfordern",
                    forget_network: "Dieses Netzwerk vergessen",
                    label_gateway_ip: "Gateway-IP",
                    link_status: "Status",
                    no_config: "Keine WLAN-Verbindung konfiguriert",
                    no_device: "Kein kompatibles WLAN-Ger\u00e4t gefunden",
                    status_connected: "Verbunden",
                    status_connecting: "Verbindung herstellen",
                    status_stopped: "WLAN angehalten",
                    unavailable: "nicht verf\u00fcgbar",
                    verified_config: "WLAN-Netzwerk verifiziert",
                },
                device_information: {
                    device: "Ger\u00e4t",
                    driver_name: "Treibername",
                    hw_version: "Hardwareversion",
                    mac_address: "MAC-Adresse",
                    manufacturer: "Hersteller",
                    model: "Modell",
                    usb_slot_num: "USB-Steckplatz #",
                    usb_spec_version: "USB-Version",
                    vendor: "Anbieter",
                },
                forget_msg: "Diese Aktion l\u00f6scht die aktuelle Drahtloskonfiguration und trennt die Verbindung.  Falls Sie drahtlos verbunden sind, wird Ihre Verbindung zum Envoy getrennt.",
                legend_advanced_settings: "Erweiterte Einstellungen",
                legend_ap_mode: "Envoy-PA-Modus",
                legend_current_settings: "Aktuelle WLAN-Einstellungen",
                legend_device_information: "Ger\u00e4teinformationen",
                legend_manual_configuration: "Manuelle Konfiguration",
                legend_site_survey: "Verf\u00fcgbare WLAN-Netzwerke",
                manual_configuration: {
                    algorithm: "WPA-Algorithmus",
                    button_clear: "Formular l\u00f6schen",
                    button_connect: "Mit Netzwerk verbinden",
                    button_test: "Verbindung testen",
                    channel: "Drahtloser Kanal",
                    essid_length: "Die ESSID muss 1 bis 32 Zeichen umfassen.",
                    info_msg: "Die folgenden Einstellungen sind nur f\u00fcr die Verbindung mit einem Zugriffspunkt erforderlich, der nicht f\u00fcr die Aussendung seiner ESSID konfiguriert ist.",
                    mhz: "MHz",
                    network_name: "Name des drahtlosen Netzwerks (ESSID)",
                    password: "Kennwort/PSK",
                    password_unneeded: "F\u00fcr ein offenes System ist kein Kennwort erforderlich.",
                    password_wep: "WEP-Schl\u00fcssel m\u00fcssen entweder 10, 26 oder 58 Hexadezimalziffern umfassen.",
                    password_wep_chars: "WEP-Schl\u00fcssel d\u00fcrfen nur aus Zahlen und den Buchstaben A\u2013F bestehen.",
                    password_wpa: "WPA/WPA2-PSK-Kennw\u00f6rter m\u00fcssen mindestens 8 und nicht mehr als 63 Zeichen umfassen.",
                    security_mode: "Drahtloser Sicherheitsmodus",
                },
                site_survey: { button_rescan: "Erneut scannen", info_msg: "W\u00e4hlen Sie ein Netzwerk aus der Liste aus.", none_found: "Keine Netzwerke gefunden" },
                test_msg: "Die WLAN-Verbindung wird nun getestet, um zu best\u00e4tigen, dass die Einstellungen g\u00fcltig sind.  Die aktuelle Verbindung zum Envoy wird w\u00e4hrend des Verbindungstests vor\u00fcbergehend unterbrochen.",
            },
        },
        home: {
            event_tbl_col_hdr: { date: "Datum", details: "Details", device: "Ger\u00e4t", event: "Ereignis", eventId: "Ereignis-ID" },
            warnings: {
                acb_critical_temp: "Eine erh\u00f6hte interne Temperatur wird in einer oder mehrerer der AC-Batterien erkannt. Ziehen Sie das Installations- und Betriebshandbuch f\u00fcr Anweisungen zurate.",
                acb_needs_meters:
                    "Zum Abschlie\u00dfen der Systembereitstellung ist ein Envoy-S mit Messger\u00e4t erforderlich. Es wurden AC-Batterien erkannt, bei denen ein Messger\u00e4t erforderlich ist, und dieses Envoy-S verf\u00fcgt \u00fcber kein Messger\u00e4t.",
                acdisco_active: "AC-Trennung aktiv. Envoy kann nicht mit den Mikro-Wechselrichtern kommunizieren.",
                acdisco_fail: "Fehler beim Trennen der AC-Versorgung. \u00dcberpr\u00fcfen Sie das AC-Trennrelais.",
                both_meter_enabled: "Zum Abschluss der Inbetriebnahme des Systems m\u00fcssen die Erzeugungs- und Verbrauchsmessung aktiviert werden.",
                check_date_warn_msg:
                    "Die Systemzeit ist ung\u00fcltig.  Das Envoy kann erst mit den Mikro-Wechselrichtern kommunizieren, wenn dieser Fehler behoben ist.  Wenn das Envoy nicht f\u00fcr die Verwendung von NTP konfiguriert ist oder die konfigurierten NTP-Server nicht erreichen kann, muss dies manuell korrigiert werden \u00fcber die <a href='/admin/lib/date_time_display'>Steuerungen f\u00fcr die Datums- und Uhrzeitverwaltung.</a>",
                cross_domain_traffic: "Kommunikation von anderen Envoys wurde erkannt.",
                date_invalid: "Die Systemzeit ist ung\u00fcltig. Verbinden Sie das Envoy mit dem Internet, damit die Zeit des Ger\u00e4ts korrekt eingestellt werden kann.",
                db_warn_msg: "Das Envoy konnte keine Daten an Enlighten senden, und der lokale Speicher ist fast voll. Verbinden Sie das Envoy mit dem Internet, um einen Datenverlust zu verhindern.",
                eim_consumption_check_wiring: "Das Messger\u00e4t zur Messung des Stromverbrauchs ist nicht korrekt angeschlossen. \u00dcberpr\u00fcfen Sie die Verkabelung.",
                eim_production_check_wiring: "Das Stromerzeugungsmessger\u00e4t ist nicht korrekt angeschlossen. \u00dcberpr\u00fcfen Sie die Verkabelung.",
                envoy_needs_meters:
                    "Zum Abschlie\u00dfen der Systembereitstellung ist ein Envoy-S mit Messger\u00e4t erforderlich. Es wurde ein Netzprofil ausgew\u00e4hlt, bei dem ein Messger\u00e4t erforderlich ist, und dieses Envoy-S verf\u00fcgt \u00fcber kein Messger\u00e4t.",
                legend: "Warnung",
                no_enlighten_report: "Das System war noch nie bei Enlighten angemeldet. Verbinden Sie das Envoy mit dem Internet, um eine Verbindung mit Enlighten herzustellen.",
                no_phase_assignment: "Zum Abschlie\u00dfen der Systembereitstellung m\u00fcssen die AC-Batterien Phasen zugewiesen werden.",
                pcu_limit_warn_msg: "Die Anzahl der erkannten Mikro-Wechselrichter \u00fcbersteigt die \u00dcberwachungskonfiguration des Envoys. Wenden Sie sich an den Enphase Energy-Kundensupport.",
                pcu_limit_warn_msg2:
                    "Die Zahl der erkannten Mikro-Wechselrichter \u00fcbersteigt die standardm\u00e4\u00dfige \u00dcberwachungskonfiguration des Envoy.  Das Envoy erfordert eine Internetverbindung zur Festlegung der \u00dcberwachungskonfiguration.",
                pel_profile_requires_meters: "Die Produktions- und Verbrauchsmessger\u00e4te m\u00fcssen konfiguriert werden, um die Stromexportbegrenzung zu unterst\u00fctzen.",
                phase_assoc_failed: "Phasenerkennung fehlgeschlagen. Ziehen Sie das Installations- und Betriebshandbuch f\u00fcr Anweisungen zurate.",
                pim_profile_requires_meters: "Multiphasenproduktion und Verbrauchsmessung m\u00fcssen aktiviert werden, um die Phasenunsymmetrieverwaltung und die Phasenverlusterkennung zu unterst\u00fctzen.",
            },
        },
    },
    number: {
        currency: { format: { delimiter: ",", format: "%u %n", precision: 2, separator: ".", significant: !1, strip_insignificant_zeros: !1, unit: "$" } },
        format: { delimiter: ",", precision: 3, separator: ".", significant: !1, strip_insignificant_zeros: !1 },
        human: {
            decimal_units: { format: "%n %u", units: { billion: "Billion", million: "Million", quadrillion: "Quadrillion", thousand: "Thousand", trillion: "Trillion", unit: "" } },
            format: { delimiter: "", precision: 3, significant: !0, strip_insignificant_zeros: !0 },
            storage_units: { format: "%n %u", units: { byte: { one: "Byte", other: "Bytes" }, gb: "GB", kb: "KB", mb: "MB", tb: "TB" } },
        },
        percentage: { format: { delimiter: "" } },
        precision: { format: { delimiter: "" } },
    },
    scripts: { data: { verify_internet_connection_message: "Ihr System hat noch nie Berichte an Enlighten gesendet. \u00dcberpr\u00fcfen Sie die Internetverbindung." } },
    time: {
        am: "AM",
        formats: {
            default: "%d/%m/%Y %I :%M %p",
            default_date_time_no_pad: "%d/%m/%Y %-I:%M %p",
            hour_meridian: "%-I %p",
            long: "%B %d, %Y %H:%M",
            noday_nozone_datetime_secs_ui: "%d %b, %Y %-I:%M:%S %p",
            noday_nozone_datetime_ui: "%d %b, %Y %-I:%M %p",
            nozone_datetime: "%a %d %b %Y %I:%M %p",
            short: "%d %b %H:%M",
            short_date: "%d/%m/%Y",
            time_only: "%H:%M",
        },
        pm: "PM",
    },
    units: {
        amps: "A",
        bool: "Boolesch",
        degrees: "Grad",
        hertz: "Hz",
        hertz_per_sec: "Hz/Sek.",
        lagging: "Isolierung",
        milliseconds: "ms",
        millivolts: "mV",
        none: "",
        percent: "%",
        percent_per_hertz: "%/Hz",
        percent_per_min: "%/min",
        seconds: "s",
        volts: "V",
    },
};
I18n.translations.es = {
    date: {
        abbr_day_names: "Dom Lun Mar Mi\u00e9 Jue Vie S\u00e1b".split(" "),
        abbr_month_names: [null, "Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"],
        day_names: "Domingo Lunes Martes Mi\u00e9rcoles Jueves Viernes S\u00e1bado".split(" "),
        formats: { default: "%Y-%m-%d", long: "%B %e, %Y", only_day: "%e", short: "%e %b" },
        month_names: [null, "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"],
        order: ["a\u00f1o", "mes", "d\u00eda"],
    },
    envoy: {
        cond_flags: {
            acb_ctrl: {
                bmudatabounds: "Error de l\u00edmite de datos de la BMU",
                bmuhardwareerror: "Error de hardware de la BMU",
                bmuimageerror: "Error de imagen de la BMU",
                bmumaxcurrentwarning: "Advertencia de corriente m\u00e1xima de la Unidad de monitoreo de la bater\u00eda (BMU)",
                bmusenseerror: "Error de sensor de la BMU",
                cellmaxtemperror: "Error de temperatura m\u00e1xima de celdas",
                cellmaxtempwarning: "Advertencia de temperatura m\u00e1xima de celdas",
                cellmaxvoltageerror: "Error de tensi\u00f3n m\u00e1xima de celdas",
                cellmaxvoltagewarning: "Advertencia de tensi\u00f3n m\u00e1xima de celdas",
                cellmintemperror: "Error de temperatura m\u00ednima de celdas",
                cellmintempwarning: "Advertencia de temperatura m\u00ednima de celdas",
                cellminvoltageerror: "Error de tensi\u00f3n m\u00ednima de celdas",
                cellminvoltagewarning: "Advertencia de tensi\u00f3n m\u00ednima de celdas",
                cibcanerror: "Error de CIB CAN",
                cibimageerror: "Error de imagen de CIB",
                cibspierror: "Error de CIB SPI",
            },
            nsrb_ctrl: {
                acfreqhigh: "Frecuencia de CA alta",
                acfreqlow: "Frecuencia de CA baja",
                acfrequencyoor: "Frecuencia de CA fuera de intervalo",
                acvoltageavgline1: "Promedio de voltaje de CA fuera de rango: fase 1",
                acvoltageavgline2: "Promedio de voltaje de CA fuera de rango: fase 2",
                acvoltageavgline3: "Promedio de voltaje de CA fuera de rango: fase 3",
                acvoltagehighline1: "Voltaje de CA alto: fase 2",
                acvoltagehighline2: "Voltaje de CA fuera de intervalo: fase 2",
                acvoltagehighline3: "Voltaje de CA alto: fase 3",
                acvoltagelowline1: "Voltaje de CA bajo: fase 1",
                acvoltagelowline2: "Voltaje de CA fuera de intervalo: fase 2",
                acvoltagelowline3: "Voltaje de CA bajo: fase 3",
                acvoltageoorline1: "Voltaje de CA fuera de intervalo: fase 1",
                acvoltageoorline2: "Voltaje de CA fuera de intervalo: fase 2",
                acvoltageoorline3: "Voltaje de CA fuera de intervalo: fase 3",
                buttonpress: "Bot\u00f3n presionado",
                dcgriderror: "Error actual de cuadr\u00edcula de DC",
                dcgridhigh: "Corriente de cuadr\u00edcula DC alta",
                dcgridlow: "Corriente de red DC baja",
                relayforced: "Rel\u00e9 forzado",
                relayopen: "Rel\u00e9 abierto",
                rocof: "Error en la tasa de cambio de frecuencia",
            },
            obs_strs: {
                discovering: "Detecci\u00f3n",
                failure: "Error de reporte",
                flasherror: "Error del flash",
                notmonitored: "No supervisado",
                ok: "Normal",
                plmerror: "Error PLM",
                secmodeenterfailure: "Error de entrada en modo seguro",
                secmodeexitfailure: "Error de salida del modo seguro",
                sleeping: "Modo de reposo activado",
                verifing: "Verificando dispositivo",
            },
            pcu_chan: {
                acMonitorError: "Error del monitor de CA",
                acfrequencyhigh: "Frecuencia de CA alta",
                acfrequencylow: "Frecuencia de CA baja",
                acfrequencyoor: "Frecuencia de CA fuera de intervalo",
                acvoltage_avg_hi: "Media de voltaje de CA alta",
                acvoltagehigh: "Tensi\u00f3n de CA alta",
                acvoltagelow: "Tensi\u00f3n de CA baja",
                acvoltageoor: "Voltaje de CA fuera de intervalo",
                acvoltageoosp1: "Voltaje de CA fuera de intervalo: fase 1",
                acvoltageoosp2: "Voltaje de CA fuera de intervalo: fase 2",
                acvoltageoosp3: "Voltaje de CA fuera de intervalo: fase 3",
                agfpowerlimiting: "L\u00edmite de potencia AGF",
                dcresistancelow: "Resistencia de CC baja",
                dcresistancelowpoweroff: "Resistencia de CC baja: apagar",
                dcvoltagetoohigh: "Voltaje de CC muy alto",
                dcvoltagetoolow: "Voltaje de CC muy bajo",
                dfdt: "Cambio demasiado r\u00e1pido de la frecuencia de CA",
                gfitripped: "GFI interrumpido",
                gridgone: "No hay red",
                gridinstability: "Inestabilidad de la red",
                gridoffsethi: "Compensaci\u00f3n de la red alta",
                gridoffsetlow: "Compensaci\u00f3n de la red baja",
                hardwareError: "Error de hardware",
                hardwareWarning: "Advertencia de hardware",
                highskiprate: "Tasa de omisiones alta",
                invalidinterval: "Intervalo no v\u00e1lido",
                pwrgenoffbycmd: "Generaci\u00f3n de energ\u00eda desconectada por comando",
                skippedcycles: "Ciclos omitidos",
                vreferror: "Error de ref. de voltaje",
            },
            pcu_ctrl: {
                alertactive: "Alerta activa",
                altpwrgenmode: "Modo de generaci\u00f3n de energ\u00eda alternativo",
                altvfsettings: "Ajustes de voltaje y frecuencia alternativos",
                badflashimage: "Imagen flash da\u00f1ada",
                bricked: "No hay perfil de red",
                commandedreset: "Restablecimiento ordenado",
                criticaltemperature: "Temperatura cr\u00edtica",
                "dc-pwr-low": "Potencia de CC muy baja",
                iuplinkproblem: "Problema de enlace de IUP",
                manutestmode: "En modo de prueba manual",
                nsync: "Perturbaci\u00f3n de red no sincronizada",
                overtemperature: "Sobretemperatura",
                poweronreset: "Encendido tras restablecimiento",
                pwrgenoffbycmd: "Generaci\u00f3n de energ\u00eda desconectada por comando",
                runningonac: "Funcionamiento con CA",
                "sleep-mode": "Modo de reposo activado",
                tpmtest: "Perfil de red transiente",
                unexpectedreset: "Restablecimiento inesperado",
                watchdogreset: "Restablecimiento de vigilancia",
            },
            rgm_chan: { check_meter: "Error del medidor", power_quality: "Calidad de la alimentaci\u00f3n baja" },
        },
        global: {
            cleared: "Borrar",
            copyright_notice: "2007-2014, [e] Enphase Energy, Inc. Reservados todos los derechos.",
            copyright_notice_01: "[e] Enphase Energy, Inc. Reservados todos los derechos.",
            cs_phone_number: "XXX-XXX-XXXX",
            disable: "Desactivar",
            disabled: "Desactivado",
            enable: "Activar",
            enabled: "Activado",
            enlighten_token_link: "Consiga aqu\u00ed el token",
            false: "Falso",
            none: "Ninguno",
            notapplicable: "n/d",
            ok: "Aceptar",
            page_not_found_msg1: "P\u00e1gina no encontrada",
            page_not_found_msg2: "La p\u00e1gina que intenta ver no existe",
            page_not_found_msg3: 'Prueba la p\u00e1gina de <a href="/">inicio</a>',
            serialnumber: "N\u00famero de serie",
            set: "Configurar",
            too_many_installer_sessions_msg1: "Hay demasiadas sesiones de instalaci\u00f3n activas",
            too_many_installer_sessions_msg2: "Considere cerrar otras ventanas de sesi\u00f3n de instalaci\u00f3n",
            too_many_installer_sessions_msg3: "Hay demasiadas solicitudes activas para este recurso, vuelva a intentar en unos minutos",
            true: "Verdadero",
            unknown: "Desconocido",
        },
        paging: {
            all: "Todo",
            clearchoices: "Restablecer tabla",
            info: "Mostrando de _START_ a _END_ de _TOTAL_ entradas",
            infoempty: "Mostrando 0 a 0 de 0 entradas",
            infofiltered: "(filtradas de entre _MAX_ entradas totales)",
            lengthmenu: "Mostrar entradas de _MENU_",
            processing: "Procesando...",
            search: "Buscar:",
            zerorecords: "No se han encontrado registros que coincidan",
        },
    },
    envoy_backbone: {
        ac_batteries: {
            manage_options: {
                active: "Activo (%{count})",
                active_count: { counting: { one: "Activo (%{count})", other: "Activo (%{count})", zero: "Activo (%{count})" } },
                deleted: "Eliminado (%{count})",
                deleted_count: { counting: { one: "Eliminado (%{count})", other: "Eliminado (%{count})", zero: "Eliminado (%{count})" } },
            },
            max_temp: "Temp. m\u00e1x.: ",
            nav: { all: "Todo", manage: "Administrar", status: "Estado" },
            no_inverters: "No hay bater\u00edas.",
            no_inverters_search: 'No se encontraron bater\u00edas que coincidan con "%{search_term}".',
            sleep_mode: {
                enable_failed:
                    "Fall\u00f3 el intento de poner en reposo las bater\u00edas seleccionadas. Vuelva a intentarlo en unos minutos. Si el problema contin\u00faa, p\u00f3ngase en contacto con el servicio de atenci\u00f3n al cliente.",
                prompt_to_cancel: {
                    desc: "Una bater\u00eda debe estar en el modo de reposo antes de que se pueda desconectar de manera segura.</br></br>\u00bfEst\u00e1 seguro de que quiere detener el ingreso de la bater\u00eda en el modo de reposo?",
                },
                prompt_to_sleep_modal: {
                    desc:
                        "Las bater\u00edas tienen que estar en modo de reposo antes de que se puedan desconectar de forma segura.</br></br><b>Nota:</b> Las bater\u00edas se cargar\u00e1n o descargar\u00e1n hasta un estado de carga de %{min}-%{max}% antes de entrar en modo de reposo.",
                    target_soc_label: "Estado de carga meta",
                    target_soc_link_text: "Cambiar el estado de carga meta",
                    warning: "Advertencia: Cuando una bater\u00eda est\u00e1 en modo de reposo, solo un instalador profesional puede desactivar dicho modo.",
                },
                prompt_to_wake:
                    "Una bater\u00eda debe estar en el modo de reposo antes de que se pueda desconectar de manera segura.</br></br>\u00bfEst\u00e1 seguro de que quiere detener el ingreso de la bater\u00eda en el modo de reposo?",
                sleep_btn: "Modo de reposo",
            },
            state_of_charge: "Estado de carga: ",
            status_options: {
                cancel_sleep_label: "Detener",
                comm_nocount: "COMM",
                power_nocount: "Funcionando",
                preparing_to_sleep_text: "Ingresando al modo de reposo",
                profile_nocount: "Config.",
                wake_sleep_label: "Desactivar",
                waking_label: "Saliendo del modo de reposo",
            },
        },
        app_title: "Envoy Mobile",
        authentication: {
            authentication_with_authms: "Iniciar sesi\u00f3n con Enphase",
            bad_jwt: "Token incorrecto",
            insert_token_headline: "Autenticaci\u00f3n de token",
            title: "Autenticaci\u00f3n",
            token_headline: "Token",
            token_link: "Visite %{auth_authority} para obtener su token",
            token_submit: "Enviar",
            too_many_sessions: "Too many sessions",
            verifying_jwt: "Verificando token",
        },
        buttons: {
            cancel: "Cancelar",
            change: "Cambiar",
            close: "Cerrar",
            connect: "Conectar",
            edit: "Editar",
            forget: "Olvidar",
            forget_network: "Olvidar esta red",
            ok: "Aceptar",
            sleep_off: "Desactive el modo de reposo",
            sleep_on: "Active el modo de reposo",
            start_scan: "Iniciar b\u00fasqueda",
            stop: "Detener",
            update: "Actualizar",
        },
        cellular: {
            carrier: "Operador",
            connected: "Conectado",
            connection_status: "Estado de conexi\u00f3n",
            iccid: "ICCID (n\u00famero m\u00f3vil)",
            imsi: "IMSI (ID de suscriptor)",
            mei: "N\u00famero IMEI de m\u00f3dem",
            no_modem: "No se ha detectado ning\u00fan m\u00f3dem celular",
            not_connected: "No conectado",
            page_title: "Configuraci\u00f3n celular",
        },
        comm_check: {
            communication_level: "Nivel de comunicaci\u00f3n",
            description: "Compruebe la intensidad de la se\u00f1al entre el Envoy y los microinversores.",
            devices: "Dispositivos",
            in_progress: "Comprobaci\u00f3n de comunicaci\u00f3n en curso",
            remaining_time: "Quedan %{minutes} minutos",
            remaining_time_one: "Queda menos de 1 minuto",
            start: "Iniciar comprobaci\u00f3n de comunicaci\u00f3n",
            stop: "Detener comprobaci\u00f3n de comunicaci\u00f3n",
            title: "Comprob de com.",
        },
        comms: {
            communicating: "Comunicando",
            description:
                "La lista de microinversores de comunicaci\u00f3n de Envoy incluye los n\u00fameros de serie de todos los dispositivos que reciben mensajes de Envoy y que notifican informaci\u00f3n acerca del estado y la producci\u00f3n.",
            not_communicating: "No comunicando",
            title: "Microinversores en comunicaci\u00f3n",
        },
        countries: {
            AD: "Andorra",
            AE: "Emiratos \u00c1rabes Unidos",
            AF: "Afganist\u00e1n",
            AG: "Antigua y Barbuda",
            AI: "Anguila",
            AL: "Albania",
            AM: "Armenia",
            AQ: "Ant\u00e1rtida",
            AR: "Argentina",
            AS: "Samoa Americana",
            AT: "Austria",
            AU: "Australia",
            AW: "Aruba",
            AZ: "Azerbaiy\u00e1n",
            BA: "Bosnia-Herzegovina",
            BB: "Barbados",
            BD: "Banglad\u00e9s",
            BE: "B\u00e9lgica",
            BF: "Burkina Faso",
            BG: "Bulgaria",
            BH: "Bar\u00e9in",
            BI: "Burundi",
            BJ: "Ben\u00edn",
            BM: "Bermudas",
            BN: "Brun\u00e9i Darussalam",
            BO: "Bolivia, Estado Plurinacional de",
            BR: "Brasil",
            BS: "Bahamas",
            BT: "But\u00e1n",
            BV: "Isla Bouvet",
            BW: "Botsuana",
            BY: "Bielorrusia",
            BZ: "Belice",
            CA: "Canad\u00e1",
            CC: "Islas Cocos (Keeling)",
            CF: "Rep\u00fablica Centroafricana",
            CG: "Congo",
            CH: "Suiza",
            CI: "Costa de Marfil",
            CK: "Islas Cook",
            CL: "Chile",
            CM: "Camer\u00fan",
            CN: "China",
            CO: "Colombia",
            CR: "Costa Rica",
            CV: "Cabo Verde",
            CX: "Isla de Navidad",
            CY: "Chipre",
            CZ: "Rep\u00fablica Checa",
            DE: "Alemania",
            DJ: "Yibuti",
            DK: "Dinamarca",
            DM: "Dominica",
            DO: "Rep\u00fablica Dominicana",
            DZ: "Argelia",
            EC: "Ecuador",
            EE: "Estonia",
            EG: "Egipto",
            EH: "S\u00e1hara Occidental",
            ER: "Eritrea",
            ES: "Espa\u00f1a",
            ET: "Etiop\u00eda",
            FI: "Finlandia",
            FJ: "Fiyi",
            FK: "Islas Malvinas",
            FM: "Micronesia, Estados Federados de",
            FO: "Islas Feroe",
            FR: "Francia",
            GA: "Gab\u00f3n",
            GB: "Reino Unido",
            GD: "Granada",
            GE: "Georgia",
            GF: "Guayana Francesa",
            GH: "Ghana",
            GI: "Gibraltar",
            GL: "Groenlandia",
            GM: "Gambia",
            GN: "Guinea",
            GP: "Guadalupe",
            GQ: "Guinea Ecuatorial",
            GR: "Grecia",
            GS: "Georgia del Sur e Islas Sandwich del Sur",
            GT: "Guatemala",
            GU: "Guam",
            GW: "Guinea-Bis\u00e1u",
            GY: "Guyana",
            HK: "Hong Kong",
            HM: "Islas Heard y McDonald",
            HN: "Honduras",
            HR: "Croacia",
            HT: "Hait\u00ed",
            HU: "Hungr\u00eda",
            ID: "Indonesia",
            IE: "Irlanda",
            IL: "Israel",
            IN: "India",
            IO: "Territorio Brit\u00e1nico del Oc\u00e9ano \u00cdndico",
            IS: "Islandia",
            IT: "Italia",
            JM: "Jamaica",
            JO: "Jordania",
            JP: "Jap\u00f3n",
            KE: "Kenia",
            KG: "Kirguist\u00e1n",
            KH: "Camboya",
            KI: "Kiribati",
            KM: "Comoras",
            KN: "San Crist\u00f3bal y Nieves",
            KR: "Rep\u00fablica de Corea",
            KW: "Kuwait",
            KY: "Islas Caim\u00e1n",
            KZ: "Kazajist\u00e1n",
            LA: "Rep\u00fablica Democr\u00e1tica Popular de Laos",
            LB: "L\u00edbano",
            LC: "Santa Luc\u00eda",
            LI: "Liechtenstein",
            LK: "Sri Lanka",
            LR: "Liberia",
            LS: "Lesoto",
            LT: "Lituania",
            LU: "Luxemburgo",
            LV: "Letonia",
            MA: "Marruecos",
            MC: "M\u00f3naco",
            MD: "Moldavia, Rep\u00fablica de",
            ME: "Montenegro",
            MG: "Madagascar",
            MH: "Islas Marshall",
            ML: "Mali",
            MM: "Birmania",
            MN: "Mongolia",
            MO: "Macao",
            MP: "Islas Marianas del Norte",
            MQ: "Martinica",
            MR: "Mauritania",
            MS: "Montserrat",
            MT: "Malta",
            MU: "Mauricio",
            MV: "Maldivas",
            MW: "Malaui",
            MX: "M\u00e9xico",
            MY: "Malasia",
            MZ: "Mozambique",
            NA: "Namibia",
            NC: "Nueva Caledonia",
            NE: "N\u00edger",
            NF: "Isla Norfolk",
            NG: "Nigeria",
            NI: "Nicaragua",
            NL: "Pa\u00edses Bajos",
            NO: "Noruega",
            NP: "Nepal",
            NR: "Nauru",
            NU: "Niue",
            NZ: "Nueva Zelanda",
            OM: "Om\u00e1n",
            PA: "Panam\u00e1",
            PE: "Per\u00fa",
            PF: "Polinesia Francesa",
            PG: "Pap\u00faa Nueva Guinea",
            PH: "Filipinas",
            PK: "Pakist\u00e1n",
            PL: "Polonia",
            PM: "San Pedro y Miquel\u00f3n",
            PN: "Islas Pitcairn",
            PR: "Puerto Rico",
            PT: "Portugal",
            PW: "Palaos",
            PY: "Paraguay",
            QA: "Catar",
            RO: "Ruman\u00eda",
            RU: "Federaci\u00f3n de Rusia",
            SA: "Arabia Saud\u00ed",
            SB: "Islas Salom\u00f3n",
            SC: "Seychelles",
            SE: "Suecia",
            SG: "Singapur",
            SH: "Santa Elena, Ascensi\u00f3n y Trist\u00e1n de Acu\u00f1a",
            SI: "Eslovenia",
            SJ: "Svalbard y Jan Mayen",
            SK: "Eslovaquia",
            SL: "Sierra Leona",
            SM: "San Marino",
            SN: "Senegal",
            SO: "Somalia",
            SR: "Surinam",
            ST: "Santo Tom\u00e9 y Pr\u00edncipe",
            SV: "El Salvador",
            SY: "Rep\u00fablica \u00c1rabe Siria",
            SZ: "Suazilandia",
            TC: "Islas Turcas y Caicos",
            TD: "Chad",
            TF: "Territorios Australes Franceses",
            TG: "Togo",
            TH: "Tailandia",
            TJ: "Tayikist\u00e1n",
            TK: "Tokelau",
            TL: "Timor Oriental",
            TM: "Turkmenist\u00e1n",
            TN: "T\u00fanez",
            TO: "Tonga",
            TR: "Turqu\u00eda",
            TT: "Trinidad y Tobago",
            TV: "Tuvalu",
            TZ: "Tanzania, Rep\u00fablica Unida de",
            UA: "Ucrania",
            UG: "Uganda",
            UM: "Islas menores alejadas de los Estados Unidos",
            US: "Estados Unidos",
            UY: "Uruguay",
            UZ: "Uzbekist\u00e1n",
            VA: "Santa Sede (Estado de la Ciudad del Vaticano)",
            VC: "San Vicente y las Granadinas",
            VE: "Venezuela, Rep\u00fablica Bolivariana de",
            VG: "Islas V\u00edrgenes Brit\u00e1nicas",
            VI: "Islas V\u00edrgenes de los Estados Unidos",
            VN: "Vietnam",
            VU: "Vanuatu",
            WF: "Wallis y Futuna",
            WS: "Samoa",
            YE: "Yemen",
            YT: "Mayotte",
            ZA: "Sud\u00e1frica",
            ZM: "Zambia",
            ZW: "Zimbabue",
        },
        counts: "%{actual_count}/%{expected_count}",
        detected: {
            battery_target_seperate: { one: "%{count} bater\u00eda", other: "%{count} bater\u00edas", zero: "%{count} bater\u00edas" },
            description:
                "La lista de microinversores detectados de Envoy incluye todos los n\u00fameros de serie hallados con una b\u00fasqueda de dispositivos o aprovisionados con Installer Toolkit. Cuando se hayan detectado microinversores, pueden enviar y recibir datos adicionales de Envoy.",
            detected: "Detectado",
            device_target: "Objetivo del dispositivo: %{count}",
            device_target_title: "Objetivo del dispositivo: ",
            discovered: "Detectadas:",
            installed: "Instalada",
            micro_target_seperate: { one: "%{count} microinversor", other: "%{count} microinversores", zero: "%{count} microinversores" },
            nsr_target_separate: { one: "%{count} Q-Relay", other: "%{count} Q-Relays", zero: "%{count} Q-Relays" },
            provisioned: "Proporcionadas:",
            remaining_duration: { one: "Duraci\u00f3n restante: %{count} hora %{minutes} minutos", other: "Duraci\u00f3n restante: %{count} horas %{minutes} minutos", zero: "Duraci\u00f3n restante: %{count} horas %{minutes} minutos" },
            remaining_hour_one: "1 hora",
            remaining_hours: "%{hours} horas",
            remaining_minute_one: "Queda 1 minuto",
            remaining_minutes: "Quedan %{minutes} minutos",
            remaining_priority: {
                one: "Duraci\u00f3n prioritaria restante: %{count} hora %{minutes} minutos",
                other: "Duraci\u00f3n prioritaria restante: %{count} horas %{minutes} minutos",
                zero: "Duraci\u00f3n prioritaria restante: %{count} horas %{minutes} minutos",
            },
            remaining_time: "Quedan %{minutes} minutos",
            remaining_time_one: "Queda menos de 1 minuto",
            scan_inprogress: "B\u00fasqueda de dispositivo en curso",
            scan_start: "Iniciar b\u00fasqueda de dispositivos",
            scan_stop: "Detener b\u00fasqueda",
            title: "Microinversores detectados",
        },
        device_alert_messages: {
            meters_not_enabled: "Los medidores de producci\u00f3n y consumo deben configurarse para bater\u00edas con el fin de que puedan funcionar.",
            no_phase_assignment: "Las bater\u00edas no funcionan hasta que se asignen a las fases.",
            not_configured: "Las bater\u00edas deben configurarse antes de que comiencen a funcionar.",
        },
        devices: {
            detected: "Detectado",
            detected_total_count: "%{detected_count} de %{total_count}",
            device_info: {
                change_phase: "Cambiar fase",
                comm_level: "Nivel de comunicaci\u00f3n: ",
                comm_level_2_4_ghz: "[ES] Comm Level (2.4 GHz): ",
                comm_level_sub_ghz: "[ES] Comm Level (Sub GHz): ",
                detected: "Detectado: ",
                discovered: "Detectado mediante b\u00fasqueda de dispositivos",
                grid_profile: "Perfil de red: ",
                last_comm: "\u00daltima comunicaci\u00f3n: ",
                last_report: "\u00daltimo reporte: ",
                notapplicable: "n/d",
                param_table: "Tabla de par\u00e1metros: ",
                part_number: "N\u00famero de referencia: ",
                pending_condition_clear: 'El comando de borrar condici\u00f3n "%{condition_flag}" est\u00e1 en curso.',
                phase: "Adaptador: ",
                phase_unknown: "No se seleccion\u00f3 una fase.",
                provisioned: "Asignado mediante aprovisionamiento",
                running_image: "Imagen en ejecuci\u00f3n: ",
                select_phase: "Seleccionar fase",
                status: "Estado: ",
                unknown: "Desconocido",
                updated: "Actualizado ",
                view_in_array: "Ver en conjunto de paneles",
            },
            device_scan: "B\u00fasqueda de dispositivos",
            device_scan_short: "Buscar",
            scan_state: { active: "Activa", inactive: "Inactivo", scan_disabled: "Desactivado", scan_inhibited: "inhibida", scan_suspended: "suspendida" },
        },
        encharge_batteries: {
            manage_options: {
                active: "[ES] Active (%{count})",
                active_count: { counting: { one: "[ES] Active (%{count})", other: "[ES] Active (%{count})", zero: "[ES] Active (%{count})" } },
                deleted: "[ES] Deleted (%{count})",
                deleted_count: { counting: { one: "[ES] Deleted (%{count})", other: "[ES] Deleted (%{count})", zero: "[ES] Deleted (%{count})" } },
            },
            nav: { all: "Todo", manage: "Administrar", status: "Estado" },
            no_inverters: "[ES] There are no encharge batteries.",
            no_inverters_search: '[ES] No Encharge Batteries were found matching "%{search_term}".',
            phase_labels: { "ph-a": "[ES] L1(A)", "ph-b": "[ES] L2(B)", "ph-c": "[ES] L3(C)", "ph-unk": "[ES] No phase selected", "ph-updating": "[ES] Updating...", select_one: "[ES] Select One" },
            status_options: {
                cancel_sleep_label: "[ES] Stop",
                comm_nocount: "[ES] Comm",
                power_nocount: "[ES] Operating",
                preparing_to_sleep_text: "[ES] Entering Sleep Mode",
                profile_nocount: "[ES] Config",
                wake_sleep_label: "[ES] Turn Off",
                waking_label: "[ES] Exiting Sleep Mode",
            },
            title: "[ES] Encharge",
        },
        enpowers: {
            manage_options: {
                active: "[ES] Active (%{count})",
                active_count: { counting: { one: "[ES] Active (%{count})", other: "[ES] Active (%{count})", zero: "[ES] Active (%{count})" } },
                deleted: "[ES] Deleted (%{count})",
                deleted_count: { counting: { one: "[ES] Deleted (%{count})", other: "[ES] Deleted (%{count})", zero: "[ES] Deleted (%{count})" } },
            },
            max_temp: "[ES] Max Temp: ",
            nav: { all: "[ES] All", manage: "[ES] Manage", status: "[ES] Status" },
            no_inverters: "[ES] There is no Enpower device.",
            no_inverters_search: '[ES] No Enpower device found matching "%{search_term}".',
            state_of_grid: { closed: "[ES] Closed", open: "[ES] Open", title: "[ES] State of Grid: " },
            status_options: { comm_nocount: "[ES] Comm", power_nocount: "[ES] Operating", profile_nocount: "[ES] Config" },
            title: "[ES] Enpower",
        },
        errors: {
            error_message: "Se ha producido un problema al obtener datos de Envoy. Si persiste, p\u00f3ngase en contacto con el servicio de atenci\u00f3n al cliente.",
            interface_not_dhcp: "No puede obtener una direcci\u00f3n IP nueva. Cambie primero el ajuste IP de Envoy a DHCP.",
            not_allowed: "El cambio que ha solicitado no est\u00e1 permitido y no se ha podido guardar.",
            not_authorized: "Lo sentimos, no tiene autorizaci\u00f3n para ver la p\u00e1gina.",
            save_failed: "No se han podido guardar los cambios. ",
            start_scan_target_too_low:
                "<p>Indic\u00f3 que espera que %{expected_count} microinversores informen a este Envoy y ya se detectaron %{expected_count}.</p><p>Antes de empezar una b\u00fasqueda de dispositivos, <a href='#' class='open-target-count'>aumente el n\u00famero de microinversores esperados</a>o borre uno o m\u00e1s microinversores de la  <a href='#' class='open-manage-devices'>pantalla de administraci\u00f3n de dispositivos</a>.</p>",
            start_scan_target_too_low_battery: {
                one: "<p>Indic\u00f3 que espera que %{count} bater\u00eda informe a este Envoy y eso ya se detect\u00f3.</p>",
                other: "<p>Indic\u00f3 que espera que %{count} bater\u00edas informen a este Envoy y esa cantidad ya se detect\u00f3.</p>",
                zero: "<p>Indic\u00f3 que espera que %{count} bater\u00edas informen a este Envoy y esa cantidad ya se detect\u00f3.</p>",
            },
            start_scan_target_too_low_battery_end:
                "<p>Antes de empezar una b\u00fasqueda de dispositivos, <a href='#' class='open-target-count'>aumente el n\u00famero de bater\u00edas esperadas</a>o borre una o m\u00e1s bater\u00edas de la  <a href='#' class='open-manage-devices-battery'>pantalla de administraci\u00f3n de dispositivos</a>.</p>",
            start_scan_target_too_low_both:
                "<p>Ya se detect\u00f3 el n\u00famero esperado de dispositivos.</p><p>Antes de empezar una b\u00fasqueda de dispositivos, <a href='#' class='open-target-count'>aumente el n\u00famero de dispositivos esperados</a> o borre uno o m\u00e1s microinversores o bater\u00edas.</p>",
            start_scan_target_too_low_micro: {
                one: "<p>Indic\u00f3 que espera que %{count} microinversor informe a este Envoy y eso ya se detect\u00f3.</p>",
                other: "<p>Indic\u00f3 que espera que %{count} microinversores informen a este Envoy y ya se detect\u00f3 esa cantidad.</p>",
                zero: "<p>Indic\u00f3 que espera que %{count} microinversores informen a este Envoy y ya se detect\u00f3 esa cantidad.</p>",
            },
            start_scan_target_too_low_micro_end:
                "<p>Antes de empezar una b\u00fasqueda de dispositivos, <a href='#' class='open-target-count'>aumente el n\u00famero de microinversores esperados</a> o borre uno o m\u00e1s microinversores de la <a href='#' class='open-manage-devices'>pantalla de administraci\u00f3n de dispositivos</a>.</p>",
            start_scan_target_too_low_nsr: {
                one: "<p>Indic\u00f3 que espera que %{count} Q-Relays informe a este Envoy y eso ya se detect\u00f3.</p>",
                other: "<p>Indic\u00f3 que espera que %{count} Q-Relays informen a este Envoy y ya se detect\u00f3 esa cantidad.</p>",
                zero: "<p>Indic\u00f3 que espera que %{count} Q-Relays informen a este Envoy y ya se detect\u00f3 esa cantidad.</p>",
            },
            start_scan_target_too_low_nsr_end:
                "<p>Antes de empezar una b\u00fasqueda de dispositivos, <a href='#' class='open-target-count'>aumente el n\u00famero de Q-Relays esperados</a> o borre uno o m\u00e1s Q-Relays de la <a href='#' class='open-manage-devices-nsr'>pantalla de administraci\u00f3n de dispositivos</a>.</p>",
            start_scan_title: "B\u00fasqueda de dispositivo no disponible",
            timeout_message:
                "La obtenci\u00f3n de datos de Envoy est\u00e1 tardando bastante. Aseg\u00farese de que Envoy est\u00e1 activado y de que tanto Envoy como este dispositivo est\u00e1n conectados a la misma red local. Si el problema persiste, p\u00f3ngase en contacto con el servicio de atenci\u00f3n al cliente.",
            title: "Error",
            tunnel_close_failed: "Error al intentar cerrar la conexi\u00f3n con el soporte t\u00e9cnico de Enphase. Si persiste, p\u00f3ngase en contacto con el servicio de atenci\u00f3n al cliente.",
            tunnel_failed_title: "Error de conexi\u00f3n",
            tunnel_open_failed:
                "El Envoy debe estar conectado a Internet para abrir una conexi\u00f3n a Enphase. Si el Envoy tiene conexi\u00f3n a Internet y el problema persiste, p\u00f3ngase en contacto con el servicio de atenci\u00f3n al cliente.",
        },
        ethernet: {
            buttons: { dhcp: "Usar DHCP", new_ip: "Obtener nueva direcci\u00f3n IP", static: "Usar IP est\u00e1tica" },
            confirm_change: { description: "Esto puede interrumpir las comunicaciones con el Envoy y requerir que vuelva a realizar la conexi\u00f3n.", title: "\u00bfDesea cambiar la configuraci\u00f3n de Ethernet?" },
            confirm_static: {
                description: "Esto asignar\u00e1 la direcci\u00f3n IP de DHCP actual y otras configuraciones como valores est\u00e1ticos. Si elige continuar, puede actualizar estos valores en la siguiente pantalla.",
                title: "\u00bfDesea cambiar la configuraci\u00f3n de Ethernet?",
            },
            gateway_ip: "IP de puerta de enlace",
            ip_address: "Direcci\u00f3n IP",
            ip_setting: "Configuraci\u00f3n de IP",
            netmask: "M\u00e1scara de red",
            new_ip_modal: { description: "Esto puede interrumpir las comunicaciones con el Envoy y requerir que vuelva a realizar la conexi\u00f3n.", title: "\u00bfDesea obtener una nueva direcci\u00f3n IP?" },
            no_config: "No se ha detectado ninguna conexi\u00f3n de Ethernet.",
            page_title: "Configuraci\u00f3n de Ethernet",
            primary_dns: "Servidor de DNS principal",
            secondary_dns: "Servidor de DNS secundario",
            type: { dhcp: "DHCP", static: "IP est\u00e1tica" },
        },
        forms: { search: "Buscar", search_prompt: "N\u00famero de serie", select_prompt: "Seleccionar 1" },
        global_nav: {
            acb: "[ES] AC Battery",
            comms: "COMM",
            detected: "Detectado",
            encharge: "[ES] Encharge",
            encharge_batteries: "[ES] Encharge",
            enpower: "[ES] Enpower",
            meters: "Medidores",
            meters_small: "Medi-<br/>dores",
            microinverters: "Microinversores",
            microinverters_short: "Micros",
            more: "M\u00e1s",
            network: "Red",
            nsr: "Rel\u00e9s Q",
            overview: "Sistema",
            power: "Potencia",
            profiles: "Perfiles",
            storage: "Bater\u00edas CA",
        },
        initial_setup: {
            continue: "Continuar",
            device_prompt: "Introduzca el n\u00famero de dispositivos que espera que informen a este Envoy.",
            eu_profile_prompt: "Seleccione un perfil de red el\u00e9ctrica espec\u00edfico para la ubicaci\u00f3n.",
            migration_in_progress_message: "se est\u00e1n actualizando los perfiles",
            na_profile_prompt: "El sistema est\u00e1 utilizando las configuraciones de perfil de red el\u00e9ctrica instalada por el fabricante. Puede seleccionar un perfil de red espec\u00edfico para la ubicaci\u00f3n abajo.",
            system_size: "Tama\u00f1o del sistema",
        },
        jquery_validate: {
            messages: {
                addedTierPercent: "Introduzca un n\u00famero\u00a0mayor al porcentaje\u00a0de base\u00a0ingresado para {0}.",
                an_number: "Introduzca un n\u00famero v\u00e1lido.",
                creditcard: "Introduzca un n\u00famero de tarjeta de cr\u00e9dito v\u00e1lido.",
                date: "Introduzca una fecha v\u00e1lida.",
                dateISO: "Introduzca una fecha (ISO) v\u00e1lida.",
                digits: "Introduzca solo d\u00edgitos.",
                domain: "Introduzca una direcci\u00f3n IP v4 (xxx.xxx.xxx.xxx) o URL (google.com) v\u00e1lidas",
                email: "Introduzca una direcci\u00f3n de correo electr\u00f3nico v\u00e1lida.",
                equalTo: "Introduzca el mismo valor de nuevo.",
                ipv4: "Introduzca una direcci\u00f3n IP v4 v\u00e1lida. (xxx.xxx.xxx.xxx)",
                max: "Introduzca un valor menor o igual a {0}.",
                maxlength: "Introduzca menos de {0} caracteres.",
                min: "Introduzca un valor mayor o igual a {0}.",
                minlength: "Introduzca al menos {0} caracteres.",
                number: "Introduzca un n\u00famero v\u00e1lido.",
                range: "Introduzca un valor entre {0} y {1}.",
                rangelength: "Introduzca un valor de entre {0} y {1} caracteres.",
                remote: "Rellene este campo.",
                required: "Este campo es obligatorio.",
                url: "Introduzca una URL v\u00e1lida.",
                wep_key: "Introduzca una clave WEP v\u00e1lida (los caracteres 10, 26 o 58, que pueden incluir 0-9 o A-F).",
            },
        },
        loading: "Espere, cargando",
        meters: {
            active_energy: "Energ\u00eda activa",
            active_energy_lt: "Energ\u00eda activa",
            active_power: "Potencia activa",
            apparent_energy: "Energ\u00eda aparente",
            apparent_power: "Potencia aparente",
            consumption: "Medidor de consumo",
            consumption_meter: {
                enable_meter: "Activar medidor de consumo",
                measurement_type: "Circuito medido",
                meter_type_desc: "\u00bfEl circuito que pasa a trav\u00e9s de los TC de consumo incluye carga con producci\u00f3n solar o solo carga?",
                meter_type_desc_singular: "\u00bfEl circuito que pasa a trav\u00e9s de los TC de consumo incluye carga con producci\u00f3n solar o solo carga?",
                meter_type_warning: "Aseg\u00farese de que las selecciones anteriores sean correctas.",
            },
            current: "Corriente",
            current_ct: {
                current_ct_settings: "Configuraci\u00f3n actual de TC",
                custom_cts_installed: "TC %{meter_type} personalizados instalados",
                primary: "Principal",
                remove_desc: "Presione Aceptar (OK) para confirmar que est\u00e1 usando los TC %{meter_type} est\u00e1ndar de Enphase.",
                remove_settings: "\u00bfEliminar la configuraci\u00f3n de TC personalizados?",
                secondary: "Secundario",
                turns: "Vueltas",
            },
            descriptors: { lifetime: "Ciclo de vida", lifetime_lag: "Atraso (ciclo de vida)", lifetime_lead: "Adelanto (ciclo de vida)", today: "Hoy", today_lag: "Atraso (hoy)", today_lead: "Adelanto (hoy)" },
            enable_consumption_meter: "Activar medidor de consumo",
            enable_consumption_modal: {
                description: "Una vez que se activa este medidor, no puede desactivarse ni se puede cambiar el tipo.",
                description_mode_three: "Una vez que haya activado este medidor, no podr\u00e1 desactivarlo o cambiar el tipo, ni disminuir el n\u00famero de fases.",
                description_mode_three_post_enable: "Una vez que hay hecho esto, no podr\u00e1 disminuir el n\u00famero de fases.",
                note_three: "<strong>Nota: El n\u00famero de fases tambi\u00e9n se aumentar\u00e1 en el medidor de producci\u00f3n.</strong>",
                note_three_post_enable: "<strong>Nota: El n\u00famero de fases tambi\u00e9n se aumentar\u00e1 en el medidor de producci\u00f3n.</strong>",
                title: '\u00bfDesea activar el medidor con medici\u00f3n "%{type}"?',
                title_mode_three: "Activar medidor con circuito medido: %{type} y fases medidas: %{phCount}?",
                title_mode_three_post_enable: "Fases actualizadas medidas a %{phCount}?",
            },
            enable_meter: "Activar medidor de consumo",
            enable_modal: { description: "Una vez que se activa este medidor, no puede desactivarse ni se puede cambiar el tipo.", title: "\u00bfDesea activar el medidor con medici\u00f3n %{type}?" },
            enable_production_meter: "Activar medidor de producci\u00f3n",
            enable_production_modal: {
                description: "Una vez que se activa este medidor, no puede desactivarse.",
                description_mode_three: "Una vez que haya activado este medidor, no podr\u00e1 desactivarlo ni disminuir el n\u00famero de fases.",
                description_mode_three_post_enable: "Una vez que hay hecho esto, no podr\u00e1 disminuir el n\u00famero de fases.",
                note_three: "<strong>Nota: El n\u00famero de fases tambi\u00e9n se aumentar\u00e1 en el medidor de consumo.</strong>",
                note_three_post_enable: "<strong>Nota: El n\u00famero de fases tambi\u00e9n se aumentar\u00e1 en el medidor de consumo.</strong>",
                title: "\u00bfActivar medidor?",
                title_mode_three: "Activar medidor con fases medidas: %{phCount}?",
                title_mode_three_post_enable: "Fases actualizadas medidas a %{phCount}?",
            },
            enable_production_prompt: "El medidor de producci\u00f3n debe habilitarse antes de que estas lecturas se puedan mostrar.",
            freq_analysis: { btn_change_data_type: "Alternar datos", plc_activity: "Actividad", plc_power_spectrum: "Espectro de potencia", power_line_analy: "An\u00e1lisis de comunicaci\u00f3n de l\u00ednea el\u00e9ctrica" },
            id: "EID",
            internal_meters: "Medidores internos",
            latest_reading: "\u00daltima lectura",
            lifetime_energy: "Ciclo de vida",
            load_contains_storage_message: "Las lecturas de carga incluyen la actividad de almacenamiento.",
            measurement_type: "Tipo",
            meter_change_warning: "Esto no se puede cambiar una vez activado el medidor.",
            meter_mode: { single: "Monof\u00e1sico (L-N)", split: "Monof\u00e1sico (L-L)", three: "Multifase" },
            meter_readings: "Lecturas",
            meter_state: { disabled: "Desactivado", enabled: "Activado" },
            meter_status: {
                "check-wiring": "Comprobar cableado",
                meter_setup: "Configurar medici\u00f3n ahora",
                meters_not_enabled: "Medidores inhabilitados",
                normal: "Normal",
                "not-metering": "Medidor inhabilitado",
                status_flags: {
                    "negative-production": "Las lecturas de producci\u00f3n son negativas. Compruebe\u00a0la orientaci\u00f3n del TC y los cables, en comparaci\u00f3n con las conexiones de tensi\u00f3n.",
                    "negative-total-consumption": "Las lecturas de consumo son negativas. Compruebe\u00a0la orientaci\u00f3n del TC y los cables, en comparaci\u00f3n con las conexiones de tensi\u00f3n.",
                    "power-on-unused-phase": "Se detecta electricidad en una fase inusual. Compruebe\u00a0las conexiones de cables del TC y de tensi\u00f3n, en comparaci\u00f3n con las conexiones de tensi\u00f3n.",
                    "production-imbalance": "La producci\u00f3n no est\u00e1 equilibrada entre fases. Compruebe\u00a0las conexiones de cables del TC y de tensi\u00f3n.",
                },
            },
            meter_type: { "net-consumption": "Neto", "total-consumption": "Total" },
            meter_type_desc: "Si los TC de consumo est\u00e1n en un circuito a trav\u00e9s del cual fluye la producci\u00f3n solar, deje el tipo establecido como <b>Neto</b>. Si no, cambie el tipo a <b>Total</b>.",
            meter_type_verbose: { "net-consumption": "Carga con producci\u00f3n solar", "total-consumption": "Solo carga" },
            meter_type_warning: "Aseg\u00farese de configurar el tipo de medidor correctamente. Esto no se puede cambiar una vez activado el medidor.",
            mode: "Modo",
            multi_phase_options: { mphase_0: "No seleccionado", mphase_1: "L1(A)", mphase_2: "L1(A) + L2(B)", mphase_3: "L1(A) + L2(B) + L3(C)" },
            multi_phase_warning: {
                consumption: {
                    post_continue: "El medidor a\u00fan no est\u00e1 activado. Verifique las lecturas, luego presione <strong>Activar medidor de consumo</strong> en la parte inferior de la pantalla.",
                    pre_continue: "El medidor a\u00fan no est\u00e1 activado. Seleccione las fases medidas y el circuito medido, luego presione <strong>Ver lecturas</strong>.",
                    pre_continue_one: "El medidor a\u00fan no est\u00e1 activado. Seleccione el circuito medido, luego presione <strong>Ver lecturas</strong>.",
                },
                production: {
                    post_continue: "El medidor a\u00fan no est\u00e1 activado. Verifique las lecturas, luego presione <strong>Activar medidor de producci\u00f3n</strong> en la parte inferior de la pantalla.",
                    pre_continue: "El medidor a\u00fan no est\u00e1 activado. Seleccione las fases medidas, luego presione <strong>Ver lecturas</strong>.",
                },
            },
            net_consumption_desc:
                "En estas lecturas se refleja la diferencia entre la carga total del hogar y la producci\u00f3n solar. Las lecturas deben coincidir aproximadamente con las lecturas del medidor de la instalaci\u00f3n del hogar.",
            net_consumption_title: "Consumo neto",
            no_consumption: "No se ha configurado ning\u00fan medidor de consumo para este Envoy.",
            no_meters: "No se han detectado medidores.",
            no_production: "No se ha configurado ning\u00fan medidor de producci\u00f3n para este Envoy.",
            phase_count: "Fases medidas",
            phase_count_desc: "Seleccione cu\u00e1les de las fases del medidor ha conectado.",
            phase_labels: { phase_1: "L1(A)", phase_2: "L2(B)", phase_3: "L3(C)" },
            pmu: {
                add_another: "A\u00f1adir otro",
                add_meter: "A\u00f1adir medidor de potencia",
                config: {
                    add: "A\u00f1adir medidores seleccionados",
                    meters_description: "Medidores de potencia detectados en esta red:",
                    network_warning: "Antes de a\u00f1adir un medidor, aseg\u00farese de que Envoy dispone de conexi\u00f3n a Ethernet con una direcci\u00f3n IP est\u00e1tica. Esta deber\u00eda configurarse en el router y en el Envoy.",
                    no_meters_description:
                        "No se detectaron medidores de potencia<div class='alert alert-info'><b>Nota:</b></div><div class='alert alert-info'> La detecci\u00f3n de medidores de potencia puede tardar hasta una hora.</div><div class='alert alert-info'> Para facilitar la detecci\u00f3n, aseg\u00farese de que el medidor de potencia est\u00e9 en la misma subred local que el Envoy.</div>",
                    remove: "Quitar medidor de potencia",
                    title: "Configuraci\u00f3n del medidor de potencia",
                },
                labels: {
                    fw_version: "Versi\u00f3n de firmware",
                    ip: "Direcci\u00f3n IP",
                    mac_address: "Direcci\u00f3n Mac",
                    manufacturer: "Fabricante",
                    part_number: "N\u00famero de pieza",
                    production: "Producci\u00f3n",
                    serial_number: "N\u00famero de serie",
                    status: "Estado",
                },
                phase_coupler: "Se requiere un acoplador de fases para que los microinversores instalados en L2 o L3 se puedan comunicar con el Envoy.",
            },
            power_exporting: "(Exportando a la red el\u00e9ctrica)",
            power_factor: "Factor de potencia",
            power_importing: "(Importando de la red el\u00e9ctrica)",
            production: "Medidor de producci\u00f3n",
            reactive_energy: "Energ\u00eda reactiva",
            reactive_power: "Potencia reactiva",
            single_phase_warning: {
                consumption: {
                    post_continue: "El medidor a\u00fan no est\u00e1 activado. Verifique las lecturas, luego presione <strong>Activar medidor de consumo</strong> en la parte inferior de la pantalla.",
                    pre_continue: "El medidor a\u00fan no est\u00e1 activado. Seleccione el circuito medido, luego presione <strong>Ver lecturas</strong>.",
                },
                production: {
                    post_continue: "El medidor a\u00fan no est\u00e1 activado. Verifique las lecturas, luego presione <strong>Activar medidor de producci\u00f3n</strong> en la parte inferior de la pantalla.",
                    pre_continue: "El medidor a\u00fan no est\u00e1 activado. Presione <strong>Ver lecturas</strong> para ver y verificar las lecturas.",
                },
            },
            status: "Estado",
            title: "Medidores",
            today_energy: "Hoy",
            total_consumption_desc: "En estas lecturas se refleja el total de la carga del hogar.",
            total_consumption_na: "El medidor de producci\u00f3n debe habilitarse antes de que estas lecturas se puedan mostrar.",
            total_consumption_title: "Consumo total",
            type: { eim: "Medidor integrado de Envoy", pmu: "Medidor de potencia", rgm: "RGM de Enphase" },
            unavailable: "n/d",
            update_settings: "Actualizar",
            view_readings: "Ver lecturas",
            wizard: {
                batt_off: { counting: { one: "Aseg\u00farese de que el circuito de la bater\u00eda de Enphase est\u00e9 apagado.", other: "Aseg\u00farese de que los circuitos de la bater\u00eda de Enphase est\u00e9n apagados." } },
                battery_reminder: "<b>Recuerde encender el circuito de bater\u00edas de Enphase.</b>",
                btn_next: "Siguiente",
                btn_try_again: "Volver a intentarlo",
                bullet_load_increase: "\u00bfLa carga total del hogar aument\u00f3 seg\u00fan lo esperado?",
                bullet_meters_match: "\u00bfEl medidor de la instalaci\u00f3n del hogar coincide aproximadamente con esta lectura?",
                bullet_phase_select: "\u00bfLa producci\u00f3n solar fluye por la red el\u00e9ctrica medida por el CT de consumo?",
                bullet_pv_on:
                    "Encienda los disyuntores fotovoltaicos y espere a que se complete el periodo de reconexi\u00f3n. El fotovoltaico deber\u00eda empezar a generar energ\u00eda en 5 minutos o menos, luego presione <strong>Siguiente</strong>.",
                bullet_turn_on_load: "Encienda una carga conocida, por ej. una pistola de calor, luego toque <b>Siguiente</b>.",
                check_meters: "Verificar<br>medidores",
                check_title: " Verificar medidor %{meter_type}",
                confirm_ct_routing: "Aseg\u00farese de que todas las cargas del hogar se dirijan hacia los CT de consumo.",
                consumption_appears_good: "El medidor de consumo parece estar configurado de manera correcta.",
                consumption_ct_direction: "Verifique que la flecha en los TC de consumo apunten en direcci\u00f3n del flujo de energ\u00eda hacia el centro de carga.",
                consumption_cts_installed: "\u00bfInstal\u00f3 los CT de consumo?",
                consumption_enable_prompt: "Presione <strong>Activar medidor de consumo</strong> para completar la configuraci\u00f3n del medidor.",
                consumption_looks_good: "\u00a1Las lecturas del medidor parecen normales!",
                consumption_neg: "Las lecturas de consumo son negativas. Pruebe lo siguiente, luego presione <b>Intentar nuevamente</b>.",
                consumption_not_enabled: "El medidor de consumo no est\u00e1 activado.",
                consumption_phase_sel_net: "El CT de consumo incluye producci\u00f3n solar.",
                consumption_phase_sel_total: "El CT de consumo no incluye producci\u00f3n solar.",
                ct_bw_correct: "Aseg\u00farese de que los cables azul y blanco est\u00e9n conectados en la posici\u00f3n correcta en el bloque de terminales.",
                desc: "Utilice nuestro asistente paso a paso para garantizar que los medidores internos est\u00e9n cableados y configurados de manera correcta.",
                desc_consumption: "Utilice nuestro asistente paso a paso para garantizar que el medidor de consumo est\u00e9 cableado y configurado de manera correcta.",
                desc_production: "Utilice nuestro asistente paso a paso para garantizar que el medidor de producci\u00f3n est\u00e9 cableado y configurado de manera correcta.",
                done: "Hecho",
                enable_button: "Activar medidor %{meterType}",
                enough_sun: "Aseg\u00farese de que suficiente luz solar llegue a los m\u00f3dulos fotovoltaicos para encender los microinversores.",
                exit_check: "\u00bfEst\u00e1 seguro de que quiere salir del verificador del medidor?",
                exit_conf: {
                    desc: "\u00bfEst\u00e1 seguro que desea salir del asistente de configuraci\u00f3n del medidor de producci\u00f3n? Necesita volver a comenzar si desea utilizar el asistente nuevamente.",
                    neg_button: "Volver",
                    title: "\u00bfSalir del asistente?",
                },
                exit_wizard: "Salir del asistente",
                get_started: "Introducci\u00f3n",
                load_didnt_increase: "La carga total del hogar no aument\u00f3 seg\u00fan lo esperado. Verifique lo siguiente, luego presione <b>Intentar nuevamente</b>.",
                manual_prompt: "Configuraci\u00f3n manual del medidor",
                most_common: "(configuraci\u00f3n m\u00e1s com\u00fan)",
                negative: "NO",
                phase_select_prompt: "Seleccionar las fases medidas seg\u00fan como se cable\u00f3 el Envoy-S: ",
                positive: "S\u00cd",
                power_exporting: "Exportando",
                power_importing: "Importando",
                prod_enable_desc1: "Las lecturas de producci\u00f3n est\u00e1n cerca de cero, seg\u00fan lo esperado.",
                prod_enable_desc2: "Presione <strong>Activar medidor de producci\u00f3n</strong> para completar la configuraci\u00f3n del medidor.",
                prod_meter_enabled: "El medidor de producci\u00f3n est\u00e1 activado.",
                prod_su1_pv_on: {
                    counting: {
                        one: "Aseg\u00farese de que el circuito fotovoltaico est\u00e9 encendido y produciendo energ\u00eda (el periodo de reconexi\u00f3n se complet\u00f3).",
                        other: "Aseg\u00farese de que los circuitos fotovoltaicos est\u00e9n encendidos y produciendo energ\u00eda (el periodo de reconexi\u00f3n se complet\u00f3).",
                    },
                },
                prod_su2_pv_off: "Apague los disyuntores fotovoltaicos, luego presione <b>Siguiente</b>.",
                prod_ts_p4: {
                    desc: "Las lecturas de producci\u00f3n son negativas. Verifique lo siguiente, luego presione Intentar nuevamente.",
                    ts1: {
                        counting: {
                            one: "Aseg\u00farese de que el circuito fotovoltaico est\u00e9 encendido y produciendo energ\u00eda (el periodo de reconexi\u00f3n se complet\u00f3).",
                            other: "Aseg\u00farese de que los circuitos fotovoltaicos est\u00e9n encendidos y produciendo energ\u00eda (el periodo de reconexi\u00f3n se complet\u00f3).",
                        },
                    },
                    ts2: { counting: { one: "Aseg\u00farese de que el circuito de la bater\u00eda de Enphase est\u00e9 apagado.", other: "Aseg\u00farese de que los circuitos de la bater\u00eda de Enphase est\u00e9n apagados." } },
                    ts3: {
                        counting: {
                            one: "Verifique que la flecha en el TC de producci\u00f3n apunte en direcci\u00f3n del flujo de energ\u00eda hacia el centro de carga.",
                            other: "Verifique que la flecha en los TC de producci\u00f3n apunte en direcci\u00f3n del flujo de energ\u00eda hacia el centro de carga.",
                        },
                    },
                    ts5: {
                        counting: {
                            one: "Aseg\u00farese de que los cables que funcionan a trav\u00e9s del CT de producci\u00f3n solo incluyan la generaci\u00f3n fotovoltaica (y ninguna carga).",
                            other: "Aseg\u00farese de que los cables que funcionan a trav\u00e9s de los CT de producci\u00f3n solo incluyan la generaci\u00f3n fotovoltaica (y ninguna carga).",
                        },
                    },
                    ts6: "Aseg\u00farese de que los TC est\u00e9n sujetos a las fases correctas con respecto al terminal de potencia del Envoy.",
                },
                prod_ts_p5: {
                    desc: "Las lecturas de producci\u00f3n son mayores de lo que deber\u00edan ser. Pruebe lo siguiente, luego presione <b>Intentar nuevamente</b>.",
                    ts2: {
                        counting: {
                            one: "Aseg\u00farese de que los cables que funcionan a trav\u00e9s del CT de producci\u00f3n solo incluyan la generaci\u00f3n fotovoltaica (y ninguna carga).",
                            other: "Aseg\u00farese de que los cables que funcionan a trav\u00e9s de los CT de producci\u00f3n solo incluyan la generaci\u00f3n fotovoltaica (y ninguna carga). ",
                        },
                    },
                },
                production_not_enabled: "El medidor de producci\u00f3n no est\u00e1 activado.",
                pv_off: { counting: { one: "Aseg\u00farese de que el circuito fotovoltaico est\u00e9 apagado.", other: "Aseg\u00farese de que los circuitos fotovoltaicos est\u00e9n apagados." } },
                pv_reminder: "<b>Recuerde encender el circuito fotovoltaico.</b> Los microinversores tardan aproximadamente 5 minutos en reportar la generaci\u00f3n de energ\u00eda.",
                readings_dont_match1:
                    "A\u00fan desconocemos por qu\u00e9 las lecturas no coinciden con el medidor de utilidad del hogar. Pruebe presionar <b>Intentar nuevamente</b> para cambiar la configuraci\u00f3n de la ubicaci\u00f3n de los CT de consumo.",
                readings_dont_match2:
                    "Si eso no funciona, puede salir del ayudante y usar la opci\u00f3n <b>Configuraci\u00f3n manual de medidor</b>. Sugerimos que se comunique con el Servicio de Asistencia al Cliente de Enphase para recibir asistencia antes de continuar.",
                readings_dont_match_post:
                    "P\u00f3ngase en contacto con el Servicio de Asistencia al Cliente de Enphase para recibir asistencia e informar que verific\u00f3 el medidor y las lecturas a\u00fan no coinciden con el medidor del servicio p\u00fablico.",
                reset_timer: "Reiniciar temporizador",
                setup_title: " Configurar medidor %{meter_type}",
                start_timer: "Iniciar temporizador",
                stop_timer: "Detener temporizador",
                sw_off_batt: { counting: { one: "Apague el circuito de bater\u00edas de Enphase.", other: "Apague los circuitos de bater\u00edas de Enphase." } },
                sw_off_pv: "Apague los disyuntores fotovoltaicos.",
                total_cons_not_reduced: "Encender el circuito fotovoltaico no reduce el consumo total. Verifique lo siguiente, luego presione <b>Intentar nuevamente</b>.",
                total_load: "Carga total del hogar",
                trouble_c6_desc1: "Si sigui\u00f3 todas las instrucciones en pantalla y las lecturas de consumo siguen siendo negativas, ",
                trouble_c8_desc1: "Si sigui\u00f3 todas las instrucciones en pantalla y el consumo total sigue sin reducirse al encender el circuito fotovoltaico, ",
                trouble_desc2: "Le sugerimos que se comunique con el soporte t\u00e9cnico de Enphase al <a href='tel:%{dial_num}'> %{disp_num}</a> para recibir asistencia antes de proceder.",
                trouble_install_guide: "Lea la <strong>Gu\u00eda de instalaci\u00f3n de medidores de Envoy</strong>",
                trouble_manual_prompt: " O puede salir del asistente y usar la opci\u00f3n de <strong>Configuraci\u00f3n manual del medidor</strong>.",
                trouble_p0_5: {
                    desc: {
                        counting: {
                            one: "Indic\u00f3 que solo se mide %{selected_phases}, pero %{phaseStr} a\u00fan tiene energ\u00eda.",
                            other: "Indic\u00f3 que solo se miden %{selected_phases}, pero %{phaseStr} a\u00fan tiene energ\u00eda.",
                        },
                    },
                    ts1: "Compruebe el cableado. \u00bfLas fases est\u00e1n cableadas de manera correcta?",
                    ts_no_resp: "Arregle el cableado, luego presione <b>Intentar nuevamente</b>.",
                    ts_yes_resp: "Cambie la selecci\u00f3n de fases medidas para que coincida con el cableado, luego presione <b>Intentar nuevamente</b>.",
                },
                trouble_p0_desc1: "Si sigui\u00f3 todas las instrucciones en pantalla y a\u00fan hay energ\u00eda en una fase que no est\u00e1 en uso, ",
                trouble_p4_desc1: "Si sigui\u00f3 todas las instrucciones en pantalla y las lecturas de producci\u00f3n siguen siendo negativas, ",
                trouble_p5_desc1: "Si sigui\u00f3 todas las instrucciones en pantalla y las lecturas de producci\u00f3n siguen m\u00e1s altas de lo esperado, ",
                trouble_p7_desc1: "Si sigui\u00f3 todas las instrucciones en pantalla y la carga del hogar sigue sin aumentar como se esperaba, ",
                trouble_prompt: "\u00bfTiene problemas para completar este paso?",
                unable_to_see_meter: "Si no puede acceder a las lecturas de <strong>ENERG\u00cdA</strong> en el medidor de la instalaci\u00f3n ni medirla con un medidor port\u00e1til, haga clic en <strong>Continuar</strong>.",
            },
        },
        microinverters: {
            condition_clear: { description: 'Esto enviar\u00e1 un comando para borrar el estado "%{condition_flag}" de este microinversor.', title: "\u00bfBorrar condici\u00f3n?" },
            manage_options: {
                active: "Activo (%{count})",
                active_count: { counting: { one: "Activo (%{count})", other: "Activo (%{count})", zero: "Activo (%{count})" } },
                delete_btn: "Eliminar",
                deleted: "Eliminado (%{count})",
                deleted_count: { counting: { one: "Eliminado (%{count})", other: "Eliminado (%{count})", zero: "Eliminado (%{count})" } },
                restore_btn: "Restaurar",
            },
            nav: { all: "Todo", manage: "Administrar", status: "Estado" },
            no_inverters: "No hay microinversores.",
            no_inverters_search: 'No hay microinversores que coincidan con "%{search_term}".',
            phase_labels: { "ph-a": "L1(A)", "ph-b": "L2(B)", "ph-c": "L3(C)", "ph-unk": "No se seleccion\u00f3 una fase.", "ph-updating": "Actualizando...", select_one: "Seleccionar 1" },
            phase_prompt_label: "Seleccione una fase para la bater\u00eda de CA %{serial_num}",
            scan_close: "Cerrar",
            scan_disabled: "En estos momentos, la b\u00fasqueda de dispositivos no est\u00e1 disponible a causa del conflicto con una b\u00fasqueda realizada en otro Envoy.",
            scan_inhibited:
                "Si desea a\u00f1adir m\u00e1s microinversores a este Envoy, debe usar Installer Toolkit para aprovisionarlos o ponerse en contacto con el servicio de atenci\u00f3n al cliente de Enphase para reactivar la b\u00fasqueda de dispositivos.",
            scan_inprogress: "B\u00fasqueda de dispositivo en curso",
            scan_settings: {
                advanced_options: "M\u00e1s opciones",
                device_total: "Objetivo del dispositivo",
                device_total_description: "Si especifica un objetivo del dispositivo, Envoy interrumpir\u00e1 la b\u00fasqueda cuando se alcance ese n\u00famero de microinversores detectados.",
                device_total_error_1: "El total de dispositivos debe ser un valor comprendido entre %{already_detected} (el n\u00famero de dispositivos que ya se han detectado) y %{device_total_max}.",
                device_total_error_2: "El total de dispositivos debe ser mayor que %{already_detected} (el n\u00famero de dispositivos que ya se han detectado).",
                hours: "horas",
                less_options: "Menos opciones",
                minutes: "minutos",
                optional: "(opcional)",
                priority_duration: "Duraci\u00f3n prioritaria",
                priority_duration_description: "Si especifica una duraci\u00f3n prioritaria, Envoy se dedicar\u00e1 en exclusiva a buscar dispositivos durante el periodo en cuesti\u00f3n.",
                priority_duration_error: "La duraci\u00f3n prioritaria no puede ser mayor que la duraci\u00f3n de la b\u00fasqueda.",
                scan_duration: "Duraci\u00f3n de la b\u00fasqueda",
                scan_duration_error: "La duraci\u00f3n de la b\u00fasqueda debe ser un valor comprendido entre 1 minuto y 8 horas.",
                scan_options: { min_120: "2 horas", min_15: "15 minutos", min_240: "4 horas", min_30: "30 minutos", min_480: "8 horas", min_60: "1 hora" },
                time_description: "hh:mm",
            },
            scan_start: "Iniciar b\u00fasqueda",
            scan_stop: "Detener b\u00fasqueda",
            scan_suspended: "En estos momentos, la b\u00fasqueda de dispositivos no est\u00e1 disponible a causa de una actualizaci\u00f3n de microinversores.",
            status_options: { comm: "COMM (%{count})", comm_nocount: "COMM", power: "Potencia (%{count})", power_nocount: "Potencia", profile: "Perfil (%{count})", profile_nocount: "Perfil" },
        },
        monitoring: {
            connected: "Conectado a Enlighten",
            high_bandwidth: "Est\u00e1ndar",
            last_report: "\u00daltimo reporte:",
            low_bandwidth: "Bajo ancho de banda",
            more_info: "M\u00e1s informaci\u00f3n",
            no_report: "Nunca reportado",
            not_connected: "No conectado a Enlighten",
            report_setting: "Configuraci\u00f3n de reportes",
            report_setting_cellular_desc: "Este Envoy cuenta con un m\u00f3dem celular de Enphase y genera reportes de datos de intervalos de 15\u00a0minutos a Enlighten cuatro veces al d\u00eda (bajo ancho de banda).",
            report_setting_diagnostic: "Modo de diagn\u00f3stico encendido: Quedan %{minutes} minutos",
            report_setting_enable_diagnostic:
                "Puede activar el modo de diagn\u00f3stico durante dos horas. Mientras el modo de diagn\u00f3stico est\u00e1 activado, el Envoy env\u00eda a Enlighten informes de datos de intervalos de 5 minutos, cada 5 minutos (durante las horas de luz del d\u00eda).",
            report_setting_high_desc:
                "Envoy tiene la configuraci\u00f3n de generaci\u00f3n de reportes est\u00e1ndar, que suele generar reportes de datos de intervalos de 5\u00a0minutos cada 5\u00a0minutos a Enlighten durante las horas de luz del d\u00eda. Puede cambiar a bajo ancho de banda, que genera reportes de datos de intervalos de 15\u00a0minutos a Enlighten cuatro veces al d\u00eda.",
            report_setting_low_desc:
                "Este Envoy tiene definida la generaci\u00f3n de reportes de bajo ancho de banda, que genera reportes de datos de intervalos de 15\u00a0minutos a Enlighten cuatro veces al d\u00eda. Puede cambiar la configuraci\u00f3n a generaci\u00f3n de reportes est\u00e1ndar, que suele generar reportes de datos de intervalos de 5\u00a0minutos cada 5\u00a0minutos a Enlighten durante las horas de luz del d\u00eda.",
            report_setting_modal: {
                diagnostic_desc: "Confirme la activaci\u00f3n del modo de diagn\u00f3stico durante dos horas.",
                high_desc: "Confirme el cambio a generaci\u00f3n de reportes est\u00e1ndar.",
                low_desc: "Confirme el cambio a generaci\u00f3n de reportes de bajo ancho de banda.",
                title: "Notificar cambio de configuraci\u00f3n",
            },
            report_setting_options: { diagnostic: "Activar modo de diagn\u00f3stico", high: "Cambiar a generaci\u00f3n de reportes est\u00e1ndar", low: "Cambiar a bajo ancho de banda" },
            title: "Supervisi\u00f3n",
        },
        more: {
            about: {
                cellular_ip: "Direcci\u00f3n IP celular",
                cellular_mac_address: "Direcci\u00f3n MAC celular",
                db_size: "Tama\u00f1o de base de datos",
                db_size_stats: "%{db_size} (%{percent} % usado)",
                ethernet_ip: "Direcci\u00f3n IP de Ethernet",
                ethernet_mac_address: "Direcci\u00f3n MAC de Ethernet",
                is_nonvoy: "Este Envoy est\u00e1 programado para configurar sistemas no supervisados.",
                part_number: "N\u00famero de pieza",
                serial_number: "N\u00famero de serie",
                sw_build_date: "Fecha de creaci\u00f3n del software",
                sw_version: "Versi\u00f3n de software",
                timezone: "Zona horaria actual",
                title: "Acerca de este Envoy",
                wifi_ip: "Direcci\u00f3n IP de Wi-Fi",
                wifi_mac_address: "Direcci\u00f3n MAC de Wi-Fi",
            },
            datetime: { date: "Fecha", time: "Hora", timezone: "Zona horaria", title: "Fecha y hora", update_timezone: "Actualizar zona horaria" },
            events: { event_date_line: "%{date} (ID de evento %{event_id})", no_events: "No hay incidencias.", title: "Incidencias" },
            support_connection: {
                close: "Cerrar conexi\u00f3n",
                description_close: "Se ha abierto la conexi\u00f3n segura con el servicio de asistencia de Enphase.",
                description_open: "Cree una conexi\u00f3n segura para que el personal del servicio de asistencia de Enphase pueda solucionar los problemas de este sistema de forma remota.",
                open: "Abrir conexi\u00f3n",
                title: "Conexi\u00f3n al servicio de asistencia de Enphase",
            },
            system: { title: "Sistema" },
        },
        network: {
            diagnostic_tools: {
                check_connectivity: "Comprobar conectividad de red",
                check_network_route: "Comprobar ruta de red",
                gateway_ip: "IP de puerta de enlace",
                ip_address: "Direcci\u00f3n IP",
                mac_address: "Direcci\u00f3n Mac",
                netmask: "M\u00e1scara de red",
                network_connectivity: "Comprobaci\u00f3n de conectividad de red",
                network_connectivity_desc: "Ejecute una recopilaci\u00f3n de comprobaciones de diagn\u00f3stico de red b\u00e1sicas en el Envoy.",
                network_route: "Comprobaci\u00f3n de ruta de red",
                network_route_desc: "Consulte la ruta a Internet del Envoy para ver todas las interfaces de red disponibles.",
                ping: "Ping",
                ping_desc: "Introduzca una direcci\u00f3n IP o URL para probar la conectividad del Envoy con el router u otro host de red.",
                ping_ip: "Direcci\u00f3n Ping",
                primary_dns: "Servidor de DNS principal",
                results_title: "Resultados",
                secondary_dns: "Servidor de DNS secundario",
                timestamp: "\u00daltima comprobaci\u00f3n",
                title: "Herramientas de diagn\u00f3stico",
            },
            network_configuration: { active_network: "Activa", title: "Configuraci\u00f3n de red", types: { cellular: "Celular", ethernet: "Ethernet", none: "Ninguno", wifi: "Wi-Fi" } },
            network_connectivity_check: {
                connectivity_enlighten: "Conectividad a Enlighten",
                connectivity_enphase: "Conectividad a Enphase",
                enlighten_dns_lookup: "B\u00fasqueda de DNS de Enlighten",
                enphase_dns_lookup: "B\u00fasqueda de DNS de Enphase",
                gateway_ping: "Ping de puerta de enlace",
                google_dns_lookup: "B\u00fasqueda de DNS de Google",
                google_ping: "Ping de Google",
                primary_dns_ping: "Ping de DNS principal",
                primary_interface: "Red probada",
                result: { fail: "Con errores", pass: "Buena" },
                secondary_dns_ping: "Ping de DNS secundaria",
                timestamp: "\u00daltima comprobaci\u00f3n",
                title: "Resultados",
            },
            network_route_check: {
                destination: "Destino",
                flags: "Marcas",
                gateway: "Pasarela de comunicaciones",
                genmask: "Genmask",
                metric: "M\u00e9trica",
                network: "Red",
                ref: "Referencia",
                results_title: "Resultados",
                timestamp: "\u00daltima comprobaci\u00f3n",
                use: "Usar",
            },
            title: "Red",
        },
        not_available: "No disponible",
        nsr: {
            line_status_heading: "Cables conectados:",
            line_status_help_text:
                "<ul><li>Al menos una de las l\u00edneas de Rel\u00e9 Q no est\u00e1 conectada.</li><li>Verifique que el Rele Q est\u00e9 instalado y cableado correctamente.</li><li>Presione el bot\u00f3n de prueba para intentarlo nuevamente.</li><li>Si fue algo intencional, puede ignorar esto.</li></ul>",
            line_status_help_title: "Ayuda para la conexi\u00f3n de l\u00edneas del Rel\u00e9 Q",
            lines: "Cable %{num}:",
            reason_strings: "motivo desconocido;Error de hardware;Presionar bot\u00f3n;Forzar comando de Envoy;Error de tensi\u00f3n en el cable 1 de CA;Error de tensi\u00f3n en el cable 2 de CA;Error de tensi\u00f3n en el cable 3 de CA;Error de frecuencia en el cable 1 de CA;Error en la red de CC;Tensi\u00f3n baja en el cable 1 de CA;Tensi\u00f3n alta en el cable 1 de CA;Frecuencia baja en el cable 1 de CA;Frecuencia alta en el cable 1 de CA;Tensi\u00f3n baja en el cable 2 de CA;Tensi\u00f3n alta en el cable 2 de CA;Tensi\u00f3n baja en el cable 3 de CA;Tensi\u00f3n alta en el cable 3 de CA;Red de CC baja;Red de CC alta;ROCOF;CA promedio del cable 1;CA promedio del cable 2;CA promedio del cable 3".split(
                ";"
            ),
            relay_heading: "Rel\u00e9:",
        },
        nsrs: {
            manage_options: {
                active: "Activo (%{count})",
                active_count: { counting: { one: "Activo (%{count})", other: "Activo (%{count})", zero: "Activo (%{count})" } },
                deleted: "Eliminado (%{count})",
                deleted_count: { counting: { one: "Eliminado (%{count})", other: "Eliminado (%{count})", zero: "Eliminado (%{count})" } },
            },
            nav: { all: "Todo", manage: "Administrar", status: "Estado" },
            no_inverters: "No se encontraron Rel\u00e9s Q",
            no_inverters_search: 'No se encontraron Rel\u00e9s Q que coincidan con "%{search_term}".',
            status_options: { comm_nocount: "COMM", power_nocount: "Funcionando", profile_nocount: "Config." },
            title: "[ES] Relays Q",
        },
        overview: {
            ac_batteries: {
                communicating: "Comunicando",
                default_profile_set: "Perfil de red instalado de f\u00e1brica",
                detected: "Detectado",
                factory_installed: "Instalado de f\u00e1brica",
                factory_installed_config: "Configuraciones instaladas de f\u00e1brica",
                not_set: "No configurado",
                producing_power: "Funcionando",
                profile_set: "Configuradas",
                total: "Bater\u00edas de CA",
            },
            ac_batteries_counts: {
                communicating: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Comunic\u00e1ndose </span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>comunic\u00e1ndose</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>comunic\u00e1ndose </span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>comunic\u00e1ndose </span>",
                    },
                },
                detected: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Detectadas</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>detectada</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>detectadas</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>detectadas</span>",
                    },
                },
                producing_power: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Operando</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>operando</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>operando</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>operando</span>",
                    },
                },
                profile_set: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Configuradas</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>configurada</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>configuradas</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>configuradas</span>",
                    },
                },
                total: {
                    counting: {
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>bater\u00eda de AC</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>bater\u00edas de AC</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>bater\u00edas de AC </span>",
                    },
                },
            },
            ac_battery_state: {
                charging: "Cargando",
                discharging: "Descargando",
                full: "Lleno",
                idle: "Inactivo",
                soc_full: "%{operating_state} (Estado de carga %{percent}%)",
                soc_percent: "(Estado de carga %{percent}%)",
                soc_state: "%{operating_state}",
            },
            alerts: "Alertas",
            consumption: "Medidor de consumo",
            consumption_meter_label: "Consumo",
            current_consumption: "Consumo de energ\u00eda actual",
            current_production: "Generaci\u00f3n de energ\u00eda actual",
            devices: { detected: "Detectado" },
            encharge_batteries: {
                communicating: "[ES] Communicating",
                default_profile_set: "[ES] Factory-Installed Grid Profile",
                detected: "[ES] Detected",
                factory_installed: "[ES] Factory-Installed",
                factory_installed_config: "[ES] Factory-Installed Configurations",
                not_set: "[ES] Not Set",
                producing_power: "[ES] Operating",
                profile_set: "[ES] Configured",
                total: "[ES] AC Batteries",
            },
            enpowers: { communicating: "[ES] Communicating", default_profile_set: "[ES] Factory-Installed Grid Profile", detected: "[ES] Detected", profile_set: "[ES] Profile Set", total: "[ES] Enpower Devices" },
            enpowers_summary: { connected: { false: "[ES] Not Connected to Enpower", true: "[ES] Connected to Enpower" }, grid_status: { false: "[ES] OFF", title: "[ES] Grid Status", true: "[ES] ON" }, title: "[ES] Enpower" },
            includes_storage_label: "(incluye actividad de almacenamiento)",
            inverter_production: "Producci\u00f3n de microinversor",
            inverters_update_status: { "in-progress": "Actualizaci\u00f3n de microinversor en curso. Esto normalmente toma de 15 a 30 minutos en completarse." },
            ip_address: "Direcci\u00f3n IP",
            latest_power: "\u00daltima energ\u00eda",
            lifetime: "Ciclo de vida",
            lifetime_energy: "Energ\u00eda de la vida \u00fatil",
            meter_production: "Medidor de producci\u00f3n",
            metering: "Medici\u00f3n",
            microinverter_counts: {
                communicating: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Comunic\u00e1ndose</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>comunic\u00e1ndose</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>comunic\u00e1ndose </span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>comunic\u00e1ndose </span>",
                    },
                },
                detected: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Detectado</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>detectado</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>detectados</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>detectados</span>",
                    },
                },
                producing_power: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'> Generando energ\u00eda</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>generando energ\u00eda</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'> generando energ\u00eda</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'> generando energ\u00eda</span>",
                    },
                },
                profile_set: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>perfil establecido </span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>perfil establecido</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>perfil establecido </span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>perfil establecido </span>",
                    },
                },
                total: {
                    counting: {
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>microinversor</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>microinversores</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>microinversores </span>",
                    },
                },
            },
            microinverters: {
                communicating: "Comunicando",
                default_profile_set: "Perfil de red instalado de f\u00e1brica",
                detected: "Detectado",
                producing_power: "Generando potencia",
                profile_set: "Perfil establecido",
                total: "Microinversores",
            },
            net_power: "Energ\u00eda neta",
            new_microinverter_counts: {
                communicating: {
                    counting_acb: { one: "Comunicando", other: "Comunicando", zero: "Comunicando" },
                    counting_encharge: { one: "[ES] Communicating", other: "[ES] Communicating", zero: "[ES] Communicating" },
                    counting_microinverters: { one: "Comunicando", other: "Comunicando", zero: "Comunicando" },
                    counting_nsr: { one: "Comunicando", other: "Comunicando", zero: "Comunicando" },
                },
                detected: {
                    counting_acb: { one: "Detectado", other: "Detectado", zero: "Detectado" },
                    counting_encharge: { one: "[ES] Detected", other: "[ES] Detected", zero: "[ES] Detected" },
                    counting_microinverters: { one: "Detectado", other: "Detectado", zero: "Detectado" },
                    counting_nsr: { one: "Detectado", other: "Detectado", zero: "Detectado" },
                },
                producing_power: {
                    counting_acb: { one: "Funcionando", other: "Funcionando", zero: "Funcionando" },
                    counting_encharge: { one: "[ES] Operating", other: "[ES] Operating", zero: "[ES] Operating" },
                    counting_microinverters: { one: "Generando potencia", other: "Generando potencia", zero: "Generando potencia" },
                    counting_nsr: { one: "Funcionando", other: "Funcionando", zero: "Funcionando" },
                },
                profile_set: {
                    counting_acb: { one: "Configuradas", other: "Configuradas", zero: "Configuradas" },
                    counting_encharge: { one: "[ES] Configured", other: "[ES] Configured", zero: "[ES] Configured" },
                    counting_microinverters: { one: "Perfil establecido", other: "Perfil establecido", zero: "Perfil establecido" },
                    counting_nsr: { one: "Configuradas", other: "Configuradas", zero: "Configuradas" },
                },
                total: {
                    counting_acb: { one: "Bater\u00eda de CA", other: "Bater\u00edas de CA", zero: "Bater\u00edas de CA" },
                    counting_encharge: { one: "[ES] Encharge Battery", other: "[ES] Encharge Batteries", zero: "[ES] Encharge Batteries" },
                    counting_microinverters: { one: "Microinversor", other: "Microinversores", zero: "Microinversores" },
                    counting_nsr: { one: "Rel\u00e9 Q", other: "Rel\u00e9s Q", zero: "Rel\u00e9s Q" },
                },
            },
            nsr: {
                detected_total_count: "%{detected_count} de %{total_count}",
                profile_label: "Perfil",
                profile_not_set: "Sin configurar",
                profile_set: "Configuradas",
                relay_state_closed: "Cerrado",
                relay_state_label: "Estado",
                relay_state_open: "Abierto",
                section_title: "Rel\u00e9 Q",
            },
            power_exporting: "Exportando a la red el\u00e9ctrica",
            power_importing: "Importando de la red el\u00e9ctrica",
            production: "Producci\u00f3n",
            production_meter_label: "Producci\u00f3n",
            profile: "Perfil",
            scan_modal: {
                description: "No se han detectado microinversores. \u00bfDesea iniciar una b\u00fasqueda de dispositivos?",
                description_battery: "No se ha detectado ninguna bater\u00eda. \u00bfDesea iniciar una b\u00fasqueda de dispositivos?",
                description_both: "No se ha detectado ning\u00fan microinversor o bater\u00eda. \u00bfDesea iniciar una b\u00fasqueda de dispositivos?",
                description_nsr: "No se ha detectado ninguna Q-Relays. \u00bfDesea iniciar una b\u00fasqueda de dispositivos?",
                scan_timeout_description:
                    "<p>Solo se detectaron %{detected_count} de %{target_count} microinversores.</p><p> \u00bfQuiere reiniciar la b\u00fasqueda de dispositivos para descubrir los microinversores restantes o <a href='#' class='open-target-count'>cambiar el n\u00famero esperado de microinversores</a>?</p>",
                scan_timeout_description_battery: "<p>Solo se detectaron %{detected_count} de %{target_count} bater\u00edas.",
                scan_timeout_description_battery_second: {
                    one: "\u00bfQuiere reiniciar la b\u00fasqueda de dispositivos para descubrir la bater\u00eda restante o <a href='#' class='open-target-count'>cambiar el n\u00famero esperado de bater\u00edas</a>?</p>",
                    other: "\u00bfQuiere reiniciar la b\u00fasqueda de dispositivos para descubrir las bater\u00edas restantes o <a href='#' class='open-target-count'>cambiar el n\u00famero esperado de bater\u00edas</a>?</p>",
                },
                scan_timeout_description_both:
                    "<p>Solo se detectaron %{detected_count_micro} de %{target_count_micro} microinversores y %{detected_count_battery} de %{target_count_battery} bater\u00edas.</p><p> \u00bfQuiere reiniciar la b\u00fasqueda de dispositivos para descubrir los dispositivos restantes o <a href='#' class='open-target-count'>cambiar el n\u00famero esperado de dispositivos</a>?</p>",
                scan_timeout_description_micro: "<p>Solo se detectaron %{detected_count} de %{target_count} microinversores.",
                scan_timeout_description_micro_second: {
                    one: "\u00bfQuiere reiniciar la b\u00fasqueda de dispositivos para descubrir el microinversor restante o <a href='#' class='open-target-count'>cambiar el n\u00famero esperado de microinversores</a>?</p>",
                    other: "\u00bfQuiere reiniciar la b\u00fasqueda de dispositivos para descubrir los microinversores restantes o <a href='#' class='open-target-count'>cambiar el n\u00famero esperado de microinversores</a>?</p>",
                },
                scan_timeout_title: "\u00bfReiniciar la b\u00fasqueda de dispositivos?",
                title: "\u00bfIniciar b\u00fasqueda de dispositivos?",
            },
            scan_state: { active: "B\u00fasqueda activa", inactive: "B\u00fasqueda inactiva", scan_inhibited: "B\u00fasqueda inhibida" },
            set_expected: { error: "El valor debe ser un n\u00famero entre 1 y 600.", label: "Introduzca el n\u00famero de microinversores que espera que informen a este Envoy.", prompt: "N.\u00ba de microinversores" },
            set_expected_acb: { error: "El valor debe ser un n\u00famero entre 0 y 39.", label: "Introduzca el n\u00famero de Bater\u00edas de CA que espera que informen a este Envoy.", prompt: "N.\u00ba de bater\u00edas de CA" },
            set_expected_nsr: { error: "El valor debe ser un n\u00famero entre 0 y 3.", label: "Introduzca el n\u00famero de Q-Relays que espera que informen a este Envoy.", prompt: "N.\u00ba de Q-Relays" },
            software_version: "Versi\u00f3n de software",
            stat_title: "Potencia y Energ\u00eda",
            storage: "Bater\u00edas CA",
            tariff_rate_structure: "Estructura de tarifa/tasa",
        },
        pending: "(pendiente...)",
        power: {
            charging: "Cargando",
            description:
                "Los microinversores generar\u00e1n energ\u00eda siempre que exista suficiente luz solar y que la red de suministro se encuentre en los intervalos de frecuencia y tensi\u00f3n admisibles (seg\u00fan disponga la normativa local).",
            discharging: "Descargando",
            idle: "Inactivo",
            last_report: "\u00daltimo reporte:",
            not_operating: "No funcionando",
            not_producing: "Sin generar",
            operating: "Funcionando",
            producing: "Generando potencia",
            title: "Microinversores que generan energ\u00eda",
        },
        profiles: {
            ac_batteries: {
                configuration_label: "Configuraci\u00f3n",
                false: "No",
                no_profile_description: "Debe brindar la siguiente informaci\u00f3n para configurar las bater\u00edas antes de que comiencen a funcionar.",
                no_profile_warning: "El perfil de la red que seleccione aqu\u00ed tambi\u00e9n se aplicar\u00e1 a los microinversores instalados con este sistema.",
                profile_complete: "Configuraci\u00f3n completa",
                profile_incomplete: "Configuraci\u00f3n incompleta",
                profile_propagating: "Configurando bater\u00edas",
                true: "S\u00ed",
            },
            apply: "Aplicar perfil de red",
            config_batteries: "Configurar bater\u00edas",
            country_label: "Especificaci\u00f3n de regulaci\u00f3n estatal",
            encharge_batteries: {
                configuration_label: "[ES] Configuration",
                no_profile_description: "[ES] You must provide the following information to configure the batteries before they will begin to operate.",
                no_profile_warning: "[ES] The grid profile you select here will also be applied to the Enpower, Microinverters, and AC Batteries installed with this system.",
                profile_complete: "[ES] Configuration Complete",
                profile_incomplete: "[ES] Configuration Incomplete",
                profile_propagating: "[ES] Configuring Batteries",
            },
            enpowers: {
                no_profile_description: "[ES] You must provide the following information to configure the enpower before it will begin to operate.",
                no_profile_warning: "[ES] The grid profile you select here will also be applied to the Microinverters, AC Batteries and Encharges installed with this system.",
                profile_complete: "[ES] Configuration Complete",
                profile_incomplete: "[ES] Configuration Incomplete",
                profile_propagating: "[ES] Configuring Enpower",
            },
            eu_no_profile_description: "Debe seleccionar un perfil de red espec\u00edfico para la ubicaci\u00f3n antes de que los microinversores comiencen a generar potencia.",
            eu_no_profile_label: "No hay perfil",
            eu_no_profile_vogel_description: "Debe seleccionar un perfil de red espec\u00edfico para la ubicaci\u00f3n.",
            microinverters: {
                configuration_label: "Configuraci\u00f3n",
                no_profile_warning: "El perfil de la red que seleccione aqu\u00ed tambi\u00e9n se aplicar\u00e1 a las bater\u00edas instaladas con este sistema.",
                profile_complete: "Propagaci\u00f3n completada",
                profile_incomplete: "Propagaci\u00f3n incompleta",
                profile_propagating: "Propagaci\u00f3n del perfil",
            },
            na_no_profile_description: "Los microinversores est\u00e1n utilizando la configuraci\u00f3n de perfil de red instalada por el fabricante. Puede seleccionar un perfil de red espec\u00edfico para la ubicaci\u00f3n abajo.",
            na_no_profile_label: "Configuraci\u00f3n instalada por el fabricante",
            no_profile_warning: "El perfil de la red que seleccione aqu\u00ed tambi\u00e9n se aplicar\u00e1 a las bater\u00edas instaladas con este sistema.",
            no_profiles: "No hay perfiles disponibles. Debe conectar este Envoy a Internet y seleccionar v\u00eda Enlighten, o bien usar el Installer Toolkit para descargar un paquete de perfil y cargarlo en\u00a0dicho Envoy.",
            no_profiles_info:
                "Si la instalaci\u00f3n se encuentra en un \u00e1rea que necesita que se configure un perfil de red espec\u00edfico de la ubicaci\u00f3n, debe conectar este Envoy a Internet y seleccionar v\u00eda Enlighten, o bien usar el Installer Toolkit para descargar un paquete de perfil y cargarlo en\u00a0dicho Envoy.",
            nsrs: {
                configuration_label: "Configuraci\u00f3n",
                no_profile_warning: "El perfil de la red que seleccione aqu\u00ed tambi\u00e9n se aplicar\u00e1 a las bater\u00edas instaladas con este sistema.",
                profile_complete: "Propagaci\u00f3n completada",
                profile_incomplete: "Propagaci\u00f3n incompleta",
                profile_propagating: "Propagaci\u00f3n del perfil",
            },
            profile_complete: "Propagaci\u00f3n completada",
            profile_incomplete: "Propagaci\u00f3n incompleta",
            profile_label: "Perfil de red",
            profile_propagating: "Propagaci\u00f3n del perfil",
            title: "Perfil de red",
            tpm_state: { 0: "Pendiente", 1: "Propagaci\u00f3n", 2: "Perfil establecido", 3: "No se puede establecer", 4: "Con errores", 5: "Actualizando", 6: "ALT-V/F" },
        },
        public_nav: {
            change_password: "Cambiar contrase\u00f1a",
            copyright_html: "&copy;2008-%{current_year} Enphase Energy Inc. Todos los derechos reservados.",
            enphase: "Enphase Energy",
            installer_login: "Inicio de sesi\u00f3n del instalador",
            language: "Idioma",
            privacy: "Privacidad",
            settings: "Configuraci\u00f3n",
            terms: "T\u00e9rminos",
        },
        select2: {
            format_matches: { counting: { one: "Hay un resultado disponible, pulse Intro para seleccionarlo.", other: "Hay %{count} resultados disponibles, utilice las flechas arriba y abajo para navegar por ellos." } },
            input_too_long: { counting: { one: "Elimine %{count} car\u00e1cter", other: "Elimine %{count} caracteres" } },
            input_too_short: "Introduzca %{count} o m\u00e1s caracteres",
            loading_more: "Cargando m\u00e1s resultados...",
            no_matches: "No se han encontrado coincidencias para %{term}",
            no_results: "No se han encontrado coincidencias",
            searching: "Buscando...",
            selection_too_big: { counting: { one: "Solo puede seleccionar %{count} elemento.", other: "Solo puede seleccionar %{count} elementos." } },
        },
        serial_number: "N\u00famero de serie",
        system: {
            power_control: {
                disabled_desc: "Generaci\u00f3n de potencia desactivada",
                enabled_desc: "Generaci\u00f3n de potencia activada",
                modal: {
                    desc_set_off: "Esto <strong>desactivar\u00e1</strong> la generaci\u00f3n de energ\u00eda del sistema.",
                    desc_set_on: "Esto <strong>activar\u00e1</strong> la generaci\u00f3n de energ\u00eda del sistema.",
                    title: "Control de potencia del sistema",
                    verify: "\u00bfConfirma que esto es lo que desea?",
                },
            },
        },
        tariff: {
            add_peak: "Agregar m\u00e1ximo consumo %{num}",
            add_tier: "Agregar nivel %{num}",
            base_rate_label: "Tasa de base",
            baseline: "Referencia",
            charge_at_night: "Cargar bater\u00edas desde la red el\u00e9ctrica por la noche",
            chg_at_night_desc: "Habilite esta opci\u00f3n para configurar la carga de las bater\u00edas desde la red el\u00e9ctrica durante la noche.",
            config_details: "Datos de configuraci\u00f3n",
            day_names: ["D\u00eda de semana", "Fin de semana"],
            greater_than: "Mayor que",
            hour_connector: "a",
            month_connector: "durante",
            not_set: "No configurado",
            off_peak_label: "Bajo consumo",
            peak_hours_label: "Horario de m\u00e1ximo consumo %{num}",
            peak_label: "M\u00e1ximo consumo %{num}",
            peak_rate_label: "Tasa de m\u00e1ximo consumo %{num}",
            peak_start_time: "Hora pico de inicio:",
            per_day: "por d\u00eda",
            per_month: "por mes",
            percent_of_baseline: "% de la referencia",
            remove: "Quitar",
            seasonal_rate_desc: "Habilite esta opci\u00f3n si la tasa difiere entre una temporada y otra.",
            seasonal_select_label: "La tasa var\u00eda seg\u00fan la temporada",
            select_type: "Seleccionar tipo",
            single_rate: "Tasa simple",
            summer_rate_label: "Verano",
            tariff_rate_title: "Estructura de tarifa/tasa",
            tariff_type_warning:
                "Para establecer una estructura de Tiempo de uso con tarifa/tasa, debe proporcionar al menos una tasa de m\u00e1ximo consumo. Si no hay tasa de m\u00e1ximo consumo, seleccione Tasa simple en lugar de Tiempo de uso.",
            tier: "Nivel %{num}",
            tiered: "Tasa por niveles",
            time_of_use: "Tiempo de uso",
            unit_label: "kWh",
            up_to: "Hasta",
            weekday_add_peak: "Agregar m\u00e1ximo consumo de los d\u00edas de semana %{num}",
            weekday_base_rate_label: "Tasa de base de los d\u00edas de semana",
            weekday_off_peak_rate_label: "Tasa de horarios de bajo consumo de los d\u00edas de semana",
            weekday_peak_hours_label: "Horario de m\u00e1ximo consumo de los d\u00edas de semana %{num}",
            weekday_peak_rate_label: "Tasa de m\u00e1ximo consumo de los d\u00edas de semana %{num}",
            weekdays_label: "D\u00eda de semana",
            weekdays_rate_label: "D\u00eda de semana",
            weekend_add_peak: "Agregar m\u00e1ximo consumo del fin de semana %{num}",
            weekend_base_rate_label: "Tasa de base del fin de semana",
            weekend_label: "Fin de semana",
            weekend_off_peak_rate_label: "Tasa de horarios de bajo consumo del fin de semana",
            weekend_peak_hours_label: "Horario de m\u00e1ximo consumo del fin de semana %{num}",
            weekend_peak_rate_label: "Tasa de m\u00e1ximo consumo del fin de semana %{num}",
            weekend_rate_desc: "Habilite esta opci\u00f3n si la tasa difiere entre el fin de semana y el resto de la semana.",
            weekend_select_label: "La tasa var\u00eda seg\u00fan sea d\u00eda de semana o fin de semana",
            winter_months_desc: "Para establecer la opci\u00f3n en Invierno, seleccione los meses de verano arriba.",
            winter_rate_label: "Invierno",
            zero_not_allowed: "Cero no es un valor v\u00e1lido.",
        },
        wifi: {
            ap_mode_config: {
                confirm_switch_modal: {
                    description: "Esto puede interrumpir las comunicaciones con el Envoy y requerir que vuelva a realizar la conexi\u00f3n.",
                    title_false: "\u00bfDesactivar el modo AP?",
                    title_true: "\u00bfActivar el modo AP?",
                },
                description_disabled: "Active el modo AP para que este Envoy funcione como punto de acceso (AP) inal\u00e1mbrico. Esto permitir\u00e1 que los dispositivos inal\u00e1mbricos cercanos se conecten al Envoy.",
                description_enabled: "Este Envoy funciona actualmente como punto de acceso (AP) inal\u00e1mbrico.",
                disable: "Desactivar el modo AP",
                enable: "Activar el modo AP",
                time_remaining: { one: "Tiempo restante: %{count} hora %{minutes} minutos", other: "Tiempo restante: %{count} horas %{minutes} minutos", zero: "Tiempo restante: %{count} horas %{minutes} minutos" },
                title_disabled: "Modo AP desactivado",
                title_enabled: "Modo AP activado",
            },
            available_networks: "Redes disponibles",
            connect: {
                confirm_connect: "Confirmar red",
                connect_to_site: "\u00bfDesea conectarse a %{site_name}?",
                connect_warning: "Nota: Esto puede interrumpir las comunicaciones con el Envoy y requerir que vuelva a realizar la conexi\u00f3n.",
                connection_failure_explanation: "No se puede establecer conexi\u00f3n con la red %{site_name}.",
                wait_join: "Espere mientras Envoy se conecta a %{site_name}...",
            },
            connect_incomplete: {
                description: "La confirmaci\u00f3n de la conexi\u00f3n a %{site_name} est\u00e1 tardando m\u00e1s de lo previsto. Si la conexi\u00f3n a la red no se ha realizado correctamente, int\u00e9ntelo de nuevo.",
                title: "Lo sentimos...",
            },
            connect_success: {
                description:
                    "<p>El Envoy se ha conectado correctamente a %{site_name}.</p><p><a href='#' class='open-overview'>Volver a Sistema.</a></p><p>Nota: La actualizaci\u00f3n del estado de conexi\u00f3n de Enlighten puede tardar hasta un minuto.</p>",
                title: "Conectado correctamente",
            },
            connection_lost: "Este dispositivo ha perdido su conexi\u00f3n con Envoy.",
            connection_status: { attempting_to_connect: "Intentando conectarse...", connecting: "Conectando...", connection_lost: "Conexi\u00f3n perdida", failed: "Error de conexi\u00f3n", not_connected: "No conectado" },
            country_config: {
                description: "Seleccione el pa\u00eds (ISO 3166-1 alpha-2 c\u00f3digo) para optimizar la intensidad de la se\u00f1al Wi-Fi de conformidad con la agencia reguladora nacional pertinente.",
                optional: "(opcional)",
                select_prompt: "Seleccionar pa\u00eds",
                title: "Pa\u00eds",
                update: "Actualizar pa\u00eds",
            },
            current_connection: "Conectado a <span class='network_name'>%{network_name}</span>",
            enter_password: "Introduzca la contrase\u00f1a de %{site_name}.",
            forget: {
                forget_network_header: '\u00bfDesea olvidar la red Wi-Fi "%{network_name}"?',
                forget_warning: "Nota: Esto puede interrumpir las comunicaciones con el Envoy y requerir que vuelva a realizar la conexi\u00f3n.",
                ok_to_forget: "Este Envoy dejar\u00e1 de utilizar esta red para conectarse a Enlighten.",
                wait_forget: "Espere mientras Envoy olvida la red...",
            },
            forget_failed: { description: "Fall\u00f3 el intento de omitir la red de wifi. Si persiste, p\u00f3ngase en contacto con el servicio de atenci\u00f3n al cliente.", title: "Lo sentimos..." },
            forget_incomplete: {
                description:
                    "Est\u00e1 tomando m\u00e1s de lo esperado confirmar la omisi\u00f3n de la red wifi. Por ello, es poco probable que su Envoy pueda seguir comunic\u00e1ndose con esta aplicaci\u00f3n. Compruebe la configuraci\u00f3n de la red en su dispositivo y, a continuaci\u00f3n, vuelva a conectarse a Envoy.",
                title: "Lo sentimos...",
            },
            gateway_ip: "IP de puerta de enlace: ",
            ip_address: "Direcci\u00f3n IP: ",
            join_another_network: { button: "Seleccionar otra red", title: "Seleccionar otra red" },
            join_network: { button: "Ver redes", title: "Seleccionar red" },
            network_changed_explanation:
                "La conexi\u00f3n de red de su dispositivo ha cambiado. Por ello, es poco probable que su Envoy pueda seguir comunic\u00e1ndose con esta aplicaci\u00f3n. Compruebe la configuraci\u00f3n de la red en su dispositivo y, a continuaci\u00f3n, vuelva a conectarse a Envoy.",
            network_changed_title: "Se ha cambiado la conexi\u00f3n de red",
            no_networks_found: "No se ha encontrado ninguna red",
            not_configured_prompt: "Seleccione una red inal\u00e1mbrica para que este Envoy la utilice con el fin de conectarse a Enlighten.",
            other_network: {
                confirm_switch_modal: { description: "Esto puede interrumpir las comunicaciones con el Envoy y requerir que vuelva a realizar la conexi\u00f3n.", title: "\u00bfConectarse con otra red?" },
                connect: "Conectar",
                description: "Con\u00e9ctese a un punto de acceso que no est\u00e9 configurado para transmitir su ESSID.",
                name: "Nombre (ESSID)",
                password: "Contrase\u00f1a",
                security: "Seguridad",
                security_mode: { None: "Ninguno", WEP: "WEP", "WPA-PSK": "WPA personal", "WPA2-PSK": "WPA2 personal" },
                title: "Conectarse a otra red",
                wpa_algorithm: "Algoritmo WPA",
                wpa_algorithm_type: { CCMP: "CCMP", None: "Ninguno", TKIP: "TKIP", "TKIP+CCMP": "TKIP + CCMP" },
            },
            page_title: "Configuraci\u00f3n de Wi-Fi",
            password_required: "Contrase\u00f1a requerida",
            please_wait: "Espere",
            title: "Red Wi-Fi",
            unsupported_site: "Red no compatible",
            unsupported_site_explanation: "Esta red utiliza un m\u00e9todo de seguridad que no es compatible con Envoy.",
            wifi: "Wi-Fi",
            wifi_hardware_missing: "Hardware de Wi-Fi no encontrado",
            wifi_waiting_note: "Este proceso puede tardar hasta 3 minutos y puede que requiera volver a conectarse al Envoy cuando se complete.",
        },
        wireless_connection: {
            connected: "[ES] Connected",
            last_report: "[ES] Last Report:",
            not_connected: "[ES] Not Connected",
            signal_strength: "[ES] Signal Strength:",
            subghz: "[ES] Sub GHz",
            title: "[ES] Wireless Connection Links",
            zigbee_2_4: "[ES] 2.4 GHz",
        },
    },
    lwui: {
        admin: {
            cross_domain_traffic: { status_msgs: { cross_domain_traffic: "Se ha informado del tr\u00e1fico entre dominios", no_cross_domain_traffic: "No se ha informado del tr\u00e1fico entre dominios", updated: "Actualizado" } },
            network_connectivity: {
                error_msgs: {
                    bad_device_ip: "Direcci\u00f3n IP o m\u00e1scara de red err\u00f3nea",
                    bad_gateway_address: "Direcci\u00f3n IP de puerta de enlace err\u00f3nea.",
                    gateway_subnet: "La direcci\u00f3n IP de la puerta de enlace no se encuentra dentro de la subred %{subnet}",
                    invalid_primary_dns: "La direcci\u00f3n DNS principal no es una direcci\u00f3n IP v\u00e1lida.",
                    invalid_secondary_dns: "La direcci\u00f3n DNS secundaria no es una direcci\u00f3n IP v\u00e1lida.",
                },
            },
            security_admin: {
                status_msg: {
                    new_confirm_password_mismatch: "La contrase\u00f1a nueva y la confirmaci\u00f3n no coinciden",
                    old_password_mismatch: "La contrase\u00f1a anterior no es correcta",
                    password_file_missing: "Faltan archivos de contrase\u00f1a de administrador",
                    password_update_failure: "No se ha podido actualizar la contrase\u00f1a",
                    password_update_failure_error: "Error: No se ha podido cambiar la contrase\u00f1a",
                    password_update_successful: "Contrase\u00f1a actualizada correctamente",
                },
            },
            wireless_connectivity: {
                advanced_settings: {
                    button_apply: "Aplicar",
                    regulatory_domain: "C\u00f3digo de pa\u00eds (ISO 3166-1 alfa-2)",
                    regulatory_legend: "Seleccione su pa\u00eds en esta lista.  Esta acci\u00f3n define las frecuencias de radio permitidas y la intensidad de la transmisi\u00f3n de acuerdo con la agencia reguladora de su pa\u00eds.",
                },
                ap_mode: { active: "activo", inactive: "inactivo", name: "Nombre de AP:", start: "Iniciar modo AP", status: "Estado del modo AP:", stop: "Detener modo AP", timeout: "minutos hasta agotar el tiempo de espera de AP:" },
                busy_joining: "Intentando establecer conexi\u00f3n con la red",
                busy_scanning: "Buscando redes Wi-Fi",
                busy_testing: "Probando la conexi\u00f3n",
                connection_test: { failed: "Error en la prueba de conexi\u00f3n.  Compruebe su configuraci\u00f3n.", successful: "Prueba de conexi\u00f3n realizada correctamente.  Puede unirse a la red." },
                current_settings: {
                    dhcp_waiting: "Solicitando direcci\u00f3n DHCP de la red Wi-Fi",
                    forget_network: "Olvidar esta red",
                    label_gateway_ip: "IP de puerta de enlace",
                    link_status: "Estado",
                    no_config: "No hay ninguna conexi\u00f3n Wi-Fi configurada",
                    no_device: "No se ha detectado ning\u00fan dispositivo Wi-Fi compatible",
                    status_connected: "Conectado",
                    status_connecting: "Estableciendo la conexi\u00f3n",
                    status_stopped: "Wi-Fi detenida",
                    unavailable: "no disponible",
                    verified_config: "Red Wi-Fi verificada",
                },
                device_information: {
                    device: "Dispositivo",
                    driver_name: "Nombre del controlador",
                    hw_version: "Versi\u00f3n de hardware",
                    mac_address: "Direcci\u00f3n MAC",
                    manufacturer: "Fabricante",
                    model: "Modelo",
                    usb_slot_num: "Ranura USB n.\u00ba",
                    usb_spec_version: "Versi\u00f3n de especificaci\u00f3n de USB",
                    vendor: "Distribuidor",
                },
                forget_msg: "Esta acci\u00f3n eliminar\u00e1 la configuraci\u00f3n inal\u00e1mbrica actual y anular\u00e1 la conexi\u00f3n.  Si est\u00e1 conectado de forma inal\u00e1mbrica, se perder\u00e1 su conexi\u00f3n con Envoy.",
                legend_advanced_settings: "Ajustes avanzados",
                legend_ap_mode: "Modo AP de Envoy",
                legend_current_settings: "Ajustes vigentes de Wi-Fi",
                legend_device_information: "Informaci\u00f3n del dispositivo",
                legend_manual_configuration: "Configuraci\u00f3n manual",
                legend_site_survey: "Redes Wi-Fi disponibles",
                manual_configuration: {
                    algorithm: "Algoritmo WPA",
                    button_clear: "Borrar formulario",
                    button_connect: "Unirse a la red",
                    button_test: "Probar conexi\u00f3n",
                    channel: "Canal inal\u00e1mbrico",
                    essid_length: "El ESSID debe tener entre 1 y 32 caracteres",
                    info_msg: "Los siguientes ajustes solo son necesarios para la conexi\u00f3n con un punto de acceso que no est\u00e1 configurado para transmitir su ESSID.",
                    mhz: "MHz",
                    network_name: "Nombre de red inal\u00e1mbrica (ESSID)",
                    password: "Contrase\u00f1a/PSK",
                    password_unneeded: "Una contrase\u00f1a no es necesaria para un sistema abierto",
                    password_wep: "Las claves WEP deben contar con 10, 26 o 58 d\u00edgitos hexadecimales",
                    password_wep_chars: "Las claves WEP deben estar compuestas de solo n\u00fameros y letras de la A a la F",
                    password_wpa: "Las contrase\u00f1as WPA/WPA2-PSK deben contar con al menos 8 caracteres, hasta un m\u00e1ximo de 63",
                    security_mode: "Modo de seguridad inal\u00e1mbrica",
                },
                site_survey: { button_rescan: "Volver a buscar", info_msg: "Seleccionar una red de la lista.", none_found: "No se ha encontrado ninguna red" },
                test_msg: "Ahora se probar\u00e1 la conexi\u00f3n Wi-Fi para confirmar que la configuraci\u00f3n es v\u00e1lida.  La conexi\u00f3n actual con Envoy se perder\u00e1 temporalmente durante la prueba de conexi\u00f3n.",
            },
        },
        home: {
            event_tbl_col_hdr: { date: "Fecha", details: "Detalles", device: "Dispositivo", event: "Incidencia", eventId: "ID de incidencia" },
            warnings: {
                acb_critical_temp: "Se detecta una temperatura interna elevada en una o m\u00e1s bater\u00edas de CA. Revise el Manual de instalaci\u00f3n y operaci\u00f3n para consultar las instrucciones.",
                acb_needs_meters: "Se necesita un Envoy-S con medidor para completar la puesta en servicio del sistema. Se detectaron bater\u00edas de CA que requieren medidor y este Envoy-S no tiene medidor.",
                acdisco_active: "Seccionador de CA activado. Envoy no puede comunicarse con los microinversores.",
                acdisco_fail: "Fall\u00f3 el seccionador de CA. Compruebe el rel\u00e9 del seccionador de CA.",
                both_meter_enabled: "Tanto el medidor de producci\u00f3n como el de consumo deben estar activados para que se pueda completar la puesta en servicio del sistema.",
                check_date_warn_msg:
                    "La hora del sistema no es v\u00e1lida.  Hasta que se corrija, Envoy no podr\u00e1 comunicarse con microinversores.  Si el Envoy no est\u00e1 configurado para usar NTP o no puede comunicarse con los servidores NTP configurados, eso deber\u00e1 corregirse manualmente mediante los <a href='/admin/lib/date_time_display'>Controles de administraci\u00f3n de fecha y hora.</a>",
                cross_domain_traffic: "Se han detectado comunicaciones de otros dispositivos Envoy.",
                date_invalid: "La hora del sistema no es v\u00e1lida. Conecte el Envoy a Internet para que se pueda establecer la hora correctamente.",
                db_warn_msg: "El Envoy no ha podido enviar datos a Enlighten y el almacenamiento local est\u00e1 casi lleno. Conecte el Envoy a Internet para evitar la p\u00e9rdida de datos.",
                eim_consumption_check_wiring: "El medidor de consumo de energ\u00eda no se ha conectado correctamente. Compruebe el cableado.",
                eim_production_check_wiring: "El medidor de generaci\u00f3n de energ\u00eda no se ha conectado correctamente. Compruebe el cableado.",
                envoy_needs_meters: "Se necesita un Envoy-S con medidor para completar la puesta en servicio del sistema. Se seleccion\u00f3 un perfil de red el\u00e9ctrica que requiere medidor y este Envoy-S no tiene medidor.",
                legend: "Advertencia",
                no_enlighten_report: "Enlighten no ha recibido nunca informaci\u00f3n sobre este sistema. Conecte el Envoy a Internet para establecer una conexi\u00f3n con Enlighten.",
                no_phase_assignment: "Las bater\u00edas de CA deben asignarse a las fases para completar la puesta en servicio del sistema.",
                pcu_limit_warn_msg: "El n\u00famero de microinversores que se ha detectado supera la configuraci\u00f3n de supervisi\u00f3n de Envoy. P\u00f3ngase en contacto con el servicio de atenci\u00f3n al cliente de Enphase Energy.",
                pcu_limit_warn_msg2:
                    "El n\u00famero de microinversores que se ha detectado supera la configuraci\u00f3n de supervisi\u00f3n predeterminada de Envoy.  Envoy necesita una conexi\u00f3n a Internet para definir la configuraci\u00f3n de supervisi\u00f3n.",
                pel_profile_requires_meters: "Los medidores de producci\u00f3n y consumo deben configurarse para admitir la limitaci\u00f3n de exportaci\u00f3n de energ\u00eda.",
                phase_assoc_failed: "No se pudo detectar la fase. Revise el Manual de instalaci\u00f3n y operaci\u00f3n para consultar las instrucciones.",
                pim_profile_requires_meters: "La medici\u00f3n de la producci\u00f3n multifase y el consumo deben activarse para soportar el manejo de desequilibrio de la fase y la p\u00e9rdida de la detecci\u00f3n de fase.",
            },
        },
    },
    number: {
        currency: { format: { delimiter: ",", format: "%u %n", precision: 2, separator: ".", significant: !1, strip_insignificant_zeros: !1, unit: "$" } },
        format: { delimiter: ",", precision: 3, separator: ".", significant: !1, strip_insignificant_zeros: !1 },
        human: {
            decimal_units: { format: "%n %u", units: { billion: "Billion", million: "Million", quadrillion: "Quadrillion", thousand: "Thousand", trillion: "Trillion", unit: "" } },
            format: { delimiter: "", precision: 3, significant: !0, strip_insignificant_zeros: !0 },
            storage_units: { format: "%n %u", units: { byte: { one: "Byte", other: "Bytes" }, gb: "GB", kb: "KB", mb: "MB", tb: "TB" } },
        },
        percentage: { format: { delimiter: "" } },
        precision: { format: { delimiter: "" } },
    },
    scripts: { data: { verify_internet_connection_message: "Enlighten no ha recibido nunca informaci\u00f3n sobre este sistema. Compruebe la conexi\u00f3n a Internet." } },
    time: {
        am: "A.M.",
        formats: {
            default: "%d/%m/%Y %I :%M %p",
            default_date_time_no_pad: "%d/%m/%Y %-I:%M %p",
            hour_meridian: "%-I %p",
            long: "%B %d, %Y %H:%M",
            noday_nozone_datetime_secs_ui: "%d %b, %Y %I :%M: %S %p",
            noday_nozone_datetime_ui: "%d %b, %Y %-I:%M %p",
            nozone_datetime: "%a %d %b %Y %I:%M %p",
            short: "%d %b %H:%M",
            short_date: "%d/%m/%Y",
            time_only: "%H:%M",
        },
        pm: "P.M.",
    },
    units: {
        amps: "A",
        bool: "Booleano",
        degrees: "grados",
        hertz: "Hz",
        hertz_per_sec: "Hz/s",
        lagging: "Retraso",
        milliseconds: "ms",
        millivolts: "mV",
        none: "",
        percent: "%",
        percent_per_hertz: "%/Hz",
        percent_per_min: "%/min",
        seconds: "s",
        volts: "V",
    },
};
I18n.translations.nl = {
    date: {
        abbr_day_names: "Zo Ma Di Wo Do Vr Za".split(" "),
        abbr_month_names: [null, "Jan", "Feb", "Mrt", "Apr", "Mei", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec"],
        day_names: "Zondag Maandag Dinsdag Woensdag Donderdag Vrijdag Zaterdag".split(" "),
        formats: { default: "%Y-%m-%d", long: "%B %e, %Y", only_day: "%e", short: "%e %b" },
        month_names: [null, "Januari", "Februari", "Maart", "April", "Mei", "Juni", "Juli", "Augustus", "September", "Oktober", "November", "December"],
        order: ["jaar", "maand", "dag"],
    },
    envoy: {
        cond_flags: {
            acb_ctrl: {
                bmudatabounds: "Fout BMU-gegevensgrenzen",
                bmuhardwareerror: "Hardwarefout BMU",
                bmuimageerror: "Beeldfout BMU",
                bmumaxcurrentwarning: "Waarschuwing max. stroom BMU",
                bmusenseerror: "Sensorfout BMU",
                cellmaxtemperror: "Fout max. temperatuur cel",
                cellmaxtempwarning: "Waarschuwing max. temperatuur cel",
                cellmaxvoltageerror: "Fout max. spanning cel",
                cellmaxvoltagewarning: "Waarschuwing max. spanning cel",
                cellmintemperror: "Fout min. temperatuur cel",
                cellmintempwarning: "Waarschuwing min. temperatuur cel",
                cellminvoltageerror: "Fout min. spanning cel",
                cellminvoltagewarning: "Waarschuwing min. spanning cel",
                cibcanerror: "CAN-fout CIB",
                cibimageerror: "Beeldfout CIB",
                cibspierror: "SPI-fout CIB",
            },
            nsrb_ctrl: {
                acfreqhigh: "Wisselstroomfrequentie hoog",
                acfreqlow: "Wisselstroomfrequentie laag",
                acfrequencyoor: "Wisselstroomfrequentie buiten bereik",
                acvoltageavgline1: "Wisselstroomspanning gemiddelde buiten bereik - fase 1",
                acvoltageavgline2: "Wisselstroomspanning gemiddelde buiten bereik - fase 2",
                acvoltageavgline3: "Wisselstroomspanning gemiddelde buiten bereik - fase 3",
                acvoltagehighline1: "Wisselstroomspanning hoog - fase 1",
                acvoltagehighline2: "Wisselstroomspanning buiten bereik - fase 2",
                acvoltagehighline3: "Wisselstroomspanning hoog - fase 3",
                acvoltagelowline1: "Wisselstroomspanning laag - fase 1",
                acvoltagelowline2: "Wisselstroomspanning buiten bereik - fase 2",
                acvoltagelowline3: "Wisselstroomspanning laag - fase 3",
                acvoltageoorline1: "Wisselstroomspanning buiten bereik - fase 1",
                acvoltageoorline2: "Wisselstroomspanning buiten bereik - fase 2",
                acvoltageoorline3: "Wisselstroomspanning buiten bereik - fase 3",
                buttonpress: "Knop ingedrukt",
                dcgriderror: "DC-netstroom laag Fout",
                dcgridhigh: "DC-netstroom Hoog",
                dcgridlow: "DC-netstroom laag",
                relayforced: "Relais geforceerd",
                relayopen: "Relais open",
                rocof: "Fout wijzigingssnelheid van frequentie",
            },
            obs_strs: {
                discovering: "Ontdekken",
                failure: "Rapporteren mislukt",
                flasherror: "Flash-fout",
                notmonitored: "Niet gecontroleerd",
                ok: "Normaal",
                plmerror: "PLM-fout",
                secmodeenterfailure: "Openen van beveiligde modus mislukt",
                secmodeexitfailure: "Afsluiten van beveiligde modus mislukt",
                sleeping: "Slaapstand ingeschakeld",
                verifing: "Apparaat verifi\u00ebren",
            },
            pcu_chan: {
                acMonitorError: "Fout in wisselstroommonitor",
                acfrequencyhigh: "Wisselstroomfrequentie hoog",
                acfrequencylow: "Wisselstroomfrequentie laag",
                acfrequencyoor: "Wisselstroomfrequentie buiten bereik",
                acvoltage_avg_hi: "Gemiddeld wisselstroomvoltage hoog",
                acvoltagehigh: "Wisselstroomspanning hoog",
                acvoltagelow: "Wisselstroomspanning laag",
                acvoltageoor: "Wisselstroomspanning buiten bereik",
                acvoltageoosp1: "Wisselstroomspanning buiten bereik - fase 1",
                acvoltageoosp2: "Wisselstroomspanning buiten bereik - fase 2",
                acvoltageoosp3: "Wisselstroomspanning buiten bereik - fase 3",
                agfpowerlimiting: "AGF-vermogen beperken",
                dcresistancelow: "Lage gelijkstroomweerstand",
                dcresistancelowpoweroff: "Lage gelijkstroomweerstand - stroom uit",
                dcvoltagetoohigh: "Te hoge gelijkstroomspanning",
                dcvoltagetoolow: "Te lage gelijkstroomspanning",
                dfdt: "Wisselstroomfrequentie wijzigt te snel",
                gfitripped: "Aardlekschakelaar geactiveerd",
                gridgone: "Geen netwerk",
                gridinstability: "Netwerkinstabiliteit",
                gridoffsethi: "Netwerkverstelstroom hoog",
                gridoffsetlow: "Netwerkverstelstroom laag",
                hardwareError: "Hardwarefout",
                hardwareWarning: "Hardwarewaarschuwing",
                highskiprate: "Groot aantal keer sprake van overslaan",
                invalidinterval: "Ongeldige interval",
                pwrgenoffbycmd: "Stroomopwekking via opdracht uitgeschakeld",
                skippedcycles: "Overgeslagen cycli",
                vreferror: "Referentiefout spanning",
            },
            pcu_ctrl: {
                alertactive: "Waarschuwing actief",
                altpwrgenmode: "Alternatieve modus voor stroomopwekking",
                altvfsettings: "Verschillende spannings- en frequentie-instellingen",
                badflashimage: "Slechte Flash-image",
                bricked: "Geen netwerkprofiel",
                commandedreset: "Opnieuw instellen vereist",
                criticaltemperature: "Kritieke temperatuur",
                "dc-pwr-low": "Gelijkstroom te laag",
                iuplinkproblem: "Probleem met IUP-koppeling",
                manutestmode: "In handmatige testmodus",
                nsync: "Netwerkverstoring niet gesynchroniseerd",
                overtemperature: "Te hoge temperatuur",
                poweronreset: "Vermogen inschakelen opnieuw instellen",
                pwrgenoffbycmd: "Stroomopwekking via opdracht uitgeschakeld",
                runningonac: "Draait op wisselstroom",
                "sleep-mode": "Slaapstand ingeschakeld",
                tpmtest: "Tijdelijk netwerkprofiel",
                unexpectedreset: "Onverwacht opnieuw ingesteld",
                watchdogreset: "Waakhond opnieuw ingesteld",
            },
            rgm_chan: { check_meter: "Meterfout", power_quality: "Slechte stroomkwaliteit" },
        },
        global: {
            cleared: "Leegmaken",
            copyright_notice: "2007-2014, [e] Enphase Energy, Inc. Alle rechten voorbehouden.",
            copyright_notice_01: "[e] Enphase Energy, Inc. Alle rechten voorbehouden",
            cs_phone_number: "XXX-XXX-XXXX",
            disable: "Uitschakelen",
            disabled: "Uitgeschakeld",
            enable: "Inschakelen",
            enabled: "Ingeschakeld",
            enlighten_token_link: "Haal de token hier",
            false: "Onwaar",
            none: "Geen",
            notapplicable: "n.v.t.",
            ok: "OK",
            page_not_found_msg1: "Pagina niet gevonden",
            page_not_found_msg2: "De pagina die u hebt geprobeerd te openen, bestaat niet",
            page_not_found_msg3: 'Probeer de <a href="/">startpagina</a>',
            serialnumber: "Serienummer",
            set: "Instellen",
            too_many_installer_sessions_msg1: "Te veel installatiesessies actief",
            too_many_installer_sessions_msg2: "Sluit andere vensters van installatieprogramma's",
            too_many_installer_sessions_msg3: "Te veel verzoeken actief voor deze hulpbron. Probeer opnieuw over enkele minuten",
            true: "Waar",
            unknown: "Onbekend",
        },
        paging: {
            all: "Alle",
            clearchoices: "Tabel opnieuw instellen",
            info: "Items voor _START_ tot _END_ van _TOTAL_ worden weergegeven",
            infoempty: "0 tot 0 van 0 items worden weergeven",
            infofiltered: "(gefilterd uit _MAX_ totale items)",
            lengthmenu: "items voor _MENU_ weergeven",
            processing: "Verwerken...",
            search: "Zoeken:",
            zerorecords: "Geen overeenkomende bestanden gevonden",
        },
    },
    envoy_backbone: {
        ac_batteries: {
            manage_options: {
                active: "Actief (%{count})",
                active_count: { counting: { one: "Actief (%{count})", other: "Actief (%{count})", zero: "Actief (%{count})" } },
                deleted: "Verwijderd (%{count})",
                deleted_count: { counting: { one: "Verwijderd (%{count})", other: "Verwijderd (%{count})", zero: "Verwijderd (%{count})" } },
            },
            max_temp: "Maximumtemperatuur: ",
            nav: { all: "Alle", manage: "Beheren", status: "Status" },
            no_inverters: "Er zijn geen batterijen.",
            no_inverters_search: 'Er zijn geen wisselstroombatterijen gevonden die overeenkomen met "%{search_term}".',
            sleep_mode: {
                enable_failed:
                    "De poging om de geselecteerde batterijen in de slaapstand te plaatsen is mislukt. Probeer het over een paar minuten nogmaals. Als dit probleem zich blijft voordoen, kunt u contact opnemen met de klantenondersteuning.",
                prompt_to_cancel: { desc: "Een batterij kan pas veilig worden ontkoppeld als de slaapstand van de batterij is geactiveerd.</br></br>Weet u zeker dat u het activeren van de slaapstand van de batterij wilt stopzetten?" },
                prompt_to_sleep_modal: {
                    desc:
                        "De batterijen kunnen pas veilig worden ontkoppeld als slaapstand van de batterijen is geactiveerd.</br></br><b>Opmerking:</b> Batterijen worden opgeladen of ontladen tot een laadstatus van %{min}-%{max}%, voordat de slaapstand van de batterijen wordt geactiveerd.",
                    target_soc_label: "Doeloplaadstatus",
                    target_soc_link_text: "Doeloplaadstatus wijzigen",
                    warning: "Waarschuwing: wanneer een batterij zich in de slaapstand bevindt, kan deze alleen uit de slaapstand worden gehaald door een professionele installateur.",
                },
                prompt_to_wake: "Een batterij kan pas veilig worden ontkoppeld als de slaapstand van de batterij is geactiveerd.</br></br>Weet u zeker dat de slaapstand wilt uitschakelen?",
                sleep_btn: "Slaapstand",
            },
            state_of_charge: "Oplaadstatus: ",
            status_options: {
                cancel_sleep_label: "Stoppen",
                comm_nocount: "Comm.",
                power_nocount: "In bedrijf",
                preparing_to_sleep_text: "Slaapstand activeren",
                profile_nocount: "Config",
                wake_sleep_label: "Uitschakelen",
                waking_label: "Slaapstand afsluiten",
            },
        },
        app_title: "Envoy Mobile",
        authentication: {
            authentication_with_authms: "Login met Enphase",
            bad_jwt: "Verkeerde penning",
            insert_token_headline: "Penning authenticatie",
            title: "Authenticatie",
            token_headline: "Penning",
            token_link: "Bezoek %{auth_authority} om uw penning te krijgen",
            token_submit: "Penning",
            too_many_sessions: "Too many sessions",
            verifying_jwt: "Controle penning",
        },
        buttons: {
            cancel: "Annuleren",
            change: "Wijzigen",
            close: "Sluiten",
            connect: "Verbinden",
            edit: "Bewerken",
            forget: "Vergeten",
            forget_network: "Dit netwerk vergeten",
            ok: "OK",
            sleep_off: "Slaapstand uitschakelen",
            sleep_on: "Slaapstand inschakelen",
            start_scan: "Scan starten",
            stop: "Stoppen",
            update: "Bijwerken",
        },
        cellular: {
            carrier: "Aanbieder",
            connected: "Verbonden",
            connection_status: "Verbindingsstatus",
            iccid: "ICCID (nummer mobiele telefoon)",
            imsi: "IMSI (abonnee-ID)",
            mei: "IMEI-nummer van modem",
            no_modem: "Geen mobiel modem gedetecteerd",
            not_connected: "Niet verbonden",
            page_title: "Mobiele configuratie",
        },
        comm_check: {
            communication_level: "Communicatieniveau",
            description: "Controleer de signaalsterkte tussen de Envoy en de micro-omvormers.",
            devices: "Apparaten",
            in_progress: "Communicatiecontrole wordt uitgevoerd",
            remaining_time: "%{minutes} minuten resterend",
            remaining_time_one: "< 1 minuut resterend",
            start: "Communicatiecontrole starten",
            stop: "Communicatiecontrole stoppen",
            title: "Communicatiecontrole",
        },
        comms: {
            communicating: "Communiceren",
            description: "De lijst met communicerende micro-omvormers van de Envoy bevat de serienummers van alle apparaten die berichten van Envoy ontvangen en de productie en de statusinformatie rapporteren.",
            not_communicating: "Geen communicatie",
            title: "Micro-omvormers die communiceren",
        },
        countries: {
            AD: "Andorra",
            AE: "Verenigde Arabische Emiraten",
            AF: "Afghanistan",
            AG: "Antigua en Barbuda",
            AI: "Anguilla",
            AL: "Albani\u00eb",
            AM: "Armeni\u00eb",
            AQ: "Antarctica",
            AR: "Argentini\u00eb",
            AS: "Amerikaans-Samoa",
            AT: "Oostenrijk",
            AU: "Australi\u00eb",
            AW: "Aruba",
            AZ: "Azerbeidzjan",
            BA: "Bosni\u00eb-Herzegovina",
            BB: "Barbados",
            BD: "Bangladesh",
            BE: "Belgi\u00eb",
            BF: "Burkina Faso",
            BG: "Bulgarije",
            BH: "Bahrein",
            BI: "Burundi",
            BJ: "Benin",
            BM: "Bermuda",
            BN: "Brunei Darussalam",
            BO: "Plurinationale staat Bolivia",
            BR: "Brazili\u00eb",
            BS: "Bahama\u2019s",
            BT: "Bhutan",
            BV: "Bouveteiland",
            BW: "Botswana",
            BY: "Wit-Rusland",
            BZ: "Belize",
            CA: "Canada",
            CC: "Cocos-Keeling-eilanden",
            CF: "Centraal-Afrikaanse Republiek",
            CG: "Congo",
            CH: "Zwitzerland",
            CI: "Ivoorkust",
            CK: "Cookeilanden",
            CL: "Chili",
            CM: "Kameroen",
            CN: "China",
            CO: "Colombia",
            CR: "Costa Rica",
            CV: "Kaapverdi\u00eb",
            CX: "Christmaseiland",
            CY: "Cyprus",
            CZ: "Tsjechi\u00eb",
            DE: "Duitsland",
            DJ: "Djibouti",
            DK: "Denemarken",
            DM: "Dominica",
            DO: "Dominicaanse Republiek",
            DZ: "Algerije",
            EC: "Equador",
            EE: "Estland",
            EG: "Egypte",
            EH: "Westelijke Sahara",
            ER: "Eritrea",
            ES: "Spanje",
            ET: "Ethiopi\u00eb",
            FI: "Finland",
            FJ: "Fiji",
            FK: "Falklandeilanden (Islas Malvinas)",
            FM: "Micronesi\u00eb",
            FO: "Faer\u00f6ereilanden",
            FR: "Frankrijk",
            GA: "Gabon",
            GB: "Verenigd Koninkrijk",
            GD: "Grenada",
            GE: "Georgi\u00eb",
            GF: "Frans-Guyana",
            GH: "Ghana",
            GI: "Gibraltar",
            GL: "Groenland",
            GM: "Gambia",
            GN: "Guinee",
            GP: "Guadeloupe",
            GQ: "Equatoriaal-Guinea",
            GR: "Griekenland",
            GS: "Zuid-Georgi\u00eb en de Zuidelijke Sandwich-eilanden",
            GT: "Guatemala",
            GU: "Guam",
            GW: "Guinee-Bissau",
            GY: "Guyana",
            HK: "Hong Kong",
            HM: "Heard- en McDonaldeilanden",
            HN: "Honduras",
            HR: "Kroati\u00eb",
            HT: "Ha\u00efti",
            HU: "Hongarije",
            ID: "Indonesi\u00eb",
            IE: "Ierland",
            IL: "Isra\u00ebl",
            IN: "India",
            IO: "Brits Territorium in de Indische Oceaan",
            IS: "IJsland",
            IT: "Itali\u00eb",
            JM: "Jamaica",
            JO: "Jordani\u00eb",
            JP: "Japan",
            KE: "Kenia",
            KG: "Kirgizi\u00eb",
            KH: "Cambodja",
            KI: "Kiribati",
            KM: "Comoren",
            KN: "Saint Kitts en Nevis",
            KR: "Zuid-Korea",
            KW: "Koeweit",
            KY: "Caymaneilanden",
            KZ: "Kazachstan",
            LA: "Lao",
            LB: "Libanon",
            LC: "Saint Lucia",
            LI: "Liechtenstein",
            LK: "Sri Lanka",
            LR: "Liberi\u00eb",
            LS: "Lesotho",
            LT: "Litouwen",
            LU: "Luxemburg",
            LV: "Letland",
            MA: "Marokko",
            MC: "Monaco",
            MD: "Republiek Moldavi\u00eb",
            ME: "Montenegro",
            MG: "Madagaskar",
            MH: "Marshalleilanden",
            ML: "Mali",
            MM: "Myanmar",
            MN: "Mongoli\u00eb",
            MO: "Macao",
            MP: "Noordelijke Marianen",
            MQ: "Martinique",
            MR: "Mauritani\u00eb",
            MS: "Montserrat",
            MT: "Malta",
            MU: "Mauritius",
            MV: "Malediven",
            MW: "Malawi",
            MX: "Mexico",
            MY: "Maleisi\u00eb",
            MZ: "Mozambique",
            NA: "Namibi\u00eb",
            NC: "Nieuw-Caledoni\u00eb",
            NE: "Niger",
            NF: "Norfolkeiland",
            NG: "Nigeria",
            NI: "Nicaragua",
            NL: "Nederland",
            NO: "Noorwegen",
            NP: "Nepal",
            NR: "Nauru",
            NU: "Niue",
            NZ: "Nieuw-Zeeland",
            OM: "Oman",
            PA: "Panama",
            PE: "Peru",
            PF: "Frans-Polynesi\u00eb",
            PG: "Papoea-Nieuw-Guinea",
            PH: "Filipijnen",
            PK: "Pakistan",
            PL: "Polen",
            PM: "Saint-Pierre en Miquelon",
            PN: "Pitcairneilanden",
            PR: "Puerto Rico",
            PT: "Portugal",
            PW: "Palau",
            PY: "Paraguay",
            QA: "Qatar",
            RO: "Roemeni\u00eb",
            RU: "Russische Federatie",
            SA: "Saudi-Arabi\u00eb",
            SB: "Salomonseilanden",
            SC: "Seychellen",
            SE: "Zweden",
            SG: "Singapore",
            SH: "Saint Helena, Ascension en Tristan da Cunha",
            SI: "Sloveni\u00eb",
            SJ: "Spitsbergen en Jan Mayen",
            SK: "Slowakije",
            SL: "Sierra Leone",
            SM: "San Marino",
            SN: "Senegal",
            SO: "Somali\u00eb",
            SR: "Suriname",
            ST: "Sao Tom\u00e9 en Principe",
            SV: "El Salvador",
            SY: "Arabische Republiek Syri\u00eb",
            SZ: "Swaziland",
            TC: "Turks- en Caicoseilanden",
            TD: "Tsjaad",
            TF: "Franse Zuidelijke en Antarctische Gebieden",
            TG: "Togo",
            TH: "Thailand",
            TJ: "Tadzjikistan",
            TK: "Tokelau",
            TL: "Oost-Timor",
            TM: "Turkmenistan",
            TN: "Tunesi\u00eb",
            TO: "Tonga",
            TR: "Turkije",
            TT: "Trinidad en Tobago",
            TV: "Tuvalu",
            TZ: "Verenigde Republiek Tanzania",
            UA: "Oekra\u00efne",
            UG: "Oeganda",
            UM: "Kleine afgelegen eilanden van de Verenigde Staten",
            US: "Verenigde Staten",
            UY: "Uruguay",
            UZ: "Oezbekistan",
            VA: "Heilige Stoel (Vaticaanstad)",
            VC: "St. Vincent en de Grenadinen",
            VE: "Bolivariaanse Republiek Venezuela",
            VG: "Britse Maagdeneilanden",
            VI: "Amerikaanse Maagdeneilanden",
            VN: "Vietnam",
            VU: "Vanuatu",
            WF: "Wallis en Futuna",
            WS: "Samoa",
            YE: "Jemen",
            YT: "Mayotte",
            ZA: "Zuid-Afrika",
            ZM: "Zambia",
            ZW: "Zimbabwe",
        },
        counts: "%{actual_count}/%{expected_count}",
        detected: {
            battery_target_seperate: { one: "%{count} batterij", other: "%{count} batterijen", zero: "%{count} batterijen" },
            description:
                "De lijst met gedetecteerde micro-omvormers van deze Envoy bevat alle serienummers die zijn gedetecteerd door een apparaatscan of zijn opgegeven met de Installatietoolkit. Wanneer er micro-omvormers worden gedetecteerd, verzenden deze aanvullende gegevens naar en ontvangen deze de aanvullende gegevens van de Envoy.",
            detected: "Gedetecteerd",
            device_target: "Apparaatdoel: %{count}",
            device_target_title: "Apparaatdoel: ",
            discovered: "Ontdekt:",
            installed: "Ge\u00efnstalleerd",
            micro_target_seperate: { one: "%{count} micro-omvormer", other: "%{count} micro-omvormers", zero: "%{count} micro-omvormers" },
            nsr_target_separate: { one: "%{count} Q-Relay", other: "%{count} Q-Relays", zero: "%{count} Q-Relays" },
            provisioned: "Opgegeven:",
            remaining_duration: { one: "Resterende duur: %{count} uur %{minutes} minuten", other: "Resterende duur: %{count} uur %{minutes} minuten", zero: "Resterende duur: %{count} uur %{minutes} minuten" },
            remaining_hour_one: "1 uur",
            remaining_hours: "%{hours} uren",
            remaining_minute_one: "1 minuut resterend",
            remaining_minutes: "%{minutes} minuten resterend",
            remaining_priority: {
                one: "Resterende prioriteitsduur: %{count} uur %{minutes} minuten",
                other: "Resterende prioriteitsduur: %{count} uur %{minutes} minuten",
                zero: "Resterende prioriteitsduur: %{count} uur %{minutes} minuten",
            },
            remaining_time: "%{minutes} minuten resterend",
            remaining_time_one: "< 1 minuut resterend",
            scan_inprogress: "Apparaatscan wordt uitgevoerd",
            scan_start: "Apparaatscan starten",
            scan_stop: "Scan stoppen",
            title: "Micro-omvormers gedetecteerd",
        },
        device_alert_messages: {
            meters_not_enabled: "De productie- en verbruiksmeters moeten worden geconfigureerd voordat de batterijen kunnen werken.",
            no_phase_assignment: "Batterijen werken pas wanneer ze aan fasen zijn toegewezen.",
            not_configured: "De batterijen moeten worden geconfigureerd voordat ze kunnen werken.",
        },
        devices: {
            detected: "Gedetecteerd",
            detected_total_count: "%{detected_count} van %{total_count}",
            device_info: {
                change_phase: "Fase wijzigen",
                comm_level: "Communicatieniveau: ",
                comm_level_2_4_ghz: "[NL] Comm Level (2.4 GHz): ",
                comm_level_sub_ghz: "[NL] Comm Level (Sub GHz): ",
                detected: "Gedetecteerd: ",
                discovered: "Ontdekt via apparaatscan",
                grid_profile: "Netwerkprofiel: ",
                last_comm: "Laatste communicatie: ",
                last_report: "Laatste rapport: ",
                notapplicable: "n.v.t.",
                param_table: "Parametertabel: ",
                part_number: "Onderdeelnummer: ",
                pending_condition_clear: 'De opdracht Toestand wissen voor "%{condition_flag}" wordt uitgevoerd.',
                phase: "Fase: ",
                phase_unknown: "Geen fase geselecteerd",
                provisioned: "Toegewezen via inrichting",
                running_image: "Image uitgevoerd: ",
                select_phase: "Fase selecteren",
                status: "Status: ",
                unknown: "Onbekend",
                updated: "Bijgewerkt ",
                view_in_array: "Weergeven in Array",
            },
            device_scan: "Apparaatscan",
            device_scan_short: "Scannen",
            scan_state: { active: "Actief", inactive: "Inactief", scan_disabled: "Uitgeschakeld", scan_inhibited: "Beperkt", scan_suspended: "Opgeschort" },
        },
        encharge_batteries: {
            manage_options: {
                active: "[NL] Active (%{count})",
                active_count: { counting: { one: "[NL] Active (%{count})", other: "[NL] Active (%{count})", zero: "[NL] Active (%{count})" } },
                deleted: "[NL] Deleted (%{count})",
                deleted_count: { counting: { one: "[NL] Deleted (%{count})", other: "[NL] Deleted (%{count})", zero: "[NL] Deleted (%{count})" } },
            },
            nav: { all: "Alle", manage: "Beheren", status: "Status" },
            no_inverters: "[NL] There are no encharge batteries.",
            no_inverters_search: '[NL] No Encharge Batteries were found matching "%{search_term}".',
            phase_labels: { "ph-a": "[NL] L1(A)", "ph-b": "[NL] L2(B)", "ph-c": "[NL] L3(C)", "ph-unk": "[NL] No phase selected", "ph-updating": "[NL] Updating...", select_one: "[NL] Select One" },
            status_options: {
                cancel_sleep_label: "[NL] Stop",
                comm_nocount: "[NL] Comm",
                power_nocount: "[NL] Operating",
                preparing_to_sleep_text: "[NL] Entering Sleep Mode",
                profile_nocount: "[NL] Config",
                wake_sleep_label: "[NL] Turn Off",
                waking_label: "[NL] Exiting Sleep Mode",
            },
            title: "[NL] Encharge",
        },
        enpowers: {
            manage_options: {
                active: "[NL] Active (%{count})",
                active_count: { counting: { one: "[NL] Active (%{count})", other: "[NL] Active (%{count})", zero: "[NL] Active (%{count})" } },
                deleted: "[NL] Deleted (%{count})",
                deleted_count: { counting: { one: "[NL] Deleted (%{count})", other: "[NL] Deleted (%{count})", zero: "[NL] Deleted (%{count})" } },
            },
            max_temp: "[NL] Max Temp: ",
            nav: { all: "[NL] All", manage: "[NL] Manage", status: "[NL] Status" },
            no_inverters: "[NL] There is no Enpower device.",
            no_inverters_search: '[NL] No Enpower device found matching "%{search_term}".',
            state_of_grid: { closed: "[NL] Closed", open: "[NL] Open", title: "[NL] State of Grid: " },
            status_options: { comm_nocount: "[NL] Comm", power_nocount: "[NL] Operating", profile_nocount: "[NL] Config" },
            title: "[NL] Enpower",
        },
        errors: {
            error_message: "Er is een probleem bij het ophalen van gegevens van de Envoy. Als dit zich blijft voordoen, kunt u contact opnemen met de klantenondersteuning.",
            interface_not_dhcp: "U kunt geen nieuw IP-adres ophalen. Schakel de IP-instelling voor de Envoy eerst naar DHCP.",
            not_allowed: "Uw gevraagde wijziging is niet toegestaan en kan niet worden opgeslagen.",
            not_authorized: "U hebt geen toestemming om deze pagina weer te geven.",
            save_failed: "Uw wijzigingen kunnen niet worden opgeslagen. ",
            start_scan_target_too_low:
                "<p>U hebt aangegeven dat u verwacht dat er %{expected_count} micro-omvormers rapporteren aan deze Envoy, waarbij er al %{expected_count} zijn gedetecteerd.</p><p>Voordat een apparaatscan wordt gestart, <a href='#' class='open-target-count'>verhoogt u het verwachte aantal micro-omvormers</a> of verwijdert u \u00e9\u00e9n of meer micro-omvormers uit het <a href='#' class='open-manage-devices'>scherm Apparaten beheren</a>.</p>",
            start_scan_target_too_low_battery: {
                one: "<p>U hebt aangegeven dat u verwacht dat er %{count} batterij rapporteert aan deze Envoy. Deze is al gedetecteerd.</p>",
                other: "<p>U hebt aangegeven dat u verwacht dat er %{count} batterijen rapporteren aan deze Envoy. Dit aantal is al gedetecteerd.</p>",
                zero: "<p>U hebt aangegeven dat u verwacht dat er %{count} batterijen rapporteren aan deze Envoy. Dit aantal is al gedetecteerd.</p>",
            },
            start_scan_target_too_low_battery_end:
                "<p>Voordat een apparaatscan wordt gestart, <a href='#' class='open-target-count'>verhoogt u het verwachte aantal batterijen</a> of verwijdert u \u00e9\u00e9n of meer batterijen uit het <a href='#' class='open-manage-devices-battery'>scherm Apparaten beheren</a>.</p>",
            start_scan_target_too_low_both:
                "<p>Het verwachte aantal apparaten is al gedetecteerd.</p><p>Voordat u een apparaatscan start, <a href='#' class='open-target-count'>verhoogt u het verwachte aantal apparaten</a> of verwijdert u \u00e9\u00e9n of meer micro-omvormers of batterijen.</p>",
            start_scan_target_too_low_micro: {
                one: "<p>U hebt aangegeven dat u verwacht dat er %{count} micro-omvormer rapporteert aan deze Envoy. Deze is al gedetecteerd.</p>",
                other: "<p>U hebt aangegeven dat u verwacht dat er %{count} micro-omvormers rapporteren aan deze Envoy. Dit aantal is al gedetecteerd.</p>",
                zero: "<p>U hebt aangegeven dat u verwacht dat er %{count} micro-omvormers rapporteren aan deze Envoy. Dit aantal is al gedetecteerd.</p>",
            },
            start_scan_target_too_low_micro_end:
                "<p>Voordat een apparaatscan wordt gestart, <a href='#' class='open-target-count'>verhoogt u het verwachte aantal micro-omvormers</a> of verwijdert u \u00e9\u00e9n of meer micro-omvormers uit het <a href='#' class='open-manage-devices'>scherm Apparaten beheren</a>.</p>",
            start_scan_target_too_low_nsr: {
                one: "<p>U hebt aangegeven dat u verwacht dat er %{count} Q-Relays rapporteert aan deze Envoy. Deze is al gedetecteerd.</p>",
                other: "<p>U hebt aangegeven dat u verwacht dat er %{count} Q-Relays rapporteren aan deze Envoy. Dit aantal is al gedetecteerd.</p>",
                zero: "<p>U hebt aangegeven dat u verwacht dat er %{count} Q-Relays rapporteren aan deze Envoy. Dit aantal is al gedetecteerd.</p>",
            },
            start_scan_target_too_low_nsr_end:
                "<p>Voordat een apparaatscan wordt gestart, <a href='#' class='open-target-count'>verhoogt u het verwachte aantal Q-Relays</a> of verwijdert u \u00e9\u00e9n of meer Q-Relays uit het <a href='#' class='open-manage-devices-nsr'>scherm Apparaten beheren</a>.</p>",
            start_scan_title: "Apparaatscan niet beschikbaar",
            timeout_message:
                "Het duurt te lang om gegevens van de Envoy op te halen. Zorg ervoor dat de Envoy is ingeschakeld en dat de Envoy en dit apparaat zijn verbonden met hetzelfde lokale netwerk. Als het probleem zich blijft voordoen, kunt u contact opnemen met de klantenondersteuning.",
            title: "Fout",
            tunnel_close_failed: "Poging om de verbinding met Enphase-ondersteuning te sluiten mislukt. Als dit zich blijft voordoen, kunt u contact opnemen met de klantenondersteuning.",
            tunnel_failed_title: "Verbinding mislukt",
            tunnel_open_failed:
                "De Envoy moet zijn verbonden met internet om een verbinding met Enphase te openen. Als de Envoy een internetverbinding heeft en dit probleem zich blijft voordoen, kunt u contact opnemen met de klantenondersteuning.",
        },
        ethernet: {
            buttons: { dhcp: "DHCP gebruiken", new_ip: "Nieuw IP-adres ophalen", static: "Statisch IP gebruiken" },
            confirm_change: { description: "Dit kan de communicatie met de Envoy onderbreken, zodat u opnieuw verbinding moet maken.", title: "Ethernetconfiguratie wijzigen?" },
            confirm_static: {
                description: "Hiermee worden het huidige DHCP IP-adres en andere configuraties als statische waarden toegewezen. Als u verdergaat, kunt u deze waarden op het volgende scherm bijwerken.",
                title: "Ethernetconfiguratie wijzigen?",
            },
            gateway_ip: "Gateway-IP",
            ip_address: "IP-adres",
            ip_setting: "IP-instelling",
            netmask: "Netmasker",
            new_ip_modal: { description: "Dit kan de communicatie met de Envoy onderbreken, zodat u opnieuw verbinding moet maken.", title: "Nieuw IP-adres ophalen?" },
            no_config: "Geen ethernetverbinding gedetecteerd.",
            page_title: "Ethernetconfiguratie",
            primary_dns: "Primaire DNS-server",
            secondary_dns: "Secundaire DNS-server",
            type: { dhcp: "DHCP", static: "Statisch IP" },
        },
        forms: { search: "Zoeken", search_prompt: "Serienummer", select_prompt: "E\u00e9n selecteren" },
        global_nav: {
            acb: "[NL] AC Battery",
            comms: "Kolommen",
            detected: "Gedetecteerd",
            encharge: "[NL] Encharge",
            encharge_batteries: "[NL] Encharge",
            enpower: "[NL] Enpower",
            meters: "Meters",
            meters_small: "Meters",
            microinverters: "Micro-omvormers",
            microinverters_short: "Micro's",
            more: "Meer",
            network: "Netwerk",
            nsr: "Q-relais",
            overview: "Overzicht",
            power: "Elektriciteit",
            profiles: "Profielen",
            storage: "AC-batterij",
        },
        initial_setup: {
            continue: "Doorgaan",
            device_prompt: "Voer het aantal apparaten in waarvan u verwacht dat deze aan de Envoy rapporteren.",
            eu_profile_prompt: "Selecteer hieronder een locatiespecifiek netwerkprofiel.",
            migration_in_progress_message: "profielen worden bijgewerkt",
            na_profile_prompt: "Het systeem gebruikt fabrieksge\u00efnstalleerde netwerkprofielinstellingen. U kunt hieronder een locatiespecifiek netwerkprofiel selecteren.",
            system_size: "Systeemomvang",
        },
        jquery_validate: {
            messages: {
                addedTierPercent: "Voer een getal\u00a0in dat groter is dan het percentage\u00a0van de uitgangswaarde\u00a0die is ingevoerd voor {0}.",
                an_number: "Voer een geldig nummer in.",
                creditcard: "Voer een geldig creditcardnummer in.",
                date: "Voer een geldige datum in.",
                dateISO: "Voer een geldige datum in (ISO).",
                digits: "Voer alleen cijfers in.",
                domain: "Voer een geldig IP v4-adres (xxx.xxx.xxx.xxx) of een geldige URL (google.com) in",
                email: "Voer een geldig e-mailadres in.",
                equalTo: "Voer dezelfde waarde opnieuw in.",
                ipv4: "Voer een geldig IP v4-adres in. (xxx.xxx.xxx.xxx)",
                max: "Voer een waarde in die kleiner dan of gelijk is aan {0}.",
                maxlength: "Voer niet meer dan {0} tekens in.",
                min: "Voer een waarde in die groter dan of gelijk is aan {0}.",
                minlength: "Voer ten minste {0} tekens in.",
                number: "Voer een geldig nummer in.",
                range: "Geef een waarde op tussen {0} en {1}.",
                rangelength: "Geef een waarde op die tussen {0} en {1} tekens lang is.",
                remote: "Herstel dit veld.",
                required: "Dit veld is vereist.",
                url: "Voer een geldige URL in.",
                wep_key: "Voer een geldige WEP-sleutel in (10, 26 of 58 tekens die 0-9 of A-F mogen bevatten).",
            },
        },
        loading: "Een ogenblik geduld, bezig met laden...",
        meters: {
            active_energy: "Actieve energie",
            active_energy_lt: "Actieve energie",
            active_power: "Actief vermogen",
            apparent_energy: "Schijnbare energie",
            apparent_power: "Schijnbaar vermogen",
            consumption: "Verbruiksmeter",
            consumption_meter: {
                enable_meter: "Verbruiksmeter inschakelen",
                measurement_type: "Gemeten circuit",
                meter_type_desc: "Omvat het circuit dat door de verbruiksstroomtransformators gaat het laden van het huis met zonne-energie of alleen opladen?",
                meter_type_desc_singular: "Omvat het circuit dat door de verbruiksstroomtransformators gaat het laden van het huis met zonne-energie of alleen opladen?",
                meter_type_warning: "Zorg ervoor dat de bovenstaande selecties correct zijn.",
            },
            current: "Stroom",
            current_ct: {
                current_ct_settings: "Huidige CT-instellingen",
                custom_cts_installed: "Aangepast %{meter_type} ge\u00efnstalleerde CT\u2018s",
                primary: "Primaire",
                remove_desc: "Tik op OK om te bevestigen dat u standaard CT\u2018s van Enphase% {meter_type} gebruikt.",
                remove_settings: "Aangepaste CT-instellingen verwijderen?",
                secondary: "Secundaire",
                turns: "Schakelingen",
            },
            descriptors: { lifetime: "Levensduur", lifetime_lag: "Nalopend (levensduur)", lifetime_lead: "Voorlopend (levensduur)", today: "Vandaag", today_lag: "Nalopend (vandaag)", today_lead: "Voorlopend (vandaag)" },
            enable_consumption_meter: "Verbruiksmeter inschakelen",
            enable_consumption_modal: {
                description: "Zodra u de meter inschakelt, kunt u deze niet uitschakelen of het type ervan niet wijzigen.",
                description_mode_three: "Zodra u deze meter inschakelt, kunt u deze niet meer uitschakelen, wijzigt u type naar, of het aantal fases verlagen.",
                description_mode_three_post_enable: "Zodra u dit doet, kunt u het aantal fases niet meer verlagen.",
                note_three: "<strong>Opmerking: het aantal fases wordt ook verhoogd op de productiemeter.</strong>",
                note_three_post_enable: "<strong>Opmerking: het aantal fases wordt ook verhoogd op de productiemeter.</strong>",
                title: 'Meter inschakelen met metertype "%{type}"?',
                title_mode_three: "Meter inschakelen met bemeterd circuit: %{type} en fasen bemeterd: %{phCount}?",
                title_mode_three_post_enable: "Gemeten fases bijwerken naar %{phCount}?",
            },
            enable_meter: "Verbruiksmeter inschakelen",
            enable_modal: { description: "Zodra u de meter inschakelt, kunt u deze niet uitschakelen of het type ervan niet wijzigen.", title: "Meter inschakelen met metertype %{type}?" },
            enable_production_meter: "Productiemeter inschakelen?",
            enable_production_modal: {
                description: "Als u deze meter inschakelt, kan deze niet worden uitgeschakeld.",
                description_mode_three: "Zodra u deze meter inschakelt, kunt u deze niet meer uitschakelen of het aantal fases verlagen.",
                description_mode_three_post_enable: "Zodra u dit doet, kunt u het aantal fases niet meer verlagen.",
                note_three: "<strong>Opmerking: het aantal fases wordt ook verhoogd op de verbruiksmeter.</strong>",
                note_three_post_enable: "<strong>Opmerking: het aantal fases wordt ook verhoogd op de verbruiksmeter.</strong>",
                title: "Meter inschakelen?",
                title_mode_three: "Meter inschakelen met gemeten fasen: %{phCount}?",
                title_mode_three_post_enable: "Gemeten fases bijwerken naar %{phCount}?",
            },
            enable_production_prompt: "De productiemeter moet zijn ingeschakeld voordat deze metingen kunnen worden weergegeven.",
            freq_analysis: { btn_change_data_type: "Gegevens omschakelen", plc_activity: "Activiteit", plc_power_spectrum: "Vermogensspectrum", power_line_analy: "Power Line Communication-analyse" },
            id: "EID",
            internal_meters: "Interne meters",
            latest_reading: "Laatste uitlezing",
            lifetime_energy: "Levensduur",
            load_contains_storage_message: "Laadgegevens zijn inclusief opslagactiviteit.",
            measurement_type: "Type",
            meter_change_warning: "U kunt dit niet wijzigen nadat de meter is ingeschakeld.",
            meter_mode: { single: "Eenfasig", split: "Eenfasig", three: "Meerfasig" },
            meter_readings: "Uitlezingen",
            meter_state: { disabled: "Uitgeschakeld", enabled: "Ingeschakeld" },
            meter_status: {
                "check-wiring": "Bedrading controleren",
                meter_setup: "Meten nu instellen",
                meters_not_enabled: "Meters niet ingeschakeld",
                normal: "Normaal",
                "not-metering": "Meter niet ingeschakeld",
                status_flags: {
                    "negative-production": "Productielezingen zijn negatief. Controleer de CT-richting en -kabels in vergelijking met de spanningskabels.",
                    "negative-total-consumption": "De verbruiksmetingen zijn negatief. Controleer de CT-richting en -kabels in vergelijking met de spanningskabels.",
                    "power-on-unused-phase": "Stroom wordt gedetecteerd op een ongebruikte fase. Controleer de CT-kabels in vergelijking met de spanningskabels.",
                    "production-imbalance": "Productie niet evenredig verdeeld tussen fasen. Controleer de CT-kabels en spanningskabels",
                },
            },
            meter_type: { "net-consumption": "Netto", "total-consumption": "Totaal" },
            meter_type_desc: "Als de verbruiksstroomtransformatoren op een circuit zitten waardoor de zonne-energieproductie stroomt, laat u het type ingesteld op <b>Net</b>. Zo niet, wijzigt u het type naar <b>Totaal</b>.",
            meter_type_verbose: { "net-consumption": "Laden met productie van zonne-energie", "total-consumption": "Alleen opladen" },
            meter_type_warning: "Zorg ervoor dat het metertype juist is ingesteld. U kunt dit niet wijzigen nadat de meter is ingeschakeld.",
            mode: "Modus",
            multi_phase_options: { mphase_0: "Niet geselecteerd", mphase_1: "L1(A)", mphase_2: "L1(A) + L2(B)", mphase_3: "L1(A) + L2(B) + L3(C)" },
            multi_phase_warning: {
                consumption: {
                    post_continue: "De meter is nog niet ingeschakeld. Controleer de metingen, tik vervolgens op <strong>Verbruiksmeter inschakelen</strong> onder aan het scherm.",
                    pre_continue: "De meter is nog niet ingeschakeld. Selecteer de bemeterde fasen en het bemeterde circuit en tik op <strong>Metingen weergeven</strong>.",
                    pre_continue_one: "De meter is nog niet ingeschakeld. Selecteer het bemeterde circuit en tik op <strong>Metingen weergeven</strong>.",
                },
                production: {
                    post_continue: "De meter is nog niet ingeschakeld. Controleer de metingen, tik vervolgens op <strong>Productiemeter inschakelen</strong> onder aan het scherm.",
                    pre_continue: "De meter is nog niet ingeschakeld. Selecteer de bemeterde fasen en tik op <strong>Metingen weergeven</strong>.",
                },
            },
            net_consumption_desc: "Deze metingen vormen het verschil tussen het totale verbruik van het huis en de productie van de installatie. Deze moeten bijna gelijk zijn aan de meetstand van de nutsvoorzieningen van het huis.",
            net_consumption_title: "Nettoverbruik",
            no_consumption: "Er is geen verbruiksmeter voor deze Envoy geconfigureerd.",
            no_meters: "Geen meters gedetecteerd.",
            no_production: "Er is geen productiemeter voor deze Envoy geconfigureerd.",
            phase_count: "Gemeten fasen",
            phase_count_desc: "Selecteer welke van de fasemeters u hebt aangesloten.",
            phase_labels: { phase_1: "L1(A)", phase_2: "L2(B)", phase_3: "L3(C)" },
            pmu: {
                add_another: "Nog een toevoegen",
                add_meter: "Elektriciteitsmeter toevoegen",
                config: {
                    add: "Geselecteerde meters toevoegen",
                    meters_description: "Elektriciteitsmeters gedetecteerd op dit netwerk:",
                    network_warning: "Voordat u een meter toevoegt, moet u controleren of de Envoy over een ethernetverbinding beschikt met een statisch IP-adres. Dit moet zowel op de router als op de Envoy worden geconfigureerd.",
                    no_meters_description:
                        "Geen elektriciteitsmeters gedetecteerd<div class='alert alert-info'><b>Opmerking:</b> Het kan tot \u00e9\u00e9n uur duren voordat elektriciteitsmeters worden gedetecteerd. Zorg ervoor dat de elektriciteitsmeter op hetzelfde lokale subnet zit als de Envoy om de detectie te vereenvoudigen.</div>",
                    remove: "Elektriciteitsmeter verwijderen",
                    title: "Configuratie elektriciteitsmeter",
                },
                labels: { fw_version: "Firmwareversie", ip: "IP-adres", mac_address: "Mac-adres", manufacturer: "Fabrikant", part_number: "Onderdeelnummer", production: "Productie", serial_number: "Serienummer", status: "Status" },
                phase_coupler: "Er is een fasekoppeling vereist voor micro-omvormers die op L2 of L3 zijn ge\u00efnstalleerd om te communiceren met de Envoy.",
            },
            power_exporting: "Exporteren naar lichtnet",
            power_factor: "Vermogensfactor",
            power_importing: "Importeren uit lichtnet",
            production: "Productiemeter",
            reactive_energy: "Reactieve energie",
            reactive_power: "Reactief vermogen",
            single_phase_warning: {
                consumption: {
                    post_continue: "De meter is nog niet ingeschakeld. Controleer de metingen, tik vervolgens op <strong>Verbruiksmeter inschakelen</strong> onder aan het scherm.",
                    pre_continue: "De meter is nog niet ingeschakeld. Selecteer het bemeterde circuit en tik op <strong>Metingen weergeven</strong>.",
                },
                production: {
                    post_continue: "De meter is nog niet ingeschakeld. Controleer de metingen, tik vervolgens op <strong>Productiemeter inschakelen</strong> onder aan het scherm.",
                    pre_continue: "De meter is nog niet ingeschakeld. Tik op <strong>Metingen weergeven</strong> om de metingen te bekijken en te controleren.",
                },
            },
            status: "Status",
            title: "Meters",
            today_energy: "Vandaag",
            total_consumption_desc: "Deze metingen geven het totale verbruik van het huis aan.",
            total_consumption_na: "De productiemeter moet zijn ingeschakeld voordat deze metingen kunnen worden weergegeven.",
            total_consumption_title: "Totaal verbruik",
            type: { eim: "Ge\u00efntegreerde meter van Envoy", pmu: "Elektriciteitsmeter", rgm: "Enphase-RGM" },
            unavailable: "n.v.t.",
            update_settings: "Bijwerken",
            view_readings: "Meetstanden bekijken",
            wizard: {
                batt_off: { counting: { one: "Zorg ervoor dat het Enphase-batterijcircuit UIT staat.", other: "Zorg ervoor dat de Enphase-batterijcircuits UIT staan." } },
                battery_reminder: "<b>Denk aan het inschakelen van het Enphase batterijcircuit.</b>",
                btn_next: "Volgende",
                btn_try_again: "Opnieuw proberen",
                bullet_load_increase: "Is het totale verbruik van het huis hoger geworden zoals verwacht?",
                bullet_meters_match: "Komt de meetstand van de elektriciteitsmeter van het huis overeen met deze meting?",
                bullet_phase_select: "Stroomt de zonne-energieproductie naar het net dat wordt gemeten door de verbruiks-CT?",
                bullet_pv_on: "Zet de PV-onderbrekers AAN en wacht tot de verbinding opnieuw tot stand is gebracht. De PV moet binnen 5 minuten vermogen produceren, tik vervolgens op <strong>Volgende</strong>.",
                bullet_turn_on_load: "Schakel een bekende belasting in, zoals een warmtepistool, en tik op <b>Volgende</b>.",
                check_meters: "Meters<br>controleren",
                check_title: " %{meter_type}-meter controleren",
                confirm_ct_routing: "Zorg ervoor dat al het verbruik van het huis door de verbruiks-CT's loopt.",
                consumption_appears_good: "Het lijkt dat de verbruiksmeter juist is geconfigureerd.",
                consumption_ct_direction: "Controleer of de pijl op de verbruiks-CT's in de richting van de energiestroom wijst, richting het laadcentrum.",
                consumption_cts_installed: "Hebt u de verbruiks-CT's ge\u00efnstalleerd?",
                consumption_enable_prompt: "Tik op <strong>Verbruiksmeter inschakelen</strong> om het instellen van de meter te voltooien.",
                consumption_looks_good: "De verbruiksmetingen zien er goed uit!",
                consumption_neg: "De verbruiksmetingen zijn negatief. Controleer het volgende en tik daarna op <b>Opnieuw proberen</b>.",
                consumption_not_enabled: "De verbruiksmeter is niet ingeschakeld",
                consumption_phase_sel_net: "De verbruiks-CT bevat zonne-energieproductie.",
                consumption_phase_sel_total: "De verbruiks-CT bevat geen zonne-energieproductie.",
                ct_bw_correct: "Zorg ervoor dat de blauwe en witte draden verbonden zijn met de juiste posities van het aansluitpunt.",
                desc: "Gebruik onze stapsgewijze wizard om ervoor te zorgen dat de interne meters juist bedraad en geconfigureerd zijn.",
                desc_consumption: "Gebruik onze stapsgewijze wizard om ervoor te zorgen dat de verbruiksmeter juist bedraad en geconfigureerd is.",
                desc_production: "Gebruik onze stapsgewijze wizard om ervoor te zorgen dat de productiemeter juist bedraad en geconfigureerd is.",
                done: "Gereed",
                enable_button: "%{meterType}-meter inschakelen",
                enough_sun: "Zorg dat er voldoende zonlicht bij de zonnepanelen komt om de micro-omvormers van stroom te voorzien.",
                exit_check: "Weet u zeker dat u de Metercontrole wilt verlaten?",
                exit_conf: { desc: "Weet u zeker dat u de wizard voor de productiemeterinstelling wilt verlaten? U moet opnieuw beginnen wanneer u de wizard weer wilt gebruiken.", neg_button: "Terug", title: "Wilt u de wizard afsluiten?" },
                exit_wizard: "Wizard afsluiten",
                get_started: "Aan de slag",
                load_didnt_increase: "Het totale verbruik van het huis is niet hoger geworden zoals verwacht. Controleer het volgende en tik daarna op <b>Opnieuw proberen</b>.",
                manual_prompt: "Handmatige meterinstelling",
                most_common: "(Meest gebruikte instelling)",
                negative: "NEE",
                phase_select_prompt: "Selecteer de gemeten fasen op basis van hoe de Envoy-S bedraad is: ",
                positive: "JA",
                power_exporting: "Exporteren",
                power_importing: "Importeren",
                prod_enable_desc1: "De productiemetingen liggen dicht bij nul, zoals verwacht.",
                prod_enable_desc2: "Tik op <strong>Productiemeter inschakelen</strong> om het instellen van de meter te voltooien.",
                prod_meter_enabled: "De productiemeter is ingeschakeld.",
                prod_su1_pv_on: {
                    counting: {
                        one: "Zorg ervoor dat het PV-circuit AAN staat en stroom aan het produceren is (de verbinding is opnieuw tot stand gebracht).",
                        other: "Zorg ervoor dat de PV-circuits AAN staan en stroom aan het produceren zijn (de verbinding is opnieuw tot stand gebracht).",
                    },
                },
                prod_su2_pv_off: "Schakel de PV-onderbrekers UIT en tik vervolgens op <b>Volgende</b>.",
                prod_ts_p4: {
                    desc: "Productielezingen zijn negatief. Controleer het volgende en klik daarna op Opnieuw proberen.",
                    ts1: {
                        counting: {
                            one: "Zorg ervoor dat het PV-circuit AAN staat en stroom aan het produceren is (de verbinding is opnieuw tot stand gebracht).",
                            other: "Zorg ervoor dat de PV-circuits AAN staan en stroom aan het produceren zijn (de verbinding is opnieuw tot stand gebracht).",
                        },
                    },
                    ts2: { counting: { one: "Zorg ervoor dat het Enphase-batterijcircuit UIT staat.", other: "Zorg ervoor dat de Enphase-batterijcircuits UIT staan." } },
                    ts3: {
                        counting: {
                            one: "Controleer of de pijl op de productie-CT in de richting van de energiestroom wijst, richting het laadcentrum.",
                            other: "Controleer of de pijl op de productie-CT's in de richting van de energiestroom wijst, richting het laadcentrum.",
                        },
                    },
                    ts5: {
                        counting: {
                            one: "Zorg ervoor dat de draden die door de productie-CT lopen alleen PV-generatie bevatten (en geen ladingen).",
                            other: "Zorg ervoor dat de draden die door de productie-CT's lopen alleen PV-generatie bevatten (en geen ladingen).",
                        },
                    },
                    ts6: "Zorg dat de stroomtransformatoren op de juiste fasen zijn geklemd met betrekking tot de contactklem van de Envoy.",
                },
                prod_ts_p5: {
                    desc: "De productiemetingen zijn hoger dan deze zouden moeten zijn. Controleer het volgende en tik daarna op <b>Opnieuw proberen</b>.",
                    ts2: {
                        counting: {
                            one: "Zorg ervoor dat de draden die door de productie-CT lopen alleen PV-generatie bevatten (en geen ladingen).",
                            other: "Zorg ervoor dat de draden die door de productie-CT's lopen alleen PV-generatie bevatten (en geen ladingen). ",
                        },
                    },
                },
                production_not_enabled: "De productiemeter is niet ingeschakeld",
                pv_off: { counting: { one: "Zorg ervoor dat het PV-circuit UIT staat.", other: "Zorg ervoor dat de PV-circuits UIT staan." } },
                pv_reminder: "<b>Denk aan het inschakelen van het PV-circuit.</b> Het duurt ongeveer 5 minuten voordat de micro-omvormers de stroomproductie rapporteren.",
                readings_dont_match1:
                    "We weten niet waarom de metingen niet overeenkomen met de elektriciteitsmeter van het huis. Tik op <b>Opnieuw proberen</b> om de configuratie-instelling te wijzigen voor de locatie van de verbruiks-CT's om te zien of dat helpt.",
                readings_dont_match2:
                    "Als dit niet helpt, kunt u de wizard afsluiten en in plaats daarvan de optie voor <b>Handmatige meterinstelling</b> gebruiken. We adviseren contact op te nemen met de Enphase-ondersteuning voor hulp voordat u verder gaat.",
                readings_dont_match_post: "Neem contact op met de Enphase-ondersteuning voor hulp en geef aan dat u de metercontrole hebt uitgevoerd maar dat de metingen nog steeds niet overeenkomen met die van de elektriciteitsmeter.",
                reset_timer: "Timer opnieuw instellen",
                setup_title: " %{meter_type}-meter instellen",
                start_timer: "Timer starten",
                stop_timer: "Timer stoppen",
                sw_off_batt: { counting: { one: "Zet het Enphase-batterijcircuit UIT.", other: "Zet de Enphase-batterijcircuits UIT." } },
                sw_off_pv: "Zet de PV-onderbrekers UIT.",
                total_cons_not_reduced: "Het totale verbruik is niet verlaagd door het PV-circuit in the schakelen. Controleer het volgende en tik daarna op <b>Opnieuw proberen</b>.",
                total_load: "Het totale verbruik van het huis",
                trouble_c6_desc1: "Als u alle instructies op het scherm hebt gevolgd en de verbruiksmetingen zijn nog steeds negatief, ",
                trouble_c8_desc1: "Als u alle instructies op het scherm hebt gevolgd en het totale verbruik nog steeds niet wordt verlaagd als het PV-circuit wordt ingeschakeld, ",
                trouble_desc2: "We adviseren contact op te nemen met de Enphase-ondersteuning via <a href='tel:%{dial_num}'> %{disp_num}</a> voor hulp voordat u verder gaat.",
                trouble_install_guide: "Raadpleeg de <strong>Envoy bemeterde installatiehandleiding</strong>",
                trouble_manual_prompt: " of u kunt de wizard afsluiten en in plaats daarvan de optie voor <strong>Handmatige meterinstelling</strong> gebruiken.",
                trouble_p0_5: {
                    desc: {
                        counting: {
                            one: "U hebt aangegeven dat alleen %{selected_phases} wordt gemeten, maar dat er stroom is op %{phaseStr}.",
                            other: "U hebt aangegeven dat alleen %{selected_phases} worden gemeten, maar dat er stroom is op %{phaseStr}.",
                        },
                    },
                    ts1: "Controleer de bedrading. Zijn de fasen juist bedraad?",
                    ts_no_resp: "Repareer de bedrading en tik op <b>Opnieuw proberen</b>.",
                    ts_yes_resp: "Wijzig de selectie van de bemeterde fasen zodat deze overeenkomen met de bedrading en tik vervolgens op <b>Opnieuw proberen</b>.",
                },
                trouble_p0_desc1: "Als u alle instructies op het scherm hebt gevolgd en er nog steeds spanning aanwezig is op een ongebruikte fase, ",
                trouble_p4_desc1: "Als u alle instructies op het scherm hebt gevolgd en de productiemetingen zijn nog steeds negatief, ",
                trouble_p5_desc1: "Als u alle instructies op het scherm hebt gevolgd en de productiemetingen zijn nog steeds hoger dan verwacht, ",
                trouble_p7_desc1: "Als u alle instructies op het scherm hebt gevolgd en het verbruik van het huis nog steeds niet zo hoog wordt als verwacht, ",
                trouble_prompt: "Hebt u problemen met het doorlopen van deze laatste stap?",
                unable_to_see_meter: "Als u geen toegang hebt tot <strong>VERMOGENS</strong>-uitlezingen op de elektriciteitsnetmeter of als u meet met een draagbare meter, klikt u op <strong>Doorgaan</strong>.",
            },
        },
        microinverters: {
            condition_clear: { description: "Hiermee wordt een opdracht verzonden om de status '%{condition_flag}' te wissen op deze micro-omvormer.", title: "Toestand wissen?" },
            manage_options: {
                active: "Actief (%{count})",
                active_count: { counting: { one: "Actief (%{count})", other: "Actief (%{count})", zero: "Actief (%{count})" } },
                delete_btn: "Verwijderen",
                deleted: "Verwijderd (%{count})",
                deleted_count: { counting: { one: "Verwijderd (%{count})", other: "Verwijderd (%{count})", zero: "Verwijderd (%{count})" } },
                restore_btn: "Herstellen",
            },
            nav: { all: "Alle", manage: "Beheren", status: "Status" },
            no_inverters: "Er zijn geen micro-omvormers.",
            no_inverters_search: 'Er zijn geen micro-omvormers gevonden die overeenkomen met "%{search_term}".',
            phase_labels: { "ph-a": "L1(A)", "ph-b": "L2(B)", "ph-c": "L3(C)", "ph-unk": "Geen fase geselecteerd", "ph-updating": "Bijwerken...", select_one: "E\u00e9n selecteren" },
            phase_prompt_label: "Selecteer een fase voor AC Battery %{serial_num}",
            scan_close: "Sluiten",
            scan_disabled: "De apparaatscan is momenteel niet beschikbaar vanwege een conflict met een scan die op dit moment op een andere Envoy wordt uitgevoerd.",
            scan_inhibited:
                "Als u meer micro-omvormers wilt toevoegen aan deze Envoy, moet u de Installatietoolkit gebruiken om deze op te geven of contact opnemen met de klantenondersteuning van Enphase om de apparaatscan opnieuw in te schakelen.",
            scan_inprogress: "Apparaatscan wordt uitgevoerd",
            scan_settings: {
                advanced_options: "Meer opties",
                device_total: "Apparaatdoel",
                device_total_description: "Als u een apparaatdoel invoert, stopt de Envoy met scannen wanneer het totale aantal gedetecteerde micro-omvormers dit nummer bereikt.",
                device_total_error_1: "Het totale aantal apparaten moet tussen %{already_detected} (het aantal al gedetecteerde apparaten) en %{device_total_max} liggen.",
                device_total_error_2: "Het totale aantal apparaten moet groter zijn dan %{already_detected} (het aantal al gedetecteerde apparaten).",
                hours: "uren",
                less_options: "Minder opties",
                minutes: "minuten",
                optional: "(optioneel)",
                priority_duration: "Prioriteitsduur",
                priority_duration_description: "Als u een prioriteitsduur invoert, wordt de apparaatscan de enige activiteit van de Envoy tijdens die periode.",
                priority_duration_error: "De prioriteitsduur mag niet langer zijn dan de scanduur.",
                scan_duration: "Scanduur",
                scan_duration_error: "De scanduur moet tussen de 1 minuut en 8 uur liggen.",
                scan_options: { min_120: "2 uur", min_15: "15 minuten", min_240: "4 uur", min_30: "30 minuten", min_480: "8 uur", min_60: "1 uur" },
                time_description: "hh:mm",
            },
            scan_start: "Scan starten",
            scan_stop: "Scan stoppen",
            scan_suspended: "De apparaatscan is momenteel niet beschikbaar vanwege een upgrade van de micro-omvormers.",
            status_options: { comm: "Communicatie (%{count})", comm_nocount: "Communicatie", power: "Elektriciteit (%{count})", power_nocount: "Elektriciteit", profile: "Profile (%{count})", profile_nocount: "Profiel" },
        },
        monitoring: {
            connected: "Verbonden met Enlighten",
            high_bandwidth: "Standaard",
            last_report: "Laatste rapport:",
            low_bandwidth: "Lage bandbreedte",
            more_info: "Meer informatie",
            no_report: "Nooit gerapporteerd",
            not_connected: "Niet verbonden met Enlighten",
            report_setting: "Rapporteerinstelling",
            report_setting_cellular_desc: "Deze Envoy heeft een mobiele modem van Enphase en rapporteert 4 keer per dag met een interval van 15 minuten gegevens aan Enlighten (lage bandbreedte).",
            report_setting_diagnostic: "Diagnostische modus aan: %{minutes} minuten resterend",
            report_setting_enable_diagnostic:
                "U kunt de diagnostische modus gedurende twee uur inschakelen. De Envoy rapporteert in de diagnostische modus tijdens daglicht gewoonlijk met een interval van 5 minuten elke 5 minuten gegevens aan Enlighten.",
            report_setting_high_desc:
                "Deze Envoy is ingesteld op standaardrapportage, waarmee tijdens daglicht gegevens met een interval van 5 minuten elke 5 minuten worden gerapporteerd aan Enlighten. U kunt overschakelen naar lage bandbreedte, waarmee gegevens vier keer per dag met een interval van 15 minuten worden gerapporteerd aan Enlighten.",
            report_setting_low_desc:
                "Deze Envoy is ingesteld op rapportage op lage bandbreedte, waarmee gegevens vier keer per dag met een interval van 15 minuten worden gerapporteerd aan Enlighten. U kunt overschakelen op normale rapportage, waarmee tijdens daglicht gegevens met een interval van 5 minuten elke 5 minuten worden gerapporteerd aan Enlighten.",
            report_setting_modal: {
                diagnostic_desc: "Bevestig dat de diagnostische modus gedurende twee uur moet worden ingeschakeld.",
                high_desc: "Overschakelen op standaardrapportage bevestigen.",
                low_desc: "Overschakelen op rapportage op lage bandbreedte bevestigen.",
                title: "Wijziging rapporteerinstelling",
            },
            report_setting_options: { diagnostic: "Diagnostische modus inschakelen", high: "Overschakelen op standaardrapportage", low: "Overschakelen op lage bandbreedte" },
            title: "Controleren",
        },
        more: {
            about: {
                cellular_ip: "Mobiel IP-adres",
                cellular_mac_address: "Mobiel Mac-adres",
                db_size: "Grootte van database",
                db_size_stats: "%{db_size} (%{percent}% vol)",
                ethernet_ip: "IP-adres van ethernet",
                ethernet_mac_address: "Mac-adres van ethernet",
                is_nonvoy: "Deze Envoy is geprogrammeerd voor het configureren van niet-gecontroleerde systemen.",
                part_number: "Onderdeelnummer",
                serial_number: "Serienummer",
                sw_build_date: "Datum softwareproductie",
                sw_version: "Softwareversie",
                timezone: "Huidige tijdzone",
                title: "Over deze Envoy",
                wifi_ip: "IP-adres van Wi-Fi",
                wifi_mac_address: "Mac-adres van Wi-Fi",
            },
            datetime: { date: "Datum", time: "Tijd", timezone: "Tijdzone", title: "Datum en tijd", update_timezone: "Tijdzone bijwerken" },
            events: { event_date_line: "%{date} (Storings-id %{event_id})", no_events: "Er zijn geen storingen.", title: "Storingen" },
            support_connection: {
                close: "Verbinding sluiten",
                description_close: "De beveiligde verbinding met Enphase-ondersteuning is geopend.",
                description_open: "Maak een beveiligde verbinding, zodat het ondersteuningspersoneel van Enphase het probleem met dit systeem op afstand kan oplossen.",
                open: "Verbinding openen",
                title: "Verbinding met Enphase-ondersteuning",
            },
            system: { title: "Systeem" },
        },
        network: {
            diagnostic_tools: {
                check_connectivity: "Netwerkverbinding controleren",
                check_network_route: "Netwerkroute controleren",
                gateway_ip: "Gateway-IP",
                ip_address: "IP-adres",
                mac_address: "Mac-adres",
                netmask: "Netmasker",
                network_connectivity: "Controle van netwerkverbinding",
                network_connectivity_desc: "Voer een aantal diagnostische basiscontroles voor het netwerk uit op deze Envoy.",
                network_route: "Netwerkroute controleren",
                network_route_desc: "Bekijk het pad van de Envoy naar het internet voor alle beschikbare netwerkinterfaces.",
                ping: "Pingen",
                ping_desc: "Voer een IP-adres of URL in om de verbinding van de Envoy naar uw router of andere netwerkhost te testen.",
                ping_ip: "Adres pingen",
                primary_dns: "Primaire DNS-server",
                results_title: "Resultaten",
                secondary_dns: "Secundaire DNS-server",
                timestamp: "Laatste controle",
                title: "Diagnostische hulpmiddelen",
            },
            network_configuration: { active_network: "Actief", title: "Netwerkconfiguratie", types: { cellular: "Mobiel", ethernet: "Ethernet", none: "Geen", wifi: "Wi-Fi" } },
            network_connectivity_check: {
                connectivity_enlighten: "Verbinding met Enlighten",
                connectivity_enphase: "Verbinding met Enphase",
                enlighten_dns_lookup: "DNS opzoeken voor Enlighten",
                enphase_dns_lookup: "DNS opzoeken voor Enphase",
                gateway_ping: "Gateway-ping",
                google_dns_lookup: "DNS opzoeken voor Google",
                google_ping: "Google-ping",
                primary_dns_ping: "Primaire DNS-ping",
                primary_interface: "Netwerk getest",
                result: { fail: "Mislukt", pass: "Goed" },
                secondary_dns_ping: "Secundaire DNS-ping",
                timestamp: "Laatste controle",
                title: "Resultaten",
            },
            network_route_check: {
                destination: "Bestemming",
                flags: "Waarschuwingen",
                gateway: "Gateway",
                genmask: "Genmasker",
                metric: "Meetwaarde",
                network: "Netwerk",
                ref: "Ref",
                results_title: "Resultaten",
                timestamp: "Laatste controle",
                use: "Gebruik",
            },
            title: "Netwerk",
        },
        not_available: "Niet beschikbaar",
        nsr: {
            line_status_heading: "Verbonden lijnen:",
            line_status_help_text:
                "<ul><li>Ten minste een van de Q-relaisverbindingen is niet aangesloten.</li><li>Verifieer dat de bedrading van het Q-relais correct is ge\u00efnstalleerd.</li><li>Druk op de testknop om het opnieuw te proberen.</li><li>Als het bedoeld is, kan het worden genegeerd.</li></ul>",
            line_status_help_title: "Hulp Q-relaisverbindingen",
            lines: "Lijn %{num}:",
            reason_strings: "Onbekende reden;Hardwarefout;Druk op de knop;Forceer commando van Envoy;Voltagefout AC-lijn 1;Voltagefout AC-lijn 2;AC-lijn 3 spanningsfout;AC-lijn 1 frequentiefout;Net-DC-fout;Laag voltage AC-lijn 1;Hoog voltage AC-lijn 1;AC-lijn 1 lage frequentie;AC-lijn 1 hoge frequentie;Laag voltage AC-lijn 2;Hoog voltage AC-lijn 2;AC-lijn 3 lage spanning;AC-lijn 3 hoge spanning;Net-DC laag;Net-DC hoog;ROCOF;AC-gemiddelde lijn 1;AC-gemiddelde lijn 2;AC-gemiddelde lijn 3".split(
                ";"
            ),
            relay_heading: "Relais:",
        },
        nsrs: {
            manage_options: {
                active: "Actief (%{count})",
                active_count: { counting: { one: "Actief (%{count})", other: "Actief (%{count})", zero: "Actief (%{count})" } },
                deleted: "Verwijderd (%{count})",
                deleted_count: { counting: { one: "Verwijderd (%{count})", other: "Verwijderd (%{count})", zero: "Verwijderd (%{count})" } },
            },
            nav: { all: "Alle", manage: "Beheren", status: "Status" },
            no_inverters: "Er zijn geen Q-relais.",
            no_inverters_search: 'Er zijn geen Q-relais gevonden die overeenkomen met "%{search_term}".',
            status_options: { comm_nocount: "Communicatie", power_nocount: "In bedrijf", profile_nocount: "Config" },
            title: "[NL] Relays Q",
        },
        overview: {
            ac_batteries: {
                communicating: "Communiceren",
                default_profile_set: "Door de fabriek ge\u00efnstalleerd netwerkprofiel",
                detected: "Gedetecteerd",
                factory_installed: "Door de fabriek ge\u00efnstalleerd",
                factory_installed_config: "Door de fabriek ge\u00efnstalleerde configuraties",
                not_set: "Niet ingesteld",
                producing_power: "In bedrijf",
                profile_set: "geconfigureerd",
                total: "AC-batterijen",
            },
            ac_batteries_counts: {
                communicating: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>communiceert</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>communiceert</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>communiceert</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>communiceert</span>",
                    },
                },
                detected: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Gedetecteerd</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>gedetecteerd</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>gedetecteerd</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>gedetecteerd</span>",
                    },
                },
                producing_power: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>In bedrijf</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>in werking</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>in werking</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>in werking</span>",
                    },
                },
                profile_set: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Geconfigureerd</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>geconfigureerd</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>geconfigureerd</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>geconfigureerd</span>",
                    },
                },
                total: {
                    counting: {
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>wisselstroombatterij</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>wisselstroombatterijen</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>wisselstroombatterijen</span>",
                    },
                },
            },
            ac_battery_state: {
                charging: "Opladen",
                discharging: "Ontladen",
                full: "vol",
                idle: "Inactief",
                soc_full: "%{operating_state} (Laadstatus %{percent}%)",
                soc_percent: "(Oplaadstatus %{percent}%)",
                soc_state: "%{operating_state}",
            },
            alerts: "Waarschuwingen",
            consumption: "Verbruiksmeter",
            consumption_meter_label: "Verbruik",
            current_consumption: "Huidig stroomverbruik",
            current_production: "Huidige stroomproductie",
            devices: { detected: "Gedetecteerd" },
            encharge_batteries: {
                communicating: "[NL] Communicating",
                default_profile_set: "[NL] Factory-Installed Grid Profile",
                detected: "[NL] Detected",
                factory_installed: "[NL] Factory-Installed",
                factory_installed_config: "[NL] Factory-Installed Configurations",
                not_set: "[NL] Not Set",
                producing_power: "[NL] Operating",
                profile_set: "[NL] Configured",
                total: "[NL] AC Batteries",
            },
            enpowers: { communicating: "[NL] Communicating", default_profile_set: "[NL] Factory-Installed Grid Profile", detected: "[NL] Detected", profile_set: "[NL] Profile Set", total: "[NL] Enpower Devices" },
            enpowers_summary: { connected: { false: "[NL] Not Connected to Enpower", true: "[NL] Connected to Enpower" }, grid_status: { false: "[NL] OFF", title: "[NL] Grid Status", true: "[NL] ON" }, title: "[NL] Enpower" },
            includes_storage_label: "(inclusief opslagactiviteit)",
            inverter_production: "Productie van micro-omvormer",
            inverters_update_status: { "in-progress": "Upgrade van micro-omvormer wordt uitgevoerd. Dit duurt gewoonlijk 15 tot 30 minuten." },
            ip_address: "IP-adres",
            latest_power: "Meest recente stroom",
            lifetime: "Levensduur",
            lifetime_energy: "Energie gedurende levensduur",
            meter_production: "Productiemeter",
            metering: "Meten",
            microinverter_counts: {
                communicating: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>communiceert</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>communiceren</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>communiceert</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>communiceren</span>",
                    },
                },
                detected: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Gedetecteerd</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>gedetecteerd</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>gedetecteerd</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>gedetecteerd</span>",
                    },
                },
                producing_power: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Produceert stroom</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>produceren stroom</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>produceren stroom</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>produceren stroom</span>",
                    },
                },
                profile_set: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Profiel ingesteld</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>profiel ingesteld</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>profiel ingesteld</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>profiel ingesteld</span>",
                    },
                },
                total: {
                    counting: {
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>micro-omvormer</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>micro-omvormers</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>micro-omvormers</span>",
                    },
                },
            },
            microinverters: {
                communicating: "Communiceren",
                default_profile_set: "Door de fabriek ge\u00efnstalleerd netwerkprofiel",
                detected: "Gedetecteerd",
                producing_power: "Stroom produceren",
                profile_set: "Profiel ingesteld",
                total: "Micro-omvormers",
            },
            net_power: "Nettovermogen",
            new_microinverter_counts: {
                communicating: {
                    counting_acb: { one: "Communiceren", other: "Communiceren", zero: "Communiceren" },
                    counting_encharge: { one: "[NL] Communicating", other: "[NL] Communicating", zero: "[NL] Communicating" },
                    counting_microinverters: { one: "Communiceren", other: "Communiceren", zero: "Communiceren" },
                    counting_nsr: { one: "Communiceren", other: "Communiceren", zero: "Communiceren" },
                },
                detected: {
                    counting_acb: { one: "Gedetecteerd", other: "Gedetecteerd", zero: "Gedetecteerd" },
                    counting_encharge: { one: "[NL] Detected", other: "[NL] Detected", zero: "[NL] Detected" },
                    counting_microinverters: { one: "Gedetecteerd", other: "Gedetecteerd", zero: "Gedetecteerd" },
                    counting_nsr: { one: "Gedetecteerd", other: "Gedetecteerd", zero: "Gedetecteerd" },
                },
                producing_power: {
                    counting_acb: { one: "In bedrijf", other: "In bedrijf", zero: "In bedrijf" },
                    counting_encharge: { one: "[NL] Operating", other: "[NL] Operating", zero: "[NL] Operating" },
                    counting_microinverters: { one: "Stroom produceren", other: "Stroom produceren", zero: "Stroom produceren" },
                    counting_nsr: { one: "In bedrijf", other: "In bedrijf", zero: "In bedrijf" },
                },
                profile_set: {
                    counting_acb: { one: "geconfigureerd", other: "geconfigureerd", zero: "geconfigureerd" },
                    counting_encharge: { one: "[NL] Configured", other: "[NL] Configured", zero: "[NL] Configured" },
                    counting_microinverters: { one: "Profiel ingesteld", other: "Profiel ingesteld", zero: "Profiel ingesteld" },
                    counting_nsr: { one: "geconfigureerd", other: "geconfigureerd", zero: "geconfigureerd" },
                },
                total: {
                    counting_acb: { one: "AC-batterij", other: "AC-batterijen", zero: "AC-batterijen" },
                    counting_encharge: { one: "[NL] Encharge Battery", other: "[NL] Encharge Batteries", zero: "[NL] Encharge Batteries" },
                    counting_microinverters: { one: "Micro-omvormer", other: "Micro-omvormers", zero: "Micro-omvormers" },
                    counting_nsr: { one: "Q-relais", other: "Q-relais", zero: "Q-relais" },
                },
            },
            nsr: {
                detected_total_count: "%{detected_count} van %{total_count}",
                profile_label: "Profiel",
                profile_not_set: "Niet geconfigureerd",
                profile_set: "geconfigureerd",
                relay_state_closed: "Gesloten",
                relay_state_label: "Status",
                relay_state_open: "Open",
                section_title: "Q-relais",
            },
            power_exporting: "Exporteren naar lichtnet",
            power_importing: "Importeren uit lichtnet",
            production: "Productie",
            production_meter_label: "Productie",
            profile: "Profiel",
            scan_modal: {
                description: "Er zijn geen micro-omvormers gedetecteerd. Wilt u een apparaatscan starten?",
                description_battery: "Er zijn geen batterijen gedetecteerd. Wilt u een apparaatscan starten?",
                description_both: "Er zijn geen micro-omvormers of batterijen gedetecteerd. Wilt u een apparaatscan starten?",
                description_nsr: "Er zijn geen Q-Relay gedetecteerd. Wilt u een apparaatscan starten?",
                scan_timeout_description:
                    "<p>Slechts %{detected_count} van %{target_count} micro-omvormers zijn gedetecteerd.</p><p> Wilt u de apparaatscan opnieuw starten om de resterende micro-omvormer(s) te detecteren of <a href='#' class='open-target-count'>wilt u het verwachte aantal micro-omvormers wijzigen</a>?</p>",
                scan_timeout_description_battery: "<p>Slechts %{detected_count} van %{target_count} batterijen is gedetecteerd.",
                scan_timeout_description_battery_second: {
                    one: "Wilt u de apparaatscan opnieuw starten om de resterende batterij te detecteren of <a href='#' class='open-target-count'>wilt u het verwachte aantal batterijen wijzigen</a>?</p>",
                    other: "Wilt u de apparaatscan opnieuw starten om de resterende batterijen te detecteren of <a href='#' class='open-target-count'>wilt u het verwachte aantal batterijen wijzigen</a>?</p>",
                },
                scan_timeout_description_both:
                    "<p>Slechts %{detected_count_micro} van %{target_count_micro} micro-omvormers en %{detected_count_battery} van %{target_count_battery} batterijen zijn gedetecteerd.</p><p> Wilt u de apparaatscan opnieuw starten om de resterende apparaten te detecteren of <a href='#' class='open-target-count'>wilt u het verwachte aantal apparaten wijzigen</a>?</p>",
                scan_timeout_description_micro: "<p>Slechts %{detected_count} van %{target_count} micro-omvormers zijn gedetecteerd.",
                scan_timeout_description_micro_second: {
                    one: "Wilt u de apparaatscan opnieuw starten om de resterende micro-omvormer te detecteren of <a href='#' class='open-target-count'>wilt u het verwachte aantal micro-omvormers wijzigen</a>?</p>",
                    other: "Wilt u de apparaatscan opnieuw starten om de resterende micro-omvormers te detecteren of <a href='#' class='open-target-count'>wilt u het verwachte aantal micro-omvormers wijzigen</a>?</p>",
                },
                scan_timeout_title: "Apparaatscan opnieuw starten?",
                title: "Apparaatscan starten?",
            },
            scan_state: { active: "Scan actief", inactive: "Scan niet actief", scan_inhibited: "Scan beperkt" },
            set_expected: { error: "De waarde moet een getal tussen de 1 en de 600 zijn.", label: "Voer het aantal micro-omvormers in waarvan u verwacht dat deze aan deze Envoy rapporteren.", prompt: "Aantal micro-omvormers" },
            set_expected_acb: { error: "De waarde moet een cijfer tussen 0 en 39 zijn.", label: "Voer het aantal batterijen in waarvan u verwacht dat deze aan de Envoy rapporteren.", prompt: "# AC-batterijen" },
            set_expected_nsr: { error: "De waarde moet een cijfer tussen 0 en 3 zijn.", label: "Voer het aantal Q-Relays in waarvan u verwacht dat deze aan de Envoy rapporteren.", prompt: "# Q-Relays" },
            software_version: "Softwareversie",
            stat_title: "Elektriciteit en energie",
            storage: "AC-batterij",
            tariff_rate_structure: "Tarief-/bedragstructuur",
        },
        pending: "(in behandeling...)",
        power: {
            charging: "Opladen",
            description: "Micro-omvormers produceren stroom zolang er voldoende zonlicht is en het elektriciteitsnet binnen de toegestane spannings- en frequentiebereiken (zoals aangegeven door lokale wetgeving) ligt.",
            discharging: "Ontladen",
            idle: "Inactief",
            last_report: "Laatste rapport:",
            not_operating: "Niet in bedrijf",
            not_producing: "Produceert niet",
            operating: "In bedrijf",
            producing: "Stroom produceren",
            title: "Micro-omvormers die stroom produceren",
        },
        profiles: {
            ac_batteries: {
                configuration_label: "Configuratie",
                false: "Nee",
                no_profile_description: "U moet de volgende informatie invullen om de batterijen te configureren voordat deze actief worden.",
                no_profile_warning: "Het netwerkprofiel dat u hier selecteert, wordt ook toegepast op de micro-omvormers die op dit systeem zijn ge\u00efnstalleerd.",
                profile_complete: "Configuratie voltooid",
                profile_incomplete: "Configuratie niet voltooid",
                profile_propagating: "Batterijen configureren",
                true: "Ja",
            },
            apply: "Netwerkprofiel toepassen",
            config_batteries: "Batterijen configureren",
            country_label: "Regelgevingsspecificatie voor het land",
            encharge_batteries: {
                configuration_label: "[NL] Configuration",
                no_profile_description: "[NL] You must provide the following information to configure the batteries before they will begin to operate.",
                no_profile_warning: "[NL] The grid profile you select here will also be applied to the Enpower, Microinverters, and AC Batteries installed with this system.",
                profile_complete: "[NL] Configuration Complete",
                profile_incomplete: "[NL] Configuration Incomplete",
                profile_propagating: "[NL] Configuring Batteries",
            },
            enpowers: {
                no_profile_description: "[NL] You must provide the following information to configure the enpower before it will begin to operate.",
                no_profile_warning: "[NL] The grid profile you select here will also be applied to the Microinverters, AC Batteries and Encharges installed with this system.",
                profile_complete: "[NL] Configuration Complete",
                profile_incomplete: "[NL] Configuration Incomplete",
                profile_propagating: "[NL] Configuring Enpower",
            },
            eu_no_profile_description: "U moet een locatiespecifiek netwerkprofiel selecteren voordat de micro-omvormers beginnen met het produceren van elektriciteit.",
            eu_no_profile_label: "Geen profiel",
            eu_no_profile_vogel_description: "U moet hieronder een locatiespecifiek netwerkprofiel selecteren.",
            microinverters: {
                configuration_label: "Configuratie",
                no_profile_warning: "Het netwerkprofiel dat u hier selecteert, wordt ook toegepast op de AC-batterijen die op dit systeem zijn ge\u00efnstalleerd.",
                profile_complete: "Doorgeven voltooid",
                profile_incomplete: "Doorgeven niet voltooid",
                profile_propagating: "Doorgeefprofiel",
            },
            na_no_profile_description: "De micro-omvormers gebruiken fabrieksge\u00efnstalleerde netwerkprofielinstellingen. U kunt hieronder een locatiespecifiek netwerkprofiel selecteren.",
            na_no_profile_label: "Fabrieksge\u00efnstalleerde instellingen",
            no_profile_warning: "Het netwerkprofiel dat u hier selecteert, wordt ook toegepast op de AC-batterijen die op dit systeem zijn ge\u00efnstalleerd.",
            no_profiles:
                "Er zijn geen profielen beschikbaar. U moet met deze Envoy verbinding maken met het internet en de Envoy selecteren in Enlighten, of Installer Toolkit gebruiken om een profielpakket te downloaden en uploaden naar deze Envoy.",
            no_profiles_info:
                "Als de installatie in een gebied plaatsvindt dat een locatiespecifiek netwerkprofielinstelling vereist, u moet met deze Envoy verbinding maken met het internet en de Envoy selecteren in Enlighten, of Installer Toolkit gebruiken om een profielpakket te downloaden en uploaden naar deze Envoy.",
            nsrs: {
                configuration_label: "Configuratie",
                no_profile_warning: "Het netwerkprofiel dat u hier selecteert, wordt ook toegepast op de AC-batterijen die op dit systeem zijn ge\u00efnstalleerd.",
                profile_complete: "Doorgeven voltooid",
                profile_incomplete: "Doorgeven niet voltooid",
                profile_propagating: "Doorgeefprofiel",
            },
            profile_complete: "Doorgeven voltooid",
            profile_incomplete: "Doorgeven niet voltooid",
            profile_label: "Netwerkprofiel",
            profile_propagating: "Doorgeefprofiel",
            title: "Netwerkprofiel",
            tpm_state: { 0: "In behandeling", 1: "Doorgeven", 2: "Profiel ingesteld", 3: "Niet instelbaar", 4: "Mislukt", 5: "Upgraden", 6: "ALT-V/F" },
        },
        public_nav: {
            change_password: "Wachtwoord wijzigen",
            copyright_html: "&copy;2008-%{current_year} Enphase Energy Inc. Alle rechten voorbehouden.",
            enphase: "Enphase Energy",
            installer_login: "Aanmeldgegevens installatieprogramma",
            language: "Taal",
            privacy: "Privacy",
            settings: "Instellingen",
            terms: "Voorwaarden",
        },
        select2: {
            format_matches: {
                counting: { one: "Er is \u00e9\u00e9n resultaat beschikbaar. Druk op Enter om dit resultaat te selecteren.", other: "Er zijn %{count} resultaten beschikbaar. Gebruik de pijltjes omhoog en omlaag om te navigeren." },
            },
            input_too_long: { counting: { one: "Verwijder %{count} teken", other: "Verwijder %{count} tekens" } },
            input_too_short: "Voer %{count} of meer tekens in",
            loading_more: "Meer resultaten laden...",
            no_matches: "Er zijn geen overeenkomsten gevonden voor %{term}",
            no_results: "Er zijn geen overeenkomsten gevonden",
            searching: "Zoeken...",
            selection_too_big: { counting: { one: "U kunt slechts %{count} item selecteren.", other: "U kunt slechts %{count} items selecteren." } },
        },
        serial_number: "Serienummer",
        system: {
            power_control: {
                disabled_desc: "Stroomproductie uitgeschakeld",
                enabled_desc: "Stroomproductie ingeschakeld",
                modal: {
                    desc_set_off: "Dit zal de vermogensproductie van het systeem <strong>uitschakelen</strong>.",
                    desc_set_on: "Dit zal de vermogensproductie van het systeem <strong>inschakelen</strong>.",
                    title: "Beheer systeemvermogen",
                    verify: "Weet u zeker dat dit is wat u wilt?",
                },
            },
        },
        tariff: {
            add_peak: "%{num} piekuren toevoegen",
            add_tier: "Laag toevoegen %{num}",
            base_rate_label: "Basistarief",
            baseline: "Basislijn",
            charge_at_night: "Batterijen 's nachts uit net opladen",
            chg_at_night_desc: "Schakel deze optie in om de accu's 's nachts via het lichtnet op te laden.",
            config_details: "Configuratiedetails",
            day_names: ["Weekdag", "Weekend"],
            greater_than: "Groter dan",
            hour_connector: "naar",
            month_connector: "tot-en-met",
            not_set: "Niet ingesteld",
            off_peak_label: "Dalurentarief",
            peak_hours_label: "%{num} piekuren",
            peak_label: "Piek %{num}",
            peak_rate_label: "%{num} piekurentarief",
            peak_start_time: "Begintijd piekuren:",
            per_day: "per dag",
            per_month: "per maand",
            percent_of_baseline: "% van basislijn",
            remove: "Verwijderen",
            seasonal_rate_desc: "Schakel deze optie in als het tarief verschilt per seizoen.",
            seasonal_select_label: "Tarief verschilt per seizoen",
            select_type: "Type selecteren",
            single_rate: "Enkelvoudig tarief",
            summer_rate_label: "Zomertarieven",
            tariff_rate_title: "Tarief-/bedragstructuur",
            tariff_type_warning: "Voor een gebruiksduurtarief/tariefstructuur moet u tenminste \u00e9\u00e9n piekuurtatief invoeren. Als er geen piekuurtarief is, moet u een enkelvoudig tarief toevoegen in plaats van gebruiksduur.",
            tier: "Laag %{num}",
            tiered: "Gestaffeld tarief",
            time_of_use: "Gebruikstijd",
            unit_label: "kWh",
            up_to: "Tot max.",
            weekday_add_peak: "%{num} piekuren weekdagen toevoegen",
            weekday_base_rate_label: "Basistarief weekdagen",
            weekday_off_peak_rate_label: "Weekdagentarief buiten piekuren",
            weekday_peak_hours_label: "%{num} piekuren weekdagen",
            weekday_peak_rate_label: "%{num} piekurentarief weekdagen",
            weekdays_label: "Weekdag",
            weekdays_rate_label: "Weekdag",
            weekend_add_peak: "%{num} piekuren weekdagen toevoegen",
            weekend_base_rate_label: "Basistarief weekeinde",
            weekend_label: "Weekend",
            weekend_off_peak_rate_label: "Weekeindetarief buiten piekuren",
            weekend_peak_hours_label: "%{num} piekuren weekeinde",
            weekend_peak_rate_label: "%{num} piekurentarief weekeinde",
            weekend_rate_desc: "Schakel deze optie in als het tarief verschilt tussen werkdagen en het weekend.",
            weekend_select_label: "Tarief is verschillend voor weekdagen en het weekeinde",
            winter_months_desc: "Selecteer hierboven de zomermaanden om de winterperiode in te stellen.",
            winter_rate_label: "Wintertarieven",
            zero_not_allowed: "Nul is geen geldige waarde",
        },
        wifi: {
            ap_mode_config: {
                confirm_switch_modal: { description: "Dit kan de communicatie met de Envoy onderbreken, zodat u opnieuw verbinding moet maken.", title_false: "AP-modus uitschakelen?", title_true: "AP-modus inschakelen?" },
                description_disabled: "Schakel de AP-modus in om deze Envoy toe te staan als een draadloos toegangspunt (AP) te werken. Hierdoor kunnen draadloze apparaten in de nabijheid verbinding maken met de Envoy.",
                description_enabled: "Deze Envoy werkt momenteel als een draadloos toegangspunt (AP, Access Point).",
                disable: "AP-modus uitschakelen",
                enable: "AP-modus inschakelen",
                time_remaining: { one: "Resterende tijd: %{count} uur %{minutes} minuten", other: "Resterende tijd: %{count} uur %{minutes} minuten", zero: "Resterende tijd: %{count} uur %{minutes} minuten" },
                title_disabled: "AP-modus uitgeschakeld",
                title_enabled: "AP-modus ingeschakeld",
            },
            available_networks: "Beschikbare netwerken",
            connect: {
                confirm_connect: "Netwerk bevestigen",
                connect_to_site: "Verbinding maken met %{site_name}?",
                connect_warning: "Opmerking: Dit kan de communicatie met de Envoy onderbreken, zodat u opnieuw verbinding moet maken.",
                connection_failure_explanation: "Kan geen verbinding maken met netwerk %{site_name}.",
                wait_join: "Een ogenblik geduld terwijl de Envoy verbinding maakt met %{site_name}...",
            },
            connect_incomplete: { description: "Het duurt langer dan verwacht om de verbinding met %{site_name} te bevestigen. Als de verbinding met het netwerk niet gelukt is, kunt u het opnieuw proberen.", title: "Onze excuses." },
            connect_success: {
                description:
                    "<p>De Envoy is verbonden met %{site_name}.</p><p><a href='#' class='open-overview'>Terug naar Overzicht.</a></p><p>Opmerking: het kan een minuut duren voordat de verbindingsstatus van Enlighten wordt bijgewerkt.</p>",
                title: "Verbonden",
            },
            connection_lost: "De verbinding tussen dit apparaat en de Envoy is verbroken.",
            connection_status: { attempting_to_connect: "Verbinding maken...", connecting: "Verbinding maken...", connection_lost: "Verbinding verbroken", failed: "Verbinding mislukt", not_connected: "Niet verbonden" },
            country_config: {
                description: "Selecteer uw land (ISO 3166-1 alpha-2 code) om de signaalsterkte van het Wi-Fi te optimaliseren in overeenstemming met de nationale regelgeving.",
                optional: "(optioneel)",
                select_prompt: "Land selecteren",
                title: "Land",
                update: "Land bijwerken",
            },
            current_connection: "Verbonden met <span class='network_name'>%{network_name}</span>",
            enter_password: "Voer het wachtwoord voor %{site_name} in.",
            forget: {
                forget_network_header: "Wi-Fi-netwerk '%{network_name}' vergeten?",
                forget_warning: "Opmerking: Dit kan de communicatie met de Envoy onderbreken, zodat u opnieuw verbinding moet maken.",
                ok_to_forget: "Deze Envoy gebruikt dit netwerk niet langer om verbinding te maken met Enlighten.",
                wait_forget: "Een ogenblik geduld terwijl de Envoy het netwerk vergeet...",
            },
            forget_failed: { description: "Poging om het Wi-Fi-netwerk te vergeten, is mislukt. Als dit zich blijft voordoen, kunt u contact opnemen met de klantenondersteuning.", title: "Onze excuses." },
            forget_incomplete: {
                description:
                    "Het bevestigen van het vergeten van het Wi-Fi-netwerk duurt langer dan verwacht. Hierdoor is het onwaarschijnlijk dat uw Envoy nog steeds kan communiceren met deze toepassing. Controleer de netwerkinstellingen op uw apparaat en maak opnieuw verbinding met de Envoy.",
                title: "Onze excuses.",
            },
            gateway_ip: "Gateway-IP: ",
            ip_address: "IP-adres: ",
            join_another_network: { button: "Een ander netwerk selecteren", title: "Een ander netwerk selecteren" },
            join_network: { button: "Netwerken bekijken", title: "Netwerk selecteren" },
            network_changed_explanation:
                "De netwerkverbinding op uw apparaat is gewijzigd. Hierdoor is het onwaarschijnlijk dat uw Envoy nog altijd kan communiceren met deze toepassing. Controleer de netwerkinstellingen op uw apparaat en maak opnieuw verbinding met de Envoy.",
            network_changed_title: "Netwerkverbinding gewijzigd",
            no_networks_found: "Geen netwerken gevonden",
            not_configured_prompt: "Selecteer een draadloos netwerk voor deze Envoy dat gebruikt moet worden om verbinding te maken met Enlighten.",
            other_network: {
                confirm_switch_modal: { description: "Dit kan de communicatie met de Envoy onderbreken, zodat u opnieuw verbinding moet maken.", title: "Verbinding maken met ander netwerk?" },
                connect: "Verbinden",
                description: "Maak verbinding met een toegangspunt dat niet is geconfigureerd om de ESSID uit te zenden.",
                name: "Naam (ESSID)",
                password: "Wachtwoord",
                security: "Beveiliging",
                security_mode: { None: "Geen", WEP: "WEP", "WPA-PSK": "WPA-persoonlijk", "WPA2-PSK": "WPA2-persoonlijk" },
                title: "Ander netwerk",
                wpa_algorithm: "WPA-algoritme",
                wpa_algorithm_type: { CCMP: "CCMP", None: "Geen", TKIP: "TKIP", "TKIP+CCMP": "TKIP + CCMP" },
            },
            page_title: "Wi-Fi-configuratie",
            password_required: "Wachtwoord vereist",
            please_wait: "Een ogenblik geduld...",
            title: "Wi-Fi-netwerk",
            unsupported_site: "Niet-ondersteund netwerk",
            unsupported_site_explanation: "Dit netwerk gebruikt een beveiligingsmethode die niet wordt ondersteund door de Envoy.",
            wifi: "Wi-Fi",
            wifi_hardware_missing: "Wi-Fi-hardware niet gevonden",
            wifi_waiting_note: "Dit proces kan tot 3 minuten duren en u moet mogelijk opnieuw verbinding maken met de Envoy wanneer dit voltooid is.",
        },
        wireless_connection: {
            connected: "[NL] Connected",
            last_report: "[NL] Last Report:",
            not_connected: "[NL] Not Connected",
            signal_strength: "[NL] Signal Strength:",
            subghz: "[NL] Sub GHz",
            title: "[NL] Wireless Connection Links",
            zigbee_2_4: "[NL] 2.4 GHz",
        },
    },
    lwui: {
        admin: {
            cross_domain_traffic: { status_msgs: { cross_domain_traffic: "Domeinoverschrijdend verkeer gedetecteerd", no_cross_domain_traffic: "Geen domeinoverschrijdend verkeer gerapporteerd", updated: "Bijgewerkt" } },
            network_connectivity: {
                error_msgs: {
                    bad_device_ip: "Slecht IP-adres en/of netwerkmasker van apparaat.",
                    bad_gateway_address: "Slecht IP-adres van gateway.",
                    gateway_subnet: "IP-adres van gateway niet binnen subnet %{subnet}",
                    invalid_primary_dns: "Adres van primaire DNS is geen geldig IP-adres.",
                    invalid_secondary_dns: "Adres van secundaire DNS is geen geldig IP-adres.",
                },
            },
            security_admin: {
                status_msg: {
                    new_confirm_password_mismatch: "Het nieuwe wachtwoord en het wachtwoord ter bevestiging komen niet overeen",
                    old_password_mismatch: "Oud wachtwoord niet juist",
                    password_file_missing: "Bestand/bestanden voor beheerderswachtwoord ontbreekt/ontbreken",
                    password_update_failure: "Wachtwoord bijwerken mislukt",
                    password_update_failure_error: "Fout: wachtwoord wijzigen mislukt",
                    password_update_successful: "Wachtwoord bijgewerkt",
                },
            },
            wireless_connectivity: {
                advanced_settings: {
                    button_apply: "Toepassen",
                    regulatory_domain: "Landcode (ISO 3166-1 Alpha-2)",
                    regulatory_legend: "Selecteer uw land uit deze lijst.  Hiermee worden de toegestane radiofrequenties en transmissiesterkte opgegeven in overeenstemming met uw nationale regelgeving.",
                },
                ap_mode: { active: "actief", inactive: "inactief", name: "AP-naam:", start: "AP-modus starten", status: "Status van AP-modus:", stop: "AP-modus stoppen", timeout: "minuten tot time-out van AP:" },
                busy_joining: "Proberen verbinding te maken met het netwerk",
                busy_scanning: "Scannen op Wi-Fi-netwerken",
                busy_testing: "Testverbinding",
                connection_test: { failed: "Verbindingstest mislukt.  Controleer uw instellingen.", successful: "De verbindingstest is gelukt.  U kunt nu verbinding maken met het netwerk." },
                current_settings: {
                    dhcp_waiting: "DHCP-adres opvragen bij Wi-Fi-netwerk",
                    forget_network: "Dit netwerk vergeten",
                    label_gateway_ip: "Gateway-IP",
                    link_status: "Status",
                    no_config: "Er is geen Wi-Fi-verbinding geconfigureerd",
                    no_device: "Geen compatibel Wi-Fi-apparaat gedetecteerd",
                    status_connected: "Verbonden",
                    status_connecting: "Verbinding maken",
                    status_stopped: "Wi-Fi gestopt",
                    unavailable: "niet beschikbaar",
                    verified_config: "Gecontroleerd Wi-Fi-netwerk",
                },
                device_information: {
                    device: "Apparaat",
                    driver_name: "Naam stuurprogramma",
                    hw_version: "Hardwareversie",
                    mac_address: "MAC-adres",
                    manufacturer: "Fabrikant",
                    model: "Model",
                    usb_slot_num: "USB poortnummer",
                    usb_spec_version: "USB-specificatieversie",
                    vendor: "Verkoper",
                },
                forget_msg: "Deze actie verwijdert de huidige draadloze configuratie en verbreekt de verbinding.  Als u draadloos bent verbonden, wordt uw verbinding met de Envoy verbroken.",
                legend_advanced_settings: "Geavanceerde instellingen",
                legend_ap_mode: "AP-modus van Envoy",
                legend_current_settings: "Huidige Wi-Fi-instellingen",
                legend_device_information: "Apparaatgegevens",
                legend_manual_configuration: "Handmatige configuratie",
                legend_site_survey: "Beschikbare Wi-Fi-netwerken",
                manual_configuration: {
                    algorithm: "WPA-algoritme",
                    button_clear: "Formulier wissen",
                    button_connect: "Verbinding maken met netwerk",
                    button_test: "Verbinding testen",
                    channel: "Draadloos kanaal",
                    essid_length: "De ESSID moet bestaan uit 1 tot 32 tekens",
                    info_msg: "De volgende instellingen zijn alleen noodzakelijk om verbinding te maken met een toegangspunt (AP) dat niet is geconfigureerd om de ESSID uit te zenden.",
                    mhz: "MHz",
                    network_name: "Naam draadloos netwerk(ESSID)",
                    password: "Wachtwoord/PSK",
                    password_unneeded: "Voor een open systeem is geen wachtwoord nodig",
                    password_wep: "WEP-sleutels moeten bestaan uit 10, 26 of 58 hexadecimale cijfers",
                    password_wep_chars: "WEP-sleutels kunnen alleen bestaan uit nummers en de letters A tot en met F",
                    password_wpa: "WPA-/WPA2-PSK-wachtwoorden moet bestaan uit ten minste 8 en maximaal 63 tekens",
                    security_mode: "Draadloze beveiligingsmodus",
                },
                site_survey: { button_rescan: "Opnieuw scannen", info_msg: "Selecteer een netwerk uit de lijst", none_found: "Geen netwerken gevonden" },
                test_msg: "De Wi-Fi-verbinding wordt nu getest om te bevestigen dat de instellingen geldig zijn.  De huidige verbinding met de Envoy wordt tijdelijk verbroken tijdens de verbindingstest.",
            },
        },
        home: {
            event_tbl_col_hdr: { date: "Datum", details: "Details", device: "Apparaat", event: "Storing", eventId: "Storings-id" },
            warnings: {
                acb_critical_temp: "Er is een verhoogde interne temperatuur gedetecteerd in \u00e9\u00e9n of meerdere wisselstroombatterijen. Controleer de installatie- en gebruikershandleiding voor instructie.",
                acb_needs_meters: "Een Envoy-S met metingen is vereist voor het voltooien van de ingebruikname van het systeem. AC-batterijen die metingen vereisen, zijn gedetecteerd en deze Envoy-S is niet voorzien van metingen.",
                acdisco_active: "De AC-verbinding wordt verbroken. De Envoy kan niet communiceren met de micro-omvormers.",
                acdisco_fail: "Verbinding met AC verbreken mislukt. Controleer de relais voor het verbreken van de AC-verbinding.",
                both_meter_enabled: "Zowel de productie- als de verbruiksmeters moeten zijn ingeschakeld om het gehele systeem in bedrijf te kunnen nemen.",
                check_date_warn_msg:
                    "De systeemtijd is ongeldig.  De Envoy kan niet communiceren met de micro-omvormers totdat deze storing is verholpen.  Als de Envoy niet is geconfigureerd om NTP te gebruiken of geen contact kan maken met de geconfigureerde NTP-servers, moet dit handmatig worden gecorrigeerd via de besturingselementen voor <a href='/admin/lib/date_time_display'> Beheer van datum en tijd.</a>",
                cross_domain_traffic: "Er wordt communicatie van een of meerdere andere Envoys gedetecteerd.",
                date_invalid: "De systeemtijd is ongeldig. Maak verbinding tussen de Envoy en internet zodat de tijd juist kan worden ingesteld.",
                db_warn_msg: "De Envoy kan geen gegevens verzenden naar Enlighten en de lokale opslagruimte is bijna vol. Maak verbinding tussen de Envoy en internet om gegevensverlies te vermijden.",
                eim_consumption_check_wiring: "De stroomverbruiksmeter is niet goed aangesloten. Controleer de bedrading.",
                eim_production_check_wiring: "De stroomproductiemeter is niet goed aangesloten. Controleer de bedrading.",
                envoy_needs_meters: "Een Envoy-S met metingen is vereist voor het voltooien van de ingebruikname van het systeem. Een netwerkprofiel dat metingen vereist, is geselecteerd en deze Envoy-S is niet voorzien van metingen.",
                legend: "Waarschuwing",
                no_enlighten_report: "Het systeem heeft nooit gerapporteerd aan Enlighten. Maak verbinding tussen de Envoy en internet om verbinding te maken met Enlighten.",
                no_phase_assignment: "AC-accu's moeten aan fasen worden toegewezen om de ingebruikname van het systeem te voltooien.",
                pcu_limit_warn_msg: "Het aantal gedetecteerde micro-omvormers overschrijdt de huidige monitoringconfiguratie van de Envoy. Neem contact op met de klantenondersteuning van Enphase Energy.",
                pcu_limit_warn_msg2: "Het aantal gedetecteerde micro-omvormers overschrijdt de standaard monitoringconfiguratie van de Envoy.  Er is een internetverbinding met de Envoy vereist om de monitoringconfiguratie in te stellen.",
                pel_profile_requires_meters: "De productie- en verbruiksmeters moeten worden geconfigureerd om het beperken van stroomexport te ondersteunen.",
                phase_assoc_failed: "Fasedetectie mislukt. Controleer de installatie- en gebruikershandleiding voor instructie.",
                pim_profile_requires_meters: "Meten van productie en consumptie van meerdere fases moet zijn ingeschakeld om beheer van fase-onbalans en verlies van fasedetectie te ondersteunen.",
            },
        },
    },
    number: {
        currency: { format: { delimiter: ",", format: "%u %n", precision: 2, separator: ".", significant: !1, strip_insignificant_zeros: !1, unit: "$" } },
        format: { delimiter: ",", precision: 3, separator: ".", significant: !1, strip_insignificant_zeros: !1 },
        human: {
            decimal_units: { format: "%n %u", units: { billion: "Billion", million: "Million", quadrillion: "Quadrillion", thousand: "Thousand", trillion: "Trillion", unit: "" } },
            format: { delimiter: "", precision: 3, significant: !0, strip_insignificant_zeros: !0 },
            storage_units: { format: "%n %u", units: { byte: { one: "Byte", other: "Bytes" }, gb: "GB", kb: "KB", mb: "MB", tb: "TB" } },
        },
        percentage: { format: { delimiter: "" } },
        precision: { format: { delimiter: "" } },
    },
    scripts: { data: { verify_internet_connection_message: "Uw systeem heeft nooit gerapporteerd aan Enlighten. Controleer de internetverbinding." } },
    time: {
        am: "AM",
        formats: {
            default: "%d/%m/%Y %I :%M %p",
            default_date_time_no_pad: "%d/%m/%Y %-I:%M %p",
            hour_meridian: "%-I %p",
            long: "%B %d, %Y %H:%M",
            noday_nozone_datetime_secs_ui: "%d %b, %Y %-I:%M:%S %p",
            noday_nozone_datetime_ui: "%d %b, %Y %-I:%M %p",
            nozone_datetime: "%a %d %b %Y %I:%M %p",
            short: "%d %b %H:%M",
            short_date: "%d/%m/%Y",
            time_only: "%H:%M",
        },
        pm: "PM",
    },
    units: {
        amps: "A",
        bool: "Booleaans",
        degrees: "graden",
        hertz: "Hz",
        hertz_per_sec: "Hz/s",
        lagging: "Achterblijvend",
        milliseconds: "ms",
        millivolts: "mV",
        none: "",
        percent: "%",
        percent_per_hertz: "%/Hz",
        percent_per_min: "%/min",
        seconds: "s",
        volts: "V",
    },
};
I18n.translations["en-US"] = {
    date: {
        abbr_day_names: "Sun Mon Tue Wed Thu Fri Sat".split(" "),
        abbr_month_names: [null, "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        day_names: "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),
        formats: { default: "%Y-%m-%d", long: "%B %e, %Y", only_day: "%e", short: "%e %b" },
        month_names: [null, "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        order: ["year", "month", "day"],
    },
    envoy: {
        cond_flags: {
            acb_ctrl: {
                bmudatabounds: "BMU Data Bounds Error",
                bmuhardwareerror: "BMU Hardware Error",
                bmuimageerror: "BMU Image Error",
                bmumaxcurrentwarning: "BMU Max Current Warning",
                bmusenseerror: "BMU Sense Error",
                cellmaxtemperror: "Cell Max Temperature Error",
                cellmaxtempwarning: "Cell Max Temperature Warning",
                cellmaxvoltageerror: "Cell Max Voltage Error",
                cellmaxvoltagewarning: "Cell Max Voltage Warning",
                cellmintemperror: "Cell Min Temperature Error",
                cellmintempwarning: "Cell Min Temperature Warning",
                cellminvoltageerror: "Cell Min Voltage Error",
                cellminvoltagewarning: "Cell Min Voltage Warning",
                cibcanerror: "CIB CAN Error",
                cibimageerror: "CIB Image Error",
                cibspierror: "CIB SPI Error",
            },
            nsrb_ctrl: {
                acfreqhigh: "AC Frequency High",
                acfreqlow: "AC Frequency Low",
                acfrequencyoor: "AC Frequency Out Of Range",
                acvoltageavgline1: "AC Voltage Avg Out Of Range - Phase 1",
                acvoltageavgline2: "AC Voltage Avg Out Of Range - Phase 2",
                acvoltageavgline3: "AC Voltage Avg Out Of Range - Phase 3",
                acvoltagehighline1: "AC Voltage High - Phase 1",
                acvoltagehighline2: "AC Voltage Out Of Range - Phase 2",
                acvoltagehighline3: "AC Voltage High - Phase 3",
                acvoltagelowline1: "AC Voltage Low - Phase 1",
                acvoltagelowline2: "AC Voltage Out Of Range - Phase 2",
                acvoltagelowline3: "AC Voltage Low - Phase 3",
                acvoltageoorline1: "AC Voltage Out Of Range - Phase 1",
                acvoltageoorline2: "AC Voltage Out Of Range - Phase 2",
                acvoltageoorline3: "AC Voltage Out Of Range - Phase 3",
                buttonpress: "Button Pressed",
                dcgriderror: "DC Grid Current Error",
                dcgridhigh: "DC Grid Current High",
                dcgridlow: "DC Grid Current Low",
                relayforced: "Relay Forced",
                relayopen: "Relay Open",
                rocof: "Rate of Change of Frequency Error",
            },
            obs_strs: {
                discovering: "Discovering",
                failure: "Failure to report",
                flasherror: "Flash Error",
                notmonitored: "Not Monitored",
                ok: "Normal",
                plmerror: "PLM Error",
                secmodeenterfailure: "Secure mode enter failure",
                secmodeexitfailure: "Secure mode exit failure",
                sleeping: "Sleep Mode On",
                verifing: "Verifying Device",
            },
            pcu_chan: {
                acMonitorError: "AC Monitor Error",
                acfrequencyhigh: "AC Frequency High",
                acfrequencylow: "AC Frequency Low",
                acfrequencyoor: "AC Frequency Out Of Range",
                acvoltage_avg_hi: "AC Voltage Average High",
                acvoltagehigh: "AC Voltage High",
                acvoltagelow: "AC Voltage Low",
                acvoltageoor: "AC Voltage Out Of Range",
                acvoltageoosp1: "AC Voltage Out Of Range - Phase 1",
                acvoltageoosp2: "AC Voltage Out Of Range - Phase 2",
                acvoltageoosp3: "AC Voltage Out Of Range - Phase 3",
                agfpowerlimiting: "AGF Power Limiting",
                dcresistancelow: "DC Resistance Low",
                dcresistancelowpoweroff: "DC Resistance Low - Power Off",
                dcvoltagetoohigh: "DC Voltage Too High",
                dcvoltagetoolow: "DC Voltage Too Low",
                dfdt: "AC Frequency Changing too Fast",
                gfitripped: "GFI Tripped",
                gridgone: "Grid Gone",
                gridinstability: "Grid Instability",
                gridoffsethi: "Grid Offset Hi",
                gridoffsetlow: "Grid Offset Low",
                hardwareError: "Hardware Error",
                hardwareWarning: "Hardware Warning",
                highskiprate: "High Skip Rate",
                invalidinterval: "Invalid Interval",
                pwrgenoffbycmd: "Power generation off by command",
                skippedcycles: "Skipped Cycles",
                vreferror: "Voltage Ref Error",
            },
            pcu_ctrl: {
                alertactive: "Alert Active",
                altpwrgenmode: "Alternate Power Generation Mode",
                altvfsettings: "Alternate Voltage and Frequency Settings",
                badflashimage: "Bad Flash Image",
                bricked: "No Grid Profile",
                commandedreset: "Commanded Reset",
                criticaltemperature: "Critical Temperature",
                "dc-pwr-low": "DC Power Too Low",
                iuplinkproblem: "IUP Link Problem",
                manutestmode: "In Manu Test Mode",
                nsync: "Grid Perturbation Unsynchronized",
                overtemperature: "Over Temperature",
                poweronreset: "Power On Reset",
                pwrgenoffbycmd: "Power generation off by command",
                runningonac: "Running on AC",
                "sleep-mode": "Sleep Mode On",
                tpmtest: "Transient Grid Profile",
                unexpectedreset: "Unexpected Reset",
                watchdogreset: "Watchdog Reset",
            },
            rgm_chan: { check_meter: "Meter Error", power_quality: "Poor Power Quality" },
        },
        global: {
            cleared: "Clear",
            copyright_notice: "2007-2014, [e] Enphase Energy, Inc. All rights reserved.",
            copyright_notice_01: "[e] Enphase Energy, Inc. All rights reserved.",
            cs_phone_number: "XXX-XXX-XXXX",
            disable: "Disable",
            disabled: "Disabled",
            enable: "Enable",
            enabled: "Enabled",
            enlighten_token_link: "Get the token here",
            false: "False",
            none: "None",
            notapplicable: "n/a",
            ok: "OK",
            page_not_found_msg1: "Page Not Found",
            page_not_found_msg2: "The page you tried to view does not exist",
            page_not_found_msg3: 'Try the <a href="/">home</a> page',
            serialnumber: "Serial Number",
            set: "Set",
            too_many_installer_sessions_msg1: "Too many installer sessions active",
            too_many_installer_sessions_msg2: "Consider closing other installer session windows",
            too_many_installer_sessions_msg3: "Too many requests active for this resource, please retry in a couple minutes",
            true: "True",
            unknown: "Unknown",
        },
        paging: {
            all: "All",
            clearchoices: "Reset Table",
            info: "Showing _START_ to _END_ of _TOTAL_ entries",
            infoempty: "Showing 0 to 0 of 0 entries",
            infofiltered: "(filtered from _MAX_ total entries)",
            lengthmenu: "Show _MENU_ entries",
            processing: "Processing...",
            search: "Search:",
            zerorecords: "No matching records found",
        },
    },
    envoy_backbone: {
        ac_batteries: {
            manage_options: {
                active: "Active (%{count})",
                active_count: { counting: { one: "Active (%{count})", other: "Active (%{count})", zero: "Active (%{count})" } },
                deleted: "Deleted (%{count})",
                deleted_count: { counting: { one: "Deleted (%{count})", other: "Deleted (%{count})", zero: "Deleted (%{count})" } },
            },
            max_temp: "Max Temp: ",
            nav: { all: "All", manage: "Manage", status: "Status" },
            no_inverters: "There are no batteries.",
            no_inverters_search: 'No AC Batteries were found matching "%{search_term}".',
            sleep_mode: {
                enable_failed: "The attempt to put the selected batteries into sleep mode failed. Please try again in a few minutes. If this problem continues, contact customer support.",
                prompt_to_cancel: { desc: "A battery must be in sleep mode before it can be safely disconnected.</br></br>Are you sure you want to stop the battery from going into sleep mode?" },
                prompt_to_sleep_modal: {
                    desc: "Batteries must be in sleep mode before they can be safely disconnected.</br></br><b>Note:</b> Batteries will charge or discharge to %{min}-%{max}% state of charge before entering sleep mode.",
                    target_soc_label: "Target State of Charge",
                    target_soc_link_text: "Change target state of charge",
                    warning: "Warning: Once a battery is put into sleep mode it can only be taken out of sleep mode by a professional installer.",
                },
                prompt_to_wake: "A battery must be in sleep mode before it can be safely disconnected.</br></br>Are you sure you want to turn sleep mode off?",
                sleep_btn: "Sleep",
            },
            state_of_charge: "State of Charge: ",
            status_options: {
                cancel_sleep_label: "Stop",
                comm_nocount: "Comm",
                power_nocount: "Operating",
                preparing_to_sleep_text: "Entering Sleep Mode",
                profile_nocount: "Config",
                wake_sleep_label: "Turn Off",
                waking_label: "Exiting Sleep Mode",
            },
        },
        app_title: "Envoy Mobile",
        authentication: {
            authentication_with_authms: "Login with Enphase",
            bad_jwt: "Bad token",
            insert_token_headline: "Token Authentication",
            title: "Authentication",
            token_headline: "Token",
            token_link: "Visit %{auth_authority} to get your token",
            token_submit: "Submit",
            too_many_sessions: "Too many sessions",
            verifying_jwt: "Verifying token",
        },
        buttons: {
            cancel: "Cancel",
            change: "Change",
            close: "Close",
            connect: "Connect",
            edit: "Edit",
            forget: "Forget",
            forget_network: "Forget this Network",
            ok: "OK",
            sleep_off: "Turn Sleep Mode Off",
            sleep_on: "Turn Sleep Mode On",
            start_scan: "Start Scan",
            stop: "Stop",
            update: "Update",
        },
        cellular: {
            carrier: "Carrier",
            connected: "Connected",
            connection_status: "Connection Status",
            iccid: "ICCID (Cell Number)",
            imsi: "IMSI (Subscriber ID)",
            mei: "Modem IMEI Number",
            no_modem: "No cellular modem detected",
            not_connected: "Not Connected",
            page_title: "Cellular Configuration",
        },
        comm_check: {
            communication_level: "Communications Level",
            description: "Check signal strength between the Envoy and the microinverters.",
            devices: "Devices",
            in_progress: "Communications Check in Progress",
            remaining_time: "%{minutes} minutes remaining",
            remaining_time_one: "< 1 minute remaining",
            start: "Start Communications Check",
            stop: "Stop Communications Check",
            title: "Communications Check",
        },
        comms: {
            communicating: "Communicating",
            description: "The Envoy\u2019s list of communicating microinverters includes the serial numbers of all devices that are receiving messages from the Envoy and reporting production and status information.",
            not_communicating: "Not Communicating",
            title: "Microinverters Communicating",
        },
        countries: {
            AD: "Andorra",
            AE: "United Arab Emirates",
            AF: "Afghanistan",
            AG: "Antigua and Barbuda",
            AI: "Anguilla",
            AL: "Albania",
            AM: "Armenia",
            AQ: "Antarctica",
            AR: "Argentina",
            AS: "American Samoa",
            AT: "Austria",
            AU: "Australia",
            AW: "Aruba",
            AZ: "Azerbaijan",
            BA: "Bosnia and Herzegovina",
            BB: "Barbados",
            BD: "Bangladesh",
            BE: "Belgium",
            BF: "Burkina Faso",
            BG: "Bulgaria",
            BH: "Bahrain",
            BI: "Burundi",
            BJ: "Benin",
            BM: "Bermuda",
            BN: "Brunei Darussalam",
            BO: "Bolivia, Plurinational State of",
            BR: "Brazil",
            BS: "Bahamas",
            BT: "Bhutan",
            BV: "Bouvet Island",
            BW: "Botswana",
            BY: "Belarus",
            BZ: "Belize",
            CA: "Canada",
            CC: "Cocos (Keeling) Islands",
            CF: "Central African Republic",
            CG: "Congo",
            CH: "Switzerland",
            CI: "Cd'Ivoire",
            CK: "Cook Islands",
            CL: "Chile",
            CM: "Cameroon",
            CN: "China",
            CO: "Colombia",
            CR: "Costa Rica",
            CV: "Cape Verde",
            CX: "Christmas Island",
            CY: "Cyprus",
            CZ: "Czech Republic",
            DE: "Germany",
            DJ: "Djibouti",
            DK: "Denmark",
            DM: "Dominica",
            DO: "Dominican Republic",
            DZ: "Algeria",
            EC: "Ecuador",
            EE: "Estonia",
            EG: "Egypt",
            EH: "Western Sahara",
            ER: "Eritrea",
            ES: "Spain",
            ET: "Ethiopia",
            FI: "Finland",
            FJ: "Fiji",
            FK: "Falkland Islands (Malvinas)",
            FM: "Micronesia, Federated States of",
            FO: "Faroe Islands",
            FR: "France",
            GA: "Gabon",
            GB: "United Kingdom",
            GD: "Grenada",
            GE: "Georgia",
            GF: "French Guiana",
            GH: "Ghana",
            GI: "Gibraltar",
            GL: "Greenland",
            GM: "Gambia",
            GN: "Guinea",
            GP: "Guadeloupe",
            GQ: "Equatorial Guinea",
            GR: "Greece",
            GS: "South Georgia and the South Sandwich Islands",
            GT: "Guatemala",
            GU: "Guam",
            GW: "Guinea-Bissau",
            GY: "Guyana",
            HK: "Hong Kong",
            HM: "Heard Island and McDonald Islands",
            HN: "Honduras",
            HR: "Croatia",
            HT: "Haiti",
            HU: "Hungary",
            ID: "Indonesia",
            IE: "Ireland",
            IL: "Israel",
            IN: "India",
            IO: "British Indian Ocean Territory",
            IS: "Iceland",
            IT: "Italy",
            JM: "Jamaica",
            JO: "Jordan",
            JP: "Japan",
            KE: "Kenya",
            KG: "Kyrgyzstan",
            KH: "Cambodia",
            KI: "Kiribati",
            KM: "Comoros",
            KN: "Saint Kitts and Nevis",
            KR: "Korea, Republic of",
            KW: "Kuwait",
            KY: "Cayman Islands",
            KZ: "Kazakhstan",
            LA: "Lao People's Democratic Republic",
            LB: "Lebanon",
            LC: "Saint Lucia",
            LI: "Liechtenstein",
            LK: "Sri Lanka",
            LR: "Liberia",
            LS: "Lesotho",
            LT: "Lithuania",
            LU: "Luxembourg",
            LV: "Latvia",
            MA: "Morocco",
            MC: "Monaco",
            MD: "Moldova, Republic of",
            ME: "Montenegro",
            MG: "Madagascar",
            MH: "Marshall Islands",
            ML: "Mali",
            MM: "Myanmar",
            MN: "Mongolia",
            MO: "Macao",
            MP: "Northern Mariana Islands",
            MQ: "Martinique",
            MR: "Mauritania",
            MS: "Montserrat",
            MT: "Malta",
            MU: "Mauritius",
            MV: "Maldives",
            MW: "Malawi",
            MX: "Mexico",
            MY: "Malaysia",
            MZ: "Mozambique",
            NA: "Namibia",
            NC: "New Caledonia",
            NE: "Niger",
            NF: "Norfolk Island",
            NG: "Nigeria",
            NI: "Nicaragua",
            NL: "Netherlands",
            NO: "Norway",
            NP: "Nepal",
            NR: "Nauru",
            NU: "Niue",
            NZ: "New Zealand",
            OM: "Oman",
            PA: "Panama",
            PE: "Peru",
            PF: "French Polynesia",
            PG: "Papua New Guinea",
            PH: "Philippines",
            PK: "Pakistan",
            PL: "Poland",
            PM: "Saint Pierre and Miquelon",
            PN: "Pitcairn",
            PR: "Puerto Rico",
            PT: "Portugal",
            PW: "Palau",
            PY: "Paraguay",
            QA: "Qatar",
            RO: "Romania",
            RU: "Russian Federation",
            SA: "Saudi Arabia",
            SB: "Solomon Islands",
            SC: "Seychelles",
            SE: "Sweden",
            SG: "Singapore",
            SH: "Saint Helena, Ascension and Tristan da Cunha",
            SI: "Slovenia",
            SJ: "Svalbard and Jan Mayen",
            SK: "Slovakia",
            SL: "Sierra Leone",
            SM: "San Marino",
            SN: "Senegal",
            SO: "Somalia",
            SR: "Suriname",
            ST: "Sao Tome and Principe",
            SV: "El Salvador",
            SY: "Syrian Arab Republic",
            SZ: "Swaziland",
            TC: "Turks and Caicos Islands",
            TD: "Chad",
            TF: "French Southern Territories",
            TG: "Togo",
            TH: "Thailand",
            TJ: "Tajikistan",
            TK: "Tokelau",
            TL: "Timor-Leste",
            TM: "Turkmenistan",
            TN: "Tunisia",
            TO: "Tonga",
            TR: "Turkey",
            TT: "Trinidad and Tobago",
            TV: "Tuvalu",
            TZ: "Tanzania, United Republic of",
            UA: "Ukraine",
            UG: "Uganda",
            UM: "United States Minor Outlying Islands",
            US: "United States",
            UY: "Uruguay",
            UZ: "Uzbekistan",
            VA: "Holy See (Vatican City State)",
            VC: "Saint Vincent and the Grenadines",
            VE: "Venezuela, Bolivarian Republic of",
            VG: "Virgin Islands, British",
            VI: "Virgin Islands, U.S.",
            VN: "Viet Nam",
            VU: "Vanuatu",
            WF: "Wallis and Futuna",
            WS: "Samoa",
            YE: "Yemen",
            YT: "Mayotte",
            ZA: "South Africa",
            ZM: "Zambia",
            ZW: "Zimbabwe",
        },
        counts: "%{actual_count}/%{expected_count}",
        detected: {
            battery_target_seperate: { one: "%{count} battery", other: "%{count} batteries", zero: "%{count} batteries" },
            description:
                "The Envoy\u2019s list of detected microinverters includes all serial numbers discovered by a device scan or provisioned with the Installer Toolkit. When microinverters have been detected, they can send and receive additional data from the Envoy.",
            detected: "Detected",
            device_target: "Device Target: %{count}",
            device_target_title: "Device Target: ",
            discovered: "Discovered:",
            installed: "Installed",
            micro_target_seperate: { one: "%{count} microinverter", other: "%{count} microinverters", zero: "%{count} microinverters" },
            nsr_target_separate: { one: "%{count} Q-Relay", other: "%{count} Q-Relays", zero: "%{count} Q-Relays" },
            provisioned: "Provisioned:",
            remaining_duration: { one: "Remaining Duration: %{count} hour %{minutes} mins", other: "Remaining Duration: %{count} hours %{minutes} mins", zero: "Remaining Duration: %{count} hours %{minutes} mins" },
            remaining_hour_one: "1 hour",
            remaining_hours: "%{hours} hours",
            remaining_minute_one: "1 minute remaining",
            remaining_minutes: "%{minutes} minutes remaining",
            remaining_priority: {
                one: "Remaining Priority Duration: %{count} hour %{minutes} mins",
                other: "Remaining Priority Duration: %{count} hours %{minutes} mins",
                zero: "Remaining Priority Duration: %{count} hours %{minutes} mins",
            },
            remaining_time: "%{minutes} minutes remaining",
            remaining_time_one: "< 1 minute remaining",
            scan_inprogress: "Device Scan in Progress",
            scan_start: "Start Device Scan",
            scan_stop: "Stop Scan",
            title: "Microinverters Detected",
        },
        device_alert_messages: {
            meters_not_enabled: "The production and consumption meters must be configured for Batteries to operate.",
            no_phase_assignment: "Batteries will not operate until they are assigned to phases.",
            not_configured: "The Batteries must be configured before they will operate.",
        },
        devices: {
            detected: "Detected",
            detected_total_count: "%{detected_count} of %{total_count}",
            device_info: {
                change_phase: "Change Phase",
                comm_level: "Comm Level: ",
                comm_level_2_4_ghz: "Comm Level (2.4 GHz): ",
                comm_level_sub_ghz: "Comm Level (Sub GHz): ",
                detected: "Detected: ",
                discovered: "Discovered via device scan / Pre Provisioned ",
                grid_profile: "Grid Profile: ",
                last_comm: "Last Communication: ",
                last_report: "Last Report: ",
                notapplicable: "n/a",
                param_table: "Parameter Table: ",
                part_number: "Part Number: ",
                pending_condition_clear: '"%{condition_flag}" clear condition command is in progress.',
                phase: "Phase: ",
                phase_unknown: "No phase selected",
                provisioned: "Assigned via provisioning",
                running_image: "Running Image: ",
                select_phase: "Select Phase",
                status: "Status: ",
                unknown: "Unknown",
                updated: "Updated ",
                view_in_array: "View in Array",
            },
            device_scan: "Device Scan",
            device_scan_short: "Scan",
            scan_state: { active: "Active", inactive: "Inactive", scan_disabled: "Disabled", scan_inhibited: "Inhibited", scan_suspended: "Suspended" },
        },
        encharge_batteries: {
            manage_options: {
                active: "Active (%{count})",
                active_count: { counting: { one: "Active (%{count})", other: "Active (%{count})", zero: "Active (%{count})" } },
                deleted: "Deleted (%{count})",
                deleted_count: { counting: { one: "Deleted (%{count})", other: "Deleted (%{count})", zero: "Deleted (%{count})" } },
            },
            nav: { all: "All", manage: "Manage", status: "Status" },
            no_inverters: "There are no encharge batteries.",
            no_inverters_search: 'No Encharge Batteries were found matching "%{search_term}".',
            phase_labels: { "ph-a": "L1(A)", "ph-b": "L2(B)", "ph-c": "L3(C)", "ph-unk": "No phase selected", "ph-updating": "Updating...", select_one: "Select One" },
            status_options: {
                cancel_sleep_label: "Stop",
                comm_nocount: "Comm",
                power_nocount: "Operating",
                preparing_to_sleep_text: "Entering Sleep Mode",
                profile_nocount: "Config",
                wake_sleep_label: "Turn Off",
                waking_label: "Exiting Sleep Mode",
            },
            title: "Encharge",
        },
        enpowers: {
            manage_options: {
                active: "Active (%{count})",
                active_count: { counting: { one: "Active (%{count})", other: "Active (%{count})", zero: "Active (%{count})" } },
                deleted: "Deleted (%{count})",
                deleted_count: { counting: { one: "Deleted (%{count})", other: "Deleted (%{count})", zero: "Deleted (%{count})" } },
            },
            max_temp: "Max Temp: ",
            nav: { all: "All", manage: "Manage", status: "Status" },
            no_inverters: "There is no Enpower device.",
            no_inverters_search: 'No Enpower device found matching "%{search_term}".',
            state_of_grid: { closed: "Closed", open: "Open", title: "State of Grid: " },
            status_options: { comm_nocount: "Comm", power_nocount: "Operating", profile_nocount: "Config" },
            title: "Enpower",
        },
        errors: {
            error_message: "Sorry, there's a problem getting data from the Envoy. If this continues, contact customer support.",
            interface_not_dhcp: "Sorry, you cannot get a new IP address. Switch the Envoy IP setting to DHCP first.",
            not_allowed: "Sorry, your requested change is not permitted and could not be saved.",
            not_authorized: "Sorry, you are not authorized to view that page.",
            save_failed: "Sorry, your changes could not be saved. ",
            start_scan_target_too_low:
                "<p>You've indicated that you expect %{expected_count} microinverters to report to this Envoy, and %{expected_count} have already been detected.</p><p>Before starting a device scan, <a href='#' class='open-target-count'>increase the number of microinverters expected</a> or delete one or more microinverters from the <a href='#' class='open-manage-devices'>manage devices screen</a>.</p>",
            start_scan_target_too_low_battery: {
                one: "<p>You've indicated that you expect %{count} battery to report to this Envoy, and that has already been detected.</p>",
                other: "<p>You've indicated that you expect %{count} batteries to report to this Envoy, and that many have already been detected.</p>",
                zero: "<p>You've indicated that you expect %{count} batteries to report to this Envoy, and that many have already been detected.</p>",
            },
            start_scan_target_too_low_battery_end:
                "<p>Before starting a device scan, <a href='#' class='open-target-count'>increase the number of batteries expected</a> or delete one or more batteries from the <a href='#' class='open-manage-devices-battery'>manage devices screen</a>.</p>",
            start_scan_target_too_low_both:
                "<p>The expected number of devices have already been detected.</p><p>Before starting a device scan, <a href='#' class='open-target-count'>increase the number of devices expected</a> or delete one or more microinverters or batteries.</p>",
            start_scan_target_too_low_micro: {
                one: "<p>You've indicated that you expect %{count} microinverter to report to this Envoy, and that has already been detected.</p>",
                other: "<p>You've indicated that you expect %{count} microinverters to report to this Envoy, and that many have already been detected.</p>",
                zero: "<p>You've indicated that you expect %{count} microinverters to report to this Envoy, and that many have already been detected.</p>",
            },
            start_scan_target_too_low_micro_end:
                "<p>Before starting a device scan, <a href='#' class='open-target-count'>increase the number of microinverters expected</a> or delete one or more microinverters from the <a href='#' class='open-manage-devices'>manage devices screen</a>.</p>",
            start_scan_target_too_low_nsr: {
                one: "<p>You've indicated that you expect %{count} Q-Relay to report to this Envoy, and that has already been detected.</p>",
                other: "<p>You've indicated that you expect %{count} Q-Relays to report to this Envoy, and that many have already been detected.</p>",
                zero: "<p>You've indicated that you expect %{count} Q-Relays to report to this Envoy, and that many have already been detected.</p>",
            },
            start_scan_target_too_low_nsr_end:
                "<p>Before starting a device scan, <a href='#' class='open-target-count'>increase the number of Q-Relays expected</a> or delete one or more Q-Relays from the <a href='#' class='open-manage-devices-nsr'>manage devices screen</a>.</p>",
            start_scan_title: "Device Scan Unavailable",
            timeout_message:
                "Sorry, it's taking too long to get data from the Envoy. Make sure the Envoy is powered on, and that the Envoy and this device are both connected to the same local network. If the problem continues, contact customer support.",
            title: "Error",
            tunnel_close_failed: "Attempt to close the connection to Enphase support failed. If this continues, contact customer support.",
            tunnel_failed_title: "Connection Failed",
            tunnel_open_failed: "The Envoy must be connected to the Internet to open a connection to Enphase. If the Envoy has an Internet connection and this problem continues, contact customer support.",
        },
        ethernet: {
            buttons: { dhcp: "Use DHCP", new_ip: "Get New IP Address", static: "Use Static IP" },
            confirm_change: { description: "This may interrupt communications with the Envoy and require you to re-connect.", title: "Change Ethernet Configuration?" },
            confirm_static: {
                description: "This will assign the current DHCP IP address and other configurations as static values. If you choose to proceed, you can update these values on the next screen.",
                title: "Change Ethernet Configuration?",
            },
            gateway_ip: "Gateway IP",
            ip_address: "IP Address",
            ip_setting: "IP Setting",
            netmask: "Netmask",
            new_ip_modal: { description: "This may interrupt communications with the Envoy and require you to re-connect.", title: "Get New IP Address?" },
            no_config: "No ethernet connection detected.",
            page_title: "Ethernet Configuration",
            primary_dns: "Primary DNS Server",
            secondary_dns: "Secondary DNS Server",
            type: { dhcp: "DHCP", static: "Static IP" },
        },
        forms: { search: "Search", search_prompt: "Serial Number", select_prompt: "Select One" },
        global_nav: {
            acb: "AC Battery",
            comms: "Comms",
            detected: "Detected",
            encharge: "Encharge",
            encharge_batteries: "Encharge",
            enpower: "Enpower",
            meters: "Meters",
            meters_small: "Meters",
            microinverters: "Microinverters",
            microinverters_short: "Micros",
            more: "More",
            network: "Network",
            nsr: "Q Relays",
            overview: "Overview",
            power: "Power",
            profiles: "Profiles",
        },
        initial_setup: {
            continue: "Continue",
            device_prompt: "Enter the number of devices that you expect to report to this Envoy.",
            eu_profile_prompt: "Select a location-specific grid profile.",
            migration_in_progress_message: "profiles being updated",
            na_profile_prompt: "The system is using the factory-installed grid profile settings. You can select a location-specific grid profile below.",
            system_size: "System Size",
        },
        jquery_validate: {
            messages: {
                addedTierPercent: "Please enter a number\u00a0greater than the percent\u00a0of baseline\u00a0entered for {0}.",
                an_number: "Please enter a valid number.",
                creditcard: "Please enter a valid credit card number.",
                date: "Please enter a valid date.",
                dateISO: "Please enter a valid date (ISO).",
                digits: "Please enter only digits.",
                domain: "Please enter a valid IP v4 address (xxx.xxx.xxx.xxx) or URL (google.com)",
                email: "Please enter a valid email address.",
                equalTo: "Please enter the same value again.",
                ipv4: "Please enter a valid IP v4 address. (xxx.xxx.xxx.xxx)",
                max: "Please enter a value less than or equal to {0}.",
                maxlength: "Please enter no more than {0} characters.",
                min: "Please enter a value greater than or equal to {0}.",
                minlength: "Please enter at least {0} characters.",
                number: "Please enter a valid number.",
                range: "Please enter a value between {0} and {1}.",
                rangelength: "Please enter a value between {0} and {1} characters long.",
                remote: "Please fix this field.",
                required: "This field is required.",
                url: "Please enter a valid URL.",
                wep_key: "Please enter a valid WEP Key (10, 26, or 58 characters, which may include 0-9 or A-F).",
            },
        },
        loading: "Please wait, loading",
        meters: {
            active_energy: "Active Energy",
            active_energy_lt: "Active Energy",
            active_power: "Active Power",
            apparent_energy: "Apparent Energy",
            apparent_power: "Apparent Power",
            consumption: "Consumption Meter",
            consumption_meter: {
                enable_meter: "Enable Consumption Meter",
                measurement_type: "Metered Circuit",
                meter_type_desc: "Does the circuit passing through the consumption CTs include load with solar production or load only?",
                meter_type_desc_singular: "Does the circuit passing through the consumption CT include load with solar production or load only?",
                meter_type_warning: "Be sure that the selections above are correct.",
            },
            current: "Current",
            current_ct: {
                current_ct_settings: "CT Current Settings",
                custom_cts_installed: "Custom %{meter_type} CTs Installed",
                primary: "Primary",
                remove_desc: "Tap OK to confirm that you are using standard Enphase %{meter_type} CTs.",
                remove_settings: "Remove Custom CT Settings?",
                secondary: "Secondary",
                turns: "Turns",
            },
            descriptors: { lifetime: "Lifetime", lifetime_lag: "Lagging (Lifetime)", lifetime_lead: "Leading (Lifetime)", today: "Today", today_lag: "Lagging (Today)", today_lead: "Leading (Today)" },
            enable_consumption_meter: "Enable Consumption Meter",
            enable_consumption_modal: {
                description: "Once you enable this meter, it cannot be disabled and the type cannot be changed.",
                description_mode_three: "Once you enable this meter, you cannot disable it, change the type, or decrease the number of phases.",
                description_mode_three_post_enable: "Once you do this, you will not be able to decrease the number of phases.",
                note_three: "<strong>Note: the number of phases will also be increased on the production meter.</strong>",
                note_three_post_enable: "<strong>Note: the number of phases will also be increased on the production meter.</strong>",
                title: 'Enable Meter with "%{type}" Metering?',
                title_mode_three: "Enable Meter with Metered Circuit: %{type} and Phases Metered: %{phCount}?",
                title_mode_three_post_enable: "Update Phases Metered to %{phCount}?",
            },
            enable_meter: "Enable Consumption Meter",
            enable_modal: { description: "Once you enable this meter, it cannot be disabled and the type cannot be changed.", title: "Enable Meter with %{type} Metering?" },
            enable_production_meter: "Enable Production Meter",
            enable_production_modal: {
                description: "Once you enable this meter, it cannot be disabled.",
                description_mode_three: "Once you enable this meter, you cannot disable it or decrease the number of phases.",
                description_mode_three_post_enable: "Once you do this, you will not be able to decrease the number of phases.",
                note_three: "<strong>Note: the number of phases will also be increased on the consumption meter.</strong>",
                note_three_post_enable: "<strong>Note: the number of phases will also be increased on the consumption meter.</strong>",
                title: "Enable Meter?",
                title_mode_three: "Enable Meter with Phases Metered: %{phCount}?",
                title_mode_three_post_enable: "Update Phases Metered to %{phCount}?",
            },
            enable_production_prompt: "The production meter must be enabled before these readings can be displayed.",
            freq_analysis: { btn_change_data_type: "Toggle Data", plc_activity: "Activity", plc_power_spectrum: "Power Spectrum", power_line_analy: "Power Line Communication Analysis" },
            id: "EID",
            internal_meters: "Internal Meters",
            latest_reading: "Latest Reading",
            lifetime_energy: "Lifetime",
            load_contains_storage_message: "Load readings include storage activity.",
            measurement_type: "Type",
            meter_change_warning: "You cannot change them once the meter is enabled.",
            meter_mode: { single: "Single-Phase (L-N)", split: "Single-Phase (L-L)", three: "Multi-Phase" },
            meter_readings: "Readings",
            meter_state: { disabled: "Disabled", enabled: "Enabled" },
            meter_status: {
                "check-wiring": "Check Wiring",
                meter_setup: "Set up metering now",
                meters_not_enabled: "Meters Not Enabled",
                normal: "Normal",
                "not-metering": "Meter Not Enabled",
                status_flags: {
                    "negative-production": "Production readings are negative. Check CT orientation and leads, compared with voltage connections.",
                    "negative-total-consumption": "Consumption readings are negative. Check CT orientation and leads, compared with voltage connections.",
                    "power-on-unused-phase": "Power detected on an unused phase. Check CT lead connections, compared with voltage connections.",
                    "production-imbalance": "Production not balanced between phases. Check CT lead connections and voltage connections.",
                },
            },
            meter_type: { "net-consumption": "Net", "total-consumption": "Total" },
            meter_type_desc: "If the consumption CTs are on a circuit that solar production flows through, leave type set to <b>Net</b>. If not, change type to <b>Total</b>.",
            meter_type_verbose: { "net-consumption": "Load with solar production", "total-consumption": "Load only" },
            meter_type_warning: "Be sure to set the meter type correctly. You cannot change them once the meter is enabled.",
            mode: "Mode",
            multi_phase_options: { mphase_0: "Not Selected", mphase_1: "L1(A)", mphase_2: "L1(A) + L2(B)", mphase_3: "L1(A) + L2(B) + L3(C)" },
            multi_phase_warning: {
                consumption: {
                    post_continue: "The meter is not yet enabled. Verify the readings, then tap <strong>Enable Consumption Meter</strong> at the bottom of the screen.",
                    pre_continue: "The meter is not yet enabled. Select the Phases Metered and Metered Circuit, then tap <strong>View Readings</strong>.",
                    pre_continue_one: "The meter is not yet enabled. Select the Metered Circuit, then tap <strong>View Readings</strong>.",
                },
                production: {
                    post_continue: "The meter is not yet enabled. Verify the readings, then tap <strong>Enable Production Meter</strong> at the bottom of the screen.",
                    pre_continue: "The meter is not yet enabled. Select the Phases Metered, then tap <strong>View Readings</strong>.",
                },
            },
            net_consumption_desc: "These readings reflect the difference between the total home load and solar production. They should approximately match the home's utility meter readings.",
            net_consumption_title: "Net Consumption",
            no_consumption: "No consumption meter configured for this Envoy.",
            no_meters: "No meters detected.",
            no_production: "No production meter configured for this Envoy.",
            phase_count: "Phases Metered",
            phase_count_desc: "Select which of the meter phases you have wired.",
            phase_labels: { phase_1: "L1(A)", phase_2: "L2(B)", phase_3: "L3(C)" },
            pmu: {
                add_another: "Add Another",
                add_meter: "Add Power Meter",
                config: {
                    add: "Add Selected Meters",
                    meters_description: "Power meters detected on this network:",
                    network_warning: "Before adding a meter, be sure that the Envoy has an Ethernet connection with a static IP address. This should be configured both on the router and on the Envoy.",
                    no_meters_description:
                        "No power meters detected<div class='alert alert-info'><b>Note:</b> It may take up to an hour for power meters to be detected. To facilitate detection, make sure that the power meter is on the same local subnet as the Envoy.</div>",
                    remove: "Remove Power Meter",
                    title: "Power Meter Configuration",
                },
                labels: { fw_version: "Firmware Version", ip: "IP Address", mac_address: "Mac Address", manufacturer: "Manufacturer", part_number: "Part Number", production: "Production", serial_number: "Serial Number", status: "Status" },
                phase_coupler: "A phase coupler is required for microinverters installed on L2 or L3 to communicate with the Envoy.",
            },
            power_exporting: "(Exporting to Grid)",
            power_factor: "Power Factor",
            power_importing: "(Importing from Grid)",
            production: "Production Meter",
            reactive_energy: "Reactive Energy",
            reactive_power: "Reactive Power",
            single_phase_warning: {
                consumption: {
                    post_continue: "The meter is not yet enabled. Verify the readings, then tap <strong>Enable Consumption Meter</strong> at the bottom of the screen.",
                    pre_continue: "The meter is not yet enabled. Select the Metered Circuit, then tap <strong>View Readings</strong>.",
                },
                production: {
                    post_continue: "The meter is not yet enabled. Verify the readings, then tap <strong>Enable Production Meter</strong> at the bottom of the screen.",
                    pre_continue: "The meter is not yet enabled. Tap <strong>View Readings</strong> to view and verify the readings.",
                },
            },
            status: "Status",
            title: "Meters",
            today_energy: "Today",
            total_consumption_desc: "These readings reflect the total home load.",
            total_consumption_na: "The production meter must be enabled before these readings can be displayed.",
            total_consumption_title: "Total Consumption",
            type: { eim: "Envoy Integrated Meter", pmu: "Power Meter", rgm: "Enphase RGM" },
            unavailable: "n/a",
            update_settings: "Update",
            view_readings: "View Readings",
            wizard: {
                batt_off: { counting: { one: "Make sure the Enphase Battery circuit is switched OFF.", other: "Make sure the Enphase Battery circuits are switched OFF." } },
                battery_reminder: "<b>Remember to switch the Enphase battery circuit on.</b>",
                btn_next: "Next",
                btn_try_again: "Try Again",
                bullet_load_increase: "Did the total home load increase as you expected?",
                bullet_meters_match: "Does the home's utility meter approximately match this reading?",
                bullet_phase_select: "Is solar production flowing to the grid measured by the consumption CT?",
                bullet_pv_on: "Switch ON the PV breakers and wait for the reconnection period to complete. PV should start to produce power in 5 minutes or less, then tap <strong>Next</strong>.",
                bullet_turn_on_load: "Turn on a known load, such as a heat gun, then tap <b>Next</b>.",
                check_meters: "Check<br>Meters",
                check_title: " Check %{meter_type} Meter",
                confirm_ct_routing: "Make sure that all of the home loads are routed through the consumption CTs.",
                consumption_appears_good: "The consumption meter appears to have been configured correctly.",
                consumption_ct_direction: "Check that the arrow on the consumption CTs are pointing in the direction of energy flow toward the load center.",
                consumption_cts_installed: "Did you install consumption CTs?",
                consumption_enable_prompt: "Tap <strong>Enable Consumption Meter</strong> to complete meter setup.",
                consumption_looks_good: "Consumption readings look good!",
                consumption_neg: "Consumption readings are negative. Check the following, then tap <b>Try Again</b>.",
                consumption_not_enabled: "Consumption Meter Not Enabled",
                consumption_phase_sel_net: "Consumption CT includes solar production.",
                consumption_phase_sel_total: "Consumption CT does not include solar production.",
                ct_bw_correct: "Make sure that the blue and white wires are connected to the correct positions in the terminal block.",
                desc: "Use our step-by-step wizard to ensure that the internal meters are wired and configured correctly.",
                desc_consumption: "Use our step-by-step wizard to ensure that the consumption meter is wired and configured correctly.",
                desc_production: "Use our step-by-step wizard to ensure that the production meter is wired and configured correctly.",
                done: "Done",
                enable_button: "Enable %{meterType} Meter",
                enough_sun: "Make sure there is enough sunlight reaching the PV modules to power up the microinverters.",
                exit_check: "Are you sure you want to exit the Meter Check?",
                exit_conf: { desc: "Are you sure you want to leave the production meter setup wizard? You'll need to start over if you want to use the wizard again.", neg_button: "Go Back", title: "Exit Wizard?" },
                exit_wizard: "Exit Wizard",
                get_started: "Get Started",
                load_didnt_increase: "Total home load did not increase as expected. Check the following, then tap <b>Try Again</b>.",
                manual_prompt: "Manual Meter Setup",
                most_common: "(Most common setup)",
                negative: "NO",
                phase_select_prompt: "Select the phases metered based on how the Envoy-S is wired: ",
                positive: "YES",
                power_exporting: "Exporting",
                power_importing: "Importing",
                prod_enable_desc1: "Production readings are close to zero, as expected.",
                prod_enable_desc2: "Tap <strong>Enable Production Meter</strong> to complete meter setup.",
                prod_meter_enabled: "The production meter is enabled.",
                prod_su1_pv_on: {
                    counting: {
                        one: "Make sure the PV circuit is switched ON and are producing power (the reconnection period has completed).",
                        other: "Make sure the PV circuits are switched ON and are producing power (the reconnection period has completed).",
                    },
                },
                prod_su2_pv_off: "Switch OFF the PV breakers, then tap <b>Next</b>.",
                prod_ts_p4: {
                    desc: "Production readings are negative. Check the following, then tap Try Again.",
                    ts1: {
                        counting: {
                            one: "Make sure the PV circuit is switched ON and are producing power (the reconnection period has completed).",
                            other: "Make sure the PV circuits are switched ON and are producing power (the reconnection period has completed).",
                        },
                    },
                    ts2: { counting: { one: "Make sure the Enphase Battery circuit is switched OFF.", other: "Make sure the Enphase Battery circuits are switched OFF." } },
                    ts3: {
                        counting: {
                            one: "Check that the arrow on the production CT is pointing in the direction of energy flow toward the load center.",
                            other: "Check that the arrow on the production CTs are pointing in the direction of energy flow toward the load center.",
                        },
                    },
                    ts5: {
                        counting: {
                            one: "Make sure that the wires running through the production CT only include PV generation (and not any loads).",
                            other: "Make sure that the wires running through the production CTs only include PV generation (and not any loads).",
                        },
                    },
                    ts6: "Ensure that the CTs are clamped on the correct phases with respect to the Envoy power terminal.",
                },
                prod_ts_p5: {
                    desc: "Production readings are higher than they should be. Check the following, then tap <b>Try Again</b>.",
                    ts2: {
                        counting: {
                            one: "Make sure that the wires running through the production CT only include PV generation (and not any loads).",
                            other: "Make sure that the wires running through the production CTs only include PV generation (and not any loads). ",
                        },
                    },
                },
                production_not_enabled: "Production Meter Not Enabled",
                pv_off: { counting: { one: "Make sure the PV circuit is switched OFF.", other: "Make sure the PV circuits are switched OFF." } },
                pv_reminder: "<b>Remember to switch the PV circuit on.</b> It will take approximately 5 minutes for the microinverters to report power production.",
                readings_dont_match1: "We're not sure why the readings don't match the home's utility meter. Tap <b>Try Again</b> to change the configuration setting for the location of the consumption CTs to see if that helps.",
                readings_dont_match2: "If that doesn't help, you can exit the wizard and use the <b>Manual Meter Setup</b> option instead. We suggest you contact Enphase Support for assistance before proceeding.",
                readings_dont_match_post: "Please contact Enphase Support for assistance and inform them that you have performed the meter check but the readings still don't match the utility meter.",
                reset_timer: "Reset Timer",
                setup_title: " Set Up %{meter_type} Meter",
                start_timer: "Start Timer",
                stop_timer: "Stop Timer",
                sw_off_batt: { counting: { one: "Switch OFF the Enphase Battery circuit.", other: "Switch OFF the Enphase Battery circuits." } },
                sw_off_pv: "Switch OFF the PV breakers.",
                total_cons_not_reduced: "Turning on the PV circuit didn't reduce total consumption. Check the following, then tap <b>Try Again</b>.",
                total_load: "Total home load",
                trouble_c6_desc1: "If you've followed all of the on-screen instructions and consumption readings are still negative, ",
                trouble_c8_desc1: "If you've followed all of the on-screen instructions and total consumption is still not reduced by turning on the PV circuit, ",
                trouble_desc2: "We suggest you contact Enphase Support at <a href='tel:%{dial_num}'> %{disp_num}</a> for assistance before proceeding.",
                trouble_install_guide: "Please refer to the <strong>Envoy Metered Installation Guide</strong>",
                trouble_manual_prompt: " or you can exit the wizard and use the <strong>Manual Meter Setup</strong> option instead.",
                trouble_p0_5: {
                    desc: {
                        counting: {
                            one: "You've indicated that only %{selected_phases} is metered, but there is power on %{phaseStr}.",
                            other: "You've indicated that only %{selected_phases} are metered, but there is power on %{phaseStr}.",
                        },
                    },
                    ts1: "Check the wiring. Are the phases wired correctly?",
                    ts_no_resp: "Fix the wiring, then tap <b>Try Again</b>.",
                    ts_yes_resp: "Change the phases metered selection to match the wiring, then tap <b>Try Again</b>.",
                },
                trouble_p0_desc1: "If you've followed all of the on-screen instructions and there is still power on an unused phase, ",
                trouble_p4_desc1: "If you've followed all of the on-screen instructions and production readings are still negative, ",
                trouble_p5_desc1: "If you've followed all of the on-screen instructions and production readings are still higher than expected, ",
                trouble_p7_desc1: "If you've followed all of the on-screen instructions and the home load still does not increase as expected, ",
                trouble_prompt: "Having trouble getting past this step?",
                unable_to_see_meter: "If you are not able to access <strong>POWER</strong> readings on the utility meter or measure with a portable meter, then click <strong>Continue</strong>.",
            },
        },
        microinverters: {
            condition_clear: { description: 'This will send a command to clear the "%{condition_flag}" status on this microinverter.', title: "Clear Condition?" },
            manage_options: {
                active: "Active (%{count})",
                active_count: { counting: { one: "Active (%{count})", other: "Active (%{count})", zero: "Active (%{count})" } },
                delete_btn: "Delete",
                deleted: "Deleted (%{count})",
                deleted_count: { counting: { one: "Deleted (%{count})", other: "Deleted (%{count})", zero: "Deleted (%{count})" } },
                restore_btn: "Restore",
            },
            nav: { all: "All", manage: "Manage", status: "Status" },
            no_inverters: "There are no microinverters.",
            no_inverters_search: 'No microinverters were found matching "%{search_term}".',
            phase_labels: { "ph-a": "L1(A)", "ph-b": "L2(B)", "ph-c": "L3(C)", "ph-unk": "No phase selected", "ph-updating": "Updating...", select_one: "Select One" },
            phase_prompt_label: "Select a phase for AC Battery %{serial_num}",
            scan_close: "Close",
            scan_disabled: "Device scanning is currently unavailable due to a conflicting scan running on another Envoy.",
            scan_inhibited: "To add more microinterters to this Envoy, you must use the Installer Toolkit to provision them or contact Enphase Customer support to re-enable device scanning.",
            scan_inprogress: "Device Scan in Progress",
            scan_settings: {
                advanced_options: "More Options",
                device_total: "Device Target",
                device_total_description: "If you enter a device target, Envoy will stop scanning when its detected microinverters total reaches that number.",
                device_total_error_1: "Device total must be between %{already_detected} (the number of devices already detected) and %{device_total_max}.",
                device_total_error_2: "Device total must be greater than %{already_detected} (the number of devices already detected).",
                hours: "hours",
                less_options: "Less Options",
                minutes: "mins",
                optional: "(optional)",
                priority_duration: "Priority Duration",
                priority_duration_description: "If you enter a priority duration, Envoy will make device scanning its only activity for that period.",
                priority_duration_error: "Priority duration cannot be longer than scan duration.",
                scan_duration: "Scan Duration",
                scan_duration_error: "Scan duration must be between 1 minute and 8 hours.",
                scan_options: { min_120: "2 hours", min_15: "15 minutes", min_240: "4 hours", min_30: "30 minutes", min_480: "8 hours", min_60: "1 hour" },
                time_description: "hh:mm",
            },
            scan_start: "Start Scan",
            scan_stop: "Stop Scan",
            scan_suspended: "Device scanning is currently unavailable due to a microinverter upgrade.",
            status_options: { comm: "Comm (%{count})", comm_nocount: "Comm", power: "Power (%{count})", power_nocount: "Power", profile: "Profile (%{count})", profile_nocount: "Profile" },
        },
        monitoring: {
            connected: "Connected to Enlighten",
            high_bandwidth: "Standard",
            last_report: "Last Report:",
            low_bandwidth: "Low-Bandwidth",
            more_info: "More Info",
            no_report: "Never Reported",
            not_connected: "Not Connected to Enlighten",
            report_setting: "Report Setting",
            report_setting_cellular_desc: "This Envoy has an Enphase cellular modem and reports 15-minute interval data to Enlighten four times per day (low-bandwidth).",
            report_setting_diagnostic: "Diagnostic Mode On: %{minutes} minutes remaining",
            report_setting_enable_diagnostic: "You may enable Diagnostic Mode for two hours. While in Diagnostic Mode, the Envoy will typically report 5-minute interval data to Enlighten every 5 minutes (during daylight hours).",
            report_setting_high_desc:
                "This Envoy is set to standard reporting, which typically reports 5-minute interval data to Enlighten every 5 minutes during daylight hours. You may switch to low-bandwidth, which reports 15-minute interval data to Enlighten four times per day.",
            report_setting_low_desc:
                "This Envoy is set to low-bandwidth reporting, which reports 15-minute interval data to Enlighten four times per day. You may switch to standard reporting, which typically reports 5-minute interval data to Enlighten every 5 minutes during daylight hours.",
            report_setting_modal: {
                diagnostic_desc: "Confirm enabling Diagnostic Mode for two hours.",
                high_desc: "Confirm switch to standard reporting.",
                low_desc: "Confirm switch to low-bandwidth reporting.",
                title: "Report Setting Change",
            },
            report_setting_options: { diagnostic: "Enable Diagnostic Mode", high: "Switch to Standard Reporting", low: "Switch to Low-Bandwidth" },
            title: "Monitoring",
        },
        more: {
            about: {
                cellular_ip: "Cellular IP Address",
                cellular_mac_address: "Cellular Mac Address",
                db_size: "Database Size",
                db_size_stats: "%{db_size} (%{percent}% full)",
                ethernet_ip: "Ethernet IP Address",
                ethernet_mac_address: "Ethernet Mac Address",
                is_nonvoy: "This Envoy is programmed for configuring unmonitored systems.",
                part_number: "Part Number",
                serial_number: "Serial Number",
                sw_build_date: "Software Build Date",
                sw_version: "Software Version",
                timezone: "Current Timezone",
                title: "About This Envoy",
                wifi_ip: "Wi-Fi IP Address",
                wifi_mac_address: "Wi-Fi Mac Address",
            },
            datetime: { date: "Date", time: "Time", timezone: "Time Zone", title: "Date & Time", update_timezone: "Update Time Zone" },
            events: { event_date_line: "%{date} (Event ID %{event_id})", no_events: "There are no events.", title: "Events" },
            support_connection: {
                close: "Close Connection",
                description_close: "The secure connection to Enphase support is open.",
                description_open: "Create a secure connection so Enphase support personnel can troubleshoot this system remotely.",
                open: "Open Connection",
                title: "Connection to Enphase Support",
            },
            system: { title: "System" },
        },
        network: {
            diagnostic_tools: {
                check_connectivity: "Check Network Connectivity",
                check_network_route: "Check Network Route",
                gateway_ip: "Gateway IP",
                ip_address: "IP Address",
                mac_address: "Mac Address",
                netmask: "Netmask",
                network_connectivity: "Network Connectivity Check",
                network_connectivity_desc: "Run a collection of basic network diagnostic checks on the Envoy.",
                network_route: "Network Route Check",
                network_route_desc: "See the Envoy's path to the Internet for all available network interfaces.",
                ping: "Ping",
                ping_desc: "Enter an IP address or URL to test the Envoy's connectivity to your router or other network host.",
                ping_ip: "Ping Address",
                primary_dns: "Primary DNS Server",
                results_title: "Results",
                secondary_dns: "Secondary DNS Server",
                timestamp: "Last Checked",
                title: "Diagnostic Tools",
            },
            network_configuration: { active_network: "Active", title: "Network Configuration", types: { cellular: "Cellular", ethernet: "Ethernet", none: "None", wifi: "Wi-Fi" } },
            network_connectivity_check: {
                connectivity_enlighten: "Connectivity to Enlighten",
                connectivity_enphase: "Connectivity to Enphase",
                enlighten_dns_lookup: "Enlighten DNS Lookup",
                enphase_dns_lookup: "Enphase DNS Lookup",
                gateway_ping: "Gateway Ping",
                google_dns_lookup: "Google DNS Lookup",
                google_ping: "Google Ping",
                primary_dns_ping: "Primary DNS Ping",
                primary_interface: "Network Tested",
                result: { fail: "Failed", pass: "Good" },
                secondary_dns_ping: "Secondary DNS Ping",
                timestamp: "Last Checked",
                title: "Results",
            },
            network_route_check: { destination: "Destination", flags: "Flags", gateway: "Gateway", genmask: "Genmask", metric: "Metric", network: "Network", ref: "Ref", results_title: "Results", timestamp: "Last Checked", use: "Use" },
            title: "Network",
        },
        not_available: "Not Available",
        nsr: {
            line_status_heading: "Lines Connected:",
            line_status_help_text:
                "<ul><li>At least one of the Q-Relay lines is not connected.</li><li>Check that the Q-Relay is installed wired correctly.</li><li>Push the test button to retry.</li><li>If this is intentional then this can be ignored.</li></ul>",
            line_status_help_title: "Q-Relay Line Connection Help",
            lines: "Line %{num}:",
            reason_strings: "unknown reason;Hardware error;Button press;Force command from Envoy;AC line 1 voltage error;AC line 2 voltage error;AC line 3 voltage error;AC line 1 frequency error;Grid DC error;AC line 1 voltage low;AC line 1 voltage high;AC line 1 frequency low;AC line 1 frequency high;AC line 2 voltage low;AC line 2 voltage high;AC line 3 voltage low;AC line 3 voltage high;Grid DC low;Grid DC high;Rocof;AC Average line 1;AC average line 2;AC average line 3".split(
                ";"
            ),
            relay_heading: "Relay:",
        },
        nsrs: {
            manage_options: {
                active: "Active (%{count})",
                active_count: { counting: { one: "Active (%{count})", other: "Active (%{count})", zero: "Active (%{count})" } },
                deleted: "Deleted (%{count})",
                deleted_count: { counting: { one: "Deleted (%{count})", other: "Deleted (%{count})", zero: "Deleted (%{count})" } },
            },
            nav: { all: "All", manage: "Manage", status: "Status" },
            no_inverters: "There are no Q Relays",
            no_inverters_search: 'No Q Relays were found matching "%{search_term}".',
            status_options: { comm_nocount: "Comm", power_nocount: "Operating", profile_nocount: "Config" },
            title: "Relays Q",
        },
        overview: {
            ac_batteries: {
                communicating: "Communicating",
                default_profile_set: "Factory-Installed Grid Profile",
                detected: "Detected",
                factory_installed: "Factory-Installed",
                factory_installed_config: "Factory-Installed Configurations",
                not_set: "Not Set",
                producing_power: "Operating",
                profile_set: "Configured",
                total: "AC Batteries",
            },
            ac_batteries_counts: {
                communicating: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Communicating</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                    },
                },
                detected: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Detected</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                    },
                },
                producing_power: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Operating</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Operating</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Operating</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Operating</span>",
                    },
                },
                profile_set: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Configured</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Configured</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Configured</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Configured</span>",
                    },
                },
                total: {
                    counting: {
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>AC Battery</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>AC Batteries</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>AC Batteries</span>",
                    },
                },
            },
            ac_battery_state: {
                charging: "Charging",
                discharging: "Discharging",
                full: "Full",
                idle: "Idle",
                soc_full: "%{operating_state} (State of Charge %{percent}%)",
                soc_percent: "(State of Charge %{percent}%)",
                soc_state: "%{operating_state}",
            },
            alerts: "Alerts",
            consumption: "Consumption Meter",
            consumption_meter_label: "Consumption",
            current_consumption: "Current Power Consumption",
            current_production: "Current Power Production",
            devices: { detected: "Detected" },
            encharge_batteries: {
                communicating: "Communicating",
                default_profile_set: "Factory-Installed Grid Profile",
                detected: "Detected",
                factory_installed: "Factory-Installed",
                factory_installed_config: "Factory-Installed Configurations",
                not_set: "Not Set",
                producing_power: "Operating",
                profile_set: "Configured",
                total: "AC Batteries",
            },
            enpowers: { communicating: "Communicating", default_profile_set: "Factory-Installed Grid Profile", detected: "Detected", profile_set: "Profile Set", total: "Enpower Devices" },
            enpowers_summary: { connected: { false: "Not Connected to Enpower", true: "Connected to Enpower" }, grid_status: { false: "OFF", title: "Grid Status", true: "ON" }, title: "Enpower" },
            includes_storage_label: "(includes storage activity)",
            inverter_production: "Microinverter Production",
            inverters_update_status: { "in-progress": "Microinverter upgrade in progress. This typically takes 15 to 30 minutes to complete." },
            ip_address: "IP Address",
            latest_power: "Latest Power",
            lifetime: "Lifetime",
            lifetime_energy: "Lifetime Energy",
            meter_production: "Production Meter",
            metering: "Metering",
            microinverter_counts: {
                communicating: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Communicating</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                    },
                },
                detected: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Detected</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                    },
                },
                producing_power: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Producing Power</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Producing Power</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Producing Power</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Producing Power</span>",
                    },
                },
                profile_set: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Profile Set</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Profile Set</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Profile Set</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Profile Set</span>",
                    },
                },
                total: {
                    counting: {
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Microinverter</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Microinverters</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Microinverters</span>",
                    },
                },
            },
            microinverters: { communicating: "Communicating", default_profile_set: "Factory-Installed Grid Profile", detected: "Detected", producing_power: "Producing Power", profile_set: "Profile Set", total: "Microinverters" },
            net_power: "Net Power",
            new_microinverter_counts: {
                communicating: {
                    counting_acb: { one: "Communicating", other: "Communicating", zero: "Communicating" },
                    counting_encharge: { one: "Communicating", other: "Communicating", zero: "Communicating" },
                    counting_microinverters: { one: "Communicating", other: "Communicating", zero: "Communicating" },
                    counting_nsr: { one: "Communicating", other: "Communicating", zero: "Communicating" },
                },
                detected: {
                    counting_acb: { one: "Detected", other: "Detected", zero: "Detected" },
                    counting_encharge: { one: "Detected", other: "Detected", zero: "Detected" },
                    counting_microinverters: { one: "Detected", other: "Detected", zero: "Detected" },
                    counting_nsr: { one: "Detected", other: "Detected", zero: "Detected" },
                },
                producing_power: {
                    counting_acb: { one: "Operating", other: "Operating", zero: "Operating" },
                    counting_encharge: { one: "Operating", other: "Operating", zero: "Operating" },
                    counting_microinverters: { one: "Producing Power", other: "Producing Power", zero: "Producing Power" },
                    counting_nsr: { one: "Operating", other: "Operating", zero: "Operating" },
                },
                profile_set: {
                    counting_acb: { one: "Configured", other: "Configured", zero: "Configured" },
                    counting_encharge: { one: "Configured", other: "Configured", zero: "Configured" },
                    counting_microinverters: { one: "Profile Set", other: "Profile Set", zero: "Profile Set" },
                    counting_nsr: { one: "Configured", other: "Configured", zero: "Configured" },
                },
                total: {
                    counting_acb: { one: "AC Battery", other: "AC Batteries", zero: "AC Batteries" },
                    counting_encharge: { one: "Encharge Battery", other: "Encharge Batteries", zero: "Encharge Batteries" },
                    counting_microinverters: { one: "Microinverter", other: "Microinverters", zero: "Microinverters" },
                    counting_nsr: { one: "Q Relay", other: "Q Relays", zero: "Q Relays" },
                },
            },
            nsr: {
                detected_total_count: "%{detected_count} of %{total_count}",
                profile_label: "Profile",
                profile_not_set: "Not Configured",
                profile_set: "Configured",
                relay_state_closed: "Closed",
                relay_state_label: "State",
                relay_state_open: "Open",
                section_title: "Q Relay",
            },
            power_exporting: "Exporting to Grid",
            power_importing: "Importing from Grid",
            production: "Production",
            production_meter_label: "Production",
            profile: "Profile",
            scan_modal: {
                description: "No microinverters have been detected. Do you want to start a device scan?",
                description_battery: "No batteries have been detected. Do you want to start a device scan?",
                description_both: "No microinverters or batteries have been detected. Do you want to start a device scan?",
                description_nsr: "No Q-Relays have been detected. Do you want to start a device scan?",
                scan_timeout_description:
                    "<p>Only %{detected_count} of %{target_count} microinverters have been detected. Do you want to restart the device scan to discover the remaining microinverter(s) or <a href='#' class='open-target-count'>change the number of microinverters expected</a>?</p>",
                scan_timeout_description_battery: "<p>Only %{detected_count} of %{target_count} batteries have been detected.",
                scan_timeout_description_battery_second: {
                    one: "Do you want to restart the device scan to discover the remaining battery or <a href='#' class='open-target-count'>change the number of batteries expected</a>?</p>",
                    other: "Do you want to restart the device scan to discover the remaining batteries or <a href='#' class='open-target-count'>change the number of batteries expected</a>?</p>",
                },
                scan_timeout_description_both:
                    "<p>Only %{detected_count_micro} of %{target_count_micro} microinverters and %{detected_count_battery} of %{target_count_battery} batteries have been detected. Do you want to restart the device scan to discover the remaining devices or <a href='#' class='open-target-count'>change the number of devices expected</a>?</p>",
                scan_timeout_description_micro: "<p>Only %{detected_count} of %{target_count} microinverters have been detected.",
                scan_timeout_description_micro_second: {
                    one: "Do you want to restart the device scan to discover the remaining microinverter or <a href='#' class='open-target-count'>change the number of microinverters expected</a>?</p>",
                    other: "Do you want to restart the device scan to discover the remaining microinverters or <a href='#' class='open-target-count'>change the number of microinverters expected</a>?</p>",
                },
                scan_timeout_title: "Restart Device Scan?",
                title: "Start Device Scan?",
            },
            scan_state: { active: "Scan Active", inactive: "Scan Inactive", scan_inhibited: "Scan Inhibited" },
            set_expected: { error: "Value must be a number between 1 and 600.", label: "Enter the number of microinverters that you expect to report to this Envoy.", prompt: "# Microinverters" },
            set_expected_acb: { error: "Value must be a number between 0 and 39.", label: "Enter the number of AC Batteries that you expect to report to this Envoy.", prompt: "# AC Batteries" },
            set_expected_nsr: { error: "Value must be a number between 0 and 3.", label: "Enter the number of Q Relays that you expect to report to this Envoy.", prompt: "# Q Relays" },
            software_version: "Software Version",
            stat_title: "Power & Energy",
            storage: "Storage",
            tariff_rate_structure: "Tariff/Rate Structure",
        },
        pending: "(pending...)",
        power: {
            charging: "Charging",
            description: "Microinverters will produce power as long as there is sufficient sunlight and the utility grid is within allowable voltage and frequency ranges (as specified by local regulation).",
            discharging: "Discharging",
            idle: "Idle",
            last_report: "Last Report:",
            not_operating: "Not Operating",
            not_producing: "Not Producing",
            operating: "Operating",
            producing: "Producing Power",
            title: "Microinverters Producing Power",
        },
        profiles: {
            ac_batteries: {
                configuration_label: "Configuration",
                false: "No",
                no_profile_description: "You must provide the following information to configure the batteries before they will begin to operate.",
                no_profile_warning: "The grid profile you select here will also be applied to the Enpower, Microinverters, and Encharges installed with this system.",
                profile_complete: "Configuration Complete",
                profile_incomplete: "Configuration Incomplete",
                profile_propagating: "Configuring Batteries",
                true: "Yes",
            },
            apply: "Apply Grid Profile",
            config_batteries: "Configure Batteries",
            country_label: "Country Regulatory Specification",
            encharge_batteries: {
                configuration_label: "Configuration",
                no_profile_description: "You must provide the following information to configure the batteries before they will begin to operate.",
                no_profile_warning: "The grid profile you select here will also be applied to the Enpower, Microinverters, and AC Batteries installed with this system.",
                profile_complete: "Configuration Complete",
                profile_incomplete: "Configuration Incomplete",
                profile_propagating: "Configuring Batteries",
            },
            enpowers: {
                no_profile_description: "You must provide the following information to configure the enpower before it will begin to operate.",
                no_profile_warning: "The grid profile you select here will also be applied to the Microinverters, AC Batteries and Encharges installed with this system.",
                profile_complete: "Configuration Complete",
                profile_incomplete: "Configuration Incomplete",
                profile_propagating: "Configuring Enpower",
            },
            eu_no_profile_description: "You must select a location-specific grid profile before the microinverters will begin producing power.",
            eu_no_profile_label: "No Profile",
            eu_no_profile_vogel_description: "You must select a location-specific grid profile.",
            microinverters: {
                configuration_label: "Configuration",
                no_profile_warning: "The grid profile you select here will also be applied to the Enpower, AC Batteries and Encharges installed with this system.",
                profile_complete: "Propagation Complete",
                profile_incomplete: "Propagation Incomplete",
                profile_propagating: "Propagating Profile",
            },
            na_no_profile_description: "The microinverters are using the factory-installed grid profile settings. You can select a location-specific grid profile below.",
            na_no_profile_label: "Factory Installed Settings",
            no_profile_warning: "The grid profile you select here will also be applied to the Enpower, Microinverters, AC Batteries and Encharges installed with this system.",
            no_profiles: "There are no profiles available. You must either connect this Envoy to the Internet and select via Enlighten, or use Installer Toolkit to download a profile package and upload to this Envoy.",
            no_profiles_info:
                "If this system requires a location-specific grid profile, you must either connect this Envoy to the Internet and select via Enlighten, or use Installer Toolkit to download a profile package and upload to this Envoy.",
            nsrs: {
                configuration_label: "Configuration",
                no_profile_warning: "The grid profile you select here will also be applied to the Enpower, Microinverters, AC Batteries and Encharges installed with this system.",
                profile_complete: "Propagation Complete",
                profile_incomplete: "Propagation Incomplete",
                profile_propagating: "Propagating Profile",
            },
            profile_complete: "Propagation Complete",
            profile_incomplete: "Propagation Incomplete",
            profile_label: "Grid Profile",
            profile_propagating: "Propagating Profile",
            title: "Grid Profile",
            tpm_state: { 0: "Pending", 1: "Propagating", 2: "Profile Set", 3: "Unsettable", 4: "Failed", 5: "Upgrading", 6: "ALT-V/F" },
        },
        public_nav: {
            change_password: "Change Password",
            copyright_html: "&copy;2008-%{current_year} Enphase Energy Inc. All rights reserved.",
            enphase: "Enphase Energy",
            installer_login: "Installer Login",
            language: "Language",
            privacy: "Privacy",
            settings: "Settings",
            terms: "Terms",
        },
        select2: {
            format_matches: { counting: { one: "One result is available, press enter to select it.", other: "%{count} results are available, use up and down arrow keys to navigate." } },
            input_too_long: { counting: { one: "Please delete %{count} character", other: "Please delete %{count} characters" } },
            input_too_short: "Please enter %{count} or more characters",
            loading_more: "Loading more results...",
            no_matches: "No matches found for %{term}",
            no_results: "No matches found",
            searching: "Searching...",
            selection_too_big: { counting: { one: "You can only select %{count} item.", other: "You can only select %{count} items." } },
        },
        serial_number: "Serial Number",
        system: {
            power_control: {
                disabled_desc: "Power Production Disabled",
                enabled_desc: "Power Production Enabled",
                modal: {
                    desc_set_off: "This will <strong>disable</strong> system power production.",
                    desc_set_on: "This will <strong>enable</strong> system power production.",
                    title: "System Power Control",
                    verify: "Are you sure this is what you want?",
                },
            },
        },
        tariff: {
            add_peak: "Add Peak %{num}",
            add_tier: "Add Tier %{num}",
            base_rate_label: "Base Rate",
            baseline: "Baseline",
            charge_at_night: "Charge batteries from the grid at night",
            chg_at_night_desc: "Enable this option to set the batteries to charge from the grid during nighttime.",
            config_details: "Configuration Details",
            day_names: ["Weekday", "Weekend"],
            greater_than: "Greater than",
            hour_connector: "to",
            month_connector: "through",
            not_set: "Not Set",
            off_peak_label: "Off-Peak",
            peak_hours_label: "Peak %{num} Hours",
            peak_label: "Peak %{num}",
            peak_rate_label: "Peak %{num} Rate",
            peak_start_time: "Peak Start Time:",
            per_day: "per day",
            per_month: "per month",
            percent_of_baseline: "% of Baseline",
            remove: "Remove",
            seasonal_rate_desc: "Enable this option if rate differs between seasons.",
            seasonal_select_label: "Rate differs between seasons",
            select_type: "Select Type",
            single_rate: "Single Rate",
            summer_rate_label: "Summer",
            tariff_rate_title: "Tariff/Rate Structure",
            tariff_type_warning: "For a Time of Use tariff/rate structure you must provide at least one peak rate. If there is no peak rate, select Single Rate instead of Time of Use.",
            tier: "Tier %{num}",
            tiered: "Tiered",
            time_of_use: "Time of Use",
            unit_label: "kWh",
            up_to: "Up to",
            weekday_add_peak: "Add Weekday Peak %{num}",
            weekday_base_rate_label: "Weekday Base Rate",
            weekday_off_peak_rate_label: "Weekday Off-Peak Rate",
            weekday_peak_hours_label: "Weekday Peak %{num} Hours",
            weekday_peak_rate_label: "Weekday Peak %{num} Rate",
            weekdays_label: "Weekday",
            weekdays_rate_label: "Weekday",
            weekend_add_peak: "Add Weekend Peak %{num}",
            weekend_base_rate_label: "Weekend Base Rate",
            weekend_label: "Weekend",
            weekend_off_peak_rate_label: "Weekend Off-Peak Rate",
            weekend_peak_hours_label: "Weekend Peak %{num} Hours",
            weekend_peak_rate_label: "Weekend Peak %{num} Rate",
            weekend_rate_desc: "Enable this option if rate differs between weekdays and weekends.",
            weekend_select_label: "Rate differs between weekday and weekend",
            winter_months_desc: "To set Winter, select Summer months above.",
            winter_rate_label: "Winter",
            zero_not_allowed: "Zero is not a valid value",
        },
        wifi: {
            ap_mode_config: {
                confirm_switch_modal: { description: "This may interrupt communications with the Envoy and require you to re-connect.", title_false: "Disable AP Mode?", title_true: "Enable AP Mode?" },
                description_disabled: "Enable AP mode to allow this Envoy to operate as a wireless Access Point (AP). This will allow wireless devices in the vicinity to connect to the Envoy.",
                description_enabled: "This Envoy is currently operating as a wireless Access Point (AP).",
                disable: "Disable AP Mode",
                enable: "Enable AP Mode",
                time_remaining: { one: "Time Remaining: %{count} hour %{minutes} mins", other: "Time Remaining: %{count} hours %{minutes} mins", zero: "Time Remaining: %{count} hours %{minutes} mins" },
                title_disabled: "AP Mode Disabled",
                title_enabled: "AP Mode Enabled",
            },
            available_networks: "Available Networks",
            connect: {
                confirm_connect: "Confirm Network",
                connect_to_site: "Connect to %{site_name}?",
                connect_warning: "Note: This may interrupt communications with the Envoy and require you to re-connect.",
                connection_failure_explanation: "Unable to connect to network %{site_name}.",
                wait_join: "Please wait while the Envoy connects to %{site_name}...",
            },
            connect_incomplete: { description: "It's taking longer than expected to confirm a connection to %{site_name}. If the network connection was not successful, please try again.", title: "Sorry..." },
            connect_success: {
                description:
                    "<p>The Envoy has successfully connected to %{site_name}.</p><p><a href='#' class='open-overview'>Return to Overview.</a></p><p>Note: It may take up to a minute before the Enlighten connection status is updated.</p>",
                title: "Successfully Connected",
            },
            connection_lost: "This device has lost its connection to the Envoy.",
            connection_status: { attempting_to_connect: "Attempting to connect...", connecting: "Connecting...", connection_lost: "Connection Lost", failed: "Connection Failed", not_connected: "Not connected" },
            country_config: {
                description: "Select your country (ISO 3166-1 alpha-2 code) to optimize Wi-Fi signal strength in accordance with your national regulatory agency.",
                optional: "(optional)",
                select_prompt: "Select Country",
                title: "Country",
                update: "Update Country",
            },
            current_connection: "Connected to <span class='network_name'>%{network_name}</span>",
            enter_password: "Enter the password for %{site_name}.",
            forget: {
                forget_network_header: 'Forget Wi-Fi Network "%{network_name}"?',
                forget_warning: "Note: This may interrupt communications with the Envoy and require you to re-connect.",
                ok_to_forget: "This Envoy will no longer use this network to connect to Enlighten.",
                wait_forget: "Please wait while the Envoy forgets the network...",
            },
            forget_failed: { description: "Attempt to forget the Wi-Fi Network failed. If this continues, contact customer support.", title: "Sorry..." },
            forget_incomplete: {
                description:
                    "It's taking longer than expected to confirm forget Wi-Fi Network. Due to this, it is unlikely that your Envoy can still communicate with this application. Please check the network settings on your device and then reconnect to the Envoy.",
                title: "Sorry...",
            },
            gateway_ip: "Gateway IP: ",
            ip_address: "IP Address: ",
            join_another_network: { button: "Select Another Network", title: "Select Another Network" },
            join_network: { button: "View Networks", title: "Select Network" },
            network_changed_explanation:
                "The network connection on your device has changed. Due to this it is unlikely that your Envoy can still communicate with this application. Please check the network settings on your device and then reconnect to the Envoy.",
            network_changed_title: "Network Connection Changed",
            no_networks_found: "No networks found",
            not_configured_prompt: "Select a wireless network for this Envoy to use to connect to Enlighten.",
            other_network: {
                confirm_switch_modal: { description: "This may interrupt communications with the Envoy and require you to re-connect.", title: "Connect to Other Network?" },
                connect: "Connect",
                description: "Connect to an access point which is not configured to broadcast its ESSID.",
                name: "Name (ESSID)",
                password: "Password",
                security: "Security",
                security_mode: { None: "None", WEP: "WEP", "WPA-PSK": "WPA Personal", "WPA2-PSK": "WPA2 Personal" },
                title: "Connect Other Network",
                wpa_algorithm: "WPA Algorithm",
                wpa_algorithm_type: { CCMP: "CCMP", None: "None", TKIP: "TKIP", "TKIP+CCMP": "TKIP + CCMP" },
            },
            page_title: "Wi-Fi Configuration",
            password_required: "Password Required",
            please_wait: "Please Wait",
            title: "Wi-Fi Network",
            unsupported_site: "Unsupported Network",
            unsupported_site_explanation: "This network uses a security method that is not supported by the Envoy.",
            wifi: "Wi-Fi",
            wifi_hardware_missing: "Wi-Fi hardware not found",
            wifi_waiting_note: "This process may take up to 3 minutes, and you may need to reconnect to the Envoy once it completes.",
        },
        wireless_connection: { connected: "Connected", last_report: "Last Report:", not_connected: "Not Connected", signal_strength: "Signal Strength:", subghz: "Sub GHz", title: "Wireless Connection Links", zigbee_2_4: "2.4 GHz" },
    },
    lwui: {
        admin: {
            cross_domain_traffic: { status_msgs: { cross_domain_traffic: "Cross domain traffic reported", no_cross_domain_traffic: "No cross domain traffic reported", updated: "Updated" } },
            network_connectivity: {
                error_msgs: {
                    bad_device_ip: "Bad device IP address and/or network mask.",
                    bad_gateway_address: "Bad gateway IP address.",
                    gateway_subnet: "Gateway IP address not within subnet %{subnet}",
                    invalid_primary_dns: "Primary DNS address is not a valid IP address.",
                    invalid_secondary_dns: "Secondary DNS address is not a valid IP address.",
                },
            },
            security_admin: {
                status_msg: {
                    new_confirm_password_mismatch: "New and confirm password do not match",
                    old_password_mismatch: "Old password not correct",
                    password_file_missing: "Administrator password file(s) missing",
                    password_update_failure: "Password update failed",
                    password_update_failure_error: "Error: Password change failed",
                    password_update_successful: "Password update successful",
                },
            },
            wireless_connectivity: {
                advanced_settings: {
                    button_apply: "Apply",
                    regulatory_domain: "Country Code (ISO 3166-1 Alpha-2)",
                    regulatory_legend: "Select your country from this list.  This defines the permissible radio frequencies and transmission strength in accordance with your national regulatory agency.",
                },
                ap_mode: { active: "active", inactive: "inactive", name: "AP name:", start: "Start AP Mode", status: "AP Mode status:", stop: "Stop AP Mode", timeout: "minutes to AP timeout:" },
                busy_joining: "Attempting to Connect to the Network",
                busy_scanning: "Scanning for Wi-Fi Networks",
                busy_testing: "Testing Connection",
                connection_test: { failed: "Connection test failed.  Please check your settings.", successful: "Connection test was successful.  You may join the network." },
                current_settings: {
                    dhcp_waiting: "Requesting DHCP address from Wi-Fi Network",
                    forget_network: "Forget this Network",
                    label_gateway_ip: "Gateway IP",
                    link_status: "Status",
                    no_config: "No Wi-Fi connection is configured",
                    no_device: "No compatible Wi-Fi device detected",
                    status_connected: "Connected",
                    status_connecting: "Establishing connection",
                    status_stopped: "Wi-Fi stopped",
                    unavailable: "unavailable",
                    verified_config: "Verified Wi-Fi Network",
                },
                device_information: {
                    device: "Device",
                    driver_name: "Driver Name",
                    hw_version: "Hardware Version",
                    mac_address: "MAC Address",
                    manufacturer: "Manufacturer",
                    model: "Model",
                    usb_slot_num: "USB Slot #",
                    usb_spec_version: "USB Specification Version",
                    vendor: "Vendor",
                },
                forget_msg: "This action will delete the current wireless configuration and drop the connection.  If you are connected wirelessly, your connection to the Envoy will be lost.",
                legend_advanced_settings: "Advanced Settings",
                legend_ap_mode: "Envoy AP Mode",
                legend_current_settings: "Current Wi-Fi Settings",
                legend_device_information: "Device Information",
                legend_manual_configuration: "Manual Configuration",
                legend_site_survey: "Available Wi-Fi Networks",
                manual_configuration: {
                    algorithm: "WPA Algorithm",
                    button_clear: "Clear Form",
                    button_connect: "Join Network",
                    button_test: "Test Connection",
                    channel: "Wireless Channel",
                    essid_length: "The ESSID must be 1 to 32 characters long",
                    info_msg: "The following settings are necessary only for connecting with an access point which is not configured to broadcast its ESSID.",
                    mhz: "MHz",
                    network_name: "Wireless Network Name (ESSID)",
                    password: "Password/PSK",
                    password_unneeded: "A password is unnecessary for an open system",
                    password_wep: "WEP keys must be either 10, 26, or 58 hexadecimal digits",
                    password_wep_chars: "WEP keys must be comprised of only numbers and the letters A-F",
                    password_wpa: "WPA/WPA2-PSK passwords must be at least 8 and no greater than 63 characters",
                    security_mode: "Wireless Security Mode",
                },
                site_survey: { button_rescan: "Re-Scan", info_msg: "Select a network from the list.", none_found: "No networks found" },
                test_msg: "The Wi-Fi connection will now be tested to confirm that the settings are valid.  The current connection to the Envoy will be lost temporarily during the connection test.",
            },
        },
        home: {
            event_tbl_col_hdr: { date: "Date", details: "Details", device: "Device", event: "Event", eventId: "Event Id" },
            warnings: {
                acb_critical_temp: "An elevated internal temperature is detected in one or more of the AC Batteries. Check the Installation and Operation Manual for instructions.",
                acb_needs_meters: "An Envoy-S with metering is required to complete system commissioning. AC Batteries requiring metering have been detected, and this Envoy-S does not have metering.",
                acdisco_active: "AC disconnect active. Envoy cannot communicate with microinverters.",
                acdisco_fail: "AC disconnect failure. Check AC disconnect relay.",
                both_meter_enabled: "Both the production and consumption meters must be enabled to complete system commissioning.",
                check_date_warn_msg:
                    "The system time is invalid.  Until this is corrected the Envoy will not be able to communicate with microinverters.  If the Envoy is not configured to use NTP, or is not able to contact the configured NTP servers, this will need to be corrected manually via the <a href='/admin/lib/date_time_display'> Date and Time Administration controls.</a>",
                cross_domain_traffic: "Communications from other Envoy(s) have been detected.",
                date_invalid: "The system time is invalid. Connect the Envoy to the Internet so that its time can be set correctly.",
                db_warn_msg: "The Envoy has not been able to send data to Enlighten, and local storage is nearly full. Connect the Envoy to the Internet to avoid data loss.",
                eim_consumption_check_wiring: "The power consumption meter is not properly connected. Please check the wiring.",
                eim_production_check_wiring: "The power production meter is not properly connected. Please check the wiring.",
                envoy_needs_meters: "An Envoy-S with metering is required to complete system commissioning. A grid profile requiring metering has been selected, and this Envoy-S does not have metering.",
                legend: "Warning",
                no_enlighten_report: "The system has never reported to Enlighten. Connect the Envoy to the Internet to establish a connection with Enlighten.",
                no_phase_assignment: "AC Batteries must be assigned to phases to complete system commissioning.",
                pcu_limit_warn_msg: "The number of microinverters detected exceeds the Envoy\u2019s Monitoring Configuration. Contact Enphase Energy Customer Support.",
                pcu_limit_warn_msg2: "The number of microinverters detected exceeds the Envoy's default Monitoring Configuration.  The Envoy requires an Internet connection to set the Monitoring Configuration.",
                pel_profile_requires_meters: "The production and consumption meters must be configured to support power export limiting.",
                phase_assoc_failed: "Phase detection failed. Check the Installation and Operation Manual for instructions.",
                pim_profile_requires_meters: "Multi-phase production and consumption metering must be enabled to support phase imbalance management and loss of phase detection.",
            },
        },
    },
    number: {
        currency: { format: { delimiter: ",", format: "%u %n", precision: 2, separator: ".", significant: !1, strip_insignificant_zeros: !1, unit: "$" } },
        format: { delimiter: ",", precision: 3, separator: ".", significant: !1, strip_insignificant_zeros: !1 },
        human: {
            decimal_units: { format: "%n %u", units: { billion: "Billion", million: "Million", quadrillion: "Quadrillion", thousand: "Thousand", trillion: "Trillion", unit: "" } },
            format: { delimiter: "", precision: 3, significant: !0, strip_insignificant_zeros: !0 },
            storage_units: { format: "%n %u", units: { byte: { one: "Byte", other: "Bytes" }, gb: "GB", kb: "KB", mb: "MB", tb: "TB" } },
        },
        percentage: { format: { delimiter: "" } },
        precision: { format: { delimiter: "" } },
    },
    scripts: { data: { verify_internet_connection_message: "Your system has never reported to Enlighten. Verify the Internet connection." } },
    time: {
        am: "AM",
        formats: {
            default: "%m/%d/%Y %I:%M %p",
            default_date_time_no_pad: "%m/%d/%Y %-I:%M %p",
            hour_meridian: "%-I %p",
            long: "%B %d, %Y %H:%M",
            noday_nozone_datetime_secs_ui: "%d %b, %Y %-I:%M:%S %p",
            noday_nozone_datetime_ui: "%b %d, %Y %-I:%M %p",
            nozone_datetime: "%a %b %d, %Y %I:%M %p",
            short: "%d %b %H:%M",
            short_date: "%m/%d/%Y",
            time_only: "%-I:%M %p",
        },
        pm: "PM",
    },
    units: {
        amps: "A",
        bool: "Boolean",
        degrees: "degrees",
        hertz: "Hz",
        hertz_per_sec: "Hz / s",
        lagging: "Lagging",
        milliseconds: "ms",
        millivolts: "mV",
        none: "",
        percent: "%",
        percent_per_hertz: "% / Hz",
        percent_per_min: "% / min",
        seconds: "s",
        volts: "V",
    },
};
I18n.translations["en-AU"] = {
    date: {
        abbr_day_names: "Sun Mon Tue Wed Thu Fri Sat".split(" "),
        abbr_month_names: [null, "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        day_names: "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),
        formats: { default: "%Y-%m-%d", long: "%B %e, %Y", only_day: "%e", short: "%e %b" },
        month_names: [null, "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        order: ["year", "month", "day"],
    },
    envoy: {
        cond_flags: {
            acb_ctrl: {
                bmudatabounds: "BMU Data Bounds Error",
                bmuhardwareerror: "BMU Hardware Error",
                bmuimageerror: "BMU Image Error",
                bmumaxcurrentwarning: "BMU Max Current Warning",
                bmusenseerror: "BMU Sense Error",
                cellmaxtemperror: "Cell Max Temperature Error",
                cellmaxtempwarning: "Cell Max Temperature Warning",
                cellmaxvoltageerror: "Cell Max Voltage Error",
                cellmaxvoltagewarning: "Cell Max Voltage Warning",
                cellmintemperror: "Cell Min Temperature Error",
                cellmintempwarning: "Cell Min Temperature Warning",
                cellminvoltageerror: "Cell Min Voltage Error",
                cellminvoltagewarning: "Cell Min Voltage Warning",
                cibcanerror: "CIB CAN Error",
                cibimageerror: "CIB Image Error",
                cibspierror: "CIB SPI Error",
            },
            nsrb_ctrl: {
                acfreqhigh: "AC Frequency High",
                acfreqlow: "AC Frequency Low",
                acfrequencyoor: "AC Frequency Out Of Range",
                acvoltageavgline1: "AC Voltage Avg Out Of Range - Phase 1",
                acvoltageavgline2: "AC Voltage Avg Out Of Range - Phase 2",
                acvoltageavgline3: "AC Voltage Avg Out Of Range - Phase 3",
                acvoltagehighline1: "AC Voltage High - Phase 1",
                acvoltagehighline2: "AC Voltage Out Of Range - Phase 2",
                acvoltagehighline3: "AC Voltage High - Phase 3",
                acvoltagelowline1: "AC Voltage Low - Phase 1",
                acvoltagelowline2: "AC Voltage Out Of Range - Phase 2",
                acvoltagelowline3: "AC Voltage Low - Phase 3",
                acvoltageoorline1: "AC Voltage Out Of Range - Phase 1",
                acvoltageoorline2: "AC Voltage Out Of Range - Phase 2",
                acvoltageoorline3: "AC Voltage Out Of Range - Phase 3",
                buttonpress: "Button Pressed",
                dcgriderror: "DC Grid Current Error",
                dcgridhigh: "DC Grid Current High",
                dcgridlow: "DC Grid Current Low",
                relayforced: "Relay Forced",
                relayopen: "Relay Open",
                rocof: "Rate of Change of Frequency Error",
            },
            obs_strs: {
                discovering: "Discovering",
                failure: "Failure to report",
                flasherror: "Flash Error",
                notmonitored: "Not Monitored",
                ok: "Normal",
                plmerror: "PLM Error",
                secmodeenterfailure: "Secure mode enter failure",
                secmodeexitfailure: "Secure mode exit failure",
                sleeping: "Sleep Mode On",
                verifing: "Verifying Device",
            },
            pcu_chan: {
                acMonitorError: "AC Monitor Error",
                acfrequencyhigh: "AC Frequency High",
                acfrequencylow: "AC Frequency Low",
                acfrequencyoor: "AC Frequency Out Of Range",
                acvoltage_avg_hi: "AC Voltage Average High",
                acvoltagehigh: "AC Voltage High",
                acvoltagelow: "AC Voltage Low",
                acvoltageoor: "AC Voltage Out Of Range",
                acvoltageoosp1: "AC Voltage Out Of Range - Phase 1",
                acvoltageoosp2: "AC Voltage Out Of Range - Phase 2",
                acvoltageoosp3: "AC Voltage Out Of Range - Phase 3",
                agfpowerlimiting: "AGF Power Limiting",
                dcresistancelow: "DC Resistance Low",
                dcresistancelowpoweroff: "DC Resistance Low - Power Off",
                dcvoltagetoohigh: "DC Voltage Too High",
                dcvoltagetoolow: "DC Voltage Too Low",
                dfdt: "AC Frequency Changing too Fast",
                gfitripped: "GFI Tripped",
                gridgone: "Grid Gone",
                gridinstability: "Grid Instability",
                gridoffsethi: "Grid Offset Hi",
                gridoffsetlow: "Grid Offset Low",
                hardwareError: "Hardware Error",
                hardwareWarning: "Hardware Warning",
                highskiprate: "High Skip Rate",
                invalidinterval: "Invalid Interval",
                pwrgenoffbycmd: "Power generation off by command",
                skippedcycles: "Skipped Cycles",
                vreferror: "Voltage Ref Error",
            },
            pcu_ctrl: {
                alertactive: "Alert Active",
                altpwrgenmode: "Alternate Power Generation Mode",
                altvfsettings: "Alternate Voltage and Frequency Settings",
                badflashimage: "Bad Flash Image",
                bricked: "No Grid Profile",
                commandedreset: "Commanded Reset",
                criticaltemperature: "Critical Temperature",
                "dc-pwr-low": "DC Power Too Low",
                iuplinkproblem: "IUP Link Problem",
                manutestmode: "In Manu Test Mode",
                nsync: "Grid Perturbation Unsynchronized",
                overtemperature: "Over Temperature",
                poweronreset: "Power On Reset",
                pwrgenoffbycmd: "Power generation off by command",
                runningonac: "Running on AC",
                "sleep-mode": "Sleep Mode On",
                tpmtest: "Transient Grid Profile",
                unexpectedreset: "Unexpected Reset",
                watchdogreset: "Watchdog Reset",
            },
            rgm_chan: { check_meter: "Meter Error", power_quality: "Poor Power Quality" },
        },
        global: {
            cleared: "Clear",
            copyright_notice: "2007-2014, [e] Enphase Energy, Inc. All rights reserved.",
            copyright_notice_01: "[e] Enphase Energy, Inc. All rights reserved.",
            cs_phone_number: "XXX-XXX-XXXX",
            disable: "Disable",
            disabled: "Disabled",
            enable: "Enable",
            enabled: "Enabled",
            enlighten_token_link: "Get the token here",
            false: "False",
            none: "None",
            notapplicable: "n/a",
            ok: "OK",
            page_not_found_msg1: "Page Not Found",
            page_not_found_msg2: "The page you tried to view does not exist",
            page_not_found_msg3: 'Try the <a href="/">home</a> page',
            serialnumber: "Serial Number",
            set: "Set",
            too_many_installer_sessions_msg1: "Too many installer sessions active",
            too_many_installer_sessions_msg2: "Consider closing other installer session windows",
            too_many_installer_sessions_msg3: "Too many requests active for this resource, please retry in a couple minutes",
            true: "True",
            unknown: "Unknown",
        },
        paging: {
            all: "All",
            clearchoices: "Reset Table",
            info: "Showing _START_ to _END_ of _TOTAL_ entries",
            infoempty: "Showing 0 to 0 of 0 entries",
            infofiltered: "(filtered from _MAX_ total entries)",
            lengthmenu: "Show _MENU_ entries",
            processing: "Processing...",
            search: "Search:",
            zerorecords: "No matching records found",
        },
    },
    envoy_backbone: {
        ac_batteries: {
            manage_options: {
                active: "Active (%{count})",
                active_count: { counting: { one: "Active (%{count})", other: "Active (%{count})", zero: "Active (%{count})" } },
                deleted: "Deleted (%{count})",
                deleted_count: { counting: { one: "Deleted (%{count})", other: "Deleted (%{count})", zero: "Deleted (%{count})" } },
            },
            max_temp: "Max Temp: ",
            nav: { all: "All", manage: "Manage", status: "Status" },
            no_inverters: "There are no batteries.",
            no_inverters_search: 'No AC Batteries were found matching "%{search_term}".',
            sleep_mode: {
                enable_failed: "The attempt to put the selected batteries into sleep mode failed. Please try again in a few minutes. If this problem continues, contact customer support.",
                prompt_to_cancel: { desc: "A battery must be in sleep mode before it can be safely disconnected.</br></br>Are you sure you want to stop the battery from going into sleep mode?" },
                prompt_to_sleep_modal: {
                    desc: "Batteries must be in sleep mode before they can be safely disconnected.</br></br><b>Note:</b> Batteries will charge or discharge to %{min}-%{max}% state of charge before entering sleep mode.",
                    target_soc_label: "Target State of Charge",
                    target_soc_link_text: "Change target state of charge",
                    warning: "Warning: Once a battery is put into sleep mode it can only be taken out of sleep mode by a professional installer.",
                },
                prompt_to_wake: "A battery must be in sleep mode before it can be safely disconnected.</br></br>Are you sure you want to turn sleep mode off?",
                sleep_btn: "Sleep",
            },
            state_of_charge: "State of Charge: ",
            status_options: {
                cancel_sleep_label: "Stop",
                comm_nocount: "Comm",
                power_nocount: "Operating",
                preparing_to_sleep_text: "Entering Sleep Mode",
                profile_nocount: "Config",
                wake_sleep_label: "Turn Off",
                waking_label: "Exiting Sleep Mode",
            },
        },
        app_title: "Envoy Mobile",
        authentication: {
            authentication_with_authms: "Login with Enphase",
            bad_jwt: "Bad token",
            insert_token_headline: "Token Authentication",
            title: "Authentication",
            token_headline: "Token",
            token_link: "Visit %{auth_authority} to get your token",
            token_submit: "Submit",
            too_many_sessions: "Too many sessions",
            verifying_jwt: "Verifying token",
        },
        buttons: {
            cancel: "Cancel",
            change: "Change",
            close: "Close",
            connect: "Connect",
            edit: "Edit",
            forget: "Forget",
            forget_network: "Forget this Network",
            ok: "OK",
            sleep_off: "Turn Sleep Mode Off",
            sleep_on: "Turn Sleep Mode On",
            start_scan: "Start Scan",
            stop: "Stop",
            update: "Update",
        },
        cellular: {
            carrier: "Carrier",
            connected: "Connected",
            connection_status: "Connection Status",
            iccid: "ICCID (Cell Number)",
            imsi: "IMSI (Subscriber ID)",
            mei: "Modem IMEI Number",
            no_modem: "No cellular modem detected",
            not_connected: "Not Connected",
            page_title: "Cellular Configuration",
        },
        comm_check: {
            communication_level: "Communications Level",
            description: "Check signal strength between the Envoy and the microinverters.",
            devices: "Devices",
            in_progress: "Communications Check in Progress",
            remaining_time: "%{minutes} minutes remaining",
            remaining_time_one: "< 1 minute remaining",
            start: "Start Communications Check",
            stop: "Stop Communications Check",
            title: "Communications Check",
        },
        comms: {
            communicating: "Communicating",
            description: "The Envoy\u2019s list of communicating microinverters includes the serial numbers of all devices that are receiving messages from the Envoy and reporting production and status information.",
            not_communicating: "Not Communicating",
            title: "Microinverters Communicating",
        },
        countries: {
            AD: "Andorra",
            AE: "United Arab Emirates",
            AF: "Afghanistan",
            AG: "Antigua and Barbuda",
            AI: "Anguilla",
            AL: "Albania",
            AM: "Armenia",
            AQ: "Antarctica",
            AR: "Argentina",
            AS: "American Samoa",
            AT: "Austria",
            AU: "Australia",
            AW: "Aruba",
            AZ: "Azerbaijan",
            BA: "Bosnia and Herzegovina",
            BB: "Barbados",
            BD: "Bangladesh",
            BE: "Belgium",
            BF: "Burkina Faso",
            BG: "Bulgaria",
            BH: "Bahrain",
            BI: "Burundi",
            BJ: "Benin",
            BM: "Bermuda",
            BN: "Brunei Darussalam",
            BO: "Bolivia, Plurinational State of",
            BR: "Brazil",
            BS: "Bahamas",
            BT: "Bhutan",
            BV: "Bouvet Island",
            BW: "Botswana",
            BY: "Belarus",
            BZ: "Belize",
            CA: "Canada",
            CC: "Cocos (Keeling) Islands",
            CF: "Central African Republic",
            CG: "Congo",
            CH: "Switzerland",
            CI: "Cd'Ivoire",
            CK: "Cook Islands",
            CL: "Chile",
            CM: "Cameroon",
            CN: "China",
            CO: "Colombia",
            CR: "Costa Rica",
            CV: "Cape Verde",
            CX: "Christmas Island",
            CY: "Cyprus",
            CZ: "Czech Republic",
            DE: "Germany",
            DJ: "Djibouti",
            DK: "Denmark",
            DM: "Dominica",
            DO: "Dominican Republic",
            DZ: "Algeria",
            EC: "Ecuador",
            EE: "Estonia",
            EG: "Egypt",
            EH: "Western Sahara",
            ER: "Eritrea",
            ES: "Spain",
            ET: "Ethiopia",
            FI: "Finland",
            FJ: "Fiji",
            FK: "Falkland Islands (Malvinas)",
            FM: "Micronesia, Federated States of",
            FO: "Faroe Islands",
            FR: "France",
            GA: "Gabon",
            GB: "United Kingdom",
            GD: "Grenada",
            GE: "Georgia",
            GF: "French Guiana",
            GH: "Ghana",
            GI: "Gibraltar",
            GL: "Greenland",
            GM: "Gambia",
            GN: "Guinea",
            GP: "Guadeloupe",
            GQ: "Equatorial Guinea",
            GR: "Greece",
            GS: "South Georgia and the South Sandwich Islands",
            GT: "Guatemala",
            GU: "Guam",
            GW: "Guinea-Bissau",
            GY: "Guyana",
            HK: "Hong Kong",
            HM: "Heard Island and McDonald Islands",
            HN: "Honduras",
            HR: "Croatia",
            HT: "Haiti",
            HU: "Hungary",
            ID: "Indonesia",
            IE: "Ireland",
            IL: "Israel",
            IN: "India",
            IO: "British Indian Ocean Territory",
            IS: "Iceland",
            IT: "Italy",
            JM: "Jamaica",
            JO: "Jordan",
            JP: "Japan",
            KE: "Kenya",
            KG: "Kyrgyzstan",
            KH: "Cambodia",
            KI: "Kiribati",
            KM: "Comoros",
            KN: "Saint Kitts and Nevis",
            KR: "Korea, Republic of",
            KW: "Kuwait",
            KY: "Cayman Islands",
            KZ: "Kazakhstan",
            LA: "Lao People's Democratic Republic",
            LB: "Lebanon",
            LC: "Saint Lucia",
            LI: "Liechtenstein",
            LK: "Sri Lanka",
            LR: "Liberia",
            LS: "Lesotho",
            LT: "Lithuania",
            LU: "Luxembourg",
            LV: "Latvia",
            MA: "Morocco",
            MC: "Monaco",
            MD: "Moldova, Republic of",
            ME: "Montenegro",
            MG: "Madagascar",
            MH: "Marshall Islands",
            ML: "Mali",
            MM: "Myanmar",
            MN: "Mongolia",
            MO: "Macao",
            MP: "Northern Mariana Islands",
            MQ: "Martinique",
            MR: "Mauritania",
            MS: "Montserrat",
            MT: "Malta",
            MU: "Mauritius",
            MV: "Maldives",
            MW: "Malawi",
            MX: "Mexico",
            MY: "Malaysia",
            MZ: "Mozambique",
            NA: "Namibia",
            NC: "New Caledonia",
            NE: "Niger",
            NF: "Norfolk Island",
            NG: "Nigeria",
            NI: "Nicaragua",
            NL: "Netherlands",
            NO: "Norway",
            NP: "Nepal",
            NR: "Nauru",
            NU: "Niue",
            NZ: "New Zealand",
            OM: "Oman",
            PA: "Panama",
            PE: "Peru",
            PF: "French Polynesia",
            PG: "Papua New Guinea",
            PH: "Philippines",
            PK: "Pakistan",
            PL: "Poland",
            PM: "Saint Pierre and Miquelon",
            PN: "Pitcairn",
            PR: "Puerto Rico",
            PT: "Portugal",
            PW: "Palau",
            PY: "Paraguay",
            QA: "Qatar",
            RO: "Romania",
            RU: "Russian Federation",
            SA: "Saudi Arabia",
            SB: "Solomon Islands",
            SC: "Seychelles",
            SE: "Sweden",
            SG: "Singapore",
            SH: "Saint Helena, Ascension and Tristan da Cunha",
            SI: "Slovenia",
            SJ: "Svalbard and Jan Mayen",
            SK: "Slovakia",
            SL: "Sierra Leone",
            SM: "San Marino",
            SN: "Senegal",
            SO: "Somalia",
            SR: "Suriname",
            ST: "Sao Tome and Principe",
            SV: "El Salvador",
            SY: "Syrian Arab Republic",
            SZ: "Swaziland",
            TC: "Turks and Caicos Islands",
            TD: "Chad",
            TF: "French Southern Territories",
            TG: "Togo",
            TH: "Thailand",
            TJ: "Tajikistan",
            TK: "Tokelau",
            TL: "Timor-Leste",
            TM: "Turkmenistan",
            TN: "Tunisia",
            TO: "Tonga",
            TR: "Turkey",
            TT: "Trinidad and Tobago",
            TV: "Tuvalu",
            TZ: "Tanzania, United Republic of",
            UA: "Ukraine",
            UG: "Uganda",
            UM: "United States Minor Outlying Islands",
            US: "United States",
            UY: "Uruguay",
            UZ: "Uzbekistan",
            VA: "Holy See (Vatican City State)",
            VC: "Saint Vincent and the Grenadines",
            VE: "Venezuela, Bolivarian Republic of",
            VG: "Virgin Islands, British",
            VI: "Virgin Islands, U.S.",
            VN: "Viet Nam",
            VU: "Vanuatu",
            WF: "Wallis and Futuna",
            WS: "Samoa",
            YE: "Yemen",
            YT: "Mayotte",
            ZA: "South Africa",
            ZM: "Zambia",
            ZW: "Zimbabwe",
        },
        counts: "%{actual_count}/%{expected_count}",
        detected: {
            battery_target_seperate: { one: "%{count} battery", other: "%{count} batteries", zero: "%{count} batteries" },
            description:
                "The Envoy\u2019s list of detected microinverters includes all serial numbers discovered by a device scan or provisioned with the Installer Toolkit. When microinverters have been detected, they can send and receive additional data from the Envoy.",
            detected: "Detected",
            device_target: "Device Target: %{count}",
            device_target_title: "Device Target: ",
            discovered: "Discovered:",
            installed: "Installed",
            micro_target_seperate: { one: "%{count} microinverter", other: "%{count} microinverters", zero: "%{count} microinverters" },
            nsr_target_separate: { one: "%{count} Q-Relay", other: "%{count} Q-Relays", zero: "%{count} Q-Relays" },
            provisioned: "Provisioned:",
            remaining_duration: { one: "Remaining Duration: %{count} hour %{minutes} mins", other: "Remaining Duration: %{count} hours %{minutes} mins", zero: "Remaining Duration: %{count} hours %{minutes} mins" },
            remaining_hour_one: "1 hour",
            remaining_hours: "%{hours} hours",
            remaining_minute_one: "1 minute remaining",
            remaining_minutes: "%{minutes} minutes remaining",
            remaining_priority: {
                one: "Remaining Priority Duration: %{count} hour %{minutes} mins",
                other: "Remaining Priority Duration: %{count} hours %{minutes} mins",
                zero: "Remaining Priority Duration: %{count} hours %{minutes} mins",
            },
            remaining_time: "%{minutes} minutes remaining",
            remaining_time_one: "< 1 minute remaining",
            scan_inprogress: "Device Scan in Progress",
            scan_start: "Start Device Scan",
            scan_stop: "Stop Scan",
            title: "Microinverters Detected",
        },
        device_alert_messages: {
            meters_not_enabled: "The production and consumption meters must be configured for Batteries to operate.",
            no_phase_assignment: "Batteries will not operate until they are assigned to phases.",
            not_configured: "The Batteries must be configured before they will operate.",
        },
        devices: {
            detected: "Detected",
            detected_total_count: "%{detected_count} of %{total_count}",
            device_info: {
                change_phase: "Change Phase",
                comm_level: "Comm Level: ",
                comm_level_2_4_ghz: "Comm Level (2.4 GHz): ",
                comm_level_sub_ghz: "Comm Level (Sub GHz): ",
                detected: "Detected: ",
                discovered: "Discovered via device scan / Pre Provisioned ",
                grid_profile: "Grid Profile: ",
                last_comm: "Last Communication: ",
                last_report: "Last Report: ",
                notapplicable: "n/a",
                param_table: "Parameter Table: ",
                part_number: "Part Number: ",
                pending_condition_clear: '"%{condition_flag}" clear condition command is in progress.',
                phase: "Phase: ",
                phase_unknown: "No phase selected",
                provisioned: "Assigned via provisioning",
                running_image: "Running Image: ",
                select_phase: "Select Phase",
                status: "Status: ",
                unknown: "Unknown",
                updated: "Updated ",
                view_in_array: "View in Array",
            },
            device_scan: "Device Scan",
            device_scan_short: "Scan",
            scan_state: { active: "Active", inactive: "Inactive", scan_disabled: "Disabled", scan_inhibited: "Inhibited", scan_suspended: "Suspended" },
        },
        encharge_batteries: {
            manage_options: {
                active: "Active (%{count})",
                active_count: { counting: { one: "Active (%{count})", other: "Active (%{count})", zero: "Active (%{count})" } },
                deleted: "Deleted (%{count})",
                deleted_count: { counting: { one: "Deleted (%{count})", other: "Deleted (%{count})", zero: "Deleted (%{count})" } },
            },
            nav: { all: "All", manage: "Manage", status: "Status" },
            no_inverters: "There are no encharge batteries.",
            no_inverters_search: 'No Encharge Batteries were found matching "%{search_term}".',
            phase_labels: { "ph-a": "L1(A)", "ph-b": "L2(B)", "ph-c": "L3(C)", "ph-unk": "No phase selected", "ph-updating": "Updating...", select_one: "Select One" },
            status_options: {
                cancel_sleep_label: "Stop",
                comm_nocount: "Comm",
                power_nocount: "Operating",
                preparing_to_sleep_text: "Entering Sleep Mode",
                profile_nocount: "Config",
                wake_sleep_label: "Turn Off",
                waking_label: "Exiting Sleep Mode",
            },
            title: "Encharge",
        },
        enpowers: {
            manage_options: {
                active: "Active (%{count})",
                active_count: { counting: { one: "Active (%{count})", other: "Active (%{count})", zero: "Active (%{count})" } },
                deleted: "Deleted (%{count})",
                deleted_count: { counting: { one: "Deleted (%{count})", other: "Deleted (%{count})", zero: "Deleted (%{count})" } },
            },
            max_temp: "Max Temp: ",
            nav: { all: "All", manage: "Manage", status: "Status" },
            no_inverters: "There is no Enpower device.",
            no_inverters_search: 'No Enpower device found matching "%{search_term}".',
            state_of_grid: { closed: "Closed", open: "Open", title: "State of Grid: " },
            status_options: { comm_nocount: "Comm", power_nocount: "Operating", profile_nocount: "Config" },
            title: "Enpower",
        },
        errors: {
            error_message: "Sorry, there's a problem getting data from the Envoy. If this continues, contact customer support.",
            interface_not_dhcp: "Sorry, you cannot get a new IP address. Switch the Envoy IP setting to DHCP first.",
            not_allowed: "Sorry, your requested change is not permitted and could not be saved.",
            not_authorized: "Sorry, you are not authorized to view that page.",
            save_failed: "Sorry, your changes could not be saved. ",
            start_scan_target_too_low:
                "<p>You've indicated that you expect %{expected_count} microinverters to report to this Envoy, and %{expected_count} have already been detected.</p><p>Before starting a device scan, <a href='#' class='open-target-count'>increase the number of microinverters expected</a> or delete one or more microinverters from the <a href='#' class='open-manage-devices'>manage devices screen</a>.</p>",
            start_scan_target_too_low_battery: {
                one: "<p>You've indicated that you expect %{count} battery to report to this Envoy, and that has already been detected.</p>",
                other: "<p>You've indicated that you expect %{count} batteries to report to this Envoy, and that many have already been detected.</p>",
                zero: "<p>You've indicated that you expect %{count} batteries to report to this Envoy, and that many have already been detected.</p>",
            },
            start_scan_target_too_low_battery_end:
                "<p>Before starting a device scan, <a href='#' class='open-target-count'>increase the number of batteries expected</a> or delete one or more batteries from the <a href='#' class='open-manage-devices-battery'>manage devices screen</a>.</p>",
            start_scan_target_too_low_both:
                "<p>The expected number of devices have already been detected.</p><p>Before starting a device scan, <a href='#' class='open-target-count'>increase the number of devices expected</a> or delete one or more microinverters or batteries.</p>",
            start_scan_target_too_low_micro: {
                one: "<p>You've indicated that you expect %{count} microinverter to report to this Envoy, and that has already been detected.</p>",
                other: "<p>You've indicated that you expect %{count} microinverters to report to this Envoy, and that many have already been detected.</p>",
                zero: "<p>You've indicated that you expect %{count} microinverters to report to this Envoy, and that many have already been detected.</p>",
            },
            start_scan_target_too_low_micro_end:
                "<p>Before starting a device scan, <a href='#' class='open-target-count'>increase the number of microinverters expected</a> or delete one or more microinverters from the <a href='#' class='open-manage-devices'>manage devices screen</a>.</p>",
            start_scan_target_too_low_nsr: {
                one: "<p>You've indicated that you expect %{count} Q-Relay to report to this Envoy, and that has already been detected.</p>",
                other: "<p>You've indicated that you expect %{count} Q-Relays to report to this Envoy, and that many have already been detected.</p>",
                zero: "<p>You've indicated that you expect %{count} Q-Relays to report to this Envoy, and that many have already been detected.</p>",
            },
            start_scan_target_too_low_nsr_end:
                "<p>Before starting a device scan, <a href='#' class='open-target-count'>increase the number of Q-Relays expected</a> or delete one or more Q-Relays from the <a href='#' class='open-manage-devices-nsr'>manage devices screen</a>.</p>",
            start_scan_title: "Device Scan Unavailable",
            timeout_message:
                "Sorry, it's taking too long to get data from the Envoy. Make sure the Envoy is powered on, and that the Envoy and this device are both connected to the same local network. If the problem continues, contact customer support.",
            title: "Error",
            tunnel_close_failed: "Attempt to close the connection to Enphase support failed. If this continues, contact customer support.",
            tunnel_failed_title: "Connection Failed",
            tunnel_open_failed: "The Envoy must be connected to the Internet to open a connection to Enphase. If the Envoy has an Internet connection and this problem continues, contact customer support.",
        },
        ethernet: {
            buttons: { dhcp: "Use DHCP", new_ip: "Get New IP Address", static: "Use Static IP" },
            confirm_change: { description: "This may interrupt communications with the Envoy and require you to re-connect.", title: "Change Ethernet Configuration?" },
            confirm_static: {
                description: "This will assign the current DHCP IP address and other configurations as static values. If you choose to proceed, you can update these values on the next screen.",
                title: "Change Ethernet Configuration?",
            },
            gateway_ip: "Gateway IP",
            ip_address: "IP Address",
            ip_setting: "IP Setting",
            netmask: "Netmask",
            new_ip_modal: { description: "This may interrupt communications with the Envoy and require you to re-connect.", title: "Get New IP Address?" },
            no_config: "No ethernet connection detected.",
            page_title: "Ethernet Configuration",
            primary_dns: "Primary DNS Server",
            secondary_dns: "Secondary DNS Server",
            type: { dhcp: "DHCP", static: "Static IP" },
        },
        forms: { search: "Search", search_prompt: "Serial Number", select_prompt: "Select One" },
        global_nav: {
            acb: "AC Battery",
            comms: "Comms",
            detected: "Detected",
            encharge: "Encharge",
            encharge_batteries: "Encharge",
            enpower: "Enpower",
            meters: "Meters",
            meters_small: "Meters",
            microinverters: "Microinverters",
            microinverters_short: "Micros",
            more: "More",
            network: "Network",
            nsr: "Q Relays",
            overview: "Overview",
            power: "Power",
            profiles: "Profiles",
        },
        initial_setup: {
            continue: "Continue",
            device_prompt: "Enter the number of devices that you expect to report to this Envoy.",
            eu_profile_prompt: "Select a location-specific grid profile.",
            migration_in_progress_message: "profiles being updated",
            na_profile_prompt: "The system is using the factory-installed grid profile settings. You can select a location-specific grid profile below.",
            system_size: "System Size",
        },
        jquery_validate: {
            messages: {
                addedTierPercent: "Please enter a number\u00a0greater than the percent\u00a0of baseline\u00a0entered for {0}.",
                an_number: "Please enter a valid number.",
                creditcard: "Please enter a valid credit card number.",
                date: "Please enter a valid date.",
                dateISO: "Please enter a valid date (ISO).",
                digits: "Please enter only digits.",
                domain: "Please enter a valid IP v4 address (xxx.xxx.xxx.xxx) or URL (google.com)",
                email: "Please enter a valid email address.",
                equalTo: "Please enter the same value again.",
                ipv4: "Please enter a valid IP v4 address. (xxx.xxx.xxx.xxx)",
                max: "Please enter a value less than or equal to {0}.",
                maxlength: "Please enter no more than {0} characters.",
                min: "Please enter a value greater than or equal to {0}.",
                minlength: "Please enter at least {0} characters.",
                number: "Please enter a valid number.",
                range: "Please enter a value between {0} and {1}.",
                rangelength: "Please enter a value between {0} and {1} characters long.",
                remote: "Please fix this field.",
                required: "This field is required.",
                url: "Please enter a valid URL.",
                wep_key: "Please enter a valid WEP Key (10, 26, or 58 characters, which may include 0-9 or A-F).",
            },
        },
        loading: "Please wait, loading",
        meters: {
            active_energy: "Active Energy",
            active_energy_lt: "Active Energy",
            active_power: "Active Power",
            apparent_energy: "Apparent Energy",
            apparent_power: "Apparent Power",
            consumption: "Consumption Meter",
            consumption_meter: {
                enable_meter: "Enable Consumption Meter",
                measurement_type: "Metered Circuit",
                meter_type_desc: "Does the circuit passing through the consumption CTs include load with solar production or load only?",
                meter_type_desc_singular: "Does the circuit passing through the consumption CT include load with solar production or load only?",
                meter_type_warning: "Be sure that the selections above are correct.",
            },
            current: "Current",
            current_ct: {
                current_ct_settings: "CT Current Settings",
                custom_cts_installed: "Custom %{meter_type} CTs Installed",
                primary: "Primary",
                remove_desc: "Tap OK to confirm that you are using standard Enphase %{meter_type} CTs.",
                remove_settings: "Remove Custom CT Settings?",
                secondary: "Secondary",
                turns: "Turns",
            },
            descriptors: { lifetime: "Lifetime", lifetime_lag: "Lagging (Lifetime)", lifetime_lead: "Leading (Lifetime)", today: "Today", today_lag: "Lagging (Today)", today_lead: "Leading (Today)" },
            enable_consumption_meter: "Enable Consumption Meter",
            enable_consumption_modal: {
                description: "Once you enable this meter, it cannot be disabled and the type cannot be changed.",
                description_mode_three: "Once you enable this meter, you cannot disable it, change the type, or decrease the number of phases.",
                description_mode_three_post_enable: "Once you do this, you will not be able to decrease the number of phases.",
                note_three: "<strong>Note: the number of phases will also be increased on the production meter.</strong>",
                note_three_post_enable: "<strong>Note: the number of phases will also be increased on the production meter.</strong>",
                title: 'Enable Meter with "%{type}" Metering?',
                title_mode_three: "Enable Meter with Metered Circuit: %{type} and Phases Metered: %{phCount}?",
                title_mode_three_post_enable: "Update Phases Metered to %{phCount}?",
            },
            enable_meter: "Enable Consumption Meter",
            enable_modal: { description: "Once you enable this meter, it cannot be disabled and the type cannot be changed.", title: "Enable Meter with %{type} Metering?" },
            enable_production_meter: "Enable Production Meter",
            enable_production_modal: {
                description: "Once you enable this meter, it cannot be disabled.",
                description_mode_three: "Once you enable this meter, you cannot disable it or decrease the number of phases.",
                description_mode_three_post_enable: "Once you do this, you will not be able to decrease the number of phases.",
                note_three: "<strong>Note: the number of phases will also be increased on the consumption meter.</strong>",
                note_three_post_enable: "<strong>Note: the number of phases will also be increased on the consumption meter.</strong>",
                title: "Enable Meter?",
                title_mode_three: "Enable Meter with Phases Metered: %{phCount}?",
                title_mode_three_post_enable: "Update Phases Metered to %{phCount}?",
            },
            enable_production_prompt: "The production meter must be enabled before these readings can be displayed.",
            freq_analysis: { btn_change_data_type: "Toggle Data", plc_activity: "Activity", plc_power_spectrum: "Power Spectrum", power_line_analy: "Power Line Communication Analysis" },
            id: "EID",
            internal_meters: "Internal Meters",
            latest_reading: "Latest Reading",
            lifetime_energy: "Lifetime",
            load_contains_storage_message: "Load readings include storage activity.",
            measurement_type: "Type",
            meter_change_warning: "You cannot change them once the meter is enabled.",
            meter_mode: { single: "Single-Phase (L-N)", split: "Single-Phase (L-L)", three: "Multi-Phase" },
            meter_readings: "Readings",
            meter_state: { disabled: "Disabled", enabled: "Enabled" },
            meter_status: {
                "check-wiring": "Check Wiring",
                meter_setup: "Set up metering now",
                meters_not_enabled: "Meters Not Enabled",
                normal: "Normal",
                "not-metering": "Meter Not Enabled",
                status_flags: {
                    "negative-production": "Production readings are negative. Check CT orientation and leads, compared with voltage connections.",
                    "negative-total-consumption": "Consumption readings are negative. Check CT orientation and leads, compared with voltage connections.",
                    "power-on-unused-phase": "Power detected on an unused phase. Check CT lead connections, compared with voltage connections.",
                    "production-imbalance": "Production not balanced between phases. Check CT lead connections and voltage connections.",
                },
            },
            meter_type: { "net-consumption": "Net", "total-consumption": "Total" },
            meter_type_desc: "If the consumption CTs are on a circuit that solar production flows through, leave type set to <b>Net</b>. If not, change type to <b>Total</b>.",
            meter_type_verbose: { "net-consumption": "Load with solar production", "total-consumption": "Load only" },
            meter_type_warning: "Be sure to set the meter type correctly. You cannot change them once the meter is enabled.",
            mode: "Mode",
            multi_phase_options: { mphase_0: "Not Selected", mphase_1: "L1(A)", mphase_2: "L1(A) + L2(B)", mphase_3: "L1(A) + L2(B) + L3(C)" },
            multi_phase_warning: {
                consumption: {
                    post_continue: "The meter is not yet enabled. Verify the readings, then tap <strong>Enable Consumption Meter</strong> at the bottom of the screen.",
                    pre_continue: "The meter is not yet enabled. Select the Phases Metered and Metered Circuit, then tap <strong>View Readings</strong>.",
                    pre_continue_one: "The meter is not yet enabled. Select the Metered Circuit, then tap <strong>View Readings</strong>.",
                },
                production: {
                    post_continue: "The meter is not yet enabled. Verify the readings, then tap <strong>Enable Production Meter</strong> at the bottom of the screen.",
                    pre_continue: "The meter is not yet enabled. Select the Phases Metered, then tap <strong>View Readings</strong>.",
                },
            },
            net_consumption_desc: "These readings reflect the difference between the total home load and solar production. They should approximately match the home's utility meter readings.",
            net_consumption_title: "Net Consumption",
            no_consumption: "No consumption meter configured for this Envoy.",
            no_meters: "No meters detected.",
            no_production: "No production meter configured for this Envoy.",
            phase_count: "Phases Metered",
            phase_count_desc: "Select which of the meter phases you have wired.",
            phase_labels: { phase_1: "L1(A)", phase_2: "L2(B)", phase_3: "L3(C)" },
            pmu: {
                add_another: "Add Another",
                add_meter: "Add Power Meter",
                config: {
                    add: "Add Selected Meters",
                    meters_description: "Power meters detected on this network:",
                    network_warning: "Before adding a meter, be sure that the Envoy has an Ethernet connection with a static IP address. This should be configured both on the router and on the Envoy.",
                    no_meters_description:
                        "No power meters detected<div class='alert alert-info'><b>Note:</b> It may take up to an hour for power meters to be detected. To facilitate detection, make sure that the power meter is on the same local subnet as the Envoy.</div>",
                    remove: "Remove Power Meter",
                    title: "Power Meter Configuration",
                },
                labels: { fw_version: "Firmware Version", ip: "IP Address", mac_address: "Mac Address", manufacturer: "Manufacturer", part_number: "Part Number", production: "Production", serial_number: "Serial Number", status: "Status" },
                phase_coupler: "A phase coupler is required for microinverters installed on L2 or L3 to communicate with the Envoy.",
            },
            power_exporting: "(Exporting to Grid)",
            power_factor: "Power Factor",
            power_importing: "(Importing from Grid)",
            production: "Production Meter",
            reactive_energy: "Reactive Energy",
            reactive_power: "Reactive Power",
            single_phase_warning: {
                consumption: {
                    post_continue: "The meter is not yet enabled. Verify the readings, then tap <strong>Enable Consumption Meter</strong> at the bottom of the screen.",
                    pre_continue: "The meter is not yet enabled. Select the Metered Circuit, then tap <strong>View Readings</strong>.",
                },
                production: {
                    post_continue: "The meter is not yet enabled. Verify the readings, then tap <strong>Enable Production Meter</strong> at the bottom of the screen.",
                    pre_continue: "The meter is not yet enabled. Tap <strong>View Readings</strong> to view and verify the readings.",
                },
            },
            status: "Status",
            title: "Meters",
            today_energy: "Today",
            total_consumption_desc: "These readings reflect the total home load.",
            total_consumption_na: "The production meter must be enabled before these readings can be displayed.",
            total_consumption_title: "Total Consumption",
            type: { eim: "Envoy Integrated Meter", pmu: "Power Meter", rgm: "Enphase RGM" },
            unavailable: "n/a",
            update_settings: "Update",
            view_readings: "View Readings",
            wizard: {
                batt_off: { counting: { one: "Make sure the Enphase Battery circuit is switched OFF.", other: "Make sure the Enphase Battery circuits are switched OFF." } },
                battery_reminder: "<b>Remember to switch the Enphase battery circuit on.</b>",
                btn_next: "Next",
                btn_try_again: "Try Again",
                bullet_load_increase: "Did the total home load increase as you expected?",
                bullet_meters_match: "Does the home's utility meter approximately match this reading?",
                bullet_phase_select: "Is solar production flowing to the grid measured by the consumption CT?",
                bullet_pv_on: "Switch ON the PV breakers and wait for the reconnection period to complete. PV should start to produce power in 5 minutes or less, then tap <strong>Next</strong>.",
                bullet_turn_on_load: "Turn on a known load, such as a heat gun, then tap <b>Next</b>.",
                check_meters: "Check<br>Meters",
                check_title: " Check %{meter_type} Meter",
                confirm_ct_routing: "Make sure that all of the home loads are routed through the consumption CTs.",
                consumption_appears_good: "The consumption meter appears to have been configured correctly.",
                consumption_ct_direction: "Check that the arrow on the consumption CTs are pointing in the direction of energy flow toward the load center.",
                consumption_cts_installed: "Did you install consumption CTs?",
                consumption_enable_prompt: "Tap <strong>Enable Consumption Meter</strong> to complete meter setup.",
                consumption_looks_good: "Consumption readings look good!",
                consumption_neg: "Consumption readings are negative. Check the following, then tap <b>Try Again</b>.",
                consumption_not_enabled: "Consumption Meter Not Enabled",
                consumption_phase_sel_net: "Consumption CT includes solar production.",
                consumption_phase_sel_total: "Consumption CT does not include solar production.",
                ct_bw_correct: "Make sure that the blue and white wires are connected to the correct positions in the terminal block.",
                desc: "Use our step-by-step wizard to ensure that the internal meters are wired and configured correctly.",
                desc_consumption: "Use our step-by-step wizard to ensure that the consumption meter is wired and configured correctly.",
                desc_production: "Use our step-by-step wizard to ensure that the production meter is wired and configured correctly.",
                done: "Done",
                enable_button: "Enable %{meterType} Meter",
                enough_sun: "Make sure there is enough sunlight reaching the PV modules to power up the microinverters.",
                exit_check: "Are you sure you want to exit the Meter Check?",
                exit_conf: { desc: "Are you sure you want to leave the production meter setup wizard? You'll need to start over if you want to use the wizard again.", neg_button: "Go Back", title: "Exit Wizard?" },
                exit_wizard: "Exit Wizard",
                get_started: "Get Started",
                load_didnt_increase: "Total home load did not increase as expected. Check the following, then tap <b>Try Again</b>.",
                manual_prompt: "Manual Meter Setup",
                most_common: "(Most common setup)",
                negative: "NO",
                phase_select_prompt: "Select the phases metered based on how the Envoy-S is wired: ",
                positive: "YES",
                power_exporting: "Exporting",
                power_importing: "Importing",
                prod_enable_desc1: "Production readings are close to zero, as expected.",
                prod_enable_desc2: "Tap <strong>Enable Production Meter</strong> to complete meter setup.",
                prod_meter_enabled: "The production meter is enabled.",
                prod_su1_pv_on: {
                    counting: {
                        one: "Make sure the PV circuit is switched ON and are producing power (the reconnection period has completed).",
                        other: "Make sure the PV circuits are switched ON and are producing power (the reconnection period has completed).",
                    },
                },
                prod_su2_pv_off: "Switch OFF the PV breakers, then tap <b>Next</b>.",
                prod_ts_p4: {
                    desc: "Production readings are negative. Check the following, then tap Try Again.",
                    ts1: {
                        counting: {
                            one: "Make sure the PV circuit is switched ON and are producing power (the reconnection period has completed).",
                            other: "Make sure the PV circuits are switched ON and are producing power (the reconnection period has completed).",
                        },
                    },
                    ts2: { counting: { one: "Make sure the Enphase Battery circuit is switched OFF.", other: "Make sure the Enphase Battery circuits are switched OFF." } },
                    ts3: {
                        counting: {
                            one: "Check that the arrow on the production CT is pointing in the direction of energy flow toward the load center.",
                            other: "Check that the arrow on the production CTs are pointing in the direction of energy flow toward the load center.",
                        },
                    },
                    ts5: {
                        counting: {
                            one: "Make sure that the wires running through the production CT only include PV generation (and not any loads).",
                            other: "Make sure that the wires running through the production CTs only include PV generation (and not any loads).",
                        },
                    },
                    ts6: "Ensure that the CTs are clamped on the correct phases with respect to the Envoy power terminal.",
                },
                prod_ts_p5: {
                    desc: "Production readings are higher than they should be. Check the following, then tap <b>Try Again</b>.",
                    ts2: {
                        counting: {
                            one: "Make sure that the wires running through the production CT only include PV generation (and not any loads).",
                            other: "Make sure that the wires running through the production CTs only include PV generation (and not any loads). ",
                        },
                    },
                },
                production_not_enabled: "Production Meter Not Enabled",
                pv_off: { counting: { one: "Make sure the PV circuit is switched OFF.", other: "Make sure the PV circuits are switched OFF." } },
                pv_reminder: "<b>Remember to switch the PV circuit on.</b> It will take approximately 5 minutes for the microinverters to report power production.",
                readings_dont_match1: "We're not sure why the readings don't match the home's utility meter. Tap <b>Try Again</b> to change the configuration setting for the location of the consumption CTs to see if that helps.",
                readings_dont_match2: "If that doesn't help, you can exit the wizard and use the <b>Manual Meter Setup</b> option instead. We suggest you contact Enphase Support for assistance before proceeding.",
                readings_dont_match_post: "Please contact Enphase Support for assistance and inform them that you have performed the meter check but the readings still don't match the utility meter.",
                reset_timer: "Reset Timer",
                setup_title: " Set Up %{meter_type} Meter",
                start_timer: "Start Timer",
                stop_timer: "Stop Timer",
                sw_off_batt: { counting: { one: "Switch OFF the Enphase Battery circuit.", other: "Switch OFF the Enphase Battery circuits." } },
                sw_off_pv: "Switch OFF the PV breakers.",
                total_cons_not_reduced: "Turning on the PV circuit didn't reduce total consumption. Check the following, then tap <b>Try Again</b>.",
                total_load: "Total home load",
                trouble_c6_desc1: "If you've followed all of the on-screen instructions and consumption readings are still negative, ",
                trouble_c8_desc1: "If you've followed all of the on-screen instructions and total consumption is still not reduced by turning on the PV circuit, ",
                trouble_desc2: "We suggest you contact Enphase Support at <a href='tel:%{dial_num}'> %{disp_num}</a> for assistance before proceeding.",
                trouble_install_guide: "Please refer to the <strong>Envoy Metered Installation Guide</strong>",
                trouble_manual_prompt: " or you can exit the wizard and use the <strong>Manual Meter Setup</strong> option instead.",
                trouble_p0_5: {
                    desc: {
                        counting: {
                            one: "You've indicated that only %{selected_phases} is metered, but there is power on %{phaseStr}.",
                            other: "You've indicated that only %{selected_phases} are metered, but there is power on %{phaseStr}.",
                        },
                    },
                    ts1: "Check the wiring. Are the phases wired correctly?",
                    ts_no_resp: "Fix the wiring, then tap <b>Try Again</b>.",
                    ts_yes_resp: "Change the phases metered selection to match the wiring, then tap <b>Try Again</b>.",
                },
                trouble_p0_desc1: "If you've followed all of the on-screen instructions and there is still power on an unused phase, ",
                trouble_p4_desc1: "If you've followed all of the on-screen instructions and production readings are still negative, ",
                trouble_p5_desc1: "If you've followed all of the on-screen instructions and production readings are still higher than expected, ",
                trouble_p7_desc1: "If you've followed all of the on-screen instructions and the home load still does not increase as expected, ",
                trouble_prompt: "Having trouble getting past this step?",
                unable_to_see_meter: "If you are not able to access <strong>POWER</strong> readings on the utility meter or measure with a portable meter, then click <strong>Continue</strong>.",
            },
        },
        microinverters: {
            condition_clear: { description: 'This will send a command to clear the "%{condition_flag}" status on this microinverter.', title: "Clear Condition?" },
            manage_options: {
                active: "Active (%{count})",
                active_count: { counting: { one: "Active (%{count})", other: "Active (%{count})", zero: "Active (%{count})" } },
                delete_btn: "Delete",
                deleted: "Deleted (%{count})",
                deleted_count: { counting: { one: "Deleted (%{count})", other: "Deleted (%{count})", zero: "Deleted (%{count})" } },
                restore_btn: "Restore",
            },
            nav: { all: "All", manage: "Manage", status: "Status" },
            no_inverters: "There are no microinverters.",
            no_inverters_search: 'No microinverters were found matching "%{search_term}".',
            phase_labels: { "ph-a": "L1(A)", "ph-b": "L2(B)", "ph-c": "L3(C)", "ph-unk": "No phase selected", "ph-updating": "Updating...", select_one: "Select One" },
            phase_prompt_label: "Select a phase for AC Battery %{serial_num}",
            scan_close: "Close",
            scan_disabled: "Device scanning is currently unavailable due to a conflicting scan running on another Envoy.",
            scan_inhibited: "To add more microinterters to this Envoy, you must use the Installer Toolkit to provision them or contact Enphase Customer support to re-enable device scanning.",
            scan_inprogress: "Device Scan in Progress",
            scan_settings: {
                advanced_options: "More Options",
                device_total: "Device Target",
                device_total_description: "If you enter a device target, Envoy will stop scanning when its detected microinverters total reaches that number.",
                device_total_error_1: "Device total must be between %{already_detected} (the number of devices already detected) and %{device_total_max}.",
                device_total_error_2: "Device total must be greater than %{already_detected} (the number of devices already detected).",
                hours: "hours",
                less_options: "Less Options",
                minutes: "mins",
                optional: "(optional)",
                priority_duration: "Priority Duration",
                priority_duration_description: "If you enter a priority duration, Envoy will make device scanning its only activity for that period.",
                priority_duration_error: "Priority duration cannot be longer than scan duration.",
                scan_duration: "Scan Duration",
                scan_duration_error: "Scan duration must be between 1 minute and 8 hours.",
                scan_options: { min_120: "2 hours", min_15: "15 minutes", min_240: "4 hours", min_30: "30 minutes", min_480: "8 hours", min_60: "1 hour" },
                time_description: "hh:mm",
            },
            scan_start: "Start Scan",
            scan_stop: "Stop Scan",
            scan_suspended: "Device scanning is currently unavailable due to a microinverter upgrade.",
            status_options: { comm: "Comm (%{count})", comm_nocount: "Comm", power: "Power (%{count})", power_nocount: "Power", profile: "Profile (%{count})", profile_nocount: "Profile" },
        },
        monitoring: {
            connected: "Connected to Enlighten",
            high_bandwidth: "Standard",
            last_report: "Last Report:",
            low_bandwidth: "Low-Bandwidth",
            more_info: "More Info",
            no_report: "Never Reported",
            not_connected: "Not Connected to Enlighten",
            report_setting: "Report Setting",
            report_setting_cellular_desc: "This Envoy has an Enphase cellular modem and reports 15-minute interval data to Enlighten four times per day (low-bandwidth).",
            report_setting_diagnostic: "Diagnostic Mode On: %{minutes} minutes remaining",
            report_setting_enable_diagnostic: "You may enable Diagnostic Mode for two hours. While in Diagnostic Mode, the Envoy will typically report 5-minute interval data to Enlighten every 5 minutes (during daylight hours).",
            report_setting_high_desc:
                "This Envoy is set to standard reporting, which typically reports 5-minute interval data to Enlighten every 5 minutes during daylight hours. You may switch to low-bandwidth, which reports 15-minute interval data to Enlighten four times per day.",
            report_setting_low_desc:
                "This Envoy is set to low-bandwidth reporting, which reports 15-minute interval data to Enlighten four times per day. You may switch to standard reporting, which typically reports 5-minute interval data to Enlighten every 5 minutes during daylight hours.",
            report_setting_modal: {
                diagnostic_desc: "Confirm enabling Diagnostic Mode for two hours.",
                high_desc: "Confirm switch to standard reporting.",
                low_desc: "Confirm switch to low-bandwidth reporting.",
                title: "Report Setting Change",
            },
            report_setting_options: { diagnostic: "Enable Diagnostic Mode", high: "Switch to Standard Reporting", low: "Switch to Low-Bandwidth" },
            title: "Monitoring",
        },
        more: {
            about: {
                cellular_ip: "Cellular IP Address",
                cellular_mac_address: "Cellular Mac Address",
                db_size: "Database Size",
                db_size_stats: "%{db_size} (%{percent}% full)",
                ethernet_ip: "Ethernet IP Address",
                ethernet_mac_address: "Ethernet Mac Address",
                is_nonvoy: "This Envoy is programmed for configuring unmonitored systems.",
                part_number: "Part Number",
                serial_number: "Serial Number",
                sw_build_date: "Software Build Date",
                sw_version: "Software Version",
                timezone: "Current Timezone",
                title: "About This Envoy",
                wifi_ip: "Wi-Fi IP Address",
                wifi_mac_address: "Wi-Fi Mac Address",
            },
            datetime: { date: "Date", time: "Time", timezone: "Time Zone", title: "Date & Time", update_timezone: "Update Time Zone" },
            events: { event_date_line: "%{date} (Event ID %{event_id})", no_events: "There are no events.", title: "Events" },
            support_connection: {
                close: "Close Connection",
                description_close: "The secure connection to Enphase support is open.",
                description_open: "Create a secure connection so Enphase support personnel can troubleshoot this system remotely.",
                open: "Open Connection",
                title: "Connection to Enphase Support",
            },
            system: { title: "System" },
        },
        network: {
            diagnostic_tools: {
                check_connectivity: "Check Network Connectivity",
                check_network_route: "Check Network Route",
                gateway_ip: "Gateway IP",
                ip_address: "IP Address",
                mac_address: "Mac Address",
                netmask: "Netmask",
                network_connectivity: "Network Connectivity Check",
                network_connectivity_desc: "Run a collection of basic network diagnostic checks on the Envoy.",
                network_route: "Network Route Check",
                network_route_desc: "See the Envoy's path to the Internet for all available network interfaces.",
                ping: "Ping",
                ping_desc: "Enter an IP address or URL to test the Envoy's connectivity to your router or other network host.",
                ping_ip: "Ping Address",
                primary_dns: "Primary DNS Server",
                results_title: "Results",
                secondary_dns: "Secondary DNS Server",
                timestamp: "Last Checked",
                title: "Diagnostic Tools",
            },
            network_configuration: { active_network: "Active", title: "Network Configuration", types: { cellular: "Cellular", ethernet: "Ethernet", none: "None", wifi: "Wi-Fi" } },
            network_connectivity_check: {
                connectivity_enlighten: "Connectivity to Enlighten",
                connectivity_enphase: "Connectivity to Enphase",
                enlighten_dns_lookup: "Enlighten DNS Lookup",
                enphase_dns_lookup: "Enphase DNS Lookup",
                gateway_ping: "Gateway Ping",
                google_dns_lookup: "Google DNS Lookup",
                google_ping: "Google Ping",
                primary_dns_ping: "Primary DNS Ping",
                primary_interface: "Network Tested",
                result: { fail: "Failed", pass: "Good" },
                secondary_dns_ping: "Secondary DNS Ping",
                timestamp: "Last Checked",
                title: "Results",
            },
            network_route_check: { destination: "Destination", flags: "Flags", gateway: "Gateway", genmask: "Genmask", metric: "Metric", network: "Network", ref: "Ref", results_title: "Results", timestamp: "Last Checked", use: "Use" },
            title: "Network",
        },
        not_available: "Not Available",
        nsr: {
            line_status_heading: "Lines Connected:",
            line_status_help_text:
                "<ul><li>At least one of the Q-Relay lines is not connected.</li><li>Check that the Q-Relay is installed wired correctly.</li><li>Push the test button to retry.</li><li>If this is intentional then this can be ignored.</li></ul>",
            line_status_help_title: "Q-Relay Line Connection Help",
            lines: "Line %{num}:",
            reason_strings: "unknown reason;Hardware error;Button press;Force command from Envoy;AC line 1 voltage error;AC line 2 voltage error;AC line 3 voltage error;AC line 1 frequency error;Grid DC error;AC line 1 voltage low;AC line 1 voltage high;AC line 1 frequency low;AC line 1 frequency high;AC line 2 voltage low;AC line 2 voltage high;AC line 3 voltage low;AC line 3 voltage high;Grid DC low;Grid DC high;Rocof;AC Average line 1;AC average line 2;AC average line 3".split(
                ";"
            ),
            relay_heading: "Relay:",
        },
        nsrs: {
            manage_options: {
                active: "Active (%{count})",
                active_count: { counting: { one: "Active (%{count})", other: "Active (%{count})", zero: "Active (%{count})" } },
                deleted: "Deleted (%{count})",
                deleted_count: { counting: { one: "Deleted (%{count})", other: "Deleted (%{count})", zero: "Deleted (%{count})" } },
            },
            nav: { all: "All", manage: "Manage", status: "Status" },
            no_inverters: "There are no Q Relays",
            no_inverters_search: 'No Q Relays were found matching "%{search_term}".',
            status_options: { comm_nocount: "Comm", power_nocount: "Operating", profile_nocount: "Config" },
            title: "Relays Q",
        },
        overview: {
            ac_batteries: {
                communicating: "Communicating",
                default_profile_set: "Factory-Installed Grid Profile",
                detected: "Detected",
                factory_installed: "Factory-Installed",
                factory_installed_config: "Factory-Installed Configurations",
                not_set: "Not Set",
                producing_power: "Operating",
                profile_set: "Configured",
                total: "AC Batteries",
            },
            ac_batteries_counts: {
                communicating: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Communicating</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                    },
                },
                detected: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Detected</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                    },
                },
                producing_power: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Operating</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Operating</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Operating</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Operating</span>",
                    },
                },
                profile_set: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Configured</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Configured</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Configured</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Configured</span>",
                    },
                },
                total: {
                    counting: {
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>AC Battery</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>AC Batteries</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>AC Batteries</span>",
                    },
                },
            },
            ac_battery_state: {
                charging: "Charging",
                discharging: "Discharging",
                full: "Full",
                idle: "Idle",
                soc_full: "%{operating_state} (State of Charge %{percent}%)",
                soc_percent: "(State of Charge %{percent}%)",
                soc_state: "%{operating_state}",
            },
            alerts: "Alerts",
            consumption: "Consumption Meter",
            consumption_meter_label: "Consumption",
            current_consumption: "Current Power Consumption",
            current_production: "Current Power Production",
            devices: { detected: "Detected" },
            encharge_batteries: {
                communicating: "Communicating",
                default_profile_set: "Factory-Installed Grid Profile",
                detected: "Detected",
                factory_installed: "Factory-Installed",
                factory_installed_config: "Factory-Installed Configurations",
                not_set: "Not Set",
                producing_power: "Operating",
                profile_set: "Configured",
                total: "AC Batteries",
            },
            enpowers: { communicating: "Communicating", default_profile_set: "Factory-Installed Grid Profile", detected: "Detected", profile_set: "Profile Set", total: "Enpower Devices" },
            enpowers_summary: { connected: { false: "Not Connected to Enpower", true: "Connected to Enpower" }, grid_status: { false: "OFF", title: "Grid Status", true: "ON" }, title: "Enpower" },
            includes_storage_label: "(includes storage activity)",
            inverter_production: "Microinverter Production",
            inverters_update_status: { "in-progress": "Microinverter upgrade in progress. This typically takes 15 to 30 minutes to complete." },
            ip_address: "IP Address",
            latest_power: "Latest Power",
            lifetime: "Lifetime",
            lifetime_energy: "Lifetime Energy",
            meter_production: "Production Meter",
            metering: "Metering",
            microinverter_counts: {
                communicating: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Communicating</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                    },
                },
                detected: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Detected</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                    },
                },
                producing_power: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Producing Power</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Producing Power</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Producing Power</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Producing Power</span>",
                    },
                },
                profile_set: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Profile Set</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Profile Set</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Profile Set</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Profile Set</span>",
                    },
                },
                total: {
                    counting: {
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Microinverter</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Microinverters</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Microinverters</span>",
                    },
                },
            },
            microinverters: { communicating: "Communicating", default_profile_set: "Factory-Installed Grid Profile", detected: "Detected", producing_power: "Producing Power", profile_set: "Profile Set", total: "Microinverters" },
            net_power: "Net Power",
            new_microinverter_counts: {
                communicating: {
                    counting_acb: { one: "Communicating", other: "Communicating", zero: "Communicating" },
                    counting_encharge: { one: "Communicating", other: "Communicating", zero: "Communicating" },
                    counting_microinverters: { one: "Communicating", other: "Communicating", zero: "Communicating" },
                    counting_nsr: { one: "Communicating", other: "Communicating", zero: "Communicating" },
                },
                detected: {
                    counting_acb: { one: "Detected", other: "Detected", zero: "Detected" },
                    counting_encharge: { one: "Detected", other: "Detected", zero: "Detected" },
                    counting_microinverters: { one: "Detected", other: "Detected", zero: "Detected" },
                    counting_nsr: { one: "Detected", other: "Detected", zero: "Detected" },
                },
                producing_power: {
                    counting_acb: { one: "Operating", other: "Operating", zero: "Operating" },
                    counting_encharge: { one: "Operating", other: "Operating", zero: "Operating" },
                    counting_microinverters: { one: "Producing Power", other: "Producing Power", zero: "Producing Power" },
                    counting_nsr: { one: "Operating", other: "Operating", zero: "Operating" },
                },
                profile_set: {
                    counting_acb: { one: "Configured", other: "Configured", zero: "Configured" },
                    counting_encharge: { one: "Configured", other: "Configured", zero: "Configured" },
                    counting_microinverters: { one: "Profile Set", other: "Profile Set", zero: "Profile Set" },
                    counting_nsr: { one: "Configured", other: "Configured", zero: "Configured" },
                },
                total: {
                    counting_acb: { one: "AC Battery", other: "AC Batteries", zero: "AC Batteries" },
                    counting_encharge: { one: "Encharge Battery", other: "Encharge Batteries", zero: "Encharge Batteries" },
                    counting_microinverters: { one: "Microinverter", other: "Microinverters", zero: "Microinverters" },
                    counting_nsr: { one: "Q Relay", other: "Q Relays", zero: "Q Relays" },
                },
            },
            nsr: {
                detected_total_count: "%{detected_count} of %{total_count}",
                profile_label: "Profile",
                profile_not_set: "Not Configured",
                profile_set: "Configured",
                relay_state_closed: "Closed",
                relay_state_label: "State",
                relay_state_open: "Open",
                section_title: "Q Relay",
            },
            power_exporting: "Exporting to Grid",
            power_importing: "Importing from Grid",
            production: "Production",
            production_meter_label: "Production",
            profile: "Profile",
            scan_modal: {
                description: "No microinverters have been detected. Do you want to start a device scan?",
                description_battery: "No batteries have been detected. Do you want to start a device scan?",
                description_both: "No microinverters or batteries have been detected. Do you want to start a device scan?",
                description_nsr: "No Q-Relays have been detected. Do you want to start a device scan?",
                scan_timeout_description:
                    "<p>Only %{detected_count} of %{target_count} microinverters have been detected. Do you want to restart the device scan to discover the remaining microinverter(s) or <a href='#' class='open-target-count'>change the number of microinverters expected</a>?</p>",
                scan_timeout_description_battery: "<p>Only %{detected_count} of %{target_count} batteries have been detected.",
                scan_timeout_description_battery_second: {
                    one: "Do you want to restart the device scan to discover the remaining battery or <a href='#' class='open-target-count'>change the number of batteries expected</a>?</p>",
                    other: "Do you want to restart the device scan to discover the remaining batteries or <a href='#' class='open-target-count'>change the number of batteries expected</a>?</p>",
                },
                scan_timeout_description_both:
                    "<p>Only %{detected_count_micro} of %{target_count_micro} microinverters and %{detected_count_battery} of %{target_count_battery} batteries have been detected. Do you want to restart the device scan to discover the remaining devices or <a href='#' class='open-target-count'>change the number of devices expected</a>?</p>",
                scan_timeout_description_micro: "<p>Only %{detected_count} of %{target_count} microinverters have been detected.",
                scan_timeout_description_micro_second: {
                    one: "Do you want to restart the device scan to discover the remaining microinverter or <a href='#' class='open-target-count'>change the number of microinverters expected</a>?</p>",
                    other: "Do you want to restart the device scan to discover the remaining microinverters or <a href='#' class='open-target-count'>change the number of microinverters expected</a>?</p>",
                },
                scan_timeout_title: "Restart Device Scan?",
                title: "Start Device Scan?",
            },
            scan_state: { active: "Scan Active", inactive: "Scan Inactive", scan_inhibited: "Scan Inhibited" },
            set_expected: { error: "Value must be a number between 1 and 600.", label: "Enter the number of microinverters that you expect to report to this Envoy.", prompt: "# Microinverters" },
            set_expected_acb: { error: "Value must be a number between 0 and 39.", label: "Enter the number of AC Batteries that you expect to report to this Envoy.", prompt: "# AC Batteries" },
            set_expected_nsr: { error: "Value must be a number between 0 and 3.", label: "Enter the number of Q Relays that you expect to report to this Envoy.", prompt: "# Q Relays" },
            software_version: "Software Version",
            stat_title: "Power & Energy",
            storage: "Storage",
            tariff_rate_structure: "Tariff/Rate Structure",
        },
        pending: "(pending...)",
        power: {
            charging: "Charging",
            description: "Microinverters will produce power as long as there is sufficient sunlight and the utility grid is within allowable voltage and frequency ranges (as specified by local regulation).",
            discharging: "Discharging",
            idle: "Idle",
            last_report: "Last Report:",
            not_operating: "Not Operating",
            not_producing: "Not Producing",
            operating: "Operating",
            producing: "Producing Power",
            title: "Microinverters Producing Power",
        },
        profiles: {
            ac_batteries: {
                configuration_label: "Configuration",
                false: "No",
                no_profile_description: "You must provide the following information to configure the batteries before they will begin to operate.",
                no_profile_warning: "The grid profile you select here will also be applied to the Enpower, Microinverters, and Encharges installed with this system.",
                profile_complete: "Configuration Complete",
                profile_incomplete: "Configuration Incomplete",
                profile_propagating: "Configuring Batteries",
                true: "Yes",
            },
            apply: "Apply Grid Profile",
            config_batteries: "Configure Batteries",
            country_label: "Country Regulatory Specification",
            encharge_batteries: {
                configuration_label: "Configuration",
                no_profile_description: "You must provide the following information to configure the batteries before they will begin to operate.",
                no_profile_warning: "The grid profile you select here will also be applied to the Enpower, Microinverters, and AC Batteries installed with this system.",
                profile_complete: "Configuration Complete",
                profile_incomplete: "Configuration Incomplete",
                profile_propagating: "Configuring Batteries",
            },
            enpowers: {
                no_profile_description: "You must provide the following information to configure the enpower before it will begin to operate.",
                no_profile_warning: "The grid profile you select here will also be applied to the Microinverters, AC Batteries and Encharges installed with this system.",
                profile_complete: "Configuration Complete",
                profile_incomplete: "Configuration Incomplete",
                profile_propagating: "Configuring Enpower",
            },
            eu_no_profile_description: "You must select a location-specific grid profile before the microinverters will begin producing power.",
            eu_no_profile_label: "No Profile",
            eu_no_profile_vogel_description: "You must select a location-specific grid profile.",
            microinverters: {
                configuration_label: "Configuration",
                no_profile_warning: "The grid profile you select here will also be applied to the Enpower, AC Batteries and Encharges installed with this system.",
                profile_complete: "Propagation Complete",
                profile_incomplete: "Propagation Incomplete",
                profile_propagating: "Propagating Profile",
            },
            na_no_profile_description: "The microinverters are using the factory-installed grid profile settings. You can select a location-specific grid profile below.",
            na_no_profile_label: "Factory Installed Settings",
            no_profile_warning: "The grid profile you select here will also be applied to the Enpower, Microinverters, AC Batteries and Encharges installed with this system.",
            no_profiles: "There are no profiles available. You must either connect this Envoy to the Internet and select via Enlighten, or use Installer Toolkit to download a profile package and upload to this Envoy.",
            no_profiles_info:
                "If this system requires a location-specific grid profile, you must either connect this Envoy to the Internet and select via Enlighten, or use Installer Toolkit to download a profile package and upload to this Envoy.",
            nsrs: {
                configuration_label: "Configuration",
                no_profile_warning: "The grid profile you select here will also be applied to the Enpower, Microinverters, AC Batteries and Encharges installed with this system.",
                profile_complete: "Propagation Complete",
                profile_incomplete: "Propagation Incomplete",
                profile_propagating: "Propagating Profile",
            },
            profile_complete: "Propagation Complete",
            profile_incomplete: "Propagation Incomplete",
            profile_label: "Grid Profile",
            profile_propagating: "Propagating Profile",
            title: "Grid Profile",
            tpm_state: { 0: "Pending", 1: "Propagating", 2: "Profile Set", 3: "Unsettable", 4: "Failed", 5: "Upgrading", 6: "ALT-V/F" },
        },
        public_nav: {
            change_password: "Change Password",
            copyright_html: "&copy;2008-%{current_year} Enphase Energy Inc. All rights reserved.",
            enphase: "Enphase Energy",
            installer_login: "Installer Login",
            language: "Language",
            privacy: "Privacy",
            settings: "Settings",
            terms: "Terms",
        },
        select2: {
            format_matches: { counting: { one: "One result is available, press enter to select it.", other: "%{count} results are available, use up and down arrow keys to navigate." } },
            input_too_long: { counting: { one: "Please delete %{count} character", other: "Please delete %{count} characters" } },
            input_too_short: "Please enter %{count} or more characters",
            loading_more: "Loading more results...",
            no_matches: "No matches found for %{term}",
            no_results: "No matches found",
            searching: "Searching...",
            selection_too_big: { counting: { one: "You can only select %{count} item.", other: "You can only select %{count} items." } },
        },
        serial_number: "Serial Number",
        system: {
            power_control: {
                disabled_desc: "Power Production Disabled",
                enabled_desc: "Power Production Enabled",
                modal: {
                    desc_set_off: "This will <strong>disable</strong> system power production.",
                    desc_set_on: "This will <strong>enable</strong> system power production.",
                    title: "System Power Control",
                    verify: "Are you sure this is what you want?",
                },
            },
        },
        tariff: {
            add_peak: "Add Peak %{num}",
            add_tier: "Add Tier %{num}",
            base_rate_label: "Base Rate",
            baseline: "Baseline",
            charge_at_night: "Charge batteries from the grid at night",
            chg_at_night_desc: "Enable this option to set the batteries to charge from the grid during nighttime.",
            config_details: "Configuration Details",
            day_names: ["Weekday", "Weekend"],
            greater_than: "Greater than",
            hour_connector: "to",
            month_connector: "through",
            not_set: "Not Set",
            off_peak_label: "Off-Peak",
            peak_hours_label: "Peak %{num} Hours",
            peak_label: "Peak %{num}",
            peak_rate_label: "Peak %{num} Rate",
            peak_start_time: "Peak Start Time:",
            per_day: "per day",
            per_month: "per month",
            percent_of_baseline: "% of Baseline",
            remove: "Remove",
            seasonal_rate_desc: "Enable this option if rate differs between seasons.",
            seasonal_select_label: "Rate differs between seasons",
            select_type: "Select Type",
            single_rate: "Single Rate",
            summer_rate_label: "Summer",
            tariff_rate_title: "Tariff/Rate Structure",
            tariff_type_warning: "For a Time of Use tariff/rate structure you must provide at least one peak rate. If there is no peak rate, select Single Rate instead of Time of Use.",
            tier: "Tier %{num}",
            tiered: "Tiered",
            time_of_use: "Time of Use",
            unit_label: "kWh",
            up_to: "Up to",
            weekday_add_peak: "Add Weekday Peak %{num}",
            weekday_base_rate_label: "Weekday Base Rate",
            weekday_off_peak_rate_label: "Weekday Off-Peak Rate",
            weekday_peak_hours_label: "Weekday Peak %{num} Hours",
            weekday_peak_rate_label: "Weekday Peak %{num} Rate",
            weekdays_label: "Weekday",
            weekdays_rate_label: "Weekday",
            weekend_add_peak: "Add Weekend Peak %{num}",
            weekend_base_rate_label: "Weekend Base Rate",
            weekend_label: "Weekend",
            weekend_off_peak_rate_label: "Weekend Off-Peak Rate",
            weekend_peak_hours_label: "Weekend Peak %{num} Hours",
            weekend_peak_rate_label: "Weekend Peak %{num} Rate",
            weekend_rate_desc: "Enable this option if rate differs between weekdays and weekends.",
            weekend_select_label: "Rate differs between weekday and weekend",
            winter_months_desc: "To set Winter, select Summer months above.",
            winter_rate_label: "Winter",
            zero_not_allowed: "Zero is not a valid value",
        },
        wifi: {
            ap_mode_config: {
                confirm_switch_modal: { description: "This may interrupt communications with the Envoy and require you to re-connect.", title_false: "Disable AP Mode?", title_true: "Enable AP Mode?" },
                description_disabled: "Enable AP mode to allow this Envoy to operate as a wireless Access Point (AP). This will allow wireless devices in the vicinity to connect to the Envoy.",
                description_enabled: "This Envoy is currently operating as a wireless Access Point (AP).",
                disable: "Disable AP Mode",
                enable: "Enable AP Mode",
                time_remaining: { one: "Time Remaining: %{count} hour %{minutes} mins", other: "Time Remaining: %{count} hours %{minutes} mins", zero: "Time Remaining: %{count} hours %{minutes} mins" },
                title_disabled: "AP Mode Disabled",
                title_enabled: "AP Mode Enabled",
            },
            available_networks: "Available Networks",
            connect: {
                confirm_connect: "Confirm Network",
                connect_to_site: "Connect to %{site_name}?",
                connect_warning: "Note: This may interrupt communications with the Envoy and require you to re-connect.",
                connection_failure_explanation: "Unable to connect to network %{site_name}.",
                wait_join: "Please wait while the Envoy connects to %{site_name}...",
            },
            connect_incomplete: { description: "It's taking longer than expected to confirm a connection to %{site_name}. If the network connection was not successful, please try again.", title: "Sorry..." },
            connect_success: {
                description:
                    "<p>The Envoy has successfully connected to %{site_name}.</p><p><a href='#' class='open-overview'>Return to Overview.</a></p><p>Note: It may take up to a minute before the Enlighten connection status is updated.</p>",
                title: "Successfully Connected",
            },
            connection_lost: "This device has lost its connection to the Envoy.",
            connection_status: { attempting_to_connect: "Attempting to connect...", connecting: "Connecting...", connection_lost: "Connection Lost", failed: "Connection Failed", not_connected: "Not connected" },
            country_config: {
                description: "Select your country (ISO 3166-1 alpha-2 code) to optimize Wi-Fi signal strength in accordance with your national regulatory agency.",
                optional: "(optional)",
                select_prompt: "Select Country",
                title: "Country",
                update: "Update Country",
            },
            current_connection: "Connected to <span class='network_name'>%{network_name}</span>",
            enter_password: "Enter the password for %{site_name}.",
            forget: {
                forget_network_header: 'Forget Wi-Fi Network "%{network_name}"?',
                forget_warning: "Note: This may interrupt communications with the Envoy and require you to re-connect.",
                ok_to_forget: "This Envoy will no longer use this network to connect to Enlighten.",
                wait_forget: "Please wait while the Envoy forgets the network...",
            },
            forget_failed: { description: "Attempt to forget the Wi-Fi Network failed. If this continues, contact customer support.", title: "Sorry..." },
            forget_incomplete: {
                description:
                    "It's taking longer than expected to confirm forget Wi-Fi Network. Due to this, it is unlikely that your Envoy can still communicate with this application. Please check the network settings on your device and then reconnect to the Envoy.",
                title: "Sorry...",
            },
            gateway_ip: "Gateway IP: ",
            ip_address: "IP Address: ",
            join_another_network: { button: "Select Another Network", title: "Select Another Network" },
            join_network: { button: "View Networks", title: "Select Network" },
            network_changed_explanation:
                "The network connection on your device has changed. Due to this it is unlikely that your Envoy can still communicate with this application. Please check the network settings on your device and then reconnect to the Envoy.",
            network_changed_title: "Network Connection Changed",
            no_networks_found: "No networks found",
            not_configured_prompt: "Select a wireless network for this Envoy to use to connect to Enlighten.",
            other_network: {
                confirm_switch_modal: { description: "This may interrupt communications with the Envoy and require you to re-connect.", title: "Connect to Other Network?" },
                connect: "Connect",
                description: "Connect to an access point which is not configured to broadcast its ESSID.",
                name: "Name (ESSID)",
                password: "Password",
                security: "Security",
                security_mode: { None: "None", WEP: "WEP", "WPA-PSK": "WPA Personal", "WPA2-PSK": "WPA2 Personal" },
                title: "Connect Other Network",
                wpa_algorithm: "WPA Algorithm",
                wpa_algorithm_type: { CCMP: "CCMP", None: "None", TKIP: "TKIP", "TKIP+CCMP": "TKIP + CCMP" },
            },
            page_title: "Wi-Fi Configuration",
            password_required: "Password Required",
            please_wait: "Please Wait",
            title: "Wi-Fi Network",
            unsupported_site: "Unsupported Network",
            unsupported_site_explanation: "This network uses a security method that is not supported by the Envoy.",
            wifi: "Wi-Fi",
            wifi_hardware_missing: "Wi-Fi hardware not found",
            wifi_waiting_note: "This process may take up to 3 minutes, and you may need to reconnect to the Envoy once it completes.",
        },
        wireless_connection: { connected: "Connected", last_report: "Last Report:", not_connected: "Not Connected", signal_strength: "Signal Strength:", subghz: "Sub GHz", title: "Wireless Connection Links", zigbee_2_4: "2.4 GHz" },
    },
    lwui: {
        admin: {
            cross_domain_traffic: { status_msgs: { cross_domain_traffic: "Cross domain traffic reported", no_cross_domain_traffic: "No cross domain traffic reported", updated: "Updated" } },
            network_connectivity: {
                error_msgs: {
                    bad_device_ip: "Bad device IP address and/or network mask.",
                    bad_gateway_address: "Bad gateway IP address.",
                    gateway_subnet: "Gateway IP address not within subnet %{subnet}",
                    invalid_primary_dns: "Primary DNS address is not a valid IP address.",
                    invalid_secondary_dns: "Secondary DNS address is not a valid IP address.",
                },
            },
            security_admin: {
                status_msg: {
                    new_confirm_password_mismatch: "New and confirm password do not match",
                    old_password_mismatch: "Old password not correct",
                    password_file_missing: "Administrator password file(s) missing",
                    password_update_failure: "Password update failed",
                    password_update_failure_error: "Error: Password change failed",
                    password_update_successful: "Password update successful",
                },
            },
            wireless_connectivity: {
                advanced_settings: {
                    button_apply: "Apply",
                    regulatory_domain: "Country Code (ISO 3166-1 Alpha-2)",
                    regulatory_legend: "Select your country from this list.  This defines the permissible radio frequencies and transmission strength in accordance with your national regulatory agency.",
                },
                ap_mode: { active: "active", inactive: "inactive", name: "AP name:", start: "Start AP Mode", status: "AP Mode status:", stop: "Stop AP Mode", timeout: "minutes to AP timeout:" },
                busy_joining: "Attempting to Connect to the Network",
                busy_scanning: "Scanning for Wi-Fi Networks",
                busy_testing: "Testing Connection",
                connection_test: { failed: "Connection test failed.  Please check your settings.", successful: "Connection test was successful.  You may join the network." },
                current_settings: {
                    dhcp_waiting: "Requesting DHCP address from Wi-Fi Network",
                    forget_network: "Forget this Network",
                    label_gateway_ip: "Gateway IP",
                    link_status: "Status",
                    no_config: "No Wi-Fi connection is configured",
                    no_device: "No compatible Wi-Fi device detected",
                    status_connected: "Connected",
                    status_connecting: "Establishing connection",
                    status_stopped: "Wi-Fi stopped",
                    unavailable: "unavailable",
                    verified_config: "Verified Wi-Fi Network",
                },
                device_information: {
                    device: "Device",
                    driver_name: "Driver Name",
                    hw_version: "Hardware Version",
                    mac_address: "MAC Address",
                    manufacturer: "Manufacturer",
                    model: "Model",
                    usb_slot_num: "USB Slot #",
                    usb_spec_version: "USB Specification Version",
                    vendor: "Vendor",
                },
                forget_msg: "This action will delete the current wireless configuration and drop the connection.  If you are connected wirelessly, your connection to the Envoy will be lost.",
                legend_advanced_settings: "Advanced Settings",
                legend_ap_mode: "Envoy AP Mode",
                legend_current_settings: "Current Wi-Fi Settings",
                legend_device_information: "Device Information",
                legend_manual_configuration: "Manual Configuration",
                legend_site_survey: "Available Wi-Fi Networks",
                manual_configuration: {
                    algorithm: "WPA Algorithm",
                    button_clear: "Clear Form",
                    button_connect: "Join Network",
                    button_test: "Test Connection",
                    channel: "Wireless Channel",
                    essid_length: "The ESSID must be 1 to 32 characters long",
                    info_msg: "The following settings are necessary only for connecting with an access point which is not configured to broadcast its ESSID.",
                    mhz: "MHz",
                    network_name: "Wireless Network Name (ESSID)",
                    password: "Password/PSK",
                    password_unneeded: "A password is unnecessary for an open system",
                    password_wep: "WEP keys must be either 10, 26, or 58 hexadecimal digits",
                    password_wep_chars: "WEP keys must be comprised of only numbers and the letters A-F",
                    password_wpa: "WPA/WPA2-PSK passwords must be at least 8 and no greater than 63 characters",
                    security_mode: "Wireless Security Mode",
                },
                site_survey: { button_rescan: "Re-Scan", info_msg: "Select a network from the list.", none_found: "No networks found" },
                test_msg: "The Wi-Fi connection will now be tested to confirm that the settings are valid.  The current connection to the Envoy will be lost temporarily during the connection test.",
            },
        },
        home: {
            event_tbl_col_hdr: { date: "Date", details: "Details", device: "Device", event: "Event", eventId: "Event Id" },
            warnings: {
                acb_critical_temp: "An elevated internal temperature is detected in one or more of the AC Batteries. Check the Installation and Operation Manual for instructions.",
                acb_needs_meters: "An Envoy-S with metering is required to complete system commissioning. AC Batteries requiring metering have been detected, and this Envoy-S does not have metering.",
                acdisco_active: "AC disconnect active. Envoy cannot communicate with microinverters.",
                acdisco_fail: "AC disconnect failure. Check AC disconnect relay.",
                both_meter_enabled: "Both the production and consumption meters must be enabled to complete system commissioning.",
                check_date_warn_msg:
                    "The system time is invalid.  Until this is corrected the Envoy will not be able to communicate with microinverters.  If the Envoy is not configured to use NTP, or is not able to contact the configured NTP servers, this will need to be corrected manually via the <a href='/admin/lib/date_time_display'> Date and Time Administration controls.</a>",
                cross_domain_traffic: "Communications from other Envoy(s) have been detected.",
                date_invalid: "The system time is invalid. Connect the Envoy to the Internet so that its time can be set correctly.",
                db_warn_msg: "The Envoy has not been able to send data to Enlighten, and local storage is nearly full. Connect the Envoy to the Internet to avoid data loss.",
                eim_consumption_check_wiring: "The power consumption meter is not properly connected. Please check the wiring.",
                eim_production_check_wiring: "The power production meter is not properly connected. Please check the wiring.",
                envoy_needs_meters: "An Envoy-S with metering is required to complete system commissioning. A grid profile requiring metering has been selected, and this Envoy-S does not have metering.",
                legend: "Warning",
                no_enlighten_report: "The system has never reported to Enlighten. Connect the Envoy to the Internet to establish a connection with Enlighten.",
                no_phase_assignment: "AC Batteries must be assigned to phases to complete system commissioning.",
                pcu_limit_warn_msg: "The number of microinverters detected exceeds the Envoy\u2019s Monitoring Configuration. Contact Enphase Energy Customer Support.",
                pcu_limit_warn_msg2: "The number of microinverters detected exceeds the Envoy's default Monitoring Configuration.  The Envoy requires an Internet connection to set the Monitoring Configuration.",
                pel_profile_requires_meters: "The production and consumption meters must be configured to support power export limiting.",
                phase_assoc_failed: "Phase detection failed. Check the Installation and Operation Manual for instructions.",
                pim_profile_requires_meters: "Multi-phase production and consumption metering must be enabled to support phase imbalance management and loss of phase detection.",
            },
        },
    },
    number: {
        currency: { format: { delimiter: ",", format: "%u %n", precision: 2, separator: ".", significant: !1, strip_insignificant_zeros: !1, unit: "$" } },
        format: { delimiter: ",", precision: 3, separator: ".", significant: !1, strip_insignificant_zeros: !1 },
        human: {
            decimal_units: { format: "%n %u", units: { billion: "Billion", million: "Million", quadrillion: "Quadrillion", thousand: "Thousand", trillion: "Trillion", unit: "" } },
            format: { delimiter: "", precision: 3, significant: !0, strip_insignificant_zeros: !0 },
            storage_units: { format: "%n %u", units: { byte: { one: "Byte", other: "Bytes" }, gb: "GB", kb: "KB", mb: "MB", tb: "TB" } },
        },
        percentage: { format: { delimiter: "" } },
        precision: { format: { delimiter: "" } },
    },
    scripts: { data: { verify_internet_connection_message: "Your system has never reported to Enlighten. Verify the Internet connection." } },
    time: {
        am: "AM",
        formats: {
            default: "%d/%m/%Y %I\u00a0:%M %p",
            default_date_time_no_pad: "%d/%m/%Y %-I:%M %p",
            hour_meridian: "%-H:00",
            long: "%B %d, %Y %H:%M",
            noday_nozone_datetime_secs_ui: "%d %b, %Y %-I:%M:%S %p",
            noday_nozone_datetime_ui: "%d %b, %Y %-I:%M %p",
            nozone_datetime: "%a %d %b %Y %I:%M %p",
            short: "%d %b %H:%M",
            short_date: "%d/%m/%Y",
            time_only: "%H:%M",
        },
        pm: "PM",
    },
    units: {
        amps: "A",
        bool: "Boolean",
        degrees: "degrees",
        hertz: "Hz",
        hertz_per_sec: "Hz / s",
        lagging: "Lagging",
        milliseconds: "ms",
        millivolts: "mV",
        none: "",
        percent: "%",
        percent_per_hertz: "% / Hz",
        percent_per_min: "% / min",
        seconds: "s",
        volts: "V",
    },
};
I18n.translations["en-NZ"] = {
    date: {
        abbr_day_names: "Sun Mon Tue Wed Thu Fri Sat".split(" "),
        abbr_month_names: [null, "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        day_names: "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),
        formats: { default: "%Y-%m-%d", long: "%B %e, %Y", only_day: "%e", short: "%e %b" },
        month_names: [null, "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        order: ["year", "month", "day"],
    },
    envoy: {
        cond_flags: {
            acb_ctrl: {
                bmudatabounds: "BMU Data Bounds Error",
                bmuhardwareerror: "BMU Hardware Error",
                bmuimageerror: "BMU Image Error",
                bmumaxcurrentwarning: "BMU Max Current Warning",
                bmusenseerror: "BMU Sense Error",
                cellmaxtemperror: "Cell Max Temperature Error",
                cellmaxtempwarning: "Cell Max Temperature Warning",
                cellmaxvoltageerror: "Cell Max Voltage Error",
                cellmaxvoltagewarning: "Cell Max Voltage Warning",
                cellmintemperror: "Cell Min Temperature Error",
                cellmintempwarning: "Cell Min Temperature Warning",
                cellminvoltageerror: "Cell Min Voltage Error",
                cellminvoltagewarning: "Cell Min Voltage Warning",
                cibcanerror: "CIB CAN Error",
                cibimageerror: "CIB Image Error",
                cibspierror: "CIB SPI Error",
            },
            nsrb_ctrl: {
                acfreqhigh: "AC Frequency High",
                acfreqlow: "AC Frequency Low",
                acfrequencyoor: "AC Frequency Out Of Range",
                acvoltageavgline1: "AC Voltage Avg Out Of Range - Phase 1",
                acvoltageavgline2: "AC Voltage Avg Out Of Range - Phase 2",
                acvoltageavgline3: "AC Voltage Avg Out Of Range - Phase 3",
                acvoltagehighline1: "AC Voltage High - Phase 1",
                acvoltagehighline2: "AC Voltage Out Of Range - Phase 2",
                acvoltagehighline3: "AC Voltage High - Phase 3",
                acvoltagelowline1: "AC Voltage Low - Phase 1",
                acvoltagelowline2: "AC Voltage Out Of Range - Phase 2",
                acvoltagelowline3: "AC Voltage Low - Phase 3",
                acvoltageoorline1: "AC Voltage Out Of Range - Phase 1",
                acvoltageoorline2: "AC Voltage Out Of Range - Phase 2",
                acvoltageoorline3: "AC Voltage Out Of Range - Phase 3",
                buttonpress: "Button Pressed",
                dcgriderror: "DC Grid Current Error",
                dcgridhigh: "DC Grid Current High",
                dcgridlow: "DC Grid Current Low",
                relayforced: "Relay Forced",
                relayopen: "Relay Open",
                rocof: "Rate of Change of Frequency Error",
            },
            obs_strs: {
                discovering: "Discovering",
                failure: "Failure to report",
                flasherror: "Flash Error",
                notmonitored: "Not Monitored",
                ok: "Normal",
                plmerror: "PLM Error",
                secmodeenterfailure: "Secure mode enter failure",
                secmodeexitfailure: "Secure mode exit failure",
                sleeping: "Sleep Mode On",
                verifing: "Verifying Device",
            },
            pcu_chan: {
                acMonitorError: "AC Monitor Error",
                acfrequencyhigh: "AC Frequency High",
                acfrequencylow: "AC Frequency Low",
                acfrequencyoor: "AC Frequency Out Of Range",
                acvoltage_avg_hi: "AC Voltage Average High",
                acvoltagehigh: "AC Voltage High",
                acvoltagelow: "AC Voltage Low",
                acvoltageoor: "AC Voltage Out Of Range",
                acvoltageoosp1: "AC Voltage Out Of Range - Phase 1",
                acvoltageoosp2: "AC Voltage Out Of Range - Phase 2",
                acvoltageoosp3: "AC Voltage Out Of Range - Phase 3",
                agfpowerlimiting: "AGF Power Limiting",
                dcresistancelow: "DC Resistance Low",
                dcresistancelowpoweroff: "DC Resistance Low - Power Off",
                dcvoltagetoohigh: "DC Voltage Too High",
                dcvoltagetoolow: "DC Voltage Too Low",
                dfdt: "AC Frequency Changing too Fast",
                gfitripped: "GFI Tripped",
                gridgone: "Grid Gone",
                gridinstability: "Grid Instability",
                gridoffsethi: "Grid Offset Hi",
                gridoffsetlow: "Grid Offset Low",
                hardwareError: "Hardware Error",
                hardwareWarning: "Hardware Warning",
                highskiprate: "High Skip Rate",
                invalidinterval: "Invalid Interval",
                pwrgenoffbycmd: "Power generation off by command",
                skippedcycles: "Skipped Cycles",
                vreferror: "Voltage Ref Error",
            },
            pcu_ctrl: {
                alertactive: "Alert Active",
                altpwrgenmode: "Alternate Power Generation Mode",
                altvfsettings: "Alternate Voltage and Frequency Settings",
                badflashimage: "Bad Flash Image",
                bricked: "No Grid Profile",
                commandedreset: "Commanded Reset",
                criticaltemperature: "Critical Temperature",
                "dc-pwr-low": "DC Power Too Low",
                iuplinkproblem: "IUP Link Problem",
                manutestmode: "In Manu Test Mode",
                nsync: "Grid Perturbation Unsynchronized",
                overtemperature: "Over Temperature",
                poweronreset: "Power On Reset",
                pwrgenoffbycmd: "Power generation off by command",
                runningonac: "Running on AC",
                "sleep-mode": "Sleep Mode On",
                tpmtest: "Transient Grid Profile",
                unexpectedreset: "Unexpected Reset",
                watchdogreset: "Watchdog Reset",
            },
            rgm_chan: { check_meter: "Meter Error", power_quality: "Poor Power Quality" },
        },
        global: {
            cleared: "Clear",
            copyright_notice: "2007-2014, [e] Enphase Energy, Inc. All rights reserved.",
            copyright_notice_01: "[e] Enphase Energy, Inc. All rights reserved.",
            cs_phone_number: "XXX-XXX-XXXX",
            disable: "Disable",
            disabled: "Disabled",
            enable: "Enable",
            enabled: "Enabled",
            enlighten_token_link: "Get the token here",
            false: "False",
            none: "None",
            notapplicable: "n/a",
            ok: "OK",
            page_not_found_msg1: "Page Not Found",
            page_not_found_msg2: "The page you tried to view does not exist",
            page_not_found_msg3: 'Try the <a href="/">home</a> page',
            serialnumber: "Serial Number",
            set: "Set",
            too_many_installer_sessions_msg1: "Too many installer sessions active",
            too_many_installer_sessions_msg2: "Consider closing other installer session windows",
            too_many_installer_sessions_msg3: "Too many requests active for this resource, please retry in a couple minutes",
            true: "True",
            unknown: "Unknown",
        },
        paging: {
            all: "All",
            clearchoices: "Reset Table",
            info: "Showing _START_ to _END_ of _TOTAL_ entries",
            infoempty: "Showing 0 to 0 of 0 entries",
            infofiltered: "(filtered from _MAX_ total entries)",
            lengthmenu: "Show _MENU_ entries",
            processing: "Processing...",
            search: "Search:",
            zerorecords: "No matching records found",
        },
    },
    envoy_backbone: {
        ac_batteries: {
            manage_options: {
                active: "Active (%{count})",
                active_count: { counting: { one: "Active (%{count})", other: "Active (%{count})", zero: "Active (%{count})" } },
                deleted: "Deleted (%{count})",
                deleted_count: { counting: { one: "Deleted (%{count})", other: "Deleted (%{count})", zero: "Deleted (%{count})" } },
            },
            max_temp: "Max Temp: ",
            nav: { all: "All", manage: "Manage", status: "Status" },
            no_inverters: "There are no batteries.",
            no_inverters_search: 'No AC Batteries were found matching "%{search_term}".',
            sleep_mode: {
                enable_failed: "The attempt to put the selected batteries into sleep mode failed. Please try again in a few minutes. If this problem continues, contact customer support.",
                prompt_to_cancel: { desc: "A battery must be in sleep mode before it can be safely disconnected.</br></br>Are you sure you want to stop the battery from going into sleep mode?" },
                prompt_to_sleep_modal: {
                    desc: "Batteries must be in sleep mode before they can be safely disconnected.</br></br><b>Note:</b> Batteries will charge or discharge to %{min}-%{max}% state of charge before entering sleep mode.",
                    target_soc_label: "Target State of Charge",
                    target_soc_link_text: "Change target state of charge",
                    warning: "Warning: Once a battery is put into sleep mode it can only be taken out of sleep mode by a professional installer.",
                },
                prompt_to_wake: "A battery must be in sleep mode before it can be safely disconnected.</br></br>Are you sure you want to turn sleep mode off?",
                sleep_btn: "Sleep",
            },
            state_of_charge: "State of Charge: ",
            status_options: {
                cancel_sleep_label: "Stop",
                comm_nocount: "Comm",
                power_nocount: "Operating",
                preparing_to_sleep_text: "Entering Sleep Mode",
                profile_nocount: "Config",
                wake_sleep_label: "Turn Off",
                waking_label: "Exiting Sleep Mode",
            },
        },
        app_title: "Envoy Mobile",
        authentication: {
            authentication_with_authms: "Login with Enphase",
            bad_jwt: "Bad token",
            insert_token_headline: "Token Authentication",
            title: "Authentication",
            token_headline: "Token",
            token_link: "Visit %{auth_authority} to get your token",
            token_submit: "Submit",
            too_many_sessions: "Too many sessions",
            verifying_jwt: "Verifying token",
        },
        buttons: {
            cancel: "Cancel",
            change: "Change",
            close: "Close",
            connect: "Connect",
            edit: "Edit",
            forget: "Forget",
            forget_network: "Forget this Network",
            ok: "OK",
            sleep_off: "Turn Sleep Mode Off",
            sleep_on: "Turn Sleep Mode On",
            start_scan: "Start Scan",
            stop: "Stop",
            update: "Update",
        },
        cellular: {
            carrier: "Carrier",
            connected: "Connected",
            connection_status: "Connection Status",
            iccid: "ICCID (Cell Number)",
            imsi: "IMSI (Subscriber ID)",
            mei: "Modem IMEI Number",
            no_modem: "No cellular modem detected",
            not_connected: "Not Connected",
            page_title: "Cellular Configuration",
        },
        comm_check: {
            communication_level: "Communications Level",
            description: "Check signal strength between the Envoy and the microinverters.",
            devices: "Devices",
            in_progress: "Communications Check in Progress",
            remaining_time: "%{minutes} minutes remaining",
            remaining_time_one: "< 1 minute remaining",
            start: "Start Communications Check",
            stop: "Stop Communications Check",
            title: "Communications Check",
        },
        comms: {
            communicating: "Communicating",
            description: "The Envoy\u2019s list of communicating microinverters includes the serial numbers of all devices that are receiving messages from the Envoy and reporting production and status information.",
            not_communicating: "Not Communicating",
            title: "Microinverters Communicating",
        },
        countries: {
            AD: "Andorra",
            AE: "United Arab Emirates",
            AF: "Afghanistan",
            AG: "Antigua and Barbuda",
            AI: "Anguilla",
            AL: "Albania",
            AM: "Armenia",
            AQ: "Antarctica",
            AR: "Argentina",
            AS: "American Samoa",
            AT: "Austria",
            AU: "Australia",
            AW: "Aruba",
            AZ: "Azerbaijan",
            BA: "Bosnia and Herzegovina",
            BB: "Barbados",
            BD: "Bangladesh",
            BE: "Belgium",
            BF: "Burkina Faso",
            BG: "Bulgaria",
            BH: "Bahrain",
            BI: "Burundi",
            BJ: "Benin",
            BM: "Bermuda",
            BN: "Brunei Darussalam",
            BO: "Bolivia, Plurinational State of",
            BR: "Brazil",
            BS: "Bahamas",
            BT: "Bhutan",
            BV: "Bouvet Island",
            BW: "Botswana",
            BY: "Belarus",
            BZ: "Belize",
            CA: "Canada",
            CC: "Cocos (Keeling) Islands",
            CF: "Central African Republic",
            CG: "Congo",
            CH: "Switzerland",
            CI: "Cd'Ivoire",
            CK: "Cook Islands",
            CL: "Chile",
            CM: "Cameroon",
            CN: "China",
            CO: "Colombia",
            CR: "Costa Rica",
            CV: "Cape Verde",
            CX: "Christmas Island",
            CY: "Cyprus",
            CZ: "Czech Republic",
            DE: "Germany",
            DJ: "Djibouti",
            DK: "Denmark",
            DM: "Dominica",
            DO: "Dominican Republic",
            DZ: "Algeria",
            EC: "Ecuador",
            EE: "Estonia",
            EG: "Egypt",
            EH: "Western Sahara",
            ER: "Eritrea",
            ES: "Spain",
            ET: "Ethiopia",
            FI: "Finland",
            FJ: "Fiji",
            FK: "Falkland Islands (Malvinas)",
            FM: "Micronesia, Federated States of",
            FO: "Faroe Islands",
            FR: "France",
            GA: "Gabon",
            GB: "United Kingdom",
            GD: "Grenada",
            GE: "Georgia",
            GF: "French Guiana",
            GH: "Ghana",
            GI: "Gibraltar",
            GL: "Greenland",
            GM: "Gambia",
            GN: "Guinea",
            GP: "Guadeloupe",
            GQ: "Equatorial Guinea",
            GR: "Greece",
            GS: "South Georgia and the South Sandwich Islands",
            GT: "Guatemala",
            GU: "Guam",
            GW: "Guinea-Bissau",
            GY: "Guyana",
            HK: "Hong Kong",
            HM: "Heard Island and McDonald Islands",
            HN: "Honduras",
            HR: "Croatia",
            HT: "Haiti",
            HU: "Hungary",
            ID: "Indonesia",
            IE: "Ireland",
            IL: "Israel",
            IN: "India",
            IO: "British Indian Ocean Territory",
            IS: "Iceland",
            IT: "Italy",
            JM: "Jamaica",
            JO: "Jordan",
            JP: "Japan",
            KE: "Kenya",
            KG: "Kyrgyzstan",
            KH: "Cambodia",
            KI: "Kiribati",
            KM: "Comoros",
            KN: "Saint Kitts and Nevis",
            KR: "Korea, Republic of",
            KW: "Kuwait",
            KY: "Cayman Islands",
            KZ: "Kazakhstan",
            LA: "Lao People's Democratic Republic",
            LB: "Lebanon",
            LC: "Saint Lucia",
            LI: "Liechtenstein",
            LK: "Sri Lanka",
            LR: "Liberia",
            LS: "Lesotho",
            LT: "Lithuania",
            LU: "Luxembourg",
            LV: "Latvia",
            MA: "Morocco",
            MC: "Monaco",
            MD: "Moldova, Republic of",
            ME: "Montenegro",
            MG: "Madagascar",
            MH: "Marshall Islands",
            ML: "Mali",
            MM: "Myanmar",
            MN: "Mongolia",
            MO: "Macao",
            MP: "Northern Mariana Islands",
            MQ: "Martinique",
            MR: "Mauritania",
            MS: "Montserrat",
            MT: "Malta",
            MU: "Mauritius",
            MV: "Maldives",
            MW: "Malawi",
            MX: "Mexico",
            MY: "Malaysia",
            MZ: "Mozambique",
            NA: "Namibia",
            NC: "New Caledonia",
            NE: "Niger",
            NF: "Norfolk Island",
            NG: "Nigeria",
            NI: "Nicaragua",
            NL: "Netherlands",
            NO: "Norway",
            NP: "Nepal",
            NR: "Nauru",
            NU: "Niue",
            NZ: "New Zealand",
            OM: "Oman",
            PA: "Panama",
            PE: "Peru",
            PF: "French Polynesia",
            PG: "Papua New Guinea",
            PH: "Philippines",
            PK: "Pakistan",
            PL: "Poland",
            PM: "Saint Pierre and Miquelon",
            PN: "Pitcairn",
            PR: "Puerto Rico",
            PT: "Portugal",
            PW: "Palau",
            PY: "Paraguay",
            QA: "Qatar",
            RO: "Romania",
            RU: "Russian Federation",
            SA: "Saudi Arabia",
            SB: "Solomon Islands",
            SC: "Seychelles",
            SE: "Sweden",
            SG: "Singapore",
            SH: "Saint Helena, Ascension and Tristan da Cunha",
            SI: "Slovenia",
            SJ: "Svalbard and Jan Mayen",
            SK: "Slovakia",
            SL: "Sierra Leone",
            SM: "San Marino",
            SN: "Senegal",
            SO: "Somalia",
            SR: "Suriname",
            ST: "Sao Tome and Principe",
            SV: "El Salvador",
            SY: "Syrian Arab Republic",
            SZ: "Swaziland",
            TC: "Turks and Caicos Islands",
            TD: "Chad",
            TF: "French Southern Territories",
            TG: "Togo",
            TH: "Thailand",
            TJ: "Tajikistan",
            TK: "Tokelau",
            TL: "Timor-Leste",
            TM: "Turkmenistan",
            TN: "Tunisia",
            TO: "Tonga",
            TR: "Turkey",
            TT: "Trinidad and Tobago",
            TV: "Tuvalu",
            TZ: "Tanzania, United Republic of",
            UA: "Ukraine",
            UG: "Uganda",
            UM: "United States Minor Outlying Islands",
            US: "United States",
            UY: "Uruguay",
            UZ: "Uzbekistan",
            VA: "Holy See (Vatican City State)",
            VC: "Saint Vincent and the Grenadines",
            VE: "Venezuela, Bolivarian Republic of",
            VG: "Virgin Islands, British",
            VI: "Virgin Islands, U.S.",
            VN: "Viet Nam",
            VU: "Vanuatu",
            WF: "Wallis and Futuna",
            WS: "Samoa",
            YE: "Yemen",
            YT: "Mayotte",
            ZA: "South Africa",
            ZM: "Zambia",
            ZW: "Zimbabwe",
        },
        counts: "%{actual_count}/%{expected_count}",
        detected: {
            battery_target_seperate: { one: "%{count} battery", other: "%{count} batteries", zero: "%{count} batteries" },
            description:
                "The Envoy\u2019s list of detected microinverters includes all serial numbers discovered by a device scan or provisioned with the Installer Toolkit. When microinverters have been detected, they can send and receive additional data from the Envoy.",
            detected: "Detected",
            device_target: "Device Target: %{count}",
            device_target_title: "Device Target: ",
            discovered: "Discovered:",
            installed: "Installed",
            micro_target_seperate: { one: "%{count} microinverter", other: "%{count} microinverters", zero: "%{count} microinverters" },
            nsr_target_separate: { one: "%{count} Q-Relay", other: "%{count} Q-Relays", zero: "%{count} Q-Relays" },
            provisioned: "Provisioned:",
            remaining_duration: { one: "Remaining Duration: %{count} hour %{minutes} mins", other: "Remaining Duration: %{count} hours %{minutes} mins", zero: "Remaining Duration: %{count} hours %{minutes} mins" },
            remaining_hour_one: "1 hour",
            remaining_hours: "%{hours} hours",
            remaining_minute_one: "1 minute remaining",
            remaining_minutes: "%{minutes} minutes remaining",
            remaining_priority: {
                one: "Remaining Priority Duration: %{count} hour %{minutes} mins",
                other: "Remaining Priority Duration: %{count} hours %{minutes} mins",
                zero: "Remaining Priority Duration: %{count} hours %{minutes} mins",
            },
            remaining_time: "%{minutes} minutes remaining",
            remaining_time_one: "< 1 minute remaining",
            scan_inprogress: "Device Scan in Progress",
            scan_start: "Start Device Scan",
            scan_stop: "Stop Scan",
            title: "Microinverters Detected",
        },
        device_alert_messages: {
            meters_not_enabled: "The production and consumption meters must be configured for Batteries to operate.",
            no_phase_assignment: "Batteries will not operate until they are assigned to phases.",
            not_configured: "The Batteries must be configured before they will operate.",
        },
        devices: {
            detected: "Detected",
            detected_total_count: "%{detected_count} of %{total_count}",
            device_info: {
                change_phase: "Change Phase",
                comm_level: "Comm Level: ",
                comm_level_2_4_ghz: "Comm Level (2.4 GHz): ",
                comm_level_sub_ghz: "Comm Level (Sub GHz): ",
                detected: "Detected: ",
                discovered: "Discovered via device scan / Pre Provisioned ",
                grid_profile: "Grid Profile: ",
                last_comm: "Last Communication: ",
                last_report: "Last Report: ",
                notapplicable: "n/a",
                param_table: "Parameter Table: ",
                part_number: "Part Number: ",
                pending_condition_clear: '"%{condition_flag}" clear condition command is in progress.',
                phase: "Phase: ",
                phase_unknown: "No phase selected",
                provisioned: "Assigned via provisioning",
                running_image: "Running Image: ",
                select_phase: "Select Phase",
                status: "Status: ",
                unknown: "Unknown",
                updated: "Updated ",
                view_in_array: "View in Array",
            },
            device_scan: "Device Scan",
            device_scan_short: "Scan",
            scan_state: { active: "Active", inactive: "Inactive", scan_disabled: "Disabled", scan_inhibited: "Inhibited", scan_suspended: "Suspended" },
        },
        encharge_batteries: {
            manage_options: {
                active: "Active (%{count})",
                active_count: { counting: { one: "Active (%{count})", other: "Active (%{count})", zero: "Active (%{count})" } },
                deleted: "Deleted (%{count})",
                deleted_count: { counting: { one: "Deleted (%{count})", other: "Deleted (%{count})", zero: "Deleted (%{count})" } },
            },
            nav: { all: "All", manage: "Manage", status: "Status" },
            no_inverters: "There are no encharge batteries.",
            no_inverters_search: 'No Encharge Batteries were found matching "%{search_term}".',
            phase_labels: { "ph-a": "L1(A)", "ph-b": "L2(B)", "ph-c": "L3(C)", "ph-unk": "No phase selected", "ph-updating": "Updating...", select_one: "Select One" },
            status_options: {
                cancel_sleep_label: "Stop",
                comm_nocount: "Comm",
                power_nocount: "Operating",
                preparing_to_sleep_text: "Entering Sleep Mode",
                profile_nocount: "Config",
                wake_sleep_label: "Turn Off",
                waking_label: "Exiting Sleep Mode",
            },
            title: "Encharge",
        },
        enpowers: {
            manage_options: {
                active: "Active (%{count})",
                active_count: { counting: { one: "Active (%{count})", other: "Active (%{count})", zero: "Active (%{count})" } },
                deleted: "Deleted (%{count})",
                deleted_count: { counting: { one: "Deleted (%{count})", other: "Deleted (%{count})", zero: "Deleted (%{count})" } },
            },
            max_temp: "Max Temp: ",
            nav: { all: "All", manage: "Manage", status: "Status" },
            no_inverters: "There is no Enpower device.",
            no_inverters_search: 'No Enpower device found matching "%{search_term}".',
            state_of_grid: { closed: "Closed", open: "Open", title: "State of Grid: " },
            status_options: { comm_nocount: "Comm", power_nocount: "Operating", profile_nocount: "Config" },
            title: "Enpower",
        },
        errors: {
            error_message: "Sorry, there's a problem getting data from the Envoy. If this continues, contact customer support.",
            interface_not_dhcp: "Sorry, you cannot get a new IP address. Switch the Envoy IP setting to DHCP first.",
            not_allowed: "Sorry, your requested change is not permitted and could not be saved.",
            not_authorized: "Sorry, you are not authorized to view that page.",
            save_failed: "Sorry, your changes could not be saved. ",
            start_scan_target_too_low:
                "<p>You've indicated that you expect %{expected_count} microinverters to report to this Envoy, and %{expected_count} have already been detected.</p><p>Before starting a device scan, <a href='#' class='open-target-count'>increase the number of microinverters expected</a> or delete one or more microinverters from the <a href='#' class='open-manage-devices'>manage devices screen</a>.</p>",
            start_scan_target_too_low_battery: {
                one: "<p>You've indicated that you expect %{count} battery to report to this Envoy, and that has already been detected.</p>",
                other: "<p>You've indicated that you expect %{count} batteries to report to this Envoy, and that many have already been detected.</p>",
                zero: "<p>You've indicated that you expect %{count} batteries to report to this Envoy, and that many have already been detected.</p>",
            },
            start_scan_target_too_low_battery_end:
                "<p>Before starting a device scan, <a href='#' class='open-target-count'>increase the number of batteries expected</a> or delete one or more batteries from the <a href='#' class='open-manage-devices-battery'>manage devices screen</a>.</p>",
            start_scan_target_too_low_both:
                "<p>The expected number of devices have already been detected.</p><p>Before starting a device scan, <a href='#' class='open-target-count'>increase the number of devices expected</a> or delete one or more microinverters or batteries.</p>",
            start_scan_target_too_low_micro: {
                one: "<p>You've indicated that you expect %{count} microinverter to report to this Envoy, and that has already been detected.</p>",
                other: "<p>You've indicated that you expect %{count} microinverters to report to this Envoy, and that many have already been detected.</p>",
                zero: "<p>You've indicated that you expect %{count} microinverters to report to this Envoy, and that many have already been detected.</p>",
            },
            start_scan_target_too_low_micro_end:
                "<p>Before starting a device scan, <a href='#' class='open-target-count'>increase the number of microinverters expected</a> or delete one or more microinverters from the <a href='#' class='open-manage-devices'>manage devices screen</a>.</p>",
            start_scan_target_too_low_nsr: {
                one: "<p>You've indicated that you expect %{count} Q-Relay to report to this Envoy, and that has already been detected.</p>",
                other: "<p>You've indicated that you expect %{count} Q-Relays to report to this Envoy, and that many have already been detected.</p>",
                zero: "<p>You've indicated that you expect %{count} Q-Relays to report to this Envoy, and that many have already been detected.</p>",
            },
            start_scan_target_too_low_nsr_end:
                "<p>Before starting a device scan, <a href='#' class='open-target-count'>increase the number of Q-Relays expected</a> or delete one or more Q-Relays from the <a href='#' class='open-manage-devices-nsr'>manage devices screen</a>.</p>",
            start_scan_title: "Device Scan Unavailable",
            timeout_message:
                "Sorry, it's taking too long to get data from the Envoy. Make sure the Envoy is powered on, and that the Envoy and this device are both connected to the same local network. If the problem continues, contact customer support.",
            title: "Error",
            tunnel_close_failed: "Attempt to close the connection to Enphase support failed. If this continues, contact customer support.",
            tunnel_failed_title: "Connection Failed",
            tunnel_open_failed: "The Envoy must be connected to the Internet to open a connection to Enphase. If the Envoy has an Internet connection and this problem continues, contact customer support.",
        },
        ethernet: {
            buttons: { dhcp: "Use DHCP", new_ip: "Get New IP Address", static: "Use Static IP" },
            confirm_change: { description: "This may interrupt communications with the Envoy and require you to re-connect.", title: "Change Ethernet Configuration?" },
            confirm_static: {
                description: "This will assign the current DHCP IP address and other configurations as static values. If you choose to proceed, you can update these values on the next screen.",
                title: "Change Ethernet Configuration?",
            },
            gateway_ip: "Gateway IP",
            ip_address: "IP Address",
            ip_setting: "IP Setting",
            netmask: "Netmask",
            new_ip_modal: { description: "This may interrupt communications with the Envoy and require you to re-connect.", title: "Get New IP Address?" },
            no_config: "No ethernet connection detected.",
            page_title: "Ethernet Configuration",
            primary_dns: "Primary DNS Server",
            secondary_dns: "Secondary DNS Server",
            type: { dhcp: "DHCP", static: "Static IP" },
        },
        forms: { search: "Search", search_prompt: "Serial Number", select_prompt: "Select One" },
        global_nav: {
            acb: "AC Battery",
            comms: "Comms",
            detected: "Detected",
            encharge: "Encharge",
            encharge_batteries: "Encharge",
            enpower: "Enpower",
            meters: "Meters",
            meters_small: "Meters",
            microinverters: "Microinverters",
            microinverters_short: "Micros",
            more: "More",
            network: "Network",
            nsr: "Q Relays",
            overview: "Overview",
            power: "Power",
            profiles: "Profiles",
        },
        initial_setup: {
            continue: "Continue",
            device_prompt: "Enter the number of devices that you expect to report to this Envoy.",
            eu_profile_prompt: "Select a location-specific grid profile.",
            migration_in_progress_message: "profiles being updated",
            na_profile_prompt: "The system is using the factory-installed grid profile settings. You can select a location-specific grid profile below.",
            system_size: "System Size",
        },
        jquery_validate: {
            messages: {
                addedTierPercent: "Please enter a number\u00a0greater than the percent\u00a0of baseline\u00a0entered for {0}.",
                an_number: "Please enter a valid number.",
                creditcard: "Please enter a valid credit card number.",
                date: "Please enter a valid date.",
                dateISO: "Please enter a valid date (ISO).",
                digits: "Please enter only digits.",
                domain: "Please enter a valid IP v4 address (xxx.xxx.xxx.xxx) or URL (google.com)",
                email: "Please enter a valid email address.",
                equalTo: "Please enter the same value again.",
                ipv4: "Please enter a valid IP v4 address. (xxx.xxx.xxx.xxx)",
                max: "Please enter a value less than or equal to {0}.",
                maxlength: "Please enter no more than {0} characters.",
                min: "Please enter a value greater than or equal to {0}.",
                minlength: "Please enter at least {0} characters.",
                number: "Please enter a valid number.",
                range: "Please enter a value between {0} and {1}.",
                rangelength: "Please enter a value between {0} and {1} characters long.",
                remote: "Please fix this field.",
                required: "This field is required.",
                url: "Please enter a valid URL.",
                wep_key: "Please enter a valid WEP Key (10, 26, or 58 characters, which may include 0-9 or A-F).",
            },
        },
        loading: "Please wait, loading",
        meters: {
            active_energy: "Active Energy",
            active_energy_lt: "Active Energy",
            active_power: "Active Power",
            apparent_energy: "Apparent Energy",
            apparent_power: "Apparent Power",
            consumption: "Consumption Meter",
            consumption_meter: {
                enable_meter: "Enable Consumption Meter",
                measurement_type: "Metered Circuit",
                meter_type_desc: "Does the circuit passing through the consumption CTs include load with solar production or load only?",
                meter_type_desc_singular: "Does the circuit passing through the consumption CT include load with solar production or load only?",
                meter_type_warning: "Be sure that the selections above are correct.",
            },
            current: "Current",
            current_ct: {
                current_ct_settings: "CT Current Settings",
                custom_cts_installed: "Custom %{meter_type} CTs Installed",
                primary: "Primary",
                remove_desc: "Tap OK to confirm that you are using standard Enphase %{meter_type} CTs.",
                remove_settings: "Remove Custom CT Settings?",
                secondary: "Secondary",
                turns: "Turns",
            },
            descriptors: { lifetime: "Lifetime", lifetime_lag: "Lagging (Lifetime)", lifetime_lead: "Leading (Lifetime)", today: "Today", today_lag: "Lagging (Today)", today_lead: "Leading (Today)" },
            enable_consumption_meter: "Enable Consumption Meter",
            enable_consumption_modal: {
                description: "Once you enable this meter, it cannot be disabled and the type cannot be changed.",
                description_mode_three: "Once you enable this meter, you cannot disable it, change the type, or decrease the number of phases.",
                description_mode_three_post_enable: "Once you do this, you will not be able to decrease the number of phases.",
                note_three: "<strong>Note: the number of phases will also be increased on the production meter.</strong>",
                note_three_post_enable: "<strong>Note: the number of phases will also be increased on the production meter.</strong>",
                title: 'Enable Meter with "%{type}" Metering?',
                title_mode_three: "Enable Meter with Metered Circuit: %{type} and Phases Metered: %{phCount}?",
                title_mode_three_post_enable: "Update Phases Metered to %{phCount}?",
            },
            enable_meter: "Enable Consumption Meter",
            enable_modal: { description: "Once you enable this meter, it cannot be disabled and the type cannot be changed.", title: "Enable Meter with %{type} Metering?" },
            enable_production_meter: "Enable Production Meter",
            enable_production_modal: {
                description: "Once you enable this meter, it cannot be disabled.",
                description_mode_three: "Once you enable this meter, you cannot disable it or decrease the number of phases.",
                description_mode_three_post_enable: "Once you do this, you will not be able to decrease the number of phases.",
                note_three: "<strong>Note: the number of phases will also be increased on the consumption meter.</strong>",
                note_three_post_enable: "<strong>Note: the number of phases will also be increased on the consumption meter.</strong>",
                title: "Enable Meter?",
                title_mode_three: "Enable Meter with Phases Metered: %{phCount}?",
                title_mode_three_post_enable: "Update Phases Metered to %{phCount}?",
            },
            enable_production_prompt: "The production meter must be enabled before these readings can be displayed.",
            freq_analysis: { btn_change_data_type: "Toggle Data", plc_activity: "Activity", plc_power_spectrum: "Power Spectrum", power_line_analy: "Power Line Communication Analysis" },
            id: "EID",
            internal_meters: "Internal Meters",
            latest_reading: "Latest Reading",
            lifetime_energy: "Lifetime",
            load_contains_storage_message: "Load readings include storage activity.",
            measurement_type: "Type",
            meter_change_warning: "You cannot change them once the meter is enabled.",
            meter_mode: { single: "Single-Phase (L-N)", split: "Single-Phase (L-L)", three: "Multi-Phase" },
            meter_readings: "Readings",
            meter_state: { disabled: "Disabled", enabled: "Enabled" },
            meter_status: {
                "check-wiring": "Check Wiring",
                meter_setup: "Set up metering now",
                meters_not_enabled: "Meters Not Enabled",
                normal: "Normal",
                "not-metering": "Meter Not Enabled",
                status_flags: {
                    "negative-production": "Production readings are negative. Check CT orientation and leads, compared with voltage connections.",
                    "negative-total-consumption": "Consumption readings are negative. Check CT orientation and leads, compared with voltage connections.",
                    "power-on-unused-phase": "Power detected on an unused phase. Check CT lead connections, compared with voltage connections.",
                    "production-imbalance": "Production not balanced between phases. Check CT lead connections and voltage connections.",
                },
            },
            meter_type: { "net-consumption": "Net", "total-consumption": "Total" },
            meter_type_desc: "If the consumption CTs are on a circuit that solar production flows through, leave type set to <b>Net</b>. If not, change type to <b>Total</b>.",
            meter_type_verbose: { "net-consumption": "Load with solar production", "total-consumption": "Load only" },
            meter_type_warning: "Be sure to set the meter type correctly. You cannot change them once the meter is enabled.",
            mode: "Mode",
            multi_phase_options: { mphase_0: "Not Selected", mphase_1: "L1(A)", mphase_2: "L1(A) + L2(B)", mphase_3: "L1(A) + L2(B) + L3(C)" },
            multi_phase_warning: {
                consumption: {
                    post_continue: "The meter is not yet enabled. Verify the readings, then tap <strong>Enable Consumption Meter</strong> at the bottom of the screen.",
                    pre_continue: "The meter is not yet enabled. Select the Phases Metered and Metered Circuit, then tap <strong>View Readings</strong>.",
                    pre_continue_one: "The meter is not yet enabled. Select the Metered Circuit, then tap <strong>View Readings</strong>.",
                },
                production: {
                    post_continue: "The meter is not yet enabled. Verify the readings, then tap <strong>Enable Production Meter</strong> at the bottom of the screen.",
                    pre_continue: "The meter is not yet enabled. Select the Phases Metered, then tap <strong>View Readings</strong>.",
                },
            },
            net_consumption_desc: "These readings reflect the difference between the total home load and solar production. They should approximately match the home's utility meter readings.",
            net_consumption_title: "Net Consumption",
            no_consumption: "No consumption meter configured for this Envoy.",
            no_meters: "No meters detected.",
            no_production: "No production meter configured for this Envoy.",
            phase_count: "Phases Metered",
            phase_count_desc: "Select which of the meter phases you have wired.",
            phase_labels: { phase_1: "L1(A)", phase_2: "L2(B)", phase_3: "L3(C)" },
            pmu: {
                add_another: "Add Another",
                add_meter: "Add Power Meter",
                config: {
                    add: "Add Selected Meters",
                    meters_description: "Power meters detected on this network:",
                    network_warning: "Before adding a meter, be sure that the Envoy has an Ethernet connection with a static IP address. This should be configured both on the router and on the Envoy.",
                    no_meters_description:
                        "No power meters detected<div class='alert alert-info'><b>Note:</b> It may take up to an hour for power meters to be detected. To facilitate detection, make sure that the power meter is on the same local subnet as the Envoy.</div>",
                    remove: "Remove Power Meter",
                    title: "Power Meter Configuration",
                },
                labels: { fw_version: "Firmware Version", ip: "IP Address", mac_address: "Mac Address", manufacturer: "Manufacturer", part_number: "Part Number", production: "Production", serial_number: "Serial Number", status: "Status" },
                phase_coupler: "A phase coupler is required for microinverters installed on L2 or L3 to communicate with the Envoy.",
            },
            power_exporting: "(Exporting to Grid)",
            power_factor: "Power Factor",
            power_importing: "(Importing from Grid)",
            production: "Production Meter",
            reactive_energy: "Reactive Energy",
            reactive_power: "Reactive Power",
            single_phase_warning: {
                consumption: {
                    post_continue: "The meter is not yet enabled. Verify the readings, then tap <strong>Enable Consumption Meter</strong> at the bottom of the screen.",
                    pre_continue: "The meter is not yet enabled. Select the Metered Circuit, then tap <strong>View Readings</strong>.",
                },
                production: {
                    post_continue: "The meter is not yet enabled. Verify the readings, then tap <strong>Enable Production Meter</strong> at the bottom of the screen.",
                    pre_continue: "The meter is not yet enabled. Tap <strong>View Readings</strong> to view and verify the readings.",
                },
            },
            status: "Status",
            title: "Meters",
            today_energy: "Today",
            total_consumption_desc: "These readings reflect the total home load.",
            total_consumption_na: "The production meter must be enabled before these readings can be displayed.",
            total_consumption_title: "Total Consumption",
            type: { eim: "Envoy Integrated Meter", pmu: "Power Meter", rgm: "Enphase RGM" },
            unavailable: "n/a",
            update_settings: "Update",
            view_readings: "View Readings",
            wizard: {
                batt_off: { counting: { one: "Make sure the Enphase Battery circuit is switched OFF.", other: "Make sure the Enphase Battery circuits are switched OFF." } },
                battery_reminder: "<b>Remember to switch the Enphase battery circuit on.</b>",
                btn_next: "Next",
                btn_try_again: "Try Again",
                bullet_load_increase: "Did the total home load increase as you expected?",
                bullet_meters_match: "Does the home's utility meter approximately match this reading?",
                bullet_phase_select: "Is solar production flowing to the grid measured by the consumption CT?",
                bullet_pv_on: "Switch ON the PV breakers and wait for the reconnection period to complete. PV should start to produce power in 5 minutes or less, then tap <strong>Next</strong>.",
                bullet_turn_on_load: "Turn on a known load, such as a heat gun, then tap <b>Next</b>.",
                check_meters: "Check<br>Meters",
                check_title: " Check %{meter_type} Meter",
                confirm_ct_routing: "Make sure that all of the home loads are routed through the consumption CTs.",
                consumption_appears_good: "The consumption meter appears to have been configured correctly.",
                consumption_ct_direction: "Check that the arrow on the consumption CTs are pointing in the direction of energy flow toward the load center.",
                consumption_cts_installed: "Did you install consumption CTs?",
                consumption_enable_prompt: "Tap <strong>Enable Consumption Meter</strong> to complete meter setup.",
                consumption_looks_good: "Consumption readings look good!",
                consumption_neg: "Consumption readings are negative. Check the following, then tap <b>Try Again</b>.",
                consumption_not_enabled: "Consumption Meter Not Enabled",
                consumption_phase_sel_net: "Consumption CT includes solar production.",
                consumption_phase_sel_total: "Consumption CT does not include solar production.",
                ct_bw_correct: "Make sure that the blue and white wires are connected to the correct positions in the terminal block.",
                desc: "Use our step-by-step wizard to ensure that the internal meters are wired and configured correctly.",
                desc_consumption: "Use our step-by-step wizard to ensure that the consumption meter is wired and configured correctly.",
                desc_production: "Use our step-by-step wizard to ensure that the production meter is wired and configured correctly.",
                done: "Done",
                enable_button: "Enable %{meterType} Meter",
                enough_sun: "Make sure there is enough sunlight reaching the PV modules to power up the microinverters.",
                exit_check: "Are you sure you want to exit the Meter Check?",
                exit_conf: { desc: "Are you sure you want to leave the production meter setup wizard? You'll need to start over if you want to use the wizard again.", neg_button: "Go Back", title: "Exit Wizard?" },
                exit_wizard: "Exit Wizard",
                get_started: "Get Started",
                load_didnt_increase: "Total home load did not increase as expected. Check the following, then tap <b>Try Again</b>.",
                manual_prompt: "Manual Meter Setup",
                most_common: "(Most common setup)",
                negative: "NO",
                phase_select_prompt: "Select the phases metered based on how the Envoy-S is wired: ",
                positive: "YES",
                power_exporting: "Exporting",
                power_importing: "Importing",
                prod_enable_desc1: "Production readings are close to zero, as expected.",
                prod_enable_desc2: "Tap <strong>Enable Production Meter</strong> to complete meter setup.",
                prod_meter_enabled: "The production meter is enabled.",
                prod_su1_pv_on: {
                    counting: {
                        one: "Make sure the PV circuit is switched ON and are producing power (the reconnection period has completed).",
                        other: "Make sure the PV circuits are switched ON and are producing power (the reconnection period has completed).",
                    },
                },
                prod_su2_pv_off: "Switch OFF the PV breakers, then tap <b>Next</b>.",
                prod_ts_p4: {
                    desc: "Production readings are negative. Check the following, then tap Try Again.",
                    ts1: {
                        counting: {
                            one: "Make sure the PV circuit is switched ON and are producing power (the reconnection period has completed).",
                            other: "Make sure the PV circuits are switched ON and are producing power (the reconnection period has completed).",
                        },
                    },
                    ts2: { counting: { one: "Make sure the Enphase Battery circuit is switched OFF.", other: "Make sure the Enphase Battery circuits are switched OFF." } },
                    ts3: {
                        counting: {
                            one: "Check that the arrow on the production CT is pointing in the direction of energy flow toward the load center.",
                            other: "Check that the arrow on the production CTs are pointing in the direction of energy flow toward the load center.",
                        },
                    },
                    ts5: {
                        counting: {
                            one: "Make sure that the wires running through the production CT only include PV generation (and not any loads).",
                            other: "Make sure that the wires running through the production CTs only include PV generation (and not any loads).",
                        },
                    },
                    ts6: "Ensure that the CTs are clamped on the correct phases with respect to the Envoy power terminal.",
                },
                prod_ts_p5: {
                    desc: "Production readings are higher than they should be. Check the following, then tap <b>Try Again</b>.",
                    ts2: {
                        counting: {
                            one: "Make sure that the wires running through the production CT only include PV generation (and not any loads).",
                            other: "Make sure that the wires running through the production CTs only include PV generation (and not any loads). ",
                        },
                    },
                },
                production_not_enabled: "Production Meter Not Enabled",
                pv_off: { counting: { one: "Make sure the PV circuit is switched OFF.", other: "Make sure the PV circuits are switched OFF." } },
                pv_reminder: "<b>Remember to switch the PV circuit on.</b> It will take approximately 5 minutes for the microinverters to report power production.",
                readings_dont_match1: "We're not sure why the readings don't match the home's utility meter. Tap <b>Try Again</b> to change the configuration setting for the location of the consumption CTs to see if that helps.",
                readings_dont_match2: "If that doesn't help, you can exit the wizard and use the <b>Manual Meter Setup</b> option instead. We suggest you contact Enphase Support for assistance before proceeding.",
                readings_dont_match_post: "Please contact Enphase Support for assistance and inform them that you have performed the meter check but the readings still don't match the utility meter.",
                reset_timer: "Reset Timer",
                setup_title: " Set Up %{meter_type} Meter",
                start_timer: "Start Timer",
                stop_timer: "Stop Timer",
                sw_off_batt: { counting: { one: "Switch OFF the Enphase Battery circuit.", other: "Switch OFF the Enphase Battery circuits." } },
                sw_off_pv: "Switch OFF the PV breakers.",
                total_cons_not_reduced: "Turning on the PV circuit didn't reduce total consumption. Check the following, then tap <b>Try Again</b>.",
                total_load: "Total home load",
                trouble_c6_desc1: "If you've followed all of the on-screen instructions and consumption readings are still negative, ",
                trouble_c8_desc1: "If you've followed all of the on-screen instructions and total consumption is still not reduced by turning on the PV circuit, ",
                trouble_desc2: "We suggest you contact Enphase Support at <a href='tel:%{dial_num}'> %{disp_num}</a> for assistance before proceeding.",
                trouble_install_guide: "Please refer to the <strong>Envoy Metered Installation Guide</strong>",
                trouble_manual_prompt: " or you can exit the wizard and use the <strong>Manual Meter Setup</strong> option instead.",
                trouble_p0_5: {
                    desc: {
                        counting: {
                            one: "You've indicated that only %{selected_phases} is metered, but there is power on %{phaseStr}.",
                            other: "You've indicated that only %{selected_phases} are metered, but there is power on %{phaseStr}.",
                        },
                    },
                    ts1: "Check the wiring. Are the phases wired correctly?",
                    ts_no_resp: "Fix the wiring, then tap <b>Try Again</b>.",
                    ts_yes_resp: "Change the phases metered selection to match the wiring, then tap <b>Try Again</b>.",
                },
                trouble_p0_desc1: "If you've followed all of the on-screen instructions and there is still power on an unused phase, ",
                trouble_p4_desc1: "If you've followed all of the on-screen instructions and production readings are still negative, ",
                trouble_p5_desc1: "If you've followed all of the on-screen instructions and production readings are still higher than expected, ",
                trouble_p7_desc1: "If you've followed all of the on-screen instructions and the home load still does not increase as expected, ",
                trouble_prompt: "Having trouble getting past this step?",
                unable_to_see_meter: "If you are not able to access <strong>POWER</strong> readings on the utility meter or measure with a portable meter, then click <strong>Continue</strong>.",
            },
        },
        microinverters: {
            condition_clear: { description: 'This will send a command to clear the "%{condition_flag}" status on this microinverter.', title: "Clear Condition?" },
            manage_options: {
                active: "Active (%{count})",
                active_count: { counting: { one: "Active (%{count})", other: "Active (%{count})", zero: "Active (%{count})" } },
                delete_btn: "Delete",
                deleted: "Deleted (%{count})",
                deleted_count: { counting: { one: "Deleted (%{count})", other: "Deleted (%{count})", zero: "Deleted (%{count})" } },
                restore_btn: "Restore",
            },
            nav: { all: "All", manage: "Manage", status: "Status" },
            no_inverters: "There are no microinverters.",
            no_inverters_search: 'No microinverters were found matching "%{search_term}".',
            phase_labels: { "ph-a": "L1(A)", "ph-b": "L2(B)", "ph-c": "L3(C)", "ph-unk": "No phase selected", "ph-updating": "Updating...", select_one: "Select One" },
            phase_prompt_label: "Select a phase for AC Battery %{serial_num}",
            scan_close: "Close",
            scan_disabled: "Device scanning is currently unavailable due to a conflicting scan running on another Envoy.",
            scan_inhibited: "To add more microinterters to this Envoy, you must use the Installer Toolkit to provision them or contact Enphase Customer support to re-enable device scanning.",
            scan_inprogress: "Device Scan in Progress",
            scan_settings: {
                advanced_options: "More Options",
                device_total: "Device Target",
                device_total_description: "If you enter a device target, Envoy will stop scanning when its detected microinverters total reaches that number.",
                device_total_error_1: "Device total must be between %{already_detected} (the number of devices already detected) and %{device_total_max}.",
                device_total_error_2: "Device total must be greater than %{already_detected} (the number of devices already detected).",
                hours: "hours",
                less_options: "Less Options",
                minutes: "mins",
                optional: "(optional)",
                priority_duration: "Priority Duration",
                priority_duration_description: "If you enter a priority duration, Envoy will make device scanning its only activity for that period.",
                priority_duration_error: "Priority duration cannot be longer than scan duration.",
                scan_duration: "Scan Duration",
                scan_duration_error: "Scan duration must be between 1 minute and 8 hours.",
                scan_options: { min_120: "2 hours", min_15: "15 minutes", min_240: "4 hours", min_30: "30 minutes", min_480: "8 hours", min_60: "1 hour" },
                time_description: "hh:mm",
            },
            scan_start: "Start Scan",
            scan_stop: "Stop Scan",
            scan_suspended: "Device scanning is currently unavailable due to a microinverter upgrade.",
            status_options: { comm: "Comm (%{count})", comm_nocount: "Comm", power: "Power (%{count})", power_nocount: "Power", profile: "Profile (%{count})", profile_nocount: "Profile" },
        },
        monitoring: {
            connected: "Connected to Enlighten",
            high_bandwidth: "Standard",
            last_report: "Last Report:",
            low_bandwidth: "Low-Bandwidth",
            more_info: "More Info",
            no_report: "Never Reported",
            not_connected: "Not Connected to Enlighten",
            report_setting: "Report Setting",
            report_setting_cellular_desc: "This Envoy has an Enphase cellular modem and reports 15-minute interval data to Enlighten four times per day (low-bandwidth).",
            report_setting_diagnostic: "Diagnostic Mode On: %{minutes} minutes remaining",
            report_setting_enable_diagnostic: "You may enable Diagnostic Mode for two hours. While in Diagnostic Mode, the Envoy will typically report 5-minute interval data to Enlighten every 5 minutes (during daylight hours).",
            report_setting_high_desc:
                "This Envoy is set to standard reporting, which typically reports 5-minute interval data to Enlighten every 5 minutes during daylight hours. You may switch to low-bandwidth, which reports 15-minute interval data to Enlighten four times per day.",
            report_setting_low_desc:
                "This Envoy is set to low-bandwidth reporting, which reports 15-minute interval data to Enlighten four times per day. You may switch to standard reporting, which typically reports 5-minute interval data to Enlighten every 5 minutes during daylight hours.",
            report_setting_modal: {
                diagnostic_desc: "Confirm enabling Diagnostic Mode for two hours.",
                high_desc: "Confirm switch to standard reporting.",
                low_desc: "Confirm switch to low-bandwidth reporting.",
                title: "Report Setting Change",
            },
            report_setting_options: { diagnostic: "Enable Diagnostic Mode", high: "Switch to Standard Reporting", low: "Switch to Low-Bandwidth" },
            title: "Monitoring",
        },
        more: {
            about: {
                cellular_ip: "Cellular IP Address",
                cellular_mac_address: "Cellular Mac Address",
                db_size: "Database Size",
                db_size_stats: "%{db_size} (%{percent}% full)",
                ethernet_ip: "Ethernet IP Address",
                ethernet_mac_address: "Ethernet Mac Address",
                is_nonvoy: "This Envoy is programmed for configuring unmonitored systems.",
                part_number: "Part Number",
                serial_number: "Serial Number",
                sw_build_date: "Software Build Date",
                sw_version: "Software Version",
                timezone: "Current Timezone",
                title: "About This Envoy",
                wifi_ip: "Wi-Fi IP Address",
                wifi_mac_address: "Wi-Fi Mac Address",
            },
            datetime: { date: "Date", time: "Time", timezone: "Time Zone", title: "Date & Time", update_timezone: "Update Time Zone" },
            events: { event_date_line: "%{date} (Event ID %{event_id})", no_events: "There are no events.", title: "Events" },
            support_connection: {
                close: "Close Connection",
                description_close: "The secure connection to Enphase support is open.",
                description_open: "Create a secure connection so Enphase support personnel can troubleshoot this system remotely.",
                open: "Open Connection",
                title: "Connection to Enphase Support",
            },
            system: { title: "System" },
        },
        network: {
            diagnostic_tools: {
                check_connectivity: "Check Network Connectivity",
                check_network_route: "Check Network Route",
                gateway_ip: "Gateway IP",
                ip_address: "IP Address",
                mac_address: "Mac Address",
                netmask: "Netmask",
                network_connectivity: "Network Connectivity Check",
                network_connectivity_desc: "Run a collection of basic network diagnostic checks on the Envoy.",
                network_route: "Network Route Check",
                network_route_desc: "See the Envoy's path to the Internet for all available network interfaces.",
                ping: "Ping",
                ping_desc: "Enter an IP address or URL to test the Envoy's connectivity to your router or other network host.",
                ping_ip: "Ping Address",
                primary_dns: "Primary DNS Server",
                results_title: "Results",
                secondary_dns: "Secondary DNS Server",
                timestamp: "Last Checked",
                title: "Diagnostic Tools",
            },
            network_configuration: { active_network: "Active", title: "Network Configuration", types: { cellular: "Cellular", ethernet: "Ethernet", none: "None", wifi: "Wi-Fi" } },
            network_connectivity_check: {
                connectivity_enlighten: "Connectivity to Enlighten",
                connectivity_enphase: "Connectivity to Enphase",
                enlighten_dns_lookup: "Enlighten DNS Lookup",
                enphase_dns_lookup: "Enphase DNS Lookup",
                gateway_ping: "Gateway Ping",
                google_dns_lookup: "Google DNS Lookup",
                google_ping: "Google Ping",
                primary_dns_ping: "Primary DNS Ping",
                primary_interface: "Network Tested",
                result: { fail: "Failed", pass: "Good" },
                secondary_dns_ping: "Secondary DNS Ping",
                timestamp: "Last Checked",
                title: "Results",
            },
            network_route_check: { destination: "Destination", flags: "Flags", gateway: "Gateway", genmask: "Genmask", metric: "Metric", network: "Network", ref: "Ref", results_title: "Results", timestamp: "Last Checked", use: "Use" },
            title: "Network",
        },
        not_available: "Not Available",
        nsr: {
            line_status_heading: "Lines Connected:",
            line_status_help_text:
                "<ul><li>At least one of the Q-Relay lines is not connected.</li><li>Check that the Q-Relay is installed wired correctly.</li><li>Push the test button to retry.</li><li>If this is intentional then this can be ignored.</li></ul>",
            line_status_help_title: "Q-Relay Line Connection Help",
            lines: "Line %{num}:",
            reason_strings: "unknown reason;Hardware error;Button press;Force command from Envoy;AC line 1 voltage error;AC line 2 voltage error;AC line 3 voltage error;AC line 1 frequency error;Grid DC error;AC line 1 voltage low;AC line 1 voltage high;AC line 1 frequency low;AC line 1 frequency high;AC line 2 voltage low;AC line 2 voltage high;AC line 3 voltage low;AC line 3 voltage high;Grid DC low;Grid DC high;Rocof;AC Average line 1;AC average line 2;AC average line 3".split(
                ";"
            ),
            relay_heading: "Relay:",
        },
        nsrs: {
            manage_options: {
                active: "Active (%{count})",
                active_count: { counting: { one: "Active (%{count})", other: "Active (%{count})", zero: "Active (%{count})" } },
                deleted: "Deleted (%{count})",
                deleted_count: { counting: { one: "Deleted (%{count})", other: "Deleted (%{count})", zero: "Deleted (%{count})" } },
            },
            nav: { all: "All", manage: "Manage", status: "Status" },
            no_inverters: "There are no Q Relays",
            no_inverters_search: 'No Q Relays were found matching "%{search_term}".',
            status_options: { comm_nocount: "Comm", power_nocount: "Operating", profile_nocount: "Config" },
            title: "Relays Q",
        },
        overview: {
            ac_batteries: {
                communicating: "Communicating",
                default_profile_set: "Factory-Installed Grid Profile",
                detected: "Detected",
                factory_installed: "Factory-Installed",
                factory_installed_config: "Factory-Installed Configurations",
                not_set: "Not Set",
                producing_power: "Operating",
                profile_set: "Configured",
                total: "AC Batteries",
            },
            ac_batteries_counts: {
                communicating: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Communicating</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                    },
                },
                detected: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Detected</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                    },
                },
                producing_power: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Operating</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Operating</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Operating</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Operating</span>",
                    },
                },
                profile_set: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Configured</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Configured</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Configured</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Configured</span>",
                    },
                },
                total: {
                    counting: {
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>AC Battery</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>AC Batteries</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>AC Batteries</span>",
                    },
                },
            },
            ac_battery_state: {
                charging: "Charging",
                discharging: "Discharging",
                full: "Full",
                idle: "Idle",
                soc_full: "%{operating_state} (State of Charge %{percent}%)",
                soc_percent: "(State of Charge %{percent}%)",
                soc_state: "%{operating_state}",
            },
            alerts: "Alerts",
            consumption: "Consumption Meter",
            consumption_meter_label: "Consumption",
            current_consumption: "Current Power Consumption",
            current_production: "Current Power Production",
            devices: { detected: "Detected" },
            encharge_batteries: {
                communicating: "Communicating",
                default_profile_set: "Factory-Installed Grid Profile",
                detected: "Detected",
                factory_installed: "Factory-Installed",
                factory_installed_config: "Factory-Installed Configurations",
                not_set: "Not Set",
                producing_power: "Operating",
                profile_set: "Configured",
                total: "AC Batteries",
            },
            enpowers: { communicating: "Communicating", default_profile_set: "Factory-Installed Grid Profile", detected: "Detected", profile_set: "Profile Set", total: "Enpower Devices" },
            enpowers_summary: { connected: { false: "Not Connected to Enpower", true: "Connected to Enpower" }, grid_status: { false: "OFF", title: "Grid Status", true: "ON" }, title: "Enpower" },
            includes_storage_label: "(includes storage activity)",
            inverter_production: "Microinverter Production",
            inverters_update_status: { "in-progress": "Microinverter upgrade in progress. This typically takes 15 to 30 minutes to complete." },
            ip_address: "IP Address",
            latest_power: "Latest Power",
            lifetime: "Lifetime",
            lifetime_energy: "Lifetime Energy",
            meter_production: "Production Meter",
            metering: "Metering",
            microinverter_counts: {
                communicating: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Communicating</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                    },
                },
                detected: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Detected</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                    },
                },
                producing_power: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Producing Power</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Producing Power</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Producing Power</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Producing Power</span>",
                    },
                },
                profile_set: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Profile Set</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Profile Set</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Profile Set</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Profile Set</span>",
                    },
                },
                total: {
                    counting: {
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Microinverter</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Microinverters</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Microinverters</span>",
                    },
                },
            },
            microinverters: { communicating: "Communicating", default_profile_set: "Factory-Installed Grid Profile", detected: "Detected", producing_power: "Producing Power", profile_set: "Profile Set", total: "Microinverters" },
            net_power: "Net Power",
            new_microinverter_counts: {
                communicating: {
                    counting_acb: { one: "Communicating", other: "Communicating", zero: "Communicating" },
                    counting_encharge: { one: "Communicating", other: "Communicating", zero: "Communicating" },
                    counting_microinverters: { one: "Communicating", other: "Communicating", zero: "Communicating" },
                    counting_nsr: { one: "Communicating", other: "Communicating", zero: "Communicating" },
                },
                detected: {
                    counting_acb: { one: "Detected", other: "Detected", zero: "Detected" },
                    counting_encharge: { one: "Detected", other: "Detected", zero: "Detected" },
                    counting_microinverters: { one: "Detected", other: "Detected", zero: "Detected" },
                    counting_nsr: { one: "Detected", other: "Detected", zero: "Detected" },
                },
                producing_power: {
                    counting_acb: { one: "Operating", other: "Operating", zero: "Operating" },
                    counting_encharge: { one: "Operating", other: "Operating", zero: "Operating" },
                    counting_microinverters: { one: "Producing Power", other: "Producing Power", zero: "Producing Power" },
                    counting_nsr: { one: "Operating", other: "Operating", zero: "Operating" },
                },
                profile_set: {
                    counting_acb: { one: "Configured", other: "Configured", zero: "Configured" },
                    counting_encharge: { one: "Configured", other: "Configured", zero: "Configured" },
                    counting_microinverters: { one: "Profile Set", other: "Profile Set", zero: "Profile Set" },
                    counting_nsr: { one: "Configured", other: "Configured", zero: "Configured" },
                },
                total: {
                    counting_acb: { one: "AC Battery", other: "AC Batteries", zero: "AC Batteries" },
                    counting_encharge: { one: "Encharge Battery", other: "Encharge Batteries", zero: "Encharge Batteries" },
                    counting_microinverters: { one: "Microinverter", other: "Microinverters", zero: "Microinverters" },
                    counting_nsr: { one: "Q Relay", other: "Q Relays", zero: "Q Relays" },
                },
            },
            nsr: {
                detected_total_count: "%{detected_count} of %{total_count}",
                profile_label: "Profile",
                profile_not_set: "Not Configured",
                profile_set: "Configured",
                relay_state_closed: "Closed",
                relay_state_label: "State",
                relay_state_open: "Open",
                section_title: "Q Relay",
            },
            power_exporting: "Exporting to Grid",
            power_importing: "Importing from Grid",
            production: "Production",
            production_meter_label: "Production",
            profile: "Profile",
            scan_modal: {
                description: "No microinverters have been detected. Do you want to start a device scan?",
                description_battery: "No batteries have been detected. Do you want to start a device scan?",
                description_both: "No microinverters or batteries have been detected. Do you want to start a device scan?",
                description_nsr: "No Q-Relays have been detected. Do you want to start a device scan?",
                scan_timeout_description:
                    "<p>Only %{detected_count} of %{target_count} microinverters have been detected. Do you want to restart the device scan to discover the remaining microinverter(s) or <a href='#' class='open-target-count'>change the number of microinverters expected</a>?</p>",
                scan_timeout_description_battery: "<p>Only %{detected_count} of %{target_count} batteries have been detected.",
                scan_timeout_description_battery_second: {
                    one: "Do you want to restart the device scan to discover the remaining battery or <a href='#' class='open-target-count'>change the number of batteries expected</a>?</p>",
                    other: "Do you want to restart the device scan to discover the remaining batteries or <a href='#' class='open-target-count'>change the number of batteries expected</a>?</p>",
                },
                scan_timeout_description_both:
                    "<p>Only %{detected_count_micro} of %{target_count_micro} microinverters and %{detected_count_battery} of %{target_count_battery} batteries have been detected. Do you want to restart the device scan to discover the remaining devices or <a href='#' class='open-target-count'>change the number of devices expected</a>?</p>",
                scan_timeout_description_micro: "<p>Only %{detected_count} of %{target_count} microinverters have been detected.",
                scan_timeout_description_micro_second: {
                    one: "Do you want to restart the device scan to discover the remaining microinverter or <a href='#' class='open-target-count'>change the number of microinverters expected</a>?</p>",
                    other: "Do you want to restart the device scan to discover the remaining microinverters or <a href='#' class='open-target-count'>change the number of microinverters expected</a>?</p>",
                },
                scan_timeout_title: "Restart Device Scan?",
                title: "Start Device Scan?",
            },
            scan_state: { active: "Scan Active", inactive: "Scan Inactive", scan_inhibited: "Scan Inhibited" },
            set_expected: { error: "Value must be a number between 1 and 600.", label: "Enter the number of microinverters that you expect to report to this Envoy.", prompt: "# Microinverters" },
            set_expected_acb: { error: "Value must be a number between 0 and 39.", label: "Enter the number of AC Batteries that you expect to report to this Envoy.", prompt: "# AC Batteries" },
            set_expected_nsr: { error: "Value must be a number between 0 and 3.", label: "Enter the number of Q Relays that you expect to report to this Envoy.", prompt: "# Q Relays" },
            software_version: "Software Version",
            stat_title: "Power & Energy",
            storage: "Storage",
            tariff_rate_structure: "Tariff/Rate Structure",
        },
        pending: "(pending...)",
        power: {
            charging: "Charging",
            description: "Microinverters will produce power as long as there is sufficient sunlight and the utility grid is within allowable voltage and frequency ranges (as specified by local regulation).",
            discharging: "Discharging",
            idle: "Idle",
            last_report: "Last Report:",
            not_operating: "Not Operating",
            not_producing: "Not Producing",
            operating: "Operating",
            producing: "Producing Power",
            title: "Microinverters Producing Power",
        },
        profiles: {
            ac_batteries: {
                configuration_label: "Configuration",
                false: "No",
                no_profile_description: "You must provide the following information to configure the batteries before they will begin to operate.",
                no_profile_warning: "The grid profile you select here will also be applied to the Enpower, Microinverters, and Encharges installed with this system.",
                profile_complete: "Configuration Complete",
                profile_incomplete: "Configuration Incomplete",
                profile_propagating: "Configuring Batteries",
                true: "Yes",
            },
            apply: "Apply Grid Profile",
            config_batteries: "Configure Batteries",
            country_label: "Country Regulatory Specification",
            encharge_batteries: {
                configuration_label: "Configuration",
                no_profile_description: "You must provide the following information to configure the batteries before they will begin to operate.",
                no_profile_warning: "The grid profile you select here will also be applied to the Enpower, Microinverters, and AC Batteries installed with this system.",
                profile_complete: "Configuration Complete",
                profile_incomplete: "Configuration Incomplete",
                profile_propagating: "Configuring Batteries",
            },
            enpowers: {
                no_profile_description: "You must provide the following information to configure the enpower before it will begin to operate.",
                no_profile_warning: "The grid profile you select here will also be applied to the Microinverters, AC Batteries and Encharges installed with this system.",
                profile_complete: "Configuration Complete",
                profile_incomplete: "Configuration Incomplete",
                profile_propagating: "Configuring Enpower",
            },
            eu_no_profile_description: "You must select a location-specific grid profile before the microinverters will begin producing power.",
            eu_no_profile_label: "No Profile",
            eu_no_profile_vogel_description: "You must select a location-specific grid profile.",
            microinverters: {
                configuration_label: "Configuration",
                no_profile_warning: "The grid profile you select here will also be applied to the Enpower, AC Batteries and Encharges installed with this system.",
                profile_complete: "Propagation Complete",
                profile_incomplete: "Propagation Incomplete",
                profile_propagating: "Propagating Profile",
            },
            na_no_profile_description: "The microinverters are using the factory-installed grid profile settings. You can select a location-specific grid profile below.",
            na_no_profile_label: "Factory Installed Settings",
            no_profile_warning: "The grid profile you select here will also be applied to the Enpower, Microinverters, AC Batteries and Encharges installed with this system.",
            no_profiles: "There are no profiles available. You must either connect this Envoy to the Internet and select via Enlighten, or use Installer Toolkit to download a profile package and upload to this Envoy.",
            no_profiles_info:
                "If this system requires a location-specific grid profile, you must either connect this Envoy to the Internet and select via Enlighten, or use Installer Toolkit to download a profile package and upload to this Envoy.",
            nsrs: {
                configuration_label: "Configuration",
                no_profile_warning: "The grid profile you select here will also be applied to the Enpower, Microinverters, AC Batteries and Encharges installed with this system.",
                profile_complete: "Propagation Complete",
                profile_incomplete: "Propagation Incomplete",
                profile_propagating: "Propagating Profile",
            },
            profile_complete: "Propagation Complete",
            profile_incomplete: "Propagation Incomplete",
            profile_label: "Grid Profile",
            profile_propagating: "Propagating Profile",
            title: "Grid Profile",
            tpm_state: { 0: "Pending", 1: "Propagating", 2: "Profile Set", 3: "Unsettable", 4: "Failed", 5: "Upgrading", 6: "ALT-V/F" },
        },
        public_nav: {
            change_password: "Change Password",
            copyright_html: "&copy;2008-%{current_year} Enphase Energy Inc. All rights reserved.",
            enphase: "Enphase Energy",
            installer_login: "Installer Login",
            language: "Language",
            privacy: "Privacy",
            settings: "Settings",
            terms: "Terms",
        },
        select2: {
            format_matches: { counting: { one: "One result is available, press enter to select it.", other: "%{count} results are available, use up and down arrow keys to navigate." } },
            input_too_long: { counting: { one: "Please delete %{count} character", other: "Please delete %{count} characters" } },
            input_too_short: "Please enter %{count} or more characters",
            loading_more: "Loading more results...",
            no_matches: "No matches found for %{term}",
            no_results: "No matches found",
            searching: "Searching...",
            selection_too_big: { counting: { one: "You can only select %{count} item.", other: "You can only select %{count} items." } },
        },
        serial_number: "Serial Number",
        system: {
            power_control: {
                disabled_desc: "Power Production Disabled",
                enabled_desc: "Power Production Enabled",
                modal: {
                    desc_set_off: "This will <strong>disable</strong> system power production.",
                    desc_set_on: "This will <strong>enable</strong> system power production.",
                    title: "System Power Control",
                    verify: "Are you sure this is what you want?",
                },
            },
        },
        tariff: {
            add_peak: "Add Peak %{num}",
            add_tier: "Add Tier %{num}",
            base_rate_label: "Base Rate",
            baseline: "Baseline",
            charge_at_night: "Charge batteries from the grid at night",
            chg_at_night_desc: "Enable this option to set the batteries to charge from the grid during nighttime.",
            config_details: "Configuration Details",
            day_names: ["Weekday", "Weekend"],
            greater_than: "Greater than",
            hour_connector: "to",
            month_connector: "through",
            not_set: "Not Set",
            off_peak_label: "Off-Peak",
            peak_hours_label: "Peak %{num} Hours",
            peak_label: "Peak %{num}",
            peak_rate_label: "Peak %{num} Rate",
            peak_start_time: "Peak Start Time:",
            per_day: "per day",
            per_month: "per month",
            percent_of_baseline: "% of Baseline",
            remove: "Remove",
            seasonal_rate_desc: "Enable this option if rate differs between seasons.",
            seasonal_select_label: "Rate differs between seasons",
            select_type: "Select Type",
            single_rate: "Single Rate",
            summer_rate_label: "Summer",
            tariff_rate_title: "Tariff/Rate Structure",
            tariff_type_warning: "For a Time of Use tariff/rate structure you must provide at least one peak rate. If there is no peak rate, select Single Rate instead of Time of Use.",
            tier: "Tier %{num}",
            tiered: "Tiered",
            time_of_use: "Time of Use",
            unit_label: "kWh",
            up_to: "Up to",
            weekday_add_peak: "Add Weekday Peak %{num}",
            weekday_base_rate_label: "Weekday Base Rate",
            weekday_off_peak_rate_label: "Weekday Off-Peak Rate",
            weekday_peak_hours_label: "Weekday Peak %{num} Hours",
            weekday_peak_rate_label: "Weekday Peak %{num} Rate",
            weekdays_label: "Weekday",
            weekdays_rate_label: "Weekday",
            weekend_add_peak: "Add Weekend Peak %{num}",
            weekend_base_rate_label: "Weekend Base Rate",
            weekend_label: "Weekend",
            weekend_off_peak_rate_label: "Weekend Off-Peak Rate",
            weekend_peak_hours_label: "Weekend Peak %{num} Hours",
            weekend_peak_rate_label: "Weekend Peak %{num} Rate",
            weekend_rate_desc: "Enable this option if rate differs between weekdays and weekends.",
            weekend_select_label: "Rate differs between weekday and weekend",
            winter_months_desc: "To set Winter, select Summer months above.",
            winter_rate_label: "Winter",
            zero_not_allowed: "Zero is not a valid value",
        },
        wifi: {
            ap_mode_config: {
                confirm_switch_modal: { description: "This may interrupt communications with the Envoy and require you to re-connect.", title_false: "Disable AP Mode?", title_true: "Enable AP Mode?" },
                description_disabled: "Enable AP mode to allow this Envoy to operate as a wireless Access Point (AP). This will allow wireless devices in the vicinity to connect to the Envoy.",
                description_enabled: "This Envoy is currently operating as a wireless Access Point (AP).",
                disable: "Disable AP Mode",
                enable: "Enable AP Mode",
                time_remaining: { one: "Time Remaining: %{count} hour %{minutes} mins", other: "Time Remaining: %{count} hours %{minutes} mins", zero: "Time Remaining: %{count} hours %{minutes} mins" },
                title_disabled: "AP Mode Disabled",
                title_enabled: "AP Mode Enabled",
            },
            available_networks: "Available Networks",
            connect: {
                confirm_connect: "Confirm Network",
                connect_to_site: "Connect to %{site_name}?",
                connect_warning: "Note: This may interrupt communications with the Envoy and require you to re-connect.",
                connection_failure_explanation: "Unable to connect to network %{site_name}.",
                wait_join: "Please wait while the Envoy connects to %{site_name}...",
            },
            connect_incomplete: { description: "It's taking longer than expected to confirm a connection to %{site_name}. If the network connection was not successful, please try again.", title: "Sorry..." },
            connect_success: {
                description:
                    "<p>The Envoy has successfully connected to %{site_name}.</p><p><a href='#' class='open-overview'>Return to Overview.</a></p><p>Note: It may take up to a minute before the Enlighten connection status is updated.</p>",
                title: "Successfully Connected",
            },
            connection_lost: "This device has lost its connection to the Envoy.",
            connection_status: { attempting_to_connect: "Attempting to connect...", connecting: "Connecting...", connection_lost: "Connection Lost", failed: "Connection Failed", not_connected: "Not connected" },
            country_config: {
                description: "Select your country (ISO 3166-1 alpha-2 code) to optimize Wi-Fi signal strength in accordance with your national regulatory agency.",
                optional: "(optional)",
                select_prompt: "Select Country",
                title: "Country",
                update: "Update Country",
            },
            current_connection: "Connected to <span class='network_name'>%{network_name}</span>",
            enter_password: "Enter the password for %{site_name}.",
            forget: {
                forget_network_header: 'Forget Wi-Fi Network "%{network_name}"?',
                forget_warning: "Note: This may interrupt communications with the Envoy and require you to re-connect.",
                ok_to_forget: "This Envoy will no longer use this network to connect to Enlighten.",
                wait_forget: "Please wait while the Envoy forgets the network...",
            },
            forget_failed: { description: "Attempt to forget the Wi-Fi Network failed. If this continues, contact customer support.", title: "Sorry..." },
            forget_incomplete: {
                description:
                    "It's taking longer than expected to confirm forget Wi-Fi Network. Due to this, it is unlikely that your Envoy can still communicate with this application. Please check the network settings on your device and then reconnect to the Envoy.",
                title: "Sorry...",
            },
            gateway_ip: "Gateway IP: ",
            ip_address: "IP Address: ",
            join_another_network: { button: "Select Another Network", title: "Select Another Network" },
            join_network: { button: "View Networks", title: "Select Network" },
            network_changed_explanation:
                "The network connection on your device has changed. Due to this it is unlikely that your Envoy can still communicate with this application. Please check the network settings on your device and then reconnect to the Envoy.",
            network_changed_title: "Network Connection Changed",
            no_networks_found: "No networks found",
            not_configured_prompt: "Select a wireless network for this Envoy to use to connect to Enlighten.",
            other_network: {
                confirm_switch_modal: { description: "This may interrupt communications with the Envoy and require you to re-connect.", title: "Connect to Other Network?" },
                connect: "Connect",
                description: "Connect to an access point which is not configured to broadcast its ESSID.",
                name: "Name (ESSID)",
                password: "Password",
                security: "Security",
                security_mode: { None: "None", WEP: "WEP", "WPA-PSK": "WPA Personal", "WPA2-PSK": "WPA2 Personal" },
                title: "Connect Other Network",
                wpa_algorithm: "WPA Algorithm",
                wpa_algorithm_type: { CCMP: "CCMP", None: "None", TKIP: "TKIP", "TKIP+CCMP": "TKIP + CCMP" },
            },
            page_title: "Wi-Fi Configuration",
            password_required: "Password Required",
            please_wait: "Please Wait",
            title: "Wi-Fi Network",
            unsupported_site: "Unsupported Network",
            unsupported_site_explanation: "This network uses a security method that is not supported by the Envoy.",
            wifi: "Wi-Fi",
            wifi_hardware_missing: "Wi-Fi hardware not found",
            wifi_waiting_note: "This process may take up to 3 minutes, and you may need to reconnect to the Envoy once it completes.",
        },
        wireless_connection: { connected: "Connected", last_report: "Last Report:", not_connected: "Not Connected", signal_strength: "Signal Strength:", subghz: "Sub GHz", title: "Wireless Connection Links", zigbee_2_4: "2.4 GHz" },
    },
    lwui: {
        admin: {
            cross_domain_traffic: { status_msgs: { cross_domain_traffic: "Cross domain traffic reported", no_cross_domain_traffic: "No cross domain traffic reported", updated: "Updated" } },
            network_connectivity: {
                error_msgs: {
                    bad_device_ip: "Bad device IP address and/or network mask.",
                    bad_gateway_address: "Bad gateway IP address.",
                    gateway_subnet: "Gateway IP address not within subnet %{subnet}",
                    invalid_primary_dns: "Primary DNS address is not a valid IP address.",
                    invalid_secondary_dns: "Secondary DNS address is not a valid IP address.",
                },
            },
            security_admin: {
                status_msg: {
                    new_confirm_password_mismatch: "New and confirm password do not match",
                    old_password_mismatch: "Old password not correct",
                    password_file_missing: "Administrator password file(s) missing",
                    password_update_failure: "Password update failed",
                    password_update_failure_error: "Error: Password change failed",
                    password_update_successful: "Password update successful",
                },
            },
            wireless_connectivity: {
                advanced_settings: {
                    button_apply: "Apply",
                    regulatory_domain: "Country Code (ISO 3166-1 Alpha-2)",
                    regulatory_legend: "Select your country from this list.  This defines the permissible radio frequencies and transmission strength in accordance with your national regulatory agency.",
                },
                ap_mode: { active: "active", inactive: "inactive", name: "AP name:", start: "Start AP Mode", status: "AP Mode status:", stop: "Stop AP Mode", timeout: "minutes to AP timeout:" },
                busy_joining: "Attempting to Connect to the Network",
                busy_scanning: "Scanning for Wi-Fi Networks",
                busy_testing: "Testing Connection",
                connection_test: { failed: "Connection test failed.  Please check your settings.", successful: "Connection test was successful.  You may join the network." },
                current_settings: {
                    dhcp_waiting: "Requesting DHCP address from Wi-Fi Network",
                    forget_network: "Forget this Network",
                    label_gateway_ip: "Gateway IP",
                    link_status: "Status",
                    no_config: "No Wi-Fi connection is configured",
                    no_device: "No compatible Wi-Fi device detected",
                    status_connected: "Connected",
                    status_connecting: "Establishing connection",
                    status_stopped: "Wi-Fi stopped",
                    unavailable: "unavailable",
                    verified_config: "Verified Wi-Fi Network",
                },
                device_information: {
                    device: "Device",
                    driver_name: "Driver Name",
                    hw_version: "Hardware Version",
                    mac_address: "MAC Address",
                    manufacturer: "Manufacturer",
                    model: "Model",
                    usb_slot_num: "USB Slot #",
                    usb_spec_version: "USB Specification Version",
                    vendor: "Vendor",
                },
                forget_msg: "This action will delete the current wireless configuration and drop the connection.  If you are connected wirelessly, your connection to the Envoy will be lost.",
                legend_advanced_settings: "Advanced Settings",
                legend_ap_mode: "Envoy AP Mode",
                legend_current_settings: "Current Wi-Fi Settings",
                legend_device_information: "Device Information",
                legend_manual_configuration: "Manual Configuration",
                legend_site_survey: "Available Wi-Fi Networks",
                manual_configuration: {
                    algorithm: "WPA Algorithm",
                    button_clear: "Clear Form",
                    button_connect: "Join Network",
                    button_test: "Test Connection",
                    channel: "Wireless Channel",
                    essid_length: "The ESSID must be 1 to 32 characters long",
                    info_msg: "The following settings are necessary only for connecting with an access point which is not configured to broadcast its ESSID.",
                    mhz: "MHz",
                    network_name: "Wireless Network Name (ESSID)",
                    password: "Password/PSK",
                    password_unneeded: "A password is unnecessary for an open system",
                    password_wep: "WEP keys must be either 10, 26, or 58 hexadecimal digits",
                    password_wep_chars: "WEP keys must be comprised of only numbers and the letters A-F",
                    password_wpa: "WPA/WPA2-PSK passwords must be at least 8 and no greater than 63 characters",
                    security_mode: "Wireless Security Mode",
                },
                site_survey: { button_rescan: "Re-Scan", info_msg: "Select a network from the list.", none_found: "No networks found" },
                test_msg: "The Wi-Fi connection will now be tested to confirm that the settings are valid.  The current connection to the Envoy will be lost temporarily during the connection test.",
            },
        },
        home: {
            event_tbl_col_hdr: { date: "Date", details: "Details", device: "Device", event: "Event", eventId: "Event Id" },
            warnings: {
                acb_critical_temp: "An elevated internal temperature is detected in one or more of the AC Batteries. Check the Installation and Operation Manual for instructions.",
                acb_needs_meters: "An Envoy-S with metering is required to complete system commissioning. AC Batteries requiring metering have been detected, and this Envoy-S does not have metering.",
                acdisco_active: "AC disconnect active. Envoy cannot communicate with microinverters.",
                acdisco_fail: "AC disconnect failure. Check AC disconnect relay.",
                both_meter_enabled: "Both the production and consumption meters must be enabled to complete system commissioning.",
                check_date_warn_msg:
                    "The system time is invalid.  Until this is corrected the Envoy will not be able to communicate with microinverters.  If the Envoy is not configured to use NTP, or is not able to contact the configured NTP servers, this will need to be corrected manually via the <a href='/admin/lib/date_time_display'> Date and Time Administration controls.</a>",
                cross_domain_traffic: "Communications from other Envoy(s) have been detected.",
                date_invalid: "The system time is invalid. Connect the Envoy to the Internet so that its time can be set correctly.",
                db_warn_msg: "The Envoy has not been able to send data to Enlighten, and local storage is nearly full. Connect the Envoy to the Internet to avoid data loss.",
                eim_consumption_check_wiring: "The power consumption meter is not properly connected. Please check the wiring.",
                eim_production_check_wiring: "The power production meter is not properly connected. Please check the wiring.",
                envoy_needs_meters: "An Envoy-S with metering is required to complete system commissioning. A grid profile requiring metering has been selected, and this Envoy-S does not have metering.",
                legend: "Warning",
                no_enlighten_report: "The system has never reported to Enlighten. Connect the Envoy to the Internet to establish a connection with Enlighten.",
                no_phase_assignment: "AC Batteries must be assigned to phases to complete system commissioning.",
                pcu_limit_warn_msg: "The number of microinverters detected exceeds the Envoy\u2019s Monitoring Configuration. Contact Enphase Energy Customer Support.",
                pcu_limit_warn_msg2: "The number of microinverters detected exceeds the Envoy's default Monitoring Configuration.  The Envoy requires an Internet connection to set the Monitoring Configuration.",
                pel_profile_requires_meters: "The production and consumption meters must be configured to support power export limiting.",
                phase_assoc_failed: "Phase detection failed. Check the Installation and Operation Manual for instructions.",
                pim_profile_requires_meters: "Multi-phase production and consumption metering must be enabled to support phase imbalance management and loss of phase detection.",
            },
        },
    },
    number: {
        currency: { format: { delimiter: ",", format: "%u %n", precision: 2, separator: ".", significant: !1, strip_insignificant_zeros: !1, unit: "$" } },
        format: { delimiter: ",", precision: 3, separator: ".", significant: !1, strip_insignificant_zeros: !1 },
        human: {
            decimal_units: { format: "%n %u", units: { billion: "Billion", million: "Million", quadrillion: "Quadrillion", thousand: "Thousand", trillion: "Trillion", unit: "" } },
            format: { delimiter: "", precision: 3, significant: !0, strip_insignificant_zeros: !0 },
            storage_units: { format: "%n %u", units: { byte: { one: "Byte", other: "Bytes" }, gb: "GB", kb: "KB", mb: "MB", tb: "TB" } },
        },
        percentage: { format: { delimiter: "" } },
        precision: { format: { delimiter: "" } },
    },
    scripts: { data: { verify_internet_connection_message: "Your system has never reported to Enlighten. Verify the Internet connection." } },
    time: {
        am: "AM",
        formats: {
            default: "%d/%m/%Y %I\u00a0:%M %p",
            default_date_time_no_pad: "%d/%m/%Y %-I:%M %p",
            hour_meridian: "%-H:00",
            long: "%B %d, %Y %H:%M",
            noday_nozone_datetime_secs_ui: "%d %b, %Y %-I:%M:%S %p",
            noday_nozone_datetime_ui: "%d %b, %Y %-I:%M %p",
            nozone_datetime: "%a %d %b %Y %I:%M %p",
            short: "%d %b %H:%M",
            short_date: "%d/%m/%Y",
            time_only: "%H:%M",
        },
        pm: "PM",
    },
    units: {
        amps: "A",
        bool: "Boolean",
        degrees: "degrees",
        hertz: "Hz",
        hertz_per_sec: "Hz / s",
        lagging: "Lagging",
        milliseconds: "ms",
        millivolts: "mV",
        none: "",
        percent: "%",
        percent_per_hertz: "% / Hz",
        percent_per_min: "% / min",
        seconds: "s",
        volts: "V",
    },
};
I18n.translations["en-GB"] = {
    date: {
        abbr_day_names: "Sun Mon Tue Wed Thu Fri Sat".split(" "),
        abbr_month_names: [null, "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        day_names: "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),
        formats: { default: "%Y-%m-%d", long: "%B %e, %Y", only_day: "%e", short: "%e %b" },
        month_names: [null, "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        order: ["year", "month", "day"],
    },
    envoy: {
        cond_flags: {
            acb_ctrl: {
                bmudatabounds: "BMU Data Bounds Error",
                bmuhardwareerror: "BMU Hardware Error",
                bmuimageerror: "BMU Image Error",
                bmumaxcurrentwarning: "BMU Max Current Warning",
                bmusenseerror: "BMU Sense Error",
                cellmaxtemperror: "Cell Max Temperature Error",
                cellmaxtempwarning: "Cell Max Temperature Warning",
                cellmaxvoltageerror: "Cell Max Voltage Error",
                cellmaxvoltagewarning: "Cell Max Voltage Warning",
                cellmintemperror: "Cell Min Temperature Error",
                cellmintempwarning: "Cell Min Temperature Warning",
                cellminvoltageerror: "Cell Min Voltage Error",
                cellminvoltagewarning: "Cell Min Voltage Warning",
                cibcanerror: "CIB CAN Error",
                cibimageerror: "CIB Image Error",
                cibspierror: "CIB SPI Error",
            },
            nsrb_ctrl: {
                acfreqhigh: "AC Frequency High",
                acfreqlow: "AC Frequency Low",
                acfrequencyoor: "AC Frequency Out Of Range",
                acvoltageavgline1: "AC Voltage Avg Out Of Range - Phase 1",
                acvoltageavgline2: "AC Voltage Avg Out Of Range - Phase 2",
                acvoltageavgline3: "AC Voltage Avg Out Of Range - Phase 3",
                acvoltagehighline1: "AC Voltage High - Phase 1",
                acvoltagehighline2: "AC Voltage Out Of Range - Phase 2",
                acvoltagehighline3: "AC Voltage High - Phase 3",
                acvoltagelowline1: "AC Voltage Low - Phase 1",
                acvoltagelowline2: "AC Voltage Out Of Range - Phase 2",
                acvoltagelowline3: "AC Voltage Low - Phase 3",
                acvoltageoorline1: "AC Voltage Out Of Range - Phase 1",
                acvoltageoorline2: "AC Voltage Out Of Range - Phase 2",
                acvoltageoorline3: "AC Voltage Out Of Range - Phase 3",
                buttonpress: "Button Pressed",
                dcgriderror: "DC Grid Current Error",
                dcgridhigh: "DC Grid Current High",
                dcgridlow: "DC Grid Current Low",
                relayforced: "Relay Forced",
                relayopen: "Relay Open",
                rocof: "Rate of Change of Frequency Error",
            },
            obs_strs: {
                discovering: "Discovering",
                failure: "Failure to report",
                flasherror: "Flash Error",
                notmonitored: "Not Monitored",
                ok: "Normal",
                plmerror: "PLM Error",
                secmodeenterfailure: "Secure mode enter failure",
                secmodeexitfailure: "Secure mode exit failure",
                sleeping: "Sleep Mode On",
                verifing: "Verifying Device",
            },
            pcu_chan: {
                acMonitorError: "AC Monitor Error",
                acfrequencyhigh: "AC Frequency High",
                acfrequencylow: "AC Frequency Low",
                acfrequencyoor: "AC Frequency Out Of Range",
                acvoltage_avg_hi: "AC Voltage Average High",
                acvoltagehigh: "AC Voltage High",
                acvoltagelow: "AC Voltage Low",
                acvoltageoor: "AC Voltage Out Of Range",
                acvoltageoosp1: "AC Voltage Out Of Range - Phase 1",
                acvoltageoosp2: "AC Voltage Out Of Range - Phase 2",
                acvoltageoosp3: "AC Voltage Out Of Range - Phase 3",
                agfpowerlimiting: "AGF Power Limiting",
                dcresistancelow: "DC Resistance Low",
                dcresistancelowpoweroff: "DC Resistance Low - Power Off",
                dcvoltagetoohigh: "DC Voltage Too High",
                dcvoltagetoolow: "DC Voltage Too Low",
                dfdt: "AC Frequency Changing too Fast",
                gfitripped: "GFI Tripped",
                gridgone: "Grid Gone",
                gridinstability: "Grid Instability",
                gridoffsethi: "Grid Offset Hi",
                gridoffsetlow: "Grid Offset Low",
                hardwareError: "Hardware Error",
                hardwareWarning: "Hardware Warning",
                highskiprate: "High Skip Rate",
                invalidinterval: "Invalid Interval",
                pwrgenoffbycmd: "Power generation off by command",
                skippedcycles: "Skipped Cycles",
                vreferror: "Voltage Ref Error",
            },
            pcu_ctrl: {
                alertactive: "Alert Active",
                altpwrgenmode: "Alternate Power Generation Mode",
                altvfsettings: "Alternate Voltage and Frequency Settings",
                badflashimage: "Bad Flash Image",
                bricked: "No Grid Profile",
                commandedreset: "Commanded Reset",
                criticaltemperature: "Critical Temperature",
                "dc-pwr-low": "DC Power Too Low",
                iuplinkproblem: "IUP Link Problem",
                manutestmode: "In Manu Test Mode",
                nsync: "Grid Perturbation Unsynchronized",
                overtemperature: "Over Temperature",
                poweronreset: "Power On Reset",
                pwrgenoffbycmd: "Power generation off by command",
                runningonac: "Running on AC",
                "sleep-mode": "Sleep Mode On",
                tpmtest: "Transient Grid Profile",
                unexpectedreset: "Unexpected Reset",
                watchdogreset: "Watchdog Reset",
            },
            rgm_chan: { check_meter: "Meter Error", power_quality: "Poor Power Quality" },
        },
        global: {
            cleared: "Clear",
            copyright_notice: "2007-2014, [e] Enphase Energy, Inc. All rights reserved.",
            copyright_notice_01: "[e] Enphase Energy, Inc. All rights reserved.",
            cs_phone_number: "XXX-XXX-XXXX",
            disable: "Disable",
            disabled: "Disabled",
            enable: "Enable",
            enabled: "Enabled",
            enlighten_token_link: "Get the token here",
            false: "False",
            none: "None",
            notapplicable: "n/a",
            ok: "OK",
            page_not_found_msg1: "Page Not Found",
            page_not_found_msg2: "The page you tried to view does not exist",
            page_not_found_msg3: 'Try the <a href="/">home</a> page',
            serialnumber: "Serial Number",
            set: "Set",
            too_many_installer_sessions_msg1: "Too many installer sessions active",
            too_many_installer_sessions_msg2: "Consider closing other installer session windows",
            too_many_installer_sessions_msg3: "Too many requests active for this resource, please retry in a couple minutes",
            true: "True",
            unknown: "Unknown",
        },
        paging: {
            all: "All",
            clearchoices: "Reset Table",
            info: "Showing _START_ to _END_ of _TOTAL_ entries",
            infoempty: "Showing 0 to 0 of 0 entries",
            infofiltered: "(filtered from _MAX_ total entries)",
            lengthmenu: "Show _MENU_ entries",
            processing: "Processing...",
            search: "Search:",
            zerorecords: "No matching records found",
        },
    },
    envoy_backbone: {
        ac_batteries: {
            manage_options: {
                active: "Active (%{count})",
                active_count: { counting: { one: "Active (%{count})", other: "Active (%{count})", zero: "Active (%{count})" } },
                deleted: "Deleted (%{count})",
                deleted_count: { counting: { one: "Deleted (%{count})", other: "Deleted (%{count})", zero: "Deleted (%{count})" } },
            },
            max_temp: "Max Temp: ",
            nav: { all: "All", manage: "Manage", status: "Status" },
            no_inverters: "There are no batteries.",
            no_inverters_search: 'No AC Batteries were found matching "%{search_term}".',
            sleep_mode: {
                enable_failed: "The attempt to put the selected batteries into sleep mode failed. Please try again in a few minutes. If this problem continues, contact customer support.",
                prompt_to_cancel: { desc: "A battery must be in sleep mode before it can be safely disconnected.</br></br>Are you sure you want to stop the battery from going into sleep mode?" },
                prompt_to_sleep_modal: {
                    desc: "Batteries must be in sleep mode before they can be safely disconnected.</br></br><b>Note:</b> Batteries will charge or discharge to %{min}-%{max}% state of charge before entering sleep mode.",
                    target_soc_label: "Target State of Charge",
                    target_soc_link_text: "Change target state of charge",
                    warning: "Warning: Once a battery is put into sleep mode it can only be taken out of sleep mode by a professional installer.",
                },
                prompt_to_wake: "A battery must be in sleep mode before it can be safely disconnected.</br></br>Are you sure you want to turn sleep mode off?",
                sleep_btn: "Sleep",
            },
            state_of_charge: "State of Charge: ",
            status_options: {
                cancel_sleep_label: "Stop",
                comm_nocount: "Comm",
                power_nocount: "Operating",
                preparing_to_sleep_text: "Entering Sleep Mode",
                profile_nocount: "Config",
                wake_sleep_label: "Turn Off",
                waking_label: "Exiting Sleep Mode",
            },
        },
        app_title: "Envoy Mobile",
        authentication: {
            authentication_with_authms: "Login with Enphase",
            bad_jwt: "Bad token",
            insert_token_headline: "Token Authentication",
            title: "Authentication",
            token_headline: "Token",
            token_link: "Visit %{auth_authority} to get your token",
            token_submit: "Submit",
            too_many_sessions: "Too many sessions",
            verifying_jwt: "Verifying token",
        },
        buttons: {
            cancel: "Cancel",
            change: "Change",
            close: "Close",
            connect: "Connect",
            edit: "Edit",
            forget: "Forget",
            forget_network: "Forget this Network",
            ok: "OK",
            sleep_off: "Turn Sleep Mode Off",
            sleep_on: "Turn Sleep Mode On",
            start_scan: "Start Scan",
            stop: "Stop",
            update: "Update",
        },
        cellular: {
            carrier: "Carrier",
            connected: "Connected",
            connection_status: "Connection Status",
            iccid: "ICCID (Cell Number)",
            imsi: "IMSI (Subscriber ID)",
            mei: "Modem IMEI Number",
            no_modem: "No cellular modem detected",
            not_connected: "Not Connected",
            page_title: "Cellular Configuration",
        },
        comm_check: {
            communication_level: "Communications Level",
            description: "Check signal strength between the Envoy and the microinverters.",
            devices: "Devices",
            in_progress: "Communications Check in Progress",
            remaining_time: "%{minutes} minutes remaining",
            remaining_time_one: "< 1 minute remaining",
            start: "Start Communications Check",
            stop: "Stop Communications Check",
            title: "Communications Check",
        },
        comms: {
            communicating: "Communicating",
            description: "The Envoy\u2019s list of communicating microinverters includes the serial numbers of all devices that are receiving messages from the Envoy and reporting production and status information.",
            not_communicating: "Not Communicating",
            title: "Microinverters Communicating",
        },
        countries: {
            AD: "Andorra",
            AE: "United Arab Emirates",
            AF: "Afghanistan",
            AG: "Antigua and Barbuda",
            AI: "Anguilla",
            AL: "Albania",
            AM: "Armenia",
            AQ: "Antarctica",
            AR: "Argentina",
            AS: "American Samoa",
            AT: "Austria",
            AU: "Australia",
            AW: "Aruba",
            AZ: "Azerbaijan",
            BA: "Bosnia and Herzegovina",
            BB: "Barbados",
            BD: "Bangladesh",
            BE: "Belgium",
            BF: "Burkina Faso",
            BG: "Bulgaria",
            BH: "Bahrain",
            BI: "Burundi",
            BJ: "Benin",
            BM: "Bermuda",
            BN: "Brunei Darussalam",
            BO: "Bolivia, Plurinational State of",
            BR: "Brazil",
            BS: "Bahamas",
            BT: "Bhutan",
            BV: "Bouvet Island",
            BW: "Botswana",
            BY: "Belarus",
            BZ: "Belize",
            CA: "Canada",
            CC: "Cocos (Keeling) Islands",
            CF: "Central African Republic",
            CG: "Congo",
            CH: "Switzerland",
            CI: "Cd'Ivoire",
            CK: "Cook Islands",
            CL: "Chile",
            CM: "Cameroon",
            CN: "China",
            CO: "Colombia",
            CR: "Costa Rica",
            CV: "Cape Verde",
            CX: "Christmas Island",
            CY: "Cyprus",
            CZ: "Czech Republic",
            DE: "Germany",
            DJ: "Djibouti",
            DK: "Denmark",
            DM: "Dominica",
            DO: "Dominican Republic",
            DZ: "Algeria",
            EC: "Ecuador",
            EE: "Estonia",
            EG: "Egypt",
            EH: "Western Sahara",
            ER: "Eritrea",
            ES: "Spain",
            ET: "Ethiopia",
            FI: "Finland",
            FJ: "Fiji",
            FK: "Falkland Islands (Malvinas)",
            FM: "Micronesia, Federated States of",
            FO: "Faroe Islands",
            FR: "France",
            GA: "Gabon",
            GB: "United Kingdom",
            GD: "Grenada",
            GE: "Georgia",
            GF: "French Guiana",
            GH: "Ghana",
            GI: "Gibraltar",
            GL: "Greenland",
            GM: "Gambia",
            GN: "Guinea",
            GP: "Guadeloupe",
            GQ: "Equatorial Guinea",
            GR: "Greece",
            GS: "South Georgia and the South Sandwich Islands",
            GT: "Guatemala",
            GU: "Guam",
            GW: "Guinea-Bissau",
            GY: "Guyana",
            HK: "Hong Kong",
            HM: "Heard Island and McDonald Islands",
            HN: "Honduras",
            HR: "Croatia",
            HT: "Haiti",
            HU: "Hungary",
            ID: "Indonesia",
            IE: "Ireland",
            IL: "Israel",
            IN: "India",
            IO: "British Indian Ocean Territory",
            IS: "Iceland",
            IT: "Italy",
            JM: "Jamaica",
            JO: "Jordan",
            JP: "Japan",
            KE: "Kenya",
            KG: "Kyrgyzstan",
            KH: "Cambodia",
            KI: "Kiribati",
            KM: "Comoros",
            KN: "Saint Kitts and Nevis",
            KR: "Korea, Republic of",
            KW: "Kuwait",
            KY: "Cayman Islands",
            KZ: "Kazakhstan",
            LA: "Lao People's Democratic Republic",
            LB: "Lebanon",
            LC: "Saint Lucia",
            LI: "Liechtenstein",
            LK: "Sri Lanka",
            LR: "Liberia",
            LS: "Lesotho",
            LT: "Lithuania",
            LU: "Luxembourg",
            LV: "Latvia",
            MA: "Morocco",
            MC: "Monaco",
            MD: "Moldova, Republic of",
            ME: "Montenegro",
            MG: "Madagascar",
            MH: "Marshall Islands",
            ML: "Mali",
            MM: "Myanmar",
            MN: "Mongolia",
            MO: "Macao",
            MP: "Northern Mariana Islands",
            MQ: "Martinique",
            MR: "Mauritania",
            MS: "Montserrat",
            MT: "Malta",
            MU: "Mauritius",
            MV: "Maldives",
            MW: "Malawi",
            MX: "Mexico",
            MY: "Malaysia",
            MZ: "Mozambique",
            NA: "Namibia",
            NC: "New Caledonia",
            NE: "Niger",
            NF: "Norfolk Island",
            NG: "Nigeria",
            NI: "Nicaragua",
            NL: "Netherlands",
            NO: "Norway",
            NP: "Nepal",
            NR: "Nauru",
            NU: "Niue",
            NZ: "New Zealand",
            OM: "Oman",
            PA: "Panama",
            PE: "Peru",
            PF: "French Polynesia",
            PG: "Papua New Guinea",
            PH: "Philippines",
            PK: "Pakistan",
            PL: "Poland",
            PM: "Saint Pierre and Miquelon",
            PN: "Pitcairn",
            PR: "Puerto Rico",
            PT: "Portugal",
            PW: "Palau",
            PY: "Paraguay",
            QA: "Qatar",
            RO: "Romania",
            RU: "Russian Federation",
            SA: "Saudi Arabia",
            SB: "Solomon Islands",
            SC: "Seychelles",
            SE: "Sweden",
            SG: "Singapore",
            SH: "Saint Helena, Ascension and Tristan da Cunha",
            SI: "Slovenia",
            SJ: "Svalbard and Jan Mayen",
            SK: "Slovakia",
            SL: "Sierra Leone",
            SM: "San Marino",
            SN: "Senegal",
            SO: "Somalia",
            SR: "Suriname",
            ST: "Sao Tome and Principe",
            SV: "El Salvador",
            SY: "Syrian Arab Republic",
            SZ: "Swaziland",
            TC: "Turks and Caicos Islands",
            TD: "Chad",
            TF: "French Southern Territories",
            TG: "Togo",
            TH: "Thailand",
            TJ: "Tajikistan",
            TK: "Tokelau",
            TL: "Timor-Leste",
            TM: "Turkmenistan",
            TN: "Tunisia",
            TO: "Tonga",
            TR: "Turkey",
            TT: "Trinidad and Tobago",
            TV: "Tuvalu",
            TZ: "Tanzania, United Republic of",
            UA: "Ukraine",
            UG: "Uganda",
            UM: "United States Minor Outlying Islands",
            US: "United States",
            UY: "Uruguay",
            UZ: "Uzbekistan",
            VA: "Holy See (Vatican City State)",
            VC: "Saint Vincent and the Grenadines",
            VE: "Venezuela, Bolivarian Republic of",
            VG: "Virgin Islands, British",
            VI: "Virgin Islands, U.S.",
            VN: "Viet Nam",
            VU: "Vanuatu",
            WF: "Wallis and Futuna",
            WS: "Samoa",
            YE: "Yemen",
            YT: "Mayotte",
            ZA: "South Africa",
            ZM: "Zambia",
            ZW: "Zimbabwe",
        },
        counts: "%{actual_count}/%{expected_count}",
        detected: {
            battery_target_seperate: { one: "%{count} battery", other: "%{count} batteries", zero: "%{count} batteries" },
            description:
                "The Envoy\u2019s list of detected microinverters includes all serial numbers discovered by a device scan or provisioned with the Installer Toolkit. When microinverters have been detected, they can send and receive additional data from the Envoy.",
            detected: "Detected",
            device_target: "Device Target: %{count}",
            device_target_title: "Device Target: ",
            discovered: "Discovered:",
            installed: "Installed",
            micro_target_seperate: { one: "%{count} microinverter", other: "%{count} microinverters", zero: "%{count} microinverters" },
            nsr_target_separate: { one: "%{count} Q-Relay", other: "%{count} Q-Relays", zero: "%{count} Q-Relays" },
            provisioned: "Provisioned:",
            remaining_duration: { one: "Remaining Duration: %{count} hour %{minutes} mins", other: "Remaining Duration: %{count} hours %{minutes} mins", zero: "Remaining Duration: %{count} hours %{minutes} mins" },
            remaining_hour_one: "1 hour",
            remaining_hours: "%{hours} hours",
            remaining_minute_one: "1 minute remaining",
            remaining_minutes: "%{minutes} minutes remaining",
            remaining_priority: {
                one: "Remaining Priority Duration: %{count} hour %{minutes} mins",
                other: "Remaining Priority Duration: %{count} hours %{minutes} mins",
                zero: "Remaining Priority Duration: %{count} hours %{minutes} mins",
            },
            remaining_time: "%{minutes} minutes remaining",
            remaining_time_one: "< 1 minute remaining",
            scan_inprogress: "Device Scan in Progress",
            scan_start: "Start Device Scan",
            scan_stop: "Stop Scan",
            title: "Microinverters Detected",
        },
        device_alert_messages: {
            meters_not_enabled: "The production and consumption meters must be configured for Batteries to operate.",
            no_phase_assignment: "Batteries will not operate until they are assigned to phases.",
            not_configured: "The Batteries must be configured before they will operate.",
        },
        devices: {
            detected: "Detected",
            detected_total_count: "%{detected_count} of %{total_count}",
            device_info: {
                change_phase: "Change Phase",
                comm_level: "Comm Level: ",
                comm_level_2_4_ghz: "Comm Level (2.4 GHz): ",
                comm_level_sub_ghz: "Comm Level (Sub GHz): ",
                detected: "Detected: ",
                discovered: "Discovered via device scan / Pre Provisioned ",
                grid_profile: "Grid Profile: ",
                last_comm: "Last Communication: ",
                last_report: "Last Report: ",
                notapplicable: "n/a",
                param_table: "Parameter Table: ",
                part_number: "Part Number: ",
                pending_condition_clear: '"%{condition_flag}" clear condition command is in progress.',
                phase: "Phase: ",
                phase_unknown: "No phase selected",
                provisioned: "Assigned via provisioning",
                running_image: "Running Image: ",
                select_phase: "Select Phase",
                status: "Status: ",
                unknown: "Unknown",
                updated: "Updated ",
                view_in_array: "View in Array",
            },
            device_scan: "Device Scan",
            device_scan_short: "Scan",
            scan_state: { active: "Active", inactive: "Inactive", scan_disabled: "Disabled", scan_inhibited: "Inhibited", scan_suspended: "Suspended" },
        },
        encharge_batteries: {
            manage_options: {
                active: "Active (%{count})",
                active_count: { counting: { one: "Active (%{count})", other: "Active (%{count})", zero: "Active (%{count})" } },
                deleted: "Deleted (%{count})",
                deleted_count: { counting: { one: "Deleted (%{count})", other: "Deleted (%{count})", zero: "Deleted (%{count})" } },
            },
            nav: { all: "All", manage: "Manage", status: "Status" },
            no_inverters: "There are no encharge batteries.",
            no_inverters_search: 'No Encharge Batteries were found matching "%{search_term}".',
            phase_labels: { "ph-a": "L1(A)", "ph-b": "L2(B)", "ph-c": "L3(C)", "ph-unk": "No phase selected", "ph-updating": "Updating...", select_one: "Select One" },
            status_options: {
                cancel_sleep_label: "Stop",
                comm_nocount: "Comm",
                power_nocount: "Operating",
                preparing_to_sleep_text: "Entering Sleep Mode",
                profile_nocount: "Config",
                wake_sleep_label: "Turn Off",
                waking_label: "Exiting Sleep Mode",
            },
            title: "Encharge",
        },
        enpowers: {
            manage_options: {
                active: "Active (%{count})",
                active_count: { counting: { one: "Active (%{count})", other: "Active (%{count})", zero: "Active (%{count})" } },
                deleted: "Deleted (%{count})",
                deleted_count: { counting: { one: "Deleted (%{count})", other: "Deleted (%{count})", zero: "Deleted (%{count})" } },
            },
            max_temp: "Max Temp: ",
            nav: { all: "All", manage: "Manage", status: "Status" },
            no_inverters: "There is no Enpower device.",
            no_inverters_search: 'No Enpower device found matching "%{search_term}".',
            state_of_grid: { closed: "Closed", open: "Open", title: "State of Grid: " },
            status_options: { comm_nocount: "Comm", power_nocount: "Operating", profile_nocount: "Config" },
            title: "Enpower",
        },
        errors: {
            error_message: "Sorry, there's a problem getting data from the Envoy. If this continues, contact customer support.",
            interface_not_dhcp: "Sorry, you cannot get a new IP address. Switch the Envoy IP setting to DHCP first.",
            not_allowed: "Sorry, your requested change is not permitted and could not be saved.",
            not_authorized: "Sorry, you are not authorized to view that page.",
            save_failed: "Sorry, your changes could not be saved. ",
            start_scan_target_too_low:
                "<p>You've indicated that you expect %{expected_count} microinverters to report to this Envoy, and %{expected_count} have already been detected.</p><p>Before starting a device scan, <a href='#' class='open-target-count'>increase the number of microinverters expected</a> or delete one or more microinverters from the <a href='#' class='open-manage-devices'>manage devices screen</a>.</p>",
            start_scan_target_too_low_battery: {
                one: "<p>You've indicated that you expect %{count} battery to report to this Envoy, and that has already been detected.</p>",
                other: "<p>You've indicated that you expect %{count} batteries to report to this Envoy, and that many have already been detected.</p>",
                zero: "<p>You've indicated that you expect %{count} batteries to report to this Envoy, and that many have already been detected.</p>",
            },
            start_scan_target_too_low_battery_end:
                "<p>Before starting a device scan, <a href='#' class='open-target-count'>increase the number of batteries expected</a> or delete one or more batteries from the <a href='#' class='open-manage-devices-battery'>manage devices screen</a>.</p>",
            start_scan_target_too_low_both:
                "<p>The expected number of devices have already been detected.</p><p>Before starting a device scan, <a href='#' class='open-target-count'>increase the number of devices expected</a> or delete one or more microinverters or batteries.</p>",
            start_scan_target_too_low_micro: {
                one: "<p>You've indicated that you expect %{count} microinverter to report to this Envoy, and that has already been detected.</p>",
                other: "<p>You've indicated that you expect %{count} microinverters to report to this Envoy, and that many have already been detected.</p>",
                zero: "<p>You've indicated that you expect %{count} microinverters to report to this Envoy, and that many have already been detected.</p>",
            },
            start_scan_target_too_low_micro_end:
                "<p>Before starting a device scan, <a href='#' class='open-target-count'>increase the number of microinverters expected</a> or delete one or more microinverters from the <a href='#' class='open-manage-devices'>manage devices screen</a>.</p>",
            start_scan_target_too_low_nsr: {
                one: "<p>You've indicated that you expect %{count} Q-Relay to report to this Envoy, and that has already been detected.</p>",
                other: "<p>You've indicated that you expect %{count} Q-Relays to report to this Envoy, and that many have already been detected.</p>",
                zero: "<p>You've indicated that you expect %{count} Q-Relays to report to this Envoy, and that many have already been detected.</p>",
            },
            start_scan_target_too_low_nsr_end:
                "<p>Before starting a device scan, <a href='#' class='open-target-count'>increase the number of Q-Relays expected</a> or delete one or more Q-Relays from the <a href='#' class='open-manage-devices-nsr'>manage devices screen</a>.</p>",
            start_scan_title: "Device Scan Unavailable",
            timeout_message:
                "Sorry, it's taking too long to get data from the Envoy. Make sure the Envoy is powered on, and that the Envoy and this device are both connected to the same local network. If the problem continues, contact customer support.",
            title: "Error",
            tunnel_close_failed: "Attempt to close the connection to Enphase support failed. If this continues, contact customer support.",
            tunnel_failed_title: "Connection Failed",
            tunnel_open_failed: "The Envoy must be connected to the Internet to open a connection to Enphase. If the Envoy has an Internet connection and this problem continues, contact customer support.",
        },
        ethernet: {
            buttons: { dhcp: "Use DHCP", new_ip: "Get New IP Address", static: "Use Static IP" },
            confirm_change: { description: "This may interrupt communications with the Envoy and require you to re-connect.", title: "Change Ethernet Configuration?" },
            confirm_static: {
                description: "This will assign the current DHCP IP address and other configurations as static values. If you choose to proceed, you can update these values on the next screen.",
                title: "Change Ethernet Configuration?",
            },
            gateway_ip: "Gateway IP",
            ip_address: "IP Address",
            ip_setting: "IP Setting",
            netmask: "Netmask",
            new_ip_modal: { description: "This may interrupt communications with the Envoy and require you to re-connect.", title: "Get New IP Address?" },
            no_config: "No ethernet connection detected.",
            page_title: "Ethernet Configuration",
            primary_dns: "Primary DNS Server",
            secondary_dns: "Secondary DNS Server",
            type: { dhcp: "DHCP", static: "Static IP" },
        },
        forms: { search: "Search", search_prompt: "Serial Number", select_prompt: "Select One" },
        global_nav: {
            acb: "AC Battery",
            comms: "Comms",
            detected: "Detected",
            encharge: "Encharge",
            encharge_batteries: "Encharge",
            enpower: "Enpower",
            meters: "Meters",
            meters_small: "Meters",
            microinverters: "Microinverters",
            microinverters_short: "Micros",
            more: "More",
            network: "Network",
            nsr: "Q Relays",
            overview: "Overview",
            power: "Power",
            profiles: "Profiles",
        },
        initial_setup: {
            continue: "Continue",
            device_prompt: "Enter the number of devices that you expect to report to this Envoy.",
            eu_profile_prompt: "Select a location-specific grid profile.",
            migration_in_progress_message: "profiles being updated",
            na_profile_prompt: "The system is using the factory-installed grid profile settings. You can select a location-specific grid profile below.",
            system_size: "System Size",
        },
        jquery_validate: {
            messages: {
                addedTierPercent: "Please enter a number\u00a0greater than the percent\u00a0of baseline\u00a0entered for {0}.",
                an_number: "Please enter a valid number.",
                creditcard: "Please enter a valid credit card number.",
                date: "Please enter a valid date.",
                dateISO: "Please enter a valid date (ISO).",
                digits: "Please enter only digits.",
                domain: "Please enter a valid IP v4 address (xxx.xxx.xxx.xxx) or URL (google.com)",
                email: "Please enter a valid email address.",
                equalTo: "Please enter the same value again.",
                ipv4: "Please enter a valid IP v4 address. (xxx.xxx.xxx.xxx)",
                max: "Please enter a value less than or equal to {0}.",
                maxlength: "Please enter no more than {0} characters.",
                min: "Please enter a value greater than or equal to {0}.",
                minlength: "Please enter at least {0} characters.",
                number: "Please enter a valid number.",
                range: "Please enter a value between {0} and {1}.",
                rangelength: "Please enter a value between {0} and {1} characters long.",
                remote: "Please fix this field.",
                required: "This field is required.",
                url: "Please enter a valid URL.",
                wep_key: "Please enter a valid WEP Key (10, 26, or 58 characters, which may include 0-9 or A-F).",
            },
        },
        loading: "Please wait, loading",
        meters: {
            active_energy: "Active Energy",
            active_energy_lt: "Active Energy",
            active_power: "Active Power",
            apparent_energy: "Apparent Energy",
            apparent_power: "Apparent Power",
            consumption: "Consumption Meter",
            consumption_meter: {
                enable_meter: "Enable Consumption Meter",
                measurement_type: "Metered Circuit",
                meter_type_desc: "Does the circuit passing through the consumption CTs include load with solar production or load only?",
                meter_type_desc_singular: "Does the circuit passing through the consumption CT include load with solar production or load only?",
                meter_type_warning: "Be sure that the selections above are correct.",
            },
            current: "Current",
            current_ct: {
                current_ct_settings: "CT Current Settings",
                custom_cts_installed: "Custom %{meter_type} CTs Installed",
                primary: "Primary",
                remove_desc: "Tap OK to confirm that you are using standard Enphase %{meter_type} CTs.",
                remove_settings: "Remove Custom CT Settings?",
                secondary: "Secondary",
                turns: "Turns",
            },
            descriptors: { lifetime: "Lifetime", lifetime_lag: "Lagging (Lifetime)", lifetime_lead: "Leading (Lifetime)", today: "Today", today_lag: "Lagging (Today)", today_lead: "Leading (Today)" },
            enable_consumption_meter: "Enable Consumption Meter",
            enable_consumption_modal: {
                description: "Once you enable this meter, it cannot be disabled and the type cannot be changed.",
                description_mode_three: "Once you enable this meter, you cannot disable it, change the type, or decrease the number of phases.",
                description_mode_three_post_enable: "Once you do this, you will not be able to decrease the number of phases.",
                note_three: "<strong>Note: the number of phases will also be increased on the production meter.</strong>",
                note_three_post_enable: "<strong>Note: the number of phases will also be increased on the production meter.</strong>",
                title: 'Enable Meter with "%{type}" Metering?',
                title_mode_three: "Enable Meter with Metered Circuit: %{type} and Phases Metered: %{phCount}?",
                title_mode_three_post_enable: "Update Phases Metered to %{phCount}?",
            },
            enable_meter: "Enable Consumption Meter",
            enable_modal: { description: "Once you enable this meter, it cannot be disabled and the type cannot be changed.", title: "Enable Meter with %{type} Metering?" },
            enable_production_meter: "Enable Production Meter",
            enable_production_modal: {
                description: "Once you enable this meter, it cannot be disabled.",
                description_mode_three: "Once you enable this meter, you cannot disable it or decrease the number of phases.",
                description_mode_three_post_enable: "Once you do this, you will not be able to decrease the number of phases.",
                note_three: "<strong>Note: the number of phases will also be increased on the consumption meter.</strong>",
                note_three_post_enable: "<strong>Note: the number of phases will also be increased on the consumption meter.</strong>",
                title: "Enable Meter?",
                title_mode_three: "Enable Meter with Phases Metered: %{phCount}?",
                title_mode_three_post_enable: "Update Phases Metered to %{phCount}?",
            },
            enable_production_prompt: "The production meter must be enabled before these readings can be displayed.",
            freq_analysis: { btn_change_data_type: "Toggle Data", plc_activity: "Activity", plc_power_spectrum: "Power Spectrum", power_line_analy: "Power Line Communication Analysis" },
            id: "EID",
            internal_meters: "Internal Meters",
            latest_reading: "Latest Reading",
            lifetime_energy: "Lifetime",
            load_contains_storage_message: "Load readings include storage activity.",
            measurement_type: "Type",
            meter_change_warning: "You cannot change them once the meter is enabled.",
            meter_mode: { single: "Single-Phase (L-N)", split: "Single-Phase (L-L)", three: "Multi-Phase" },
            meter_readings: "Readings",
            meter_state: { disabled: "Disabled", enabled: "Enabled" },
            meter_status: {
                "check-wiring": "Check Wiring",
                meter_setup: "Set up metering now",
                meters_not_enabled: "Meters Not Enabled",
                normal: "Normal",
                "not-metering": "Meter Not Enabled",
                status_flags: {
                    "negative-production": "Production readings are negative. Check CT orientation and leads, compared with voltage connections.",
                    "negative-total-consumption": "Consumption readings are negative. Check CT orientation and leads, compared with voltage connections.",
                    "power-on-unused-phase": "Power detected on an unused phase. Check CT lead connections, compared with voltage connections.",
                    "production-imbalance": "Production not balanced between phases. Check CT lead connections and voltage connections.",
                },
            },
            meter_type: { "net-consumption": "Net", "total-consumption": "Total" },
            meter_type_desc: "If the consumption CTs are on a circuit that solar production flows through, leave type set to <b>Net</b>. If not, change type to <b>Total</b>.",
            meter_type_verbose: { "net-consumption": "Load with solar production", "total-consumption": "Load only" },
            meter_type_warning: "Be sure to set the meter type correctly. You cannot change them once the meter is enabled.",
            mode: "Mode",
            multi_phase_options: { mphase_0: "Not Selected", mphase_1: "L1(A)", mphase_2: "L1(A) + L2(B)", mphase_3: "L1(A) + L2(B) + L3(C)" },
            multi_phase_warning: {
                consumption: {
                    post_continue: "The meter is not yet enabled. Verify the readings, then tap <strong>Enable Consumption Meter</strong> at the bottom of the screen.",
                    pre_continue: "The meter is not yet enabled. Select the Phases Metered and Metered Circuit, then tap <strong>View Readings</strong>.",
                    pre_continue_one: "The meter is not yet enabled. Select the Metered Circuit, then tap <strong>View Readings</strong>.",
                },
                production: {
                    post_continue: "The meter is not yet enabled. Verify the readings, then tap <strong>Enable Production Meter</strong> at the bottom of the screen.",
                    pre_continue: "The meter is not yet enabled. Select the Phases Metered, then tap <strong>View Readings</strong>.",
                },
            },
            net_consumption_desc: "These readings reflect the difference between the total home load and solar production. They should approximately match the home's utility meter readings.",
            net_consumption_title: "Net Consumption",
            no_consumption: "No consumption meter configured for this Envoy.",
            no_meters: "No meters detected.",
            no_production: "No production meter configured for this Envoy.",
            phase_count: "Phases Metered",
            phase_count_desc: "Select which of the meter phases you have wired.",
            phase_labels: { phase_1: "L1(A)", phase_2: "L2(B)", phase_3: "L3(C)" },
            pmu: {
                add_another: "Add Another",
                add_meter: "Add Power Meter",
                config: {
                    add: "Add Selected Meters",
                    meters_description: "Power meters detected on this network:",
                    network_warning: "Before adding a meter, be sure that the Envoy has an Ethernet connection with a static IP address. This should be configured both on the router and on the Envoy.",
                    no_meters_description:
                        "No power meters detected<div class='alert alert-info'><b>Note:</b> It may take up to an hour for power meters to be detected. To facilitate detection, make sure that the power meter is on the same local subnet as the Envoy.</div>",
                    remove: "Remove Power Meter",
                    title: "Power Meter Configuration",
                },
                labels: { fw_version: "Firmware Version", ip: "IP Address", mac_address: "Mac Address", manufacturer: "Manufacturer", part_number: "Part Number", production: "Production", serial_number: "Serial Number", status: "Status" },
                phase_coupler: "A phase coupler is required for microinverters installed on L2 or L3 to communicate with the Envoy.",
            },
            power_exporting: "(Exporting to Grid)",
            power_factor: "Power Factor",
            power_importing: "(Importing from Grid)",
            production: "Production Meter",
            reactive_energy: "Reactive Energy",
            reactive_power: "Reactive Power",
            single_phase_warning: {
                consumption: {
                    post_continue: "The meter is not yet enabled. Verify the readings, then tap <strong>Enable Consumption Meter</strong> at the bottom of the screen.",
                    pre_continue: "The meter is not yet enabled. Select the Metered Circuit, then tap <strong>View Readings</strong>.",
                },
                production: {
                    post_continue: "The meter is not yet enabled. Verify the readings, then tap <strong>Enable Production Meter</strong> at the bottom of the screen.",
                    pre_continue: "The meter is not yet enabled. Tap <strong>View Readings</strong> to view and verify the readings.",
                },
            },
            status: "Status",
            title: "Meters",
            today_energy: "Today",
            total_consumption_desc: "These readings reflect the total home load.",
            total_consumption_na: "The production meter must be enabled before these readings can be displayed.",
            total_consumption_title: "Total Consumption",
            type: { eim: "Envoy Integrated Meter", pmu: "Power Meter", rgm: "Enphase RGM" },
            unavailable: "n/a",
            update_settings: "Update",
            view_readings: "View Readings",
            wizard: {
                batt_off: { counting: { one: "Make sure the Enphase Battery circuit is switched OFF.", other: "Make sure the Enphase Battery circuits are switched OFF." } },
                battery_reminder: "<b>Remember to switch the Enphase battery circuit on.</b>",
                btn_next: "Next",
                btn_try_again: "Try Again",
                bullet_load_increase: "Did the total home load increase as you expected?",
                bullet_meters_match: "Does the home's utility meter approximately match this reading?",
                bullet_phase_select: "Is solar production flowing to the grid measured by the consumption CT?",
                bullet_pv_on: "Switch ON the PV breakers and wait for the reconnection period to complete. PV should start to produce power in 5 minutes or less, then tap <strong>Next</strong>.",
                bullet_turn_on_load: "Turn on a known load, such as a heat gun, then tap <b>Next</b>.",
                check_meters: "Check<br>Meters",
                check_title: " Check %{meter_type} Meter",
                confirm_ct_routing: "Make sure that all of the home loads are routed through the consumption CTs.",
                consumption_appears_good: "The consumption meter appears to have been configured correctly.",
                consumption_ct_direction: "Check that the arrow on the consumption CTs are pointing in the direction of energy flow toward the load center.",
                consumption_cts_installed: "Did you install consumption CTs?",
                consumption_enable_prompt: "Tap <strong>Enable Consumption Meter</strong> to complete meter setup.",
                consumption_looks_good: "Consumption readings look good!",
                consumption_neg: "Consumption readings are negative. Check the following, then tap <b>Try Again</b>.",
                consumption_not_enabled: "Consumption Meter Not Enabled",
                consumption_phase_sel_net: "Consumption CT includes solar production.",
                consumption_phase_sel_total: "Consumption CT does not include solar production.",
                ct_bw_correct: "Make sure that the blue and white wires are connected to the correct positions in the terminal block.",
                desc: "Use our step-by-step wizard to ensure that the internal meters are wired and configured correctly.",
                desc_consumption: "Use our step-by-step wizard to ensure that the consumption meter is wired and configured correctly.",
                desc_production: "Use our step-by-step wizard to ensure that the production meter is wired and configured correctly.",
                done: "Done",
                enable_button: "Enable %{meterType} Meter",
                enough_sun: "Make sure there is enough sunlight reaching the PV modules to power up the microinverters.",
                exit_check: "Are you sure you want to exit the Meter Check?",
                exit_conf: { desc: "Are you sure you want to leave the production meter setup wizard? You'll need to start over if you want to use the wizard again.", neg_button: "Go Back", title: "Exit Wizard?" },
                exit_wizard: "Exit Wizard",
                get_started: "Get Started",
                load_didnt_increase: "Total home load did not increase as expected. Check the following, then tap <b>Try Again</b>.",
                manual_prompt: "Manual Meter Setup",
                most_common: "(Most common setup)",
                negative: "NO",
                phase_select_prompt: "Select the phases metered based on how the Envoy-S is wired: ",
                positive: "YES",
                power_exporting: "Exporting",
                power_importing: "Importing",
                prod_enable_desc1: "Production readings are close to zero, as expected.",
                prod_enable_desc2: "Tap <strong>Enable Production Meter</strong> to complete meter setup.",
                prod_meter_enabled: "The production meter is enabled.",
                prod_su1_pv_on: {
                    counting: {
                        one: "Make sure the PV circuit is switched ON and are producing power (the reconnection period has completed).",
                        other: "Make sure the PV circuits are switched ON and are producing power (the reconnection period has completed).",
                    },
                },
                prod_su2_pv_off: "Switch OFF the PV breakers, then tap <b>Next</b>.",
                prod_ts_p4: {
                    desc: "Production readings are negative. Check the following, then tap Try Again.",
                    ts1: {
                        counting: {
                            one: "Make sure the PV circuit is switched ON and are producing power (the reconnection period has completed).",
                            other: "Make sure the PV circuits are switched ON and are producing power (the reconnection period has completed).",
                        },
                    },
                    ts2: { counting: { one: "Make sure the Enphase Battery circuit is switched OFF.", other: "Make sure the Enphase Battery circuits are switched OFF." } },
                    ts3: {
                        counting: {
                            one: "Check that the arrow on the production CT is pointing in the direction of energy flow toward the load center.",
                            other: "Check that the arrow on the production CTs are pointing in the direction of energy flow toward the load center.",
                        },
                    },
                    ts5: {
                        counting: {
                            one: "Make sure that the wires running through the production CT only include PV generation (and not any loads).",
                            other: "Make sure that the wires running through the production CTs only include PV generation (and not any loads).",
                        },
                    },
                    ts6: "Ensure that the CTs are clamped on the correct phases with respect to the Envoy power terminal.",
                },
                prod_ts_p5: {
                    desc: "Production readings are higher than they should be. Check the following, then tap <b>Try Again</b>.",
                    ts2: {
                        counting: {
                            one: "Make sure that the wires running through the production CT only include PV generation (and not any loads).",
                            other: "Make sure that the wires running through the production CTs only include PV generation (and not any loads). ",
                        },
                    },
                },
                production_not_enabled: "Production Meter Not Enabled",
                pv_off: { counting: { one: "Make sure the PV circuit is switched OFF.", other: "Make sure the PV circuits are switched OFF." } },
                pv_reminder: "<b>Remember to switch the PV circuit on.</b> It will take approximately 5 minutes for the microinverters to report power production.",
                readings_dont_match1: "We're not sure why the readings don't match the home's utility meter. Tap <b>Try Again</b> to change the configuration setting for the location of the consumption CTs to see if that helps.",
                readings_dont_match2: "If that doesn't help, you can exit the wizard and use the <b>Manual Meter Setup</b> option instead. We suggest you contact Enphase Support for assistance before proceeding.",
                readings_dont_match_post: "Please contact Enphase Support for assistance and inform them that you have performed the meter check but the readings still don't match the utility meter.",
                reset_timer: "Reset Timer",
                setup_title: " Set Up %{meter_type} Meter",
                start_timer: "Start Timer",
                stop_timer: "Stop Timer",
                sw_off_batt: { counting: { one: "Switch OFF the Enphase Battery circuit.", other: "Switch OFF the Enphase Battery circuits." } },
                sw_off_pv: "Switch OFF the PV breakers.",
                total_cons_not_reduced: "Turning on the PV circuit didn't reduce total consumption. Check the following, then tap <b>Try Again</b>.",
                total_load: "Total home load",
                trouble_c6_desc1: "If you've followed all of the on-screen instructions and consumption readings are still negative, ",
                trouble_c8_desc1: "If you've followed all of the on-screen instructions and total consumption is still not reduced by turning on the PV circuit, ",
                trouble_desc2: "We suggest you contact Enphase Support at <a href='tel:%{dial_num}'> %{disp_num}</a> for assistance before proceeding.",
                trouble_install_guide: "Please refer to the <strong>Envoy Metered Installation Guide</strong>",
                trouble_manual_prompt: " or you can exit the wizard and use the <strong>Manual Meter Setup</strong> option instead.",
                trouble_p0_5: {
                    desc: {
                        counting: {
                            one: "You've indicated that only %{selected_phases} is metered, but there is power on %{phaseStr}.",
                            other: "You've indicated that only %{selected_phases} are metered, but there is power on %{phaseStr}.",
                        },
                    },
                    ts1: "Check the wiring. Are the phases wired correctly?",
                    ts_no_resp: "Fix the wiring, then tap <b>Try Again</b>.",
                    ts_yes_resp: "Change the phases metered selection to match the wiring, then tap <b>Try Again</b>.",
                },
                trouble_p0_desc1: "If you've followed all of the on-screen instructions and there is still power on an unused phase, ",
                trouble_p4_desc1: "If you've followed all of the on-screen instructions and production readings are still negative, ",
                trouble_p5_desc1: "If you've followed all of the on-screen instructions and production readings are still higher than expected, ",
                trouble_p7_desc1: "If you've followed all of the on-screen instructions and the home load still does not increase as expected, ",
                trouble_prompt: "Having trouble getting past this step?",
                unable_to_see_meter: "If you are not able to access <strong>POWER</strong> readings on the utility meter or measure with a portable meter, then click <strong>Continue</strong>.",
            },
        },
        microinverters: {
            condition_clear: { description: 'This will send a command to clear the "%{condition_flag}" status on this microinverter.', title: "Clear Condition?" },
            manage_options: {
                active: "Active (%{count})",
                active_count: { counting: { one: "Active (%{count})", other: "Active (%{count})", zero: "Active (%{count})" } },
                delete_btn: "Delete",
                deleted: "Deleted (%{count})",
                deleted_count: { counting: { one: "Deleted (%{count})", other: "Deleted (%{count})", zero: "Deleted (%{count})" } },
                restore_btn: "Restore",
            },
            nav: { all: "All", manage: "Manage", status: "Status" },
            no_inverters: "There are no microinverters.",
            no_inverters_search: 'No microinverters were found matching "%{search_term}".',
            phase_labels: { "ph-a": "L1(A)", "ph-b": "L2(B)", "ph-c": "L3(C)", "ph-unk": "No phase selected", "ph-updating": "Updating...", select_one: "Select One" },
            phase_prompt_label: "Select a phase for AC Battery %{serial_num}",
            scan_close: "Close",
            scan_disabled: "Device scanning is currently unavailable due to a conflicting scan running on another Envoy.",
            scan_inhibited: "To add more microinterters to this Envoy, you must use the Installer Toolkit to provision them or contact Enphase Customer support to re-enable device scanning.",
            scan_inprogress: "Device Scan in Progress",
            scan_settings: {
                advanced_options: "More Options",
                device_total: "Device Target",
                device_total_description: "If you enter a device target, Envoy will stop scanning when its detected microinverters total reaches that number.",
                device_total_error_1: "Device total must be between %{already_detected} (the number of devices already detected) and %{device_total_max}.",
                device_total_error_2: "Device total must be greater than %{already_detected} (the number of devices already detected).",
                hours: "hours",
                less_options: "Less Options",
                minutes: "mins",
                optional: "(optional)",
                priority_duration: "Priority Duration",
                priority_duration_description: "If you enter a priority duration, Envoy will make device scanning its only activity for that period.",
                priority_duration_error: "Priority duration cannot be longer than scan duration.",
                scan_duration: "Scan Duration",
                scan_duration_error: "Scan duration must be between 1 minute and 8 hours.",
                scan_options: { min_120: "2 hours", min_15: "15 minutes", min_240: "4 hours", min_30: "30 minutes", min_480: "8 hours", min_60: "1 hour" },
                time_description: "hh:mm",
            },
            scan_start: "Start Scan",
            scan_stop: "Stop Scan",
            scan_suspended: "Device scanning is currently unavailable due to a microinverter upgrade.",
            status_options: { comm: "Comm (%{count})", comm_nocount: "Comm", power: "Power (%{count})", power_nocount: "Power", profile: "Profile (%{count})", profile_nocount: "Profile" },
        },
        monitoring: {
            connected: "Connected to Enlighten",
            high_bandwidth: "Standard",
            last_report: "Last Report:",
            low_bandwidth: "Low-Bandwidth",
            more_info: "More Info",
            no_report: "Never Reported",
            not_connected: "Not Connected to Enlighten",
            report_setting: "Report Setting",
            report_setting_cellular_desc: "This Envoy has an Enphase cellular modem and reports 15-minute interval data to Enlighten four times per day (low-bandwidth).",
            report_setting_diagnostic: "Diagnostic Mode On: %{minutes} minutes remaining",
            report_setting_enable_diagnostic: "You may enable Diagnostic Mode for two hours. While in Diagnostic Mode, the Envoy will typically report 5-minute interval data to Enlighten every 5 minutes (during daylight hours).",
            report_setting_high_desc:
                "This Envoy is set to standard reporting, which typically reports 5-minute interval data to Enlighten every 5 minutes during daylight hours. You may switch to low-bandwidth, which reports 15-minute interval data to Enlighten four times per day.",
            report_setting_low_desc:
                "This Envoy is set to low-bandwidth reporting, which reports 15-minute interval data to Enlighten four times per day. You may switch to standard reporting, which typically reports 5-minute interval data to Enlighten every 5 minutes during daylight hours.",
            report_setting_modal: {
                diagnostic_desc: "Confirm enabling Diagnostic Mode for two hours.",
                high_desc: "Confirm switch to standard reporting.",
                low_desc: "Confirm switch to low-bandwidth reporting.",
                title: "Report Setting Change",
            },
            report_setting_options: { diagnostic: "Enable Diagnostic Mode", high: "Switch to Standard Reporting", low: "Switch to Low-Bandwidth" },
            title: "Monitoring",
        },
        more: {
            about: {
                cellular_ip: "Cellular IP Address",
                cellular_mac_address: "Cellular Mac Address",
                db_size: "Database Size",
                db_size_stats: "%{db_size} (%{percent}% full)",
                ethernet_ip: "Ethernet IP Address",
                ethernet_mac_address: "Ethernet Mac Address",
                is_nonvoy: "This Envoy is programmed for configuring unmonitored systems.",
                part_number: "Part Number",
                serial_number: "Serial Number",
                sw_build_date: "Software Build Date",
                sw_version: "Software Version",
                timezone: "Current Timezone",
                title: "About This Envoy",
                wifi_ip: "Wi-Fi IP Address",
                wifi_mac_address: "Wi-Fi Mac Address",
            },
            datetime: { date: "Date", time: "Time", timezone: "Time Zone", title: "Date & Time", update_timezone: "Update Time Zone" },
            events: { event_date_line: "%{date} (Event ID %{event_id})", no_events: "There are no events.", title: "Events" },
            support_connection: {
                close: "Close Connection",
                description_close: "The secure connection to Enphase support is open.",
                description_open: "Create a secure connection so Enphase support personnel can troubleshoot this system remotely.",
                open: "Open Connection",
                title: "Connection to Enphase Support",
            },
            system: { title: "System" },
        },
        network: {
            diagnostic_tools: {
                check_connectivity: "Check Network Connectivity",
                check_network_route: "Check Network Route",
                gateway_ip: "Gateway IP",
                ip_address: "IP Address",
                mac_address: "Mac Address",
                netmask: "Netmask",
                network_connectivity: "Network Connectivity Check",
                network_connectivity_desc: "Run a collection of basic network diagnostic checks on the Envoy.",
                network_route: "Network Route Check",
                network_route_desc: "See the Envoy's path to the Internet for all available network interfaces.",
                ping: "Ping",
                ping_desc: "Enter an IP address or URL to test the Envoy's connectivity to your router or other network host.",
                ping_ip: "Ping Address",
                primary_dns: "Primary DNS Server",
                results_title: "Results",
                secondary_dns: "Secondary DNS Server",
                timestamp: "Last Checked",
                title: "Diagnostic Tools",
            },
            network_configuration: { active_network: "Active", title: "Network Configuration", types: { cellular: "Cellular", ethernet: "Ethernet", none: "None", wifi: "Wi-Fi" } },
            network_connectivity_check: {
                connectivity_enlighten: "Connectivity to Enlighten",
                connectivity_enphase: "Connectivity to Enphase",
                enlighten_dns_lookup: "Enlighten DNS Lookup",
                enphase_dns_lookup: "Enphase DNS Lookup",
                gateway_ping: "Gateway Ping",
                google_dns_lookup: "Google DNS Lookup",
                google_ping: "Google Ping",
                primary_dns_ping: "Primary DNS Ping",
                primary_interface: "Network Tested",
                result: { fail: "Failed", pass: "Good" },
                secondary_dns_ping: "Secondary DNS Ping",
                timestamp: "Last Checked",
                title: "Results",
            },
            network_route_check: { destination: "Destination", flags: "Flags", gateway: "Gateway", genmask: "Genmask", metric: "Metric", network: "Network", ref: "Ref", results_title: "Results", timestamp: "Last Checked", use: "Use" },
            title: "Network",
        },
        not_available: "Not Available",
        nsr: {
            line_status_heading: "Lines Connected:",
            line_status_help_text:
                "<ul><li>At least one of the Q-Relay lines is not connected.</li><li>Check that the Q-Relay is installed wired correctly.</li><li>Push the test button to retry.</li><li>If this is intentional then this can be ignored.</li></ul>",
            line_status_help_title: "Q-Relay Line Connection Help",
            lines: "Line %{num}:",
            reason_strings: "unknown reason;Hardware error;Button press;Force command from Envoy;AC line 1 voltage error;AC line 2 voltage error;AC line 3 voltage error;AC line 1 frequency error;Grid DC error;AC line 1 voltage low;AC line 1 voltage high;AC line 1 frequency low;AC line 1 frequency high;AC line 2 voltage low;AC line 2 voltage high;AC line 3 voltage low;AC line 3 voltage high;Grid DC low;Grid DC high;Rocof;AC Average line 1;AC average line 2;AC average line 3".split(
                ";"
            ),
            relay_heading: "Relay:",
        },
        nsrs: {
            manage_options: {
                active: "Active (%{count})",
                active_count: { counting: { one: "Active (%{count})", other: "Active (%{count})", zero: "Active (%{count})" } },
                deleted: "Deleted (%{count})",
                deleted_count: { counting: { one: "Deleted (%{count})", other: "Deleted (%{count})", zero: "Deleted (%{count})" } },
            },
            nav: { all: "All", manage: "Manage", status: "Status" },
            no_inverters: "There are no Q Relays",
            no_inverters_search: 'No Q Relays were found matching "%{search_term}".',
            status_options: { comm_nocount: "Comm", power_nocount: "Operating", profile_nocount: "Config" },
            title: "Relays Q",
        },
        overview: {
            ac_batteries: {
                communicating: "Communicating",
                default_profile_set: "Factory-Installed Grid Profile",
                detected: "Detected",
                factory_installed: "Factory-Installed",
                factory_installed_config: "Factory-Installed Configurations",
                not_set: "Not Set",
                producing_power: "Operating",
                profile_set: "Configured",
                total: "AC Batteries",
            },
            ac_batteries_counts: {
                communicating: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Communicating</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                    },
                },
                detected: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Detected</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                    },
                },
                producing_power: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Operating</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Operating</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Operating</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Operating</span>",
                    },
                },
                profile_set: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Configured</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Configured</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Configured</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Configured</span>",
                    },
                },
                total: {
                    counting: {
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>AC Battery</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>AC Batteries</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>AC Batteries</span>",
                    },
                },
            },
            ac_battery_state: {
                charging: "Charging",
                discharging: "Discharging",
                full: "Full",
                idle: "Idle",
                soc_full: "%{operating_state} (State of Charge %{percent}%)",
                soc_percent: "(State of Charge %{percent}%)",
                soc_state: "%{operating_state}",
            },
            alerts: "Alerts",
            consumption: "Consumption Meter",
            consumption_meter_label: "Consumption",
            current_consumption: "Current Power Consumption",
            current_production: "Current Power Production",
            devices: { detected: "Detected" },
            encharge_batteries: {
                communicating: "Communicating",
                default_profile_set: "Factory-Installed Grid Profile",
                detected: "Detected",
                factory_installed: "Factory-Installed",
                factory_installed_config: "Factory-Installed Configurations",
                not_set: "Not Set",
                producing_power: "Operating",
                profile_set: "Configured",
                total: "AC Batteries",
            },
            enpowers: { communicating: "Communicating", default_profile_set: "Factory-Installed Grid Profile", detected: "Detected", profile_set: "Profile Set", total: "Enpower Devices" },
            enpowers_summary: { connected: { false: "Not Connected to Enpower", true: "Connected to Enpower" }, grid_status: { false: "OFF", title: "Grid Status", true: "ON" }, title: "Enpower" },
            includes_storage_label: "(includes storage activity)",
            inverter_production: "Microinverter Production",
            inverters_update_status: { "in-progress": "Microinverter upgrade in progress. This typically takes 15 to 30 minutes to complete." },
            ip_address: "IP Address",
            latest_power: "Latest Power",
            lifetime: "Lifetime",
            lifetime_energy: "Lifetime Energy",
            meter_production: "Production Meter",
            metering: "Metering",
            microinverter_counts: {
                communicating: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Communicating</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                    },
                },
                detected: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Detected</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                    },
                },
                producing_power: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Producing Power</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Producing Power</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Producing Power</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Producing Power</span>",
                    },
                },
                profile_set: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Profile Set</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Profile Set</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Profile Set</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Profile Set</span>",
                    },
                },
                total: {
                    counting: {
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Microinverter</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Microinverters</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Microinverters</span>",
                    },
                },
            },
            microinverters: { communicating: "Communicating", default_profile_set: "Factory-Installed Grid Profile", detected: "Detected", producing_power: "Producing Power", profile_set: "Profile Set", total: "Microinverters" },
            net_power: "Net Power",
            new_microinverter_counts: {
                communicating: {
                    counting_acb: { one: "Communicating", other: "Communicating", zero: "Communicating" },
                    counting_encharge: { one: "Communicating", other: "Communicating", zero: "Communicating" },
                    counting_microinverters: { one: "Communicating", other: "Communicating", zero: "Communicating" },
                    counting_nsr: { one: "Communicating", other: "Communicating", zero: "Communicating" },
                },
                detected: {
                    counting_acb: { one: "Detected", other: "Detected", zero: "Detected" },
                    counting_encharge: { one: "Detected", other: "Detected", zero: "Detected" },
                    counting_microinverters: { one: "Detected", other: "Detected", zero: "Detected" },
                    counting_nsr: { one: "Detected", other: "Detected", zero: "Detected" },
                },
                producing_power: {
                    counting_acb: { one: "Operating", other: "Operating", zero: "Operating" },
                    counting_encharge: { one: "Operating", other: "Operating", zero: "Operating" },
                    counting_microinverters: { one: "Producing Power", other: "Producing Power", zero: "Producing Power" },
                    counting_nsr: { one: "Operating", other: "Operating", zero: "Operating" },
                },
                profile_set: {
                    counting_acb: { one: "Configured", other: "Configured", zero: "Configured" },
                    counting_encharge: { one: "Configured", other: "Configured", zero: "Configured" },
                    counting_microinverters: { one: "Profile Set", other: "Profile Set", zero: "Profile Set" },
                    counting_nsr: { one: "Configured", other: "Configured", zero: "Configured" },
                },
                total: {
                    counting_acb: { one: "AC Battery", other: "AC Batteries", zero: "AC Batteries" },
                    counting_encharge: { one: "Encharge Battery", other: "Encharge Batteries", zero: "Encharge Batteries" },
                    counting_microinverters: { one: "Microinverter", other: "Microinverters", zero: "Microinverters" },
                    counting_nsr: { one: "Q Relay", other: "Q Relays", zero: "Q Relays" },
                },
            },
            nsr: {
                detected_total_count: "%{detected_count} of %{total_count}",
                profile_label: "Profile",
                profile_not_set: "Not Configured",
                profile_set: "Configured",
                relay_state_closed: "Closed",
                relay_state_label: "State",
                relay_state_open: "Open",
                section_title: "Q Relay",
            },
            power_exporting: "Exporting to Grid",
            power_importing: "Importing from Grid",
            production: "Production",
            production_meter_label: "Production",
            profile: "Profile",
            scan_modal: {
                description: "No microinverters have been detected. Do you want to start a device scan?",
                description_battery: "No batteries have been detected. Do you want to start a device scan?",
                description_both: "No microinverters or batteries have been detected. Do you want to start a device scan?",
                description_nsr: "No Q-Relays have been detected. Do you want to start a device scan?",
                scan_timeout_description:
                    "<p>Only %{detected_count} of %{target_count} microinverters have been detected. Do you want to restart the device scan to discover the remaining microinverter(s) or <a href='#' class='open-target-count'>change the number of microinverters expected</a>?</p>",
                scan_timeout_description_battery: "<p>Only %{detected_count} of %{target_count} batteries have been detected.",
                scan_timeout_description_battery_second: {
                    one: "Do you want to restart the device scan to discover the remaining battery or <a href='#' class='open-target-count'>change the number of batteries expected</a>?</p>",
                    other: "Do you want to restart the device scan to discover the remaining batteries or <a href='#' class='open-target-count'>change the number of batteries expected</a>?</p>",
                },
                scan_timeout_description_both:
                    "<p>Only %{detected_count_micro} of %{target_count_micro} microinverters and %{detected_count_battery} of %{target_count_battery} batteries have been detected. Do you want to restart the device scan to discover the remaining devices or <a href='#' class='open-target-count'>change the number of devices expected</a>?</p>",
                scan_timeout_description_micro: "<p>Only %{detected_count} of %{target_count} microinverters have been detected.",
                scan_timeout_description_micro_second: {
                    one: "Do you want to restart the device scan to discover the remaining microinverter or <a href='#' class='open-target-count'>change the number of microinverters expected</a>?</p>",
                    other: "Do you want to restart the device scan to discover the remaining microinverters or <a href='#' class='open-target-count'>change the number of microinverters expected</a>?</p>",
                },
                scan_timeout_title: "Restart Device Scan?",
                title: "Start Device Scan?",
            },
            scan_state: { active: "Scan Active", inactive: "Scan Inactive", scan_inhibited: "Scan Inhibited" },
            set_expected: { error: "Value must be a number between 1 and 600.", label: "Enter the number of microinverters that you expect to report to this Envoy.", prompt: "# Microinverters" },
            set_expected_acb: { error: "Value must be a number between 0 and 39.", label: "Enter the number of AC Batteries that you expect to report to this Envoy.", prompt: "# AC Batteries" },
            set_expected_nsr: { error: "Value must be a number between 0 and 3.", label: "Enter the number of Q Relays that you expect to report to this Envoy.", prompt: "# Q Relays" },
            software_version: "Software Version",
            stat_title: "Power & Energy",
            storage: "Storage",
            tariff_rate_structure: "Tariff/Rate Structure",
        },
        pending: "(pending...)",
        power: {
            charging: "Charging",
            description: "Microinverters will produce power as long as there is sufficient sunlight and the utility grid is within allowable voltage and frequency ranges (as specified by local regulation).",
            discharging: "Discharging",
            idle: "Idle",
            last_report: "Last Report:",
            not_operating: "Not Operating",
            not_producing: "Not Producing",
            operating: "Operating",
            producing: "Producing Power",
            title: "Microinverters Producing Power",
        },
        profiles: {
            ac_batteries: {
                configuration_label: "Configuration",
                false: "No",
                no_profile_description: "You must provide the following information to configure the batteries before they will begin to operate.",
                no_profile_warning: "The grid profile you select here will also be applied to the Enpower, Microinverters, and Encharges installed with this system.",
                profile_complete: "Configuration Complete",
                profile_incomplete: "Configuration Incomplete",
                profile_propagating: "Configuring Batteries",
                true: "Yes",
            },
            apply: "Apply Grid Profile",
            config_batteries: "Configure Batteries",
            country_label: "Country Regulatory Specification",
            encharge_batteries: {
                configuration_label: "Configuration",
                no_profile_description: "You must provide the following information to configure the batteries before they will begin to operate.",
                no_profile_warning: "The grid profile you select here will also be applied to the Enpower, Microinverters, and AC Batteries installed with this system.",
                profile_complete: "Configuration Complete",
                profile_incomplete: "Configuration Incomplete",
                profile_propagating: "Configuring Batteries",
            },
            enpowers: {
                no_profile_description: "You must provide the following information to configure the enpower before it will begin to operate.",
                no_profile_warning: "The grid profile you select here will also be applied to the Microinverters, AC Batteries and Encharges installed with this system.",
                profile_complete: "Configuration Complete",
                profile_incomplete: "Configuration Incomplete",
                profile_propagating: "Configuring Enpower",
            },
            eu_no_profile_description: "You must select a location-specific grid profile before the microinverters will begin producing power.",
            eu_no_profile_label: "No Profile",
            eu_no_profile_vogel_description: "You must select a location-specific grid profile.",
            microinverters: {
                configuration_label: "Configuration",
                no_profile_warning: "The grid profile you select here will also be applied to the Enpower, AC Batteries and Encharges installed with this system.",
                profile_complete: "Propagation Complete",
                profile_incomplete: "Propagation Incomplete",
                profile_propagating: "Propagating Profile",
            },
            na_no_profile_description: "The microinverters are using the factory-installed grid profile settings. You can select a location-specific grid profile below.",
            na_no_profile_label: "Factory Installed Settings",
            no_profile_warning: "The grid profile you select here will also be applied to the Enpower, Microinverters, AC Batteries and Encharges installed with this system.",
            no_profiles: "There are no profiles available. You must either connect this Envoy to the Internet and select via Enlighten, or use Installer Toolkit to download a profile package and upload to this Envoy.",
            no_profiles_info:
                "If this system requires a location-specific grid profile, you must either connect this Envoy to the Internet and select via Enlighten, or use Installer Toolkit to download a profile package and upload to this Envoy.",
            nsrs: {
                configuration_label: "Configuration",
                no_profile_warning: "The grid profile you select here will also be applied to the Enpower, Microinverters, AC Batteries and Encharges installed with this system.",
                profile_complete: "Propagation Complete",
                profile_incomplete: "Propagation Incomplete",
                profile_propagating: "Propagating Profile",
            },
            profile_complete: "Propagation Complete",
            profile_incomplete: "Propagation Incomplete",
            profile_label: "Grid Profile",
            profile_propagating: "Propagating Profile",
            title: "Grid Profile",
            tpm_state: { 0: "Pending", 1: "Propagating", 2: "Profile Set", 3: "Unsettable", 4: "Failed", 5: "Upgrading", 6: "ALT-V/F" },
        },
        public_nav: {
            change_password: "Change Password",
            copyright_html: "&copy;2008-%{current_year} Enphase Energy Inc. All rights reserved.",
            enphase: "Enphase Energy",
            installer_login: "Installer Login",
            language: "Language",
            privacy: "Privacy",
            settings: "Settings",
            terms: "Terms",
        },
        select2: {
            format_matches: { counting: { one: "One result is available, press enter to select it.", other: "%{count} results are available, use up and down arrow keys to navigate." } },
            input_too_long: { counting: { one: "Please delete %{count} character", other: "Please delete %{count} characters" } },
            input_too_short: "Please enter %{count} or more characters",
            loading_more: "Loading more results...",
            no_matches: "No matches found for %{term}",
            no_results: "No matches found",
            searching: "Searching...",
            selection_too_big: { counting: { one: "You can only select %{count} item.", other: "You can only select %{count} items." } },
        },
        serial_number: "Serial Number",
        system: {
            power_control: {
                disabled_desc: "Power Production Disabled",
                enabled_desc: "Power Production Enabled",
                modal: {
                    desc_set_off: "This will <strong>disable</strong> system power production.",
                    desc_set_on: "This will <strong>enable</strong> system power production.",
                    title: "System Power Control",
                    verify: "Are you sure this is what you want?",
                },
            },
        },
        tariff: {
            add_peak: "Add Peak %{num}",
            add_tier: "Add Tier %{num}",
            base_rate_label: "Base Rate",
            baseline: "Baseline",
            charge_at_night: "Charge batteries from the grid at night",
            chg_at_night_desc: "Enable this option to set the batteries to charge from the grid during nighttime.",
            config_details: "Configuration Details",
            day_names: ["Weekday", "Weekend"],
            greater_than: "Greater than",
            hour_connector: "to",
            month_connector: "through",
            not_set: "Not Set",
            off_peak_label: "Off-Peak",
            peak_hours_label: "Peak %{num} Hours",
            peak_label: "Peak %{num}",
            peak_rate_label: "Peak %{num} Rate",
            peak_start_time: "Peak Start Time:",
            per_day: "per day",
            per_month: "per month",
            percent_of_baseline: "% of Baseline",
            remove: "Remove",
            seasonal_rate_desc: "Enable this option if rate differs between seasons.",
            seasonal_select_label: "Rate differs between seasons",
            select_type: "Select Type",
            single_rate: "Single Rate",
            summer_rate_label: "Summer",
            tariff_rate_title: "Tariff/Rate Structure",
            tariff_type_warning: "For a Time of Use tariff/rate structure you must provide at least one peak rate. If there is no peak rate, select Single Rate instead of Time of Use.",
            tier: "Tier %{num}",
            tiered: "Tiered",
            time_of_use: "Time of Use",
            unit_label: "kWh",
            up_to: "Up to",
            weekday_add_peak: "Add Weekday Peak %{num}",
            weekday_base_rate_label: "Weekday Base Rate",
            weekday_off_peak_rate_label: "Weekday Off-Peak Rate",
            weekday_peak_hours_label: "Weekday Peak %{num} Hours",
            weekday_peak_rate_label: "Weekday Peak %{num} Rate",
            weekdays_label: "Weekday",
            weekdays_rate_label: "Weekday",
            weekend_add_peak: "Add Weekend Peak %{num}",
            weekend_base_rate_label: "Weekend Base Rate",
            weekend_label: "Weekend",
            weekend_off_peak_rate_label: "Weekend Off-Peak Rate",
            weekend_peak_hours_label: "Weekend Peak %{num} Hours",
            weekend_peak_rate_label: "Weekend Peak %{num} Rate",
            weekend_rate_desc: "Enable this option if rate differs between weekdays and weekends.",
            weekend_select_label: "Rate differs between weekday and weekend",
            winter_months_desc: "To set Winter, select Summer months above.",
            winter_rate_label: "Winter",
            zero_not_allowed: "Zero is not a valid value",
        },
        wifi: {
            ap_mode_config: {
                confirm_switch_modal: { description: "This may interrupt communications with the Envoy and require you to re-connect.", title_false: "Disable AP Mode?", title_true: "Enable AP Mode?" },
                description_disabled: "Enable AP mode to allow this Envoy to operate as a wireless Access Point (AP). This will allow wireless devices in the vicinity to connect to the Envoy.",
                description_enabled: "This Envoy is currently operating as a wireless Access Point (AP).",
                disable: "Disable AP Mode",
                enable: "Enable AP Mode",
                time_remaining: { one: "Time Remaining: %{count} hour %{minutes} mins", other: "Time Remaining: %{count} hours %{minutes} mins", zero: "Time Remaining: %{count} hours %{minutes} mins" },
                title_disabled: "AP Mode Disabled",
                title_enabled: "AP Mode Enabled",
            },
            available_networks: "Available Networks",
            connect: {
                confirm_connect: "Confirm Network",
                connect_to_site: "Connect to %{site_name}?",
                connect_warning: "Note: This may interrupt communications with the Envoy and require you to re-connect.",
                connection_failure_explanation: "Unable to connect to network %{site_name}.",
                wait_join: "Please wait while the Envoy connects to %{site_name}...",
            },
            connect_incomplete: { description: "It's taking longer than expected to confirm a connection to %{site_name}. If the network connection was not successful, please try again.", title: "Sorry..." },
            connect_success: {
                description:
                    "<p>The Envoy has successfully connected to %{site_name}.</p><p><a href='#' class='open-overview'>Return to Overview.</a></p><p>Note: It may take up to a minute before the Enlighten connection status is updated.</p>",
                title: "Successfully Connected",
            },
            connection_lost: "This device has lost its connection to the Envoy.",
            connection_status: { attempting_to_connect: "Attempting to connect...", connecting: "Connecting...", connection_lost: "Connection Lost", failed: "Connection Failed", not_connected: "Not connected" },
            country_config: {
                description: "Select your country (ISO 3166-1 alpha-2 code) to optimize Wi-Fi signal strength in accordance with your national regulatory agency.",
                optional: "(optional)",
                select_prompt: "Select Country",
                title: "Country",
                update: "Update Country",
            },
            current_connection: "Connected to <span class='network_name'>%{network_name}</span>",
            enter_password: "Enter the password for %{site_name}.",
            forget: {
                forget_network_header: 'Forget Wi-Fi Network "%{network_name}"?',
                forget_warning: "Note: This may interrupt communications with the Envoy and require you to re-connect.",
                ok_to_forget: "This Envoy will no longer use this network to connect to Enlighten.",
                wait_forget: "Please wait while the Envoy forgets the network...",
            },
            forget_failed: { description: "Attempt to forget the Wi-Fi Network failed. If this continues, contact customer support.", title: "Sorry..." },
            forget_incomplete: {
                description:
                    "It's taking longer than expected to confirm forget Wi-Fi Network. Due to this, it is unlikely that your Envoy can still communicate with this application. Please check the network settings on your device and then reconnect to the Envoy.",
                title: "Sorry...",
            },
            gateway_ip: "Gateway IP: ",
            ip_address: "IP Address: ",
            join_another_network: { button: "Select Another Network", title: "Select Another Network" },
            join_network: { button: "View Networks", title: "Select Network" },
            network_changed_explanation:
                "The network connection on your device has changed. Due to this it is unlikely that your Envoy can still communicate with this application. Please check the network settings on your device and then reconnect to the Envoy.",
            network_changed_title: "Network Connection Changed",
            no_networks_found: "No networks found",
            not_configured_prompt: "Select a wireless network for this Envoy to use to connect to Enlighten.",
            other_network: {
                confirm_switch_modal: { description: "This may interrupt communications with the Envoy and require you to re-connect.", title: "Connect to Other Network?" },
                connect: "Connect",
                description: "Connect to an access point which is not configured to broadcast its ESSID.",
                name: "Name (ESSID)",
                password: "Password",
                security: "Security",
                security_mode: { None: "None", WEP: "WEP", "WPA-PSK": "WPA Personal", "WPA2-PSK": "WPA2 Personal" },
                title: "Connect Other Network",
                wpa_algorithm: "WPA Algorithm",
                wpa_algorithm_type: { CCMP: "CCMP", None: "None", TKIP: "TKIP", "TKIP+CCMP": "TKIP + CCMP" },
            },
            page_title: "Wi-Fi Configuration",
            password_required: "Password Required",
            please_wait: "Please Wait",
            title: "Wi-Fi Network",
            unsupported_site: "Unsupported Network",
            unsupported_site_explanation: "This network uses a security method that is not supported by the Envoy.",
            wifi: "Wi-Fi",
            wifi_hardware_missing: "Wi-Fi hardware not found",
            wifi_waiting_note: "This process may take up to 3 minutes, and you may need to reconnect to the Envoy once it completes.",
        },
        wireless_connection: { connected: "Connected", last_report: "Last Report:", not_connected: "Not Connected", signal_strength: "Signal Strength:", subghz: "Sub GHz", title: "Wireless Connection Links", zigbee_2_4: "2.4 GHz" },
    },
    lwui: {
        admin: {
            cross_domain_traffic: { status_msgs: { cross_domain_traffic: "Cross domain traffic reported", no_cross_domain_traffic: "No cross domain traffic reported", updated: "Updated" } },
            network_connectivity: {
                error_msgs: {
                    bad_device_ip: "Bad device IP address and/or network mask.",
                    bad_gateway_address: "Bad gateway IP address.",
                    gateway_subnet: "Gateway IP address not within subnet %{subnet}",
                    invalid_primary_dns: "Primary DNS address is not a valid IP address.",
                    invalid_secondary_dns: "Secondary DNS address is not a valid IP address.",
                },
            },
            security_admin: {
                status_msg: {
                    new_confirm_password_mismatch: "New and confirm password do not match",
                    old_password_mismatch: "Old password not correct",
                    password_file_missing: "Administrator password file(s) missing",
                    password_update_failure: "Password update failed",
                    password_update_failure_error: "Error: Password change failed",
                    password_update_successful: "Password update successful",
                },
            },
            wireless_connectivity: {
                advanced_settings: {
                    button_apply: "Apply",
                    regulatory_domain: "Country Code (ISO 3166-1 Alpha-2)",
                    regulatory_legend: "Select your country from this list.  This defines the permissible radio frequencies and transmission strength in accordance with your national regulatory agency.",
                },
                ap_mode: { active: "active", inactive: "inactive", name: "AP name:", start: "Start AP Mode", status: "AP Mode status:", stop: "Stop AP Mode", timeout: "minutes to AP timeout:" },
                busy_joining: "Attempting to Connect to the Network",
                busy_scanning: "Scanning for Wi-Fi Networks",
                busy_testing: "Testing Connection",
                connection_test: { failed: "Connection test failed.  Please check your settings.", successful: "Connection test was successful.  You may join the network." },
                current_settings: {
                    dhcp_waiting: "Requesting DHCP address from Wi-Fi Network",
                    forget_network: "Forget this Network",
                    label_gateway_ip: "Gateway IP",
                    link_status: "Status",
                    no_config: "No Wi-Fi connection is configured",
                    no_device: "No compatible Wi-Fi device detected",
                    status_connected: "Connected",
                    status_connecting: "Establishing connection",
                    status_stopped: "Wi-Fi stopped",
                    unavailable: "unavailable",
                    verified_config: "Verified Wi-Fi Network",
                },
                device_information: {
                    device: "Device",
                    driver_name: "Driver Name",
                    hw_version: "Hardware Version",
                    mac_address: "MAC Address",
                    manufacturer: "Manufacturer",
                    model: "Model",
                    usb_slot_num: "USB Slot #",
                    usb_spec_version: "USB Specification Version",
                    vendor: "Vendor",
                },
                forget_msg: "This action will delete the current wireless configuration and drop the connection.  If you are connected wirelessly, your connection to the Envoy will be lost.",
                legend_advanced_settings: "Advanced Settings",
                legend_ap_mode: "Envoy AP Mode",
                legend_current_settings: "Current Wi-Fi Settings",
                legend_device_information: "Device Information",
                legend_manual_configuration: "Manual Configuration",
                legend_site_survey: "Available Wi-Fi Networks",
                manual_configuration: {
                    algorithm: "WPA Algorithm",
                    button_clear: "Clear Form",
                    button_connect: "Join Network",
                    button_test: "Test Connection",
                    channel: "Wireless Channel",
                    essid_length: "The ESSID must be 1 to 32 characters long",
                    info_msg: "The following settings are necessary only for connecting with an access point which is not configured to broadcast its ESSID.",
                    mhz: "MHz",
                    network_name: "Wireless Network Name (ESSID)",
                    password: "Password/PSK",
                    password_unneeded: "A password is unnecessary for an open system",
                    password_wep: "WEP keys must be either 10, 26, or 58 hexadecimal digits",
                    password_wep_chars: "WEP keys must be comprised of only numbers and the letters A-F",
                    password_wpa: "WPA/WPA2-PSK passwords must be at least 8 and no greater than 63 characters",
                    security_mode: "Wireless Security Mode",
                },
                site_survey: { button_rescan: "Re-Scan", info_msg: "Select a network from the list.", none_found: "No networks found" },
                test_msg: "The Wi-Fi connection will now be tested to confirm that the settings are valid.  The current connection to the Envoy will be lost temporarily during the connection test.",
            },
        },
        home: {
            event_tbl_col_hdr: { date: "Date", details: "Details", device: "Device", event: "Event", eventId: "Event Id" },
            warnings: {
                acb_critical_temp: "An elevated internal temperature is detected in one or more of the AC Batteries. Check the Installation and Operation Manual for instructions.",
                acb_needs_meters: "An Envoy-S with metering is required to complete system commissioning. AC Batteries requiring metering have been detected, and this Envoy-S does not have metering.",
                acdisco_active: "AC disconnect active. Envoy cannot communicate with microinverters.",
                acdisco_fail: "AC disconnect failure. Check AC disconnect relay.",
                both_meter_enabled: "Both the production and consumption meters must be enabled to complete system commissioning.",
                check_date_warn_msg:
                    "The system time is invalid.  Until this is corrected the Envoy will not be able to communicate with microinverters.  If the Envoy is not configured to use NTP, or is not able to contact the configured NTP servers, this will need to be corrected manually via the <a href='/admin/lib/date_time_display'> Date and Time Administration controls.</a>",
                cross_domain_traffic: "Communications from other Envoy(s) have been detected.",
                date_invalid: "The system time is invalid. Connect the Envoy to the Internet so that its time can be set correctly.",
                db_warn_msg: "The Envoy has not been able to send data to Enlighten, and local storage is nearly full. Connect the Envoy to the Internet to avoid data loss.",
                eim_consumption_check_wiring: "The power consumption meter is not properly connected. Please check the wiring.",
                eim_production_check_wiring: "The power production meter is not properly connected. Please check the wiring.",
                envoy_needs_meters: "An Envoy-S with metering is required to complete system commissioning. A grid profile requiring metering has been selected, and this Envoy-S does not have metering.",
                legend: "Warning",
                no_enlighten_report: "The system has never reported to Enlighten. Connect the Envoy to the Internet to establish a connection with Enlighten.",
                no_phase_assignment: "AC Batteries must be assigned to phases to complete system commissioning.",
                pcu_limit_warn_msg: "The number of microinverters detected exceeds the Envoy\u2019s Monitoring Configuration. Contact Enphase Energy Customer Support.",
                pcu_limit_warn_msg2: "The number of microinverters detected exceeds the Envoy's default Monitoring Configuration.  The Envoy requires an Internet connection to set the Monitoring Configuration.",
                pel_profile_requires_meters: "The production and consumption meters must be configured to support power export limiting.",
                phase_assoc_failed: "Phase detection failed. Check the Installation and Operation Manual for instructions.",
                pim_profile_requires_meters: "Multi-phase production and consumption metering must be enabled to support phase imbalance management and loss of phase detection.",
            },
        },
    },
    number: {
        currency: { format: { delimiter: ",", format: "%u %n", precision: 2, separator: ".", significant: !1, strip_insignificant_zeros: !1, unit: "$" } },
        format: { delimiter: ",", precision: 3, separator: ".", significant: !1, strip_insignificant_zeros: !1 },
        human: {
            decimal_units: { format: "%n %u", units: { billion: "Billion", million: "Million", quadrillion: "Quadrillion", thousand: "Thousand", trillion: "Trillion", unit: "" } },
            format: { delimiter: "", precision: 3, significant: !0, strip_insignificant_zeros: !0 },
            storage_units: { format: "%n %u", units: { byte: { one: "Byte", other: "Bytes" }, gb: "GB", kb: "KB", mb: "MB", tb: "TB" } },
        },
        percentage: { format: { delimiter: "" } },
        precision: { format: { delimiter: "" } },
    },
    scripts: { data: { verify_internet_connection_message: "Your system has never reported to Enlighten. Verify the Internet connection." } },
    time: {
        am: "AM",
        formats: {
            default: "%d/%m/%Y %I\u00a0:%M %p",
            default_date_time_no_pad: "%d/%m/%Y %-I:%M %p",
            hour_meridian: "%-H:00",
            long: "%B %d, %Y %H:%M",
            noday_nozone_datetime_secs_ui: "%d %b, %Y %-I:%M:%S %p",
            noday_nozone_datetime_ui: "%d %b, %Y %-I:%M %p",
            nozone_datetime: "%a %d %b %Y %I:%M %p",
            short: "%d %b %H:%M",
            short_date: "%d/%m/%Y",
            time_only: "%H:%M",
        },
        pm: "PM",
    },
    units: {
        amps: "A",
        bool: "Boolean",
        degrees: "degrees",
        hertz: "Hz",
        hertz_per_sec: "Hz / s",
        lagging: "Lagging",
        milliseconds: "ms",
        millivolts: "mV",
        none: "",
        percent: "%",
        percent_per_hertz: "% / Hz",
        percent_per_min: "% / min",
        seconds: "s",
        volts: "V",
    },
};
I18n.translations["en-CA"] = {
    date: {
        abbr_day_names: "Sun Mon Tue Wed Thu Fri Sat".split(" "),
        abbr_month_names: [null, "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        day_names: "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),
        formats: { default: "%Y-%m-%d", long: "%B %e, %Y", only_day: "%e", short: "%e %b" },
        month_names: [null, "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        order: ["year", "month", "day"],
    },
    envoy: {
        cond_flags: {
            acb_ctrl: {
                bmudatabounds: "BMU Data Bounds Error",
                bmuhardwareerror: "BMU Hardware Error",
                bmuimageerror: "BMU Image Error",
                bmumaxcurrentwarning: "BMU Max Current Warning",
                bmusenseerror: "BMU Sense Error",
                cellmaxtemperror: "Cell Max Temperature Error",
                cellmaxtempwarning: "Cell Max Temperature Warning",
                cellmaxvoltageerror: "Cell Max Voltage Error",
                cellmaxvoltagewarning: "Cell Max Voltage Warning",
                cellmintemperror: "Cell Min Temperature Error",
                cellmintempwarning: "Cell Min Temperature Warning",
                cellminvoltageerror: "Cell Min Voltage Error",
                cellminvoltagewarning: "Cell Min Voltage Warning",
                cibcanerror: "CIB CAN Error",
                cibimageerror: "CIB Image Error",
                cibspierror: "CIB SPI Error",
            },
            nsrb_ctrl: {
                acfreqhigh: "AC Frequency High",
                acfreqlow: "AC Frequency Low",
                acfrequencyoor: "AC Frequency Out Of Range",
                acvoltageavgline1: "AC Voltage Avg Out Of Range - Phase 1",
                acvoltageavgline2: "AC Voltage Avg Out Of Range - Phase 2",
                acvoltageavgline3: "AC Voltage Avg Out Of Range - Phase 3",
                acvoltagehighline1: "AC Voltage High - Phase 1",
                acvoltagehighline2: "AC Voltage Out Of Range - Phase 2",
                acvoltagehighline3: "AC Voltage High - Phase 3",
                acvoltagelowline1: "AC Voltage Low - Phase 1",
                acvoltagelowline2: "AC Voltage Out Of Range - Phase 2",
                acvoltagelowline3: "AC Voltage Low - Phase 3",
                acvoltageoorline1: "AC Voltage Out Of Range - Phase 1",
                acvoltageoorline2: "AC Voltage Out Of Range - Phase 2",
                acvoltageoorline3: "AC Voltage Out Of Range - Phase 3",
                buttonpress: "Button Pressed",
                dcgriderror: "DC Grid Current Error",
                dcgridhigh: "DC Grid Current High",
                dcgridlow: "DC Grid Current Low",
                relayforced: "Relay Forced",
                relayopen: "Relay Open",
                rocof: "Rate of Change of Frequency Error",
            },
            obs_strs: {
                discovering: "Discovering",
                failure: "Failure to report",
                flasherror: "Flash Error",
                notmonitored: "Not Monitored",
                ok: "Normal",
                plmerror: "PLM Error",
                secmodeenterfailure: "Secure mode enter failure",
                secmodeexitfailure: "Secure mode exit failure",
                sleeping: "Sleep Mode On",
                verifing: "Verifying Device",
            },
            pcu_chan: {
                acMonitorError: "AC Monitor Error",
                acfrequencyhigh: "AC Frequency High",
                acfrequencylow: "AC Frequency Low",
                acfrequencyoor: "AC Frequency Out Of Range",
                acvoltage_avg_hi: "AC Voltage Average High",
                acvoltagehigh: "AC Voltage High",
                acvoltagelow: "AC Voltage Low",
                acvoltageoor: "AC Voltage Out Of Range",
                acvoltageoosp1: "AC Voltage Out Of Range - Phase 1",
                acvoltageoosp2: "AC Voltage Out Of Range - Phase 2",
                acvoltageoosp3: "AC Voltage Out Of Range - Phase 3",
                agfpowerlimiting: "AGF Power Limiting",
                dcresistancelow: "DC Resistance Low",
                dcresistancelowpoweroff: "DC Resistance Low - Power Off",
                dcvoltagetoohigh: "DC Voltage Too High",
                dcvoltagetoolow: "DC Voltage Too Low",
                dfdt: "AC Frequency Changing too Fast",
                gfitripped: "GFI Tripped",
                gridgone: "Grid Gone",
                gridinstability: "Grid Instability",
                gridoffsethi: "Grid Offset Hi",
                gridoffsetlow: "Grid Offset Low",
                hardwareError: "Hardware Error",
                hardwareWarning: "Hardware Warning",
                highskiprate: "High Skip Rate",
                invalidinterval: "Invalid Interval",
                pwrgenoffbycmd: "Power generation off by command",
                skippedcycles: "Skipped Cycles",
                vreferror: "Voltage Ref Error",
            },
            pcu_ctrl: {
                alertactive: "Alert Active",
                altpwrgenmode: "Alternate Power Generation Mode",
                altvfsettings: "Alternate Voltage and Frequency Settings",
                badflashimage: "Bad Flash Image",
                bricked: "No Grid Profile",
                commandedreset: "Commanded Reset",
                criticaltemperature: "Critical Temperature",
                "dc-pwr-low": "DC Power Too Low",
                iuplinkproblem: "IUP Link Problem",
                manutestmode: "In Manu Test Mode",
                nsync: "Grid Perturbation Unsynchronized",
                overtemperature: "Over Temperature",
                poweronreset: "Power On Reset",
                pwrgenoffbycmd: "Power generation off by command",
                runningonac: "Running on AC",
                "sleep-mode": "Sleep Mode On",
                tpmtest: "Transient Grid Profile",
                unexpectedreset: "Unexpected Reset",
                watchdogreset: "Watchdog Reset",
            },
            rgm_chan: { check_meter: "Meter Error", power_quality: "Poor Power Quality" },
        },
        global: {
            cleared: "Clear",
            copyright_notice: "2007-2014, [e] Enphase Energy, Inc. All rights reserved.",
            copyright_notice_01: "[e] Enphase Energy, Inc. All rights reserved.",
            cs_phone_number: "XXX-XXX-XXXX",
            disable: "Disable",
            disabled: "Disabled",
            enable: "Enable",
            enabled: "Enabled",
            enlighten_token_link: "Get the token here",
            false: "False",
            none: "None",
            notapplicable: "n/a",
            ok: "OK",
            page_not_found_msg1: "Page Not Found",
            page_not_found_msg2: "The page you tried to view does not exist",
            page_not_found_msg3: 'Try the <a href="/">home</a> page',
            serialnumber: "Serial Number",
            set: "Set",
            too_many_installer_sessions_msg1: "Too many installer sessions active",
            too_many_installer_sessions_msg2: "Consider closing other installer session windows",
            too_many_installer_sessions_msg3: "Too many requests active for this resource, please retry in a couple minutes",
            true: "True",
            unknown: "Unknown",
        },
        paging: {
            all: "All",
            clearchoices: "Reset Table",
            info: "Showing _START_ to _END_ of _TOTAL_ entries",
            infoempty: "Showing 0 to 0 of 0 entries",
            infofiltered: "(filtered from _MAX_ total entries)",
            lengthmenu: "Show _MENU_ entries",
            processing: "Processing...",
            search: "Search:",
            zerorecords: "No matching records found",
        },
    },
    envoy_backbone: {
        ac_batteries: {
            manage_options: {
                active: "Active (%{count})",
                active_count: { counting: { one: "Active (%{count})", other: "Active (%{count})", zero: "Active (%{count})" } },
                deleted: "Deleted (%{count})",
                deleted_count: { counting: { one: "Deleted (%{count})", other: "Deleted (%{count})", zero: "Deleted (%{count})" } },
            },
            max_temp: "Max Temp: ",
            nav: { all: "All", manage: "Manage", status: "Status" },
            no_inverters: "There are no batteries.",
            no_inverters_search: 'No AC Batteries were found matching "%{search_term}".',
            sleep_mode: {
                enable_failed: "The attempt to put the selected batteries into sleep mode failed. Please try again in a few minutes. If this problem continues, contact customer support.",
                prompt_to_cancel: { desc: "A battery must be in sleep mode before it can be safely disconnected.</br></br>Are you sure you want to stop the battery from going into sleep mode?" },
                prompt_to_sleep_modal: {
                    desc: "Batteries must be in sleep mode before they can be safely disconnected.</br></br><b>Note:</b> Batteries will charge or discharge to %{min}-%{max}% state of charge before entering sleep mode.",
                    target_soc_label: "Target State of Charge",
                    target_soc_link_text: "Change target state of charge",
                    warning: "Warning: Once a battery is put into sleep mode it can only be taken out of sleep mode by a professional installer.",
                },
                prompt_to_wake: "A battery must be in sleep mode before it can be safely disconnected.</br></br>Are you sure you want to turn sleep mode off?",
                sleep_btn: "Sleep",
            },
            state_of_charge: "State of Charge: ",
            status_options: {
                cancel_sleep_label: "Stop",
                comm_nocount: "Comm",
                power_nocount: "Operating",
                preparing_to_sleep_text: "Entering Sleep Mode",
                profile_nocount: "Config",
                wake_sleep_label: "Turn Off",
                waking_label: "Exiting Sleep Mode",
            },
        },
        app_title: "Envoy Mobile",
        authentication: {
            authentication_with_authms: "Login with Enphase",
            bad_jwt: "Bad token",
            insert_token_headline: "Token Authentication",
            title: "Authentication",
            token_headline: "Token",
            token_link: "Visit %{auth_authority} to get your token",
            token_submit: "Submit",
            too_many_sessions: "Too many sessions",
            verifying_jwt: "Verifying token",
        },
        buttons: {
            cancel: "Cancel",
            change: "Change",
            close: "Close",
            connect: "Connect",
            edit: "Edit",
            forget: "Forget",
            forget_network: "Forget this Network",
            ok: "OK",
            sleep_off: "Turn Sleep Mode Off",
            sleep_on: "Turn Sleep Mode On",
            start_scan: "Start Scan",
            stop: "Stop",
            update: "Update",
        },
        cellular: {
            carrier: "Carrier",
            connected: "Connected",
            connection_status: "Connection Status",
            iccid: "ICCID (Cell Number)",
            imsi: "IMSI (Subscriber ID)",
            mei: "Modem IMEI Number",
            no_modem: "No cellular modem detected",
            not_connected: "Not Connected",
            page_title: "Cellular Configuration",
        },
        comm_check: {
            communication_level: "Communications Level",
            description: "Check signal strength between the Envoy and the microinverters.",
            devices: "Devices",
            in_progress: "Communications Check in Progress",
            remaining_time: "%{minutes} minutes remaining",
            remaining_time_one: "< 1 minute remaining",
            start: "Start Communications Check",
            stop: "Stop Communications Check",
            title: "Communications Check",
        },
        comms: {
            communicating: "Communicating",
            description: "The Envoy\u2019s list of communicating microinverters includes the serial numbers of all devices that are receiving messages from the Envoy and reporting production and status information.",
            not_communicating: "Not Communicating",
            title: "Microinverters Communicating",
        },
        countries: {
            AD: "Andorra",
            AE: "United Arab Emirates",
            AF: "Afghanistan",
            AG: "Antigua and Barbuda",
            AI: "Anguilla",
            AL: "Albania",
            AM: "Armenia",
            AQ: "Antarctica",
            AR: "Argentina",
            AS: "American Samoa",
            AT: "Austria",
            AU: "Australia",
            AW: "Aruba",
            AZ: "Azerbaijan",
            BA: "Bosnia and Herzegovina",
            BB: "Barbados",
            BD: "Bangladesh",
            BE: "Belgium",
            BF: "Burkina Faso",
            BG: "Bulgaria",
            BH: "Bahrain",
            BI: "Burundi",
            BJ: "Benin",
            BM: "Bermuda",
            BN: "Brunei Darussalam",
            BO: "Bolivia, Plurinational State of",
            BR: "Brazil",
            BS: "Bahamas",
            BT: "Bhutan",
            BV: "Bouvet Island",
            BW: "Botswana",
            BY: "Belarus",
            BZ: "Belize",
            CA: "Canada",
            CC: "Cocos (Keeling) Islands",
            CF: "Central African Republic",
            CG: "Congo",
            CH: "Switzerland",
            CI: "Cd'Ivoire",
            CK: "Cook Islands",
            CL: "Chile",
            CM: "Cameroon",
            CN: "China",
            CO: "Colombia",
            CR: "Costa Rica",
            CV: "Cape Verde",
            CX: "Christmas Island",
            CY: "Cyprus",
            CZ: "Czech Republic",
            DE: "Germany",
            DJ: "Djibouti",
            DK: "Denmark",
            DM: "Dominica",
            DO: "Dominican Republic",
            DZ: "Algeria",
            EC: "Ecuador",
            EE: "Estonia",
            EG: "Egypt",
            EH: "Western Sahara",
            ER: "Eritrea",
            ES: "Spain",
            ET: "Ethiopia",
            FI: "Finland",
            FJ: "Fiji",
            FK: "Falkland Islands (Malvinas)",
            FM: "Micronesia, Federated States of",
            FO: "Faroe Islands",
            FR: "France",
            GA: "Gabon",
            GB: "United Kingdom",
            GD: "Grenada",
            GE: "Georgia",
            GF: "French Guiana",
            GH: "Ghana",
            GI: "Gibraltar",
            GL: "Greenland",
            GM: "Gambia",
            GN: "Guinea",
            GP: "Guadeloupe",
            GQ: "Equatorial Guinea",
            GR: "Greece",
            GS: "South Georgia and the South Sandwich Islands",
            GT: "Guatemala",
            GU: "Guam",
            GW: "Guinea-Bissau",
            GY: "Guyana",
            HK: "Hong Kong",
            HM: "Heard Island and McDonald Islands",
            HN: "Honduras",
            HR: "Croatia",
            HT: "Haiti",
            HU: "Hungary",
            ID: "Indonesia",
            IE: "Ireland",
            IL: "Israel",
            IN: "India",
            IO: "British Indian Ocean Territory",
            IS: "Iceland",
            IT: "Italy",
            JM: "Jamaica",
            JO: "Jordan",
            JP: "Japan",
            KE: "Kenya",
            KG: "Kyrgyzstan",
            KH: "Cambodia",
            KI: "Kiribati",
            KM: "Comoros",
            KN: "Saint Kitts and Nevis",
            KR: "Korea, Republic of",
            KW: "Kuwait",
            KY: "Cayman Islands",
            KZ: "Kazakhstan",
            LA: "Lao People's Democratic Republic",
            LB: "Lebanon",
            LC: "Saint Lucia",
            LI: "Liechtenstein",
            LK: "Sri Lanka",
            LR: "Liberia",
            LS: "Lesotho",
            LT: "Lithuania",
            LU: "Luxembourg",
            LV: "Latvia",
            MA: "Morocco",
            MC: "Monaco",
            MD: "Moldova, Republic of",
            ME: "Montenegro",
            MG: "Madagascar",
            MH: "Marshall Islands",
            ML: "Mali",
            MM: "Myanmar",
            MN: "Mongolia",
            MO: "Macao",
            MP: "Northern Mariana Islands",
            MQ: "Martinique",
            MR: "Mauritania",
            MS: "Montserrat",
            MT: "Malta",
            MU: "Mauritius",
            MV: "Maldives",
            MW: "Malawi",
            MX: "Mexico",
            MY: "Malaysia",
            MZ: "Mozambique",
            NA: "Namibia",
            NC: "New Caledonia",
            NE: "Niger",
            NF: "Norfolk Island",
            NG: "Nigeria",
            NI: "Nicaragua",
            NL: "Netherlands",
            NO: "Norway",
            NP: "Nepal",
            NR: "Nauru",
            NU: "Niue",
            NZ: "New Zealand",
            OM: "Oman",
            PA: "Panama",
            PE: "Peru",
            PF: "French Polynesia",
            PG: "Papua New Guinea",
            PH: "Philippines",
            PK: "Pakistan",
            PL: "Poland",
            PM: "Saint Pierre and Miquelon",
            PN: "Pitcairn",
            PR: "Puerto Rico",
            PT: "Portugal",
            PW: "Palau",
            PY: "Paraguay",
            QA: "Qatar",
            RO: "Romania",
            RU: "Russian Federation",
            SA: "Saudi Arabia",
            SB: "Solomon Islands",
            SC: "Seychelles",
            SE: "Sweden",
            SG: "Singapore",
            SH: "Saint Helena, Ascension and Tristan da Cunha",
            SI: "Slovenia",
            SJ: "Svalbard and Jan Mayen",
            SK: "Slovakia",
            SL: "Sierra Leone",
            SM: "San Marino",
            SN: "Senegal",
            SO: "Somalia",
            SR: "Suriname",
            ST: "Sao Tome and Principe",
            SV: "El Salvador",
            SY: "Syrian Arab Republic",
            SZ: "Swaziland",
            TC: "Turks and Caicos Islands",
            TD: "Chad",
            TF: "French Southern Territories",
            TG: "Togo",
            TH: "Thailand",
            TJ: "Tajikistan",
            TK: "Tokelau",
            TL: "Timor-Leste",
            TM: "Turkmenistan",
            TN: "Tunisia",
            TO: "Tonga",
            TR: "Turkey",
            TT: "Trinidad and Tobago",
            TV: "Tuvalu",
            TZ: "Tanzania, United Republic of",
            UA: "Ukraine",
            UG: "Uganda",
            UM: "United States Minor Outlying Islands",
            US: "United States",
            UY: "Uruguay",
            UZ: "Uzbekistan",
            VA: "Holy See (Vatican City State)",
            VC: "Saint Vincent and the Grenadines",
            VE: "Venezuela, Bolivarian Republic of",
            VG: "Virgin Islands, British",
            VI: "Virgin Islands, U.S.",
            VN: "Viet Nam",
            VU: "Vanuatu",
            WF: "Wallis and Futuna",
            WS: "Samoa",
            YE: "Yemen",
            YT: "Mayotte",
            ZA: "South Africa",
            ZM: "Zambia",
            ZW: "Zimbabwe",
        },
        counts: "%{actual_count}/%{expected_count}",
        detected: {
            battery_target_seperate: { one: "%{count} battery", other: "%{count} batteries", zero: "%{count} batteries" },
            description:
                "The Envoy\u2019s list of detected microinverters includes all serial numbers discovered by a device scan or provisioned with the Installer Toolkit. When microinverters have been detected, they can send and receive additional data from the Envoy.",
            detected: "Detected",
            device_target: "Device Target: %{count}",
            device_target_title: "Device Target: ",
            discovered: "Discovered:",
            installed: "Installed",
            micro_target_seperate: { one: "%{count} microinverter", other: "%{count} microinverters", zero: "%{count} microinverters" },
            nsr_target_separate: { one: "%{count} Q-Relay", other: "%{count} Q-Relays", zero: "%{count} Q-Relays" },
            provisioned: "Provisioned:",
            remaining_duration: { one: "Remaining Duration: %{count} hour %{minutes} mins", other: "Remaining Duration: %{count} hours %{minutes} mins", zero: "Remaining Duration: %{count} hours %{minutes} mins" },
            remaining_hour_one: "1 hour",
            remaining_hours: "%{hours} hours",
            remaining_minute_one: "1 minute remaining",
            remaining_minutes: "%{minutes} minutes remaining",
            remaining_priority: {
                one: "Remaining Priority Duration: %{count} hour %{minutes} mins",
                other: "Remaining Priority Duration: %{count} hours %{minutes} mins",
                zero: "Remaining Priority Duration: %{count} hours %{minutes} mins",
            },
            remaining_time: "%{minutes} minutes remaining",
            remaining_time_one: "< 1 minute remaining",
            scan_inprogress: "Device Scan in Progress",
            scan_start: "Start Device Scan",
            scan_stop: "Stop Scan",
            title: "Microinverters Detected",
        },
        device_alert_messages: {
            meters_not_enabled: "The production and consumption meters must be configured for Batteries to operate.",
            no_phase_assignment: "Batteries will not operate until they are assigned to phases.",
            not_configured: "The Batteries must be configured before they will operate.",
        },
        devices: {
            detected: "Detected",
            detected_total_count: "%{detected_count} of %{total_count}",
            device_info: {
                change_phase: "Change Phase",
                comm_level: "Comm Level: ",
                comm_level_2_4_ghz: "Comm Level (2.4 GHz): ",
                comm_level_sub_ghz: "Comm Level (Sub GHz): ",
                detected: "Detected: ",
                discovered: "Discovered via device scan / Pre Provisioned ",
                grid_profile: "Grid Profile: ",
                last_comm: "Last Communication: ",
                last_report: "Last Report: ",
                notapplicable: "n/a",
                param_table: "Parameter Table: ",
                part_number: "Part Number: ",
                pending_condition_clear: '"%{condition_flag}" clear condition command is in progress.',
                phase: "Phase: ",
                phase_unknown: "No phase selected",
                provisioned: "Assigned via provisioning",
                running_image: "Running Image: ",
                select_phase: "Select Phase",
                status: "Status: ",
                unknown: "Unknown",
                updated: "Updated ",
                view_in_array: "View in Array",
            },
            device_scan: "Device Scan",
            device_scan_short: "Scan",
            scan_state: { active: "Active", inactive: "Inactive", scan_disabled: "Disabled", scan_inhibited: "Inhibited", scan_suspended: "Suspended" },
        },
        encharge_batteries: {
            manage_options: {
                active: "Active (%{count})",
                active_count: { counting: { one: "Active (%{count})", other: "Active (%{count})", zero: "Active (%{count})" } },
                deleted: "Deleted (%{count})",
                deleted_count: { counting: { one: "Deleted (%{count})", other: "Deleted (%{count})", zero: "Deleted (%{count})" } },
            },
            nav: { all: "All", manage: "Manage", status: "Status" },
            no_inverters: "There are no encharge batteries.",
            no_inverters_search: 'No Encharge Batteries were found matching "%{search_term}".',
            phase_labels: { "ph-a": "L1(A)", "ph-b": "L2(B)", "ph-c": "L3(C)", "ph-unk": "No phase selected", "ph-updating": "Updating...", select_one: "Select One" },
            status_options: {
                cancel_sleep_label: "Stop",
                comm_nocount: "Comm",
                power_nocount: "Operating",
                preparing_to_sleep_text: "Entering Sleep Mode",
                profile_nocount: "Config",
                wake_sleep_label: "Turn Off",
                waking_label: "Exiting Sleep Mode",
            },
            title: "Encharge",
        },
        enpowers: {
            manage_options: {
                active: "Active (%{count})",
                active_count: { counting: { one: "Active (%{count})", other: "Active (%{count})", zero: "Active (%{count})" } },
                deleted: "Deleted (%{count})",
                deleted_count: { counting: { one: "Deleted (%{count})", other: "Deleted (%{count})", zero: "Deleted (%{count})" } },
            },
            max_temp: "Max Temp: ",
            nav: { all: "All", manage: "Manage", status: "Status" },
            no_inverters: "There is no Enpower device.",
            no_inverters_search: 'No Enpower device found matching "%{search_term}".',
            state_of_grid: { closed: "Closed", open: "Open", title: "State of Grid: " },
            status_options: { comm_nocount: "Comm", power_nocount: "Operating", profile_nocount: "Config" },
            title: "Enpower",
        },
        errors: {
            error_message: "Sorry, there's a problem getting data from the Envoy. If this continues, contact customer support.",
            interface_not_dhcp: "Sorry, you cannot get a new IP address. Switch the Envoy IP setting to DHCP first.",
            not_allowed: "Sorry, your requested change is not permitted and could not be saved.",
            not_authorized: "Sorry, you are not authorized to view that page.",
            save_failed: "Sorry, your changes could not be saved. ",
            start_scan_target_too_low:
                "<p>You've indicated that you expect %{expected_count} microinverters to report to this Envoy, and %{expected_count} have already been detected.</p><p>Before starting a device scan, <a href='#' class='open-target-count'>increase the number of microinverters expected</a> or delete one or more microinverters from the <a href='#' class='open-manage-devices'>manage devices screen</a>.</p>",
            start_scan_target_too_low_battery: {
                one: "<p>You've indicated that you expect %{count} battery to report to this Envoy, and that has already been detected.</p>",
                other: "<p>You've indicated that you expect %{count} batteries to report to this Envoy, and that many have already been detected.</p>",
                zero: "<p>You've indicated that you expect %{count} batteries to report to this Envoy, and that many have already been detected.</p>",
            },
            start_scan_target_too_low_battery_end:
                "<p>Before starting a device scan, <a href='#' class='open-target-count'>increase the number of batteries expected</a> or delete one or more batteries from the <a href='#' class='open-manage-devices-battery'>manage devices screen</a>.</p>",
            start_scan_target_too_low_both:
                "<p>The expected number of devices have already been detected.</p><p>Before starting a device scan, <a href='#' class='open-target-count'>increase the number of devices expected</a> or delete one or more microinverters or batteries.</p>",
            start_scan_target_too_low_micro: {
                one: "<p>You've indicated that you expect %{count} microinverter to report to this Envoy, and that has already been detected.</p>",
                other: "<p>You've indicated that you expect %{count} microinverters to report to this Envoy, and that many have already been detected.</p>",
                zero: "<p>You've indicated that you expect %{count} microinverters to report to this Envoy, and that many have already been detected.</p>",
            },
            start_scan_target_too_low_micro_end:
                "<p>Before starting a device scan, <a href='#' class='open-target-count'>increase the number of microinverters expected</a> or delete one or more microinverters from the <a href='#' class='open-manage-devices'>manage devices screen</a>.</p>",
            start_scan_target_too_low_nsr: {
                one: "<p>You've indicated that you expect %{count} Q-Relay to report to this Envoy, and that has already been detected.</p>",
                other: "<p>You've indicated that you expect %{count} Q-Relays to report to this Envoy, and that many have already been detected.</p>",
                zero: "<p>You've indicated that you expect %{count} Q-Relays to report to this Envoy, and that many have already been detected.</p>",
            },
            start_scan_target_too_low_nsr_end:
                "<p>Before starting a device scan, <a href='#' class='open-target-count'>increase the number of Q-Relays expected</a> or delete one or more Q-Relays from the <a href='#' class='open-manage-devices-nsr'>manage devices screen</a>.</p>",
            start_scan_title: "Device Scan Unavailable",
            timeout_message:
                "Sorry, it's taking too long to get data from the Envoy. Make sure the Envoy is powered on, and that the Envoy and this device are both connected to the same local network. If the problem continues, contact customer support.",
            title: "Error",
            tunnel_close_failed: "Attempt to close the connection to Enphase support failed. If this continues, contact customer support.",
            tunnel_failed_title: "Connection Failed",
            tunnel_open_failed: "The Envoy must be connected to the Internet to open a connection to Enphase. If the Envoy has an Internet connection and this problem continues, contact customer support.",
        },
        ethernet: {
            buttons: { dhcp: "Use DHCP", new_ip: "Get New IP Address", static: "Use Static IP" },
            confirm_change: { description: "This may interrupt communications with the Envoy and require you to re-connect.", title: "Change Ethernet Configuration?" },
            confirm_static: {
                description: "This will assign the current DHCP IP address and other configurations as static values. If you choose to proceed, you can update these values on the next screen.",
                title: "Change Ethernet Configuration?",
            },
            gateway_ip: "Gateway IP",
            ip_address: "IP Address",
            ip_setting: "IP Setting",
            netmask: "Netmask",
            new_ip_modal: { description: "This may interrupt communications with the Envoy and require you to re-connect.", title: "Get New IP Address?" },
            no_config: "No ethernet connection detected.",
            page_title: "Ethernet Configuration",
            primary_dns: "Primary DNS Server",
            secondary_dns: "Secondary DNS Server",
            type: { dhcp: "DHCP", static: "Static IP" },
        },
        forms: { search: "Search", search_prompt: "Serial Number", select_prompt: "Select One" },
        global_nav: {
            acb: "AC Battery",
            comms: "Comms",
            detected: "Detected",
            encharge: "Encharge",
            encharge_batteries: "Encharge",
            enpower: "Enpower",
            meters: "Meters",
            meters_small: "Meters",
            microinverters: "Microinverters",
            microinverters_short: "Micros",
            more: "More",
            network: "Network",
            nsr: "Q Relays",
            overview: "Overview",
            power: "Power",
            profiles: "Profiles",
        },
        initial_setup: {
            continue: "Continue",
            device_prompt: "Enter the number of devices that you expect to report to this Envoy.",
            eu_profile_prompt: "Select a location-specific grid profile.",
            migration_in_progress_message: "profiles being updated",
            na_profile_prompt: "The system is using the factory-installed grid profile settings. You can select a location-specific grid profile below.",
            system_size: "System Size",
        },
        jquery_validate: {
            messages: {
                addedTierPercent: "Please enter a number\u00a0greater than the percent\u00a0of baseline\u00a0entered for {0}.",
                an_number: "Please enter a valid number.",
                creditcard: "Please enter a valid credit card number.",
                date: "Please enter a valid date.",
                dateISO: "Please enter a valid date (ISO).",
                digits: "Please enter only digits.",
                domain: "Please enter a valid IP v4 address (xxx.xxx.xxx.xxx) or URL (google.com)",
                email: "Please enter a valid email address.",
                equalTo: "Please enter the same value again.",
                ipv4: "Please enter a valid IP v4 address. (xxx.xxx.xxx.xxx)",
                max: "Please enter a value less than or equal to {0}.",
                maxlength: "Please enter no more than {0} characters.",
                min: "Please enter a value greater than or equal to {0}.",
                minlength: "Please enter at least {0} characters.",
                number: "Please enter a valid number.",
                range: "Please enter a value between {0} and {1}.",
                rangelength: "Please enter a value between {0} and {1} characters long.",
                remote: "Please fix this field.",
                required: "This field is required.",
                url: "Please enter a valid URL.",
                wep_key: "Please enter a valid WEP Key (10, 26, or 58 characters, which may include 0-9 or A-F).",
            },
        },
        loading: "Please wait, loading",
        meters: {
            active_energy: "Active Energy",
            active_energy_lt: "Active Energy",
            active_power: "Active Power",
            apparent_energy: "Apparent Energy",
            apparent_power: "Apparent Power",
            consumption: "Consumption Meter",
            consumption_meter: {
                enable_meter: "Enable Consumption Meter",
                measurement_type: "Metered Circuit",
                meter_type_desc: "Does the circuit passing through the consumption CTs include load with solar production or load only?",
                meter_type_desc_singular: "Does the circuit passing through the consumption CT include load with solar production or load only?",
                meter_type_warning: "Be sure that the selections above are correct.",
            },
            current: "Current",
            current_ct: {
                current_ct_settings: "CT Current Settings",
                custom_cts_installed: "Custom %{meter_type} CTs Installed",
                primary: "Primary",
                remove_desc: "Tap OK to confirm that you are using standard Enphase %{meter_type} CTs.",
                remove_settings: "Remove Custom CT Settings?",
                secondary: "Secondary",
                turns: "Turns",
            },
            descriptors: { lifetime: "Lifetime", lifetime_lag: "Lagging (Lifetime)", lifetime_lead: "Leading (Lifetime)", today: "Today", today_lag: "Lagging (Today)", today_lead: "Leading (Today)" },
            enable_consumption_meter: "Enable Consumption Meter",
            enable_consumption_modal: {
                description: "Once you enable this meter, it cannot be disabled and the type cannot be changed.",
                description_mode_three: "Once you enable this meter, you cannot disable it, change the type, or decrease the number of phases.",
                description_mode_three_post_enable: "Once you do this, you will not be able to decrease the number of phases.",
                note_three: "<strong>Note: the number of phases will also be increased on the production meter.</strong>",
                note_three_post_enable: "<strong>Note: the number of phases will also be increased on the production meter.</strong>",
                title: 'Enable Meter with "%{type}" Metering?',
                title_mode_three: "Enable Meter with Metered Circuit: %{type} and Phases Metered: %{phCount}?",
                title_mode_three_post_enable: "Update Phases Metered to %{phCount}?",
            },
            enable_meter: "Enable Consumption Meter",
            enable_modal: { description: "Once you enable this meter, it cannot be disabled and the type cannot be changed.", title: "Enable Meter with %{type} Metering?" },
            enable_production_meter: "Enable Production Meter",
            enable_production_modal: {
                description: "Once you enable this meter, it cannot be disabled.",
                description_mode_three: "Once you enable this meter, you cannot disable it or decrease the number of phases.",
                description_mode_three_post_enable: "Once you do this, you will not be able to decrease the number of phases.",
                note_three: "<strong>Note: the number of phases will also be increased on the consumption meter.</strong>",
                note_three_post_enable: "<strong>Note: the number of phases will also be increased on the consumption meter.</strong>",
                title: "Enable Meter?",
                title_mode_three: "Enable Meter with Phases Metered: %{phCount}?",
                title_mode_three_post_enable: "Update Phases Metered to %{phCount}?",
            },
            enable_production_prompt: "The production meter must be enabled before these readings can be displayed.",
            freq_analysis: { btn_change_data_type: "Toggle Data", plc_activity: "Activity", plc_power_spectrum: "Power Spectrum", power_line_analy: "Power Line Communication Analysis" },
            id: "EID",
            internal_meters: "Internal Meters",
            latest_reading: "Latest Reading",
            lifetime_energy: "Lifetime",
            load_contains_storage_message: "Load readings include storage activity.",
            measurement_type: "Type",
            meter_change_warning: "You cannot change them once the meter is enabled.",
            meter_mode: { single: "Single-Phase (L-N)", split: "Single-Phase (L-L)", three: "Multi-Phase" },
            meter_readings: "Readings",
            meter_state: { disabled: "Disabled", enabled: "Enabled" },
            meter_status: {
                "check-wiring": "Check Wiring",
                meter_setup: "Set up metering now",
                meters_not_enabled: "Meters Not Enabled",
                normal: "Normal",
                "not-metering": "Meter Not Enabled",
                status_flags: {
                    "negative-production": "Production readings are negative. Check CT orientation and leads, compared with voltage connections.",
                    "negative-total-consumption": "Consumption readings are negative. Check CT orientation and leads, compared with voltage connections.",
                    "power-on-unused-phase": "Power detected on an unused phase. Check CT lead connections, compared with voltage connections.",
                    "production-imbalance": "Production not balanced between phases. Check CT lead connections and voltage connections.",
                },
            },
            meter_type: { "net-consumption": "Net", "total-consumption": "Total" },
            meter_type_desc: "If the consumption CTs are on a circuit that solar production flows through, leave type set to <b>Net</b>. If not, change type to <b>Total</b>.",
            meter_type_verbose: { "net-consumption": "Load with solar production", "total-consumption": "Load only" },
            meter_type_warning: "Be sure to set the meter type correctly. You cannot change them once the meter is enabled.",
            mode: "Mode",
            multi_phase_options: { mphase_0: "Not Selected", mphase_1: "L1(A)", mphase_2: "L1(A) + L2(B)", mphase_3: "L1(A) + L2(B) + L3(C)" },
            multi_phase_warning: {
                consumption: {
                    post_continue: "The meter is not yet enabled. Verify the readings, then tap <strong>Enable Consumption Meter</strong> at the bottom of the screen.",
                    pre_continue: "The meter is not yet enabled. Select the Phases Metered and Metered Circuit, then tap <strong>View Readings</strong>.",
                    pre_continue_one: "The meter is not yet enabled. Select the Metered Circuit, then tap <strong>View Readings</strong>.",
                },
                production: {
                    post_continue: "The meter is not yet enabled. Verify the readings, then tap <strong>Enable Production Meter</strong> at the bottom of the screen.",
                    pre_continue: "The meter is not yet enabled. Select the Phases Metered, then tap <strong>View Readings</strong>.",
                },
            },
            net_consumption_desc: "These readings reflect the difference between the total home load and solar production. They should approximately match the home's utility meter readings.",
            net_consumption_title: "Net Consumption",
            no_consumption: "No consumption meter configured for this Envoy.",
            no_meters: "No meters detected.",
            no_production: "No production meter configured for this Envoy.",
            phase_count: "Phases Metered",
            phase_count_desc: "Select which of the meter phases you have wired.",
            phase_labels: { phase_1: "L1(A)", phase_2: "L2(B)", phase_3: "L3(C)" },
            pmu: {
                add_another: "Add Another",
                add_meter: "Add Power Meter",
                config: {
                    add: "Add Selected Meters",
                    meters_description: "Power meters detected on this network:",
                    network_warning: "Before adding a meter, be sure that the Envoy has an Ethernet connection with a static IP address. This should be configured both on the router and on the Envoy.",
                    no_meters_description:
                        "No power meters detected<div class='alert alert-info'><b>Note:</b> It may take up to an hour for power meters to be detected. To facilitate detection, make sure that the power meter is on the same local subnet as the Envoy.</div>",
                    remove: "Remove Power Meter",
                    title: "Power Meter Configuration",
                },
                labels: { fw_version: "Firmware Version", ip: "IP Address", mac_address: "Mac Address", manufacturer: "Manufacturer", part_number: "Part Number", production: "Production", serial_number: "Serial Number", status: "Status" },
                phase_coupler: "A phase coupler is required for microinverters installed on L2 or L3 to communicate with the Envoy.",
            },
            power_exporting: "(Exporting to Grid)",
            power_factor: "Power Factor",
            power_importing: "(Importing from Grid)",
            production: "Production Meter",
            reactive_energy: "Reactive Energy",
            reactive_power: "Reactive Power",
            single_phase_warning: {
                consumption: {
                    post_continue: "The meter is not yet enabled. Verify the readings, then tap <strong>Enable Consumption Meter</strong> at the bottom of the screen.",
                    pre_continue: "The meter is not yet enabled. Select the Metered Circuit, then tap <strong>View Readings</strong>.",
                },
                production: {
                    post_continue: "The meter is not yet enabled. Verify the readings, then tap <strong>Enable Production Meter</strong> at the bottom of the screen.",
                    pre_continue: "The meter is not yet enabled. Tap <strong>View Readings</strong> to view and verify the readings.",
                },
            },
            status: "Status",
            title: "Meters",
            today_energy: "Today",
            total_consumption_desc: "These readings reflect the total home load.",
            total_consumption_na: "The production meter must be enabled before these readings can be displayed.",
            total_consumption_title: "Total Consumption",
            type: { eim: "Envoy Integrated Meter", pmu: "Power Meter", rgm: "Enphase RGM" },
            unavailable: "n/a",
            update_settings: "Update",
            view_readings: "View Readings",
            wizard: {
                batt_off: { counting: { one: "Make sure the Enphase Battery circuit is switched OFF.", other: "Make sure the Enphase Battery circuits are switched OFF." } },
                battery_reminder: "<b>Remember to switch the Enphase battery circuit on.</b>",
                btn_next: "Next",
                btn_try_again: "Try Again",
                bullet_load_increase: "Did the total home load increase as you expected?",
                bullet_meters_match: "Does the home's utility meter approximately match this reading?",
                bullet_phase_select: "Is solar production flowing to the grid measured by the consumption CT?",
                bullet_pv_on: "Switch ON the PV breakers and wait for the reconnection period to complete. PV should start to produce power in 5 minutes or less, then tap <strong>Next</strong>.",
                bullet_turn_on_load: "Turn on a known load, such as a heat gun, then tap <b>Next</b>.",
                check_meters: "Check<br>Meters",
                check_title: " Check %{meter_type} Meter",
                confirm_ct_routing: "Make sure that all of the home loads are routed through the consumption CTs.",
                consumption_appears_good: "The consumption meter appears to have been configured correctly.",
                consumption_ct_direction: "Check that the arrow on the consumption CTs are pointing in the direction of energy flow toward the load center.",
                consumption_cts_installed: "Did you install consumption CTs?",
                consumption_enable_prompt: "Tap <strong>Enable Consumption Meter</strong> to complete meter setup.",
                consumption_looks_good: "Consumption readings look good!",
                consumption_neg: "Consumption readings are negative. Check the following, then tap <b>Try Again</b>.",
                consumption_not_enabled: "Consumption Meter Not Enabled",
                consumption_phase_sel_net: "Consumption CT includes solar production.",
                consumption_phase_sel_total: "Consumption CT does not include solar production.",
                ct_bw_correct: "Make sure that the blue and white wires are connected to the correct positions in the terminal block.",
                desc: "Use our step-by-step wizard to ensure that the internal meters are wired and configured correctly.",
                desc_consumption: "Use our step-by-step wizard to ensure that the consumption meter is wired and configured correctly.",
                desc_production: "Use our step-by-step wizard to ensure that the production meter is wired and configured correctly.",
                done: "Done",
                enable_button: "Enable %{meterType} Meter",
                enough_sun: "Make sure there is enough sunlight reaching the PV modules to power up the microinverters.",
                exit_check: "Are you sure you want to exit the Meter Check?",
                exit_conf: { desc: "Are you sure you want to leave the production meter setup wizard? You'll need to start over if you want to use the wizard again.", neg_button: "Go Back", title: "Exit Wizard?" },
                exit_wizard: "Exit Wizard",
                get_started: "Get Started",
                load_didnt_increase: "Total home load did not increase as expected. Check the following, then tap <b>Try Again</b>.",
                manual_prompt: "Manual Meter Setup",
                most_common: "(Most common setup)",
                negative: "NO",
                phase_select_prompt: "Select the phases metered based on how the Envoy-S is wired: ",
                positive: "YES",
                power_exporting: "Exporting",
                power_importing: "Importing",
                prod_enable_desc1: "Production readings are close to zero, as expected.",
                prod_enable_desc2: "Tap <strong>Enable Production Meter</strong> to complete meter setup.",
                prod_meter_enabled: "The production meter is enabled.",
                prod_su1_pv_on: {
                    counting: {
                        one: "Make sure the PV circuit is switched ON and are producing power (the reconnection period has completed).",
                        other: "Make sure the PV circuits are switched ON and are producing power (the reconnection period has completed).",
                    },
                },
                prod_su2_pv_off: "Switch OFF the PV breakers, then tap <b>Next</b>.",
                prod_ts_p4: {
                    desc: "Production readings are negative. Check the following, then tap Try Again.",
                    ts1: {
                        counting: {
                            one: "Make sure the PV circuit is switched ON and are producing power (the reconnection period has completed).",
                            other: "Make sure the PV circuits are switched ON and are producing power (the reconnection period has completed).",
                        },
                    },
                    ts2: { counting: { one: "Make sure the Enphase Battery circuit is switched OFF.", other: "Make sure the Enphase Battery circuits are switched OFF." } },
                    ts3: {
                        counting: {
                            one: "Check that the arrow on the production CT is pointing in the direction of energy flow toward the load center.",
                            other: "Check that the arrow on the production CTs are pointing in the direction of energy flow toward the load center.",
                        },
                    },
                    ts5: {
                        counting: {
                            one: "Make sure that the wires running through the production CT only include PV generation (and not any loads).",
                            other: "Make sure that the wires running through the production CTs only include PV generation (and not any loads).",
                        },
                    },
                    ts6: "Ensure that the CTs are clamped on the correct phases with respect to the Envoy power terminal.",
                },
                prod_ts_p5: {
                    desc: "Production readings are higher than they should be. Check the following, then tap <b>Try Again</b>.",
                    ts2: {
                        counting: {
                            one: "Make sure that the wires running through the production CT only include PV generation (and not any loads).",
                            other: "Make sure that the wires running through the production CTs only include PV generation (and not any loads). ",
                        },
                    },
                },
                production_not_enabled: "Production Meter Not Enabled",
                pv_off: { counting: { one: "Make sure the PV circuit is switched OFF.", other: "Make sure the PV circuits are switched OFF." } },
                pv_reminder: "<b>Remember to switch the PV circuit on.</b> It will take approximately 5 minutes for the microinverters to report power production.",
                readings_dont_match1: "We're not sure why the readings don't match the home's utility meter. Tap <b>Try Again</b> to change the configuration setting for the location of the consumption CTs to see if that helps.",
                readings_dont_match2: "If that doesn't help, you can exit the wizard and use the <b>Manual Meter Setup</b> option instead. We suggest you contact Enphase Support for assistance before proceeding.",
                readings_dont_match_post: "Please contact Enphase Support for assistance and inform them that you have performed the meter check but the readings still don't match the utility meter.",
                reset_timer: "Reset Timer",
                setup_title: " Set Up %{meter_type} Meter",
                start_timer: "Start Timer",
                stop_timer: "Stop Timer",
                sw_off_batt: { counting: { one: "Switch OFF the Enphase Battery circuit.", other: "Switch OFF the Enphase Battery circuits." } },
                sw_off_pv: "Switch OFF the PV breakers.",
                total_cons_not_reduced: "Turning on the PV circuit didn't reduce total consumption. Check the following, then tap <b>Try Again</b>.",
                total_load: "Total home load",
                trouble_c6_desc1: "If you've followed all of the on-screen instructions and consumption readings are still negative, ",
                trouble_c8_desc1: "If you've followed all of the on-screen instructions and total consumption is still not reduced by turning on the PV circuit, ",
                trouble_desc2: "We suggest you contact Enphase Support at <a href='tel:%{dial_num}'> %{disp_num}</a> for assistance before proceeding.",
                trouble_install_guide: "Please refer to the <strong>Envoy Metered Installation Guide</strong>",
                trouble_manual_prompt: " or you can exit the wizard and use the <strong>Manual Meter Setup</strong> option instead.",
                trouble_p0_5: {
                    desc: {
                        counting: {
                            one: "You've indicated that only %{selected_phases} is metered, but there is power on %{phaseStr}.",
                            other: "You've indicated that only %{selected_phases} are metered, but there is power on %{phaseStr}.",
                        },
                    },
                    ts1: "Check the wiring. Are the phases wired correctly?",
                    ts_no_resp: "Fix the wiring, then tap <b>Try Again</b>.",
                    ts_yes_resp: "Change the phases metered selection to match the wiring, then tap <b>Try Again</b>.",
                },
                trouble_p0_desc1: "If you've followed all of the on-screen instructions and there is still power on an unused phase, ",
                trouble_p4_desc1: "If you've followed all of the on-screen instructions and production readings are still negative, ",
                trouble_p5_desc1: "If you've followed all of the on-screen instructions and production readings are still higher than expected, ",
                trouble_p7_desc1: "If you've followed all of the on-screen instructions and the home load still does not increase as expected, ",
                trouble_prompt: "Having trouble getting past this step?",
                unable_to_see_meter: "If you are not able to access <strong>POWER</strong> readings on the utility meter or measure with a portable meter, then click <strong>Continue</strong>.",
            },
        },
        microinverters: {
            condition_clear: { description: 'This will send a command to clear the "%{condition_flag}" status on this microinverter.', title: "Clear Condition?" },
            manage_options: {
                active: "Active (%{count})",
                active_count: { counting: { one: "Active (%{count})", other: "Active (%{count})", zero: "Active (%{count})" } },
                delete_btn: "Delete",
                deleted: "Deleted (%{count})",
                deleted_count: { counting: { one: "Deleted (%{count})", other: "Deleted (%{count})", zero: "Deleted (%{count})" } },
                restore_btn: "Restore",
            },
            nav: { all: "All", manage: "Manage", status: "Status" },
            no_inverters: "There are no microinverters.",
            no_inverters_search: 'No microinverters were found matching "%{search_term}".',
            phase_labels: { "ph-a": "L1(A)", "ph-b": "L2(B)", "ph-c": "L3(C)", "ph-unk": "No phase selected", "ph-updating": "Updating...", select_one: "Select One" },
            phase_prompt_label: "Select a phase for AC Battery %{serial_num}",
            scan_close: "Close",
            scan_disabled: "Device scanning is currently unavailable due to a conflicting scan running on another Envoy.",
            scan_inhibited: "To add more microinterters to this Envoy, you must use the Installer Toolkit to provision them or contact Enphase Customer support to re-enable device scanning.",
            scan_inprogress: "Device Scan in Progress",
            scan_settings: {
                advanced_options: "More Options",
                device_total: "Device Target",
                device_total_description: "If you enter a device target, Envoy will stop scanning when its detected microinverters total reaches that number.",
                device_total_error_1: "Device total must be between %{already_detected} (the number of devices already detected) and %{device_total_max}.",
                device_total_error_2: "Device total must be greater than %{already_detected} (the number of devices already detected).",
                hours: "hours",
                less_options: "Less Options",
                minutes: "mins",
                optional: "(optional)",
                priority_duration: "Priority Duration",
                priority_duration_description: "If you enter a priority duration, Envoy will make device scanning its only activity for that period.",
                priority_duration_error: "Priority duration cannot be longer than scan duration.",
                scan_duration: "Scan Duration",
                scan_duration_error: "Scan duration must be between 1 minute and 8 hours.",
                scan_options: { min_120: "2 hours", min_15: "15 minutes", min_240: "4 hours", min_30: "30 minutes", min_480: "8 hours", min_60: "1 hour" },
                time_description: "hh:mm",
            },
            scan_start: "Start Scan",
            scan_stop: "Stop Scan",
            scan_suspended: "Device scanning is currently unavailable due to a microinverter upgrade.",
            status_options: { comm: "Comm (%{count})", comm_nocount: "Comm", power: "Power (%{count})", power_nocount: "Power", profile: "Profile (%{count})", profile_nocount: "Profile" },
        },
        monitoring: {
            connected: "Connected to Enlighten",
            high_bandwidth: "Standard",
            last_report: "Last Report:",
            low_bandwidth: "Low-Bandwidth",
            more_info: "More Info",
            no_report: "Never Reported",
            not_connected: "Not Connected to Enlighten",
            report_setting: "Report Setting",
            report_setting_cellular_desc: "This Envoy has an Enphase cellular modem and reports 15-minute interval data to Enlighten four times per day (low-bandwidth).",
            report_setting_diagnostic: "Diagnostic Mode On: %{minutes} minutes remaining",
            report_setting_enable_diagnostic: "You may enable Diagnostic Mode for two hours. While in Diagnostic Mode, the Envoy will typically report 5-minute interval data to Enlighten every 5 minutes (during daylight hours).",
            report_setting_high_desc:
                "This Envoy is set to standard reporting, which typically reports 5-minute interval data to Enlighten every 5 minutes during daylight hours. You may switch to low-bandwidth, which reports 15-minute interval data to Enlighten four times per day.",
            report_setting_low_desc:
                "This Envoy is set to low-bandwidth reporting, which reports 15-minute interval data to Enlighten four times per day. You may switch to standard reporting, which typically reports 5-minute interval data to Enlighten every 5 minutes during daylight hours.",
            report_setting_modal: {
                diagnostic_desc: "Confirm enabling Diagnostic Mode for two hours.",
                high_desc: "Confirm switch to standard reporting.",
                low_desc: "Confirm switch to low-bandwidth reporting.",
                title: "Report Setting Change",
            },
            report_setting_options: { diagnostic: "Enable Diagnostic Mode", high: "Switch to Standard Reporting", low: "Switch to Low-Bandwidth" },
            title: "Monitoring",
        },
        more: {
            about: {
                cellular_ip: "Cellular IP Address",
                cellular_mac_address: "Cellular Mac Address",
                db_size: "Database Size",
                db_size_stats: "%{db_size} (%{percent}% full)",
                ethernet_ip: "Ethernet IP Address",
                ethernet_mac_address: "Ethernet Mac Address",
                is_nonvoy: "This Envoy is programmed for configuring unmonitored systems.",
                part_number: "Part Number",
                serial_number: "Serial Number",
                sw_build_date: "Software Build Date",
                sw_version: "Software Version",
                timezone: "Current Timezone",
                title: "About This Envoy",
                wifi_ip: "Wi-Fi IP Address",
                wifi_mac_address: "Wi-Fi Mac Address",
            },
            datetime: { date: "Date", time: "Time", timezone: "Time Zone", title: "Date & Time", update_timezone: "Update Time Zone" },
            events: { event_date_line: "%{date} (Event ID %{event_id})", no_events: "There are no events.", title: "Events" },
            support_connection: {
                close: "Close Connection",
                description_close: "The secure connection to Enphase support is open.",
                description_open: "Create a secure connection so Enphase support personnel can troubleshoot this system remotely.",
                open: "Open Connection",
                title: "Connection to Enphase Support",
            },
            system: { title: "System" },
        },
        network: {
            diagnostic_tools: {
                check_connectivity: "Check Network Connectivity",
                check_network_route: "Check Network Route",
                gateway_ip: "Gateway IP",
                ip_address: "IP Address",
                mac_address: "Mac Address",
                netmask: "Netmask",
                network_connectivity: "Network Connectivity Check",
                network_connectivity_desc: "Run a collection of basic network diagnostic checks on the Envoy.",
                network_route: "Network Route Check",
                network_route_desc: "See the Envoy's path to the Internet for all available network interfaces.",
                ping: "Ping",
                ping_desc: "Enter an IP address or URL to test the Envoy's connectivity to your router or other network host.",
                ping_ip: "Ping Address",
                primary_dns: "Primary DNS Server",
                results_title: "Results",
                secondary_dns: "Secondary DNS Server",
                timestamp: "Last Checked",
                title: "Diagnostic Tools",
            },
            network_configuration: { active_network: "Active", title: "Network Configuration", types: { cellular: "Cellular", ethernet: "Ethernet", none: "None", wifi: "Wi-Fi" } },
            network_connectivity_check: {
                connectivity_enlighten: "Connectivity to Enlighten",
                connectivity_enphase: "Connectivity to Enphase",
                enlighten_dns_lookup: "Enlighten DNS Lookup",
                enphase_dns_lookup: "Enphase DNS Lookup",
                gateway_ping: "Gateway Ping",
                google_dns_lookup: "Google DNS Lookup",
                google_ping: "Google Ping",
                primary_dns_ping: "Primary DNS Ping",
                primary_interface: "Network Tested",
                result: { fail: "Failed", pass: "Good" },
                secondary_dns_ping: "Secondary DNS Ping",
                timestamp: "Last Checked",
                title: "Results",
            },
            network_route_check: { destination: "Destination", flags: "Flags", gateway: "Gateway", genmask: "Genmask", metric: "Metric", network: "Network", ref: "Ref", results_title: "Results", timestamp: "Last Checked", use: "Use" },
            title: "Network",
        },
        not_available: "Not Available",
        nsr: {
            line_status_heading: "Lines Connected:",
            line_status_help_text:
                "<ul><li>At least one of the Q-Relay lines is not connected.</li><li>Check that the Q-Relay is installed wired correctly.</li><li>Push the test button to retry.</li><li>If this is intentional then this can be ignored.</li></ul>",
            line_status_help_title: "Q-Relay Line Connection Help",
            lines: "Line %{num}:",
            reason_strings: "unknown reason;Hardware error;Button press;Force command from Envoy;AC line 1 voltage error;AC line 2 voltage error;AC line 3 voltage error;AC line 1 frequency error;Grid DC error;AC line 1 voltage low;AC line 1 voltage high;AC line 1 frequency low;AC line 1 frequency high;AC line 2 voltage low;AC line 2 voltage high;AC line 3 voltage low;AC line 3 voltage high;Grid DC low;Grid DC high;Rocof;AC Average line 1;AC average line 2;AC average line 3".split(
                ";"
            ),
            relay_heading: "Relay:",
        },
        nsrs: {
            manage_options: {
                active: "Active (%{count})",
                active_count: { counting: { one: "Active (%{count})", other: "Active (%{count})", zero: "Active (%{count})" } },
                deleted: "Deleted (%{count})",
                deleted_count: { counting: { one: "Deleted (%{count})", other: "Deleted (%{count})", zero: "Deleted (%{count})" } },
            },
            nav: { all: "All", manage: "Manage", status: "Status" },
            no_inverters: "There are no Q Relays",
            no_inverters_search: 'No Q Relays were found matching "%{search_term}".',
            status_options: { comm_nocount: "Comm", power_nocount: "Operating", profile_nocount: "Config" },
            title: "Relays Q",
        },
        overview: {
            ac_batteries: {
                communicating: "Communicating",
                default_profile_set: "Factory-Installed Grid Profile",
                detected: "Detected",
                factory_installed: "Factory-Installed",
                factory_installed_config: "Factory-Installed Configurations",
                not_set: "Not Set",
                producing_power: "Operating",
                profile_set: "Configured",
                total: "AC Batteries",
            },
            ac_batteries_counts: {
                communicating: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Communicating</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                    },
                },
                detected: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Detected</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                    },
                },
                producing_power: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Operating</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Operating</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Operating</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Operating</span>",
                    },
                },
                profile_set: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Configured</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Configured</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Configured</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Configured</span>",
                    },
                },
                total: {
                    counting: {
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>AC Battery</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>AC Batteries</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>AC Batteries</span>",
                    },
                },
            },
            ac_battery_state: {
                charging: "Charging",
                discharging: "Discharging",
                full: "Full",
                idle: "Idle",
                soc_full: "%{operating_state} (State of Charge %{percent}%)",
                soc_percent: "(State of Charge %{percent}%)",
                soc_state: "%{operating_state}",
            },
            alerts: "Alerts",
            consumption: "Consumption Meter",
            consumption_meter_label: "Consumption",
            current_consumption: "Current Power Consumption",
            current_production: "Current Power Production",
            devices: { detected: "Detected" },
            encharge_batteries: {
                communicating: "Communicating",
                default_profile_set: "Factory-Installed Grid Profile",
                detected: "Detected",
                factory_installed: "Factory-Installed",
                factory_installed_config: "Factory-Installed Configurations",
                not_set: "Not Set",
                producing_power: "Operating",
                profile_set: "Configured",
                total: "AC Batteries",
            },
            enpowers: { communicating: "Communicating", default_profile_set: "Factory-Installed Grid Profile", detected: "Detected", profile_set: "Profile Set", total: "Enpower Devices" },
            enpowers_summary: { connected: { false: "Not Connected to Enpower", true: "Connected to Enpower" }, grid_status: { false: "OFF", title: "Grid Status", true: "ON" }, title: "Enpower" },
            includes_storage_label: "(includes storage activity)",
            inverter_production: "Microinverter Production",
            inverters_update_status: { "in-progress": "Microinverter upgrade in progress. This typically takes 15 to 30 minutes to complete." },
            ip_address: "IP Address",
            latest_power: "Latest Power",
            lifetime: "Lifetime",
            lifetime_energy: "Lifetime Energy",
            meter_production: "Production Meter",
            metering: "Metering",
            microinverter_counts: {
                communicating: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Communicating</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Communicating</span>",
                    },
                },
                detected: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Detected</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Detected</span>",
                    },
                },
                producing_power: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Producing Power</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Producing Power</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Producing Power</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Producing Power</span>",
                    },
                },
                profile_set: {
                    counting: {
                        none: "<span class='value initial'></span> <span class='descriptor'>Profile Set</span>",
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Profile Set</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Profile Set</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Profile Set</span>",
                    },
                },
                total: {
                    counting: {
                        one: "<span class='value'>%{count}</span> <span class='descriptor'>Microinverter</span>",
                        other: "<span class='value'>%{count}</span> <span class='descriptor'>Microinverters</span>",
                        zero: "<span class='value'>%{count}</span> <span class='descriptor'>Microinverters</span>",
                    },
                },
            },
            microinverters: { communicating: "Communicating", default_profile_set: "Factory-Installed Grid Profile", detected: "Detected", producing_power: "Producing Power", profile_set: "Profile Set", total: "Microinverters" },
            net_power: "Net Power",
            new_microinverter_counts: {
                communicating: {
                    counting_acb: { one: "Communicating", other: "Communicating", zero: "Communicating" },
                    counting_encharge: { one: "Communicating", other: "Communicating", zero: "Communicating" },
                    counting_microinverters: { one: "Communicating", other: "Communicating", zero: "Communicating" },
                    counting_nsr: { one: "Communicating", other: "Communicating", zero: "Communicating" },
                },
                detected: {
                    counting_acb: { one: "Detected", other: "Detected", zero: "Detected" },
                    counting_encharge: { one: "Detected", other: "Detected", zero: "Detected" },
                    counting_microinverters: { one: "Detected", other: "Detected", zero: "Detected" },
                    counting_nsr: { one: "Detected", other: "Detected", zero: "Detected" },
                },
                producing_power: {
                    counting_acb: { one: "Operating", other: "Operating", zero: "Operating" },
                    counting_encharge: { one: "Operating", other: "Operating", zero: "Operating" },
                    counting_microinverters: { one: "Producing Power", other: "Producing Power", zero: "Producing Power" },
                    counting_nsr: { one: "Operating", other: "Operating", zero: "Operating" },
                },
                profile_set: {
                    counting_acb: { one: "Configured", other: "Configured", zero: "Configured" },
                    counting_encharge: { one: "Configured", other: "Configured", zero: "Configured" },
                    counting_microinverters: { one: "Profile Set", other: "Profile Set", zero: "Profile Set" },
                    counting_nsr: { one: "Configured", other: "Configured", zero: "Configured" },
                },
                total: {
                    counting_acb: { one: "AC Battery", other: "AC Batteries", zero: "AC Batteries" },
                    counting_encharge: { one: "Encharge Battery", other: "Encharge Batteries", zero: "Encharge Batteries" },
                    counting_microinverters: { one: "Microinverter", other: "Microinverters", zero: "Microinverters" },
                    counting_nsr: { one: "Q Relay", other: "Q Relays", zero: "Q Relays" },
                },
            },
            nsr: {
                detected_total_count: "%{detected_count} of %{total_count}",
                profile_label: "Profile",
                profile_not_set: "Not Configured",
                profile_set: "Configured",
                relay_state_closed: "Closed",
                relay_state_label: "State",
                relay_state_open: "Open",
                section_title: "Q Relay",
            },
            power_exporting: "Exporting to Grid",
            power_importing: "Importing from Grid",
            production: "Production",
            production_meter_label: "Production",
            profile: "Profile",
            scan_modal: {
                description: "No microinverters have been detected. Do you want to start a device scan?",
                description_battery: "No batteries have been detected. Do you want to start a device scan?",
                description_both: "No microinverters or batteries have been detected. Do you want to start a device scan?",
                description_nsr: "No Q-Relays have been detected. Do you want to start a device scan?",
                scan_timeout_description:
                    "<p>Only %{detected_count} of %{target_count} microinverters have been detected. Do you want to restart the device scan to discover the remaining microinverter(s) or <a href='#' class='open-target-count'>change the number of microinverters expected</a>?</p>",
                scan_timeout_description_battery: "<p>Only %{detected_count} of %{target_count} batteries have been detected.",
                scan_timeout_description_battery_second: {
                    one: "Do you want to restart the device scan to discover the remaining battery or <a href='#' class='open-target-count'>change the number of batteries expected</a>?</p>",
                    other: "Do you want to restart the device scan to discover the remaining batteries or <a href='#' class='open-target-count'>change the number of batteries expected</a>?</p>",
                },
                scan_timeout_description_both:
                    "<p>Only %{detected_count_micro} of %{target_count_micro} microinverters and %{detected_count_battery} of %{target_count_battery} batteries have been detected. Do you want to restart the device scan to discover the remaining devices or <a href='#' class='open-target-count'>change the number of devices expected</a>?</p>",
                scan_timeout_description_micro: "<p>Only %{detected_count} of %{target_count} microinverters have been detected.",
                scan_timeout_description_micro_second: {
                    one: "Do you want to restart the device scan to discover the remaining microinverter or <a href='#' class='open-target-count'>change the number of microinverters expected</a>?</p>",
                    other: "Do you want to restart the device scan to discover the remaining microinverters or <a href='#' class='open-target-count'>change the number of microinverters expected</a>?</p>",
                },
                scan_timeout_title: "Restart Device Scan?",
                title: "Start Device Scan?",
            },
            scan_state: { active: "Scan Active", inactive: "Scan Inactive", scan_inhibited: "Scan Inhibited" },
            set_expected: { error: "Value must be a number between 1 and 600.", label: "Enter the number of microinverters that you expect to report to this Envoy.", prompt: "# Microinverters" },
            set_expected_acb: { error: "Value must be a number between 0 and 39.", label: "Enter the number of AC Batteries that you expect to report to this Envoy.", prompt: "# AC Batteries" },
            set_expected_nsr: { error: "Value must be a number between 0 and 3.", label: "Enter the number of Q Relays that you expect to report to this Envoy.", prompt: "# Q Relays" },
            software_version: "Software Version",
            stat_title: "Power & Energy",
            storage: "Storage",
            tariff_rate_structure: "Tariff/Rate Structure",
        },
        pending: "(pending...)",
        power: {
            charging: "Charging",
            description: "Microinverters will produce power as long as there is sufficient sunlight and the utility grid is within allowable voltage and frequency ranges (as specified by local regulation).",
            discharging: "Discharging",
            idle: "Idle",
            last_report: "Last Report:",
            not_operating: "Not Operating",
            not_producing: "Not Producing",
            operating: "Operating",
            producing: "Producing Power",
            title: "Microinverters Producing Power",
        },
        profiles: {
            ac_batteries: {
                configuration_label: "Configuration",
                false: "No",
                no_profile_description: "You must provide the following information to configure the batteries before they will begin to operate.",
                no_profile_warning: "The grid profile you select here will also be applied to the Enpower, Microinverters, and Encharges installed with this system.",
                profile_complete: "Configuration Complete",
                profile_incomplete: "Configuration Incomplete",
                profile_propagating: "Configuring Batteries",
                true: "Yes",
            },
            apply: "Apply Grid Profile",
            config_batteries: "Configure Batteries",
            country_label: "Country Regulatory Specification",
            encharge_batteries: {
                configuration_label: "Configuration",
                no_profile_description: "You must provide the following information to configure the batteries before they will begin to operate.",
                no_profile_warning: "The grid profile you select here will also be applied to the Enpower, Microinverters, and AC Batteries installed with this system.",
                profile_complete: "Configuration Complete",
                profile_incomplete: "Configuration Incomplete",
                profile_propagating: "Configuring Batteries",
            },
            enpowers: {
                no_profile_description: "You must provide the following information to configure the enpower before it will begin to operate.",
                no_profile_warning: "The grid profile you select here will also be applied to the Microinverters, AC Batteries and Encharges installed with this system.",
                profile_complete: "Configuration Complete",
                profile_incomplete: "Configuration Incomplete",
                profile_propagating: "Configuring Enpower",
            },
            eu_no_profile_description: "You must select a location-specific grid profile before the microinverters will begin producing power.",
            eu_no_profile_label: "No Profile",
            eu_no_profile_vogel_description: "You must select a location-specific grid profile.",
            microinverters: {
                configuration_label: "Configuration",
                no_profile_warning: "The grid profile you select here will also be applied to the Enpower, AC Batteries and Encharges installed with this system.",
                profile_complete: "Propagation Complete",
                profile_incomplete: "Propagation Incomplete",
                profile_propagating: "Propagating Profile",
            },
            na_no_profile_description: "The microinverters are using the factory-installed grid profile settings. You can select a location-specific grid profile below.",
            na_no_profile_label: "Factory Installed Settings",
            no_profile_warning: "The grid profile you select here will also be applied to the Enpower, Microinverters, AC Batteries and Encharges installed with this system.",
            no_profiles: "There are no profiles available. You must either connect this Envoy to the Internet and select via Enlighten, or use Installer Toolkit to download a profile package and upload to this Envoy.",
            no_profiles_info:
                "If this system requires a location-specific grid profile, you must either connect this Envoy to the Internet and select via Enlighten, or use Installer Toolkit to download a profile package and upload to this Envoy.",
            nsrs: {
                configuration_label: "Configuration",
                no_profile_warning: "The grid profile you select here will also be applied to the Enpower, Microinverters, AC Batteries and Encharges installed with this system.",
                profile_complete: "Propagation Complete",
                profile_incomplete: "Propagation Incomplete",
                profile_propagating: "Propagating Profile",
            },
            profile_complete: "Propagation Complete",
            profile_incomplete: "Propagation Incomplete",
            profile_label: "Grid Profile",
            profile_propagating: "Propagating Profile",
            title: "Grid Profile",
            tpm_state: { 0: "Pending", 1: "Propagating", 2: "Profile Set", 3: "Unsettable", 4: "Failed", 5: "Upgrading", 6: "ALT-V/F" },
        },
        public_nav: {
            change_password: "Change Password",
            copyright_html: "&copy;2008-%{current_year} Enphase Energy Inc. All rights reserved.",
            enphase: "Enphase Energy",
            installer_login: "Installer Login",
            language: "Language",
            privacy: "Privacy",
            settings: "Settings",
            terms: "Terms",
        },
        select2: {
            format_matches: { counting: { one: "One result is available, press enter to select it.", other: "%{count} results are available, use up and down arrow keys to navigate." } },
            input_too_long: { counting: { one: "Please delete %{count} character", other: "Please delete %{count} characters" } },
            input_too_short: "Please enter %{count} or more characters",
            loading_more: "Loading more results...",
            no_matches: "No matches found for %{term}",
            no_results: "No matches found",
            searching: "Searching...",
            selection_too_big: { counting: { one: "You can only select %{count} item.", other: "You can only select %{count} items." } },
        },
        serial_number: "Serial Number",
        system: {
            power_control: {
                disabled_desc: "Power Production Disabled",
                enabled_desc: "Power Production Enabled",
                modal: {
                    desc_set_off: "This will <strong>disable</strong> system power production.",
                    desc_set_on: "This will <strong>enable</strong> system power production.",
                    title: "System Power Control",
                    verify: "Are you sure this is what you want?",
                },
            },
        },
        tariff: {
            add_peak: "Add Peak %{num}",
            add_tier: "Add Tier %{num}",
            base_rate_label: "Base Rate",
            baseline: "Baseline",
            charge_at_night: "Charge batteries from the grid at night",
            chg_at_night_desc: "Enable this option to set the batteries to charge from the grid during nighttime.",
            config_details: "Configuration Details",
            day_names: ["Weekday", "Weekend"],
            greater_than: "Greater than",
            hour_connector: "to",
            month_connector: "through",
            not_set: "Not Set",
            off_peak_label: "Off-Peak",
            peak_hours_label: "Peak %{num} Hours",
            peak_label: "Peak %{num}",
            peak_rate_label: "Peak %{num} Rate",
            peak_start_time: "Peak Start Time:",
            per_day: "per day",
            per_month: "per month",
            percent_of_baseline: "% of Baseline",
            remove: "Remove",
            seasonal_rate_desc: "Enable this option if rate differs between seasons.",
            seasonal_select_label: "Rate differs between seasons",
            select_type: "Select Type",
            single_rate: "Single Rate",
            summer_rate_label: "Summer",
            tariff_rate_title: "Tariff/Rate Structure",
            tariff_type_warning: "For a Time of Use tariff/rate structure you must provide at least one peak rate. If there is no peak rate, select Single Rate instead of Time of Use.",
            tier: "Tier %{num}",
            tiered: "Tiered",
            time_of_use: "Time of Use",
            unit_label: "kWh",
            up_to: "Up to",
            weekday_add_peak: "Add Weekday Peak %{num}",
            weekday_base_rate_label: "Weekday Base Rate",
            weekday_off_peak_rate_label: "Weekday Off-Peak Rate",
            weekday_peak_hours_label: "Weekday Peak %{num} Hours",
            weekday_peak_rate_label: "Weekday Peak %{num} Rate",
            weekdays_label: "Weekday",
            weekdays_rate_label: "Weekday",
            weekend_add_peak: "Add Weekend Peak %{num}",
            weekend_base_rate_label: "Weekend Base Rate",
            weekend_label: "Weekend",
            weekend_off_peak_rate_label: "Weekend Off-Peak Rate",
            weekend_peak_hours_label: "Weekend Peak %{num} Hours",
            weekend_peak_rate_label: "Weekend Peak %{num} Rate",
            weekend_rate_desc: "Enable this option if rate differs between weekdays and weekends.",
            weekend_select_label: "Rate differs between weekday and weekend",
            winter_months_desc: "To set Winter, select Summer months above.",
            winter_rate_label: "Winter",
            zero_not_allowed: "Zero is not a valid value",
        },
        wifi: {
            ap_mode_config: {
                confirm_switch_modal: { description: "This may interrupt communications with the Envoy and require you to re-connect.", title_false: "Disable AP Mode?", title_true: "Enable AP Mode?" },
                description_disabled: "Enable AP mode to allow this Envoy to operate as a wireless Access Point (AP). This will allow wireless devices in the vicinity to connect to the Envoy.",
                description_enabled: "This Envoy is currently operating as a wireless Access Point (AP).",
                disable: "Disable AP Mode",
                enable: "Enable AP Mode",
                time_remaining: { one: "Time Remaining: %{count} hour %{minutes} mins", other: "Time Remaining: %{count} hours %{minutes} mins", zero: "Time Remaining: %{count} hours %{minutes} mins" },
                title_disabled: "AP Mode Disabled",
                title_enabled: "AP Mode Enabled",
            },
            available_networks: "Available Networks",
            connect: {
                confirm_connect: "Confirm Network",
                connect_to_site: "Connect to %{site_name}?",
                connect_warning: "Note: This may interrupt communications with the Envoy and require you to re-connect.",
                connection_failure_explanation: "Unable to connect to network %{site_name}.",
                wait_join: "Please wait while the Envoy connects to %{site_name}...",
            },
            connect_incomplete: { description: "It's taking longer than expected to confirm a connection to %{site_name}. If the network connection was not successful, please try again.", title: "Sorry..." },
            connect_success: {
                description:
                    "<p>The Envoy has successfully connected to %{site_name}.</p><p><a href='#' class='open-overview'>Return to Overview.</a></p><p>Note: It may take up to a minute before the Enlighten connection status is updated.</p>",
                title: "Successfully Connected",
            },
            connection_lost: "This device has lost its connection to the Envoy.",
            connection_status: { attempting_to_connect: "Attempting to connect...", connecting: "Connecting...", connection_lost: "Connection Lost", failed: "Connection Failed", not_connected: "Not connected" },
            country_config: {
                description: "Select your country (ISO 3166-1 alpha-2 code) to optimize Wi-Fi signal strength in accordance with your national regulatory agency.",
                optional: "(optional)",
                select_prompt: "Select Country",
                title: "Country",
                update: "Update Country",
            },
            current_connection: "Connected to <span class='network_name'>%{network_name}</span>",
            enter_password: "Enter the password for %{site_name}.",
            forget: {
                forget_network_header: 'Forget Wi-Fi Network "%{network_name}"?',
                forget_warning: "Note: This may interrupt communications with the Envoy and require you to re-connect.",
                ok_to_forget: "This Envoy will no longer use this network to connect to Enlighten.",
                wait_forget: "Please wait while the Envoy forgets the network...",
            },
            forget_failed: { description: "Attempt to forget the Wi-Fi Network failed. If this continues, contact customer support.", title: "Sorry..." },
            forget_incomplete: {
                description:
                    "It's taking longer than expected to confirm forget Wi-Fi Network. Due to this, it is unlikely that your Envoy can still communicate with this application. Please check the network settings on your device and then reconnect to the Envoy.",
                title: "Sorry...",
            },
            gateway_ip: "Gateway IP: ",
            ip_address: "IP Address: ",
            join_another_network: { button: "Select Another Network", title: "Select Another Network" },
            join_network: { button: "View Networks", title: "Select Network" },
            network_changed_explanation:
                "The network connection on your device has changed. Due to this it is unlikely that your Envoy can still communicate with this application. Please check the network settings on your device and then reconnect to the Envoy.",
            network_changed_title: "Network Connection Changed",
            no_networks_found: "No networks found",
            not_configured_prompt: "Select a wireless network for this Envoy to use to connect to Enlighten.",
            other_network: {
                confirm_switch_modal: { description: "This may interrupt communications with the Envoy and require you to re-connect.", title: "Connect to Other Network?" },
                connect: "Connect",
                description: "Connect to an access point which is not configured to broadcast its ESSID.",
                name: "Name (ESSID)",
                password: "Password",
                security: "Security",
                security_mode: { None: "None", WEP: "WEP", "WPA-PSK": "WPA Personal", "WPA2-PSK": "WPA2 Personal" },
                title: "Connect Other Network",
                wpa_algorithm: "WPA Algorithm",
                wpa_algorithm_type: { CCMP: "CCMP", None: "None", TKIP: "TKIP", "TKIP+CCMP": "TKIP + CCMP" },
            },
            page_title: "Wi-Fi Configuration",
            password_required: "Password Required",
            please_wait: "Please Wait",
            title: "Wi-Fi Network",
            unsupported_site: "Unsupported Network",
            unsupported_site_explanation: "This network uses a security method that is not supported by the Envoy.",
            wifi: "Wi-Fi",
            wifi_hardware_missing: "Wi-Fi hardware not found",
            wifi_waiting_note: "This process may take up to 3 minutes, and you may need to reconnect to the Envoy once it completes.",
        },
        wireless_connection: { connected: "Connected", last_report: "Last Report:", not_connected: "Not Connected", signal_strength: "Signal Strength:", subghz: "Sub GHz", title: "Wireless Connection Links", zigbee_2_4: "2.4 GHz" },
    },
    lwui: {
        admin: {
            cross_domain_traffic: { status_msgs: { cross_domain_traffic: "Cross domain traffic reported", no_cross_domain_traffic: "No cross domain traffic reported", updated: "Updated" } },
            network_connectivity: {
                error_msgs: {
                    bad_device_ip: "Bad device IP address and/or network mask.",
                    bad_gateway_address: "Bad gateway IP address.",
                    gateway_subnet: "Gateway IP address not within subnet %{subnet}",
                    invalid_primary_dns: "Primary DNS address is not a valid IP address.",
                    invalid_secondary_dns: "Secondary DNS address is not a valid IP address.",
                },
            },
            security_admin: {
                status_msg: {
                    new_confirm_password_mismatch: "New and confirm password do not match",
                    old_password_mismatch: "Old password not correct",
                    password_file_missing: "Administrator password file(s) missing",
                    password_update_failure: "Password update failed",
                    password_update_failure_error: "Error: Password change failed",
                    password_update_successful: "Password update successful",
                },
            },
            wireless_connectivity: {
                advanced_settings: {
                    button_apply: "Apply",
                    regulatory_domain: "Country Code (ISO 3166-1 Alpha-2)",
                    regulatory_legend: "Select your country from this list.  This defines the permissible radio frequencies and transmission strength in accordance with your national regulatory agency.",
                },
                ap_mode: { active: "active", inactive: "inactive", name: "AP name:", start: "Start AP Mode", status: "AP Mode status:", stop: "Stop AP Mode", timeout: "minutes to AP timeout:" },
                busy_joining: "Attempting to Connect to the Network",
                busy_scanning: "Scanning for Wi-Fi Networks",
                busy_testing: "Testing Connection",
                connection_test: { failed: "Connection test failed.  Please check your settings.", successful: "Connection test was successful.  You may join the network." },
                current_settings: {
                    dhcp_waiting: "Requesting DHCP address from Wi-Fi Network",
                    forget_network: "Forget this Network",
                    label_gateway_ip: "Gateway IP",
                    link_status: "Status",
                    no_config: "No Wi-Fi connection is configured",
                    no_device: "No compatible Wi-Fi device detected",
                    status_connected: "Connected",
                    status_connecting: "Establishing connection",
                    status_stopped: "Wi-Fi stopped",
                    unavailable: "unavailable",
                    verified_config: "Verified Wi-Fi Network",
                },
                device_information: {
                    device: "Device",
                    driver_name: "Driver Name",
                    hw_version: "Hardware Version",
                    mac_address: "MAC Address",
                    manufacturer: "Manufacturer",
                    model: "Model",
                    usb_slot_num: "USB Slot #",
                    usb_spec_version: "USB Specification Version",
                    vendor: "Vendor",
                },
                forget_msg: "This action will delete the current wireless configuration and drop the connection.  If you are connected wirelessly, your connection to the Envoy will be lost.",
                legend_advanced_settings: "Advanced Settings",
                legend_ap_mode: "Envoy AP Mode",
                legend_current_settings: "Current Wi-Fi Settings",
                legend_device_information: "Device Information",
                legend_manual_configuration: "Manual Configuration",
                legend_site_survey: "Available Wi-Fi Networks",
                manual_configuration: {
                    algorithm: "WPA Algorithm",
                    button_clear: "Clear Form",
                    button_connect: "Join Network",
                    button_test: "Test Connection",
                    channel: "Wireless Channel",
                    essid_length: "The ESSID must be 1 to 32 characters long",
                    info_msg: "The following settings are necessary only for connecting with an access point which is not configured to broadcast its ESSID.",
                    mhz: "MHz",
                    network_name: "Wireless Network Name (ESSID)",
                    password: "Password/PSK",
                    password_unneeded: "A password is unnecessary for an open system",
                    password_wep: "WEP keys must be either 10, 26, or 58 hexadecimal digits",
                    password_wep_chars: "WEP keys must be comprised of only numbers and the letters A-F",
                    password_wpa: "WPA/WPA2-PSK passwords must be at least 8 and no greater than 63 characters",
                    security_mode: "Wireless Security Mode",
                },
                site_survey: { button_rescan: "Re-Scan", info_msg: "Select a network from the list.", none_found: "No networks found" },
                test_msg: "The Wi-Fi connection will now be tested to confirm that the settings are valid.  The current connection to the Envoy will be lost temporarily during the connection test.",
            },
        },
        home: {
            event_tbl_col_hdr: { date: "Date", details: "Details", device: "Device", event: "Event", eventId: "Event Id" },
            warnings: {
                acb_critical_temp: "An elevated internal temperature is detected in one or more of the AC Batteries. Check the Installation and Operation Manual for instructions.",
                acb_needs_meters: "An Envoy-S with metering is required to complete system commissioning. AC Batteries requiring metering have been detected, and this Envoy-S does not have metering.",
                acdisco_active: "AC disconnect active. Envoy cannot communicate with microinverters.",
                acdisco_fail: "AC disconnect failure. Check AC disconnect relay.",
                both_meter_enabled: "Both the production and consumption meters must be enabled to complete system commissioning.",
                check_date_warn_msg:
                    "The system time is invalid.  Until this is corrected the Envoy will not be able to communicate with microinverters.  If the Envoy is not configured to use NTP, or is not able to contact the configured NTP servers, this will need to be corrected manually via the <a href='/admin/lib/date_time_display'> Date and Time Administration controls.</a>",
                cross_domain_traffic: "Communications from other Envoy(s) have been detected.",
                date_invalid: "The system time is invalid. Connect the Envoy to the Internet so that its time can be set correctly.",
                db_warn_msg: "The Envoy has not been able to send data to Enlighten, and local storage is nearly full. Connect the Envoy to the Internet to avoid data loss.",
                eim_consumption_check_wiring: "The power consumption meter is not properly connected. Please check the wiring.",
                eim_production_check_wiring: "The power production meter is not properly connected. Please check the wiring.",
                envoy_needs_meters: "An Envoy-S with metering is required to complete system commissioning. A grid profile requiring metering has been selected, and this Envoy-S does not have metering.",
                legend: "Warning",
                no_enlighten_report: "The system has never reported to Enlighten. Connect the Envoy to the Internet to establish a connection with Enlighten.",
                no_phase_assignment: "AC Batteries must be assigned to phases to complete system commissioning.",
                pcu_limit_warn_msg: "The number of microinverters detected exceeds the Envoy\u2019s Monitoring Configuration. Contact Enphase Energy Customer Support.",
                pcu_limit_warn_msg2: "The number of microinverters detected exceeds the Envoy's default Monitoring Configuration.  The Envoy requires an Internet connection to set the Monitoring Configuration.",
                pel_profile_requires_meters: "The production and consumption meters must be configured to support power export limiting.",
                phase_assoc_failed: "Phase detection failed. Check the Installation and Operation Manual for instructions.",
                pim_profile_requires_meters: "Multi-phase production and consumption metering must be enabled to support phase imbalance management and loss of phase detection.",
            },
        },
    },
    number: {
        currency: { format: { delimiter: ",", format: "%u %n", precision: 2, separator: ".", significant: !1, strip_insignificant_zeros: !1, unit: "$" } },
        format: { delimiter: ",", precision: 3, separator: ".", significant: !1, strip_insignificant_zeros: !1 },
        human: {
            decimal_units: { format: "%n %u", units: { billion: "Billion", million: "Million", quadrillion: "Quadrillion", thousand: "Thousand", trillion: "Trillion", unit: "" } },
            format: { delimiter: "", precision: 3, significant: !0, strip_insignificant_zeros: !0 },
            storage_units: { format: "%n %u", units: { byte: { one: "Byte", other: "Bytes" }, gb: "GB", kb: "KB", mb: "MB", tb: "TB" } },
        },
        percentage: { format: { delimiter: "" } },
        precision: { format: { delimiter: "" } },
    },
    scripts: { data: { verify_internet_connection_message: "Your system has never reported to Enlighten. Verify the Internet connection." } },
    time: {
        am: "AM",
        formats: {
            default: "%d/%m/%Y %I\u00a0:%M %p",
            default_date_time_no_pad: "%d/%m/%Y %-I:%M %p",
            hour_meridian: "%-H:00",
            long: "%B %d, %Y %H:%M",
            noday_nozone_datetime_secs_ui: "%d %b, %Y %-I:%M:%S %p",
            noday_nozone_datetime_ui: "%d %b, %Y %-I:%M %p",
            nozone_datetime: "%a %d %b %Y %I:%M %p",
            short: "%d %b %H:%M",
            short_date: "%d/%m/%Y",
            time_only: "%H:%M",
        },
        pm: "PM",
    },
    units: {
        amps: "A",
        bool: "Boolean",
        degrees: "degrees",
        hertz: "Hz",
        hertz_per_sec: "Hz / s",
        lagging: "Lagging",
        milliseconds: "ms",
        millivolts: "mV",
        none: "",
        percent: "%",
        percent_per_hertz: "% / Hz",
        percent_per_min: "% / min",
        seconds: "s",
        volts: "V",
    },
};
(function () {
    function b(a) {
        return function (b, c, d, e) {
            c = C(c, e, 4);
            var f = !J(b) && p.keys(b),
                g = (f || b).length,
                h = 0 < a ? 0 : g - 1;
            3 > arguments.length && ((d = b[f ? f[h] : h]), (h += a));
            for (var k = c, l = d; 0 <= h && h < g; h += a) var n = f ? f[h] : h, l = k(l, b[n], n, b);
            return l;
        };
    }
    function a(a) {
        return function (b, c, d) {
            c = r(c, d);
            d = H(b);
            for (var e = 0 < a ? 0 : d - 1; 0 <= e && e < d; e += a) if (c(b[e], e, b)) return e;
            return -1;
        };
    }
    function c(a, b, c) {
        return function (d, e, f) {
            var g = 0,
                h = H(d);
            if ("number" == typeof f) 0 < a ? (g = 0 <= f ? f : Math.max(f + h, g)) : (h = 0 <= f ? Math.min(f + 1, h) : f + h + 1);
            else if (c && f && h) return (f = c(d, e)), d[f] === e ? f : -1;
            if (e !== e) return (f = b(l.call(d, g, h), p.isNaN)), 0 <= f ? f + g : -1;
            for (f = 0 < a ? g : h - 1; 0 <= f && f < h; f += a) if (d[f] === e) return f;
            return -1;
        };
    }
    function d(a, b) {
        var c = va.length,
            d = a.constructor,
            d = (p.isFunction(d) && d.prototype) || k,
            e = "constructor";
        for (p.has(a, e) && !p.contains(b, e) && b.push(e); c--; ) (e = va[c]), e in a && a[e] !== d[e] && !p.contains(b, e) && b.push(e);
    }
    var e = this,
        g = e._,
        f = Array.prototype,
        k = Object.prototype,
        h = f.push,
        l = f.slice,
        n = k.toString,
        q = k.hasOwnProperty,
        u = Array.isArray,
        v = Object.keys,
        w = Function.prototype.bind,
        t = Object.create,
        y = function () {},
        p = function (a) {
            if (a instanceof p) return a;
            if (!(this instanceof p)) return new p(a);
            this._wrapped = a;
        };
    "undefined" !== typeof exports ? ("undefined" !== typeof module && module.exports && (exports = module.exports = p), (exports._ = p)) : (e._ = p);
    p.VERSION = "1.8.3";
    var C = function (a, b, c) {
            if (void 0 === b) return a;
            switch (null == c ? 3 : c) {
                case 1:
                    return function (c) {
                        return a.call(b, c);
                    };
                case 2:
                    return function (c, d) {
                        return a.call(b, c, d);
                    };
                case 3:
                    return function (c, d, e) {
                        return a.call(b, c, d, e);
                    };
                case 4:
                    return function (c, d, e, f) {
                        return a.call(b, c, d, e, f);
                    };
            }
            return function () {
                return a.apply(b, arguments);
            };
        },
        r = function (a, b, c) {
            return null == a ? p.identity : p.isFunction(a) ? C(a, b, c) : p.isObject(a) ? p.matcher(a) : p.property(a);
        };
    p.iteratee = function (a, b) {
        return r(a, b, Infinity);
    };
    var x = function (a, b) {
            return function (c) {
                var d = arguments.length;
                if (2 > d || null == c) return c;
                for (var e = 1; e < d; e++)
                    for (var f = arguments[e], g = a(f), h = g.length, k = 0; k < h; k++) {
                        var l = g[k];
                        (b && void 0 !== c[l]) || (c[l] = f[l]);
                    }
                return c;
            };
        },
        z = function (a) {
            if (!p.isObject(a)) return {};
            if (t) return t(a);
            y.prototype = a;
            a = new y();
            y.prototype = null;
            return a;
        },
        B = function (a) {
            return function (b) {
                return null == b ? void 0 : b[a];
            };
        },
        G = Math.pow(2, 53) - 1,
        H = B("length"),
        J = function (a) {
            a = H(a);
            return "number" == typeof a && 0 <= a && a <= G;
        };
    p.each = p.forEach = function (a, b, c) {
        b = C(b, c);
        var d;
        if (J(a)) for (c = 0, d = a.length; c < d; c++) b(a[c], c, a);
        else {
            var e = p.keys(a);
            c = 0;
            for (d = e.length; c < d; c++) b(a[e[c]], e[c], a);
        }
        return a;
    };
    p.map = p.collect = function (a, b, c) {
        b = r(b, c);
        c = !J(a) && p.keys(a);
        for (var d = (c || a).length, e = Array(d), f = 0; f < d; f++) {
            var g = c ? c[f] : f;
            e[f] = b(a[g], g, a);
        }
        return e;
    };
    p.reduce = p.foldl = p.inject = b(1);
    p.reduceRight = p.foldr = b(-1);
    p.find = p.detect = function (a, b, c) {
        b = J(a) ? p.findIndex(a, b, c) : p.findKey(a, b, c);
        if (void 0 !== b && -1 !== b) return a[b];
    };
    p.filter = p.select = function (a, b, c) {
        var d = [];
        b = r(b, c);
        p.each(a, function (a, c, e) {
            b(a, c, e) && d.push(a);
        });
        return d;
    };
    p.reject = function (a, b, c) {
        return p.filter(a, p.negate(r(b)), c);
    };
    p.every = p.all = function (a, b, c) {
        b = r(b, c);
        c = !J(a) && p.keys(a);
        for (var d = (c || a).length, e = 0; e < d; e++) {
            var f = c ? c[e] : e;
            if (!b(a[f], f, a)) return !1;
        }
        return !0;
    };
    p.some = p.any = function (a, b, c) {
        b = r(b, c);
        c = !J(a) && p.keys(a);
        for (var d = (c || a).length, e = 0; e < d; e++) {
            var f = c ? c[e] : e;
            if (b(a[f], f, a)) return !0;
        }
        return !1;
    };
    p.contains = p.includes = p.include = function (a, b, c, d) {
        J(a) || (a = p.values(a));
        if ("number" != typeof c || d) c = 0;
        return 0 <= p.indexOf(a, b, c);
    };
    p.invoke = function (a, b) {
        var c = l.call(arguments, 2),
            d = p.isFunction(b);
        return p.map(a, function (a) {
            var e = d ? b : a[b];
            return null == e ? e : e.apply(a, c);
        });
    };
    p.pluck = function (a, b) {
        return p.map(a, p.property(b));
    };
    p.where = function (a, b) {
        return p.filter(a, p.matcher(b));
    };
    p.findWhere = function (a, b) {
        return p.find(a, p.matcher(b));
    };
    p.max = function (a, b, c) {
        var d = -Infinity,
            e = -Infinity,
            f;
        if (null == b && null != a) {
            a = J(a) ? a : p.values(a);
            for (var g = 0, h = a.length; g < h; g++) (c = a[g]), c > d && (d = c);
        } else
            (b = r(b, c)),
                p.each(a, function (a, c, g) {
                    f = b(a, c, g);
                    if (f > e || (-Infinity === f && -Infinity === d)) (d = a), (e = f);
                });
        return d;
    };
    p.min = function (a, b, c) {
        var d = Infinity,
            e = Infinity,
            f;
        if (null == b && null != a) {
            a = J(a) ? a : p.values(a);
            for (var g = 0, h = a.length; g < h; g++) (c = a[g]), c < d && (d = c);
        } else
            (b = r(b, c)),
                p.each(a, function (a, c, g) {
                    f = b(a, c, g);
                    if (f < e || (Infinity === f && Infinity === d)) (d = a), (e = f);
                });
        return d;
    };
    p.shuffle = function (a) {
        a = J(a) ? a : p.values(a);
        for (var b = a.length, c = Array(b), d = 0, e; d < b; d++) (e = p.random(0, d)), e !== d && (c[d] = c[e]), (c[e] = a[d]);
        return c;
    };
    p.sample = function (a, b, c) {
        return null == b || c ? (J(a) || (a = p.values(a)), a[p.random(a.length - 1)]) : p.shuffle(a).slice(0, Math.max(0, b));
    };
    p.sortBy = function (a, b, c) {
        b = r(b, c);
        return p.pluck(
            p
                .map(a, function (a, c, d) {
                    return { value: a, index: c, criteria: b(a, c, d) };
                })
                .sort(function (a, b) {
                    var c = a.criteria,
                        d = b.criteria;
                    if (c !== d) {
                        if (c > d || void 0 === c) return 1;
                        if (c < d || void 0 === d) return -1;
                    }
                    return a.index - b.index;
                }),
            "value"
        );
    };
    var A = function (a) {
        return function (b, c, d) {
            var e = {};
            c = r(c, d);
            p.each(b, function (d, f) {
                var g = c(d, f, b);
                a(e, d, g);
            });
            return e;
        };
    };
    p.groupBy = A(function (a, b, c) {
        p.has(a, c) ? a[c].push(b) : (a[c] = [b]);
    });
    p.indexBy = A(function (a, b, c) {
        a[c] = b;
    });
    p.countBy = A(function (a, b, c) {
        p.has(a, c) ? a[c]++ : (a[c] = 1);
    });
    p.toArray = function (a) {
        return a ? (p.isArray(a) ? l.call(a) : J(a) ? p.map(a, p.identity) : p.values(a)) : [];
    };
    p.size = function (a) {
        return null == a ? 0 : J(a) ? a.length : p.keys(a).length;
    };
    p.partition = function (a, b, c) {
        b = r(b, c);
        var d = [],
            e = [];
        p.each(a, function (a, c, f) {
            (b(a, c, f) ? d : e).push(a);
        });
        return [d, e];
    };
    p.first = p.head = p.take = function (a, b, c) {
        return null == a ? void 0 : null == b || c ? a[0] : p.initial(a, a.length - b);
    };
    p.initial = function (a, b, c) {
        return l.call(a, 0, Math.max(0, a.length - (null == b || c ? 1 : b)));
    };
    p.last = function (a, b, c) {
        return null == a ? void 0 : null == b || c ? a[a.length - 1] : p.rest(a, Math.max(0, a.length - b));
    };
    p.rest = p.tail = p.drop = function (a, b, c) {
        return l.call(a, null == b || c ? 1 : b);
    };
    p.compact = function (a) {
        return p.filter(a, p.identity);
    };
    var ea = function (a, b, c, d) {
        var e = [],
            f = 0;
        d = d || 0;
        for (var g = H(a); d < g; d++) {
            var h = a[d];
            if (J(h) && (p.isArray(h) || p.isArguments(h))) {
                b || (h = ea(h, b, c));
                var k = 0,
                    l = h.length;
                for (e.length += l; k < l; ) e[f++] = h[k++];
            } else c || (e[f++] = h);
        }
        return e;
    };
    p.flatten = function (a, b) {
        return ea(a, b, !1);
    };
    p.without = function (a) {
        return p.difference(a, l.call(arguments, 1));
    };
    p.uniq = p.unique = function (a, b, c, d) {
        p.isBoolean(b) || ((d = c), (c = b), (b = !1));
        null != c && (c = r(c, d));
        d = [];
        for (var e = [], f = 0, g = H(a); f < g; f++) {
            var h = a[f],
                k = c ? c(h, f, a) : h;
            b ? ((f && e === k) || d.push(h), (e = k)) : c ? p.contains(e, k) || (e.push(k), d.push(h)) : p.contains(d, h) || d.push(h);
        }
        return d;
    };
    p.union = function () {
        return p.uniq(ea(arguments, !0, !0));
    };
    p.intersection = function (a) {
        for (var b = [], c = arguments.length, d = 0, e = H(a); d < e; d++) {
            var f = a[d];
            if (!p.contains(b, f)) {
                for (var g = 1; g < c && p.contains(arguments[g], f); g++);
                g === c && b.push(f);
            }
        }
        return b;
    };
    p.difference = function (a) {
        var b = ea(arguments, !0, !0, 1);
        return p.filter(a, function (a) {
            return !p.contains(b, a);
        });
    };
    p.zip = function () {
        return p.unzip(arguments);
    };
    p.unzip = function (a) {
        for (var b = (a && p.max(a, H).length) || 0, c = Array(b), d = 0; d < b; d++) c[d] = p.pluck(a, d);
        return c;
    };
    p.object = function (a, b) {
        for (var c = {}, d = 0, e = H(a); d < e; d++) b ? (c[a[d]] = b[d]) : (c[a[d][0]] = a[d][1]);
        return c;
    };
    p.findIndex = a(1);
    p.findLastIndex = a(-1);
    p.sortedIndex = function (a, b, c, d) {
        c = r(c, d, 1);
        b = c(b);
        d = 0;
        for (var e = H(a); d < e; ) {
            var f = Math.floor((d + e) / 2);
            c(a[f]) < b ? (d = f + 1) : (e = f);
        }
        return d;
    };
    p.indexOf = c(1, p.findIndex, p.sortedIndex);
    p.lastIndexOf = c(-1, p.findLastIndex);
    p.range = function (a, b, c) {
        null == b && ((b = a || 0), (a = 0));
        c = c || 1;
        b = Math.max(Math.ceil((b - a) / c), 0);
        for (var d = Array(b), e = 0; e < b; e++, a += c) d[e] = a;
        return d;
    };
    var ga = function (a, b, c, d, e) {
        if (!(d instanceof b)) return a.apply(c, e);
        b = z(a.prototype);
        a = a.apply(b, e);
        return p.isObject(a) ? a : b;
    };
    p.bind = function (a, b) {
        if (w && a.bind === w) return w.apply(a, l.call(arguments, 1));
        if (!p.isFunction(a)) throw new TypeError("Bind must be called on a function");
        var c = l.call(arguments, 2),
            d = function () {
                return ga(a, d, b, this, c.concat(l.call(arguments)));
            };
        return d;
    };
    p.partial = function (a) {
        var b = l.call(arguments, 1),
            c = function () {
                for (var d = 0, e = b.length, f = Array(e), g = 0; g < e; g++) f[g] = b[g] === p ? arguments[d++] : b[g];
                for (; d < arguments.length; ) f.push(arguments[d++]);
                return ga(a, c, this, this, f);
            };
        return c;
    };
    p.bindAll = function (a) {
        var b,
            c = arguments.length,
            d;
        if (1 >= c) throw Error("bindAll must be passed function names");
        for (b = 1; b < c; b++) (d = arguments[b]), (a[d] = p.bind(a[d], a));
        return a;
    };
    p.memoize = function (a, b) {
        var c = function (d) {
            var e = c.cache,
                f = "" + (b ? b.apply(this, arguments) : d);
            p.has(e, f) || (e[f] = a.apply(this, arguments));
            return e[f];
        };
        c.cache = {};
        return c;
    };
    p.delay = function (a, b) {
        var c = l.call(arguments, 2);
        return setTimeout(function () {
            return a.apply(null, c);
        }, b);
    };
    p.defer = p.partial(p.delay, p, 1);
    p.throttle = function (a, b, c) {
        var d,
            e,
            f,
            g = null,
            h = 0;
        c || (c = {});
        var k = function () {
            h = !1 === c.leading ? 0 : p.now();
            g = null;
            f = a.apply(d, e);
            g || (d = e = null);
        };
        return function () {
            var l = p.now();
            h || !1 !== c.leading || (h = l);
            var n = b - (l - h);
            d = this;
            e = arguments;
            0 >= n || n > b ? (g && (clearTimeout(g), (g = null)), (h = l), (f = a.apply(d, e)), g || (d = e = null)) : g || !1 === c.trailing || (g = setTimeout(k, n));
            return f;
        };
    };
    p.debounce = function (a, b, c) {
        var d,
            e,
            f,
            g,
            h,
            k = function () {
                var l = p.now() - g;
                l < b && 0 <= l ? (d = setTimeout(k, b - l)) : ((d = null), c || ((h = a.apply(f, e)), d || (f = e = null)));
            };
        return function () {
            f = this;
            e = arguments;
            g = p.now();
            var l = c && !d;
            d || (d = setTimeout(k, b));
            l && ((h = a.apply(f, e)), (f = e = null));
            return h;
        };
    };
    p.wrap = function (a, b) {
        return p.partial(b, a);
    };
    p.negate = function (a) {
        return function () {
            return !a.apply(this, arguments);
        };
    };
    p.compose = function () {
        var a = arguments,
            b = a.length - 1;
        return function () {
            for (var c = b, d = a[b].apply(this, arguments); c--; ) d = a[c].call(this, d);
            return d;
        };
    };
    p.after = function (a, b) {
        return function () {
            if (1 > --a) return b.apply(this, arguments);
        };
    };
    p.before = function (a, b) {
        var c;
        return function () {
            0 < --a && (c = b.apply(this, arguments));
            1 >= a && (b = null);
            return c;
        };
    };
    p.once = p.partial(p.before, 2);
    var ha = !{ toString: null }.propertyIsEnumerable("toString"),
        va = "valueOf isPrototypeOf toString propertyIsEnumerable hasOwnProperty toLocaleString".split(" ");
    p.keys = function (a) {
        if (!p.isObject(a)) return [];
        if (v) return v(a);
        var b = [],
            c;
        for (c in a) p.has(a, c) && b.push(c);
        ha && d(a, b);
        return b;
    };
    p.allKeys = function (a) {
        if (!p.isObject(a)) return [];
        var b = [],
            c;
        for (c in a) b.push(c);
        ha && d(a, b);
        return b;
    };
    p.values = function (a) {
        for (var b = p.keys(a), c = b.length, d = Array(c), e = 0; e < c; e++) d[e] = a[b[e]];
        return d;
    };
    p.mapObject = function (a, b, c) {
        b = r(b, c);
        c = p.keys(a);
        for (var d = c.length, e = {}, f, g = 0; g < d; g++) (f = c[g]), (e[f] = b(a[f], f, a));
        return e;
    };
    p.pairs = function (a) {
        for (var b = p.keys(a), c = b.length, d = Array(c), e = 0; e < c; e++) d[e] = [b[e], a[b[e]]];
        return d;
    };
    p.invert = function (a) {
        for (var b = {}, c = p.keys(a), d = 0, e = c.length; d < e; d++) b[a[c[d]]] = c[d];
        return b;
    };
    p.functions = p.methods = function (a) {
        var b = [],
            c;
        for (c in a) p.isFunction(a[c]) && b.push(c);
        return b.sort();
    };
    p.extend = x(p.allKeys);
    p.extendOwn = p.assign = x(p.keys);
    p.findKey = function (a, b, c) {
        b = r(b, c);
        c = p.keys(a);
        for (var d, e = 0, f = c.length; e < f; e++) if (((d = c[e]), b(a[d], d, a))) return d;
    };
    p.pick = function (a, b, c) {
        var d = {},
            e = a,
            f,
            g;
        if (null == e) return d;
        p.isFunction(b)
            ? ((g = p.allKeys(e)), (f = C(b, c)))
            : ((g = ea(arguments, !1, !1, 1)),
              (f = function (a, b, c) {
                  return b in c;
              }),
              (e = Object(e)));
        for (var h = 0, k = g.length; h < k; h++) {
            var l = g[h],
                n = e[l];
            f(n, l, e) && (d[l] = n);
        }
        return d;
    };
    p.omit = function (a, b, c) {
        if (p.isFunction(b)) b = p.negate(b);
        else {
            var d = p.map(ea(arguments, !1, !1, 1), String);
            b = function (a, b) {
                return !p.contains(d, b);
            };
        }
        return p.pick(a, b, c);
    };
    p.defaults = x(p.allKeys, !0);
    p.create = function (a, b) {
        var c = z(a);
        b && p.extendOwn(c, b);
        return c;
    };
    p.clone = function (a) {
        return p.isObject(a) ? (p.isArray(a) ? a.slice() : p.extend({}, a)) : a;
    };
    p.tap = function (a, b) {
        b(a);
        return a;
    };
    p.isMatch = function (a, b) {
        var c = p.keys(b),
            d = c.length;
        if (null == a) return !d;
        for (var e = Object(a), f = 0; f < d; f++) {
            var g = c[f];
            if (b[g] !== e[g] || !(g in e)) return !1;
        }
        return !0;
    };
    var L = function (a, b, c, d) {
        if (a === b) return 0 !== a || 1 / a === 1 / b;
        if (null == a || null == b) return a === b;
        a instanceof p && (a = a._wrapped);
        b instanceof p && (b = b._wrapped);
        var e = n.call(a);
        if (e !== n.call(b)) return !1;
        switch (e) {
            case "[object RegExp]":
            case "[object String]":
                return "" + a === "" + b;
            case "[object Number]":
                return +a !== +a ? +b !== +b : 0 === +a ? 1 / +a === 1 / b : +a === +b;
            case "[object Date]":
            case "[object Boolean]":
                return +a === +b;
        }
        e = "[object Array]" === e;
        if (!e) {
            if ("object" != typeof a || "object" != typeof b) return !1;
            var f = a.constructor,
                g = b.constructor;
            if (f !== g && !(p.isFunction(f) && f instanceof f && p.isFunction(g) && g instanceof g) && "constructor" in a && "constructor" in b) return !1;
        }
        c = c || [];
        d = d || [];
        for (f = c.length; f--; ) if (c[f] === a) return d[f] === b;
        c.push(a);
        d.push(b);
        if (e) {
            f = a.length;
            if (f !== b.length) return !1;
            for (; f--; ) if (!L(a[f], b[f], c, d)) return !1;
        } else {
            e = p.keys(a);
            f = e.length;
            if (p.keys(b).length !== f) return !1;
            for (; f--; ) if (((g = e[f]), !p.has(b, g) || !L(a[g], b[g], c, d))) return !1;
        }
        c.pop();
        d.pop();
        return !0;
    };
    p.isEqual = function (a, b) {
        return L(a, b);
    };
    p.isEmpty = function (a) {
        return null == a ? !0 : J(a) && (p.isArray(a) || p.isString(a) || p.isArguments(a)) ? 0 === a.length : 0 === p.keys(a).length;
    };
    p.isElement = function (a) {
        return !(!a || 1 !== a.nodeType);
    };
    p.isArray =
        u ||
        function (a) {
            return "[object Array]" === n.call(a);
        };
    p.isObject = function (a) {
        var b = typeof a;
        return "function" === b || ("object" === b && !!a);
    };
    p.each("Arguments Function String Number Date RegExp Error".split(" "), function (a) {
        p["is" + a] = function (b) {
            return n.call(b) === "[object " + a + "]";
        };
    });
    p.isArguments(arguments) ||
        (p.isArguments = function (a) {
            return p.has(a, "callee");
        });
    "function" != typeof /./ &&
        "object" != typeof Int8Array &&
        (p.isFunction = function (a) {
            return "function" == typeof a || !1;
        });
    p.isFinite = function (a) {
        return isFinite(a) && !isNaN(parseFloat(a));
    };
    p.isNaN = function (a) {
        return p.isNumber(a) && a !== +a;
    };
    p.isBoolean = function (a) {
        return !0 === a || !1 === a || "[object Boolean]" === n.call(a);
    };
    p.isNull = function (a) {
        return null === a;
    };
    p.isUndefined = function (a) {
        return void 0 === a;
    };
    p.has = function (a, b) {
        return null != a && q.call(a, b);
    };
    p.noConflict = function () {
        e._ = g;
        return this;
    };
    p.identity = function (a) {
        return a;
    };
    p.constant = function (a) {
        return function () {
            return a;
        };
    };
    p.noop = function () {};
    p.property = B;
    p.propertyOf = function (a) {
        return null == a
            ? function () {}
            : function (b) {
                  return a[b];
              };
    };
    p.matcher = p.matches = function (a) {
        a = p.extendOwn({}, a);
        return function (b) {
            return p.isMatch(b, a);
        };
    };
    p.times = function (a, b, c) {
        var d = Array(Math.max(0, a));
        b = C(b, c, 1);
        for (c = 0; c < a; c++) d[c] = b(c);
        return d;
    };
    p.random = function (a, b) {
        null == b && ((b = a), (a = 0));
        return a + Math.floor(Math.random() * (b - a + 1));
    };
    p.now =
        Date.now ||
        function () {
            return new Date().getTime();
        };
    u = { "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#x27;", "`": "&#x60;" };
    x = p.invert(u);
    B = function (a) {
        var b = function (b) {
                return a[b];
            },
            c = "(?:" + p.keys(a).join("|") + ")",
            d = RegExp(c),
            e = RegExp(c, "g");
        return function (a) {
            a = null == a ? "" : "" + a;
            return d.test(a) ? a.replace(e, b) : a;
        };
    };
    p.escape = B(u);
    p.unescape = B(x);
    p.result = function (a, b, c) {
        b = null == a ? void 0 : a[b];
        void 0 === b && (b = c);
        return p.isFunction(b) ? b.call(a) : b;
    };
    var pa = 0;
    p.uniqueId = function (a) {
        var b = ++pa + "";
        return a ? a + b : b;
    };
    p.templateSettings = { evaluate: /<%([\s\S]+?)%>/g, interpolate: /<%=([\s\S]+?)%>/g, escape: /<%-([\s\S]+?)%>/g };
    var wa = /(.)^/,
        Ba = { "'": "'", "\\": "\\", "\r": "r", "\n": "n", "\u2028": "u2028", "\u2029": "u2029" },
        W = /\\|'|\r|\n|\u2028|\u2029/g,
        ra = function (a) {
            return "\\" + Ba[a];
        };
    p.template = function (a, b, c) {
        !b && c && (b = c);
        b = p.defaults({}, b, p.templateSettings);
        c = RegExp([(b.escape || wa).source, (b.interpolate || wa).source, (b.evaluate || wa).source].join("|") + "|$", "g");
        var d = 0,
            e = "__p+='";
        a.replace(c, function (b, c, f, g, h) {
            e += a.slice(d, h).replace(W, ra);
            d = h + b.length;
            c ? (e += "'+\n((__t=(" + c + "))==null?'':_.escape(__t))+\n'") : f ? (e += "'+\n((__t=(" + f + "))==null?'':__t)+\n'") : g && (e += "';\n" + g + "\n__p+='");
            return b;
        });
        e += "';\n";
        b.variable || (e = "with(obj||{}){\n" + e + "}\n");
        e = "var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n" + e + "return __p;\n";
        try {
            var f = new Function(b.variable || "obj", "_", e);
        } catch (g) {
            throw ((g.source = e), g);
        }
        c = function (a) {
            return f.call(this, a, p);
        };
        c.source = "function(" + (b.variable || "obj") + "){\n" + e + "}";
        return c;
    };
    p.chain = function (a) {
        a = p(a);
        a._chain = !0;
        return a;
    };
    var Q = function (a, b) {
        return a._chain ? p(b).chain() : b;
    };
    p.mixin = function (a) {
        p.each(p.functions(a), function (b) {
            var c = (p[b] = a[b]);
            p.prototype[b] = function () {
                var a = [this._wrapped];
                h.apply(a, arguments);
                return Q(this, c.apply(p, a));
            };
        });
    };
    p.mixin(p);
    p.each("pop push reverse shift sort splice unshift".split(" "), function (a) {
        var b = f[a];
        p.prototype[a] = function () {
            var c = this._wrapped;
            b.apply(c, arguments);
            ("shift" !== a && "splice" !== a) || 0 !== c.length || delete c[0];
            return Q(this, c);
        };
    });
    p.each(["concat", "join", "slice"], function (a) {
        var b = f[a];
        p.prototype[a] = function () {
            return Q(this, b.apply(this._wrapped, arguments));
        };
    });
    p.prototype.value = function () {
        return this._wrapped;
    };
    p.prototype.valueOf = p.prototype.toJSON = p.prototype.value;
    p.prototype.toString = function () {
        return "" + this._wrapped;
    };
    "function" === typeof define &&
        define.amd &&
        define("underscore", [], function () {
            return p;
        });
}.call(this));
(function (b) {
    var a = ("object" == typeof self && self.self === self && self) || ("object" == typeof global && global.global === global && global);
    if ("function" === typeof define && define.amd)
        define(["underscore", "jquery", "exports"], function (c, d, f) {
            a.Backbone = b(a, f, c, d);
        });
    else if ("undefined" !== typeof exports) {
        var c = require("underscore"),
            d;
        try {
            d = require("jquery");
        } catch (e) {}
        b(a, exports, c, d);
    } else a.Backbone = b(a, {}, a._, a.jQuery || a.Zepto || a.ender || a.$);
})(function (b, a, c, d) {
    var e = b.Backbone,
        g = Array.prototype.slice;
    a.VERSION = "1.3.3";
    a.$ = d;
    a.noConflict = function () {
        b.Backbone = e;
        return this;
    };
    a.emulateHTTP = !1;
    a.emulateJSON = !1;
    var f = function (a, b, d) {
            switch (a) {
                case 1:
                    return function () {
                        return c[b](this[d]);
                    };
                case 2:
                    return function (a) {
                        return c[b](this[d], a);
                    };
                case 3:
                    return function (a, e) {
                        return c[b](this[d], h(a, this), e);
                    };
                case 4:
                    return function (a, e, f) {
                        return c[b](this[d], h(a, this), e, f);
                    };
                default:
                    return function () {
                        var a = g.call(arguments);
                        a.unshift(this[d]);
                        return c[b].apply(c, a);
                    };
            }
        },
        k = function (a, b, d) {
            c.each(b, function (b, e) {
                c[e] && (a.prototype[e] = f(b, e, d));
            });
        },
        h = function (a, b) {
            return c.isFunction(a)
                ? a
                : c.isObject(a) && !b._isModel(a)
                ? l(a)
                : c.isString(a)
                ? function (b) {
                      return b.get(a);
                  }
                : a;
        },
        l = function (a) {
            var b = c.matches(a);
            return function (a) {
                return b(a.attributes);
            };
        };
    d = a.Events = {};
    var n = /\s+/,
        q = function (a, b, d, e, f) {
            var g = 0,
                h;
            if (d && "object" === typeof d) for (void 0 !== e && ("context" in f) && void 0 === f.context && (f.context = e), h = c.keys(d); g < h.length; g++) b = q(a, b, h[g], d[h[g]], f);
            else if (d && n.test(d)) for (h = d.split(n); g < h.length; g++) b = a(b, h[g], e, f);
            else b = a(b, d, e, f);
            return b;
        };
    d.on = function (a, b, c) {
        return u(this, a, b, c);
    };
    var u = function (a, b, c, d, e) {
        a._events = q(v, a._events || {}, b, c, { context: d, ctx: a, listening: e });
        e && ((a._listeners || (a._listeners = {}))[e.id] = e);
        return a;
    };
    d.listenTo = function (a, b, d) {
        if (!a) return this;
        var e = a._listenId || (a._listenId = c.uniqueId("l")),
            f = this._listeningTo || (this._listeningTo = {}),
            g = f[e];
        g || ((g = this._listenId || (this._listenId = c.uniqueId("l"))), (g = f[e] = { obj: a, objId: e, id: g, listeningTo: f, count: 0 }));
        u(a, b, d, this, g);
        return this;
    };
    var v = function (a, b, c, d) {
        if (c) {
            b = a[b] || (a[b] = []);
            var e = d.context,
                f = d.ctx;
            (d = d.listening) && d.count++;
            b.push({ callback: c, context: e, ctx: e || f, listening: d });
        }
        return a;
    };
    d.off = function (a, b, c) {
        if (!this._events) return this;
        this._events = q(w, this._events, a, b, { context: c, listeners: this._listeners });
        return this;
    };
    d.stopListening = function (a, b, d) {
        var e = this._listeningTo;
        if (!e) return this;
        a = a ? [a._listenId] : c.keys(e);
        for (var f = 0; f < a.length; f++) {
            var g = e[a[f]];
            if (!g) break;
            g.obj.off(b, d, this);
        }
        return this;
    };
    var w = function (a, b, d, e) {
        if (a) {
            var f = 0,
                g,
                h = e.context;
            e = e.listeners;
            if (b || d || h) {
                for (var k = b ? [b] : c.keys(a); f < k.length; f++) {
                    b = k[f];
                    var l = a[b];
                    if (!l) break;
                    for (var n = [], q = 0; q < l.length; q++)
                        (g = l[q]), (d && d !== g.callback && d !== g.callback._callback) || (h && h !== g.context) ? n.push(g) : (g = g.listening) && 0 === --g.count && (delete e[g.id], delete g.listeningTo[g.objId]);
                    n.length ? (a[b] = n) : delete a[b];
                }
                return a;
            }
            for (a = c.keys(e); f < a.length; f++) (g = e[a[f]]), delete e[g.id], delete g.listeningTo[g.objId];
        }
    };
    d.once = function (a, b, d) {
        var e = q(t, {}, a, b, c.bind(this.off, this));
        "string" === typeof a && null == d && (b = void 0);
        return this.on(e, b, d);
    };
    d.listenToOnce = function (a, b, d) {
        b = q(t, {}, b, d, c.bind(this.stopListening, this, a));
        return this.listenTo(a, b);
    };
    var t = function (a, b, d, e) {
        if (d) {
            var f = (a[b] = c.once(function () {
                e(b, f);
                d.apply(this, arguments);
            }));
            f._callback = d;
        }
        return a;
    };
    d.trigger = function (a) {
        if (!this._events) return this;
        for (var b = Math.max(0, arguments.length - 1), c = Array(b), d = 0; d < b; d++) c[d] = arguments[d + 1];
        q(y, this._events, a, void 0, c);
        return this;
    };
    var y = function (a, b, c, d) {
            if (a) {
                c = a[b];
                var e = a.all;
                c && e && (e = e.slice());
                c && p(c, d);
                e && p(e, [b].concat(d));
            }
            return a;
        },
        p = function (a, b) {
            var c,
                d = -1,
                e = a.length,
                f = b[0],
                g = b[1],
                h = b[2];
            switch (b.length) {
                case 0:
                    for (; ++d < e; ) (c = a[d]).callback.call(c.ctx);
                    break;
                case 1:
                    for (; ++d < e; ) (c = a[d]).callback.call(c.ctx, f);
                    break;
                case 2:
                    for (; ++d < e; ) (c = a[d]).callback.call(c.ctx, f, g);
                    break;
                case 3:
                    for (; ++d < e; ) (c = a[d]).callback.call(c.ctx, f, g, h);
                    break;
                default:
                    for (; ++d < e; ) (c = a[d]).callback.apply(c.ctx, b);
            }
        };
    d.bind = d.on;
    d.unbind = d.off;
    c.extend(a, d);
    var C = (a.Model = function (a, b) {
        var d = a || {};
        b || (b = {});
        this.cid = c.uniqueId(this.cidPrefix);
        this.attributes = {};
        b.collection && (this.collection = b.collection);
        b.parse && (d = this.parse(d, b) || {});
        var e = c.result(this, "defaults"),
            d = c.defaults(c.extend({}, e, d), e);
        this.set(d, b);
        this.changed = {};
        this.initialize.apply(this, arguments);
    });
    c.extend(C.prototype, d, {
        changed: null,
        validationError: null,
        idAttribute: "id",
        cidPrefix: "c",
        initialize: function () {},
        toJSON: function (a) {
            return c.clone(this.attributes);
        },
        sync: function () {
            return a.sync.apply(this, arguments);
        },
        get: function (a) {
            return this.attributes[a];
        },
        escape: function (a) {
            return c.escape(this.get(a));
        },
        has: function (a) {
            return null != this.get(a);
        },
        matches: function (a) {
            return !!c.iteratee(a, this)(this.attributes);
        },
        set: function (a, b, d) {
            if (null == a) return this;
            var e;
            "object" === typeof a ? ((e = a), (d = b)) : ((e = {})[a] = b);
            d || (d = {});
            if (!this._validate(e, d)) return !1;
            var f = d.unset;
            a = d.silent;
            var g = [],
                h = this._changing;
            this._changing = !0;
            h || ((this._previousAttributes = c.clone(this.attributes)), (this.changed = {}));
            var k = this.attributes,
                l = this.changed,
                n = this._previousAttributes,
                q;
            for (q in e) (b = e[q]), c.isEqual(k[q], b) || g.push(q), c.isEqual(n[q], b) ? delete l[q] : (l[q] = b), f ? delete k[q] : (k[q] = b);
            this.idAttribute in e && (this.id = this.get(this.idAttribute));
            if (!a) for (g.length && (this._pending = d), b = 0; b < g.length; b++) this.trigger("change:" + g[b], this, k[g[b]], d);
            if (h) return this;
            if (!a) for (; this._pending; ) (d = this._pending), (this._pending = !1), this.trigger("change", this, d);
            this._changing = this._pending = !1;
            return this;
        },
        unset: function (a, b) {
            return this.set(a, void 0, c.extend({}, b, { unset: !0 }));
        },
        clear: function (a) {
            var b = {},
                d;
            for (d in this.attributes) b[d] = void 0;
            return this.set(b, c.extend({}, a, { unset: !0 }));
        },
        hasChanged: function (a) {
            return null == a ? !c.isEmpty(this.changed) : c.has(this.changed, a);
        },
        changedAttributes: function (a) {
            if (!a) return this.hasChanged() ? c.clone(this.changed) : !1;
            var b = this._changing ? this._previousAttributes : this.attributes,
                d = {},
                e;
            for (e in a) {
                var f = a[e];
                c.isEqual(b[e], f) || (d[e] = f);
            }
            return c.size(d) ? d : !1;
        },
        previous: function (a) {
            return null != a && this._previousAttributes ? this._previousAttributes[a] : null;
        },
        previousAttributes: function () {
            return c.clone(this._previousAttributes);
        },
        fetch: function (a) {
            a = c.extend({ parse: !0 }, a);
            var b = this,
                d = a.success;
            a.success = function (c) {
                var e = a.parse ? b.parse(c, a) : c;
                if (!b.set(e, a)) return !1;
                d && d.call(a.context, b, c, a);
                b.trigger("sync", b, c, a);
            };
            ra(this, a);
            return this.sync("read", this, a);
        },
        save: function (a, b, d) {
            var e;
            null == a || "object" === typeof a ? ((e = a), (d = b)) : ((e = {})[a] = b);
            d = c.extend({ validate: !0, parse: !0 }, d);
            var f = d.wait;
            if (e && !f) {
                if (!this.set(e, d)) return !1;
            } else if (!this._validate(e, d)) return !1;
            var g = this,
                h = d.success,
                k = this.attributes;
            d.success = function (a) {
                g.attributes = k;
                var b = d.parse ? g.parse(a, d) : a;
                f && (b = c.extend({}, e, b));
                if (b && !g.set(b, d)) return !1;
                h && h.call(d.context, g, a, d);
                g.trigger("sync", g, a, d);
            };
            ra(this, d);
            e && f && (this.attributes = c.extend({}, k, e));
            a = this.isNew() ? "create" : d.patch ? "patch" : "update";
            "patch" !== a || d.attrs || (d.attrs = e);
            a = this.sync(a, this, d);
            this.attributes = k;
            return a;
        },
        destroy: function (a) {
            a = a ? c.clone(a) : {};
            var b = this,
                d = a.success,
                e = a.wait,
                f = function () {
                    b.stopListening();
                    b.trigger("destroy", b, b.collection, a);
                };
            a.success = function (c) {
                e && f();
                d && d.call(a.context, b, c, a);
                b.isNew() || b.trigger("sync", b, c, a);
            };
            var g = !1;
            this.isNew() ? c.defer(a.success) : (ra(this, a), (g = this.sync("delete", this, a)));
            e || f();
            return g;
        },
        url: function () {
            var a = c.result(this, "urlRoot") || c.result(this.collection, "url") || W();
            if (this.isNew()) return a;
            var b = this.get(this.idAttribute);
            return a.replace(/[^\/]$/, "$&/") + encodeURIComponent(b);
        },
        parse: function (a, b) {
            return a;
        },
        clone: function () {
            return new this.constructor(this.attributes);
        },
        isNew: function () {
            return !this.has(this.idAttribute);
        },
        isValid: function (a) {
            return this._validate({}, c.extend({}, a, { validate: !0 }));
        },
        _validate: function (a, b) {
            if (!b.validate || !this.validate) return !0;
            a = c.extend({}, this.attributes, a);
            var d = (this.validationError = this.validate(a, b) || null);
            if (!d) return !0;
            this.trigger("invalid", this, d, c.extend(b, { validationError: d }));
            return !1;
        },
    });
    k(C, { keys: 1, values: 1, pairs: 1, invert: 1, pick: 0, omit: 0, chain: 1, isEmpty: 1 }, "attributes");
    var r = (a.Collection = function (a, b) {
            b || (b = {});
            b.model && (this.model = b.model);
            void 0 !== b.comparator && (this.comparator = b.comparator);
            this._reset();
            this.initialize.apply(this, arguments);
            a && this.reset(a, c.extend({ silent: !0 }, b));
        }),
        x = { add: !0, remove: !0, merge: !0 },
        z = { add: !0, remove: !1 },
        B = function (a, b, c) {
            c = Math.min(Math.max(c, 0), a.length);
            var d = Array(a.length - c),
                e = b.length,
                f;
            for (f = 0; f < d.length; f++) d[f] = a[f + c];
            for (f = 0; f < e; f++) a[f + c] = b[f];
            for (f = 0; f < d.length; f++) a[f + e + c] = d[f];
        };
    c.extend(r.prototype, d, {
        model: C,
        initialize: function () {},
        toJSON: function (a) {
            return this.map(function (b) {
                return b.toJSON(a);
            });
        },
        sync: function () {
            return a.sync.apply(this, arguments);
        },
        add: function (a, b) {
            return this.set(a, c.extend({ merge: !1 }, b, z));
        },
        remove: function (a, b) {
            b = c.extend({}, b);
            var d = !c.isArray(a);
            a = d ? [a] : a.slice();
            var e = this._removeModels(a, b);
            !b.silent && e.length && ((b.changes = { added: [], merged: [], removed: e }), this.trigger("update", this, b));
            return d ? e[0] : e;
        },
        set: function (a, b) {
            if (null != a) {
                b = c.extend({}, x, b);
                b.parse && !this._isModel(a) && (a = this.parse(a, b) || []);
                var d = !c.isArray(a);
                a = d ? [a] : a.slice();
                var e = b.at;
                null != e && (e = +e);
                e > this.length && (e = this.length);
                0 > e && (e += this.length + 1);
                var f = [],
                    g = [],
                    h = [],
                    k = [],
                    l = {},
                    n = b.add,
                    q = b.merge,
                    r = b.remove,
                    u = !1,
                    p = this.comparator && null == e && !1 !== b.sort,
                    w = c.isString(this.comparator) ? this.comparator : null,
                    z,
                    v;
                for (v = 0; v < a.length; v++) {
                    z = a[v];
                    var t = this.get(z);
                    t
                        ? (q && z !== t && ((z = this._isModel(z) ? z.attributes : z), b.parse && (z = t.parse(z, b)), t.set(z, b), h.push(t), p && !u && (u = t.hasChanged(w))), l[t.cid] || ((l[t.cid] = !0), f.push(t)), (a[v] = t))
                        : n && (z = a[v] = this._prepareModel(z, b)) && (g.push(z), this._addReference(z, b), (l[z.cid] = !0), f.push(z));
                }
                if (r) {
                    for (v = 0; v < this.length; v++) (z = this.models[v]), l[z.cid] || k.push(z);
                    k.length && this._removeModels(k, b);
                }
                l = !1;
                f.length && !p && n && r
                    ? ((l =
                          this.length !== f.length ||
                          c.some(this.models, function (a, b) {
                              return a !== f[b];
                          })),
                      (this.models.length = 0),
                      B(this.models, f, 0),
                      (this.length = this.models.length))
                    : g.length && (p && (u = !0), B(this.models, g, null == e ? this.length : e), (this.length = this.models.length));
                u && this.sort({ silent: !0 });
                if (!b.silent) {
                    for (v = 0; v < g.length; v++) null != e && (b.index = e + v), (z = g[v]), z.trigger("add", z, this, b);
                    (u || l) && this.trigger("sort", this, b);
                    if (g.length || k.length || h.length) (b.changes = { added: g, removed: k, merged: h }), this.trigger("update", this, b);
                }
                return d ? a[0] : a;
            }
        },
        reset: function (a, b) {
            b = b ? c.clone(b) : {};
            for (var d = 0; d < this.models.length; d++) this._removeReference(this.models[d], b);
            b.previousModels = this.models;
            this._reset();
            a = this.add(a, c.extend({ silent: !0 }, b));
            b.silent || this.trigger("reset", this, b);
            return a;
        },
        push: function (a, b) {
            return this.add(a, c.extend({ at: this.length }, b));
        },
        pop: function (a) {
            var b = this.at(this.length - 1);
            return this.remove(b, a);
        },
        unshift: function (a, b) {
            return this.add(a, c.extend({ at: 0 }, b));
        },
        shift: function (a) {
            var b = this.at(0);
            return this.remove(b, a);
        },
        slice: function () {
            return g.apply(this.models, arguments);
        },
        get: function (a) {
            return null == a ? void 0 : this._byId[a] || this._byId[this.modelId(a.attributes || a)] || (a.cid && this._byId[a.cid]);
        },
        has: function (a) {
            return null != this.get(a);
        },
        at: function (a) {
            0 > a && (a += this.length);
            return this.models[a];
        },
        where: function (a, b) {
            return this[b ? "find" : "filter"](a);
        },
        findWhere: function (a) {
            return this.where(a, !0);
        },
        sort: function (a) {
            var b = this.comparator;
            if (!b) throw Error("Cannot sort a set without a comparator");
            a || (a = {});
            var d = b.length;
            c.isFunction(b) && (b = c.bind(b, this));
            1 === d || c.isString(b) ? (this.models = this.sortBy(b)) : this.models.sort(b);
            a.silent || this.trigger("sort", this, a);
            return this;
        },
        pluck: function (a) {
            return this.map(a + "");
        },
        fetch: function (a) {
            a = c.extend({ parse: !0 }, a);
            var b = a.success,
                d = this;
            a.success = function (c) {
                d[a.reset ? "reset" : "set"](c, a);
                b && b.call(a.context, d, c, a);
                d.trigger("sync", d, c, a);
            };
            ra(this, a);
            return this.sync("read", this, a);
        },
        create: function (a, b) {
            b = b ? c.clone(b) : {};
            var d = b.wait;
            a = this._prepareModel(a, b);
            if (!a) return !1;
            d || this.add(a, b);
            var e = this,
                f = b.success;
            b.success = function (a, b, c) {
                d && e.add(a, c);
                f && f.call(c.context, a, b, c);
            };
            a.save(null, b);
            return a;
        },
        parse: function (a, b) {
            return a;
        },
        clone: function () {
            return new this.constructor(this.models, { model: this.model, comparator: this.comparator });
        },
        modelId: function (a) {
            return a[this.model.prototype.idAttribute || "id"];
        },
        _reset: function () {
            this.length = 0;
            this.models = [];
            this._byId = {};
        },
        _prepareModel: function (a, b) {
            if (this._isModel(a)) return a.collection || (a.collection = this), a;
            b = b ? c.clone(b) : {};
            b.collection = this;
            var d = new this.model(a, b);
            if (!d.validationError) return d;
            this.trigger("invalid", this, d.validationError, b);
            return !1;
        },
        _removeModels: function (a, b) {
            for (var c = [], d = 0; d < a.length; d++) {
                var e = this.get(a[d]);
                if (e) {
                    var f = this.indexOf(e);
                    this.models.splice(f, 1);
                    this.length--;
                    delete this._byId[e.cid];
                    var g = this.modelId(e.attributes);
                    null != g && delete this._byId[g];
                    b.silent || ((b.index = f), e.trigger("remove", e, this, b));
                    c.push(e);
                    this._removeReference(e, b);
                }
            }
            return c;
        },
        _isModel: function (a) {
            return a instanceof C;
        },
        _addReference: function (a, b) {
            this._byId[a.cid] = a;
            var c = this.modelId(a.attributes);
            null != c && (this._byId[c] = a);
            a.on("all", this._onModelEvent, this);
        },
        _removeReference: function (a, b) {
            delete this._byId[a.cid];
            var c = this.modelId(a.attributes);
            null != c && delete this._byId[c];
            this === a.collection && delete a.collection;
            a.off("all", this._onModelEvent, this);
        },
        _onModelEvent: function (a, b, c, d) {
            if (b) {
                if (("add" === a || "remove" === a) && c !== this) return;
                "destroy" === a && this.remove(b, d);
                if ("change" === a) {
                    var e = this.modelId(b.previousAttributes()),
                        f = this.modelId(b.attributes);
                    e !== f && (null != e && delete this._byId[e], null != f && (this._byId[f] = b));
                }
            }
            this.trigger.apply(this, arguments);
        },
    });
    k(
        r,
        {
            forEach: 3,
            each: 3,
            map: 3,
            collect: 3,
            reduce: 0,
            foldl: 0,
            inject: 0,
            reduceRight: 0,
            foldr: 0,
            find: 3,
            detect: 3,
            filter: 3,
            select: 3,
            reject: 3,
            every: 3,
            all: 3,
            some: 3,
            any: 3,
            include: 3,
            includes: 3,
            contains: 3,
            invoke: 0,
            max: 3,
            min: 3,
            toArray: 1,
            size: 1,
            first: 3,
            head: 3,
            take: 3,
            initial: 3,
            rest: 3,
            tail: 3,
            drop: 3,
            last: 3,
            without: 0,
            difference: 0,
            indexOf: 3,
            shuffle: 1,
            lastIndexOf: 3,
            isEmpty: 1,
            chain: 1,
            sample: 3,
            partition: 3,
            groupBy: 3,
            countBy: 3,
            sortBy: 3,
            indexBy: 3,
            findIndex: 3,
            findLastIndex: 3,
        },
        "models"
    );
    var k = (a.View = function (a) {
            this.cid = c.uniqueId("view");
            c.extend(this, c.pick(a, H));
            this._ensureElement();
            this.initialize.apply(this, arguments);
        }),
        G = /^(\S+)\s*(.*)$/,
        H = "model collection el id attributes className tagName events".split(" ");
    c.extend(k.prototype, d, {
        tagName: "div",
        $: function (a) {
            return this.$el.find(a);
        },
        initialize: function () {},
        render: function () {
            return this;
        },
        remove: function () {
            this._removeElement();
            this.stopListening();
            return this;
        },
        _removeElement: function () {
            this.$el.remove();
        },
        setElement: function (a) {
            this.undelegateEvents();
            this._setElement(a);
            this.delegateEvents();
            return this;
        },
        _setElement: function (b) {
            this.$el = b instanceof a.$ ? b : a.$(b);
            this.el = this.$el[0];
        },
        delegateEvents: function (a) {
            a || (a = c.result(this, "events"));
            if (!a) return this;
            this.undelegateEvents();
            for (var b in a) {
                var d = a[b];
                c.isFunction(d) || (d = this[d]);
                if (d) {
                    var e = b.match(G);
                    this.delegate(e[1], e[2], c.bind(d, this));
                }
            }
            return this;
        },
        delegate: function (a, b, c) {
            this.$el.on(a + ".delegateEvents" + this.cid, b, c);
            return this;
        },
        undelegateEvents: function () {
            this.$el && this.$el.off(".delegateEvents" + this.cid);
            return this;
        },
        undelegate: function (a, b, c) {
            this.$el.off(a + ".delegateEvents" + this.cid, b, c);
            return this;
        },
        _createElement: function (a) {
            return document.createElement(a);
        },
        _ensureElement: function () {
            if (this.el) this.setElement(c.result(this, "el"));
            else {
                var a = c.extend({}, c.result(this, "attributes"));
                this.id && (a.id = c.result(this, "id"));
                this.className && (a["class"] = c.result(this, "className"));
                this.setElement(this._createElement(c.result(this, "tagName")));
                this._setAttributes(a);
            }
        },
        _setAttributes: function (a) {
            this.$el.attr(a);
        },
    });
    a.sync = function (b, d, e) {
        var f = J[b];
        c.defaults(e || (e = {}), { emulateHTTP: a.emulateHTTP, emulateJSON: a.emulateJSON });
        var g = { type: f, dataType: "json" };
        e.url || (g.url = c.result(d, "url") || W());
        null != e.data || !d || ("create" !== b && "update" !== b && "patch" !== b) || ((g.contentType = "application/json"), (g.data = JSON.stringify(e.attrs || d.toJSON(e))));
        e.emulateJSON && ((g.contentType = "application/x-www-form-urlencoded"), (g.data = g.data ? { model: g.data } : {}));
        if (e.emulateHTTP && ("PUT" === f || "DELETE" === f || "PATCH" === f)) {
            g.type = "POST";
            e.emulateJSON && (g.data._method = f);
            var h = e.beforeSend;
            e.beforeSend = function (a) {
                a.setRequestHeader("X-HTTP-Method-Override", f);
                if (h) return h.apply(this, arguments);
            };
        }
        "GET" === g.type || e.emulateJSON || (g.processData = !1);
        var k = e.error;
        e.error = function (a, b, c) {
            e.textStatus = b;
            e.errorThrown = c;
            k && k.call(e.context, a, b, c);
        };
        b = e.xhr = a.ajax(c.extend(g, e));
        d.trigger("request", d, b, e);
        return b;
    };
    var J = { create: "POST", update: "PUT", patch: "PATCH", delete: "DELETE", read: "GET" };
    a.ajax = function () {
        return a.$.ajax.apply(a.$, arguments);
    };
    var A = (a.Router = function (a) {
            a || (a = {});
            a.routes && (this.routes = a.routes);
            this._bindRoutes();
            this.initialize.apply(this, arguments);
        }),
        ea = /\((.*?)\)/g,
        ga = /(\(\?)?:\w+/g,
        ha = /\*\w+/g,
        va = /[\-{}\[\]+?.,\\\^$|#\s]/g;
    c.extend(A.prototype, d, {
        initialize: function () {},
        route: function (b, d, e) {
            c.isRegExp(b) || (b = this._routeToRegExp(b));
            c.isFunction(d) && ((e = d), (d = ""));
            e || (e = this[d]);
            var f = this;
            a.history.route(b, function (c) {
                c = f._extractParameters(b, c);
                !1 !== f.execute(e, c, d) && (f.trigger.apply(f, ["route:" + d].concat(c)), f.trigger("route", d, c), a.history.trigger("route", f, d, c));
            });
            return this;
        },
        execute: function (a, b, c) {
            a && a.apply(this, b);
        },
        navigate: function (b, c) {
            a.history.navigate(b, c);
            return this;
        },
        _bindRoutes: function () {
            if (this.routes) {
                this.routes = c.result(this, "routes");
                for (var a, b = c.keys(this.routes); null != (a = b.pop()); ) this.route(a, this.routes[a]);
            }
        },
        _routeToRegExp: function (a) {
            a = a
                .replace(va, "\\$&")
                .replace(ea, "(?:$1)?")
                .replace(ga, function (a, b) {
                    return b ? a : "([^/?]+)";
                })
                .replace(ha, "([^?]*?)");
            return new RegExp("^" + a + "(?:\\?([\\s\\S]*))?$");
        },
        _extractParameters: function (a, b) {
            var d = a.exec(b).slice(1);
            return c.map(d, function (a, b) {
                return b === d.length - 1 ? a || null : a ? decodeURIComponent(a) : null;
            });
        },
    });
    var L = (a.History = function () {
            this.handlers = [];
            this.checkUrl = c.bind(this.checkUrl, this);
            "undefined" !== typeof window && ((this.location = window.location), (this.history = window.history));
        }),
        pa = /^[#\/]|\s+$/g,
        wa = /^\/+|\/+$/g,
        Ba = /#.*$/;
    L.started = !1;
    c.extend(L.prototype, d, {
        interval: 50,
        atRoot: function () {
            return this.location.pathname.replace(/[^\/]$/, "$&/") === this.root && !this.getSearch();
        },
        matchRoot: function () {
            return this.decodeFragment(this.location.pathname).slice(0, this.root.length - 1) + "/" === this.root;
        },
        decodeFragment: function (a) {
            return decodeURI(a.replace(/%25/g, "%2525"));
        },
        getSearch: function () {
            var a = this.location.href.replace(/#.*/, "").match(/\?.+/);
            return a ? a[0] : "";
        },
        getHash: function (a) {
            return (a = (a || this).location.href.match(/#(.*)$/)) ? a[1] : "";
        },
        getPath: function () {
            var a = this.decodeFragment(this.location.pathname + this.getSearch()).slice(this.root.length - 1);
            return "/" === a.charAt(0) ? a.slice(1) : a;
        },
        getFragment: function (a) {
            null == a && (a = this._usePushState || !this._wantsHashChange ? this.getPath() : this.getHash());
            return a.replace(pa, "");
        },
        start: function (a) {
            if (L.started) throw Error("Backbone.history has already been started");
            L.started = !0;
            this.options = c.extend({ root: "/" }, this.options, a);
            this.root = this.options.root;
            this._wantsHashChange = !1 !== this.options.hashChange;
            this._hasHashChange = "onhashchange" in window && (void 0 === document.documentMode || 7 < document.documentMode);
            this._useHashChange = this._wantsHashChange && this._hasHashChange;
            this._wantsPushState = !!this.options.pushState;
            this._hasPushState = !(!this.history || !this.history.pushState);
            this._usePushState = this._wantsPushState && this._hasPushState;
            this.fragment = this.getFragment();
            this.root = ("/" + this.root + "/").replace(wa, "/");
            if (this._wantsHashChange && this._wantsPushState)
                if (this._hasPushState || this.atRoot()) this._hasPushState && this.atRoot() && this.navigate(this.getHash(), { replace: !0 });
                else return (a = this.root.slice(0, -1) || "/"), this.location.replace(a + "#" + this.getPath()), !0;
            this._hasHashChange ||
                !this._wantsHashChange ||
                this._usePushState ||
                ((this.iframe = document.createElement("iframe")),
                (this.iframe.src = "javascript:0"),
                (this.iframe.style.display = "none"),
                (this.iframe.tabIndex = -1),
                (a = document.body),
                (a = a.insertBefore(this.iframe, a.firstChild).contentWindow),
                a.document.open(),
                a.document.close(),
                (a.location.hash = "#" + this.fragment));
            a =
                window.addEventListener ||
                function (a, b) {
                    return attachEvent("on" + a, b);
                };
            this._usePushState ? a("popstate", this.checkUrl, !1) : this._useHashChange && !this.iframe ? a("hashchange", this.checkUrl, !1) : this._wantsHashChange && (this._checkUrlInterval = setInterval(this.checkUrl, this.interval));
            if (!this.options.silent) return this.loadUrl();
        },
        stop: function () {
            var a =
                window.removeEventListener ||
                function (a, b) {
                    return detachEvent("on" + a, b);
                };
            this._usePushState ? a("popstate", this.checkUrl, !1) : this._useHashChange && !this.iframe && a("hashchange", this.checkUrl, !1);
            this.iframe && (document.body.removeChild(this.iframe), (this.iframe = null));
            this._checkUrlInterval && clearInterval(this._checkUrlInterval);
            L.started = !1;
        },
        route: function (a, b) {
            this.handlers.unshift({ route: a, callback: b });
        },
        checkUrl: function (a) {
            a = this.getFragment();
            a === this.fragment && this.iframe && (a = this.getHash(this.iframe.contentWindow));
            if (a === this.fragment) return !1;
            this.iframe && this.navigate(a);
            this.loadUrl();
        },
        loadUrl: function (a) {
            if (!this.matchRoot()) return !1;
            a = this.fragment = this.getFragment(a);
            return c.some(this.handlers, function (b) {
                if (b.route.test(a)) return b.callback(a), !0;
            });
        },
        navigate: function (a, b) {
            if (!L.started) return !1;
            (b && !0 !== b) || (b = { trigger: !!b });
            a = this.getFragment(a || "");
            var c = this.root;
            if ("" === a || "?" === a.charAt(0)) c = c.slice(0, -1) || "/";
            c += a;
            a = this.decodeFragment(a.replace(Ba, ""));
            if (this.fragment !== a) {
                this.fragment = a;
                if (this._usePushState) this.history[b.replace ? "replaceState" : "pushState"]({}, document.title, c);
                else if (this._wantsHashChange)
                    this._updateHash(this.location, a, b.replace),
                        this.iframe && a !== this.getHash(this.iframe.contentWindow) && ((c = this.iframe.contentWindow), b.replace || (c.document.open(), c.document.close()), this._updateHash(c.location, a, b.replace));
                else return this.location.assign(c);
                if (b.trigger) return this.loadUrl(a);
            }
        },
        _updateHash: function (a, b, c) {
            c ? ((c = a.href.replace(/(javascript:|#).*$/, "")), a.replace(c + "#" + b)) : (a.hash = "#" + b);
        },
    });
    a.history = new L();
    C.extend = r.extend = A.extend = k.extend = L.extend = function (a, b) {
        var d = this,
            e;
        e =
            a && c.has(a, "constructor")
                ? a.constructor
                : function () {
                      return d.apply(this, arguments);
                  };
        c.extend(e, d, b);
        e.prototype = c.create(d.prototype, a);
        e.prototype.constructor = e;
        e.__super__ = d.prototype;
        return e;
    };
    var W = function () {
            throw Error('A "url" property or function must be specified');
        },
        ra = function (a, b) {
            var c = b.error;
            b.error = function (d) {
                c && c.call(b.context, a, d, b);
                a.trigger("error", a, d, b);
            };
        };
    return a;
});
(function e$$0(a, c, d) {
    function e(f, h) {
        if (!c[f]) {
            if (!a[f]) {
                var l = "function" == typeof require && require;
                if (!h && l) return l(f, !0);
                if (g) return g(f, !0);
                l = Error("Cannot find module '" + f + "'");
                throw ((l.code = "MODULE_NOT_FOUND"), l);
            }
            l = c[f] = { exports: {} };
            a[f][0].call(
                l.exports,
                function (c) {
                    var d = a[f][1][c];
                    return e(d ? d : c);
                },
                l,
                l.exports,
                e$$0,
                a,
                c,
                d
            );
        }
        return c[f].exports;
    }
    for (var g = "function" == typeof require && require, f = 0; f < d.length; f++) e(d[f]);
    return e;
})(
    {
        1: [
            function (b, a, c) {
                a.exports = function (a, b) {
                    for (var c = -1, f = a.length; ++c < f && !1 !== b(a[c], c, a); );
                    return a;
                };
            },
            {},
        ],
        2: [
            function (b, a, c) {
                b = (function (a) {
                    return function (b, c, f) {
                        var k = -1,
                            h = Object(b);
                        f = f(b);
                        for (var l = f.length; l--; ) {
                            var n = f[a ? l : ++k];
                            if (!1 === c(h[n], n, h)) break;
                        }
                        return b;
                    };
                })();
                a.exports = b;
            },
            {},
        ],
        3: [
            function (b, a, c) {
                (function (b) {
                    function c() {}
                    function g(a) {
                        var b = -1,
                            c = a ? a.length : 0;
                        for (this.clear(); ++b < c; ) {
                            var d = a[b];
                            this.set(d[0], d[1]);
                        }
                    }
                    function f(a, b) {
                        for (var c = a.length; c--; ) {
                            var d = a[c][0];
                            if (d === b || (d !== d && b !== b)) return c;
                        }
                        return -1;
                    }
                    function k(a, b) {
                        var c = null == a ? void 0 : a[b];
                        var d;
                        if (null == c) d = !1;
                        else if (((d = typeof c), (d = !c || ("object" != d && "function" != d) ? "" : w.call(c)), "[object Function]" == d || "[object GeneratorFunction]" == d)) d = t.test(u.call(c));
                        else if ((d = !!c && "object" == typeof c)) {
                            d = !1;
                            if (null != c && "function" != typeof c.toString)
                                try {
                                    d = !!(c + "");
                                } catch (e) {}
                            d = (d ? t : l).test(c);
                        }
                        return d ? c : void 0;
                    }
                    function h(a) {
                        var b = typeof a;
                        return "number" == b || "boolean" == b || ("string" == b && "__proto__" !== a) || null == a;
                    }
                    var l = /^\[object .+?Constructor\]$/,
                        n = b.Array.prototype,
                        q = b.Object.prototype,
                        u = b.Function.prototype.toString,
                        v = q.hasOwnProperty,
                        w = q.toString,
                        t = RegExp(
                            "^" +
                                u
                                    .call(v)
                                    .replace(/[\\^$.*+?()[\]{}|]/g, "\\$&")
                                    .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") +
                                "$"
                        ),
                        y = n.splice,
                        p = k(b, "Map"),
                        C = k(Object, "create");
                    c.prototype = C ? C(null) : q;
                    g.prototype.clear = function () {
                        this.__data__ = { hash: new c(), map: p ? new p() : [], string: new c() };
                    };
                    g.prototype["delete"] = function (a) {
                        var b = this.__data__;
                        if (h(a)) return (b = "string" == typeof a ? b.string : b.hash), (C ? void 0 !== b[a] : v.call(b, a)) && delete b[a];
                        p ? (a = b.map["delete"](a)) : ((b = b.map), (a = f(b, a)), 0 > a ? (a = !1) : (a == b.length - 1 ? b.pop() : y.call(b, a, 1), (a = !0)));
                        return a;
                    };
                    g.prototype.get = function (a) {
                        var b = this.__data__;
                        if (h(a)) return (b = "string" == typeof a ? b.string : b.hash), C ? ((a = b[a]), (a = "__lodash_hash_undefined__" === a ? void 0 : a)) : (a = v.call(b, a) ? b[a] : void 0), a;
                        p ? (a = b.map.get(a)) : ((b = b.map), (a = f(b, a)), (a = 0 > a ? void 0 : b[a][1]));
                        return a;
                    };
                    g.prototype.has = function (a) {
                        var b = this.__data__;
                        h(a) ? ((b = "string" == typeof a ? b.string : b.hash), (a = C ? void 0 !== b[a] : v.call(b, a))) : (a = p ? b.map.has(a) : -1 < f(b.map, a));
                        return a;
                    };
                    g.prototype.set = function (a, b) {
                        var c = this.__data__;
                        if (h(a)) ("string" == typeof a ? c.string : c.hash)[a] = C && void 0 === b ? "__lodash_hash_undefined__" : b;
                        else if (p) c.map.set(a, b);
                        else {
                            var c = c.map,
                                d = f(c, a);
                            0 > d ? c.push([a, b]) : (c[d][1] = b);
                        }
                        return this;
                    };
                    a.exports = g;
                }.call(this, "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : "undefined" !== typeof window ? window : {}));
            },
            {},
        ],
        4: [
            function (b, a, c) {
                (function (c) {
                    function e(a) {
                        var b = -1,
                            c = a ? a.length : 0;
                        for (this.clear(); ++b < c; ) {
                            var d = a[b];
                            this.set(d[0], d[1]);
                        }
                    }
                    function g(a, b) {
                        for (var c = a.length; c--; ) {
                            var d = a[c][0];
                            if (d === b || (d !== d && b !== b)) return c;
                        }
                        return -1;
                    }
                    var f = b("lodash._mapcache"),
                        k = c.Array.prototype.splice;
                    e.prototype.clear = function () {
                        this.__data__ = { array: [], map: null };
                    };
                    e.prototype["delete"] = function (a) {
                        var b = this.__data__,
                            c = b.array;
                        c ? ((a = g(c, a)), 0 > a ? (c = !1) : (a == c.length - 1 ? c.pop() : k.call(c, a, 1), (c = !0))) : (c = b.map["delete"](a));
                        return c;
                    };
                    e.prototype.get = function (a) {
                        var b = this.__data__,
                            c = b.array;
                        c ? ((a = g(c, a)), (c = 0 > a ? void 0 : c[a][1])) : (c = b.map.get(a));
                        return c;
                    };
                    e.prototype.has = function (a) {
                        var b = this.__data__,
                            c = b.array;
                        return c ? -1 < g(c, a) : b.map.has(a);
                    };
                    e.prototype.set = function (a, b) {
                        var c = this.__data__,
                            d = c.array;
                        if (d)
                            if (199 > d.length) {
                                var e = g(d, a);
                                0 > e ? d.push([a, b]) : (d[e][1] = b);
                            } else (c.array = null), (c.map = new f(d));
                        (c = c.map) && c.set(a, b);
                        return this;
                    };
                    a.exports = e;
                }.call(this, "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : "undefined" !== typeof window ? window : {}));
            },
            { "lodash._mapcache": 3 },
        ],
        5: [
            function (b, a, c) {
                (function (c) {
                    function e(a, b) {
                        a.set(b[0], b[1]);
                        return a;
                    }
                    function g(a, b) {
                        a.add(b);
                        return a;
                    }
                    function f(a, b, c, d) {
                        var e = -1,
                            f = a.length;
                        for (d && f && (c = a[++e]); ++e < f; ) c = b(c, a[e], e, a);
                        return c;
                    }
                    function k(a) {
                        var b = !1;
                        if (null != a && "function" != typeof a.toString)
                            try {
                                b = !!(a + "");
                            } catch (c) {}
                        return b;
                    }
                    function h(a) {
                        var b = -1,
                            c = Array(a.size);
                        a.forEach(function (a, d) {
                            c[++b] = [d, a];
                        });
                        return c;
                    }
                    function l(a) {
                        var b = -1,
                            c = Array(a.size);
                        a.forEach(function (a) {
                            c[++b] = a;
                        });
                        return c;
                    }
                    function n(a, b, c) {
                        var d = a[b],
                            e;
                        (e = !(d === c || (d !== d && c !== c))) || ((e = pa[b]), (e = (d === e || (d !== d && e !== e)) && !Ba.call(a, b)));
                        if (e || (void 0 === c && !(b in a))) a[b] = c;
                    }
                    function q(a, b) {
                        var c;
                        if ((c = a)) (c = ga(b)), (c = y(b, c, a));
                        return c;
                    }
                    function u(a, b, c, d, e, f) {
                        var g;
                        c && (g = e ? c(a, d, e, f) : c(a));
                        if (void 0 !== g) return g;
                        if (!H(a)) return a;
                        if ((d = Sa(a))) {
                            if (((g = x(a)), !b)) return t(a, g);
                        } else {
                            var h = r(a),
                                l = "[object Function]" == h || "[object GeneratorFunction]" == h;
                            if ("[object Object]" == h || "[object Arguments]" == h || (l && !e)) {
                                if (k(a)) return e ? a : {};
                                g = z(l ? {} : a);
                                if (!b) return p(a, q(g, a));
                            } else return L[h] ? B(a, h, b) : e ? a : {};
                        }
                        f || (f = new J());
                        if ((e = f.get(a))) return e;
                        f.set(a, g);
                        (d ? A : v)(a, function (d, e) {
                            n(g, e, u(d, b, c, e, a, f));
                        });
                        return d ? g : p(a, g);
                    }
                    function v(a, b) {
                        return a && ea(a, b, ga);
                    }
                    function w(a) {
                        var b = new a.constructor(a.byteLength);
                        new I(b).set(new I(a));
                        return b;
                    }
                    function t(a, b) {
                        var c = -1,
                            d = a.length;
                        for (b || (b = Array(d)); ++c < d; ) b[c] = a[c];
                        return b;
                    }
                    function y(a, b, c, d) {
                        c || (c = {});
                        for (var e = -1, f = b.length; ++e < f; ) {
                            var g = b[e],
                                h = d ? d(c[g], a[g], g, c, a) : a[g];
                            n(c, g, h);
                        }
                        return c;
                    }
                    function p(a, b) {
                        var c = Ka(a);
                        return y(a, c, b);
                    }
                    function C(a, b) {
                        var c = null == a ? void 0 : a[b],
                            d;
                        d = null == c ? !1 : G(c) ? ra.test(wa.call(c)) : !!c && "object" == typeof c && (k(c) ? ra : va).test(c);
                        return d ? c : void 0;
                    }
                    function r(a) {
                        return W.call(a);
                    }
                    function x(a) {
                        var b = a.length,
                            c = a.constructor(b);
                        b && "string" == typeof a[0] && Ba.call(a, "index") && ((c.index = a.index), (c.input = a.input));
                        return c;
                    }
                    function z(a) {
                        a = a.constructor;
                        return ca(G(a) ? a.prototype : void 0);
                    }
                    function B(a, b, c) {
                        var d = a.constructor;
                        switch (b) {
                            case "[object ArrayBuffer]":
                                return w(a);
                            case "[object Boolean]":
                            case "[object Date]":
                                return new d(+a);
                            case "[object Float32Array]":
                            case "[object Float64Array]":
                            case "[object Int8Array]":
                            case "[object Int16Array]":
                            case "[object Int32Array]":
                            case "[object Uint8Array]":
                            case "[object Uint8ClampedArray]":
                            case "[object Uint16Array]":
                            case "[object Uint32Array]":
                                return (b = a.buffer), new a.constructor(c ? w(b) : b, a.byteOffset, a.length);
                            case "[object Map]":
                                return (c = a.constructor), f(h(a), e, new c());
                            case "[object Number]":
                            case "[object String]":
                                return new d(a);
                            case "[object RegExp]":
                                return (c = new a.constructor(a.source, ha.exec(a))), (c.lastIndex = a.lastIndex), c;
                            case "[object Set]":
                                return (c = a.constructor), f(l(a), g, new c());
                            case "[object Symbol]":
                                return Q ? Object(aa.call(a)) : {};
                        }
                    }
                    function G(a) {
                        a = H(a) ? W.call(a) : "";
                        return "[object Function]" == a || "[object GeneratorFunction]" == a;
                    }
                    function H(a) {
                        var b = typeof a;
                        return !!a && ("object" == b || "function" == b);
                    }
                    var J = b("lodash._stack"),
                        A = b("lodash._arrayeach"),
                        ea = b("lodash._basefor"),
                        ga = b("lodash.keys"),
                        ha = /\w*$/,
                        va = /^\[object .+?Constructor\]$/,
                        L = {};
                    L["[object Arguments]"] = L["[object Array]"] = L["[object ArrayBuffer]"] = L["[object Boolean]"] = L["[object Date]"] = L["[object Float32Array]"] = L["[object Float64Array]"] = L["[object Int8Array]"] = L[
                        "[object Int16Array]"
                    ] = L["[object Int32Array]"] = L["[object Map]"] = L["[object Number]"] = L["[object Object]"] = L["[object RegExp]"] = L["[object Set]"] = L["[object String]"] = L["[object Symbol]"] = L["[object Uint8Array]"] = L[
                        "[object Uint8ClampedArray]"
                    ] = L["[object Uint16Array]"] = L["[object Uint32Array]"] = !0;
                    L["[object Error]"] = L["[object Function]"] = L["[object WeakMap]"] = !1;
                    var pa = c.Object.prototype,
                        wa = c.Function.prototype.toString,
                        Ba = pa.hasOwnProperty,
                        W = pa.toString,
                        ra = RegExp(
                            "^" +
                                wa
                                    .call(Ba)
                                    .replace(/[\\^$.*+?()[\]{}|]/g, "\\$&")
                                    .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") +
                                "$"
                        ),
                        Q = c.Symbol,
                        I = c.Uint8Array,
                        Ca = Object.getOwnPropertySymbols,
                        M = C(c, "Map");
                    c = C(c, "Set");
                    var ma = M ? wa.call(M) : "",
                        za = c ? wa.call(c) : "",
                        ta = Q ? Q.prototype : void 0,
                        aa = Q ? ta.valueOf : void 0,
                        ca = (function () {
                            function a() {}
                            return function (b) {
                                if (H(b)) {
                                    a.prototype = b;
                                    var c = new a();
                                    a.prototype = void 0;
                                }
                                return c || {};
                            };
                        })(),
                        Ka =
                            Ca ||
                            function () {
                                return [];
                            };
                    if ((M && "[object Map]" != r(new M())) || (c && "[object Set]" != r(new c())))
                        r = function (a) {
                            var b = W.call(a);
                            a = "[object Object]" == b ? a.constructor : null;
                            if ((a = "function" == typeof a ? wa.call(a) : "")) {
                                if (a == ma) return "[object Map]";
                                if (a == za) return "[object Set]";
                            }
                            return b;
                        };
                    var Sa = Array.isArray;
                    a.exports = function (a) {
                        return u(a, !0);
                    };
                }.call(this, "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : "undefined" !== typeof window ? window : {}));
            },
            { "lodash._arrayeach": 1, "lodash._basefor": 2, "lodash._stack": 4, "lodash.keys": 7 },
        ],
        6: [
            function (b, a, c) {
                (function (b) {
                    var c = b.Object.prototype,
                        g = b.Function.prototype.toString,
                        f = g.call(Object),
                        k = c.toString,
                        h = Object.getPrototypeOf;
                    a.exports = function (a) {
                        var b;
                        if (!(b = !(a && "object" == typeof a) || "[object Object]" != k.call(a)) && ((b = !1), null != a && "function" != typeof a.toString))
                            try {
                                b = !!(a + "");
                            } catch (d) {}
                        if (b) return !1;
                        b = c;
                        "function" == typeof a.constructor && (b = h(a));
                        if (null === b) return !0;
                        a = b.constructor;
                        return "function" == typeof a && a instanceof a && g.call(a) == f;
                    };
                }.call(this, "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : "undefined" !== typeof window ? window : {}));
            },
            {},
        ],
        7: [
            function (b, a, c) {
                (function (b) {
                    function c(a) {
                        var b;
                        if ((b = null != a)) {
                            if ((b = "function" == typeof a)) (b = typeof a), (b = !a || ("object" != b && "function" != b) ? "" : l.call(a)), (b = "[object Function]" == b || "[object GeneratorFunction]" == b);
                            b = !b;
                        }
                        return b && g(v(a));
                    }
                    function g(a) {
                        return "number" == typeof a && -1 < a && 0 == a % 1 && 9007199254740991 >= a;
                    }
                    var f = /^(?:0|[1-9]\d*)$/,
                        k = b.Object.prototype,
                        h = k.hasOwnProperty,
                        l = k.toString,
                        n = Object.getPrototypeOf,
                        q = k.propertyIsEnumerable,
                        u = Object.keys,
                        v = (function (a) {
                            return function (b) {
                                return null == b ? void 0 : b[a];
                            };
                        })("length"),
                        w = Array.isArray;
                    a.exports = function (a) {
                        var b;
                        b = a && a.constructor;
                        b = a === (("function" == typeof b && b.prototype) || k);
                        if (!b && !c(a)) return u(Object(a));
                        var d,
                            v = a ? a.length : void 0;
                        if ((d = g(v)))
                            (d = w(a)) || (d = "string" == typeof a || (!w(a) && !!a && "object" == typeof a && "[object String]" == l.call(a))),
                                d || (d = !!a && "object" == typeof a && c(a) && h.call(a, "callee") && (!q.call(a, "callee") || "[object Arguments]" == l.call(a)));
                        if (d) {
                            d = String;
                            for (var r = -1, x = Array(v); ++r < v; ) x[r] = d(r);
                            v = x;
                        } else v = null;
                        d = v;
                        v = !!d;
                        d = d || [];
                        var r = d.length,
                            z;
                        for (z in a) {
                            var x = a,
                                B = z;
                            if ((x = h.call(x, B) || ("object" == typeof x && B in x && null === n(x))))
                                (x = v) && !(x = "length" == z) && ((x = z), (B = r), (x = "number" == typeof x || f.test(x) ? +x : -1), (B = null == B ? 9007199254740991 : B), (x = -1 < x && 0 == x % 1 && x < B)), (x = !x);
                            !x || (b && "constructor" == z) || d.push(z);
                        }
                        return d;
                    };
                }.call(this, "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : "undefined" !== typeof window ? window : {}));
            },
            {},
        ],
        8: [
            function (b, a, c) {
                (function (b) {
                    function c(a) {
                        a = null == a ? a : Object(a);
                        var b = [],
                            d;
                        for (d in a) b.push(d);
                        return b;
                    }
                    function g(a) {
                        return "number" == typeof a && -1 < a && 0 == a % 1 && 9007199254740991 >= a;
                    }
                    var f = /^(?:0|[1-9]\d*)$/,
                        k = b.Object.prototype,
                        h = k.hasOwnProperty,
                        l = k.toString,
                        n = (b = b.Reflect) ? b.enumerate : void 0,
                        q = k.propertyIsEnumerable;
                    n &&
                        !q.call({ valueOf: 1 }, "valueOf") &&
                        (c = function (a) {
                            a = n(a);
                            for (var b, c = []; !(b = a.next()).done; ) c.push(b.value);
                            return c;
                        });
                    var u = (function (a) {
                            return function (b) {
                                return null == b ? void 0 : b[a];
                            };
                        })("length"),
                        v = Array.isArray;
                    a.exports = function (a) {
                        var b = -1,
                            d;
                        d = a && a.constructor;
                        d = a === (("function" == typeof d && d.prototype) || k);
                        var n = c(a),
                            C = n.length,
                            r,
                            x = a ? a.length : void 0;
                        if ((r = g(x)))
                            if (((r = v(a)) || (r = "string" == typeof a || (!v(a) && !!a && "object" == typeof a && "[object String]" == l.call(a))), !r)) {
                                if ((r = !!a && "object" == typeof a)) {
                                    if ((r = null != a)) {
                                        if ((r = "function" == typeof a)) (r = typeof a), (r = !a || ("object" != r && "function" != r) ? "" : l.call(a)), (r = "[object Function]" == r || "[object GeneratorFunction]" == r);
                                        r = !r;
                                    }
                                    r = r && g(u(a));
                                }
                                r = r && h.call(a, "callee") && (!q.call(a, "callee") || "[object Arguments]" == l.call(a));
                            }
                        if (r) {
                            r = String;
                            for (var z = -1, B = Array(x); ++z < x; ) B[z] = r(z);
                            x = B;
                        } else x = null;
                        r = x;
                        x = !!r;
                        r = r || [];
                        for (z = r.length; ++b < C; ) {
                            var B = n[b],
                                G;
                            if ((G = x) && !(G = "length" == B)) {
                                G = B;
                                var H = z;
                                G = "number" == typeof G || f.test(G) ? +G : -1;
                                H = null == H ? 9007199254740991 : H;
                                G = -1 < G && 0 == G % 1 && G < H;
                            }
                            G || ("constructor" == B && (d || !h.call(a, B))) || r.push(B);
                        }
                        return r;
                    };
                }.call(this, "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : "undefined" !== typeof window ? window : {}));
            },
            {},
        ],
        9: [
            function (b, a, c) {
                (function (c) {
                    function e(a, b) {
                        a.set(b[0], b[1]);
                        return a;
                    }
                    function g(a, b) {
                        a.add(b);
                        return a;
                    }
                    function f(a, b, c, d) {
                        var e = -1,
                            f = a.length;
                        for (d && f && (c = a[++e]); ++e < f; ) c = b(c, a[e], e, a);
                        return c;
                    }
                    function k(a) {
                        var b = !1;
                        if (null != a && "function" != typeof a.toString)
                            try {
                                b = !!(a + "");
                            } catch (c) {}
                        return b;
                    }
                    function h(a) {
                        var b = -1,
                            c = Array(a.size);
                        a.forEach(function (a, d) {
                            c[++b] = [d, a];
                        });
                        return c;
                    }
                    function l(a) {
                        var b = -1,
                            c = Array(a.size);
                        a.forEach(function (a) {
                            c[++b] = a;
                        });
                        return c;
                    }
                    function n(a, b, c) {
                        if ((void 0 !== c && !J(a[b], c)) || ("number" == typeof b && void 0 === c && !(b in a))) a[b] = c;
                    }
                    function q(a, b, c) {
                        var d = a[b];
                        if (!J(d, c) || (J(d, Ka[b]) && !na.call(a, b)) || (void 0 === c && !(b in a))) a[b] = c;
                    }
                    function u(a, b) {
                        var c;
                        if ((c = a)) (c = I(b)), (c = C(b, c, a));
                        return c;
                    }
                    function v(a, b, c, d, e, f) {
                        var g;
                        c && (g = e ? c(a, d, e, f) : c(a));
                        if (void 0 !== g) return g;
                        if (!L(a)) return a;
                        if ((d = ec(a))) {
                            if (((g = B(a)), !b)) return p(a, g);
                        } else {
                            var h = z(a),
                                l = "[object Function]" == h || "[object GeneratorFunction]" == h;
                            if ("[object Object]" == h || "[object Arguments]" == h || (l && !e)) {
                                if (k(a)) return e ? a : {};
                                g = G(l ? {} : a);
                                if (!b) return r(a, u(g, a));
                            } else return ca[h] ? H(a, h, b) : e ? a : {};
                        }
                        f || (f = new Ba());
                        if ((e = f.get(a))) return e;
                        f.set(a, g);
                        (d ? W : w)(a, function (d, e) {
                            q(g, e, v(d, b, c, e, a, f));
                        });
                        return d ? g : r(a, g);
                    }
                    function w(a, b) {
                        return a && ra(a, b, I);
                    }
                    function t(a, b, c, d) {
                        if (a !== b) {
                            var e = ec(b) || wa(b) ? void 0 : Ca(b);
                            W(e || b, function (f, g) {
                                e && ((g = f), (f = b[g]));
                                if (L(f)) {
                                    d || (d = new Ba());
                                    var h = g,
                                        k = d,
                                        l = a[h],
                                        q = b[h],
                                        r = k.get(q) || k.get(l);
                                    if (r) n(a, h, r);
                                    else {
                                        var x = c ? c(l, q, h + "", a, b, k) : void 0;
                                        if ((r = void 0 === x)) (x = q), ec(q) || wa(q) ? (x = ec(l) ? l : ga(l) ? p(l) : v(q)) : Q(q) || A(q) ? (A(l) ? ((x = Ca(l)), (l = C(l, x, void 0))) : (l = L(l) ? l : v(q)), (x = l)) : (r = ha(q));
                                        k.set(q, x);
                                        r && t(x, q, c, k);
                                        n(a, h, x);
                                    }
                                } else (h = c ? c(a[g], f, g + "", a, b, d) : void 0), void 0 === h && (h = f), n(a, g, h);
                            });
                        }
                    }
                    function y(a) {
                        var b = new a.constructor(a.byteLength);
                        new vb(b).set(new vb(a));
                        return b;
                    }
                    function p(a, b) {
                        var c = -1,
                            d = a.length;
                        for (b || (b = Array(d)); ++c < d; ) b[c] = a[c];
                        return b;
                    }
                    function C(a, b, c, d) {
                        c || (c = {});
                        for (var e = -1, f = b.length; ++e < f; ) {
                            var g = b[e],
                                h = d ? d(c[g], a[g], g, c, a) : a[g];
                            q(c, g, h);
                        }
                        return c;
                    }
                    function r(a, b) {
                        var c = Mc(a);
                        return C(a, c, b);
                    }
                    function x(a, b) {
                        var c = null == a ? void 0 : a[b],
                            d;
                        d = null == c ? !1 : ha(c) ? bc.test(Sa.call(c)) : pa(c) && (k(c) ? bc : za).test(c);
                        return d ? c : void 0;
                    }
                    function z(a) {
                        return T.call(a);
                    }
                    function B(a) {
                        var b = a.length,
                            c = a.constructor(b);
                        b && "string" == typeof a[0] && na.call(a, "index") && ((c.index = a.index), (c.input = a.input));
                        return c;
                    }
                    function G(a) {
                        a = a.constructor;
                        return la(ha(a) ? a.prototype : void 0);
                    }
                    function H(a, b, c) {
                        var d = a.constructor;
                        switch (b) {
                            case "[object ArrayBuffer]":
                                return y(a);
                            case "[object Boolean]":
                            case "[object Date]":
                                return new d(+a);
                            case "[object Float32Array]":
                            case "[object Float64Array]":
                            case "[object Int8Array]":
                            case "[object Int16Array]":
                            case "[object Int32Array]":
                            case "[object Uint8Array]":
                            case "[object Uint8ClampedArray]":
                            case "[object Uint16Array]":
                            case "[object Uint32Array]":
                                return (b = a.buffer), new a.constructor(c ? y(b) : b, a.byteOffset, a.length);
                            case "[object Map]":
                                return (c = a.constructor), f(h(a), e, new c());
                            case "[object Number]":
                            case "[object String]":
                                return new d(a);
                            case "[object RegExp]":
                                return (c = new a.constructor(a.source, ma.exec(a))), (c.lastIndex = a.lastIndex), c;
                            case "[object Set]":
                                return (c = a.constructor), f(l(a), g, new c());
                            case "[object Symbol]":
                                return ab ? Object(dc.call(a)) : {};
                        }
                    }
                    function J(a, b) {
                        return a === b || (a !== a && b !== b);
                    }
                    function A(a) {
                        return ga(a) && na.call(a, "callee") && (!hb.call(a, "callee") || "[object Arguments]" == T.call(a));
                    }
                    function ea(a) {
                        return null != a && !("function" == typeof a && ha(a)) && va(m(a));
                    }
                    function ga(a) {
                        return pa(a) && ea(a);
                    }
                    function ha(a) {
                        a = L(a) ? T.call(a) : "";
                        return "[object Function]" == a || "[object GeneratorFunction]" == a;
                    }
                    function va(a) {
                        return "number" == typeof a && -1 < a && 0 == a % 1 && 9007199254740991 >= a;
                    }
                    function L(a) {
                        var b = typeof a;
                        return !!a && ("object" == b || "function" == b);
                    }
                    function pa(a) {
                        return !!a && "object" == typeof a;
                    }
                    function wa(a) {
                        return pa(a) && va(a.length) && !!aa[T.call(a)];
                    }
                    var Ba = b("lodash._stack"),
                        W = b("lodash._arrayeach"),
                        ra = b("lodash._basefor"),
                        Q = b("lodash.isplainobject"),
                        I = b("lodash.keys"),
                        Ca = b("lodash.keysin"),
                        M = b("lodash.rest"),
                        ma = /\w*$/,
                        za = /^\[object .+?Constructor\]$/,
                        ta = /^(?:0|[1-9]\d*)$/,
                        aa = {};
                    aa["[object Float32Array]"] = aa["[object Float64Array]"] = aa["[object Int8Array]"] = aa["[object Int16Array]"] = aa["[object Int32Array]"] = aa["[object Uint8Array]"] = aa["[object Uint8ClampedArray]"] = aa[
                        "[object Uint16Array]"
                    ] = aa["[object Uint32Array]"] = !0;
                    aa["[object Arguments]"] = aa["[object Array]"] = aa["[object ArrayBuffer]"] = aa["[object Boolean]"] = aa["[object Date]"] = aa["[object Error]"] = aa["[object Function]"] = aa["[object Map]"] = aa[
                        "[object Number]"
                    ] = aa["[object Object]"] = aa["[object RegExp]"] = aa["[object Set]"] = aa["[object String]"] = aa["[object WeakMap]"] = !1;
                    var ca = {};
                    ca["[object Arguments]"] = ca["[object Array]"] = ca["[object ArrayBuffer]"] = ca["[object Boolean]"] = ca["[object Date]"] = ca["[object Float32Array]"] = ca["[object Float64Array]"] = ca["[object Int8Array]"] = ca[
                        "[object Int16Array]"
                    ] = ca["[object Int32Array]"] = ca["[object Map]"] = ca["[object Number]"] = ca["[object Object]"] = ca["[object RegExp]"] = ca["[object Set]"] = ca["[object String]"] = ca["[object Symbol]"] = ca[
                        "[object Uint8Array]"
                    ] = ca["[object Uint8ClampedArray]"] = ca["[object Uint16Array]"] = ca["[object Uint32Array]"] = !0;
                    ca["[object Error]"] = ca["[object Function]"] = ca["[object WeakMap]"] = !1;
                    var Ka = c.Object.prototype,
                        Sa = c.Function.prototype.toString,
                        na = Ka.hasOwnProperty,
                        T = Ka.toString,
                        bc = RegExp(
                            "^" +
                                Sa.call(na)
                                    .replace(/[\\^$.*+?()[\]{}|]/g, "\\$&")
                                    .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") +
                                "$"
                        ),
                        ab = c.Symbol,
                        vb = c.Uint8Array,
                        Gb = Object.getOwnPropertySymbols,
                        hb = Ka.propertyIsEnumerable,
                        Hb = x(c, "Map");
                    c = x(c, "Set");
                    var zc = Hb ? Sa.call(Hb) : "",
                        cc = c ? Sa.call(c) : "",
                        Ac = ab ? ab.prototype : void 0,
                        dc = ab ? Ac.valueOf : void 0,
                        la = (function () {
                            function a() {}
                            return function (b) {
                                if (L(b)) {
                                    a.prototype = b;
                                    var c = new a();
                                    a.prototype = void 0;
                                }
                                return c || {};
                            };
                        })(),
                        m = (function (a) {
                            return function (b) {
                                return null == b ? void 0 : b[a];
                            };
                        })("length"),
                        Mc =
                            Gb ||
                            function () {
                                return [];
                            };
                    if ((Hb && "[object Map]" != z(new Hb())) || (c && "[object Set]" != z(new c())))
                        z = function (a) {
                            var b = T.call(a);
                            a = "[object Object]" == b ? a.constructor : null;
                            if ((a = "function" == typeof a ? Sa.call(a) : "")) {
                                if (a == zc) return "[object Map]";
                                if (a == cc) return "[object Set]";
                            }
                            return b;
                        };
                    var ec = Array.isArray,
                        Gb = (function (a) {
                            return M(function (b, c) {
                                var d = -1,
                                    e = c.length,
                                    f = 1 < e ? c[e - 1] : void 0,
                                    g = 2 < e ? c[2] : void 0,
                                    f = "function" == typeof f ? (e--, f) : void 0,
                                    h;
                                if ((h = g)) {
                                    h = c[0];
                                    var k = c[1];
                                    if (L(g)) {
                                        var l = typeof k;
                                        if ("number" == l) {
                                            if ((l = ea(g)))
                                                var l = k,
                                                    n = g.length,
                                                    l = "number" == typeof l || ta.test(l) ? +l : -1,
                                                    l = -1 < l && 0 == l % 1 && l < (null == n ? 9007199254740991 : n);
                                        } else l = "string" == l && k in g;
                                        h = l ? J(g[k], h) : !1;
                                    } else h = !1;
                                }
                                h && ((f = 3 > e ? void 0 : f), (e = 1));
                                for (b = Object(b); ++d < e; ) (g = c[d]) && a(b, g, f);
                                return b;
                            });
                        })(function (a, b) {
                            t(a, b);
                        });
                    a.exports = Gb;
                }.call(this, "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : "undefined" !== typeof window ? window : {}));
            },
            { "lodash._arrayeach": 1, "lodash._basefor": 2, "lodash._stack": 4, "lodash.isplainobject": 6, "lodash.keys": 7, "lodash.keysin": 8, "lodash.rest": 10 },
        ],
        10: [
            function (b, a, c) {
                (function (b) {
                    function c(a, b, d) {
                        switch (d ? d.length : 0) {
                            case 0:
                                return a.call(b);
                            case 1:
                                return a.call(b, d[0]);
                            case 2:
                                return a.call(b, d[0], d[1]);
                            case 3:
                                return a.call(b, d[0], d[1], d[2]);
                        }
                        return a.apply(b, d);
                    }
                    function g(a) {
                        var b = typeof a;
                        return !!a && ("object" == b || "function" == b);
                    }
                    function f(a) {
                        if (!a) return 0 === a ? a : 0;
                        if (g(a)) {
                            var b = a.valueOf,
                                b = g(b) ? w.call(b) : "";
                            a = "[object Function]" == b || "[object GeneratorFunction]" == b ? a.valueOf() : a;
                            a = g(a) ? a + "" : a;
                        }
                        "string" != typeof a ? (a = 0 === a ? a : +a) : ((a = a.replace(l, "")), (a = (b = q.test(a)) || u.test(a) ? v(a.slice(2), b ? 2 : 8) : n.test(a) ? h : +a));
                        if (a === k || a === -k) return 1.7976931348623157e308 * (0 > a ? -1 : 1);
                        b = a % 1;
                        return a === a ? (b ? a - b : a) : 0;
                    }
                    var k = 1 / 0,
                        h = 0 / 0,
                        l = /^\s+|\s+$/g,
                        n = /^[-+]0x[0-9a-f]+$/i,
                        q = /^0b[01]+$/i,
                        u = /^0o[0-7]+$/i,
                        v = parseInt,
                        w = b.Object.prototype.toString,
                        t = Math.max;
                    a.exports = function (a, b) {
                        if ("function" != typeof a) throw new TypeError("Expected a function");
                        b = t(void 0 === b ? a.length - 1 : f(b), 0);
                        return function () {
                            for (var d = arguments, f = -1, g = t(d.length - b, 0), h = Array(g); ++f < g; ) h[f] = d[b + f];
                            switch (b) {
                                case 0:
                                    return a.call(this, h);
                                case 1:
                                    return a.call(this, d[0], h);
                                case 2:
                                    return a.call(this, d[0], d[1], h);
                            }
                            g = Array(b + 1);
                            for (f = -1; ++f < b; ) g[f] = d[f];
                            g[b] = h;
                            return c(a, this, g);
                        };
                    };
                }.call(this, "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : "undefined" !== typeof window ? window : {}));
            },
            {},
        ],
        11: [
            function (b, a, c) {
                window.Backbone = window.Backbone || {};
                window.Backbone.DeepModel = b(".");
            },
            { ".": 12 },
        ],
        12: [
            function (b, a, c) {
                function d(a) {
                    var b = {},
                        c = n.keyPathSeparator,
                        e;
                    for (e in a) {
                        var g = a[e];
                        if (!g || (g.constructor !== Object && g.constructor !== Array) || f.isEmpty(g)) b[e] = g;
                        else {
                            var g = d(g),
                                h;
                            for (h in g) b[e + c + h] = g[h];
                        }
                    }
                    return b;
                }
                function e(a, b, c) {
                    var d = n.keyPathSeparator;
                    b = b ? b.split(d) : [];
                    c || !1 === c;
                    for (var d = 0, e = b.length; d < e; d++) {
                        if (c && !f.has(a, b[d])) return !1;
                        a = a[b[d]];
                        null == a && d < e - 1 && (a = {});
                        if ("undefined" === typeof a) break;
                    }
                    return c ? !0 : a;
                }
                function g(a, b, c, d) {
                    d = d || {};
                    var e = n.keyPathSeparator;
                    b = b ? b.split(e) : [];
                    for (var e = 0, g = b.length; e < g && void 0 !== a; e++) {
                        var h = b[e];
                        if (e === g - 1) d.unset ? delete a[h] : (a[h] = c);
                        else {
                            if ("undefined" === typeof a[h] || !f.isObject(a[h])) {
                                if (d.unset) {
                                    delete a[h];
                                    break;
                                }
                                a[h] = /^\d+$/.test(b[e + 1]) ? [] : {};
                            }
                            a = a[h];
                        }
                    }
                }
                try {
                    var f = b("underscore");
                } catch (q) {
                    f = window._;
                }
                try {
                    var k = b("backbone");
                } catch (q) {
                    k = window.Backbone;
                }
                var h = b("lodash.merge"),
                    l = b("lodash.clonedeep"),
                    n = k.Model.extend({
                        constructor: function (a, b) {
                            var c = a || {};
                            this.cid = f.uniqueId("c");
                            this.attributes = {};
                            b && b.collection && (this.collection = b.collection);
                            b && b.parse && (c = this.parse(c, b) || {});
                            c = h({}, l(f.result(this, "defaults")), c);
                            this.set(c, b);
                            this.changed = {};
                            this.initialize.apply(this, arguments);
                        },
                        toJSON: function (a) {
                            return h({}, this.attributes);
                        },
                        get: function (a) {
                            return e(this.attributes, a);
                        },
                        set: function (a, b, c) {
                            var k, l, y, p, C, r, x;
                            if (null == a) return this;
                            "object" === typeof a ? ((l = a), (c = b || {})) : ((l = {})[a] = b);
                            c || (c = {});
                            if (!this._validate(l, c)) return !1;
                            y = c.unset;
                            C = c.silent;
                            p = [];
                            r = this._changing;
                            this._changing = !0;
                            r || ((this._previousAttributes = h({}, this.attributes)), (this.changed = {}));
                            x = this.attributes;
                            a = this._previousAttributes;
                            this.idAttribute in l && (this.id = l[this.idAttribute]);
                            l = d(l);
                            for (k in l) (b = l[k]), f.isEqual(e(x, k), b) || p.push(k), f.isEqual(e(a, k), b) ? g(this.changed, k, null, { unset: !0 }) : g(this.changed, k, b), y ? g(x, k, null, { unset: !0 }) : g(x, k, b);
                            if (!C)
                                for (p.length && (this._pending = !0), b = n.keyPathSeparator, k = {}, l = 0, y = p.length; l < y; l++) {
                                    a = p[l];
                                    (k.hasOwnProperty(a) && k[a]) || ((k[a] = !0), this.trigger("change:" + a, this, e(x, a), c));
                                    a = a.split(b);
                                    for (var z = a.length - 1; 0 < z; z--) {
                                        var B = a.slice(0, z).join(b),
                                            G = B + b + "*";
                                        (k.hasOwnProperty(G) && k[G]) || ((k[G] = !0), this.trigger("change:" + G, this, e(x, B), c));
                                        (k.hasOwnProperty(B) && k[B]) || ((k[B] = !0), this.trigger("change:" + B, this, e(x, B), c));
                                    }
                                }
                            if (r) return this;
                            if (!C) for (; this._pending; ) (this._pending = !1), this.trigger("change", this, c);
                            this._changing = this._pending = !1;
                            return this;
                        },
                        clear: function (a) {
                            var b = {},
                                c = d(this.attributes),
                                e;
                            for (e in c) b[e] = void 0;
                            return this.set(b, f.extend({}, a, { unset: !0 }));
                        },
                        hasChanged: function (a) {
                            return null == a ? !f.isEmpty(this.changed) : void 0 !== e(this.changed, a);
                        },
                        changedAttributes: function (a) {
                            if (!a) return this.hasChanged() ? d(this.changed) : !1;
                            var b = this._changing ? this._previousAttributes : this.attributes;
                            a = d(a);
                            var b = d(b),
                                c,
                                e = !1,
                                g;
                            for (g in a) f.isEqual(b[g], (c = a[g])) || ((e || (e = {}))[g] = c);
                            return e;
                        },
                        previous: function (a) {
                            return null != a && this._previousAttributes ? e(this._previousAttributes, a) : null;
                        },
                        previousAttributes: function () {
                            return h({}, this._previousAttributes);
                        },
                    });
                n.keyPathSeparator = ".";
                a.exports = n;
            },
            { backbone: void 0, "lodash.clonedeep": 5, "lodash.merge": 9, underscore: void 0 },
        ],
    },
    {},
    [11]
);
(function () {
    var b = {},
        a = this,
        c = a.iso;
    "undefined" !== typeof module && module.exports ? (module.exports = b) : (a.iso = b);
    b.noConflict = function () {
        a.iso = c;
        return b;
    };
    b.version = "0.1";
    b.countries = {
        AD: { value: "AD", name: "Andorra", currency: "EUR", alpha2: "AD", alpha3: "AND", dSep: ".", aSep: ",", dGroup: 3, aSign: "\u20ac", pSign: "p", sample: "\u20ac123,456,789.12" },
        AE: { value: "AE", name: "United Arab Emirates", currency: "AED", alpha2: "AE", alpha3: "ARE", dSep: ".", aSep: ",", dGroup: 3, aSign: "AED", pSign: "p", sample: "AED123,456,789.12" },
        AF: { value: "AF", name: "Afghanistan", currency: "AFN", alpha2: "AF", alpha3: "AFG", dSep: ".", aSep: ",", dGroup: 3, aSign: "AFN\u00a0", pSign: "p", sample: "AFN\u00a0123,456,789" },
        AG: { value: "AG", name: "Antigua and Barbuda", currency: "XCD", alpha2: "AG", alpha3: "ATG", dSep: ".", aSep: ",", dGroup: 3, aSign: "XCD", pSign: "p", sample: "XCD123,456,789.12" },
        AI: { value: "AI", name: "Anguilla", currency: "XCD", alpha2: "AI", alpha3: "AIA", dSep: ".", aSep: ",", dGroup: 3, aSign: "XCD", pSign: "p", sample: "XCD123,456,789.12" },
        AL: { value: "AL", name: "Albania", currency: "ALL", alpha2: "AL", alpha3: "ALB", dSep: ".", aSep: ",", dGroup: 3, aSign: "ALL", pSign: "p", sample: "ALL123,456,789" },
        AM: { value: "AM", name: "Armenia", currency: "AMD", alpha2: "AM", alpha3: "ARM", dSep: ".", aSep: ",", dGroup: 3, aSign: "AMD", pSign: "p", sample: "AMD123,456,789" },
        AQ: { value: "AQ", name: "Antarctica", currency: "AQD", alpha2: "AQ", alpha3: "ATA", dSep: ".", aSep: ",", dGroup: 3, aSign: "AQD", pSign: "p", sample: "AQD123,456,789.12" },
        AR: {
            value: "AR",
            name: "Argentina",
            currency: "ARS",
            alpha2: "AR",
            alpha3: "ARG",
            dSep: "\u066b",
            aSep: "\u066c",
            dGroup: 3,
            aSign: "ARS\u00a0\u0661\u0662\u0663\u066c\u0664\u0665\u0666\u066c\u0667\u0668\u0669\u066b\u0661\u0662",
            pSign: "p",
            sample: "ARS\u00a0\u0661\u0662\u0663\u066c\u0664\u0665\u0666\u066c\u0667\u0668\u0669\u066b\u0661\u0662",
        },
        AS: { value: "AS", name: "American Samoa", currency: "USD", alpha2: "AS", alpha3: "ASM", dSep: ".", aSep: ",", dGroup: 3, aSign: "$", pSign: "p", sample: "$123,456,789.12" },
        AT: { value: "AT", name: "Austria", currency: "EUR", alpha2: "AT", alpha3: "AUT", dSep: ".", aSep: ",", dGroup: 3, aSign: "\u20ac", pSign: "p", sample: "\u20ac123,456,789.12" },
        AU: { value: "AU", name: "Australia", currency: "AUD", alpha2: "AU", alpha3: "AUS", dSep: ".", aSep: ",", dGroup: 3, aSign: "A$", pSign: "p", sample: "A$123,456,789.12" },
        AW: { value: "AW", name: "Aruba", currency: "AWG", alpha2: "AW", alpha3: "ABW", dSep: ".", aSep: ",", dGroup: 3, aSign: "AWG", pSign: "p", sample: "AWG123,456,789.12" },
        AZ: { value: "AZ", name: "Azerbaijan", currency: "AZN", alpha2: "AZ", alpha3: "AZE", dSep: ".", aSep: ",", dGroup: 3, aSign: "AZN\u00a0", pSign: "p", sample: "AZN\u00a0123,456,789.12" },
        BA: { value: "BA", name: "Bosnia and Herzegovina", currency: "BAM", alpha2: "BA", alpha3: "BIH", dSep: ".", aSep: ",", dGroup: 3, aSign: "BAM", pSign: "p", sample: "BAM123,456,789.12" },
        BB: { value: "BB", name: "Barbados", currency: "BBD", alpha2: "BB", alpha3: "BRB", dSep: ".", aSep: ",", dGroup: 3, aSign: "BBD", pSign: "p", sample: "BBD123,456,789.12" },
        BD: { value: "BD", name: "Bangladesh", currency: "BTD", alpha2: "BD", alpha3: "BGD", dSep: ".", aSep: ",", dGroup: 3, aSign: "BTD", pSign: "p", sample: "BTD123,456,789.12" },
        BE: { value: "BE", name: "Belgium", currency: "EUR", alpha2: "BE", alpha3: "BEL", dSep: ".", aSep: ",", dGroup: 3, aSign: "\u20ac\u00a0", pSign: "p", sample: "\u20ac\u00a0123,456,789.12" },
        BF: { value: "BF", name: "Burkina Faso", currency: "XOF", alpha2: "BF", alpha3: "BFA", dSep: ".", aSep: ",", dGroup: 3, aSign: "CFA", pSign: "p", sample: "CFA123,456,789" },
        BG: { value: "BG", name: "Bulgaria", currency: "BGN", alpha2: "BG", alpha3: "BGR", dSep: ",", aSep: "\u00a0", dGroup: 3, aSign: "\u00a0\u043b\u0432", pSign: "s", sample: "123\u00a0456\u00a0789,12\u00a0\u043b\u0432." },
        BH: { value: "BH", name: "Bahrain", currency: "BHD", alpha2: "BH", alpha3: "BHR", dSep: ".", aSep: ",", dGroup: 3, aSign: "BHD", pSign: "p", sample: "BHD123,456,789.123" },
        BI: { value: "BI", name: "Burundi", currency: "BIF", alpha2: "BI", alpha3: "BDI", dSep: ".", aSep: ",", dGroup: 3, aSign: "BIF", pSign: "p", sample: "BIF123,456,789" },
        BJ: { value: "BJ", name: "Benin", currency: "XOF", alpha2: "BJ", alpha3: "BEN", dSep: ".", aSep: ",", dGroup: 3, aSign: "CFA", pSign: "p", sample: "CFA123,456,789" },
        BM: { value: "BM", name: "Bermuda", currency: "BMD", alpha2: "BM", alpha3: "BMU", dSep: ".", aSep: ",", dGroup: 3, aSign: "BMD", pSign: "p", sample: "BMD123,456,789.12" },
        BN: {
            value: "BN",
            name: "Brunei Darussalam",
            currency: "BND",
            alpha2: "BN",
            alpha3: "BRN",
            dSep: ".",
            aSep: ",",
            dGroup: 2,
            aSign: "\u09e7\u09e8\u09e9\u09ea\u09eb\u09ec\u09ed\u09ee\u09ef\u09e7\u09e8BND",
            pSign: "p",
            sample: "\u09e7\u09e8,\u09e9\u09ea,\u09eb\u09ec,\u09ed\u09ee\u09ef.\u09e7\u09e8BND",
        },
        BO: { value: "BO", name: "Bolivia", currency: "BOB", alpha2: "BO", alpha3: "BOL", dSep: ".", aSep: ",", dGroup: 3, aSign: "BOB", pSign: "p", sample: "BOB123,456,789.12" },
        BR: { value: "BR", name: "Brazil", currency: "BRL", alpha2: "BR", alpha3: "BRA", dSep: ".", aSep: ",", dGroup: 3, aSign: "R$\u00a0", pSign: "p", sample: "R$\u00a0123,456,789.12" },
        BS: { value: "BS", name: "Bahamas", currency: "BSD", alpha2: "BS", alpha3: "BHS", dSep: ".", aSep: ",", dGroup: 3, aSign: "BSD\u00a0", pSign: "p", sample: "BSD\u00a0123,456,789.12" },
        BT: { value: "BT", name: "Bhutan", currency: "BTN", alpha2: "BT", alpha3: "BTN", dSep: ".", aSep: ",", dGroup: 3, aSign: "BTN", pSign: "p", sample: "BTN123,456,789.12" },
        BV: { value: "BV", name: "Bouvet Island", currency: "NOK", alpha2: "BV", alpha3: "BVT", dSep: ".", aSep: ",", dGroup: 3, aSign: "NOK", pSign: "p", sample: "NOK123,456,789.12" },
        BW: { value: "BW", name: "Botswana", currency: "BWP", alpha2: "BW", alpha3: "BWA", dSep: ".", aSep: ",", dGroup: 3, aSign: "BWP", pSign: "p", sample: "BWP123,456,789.12" },
        BY: { value: "BY", name: "Belarus", currency: "BYR", alpha2: "BY", alpha3: "BLR", dSep: ".", aSep: ",", dGroup: 3, aSign: "BYR", pSign: "p", sample: "BYR123,456,789" },
        BZ: { value: "BZ", name: "Belize", currency: "BZD", alpha2: "BZ", alpha3: "BLZ", dSep: ".", aSep: ",", dGroup: 3, aSign: "BZD", pSign: "p", sample: "BZD123,456,789.12" },
        CA: { value: "CA", name: "Canada", currency: "CAD", alpha2: "CA", alpha3: "CAN", dSep: ",", aSep: ".", dGroup: 3, aSign: "\u00a0CAD", pSign: "s", sample: "123.456.789,12\u00a0CAD" },
        CC: { value: "CC", name: "Cocos (Keeling) Islands", currency: "AUD", alpha2: "CC", alpha3: "CCK", dSep: ".", aSep: ",", dGroup: 3, aSign: "A$", pSign: "p", sample: "A$123,456,789.12" },
        CF: { value: "CF", name: "Central African Republic", currency: "XAF", alpha2: "CF", alpha3: "CAF", dSep: ".", aSep: ",", dGroup: 3, aSign: "FCFA", pSign: "p", sample: "FCFA123,456,789" },
        CG: { value: "CG", name: "Congo", currency: "XAF", alpha2: "CG", alpha3: "COG", dSep: ".", aSep: ",", dGroup: 3, aSign: "FCFA", pSign: "p", sample: "FCFA123,456,789" },
        CH: { value: "CH", name: "Switzerland", currency: "CHF", alpha2: "CH", alpha3: "CHE", dSep: ".", aSep: ",", dGroup: 3, aSign: "CHF", pSign: "p", sample: "CHF123,456,789.12" },
        CI: { value: "CI", name: "C\u00f4te D'Ivoire", currency: "XOF", alpha2: "CI", alpha3: "CIV", dSep: ".", aSep: ",", dGroup: 3, aSign: "CFA", pSign: "p", sample: "CFA123,456,789" },
        CK: { value: "CK", name: "Cook Islands", currency: "NZD", alpha2: "CK", alpha3: "COK", dSep: ".", aSep: ",", dGroup: 3, aSign: "NZ$", pSign: "p", sample: "NZ$123,456,789.12" },
        CL: { value: "CL", name: "Chile", currency: "CLP", alpha2: "CL", alpha3: "CHL", dSep: ".", aSep: ",", dGroup: 3, aSign: "CLP", pSign: "p", sample: "CLP123,456,789" },
        CM: { value: "CM", name: "Cameroon", currency: "XAF", alpha2: "CM", alpha3: "CMR", dSep: ".", aSep: ",", dGroup: 3, aSign: "FCFA", pSign: "p", sample: "FCFA123,456,789" },
        CN: { value: "CN", name: "China", currency: "CNY", alpha2: "CN", alpha3: "CHN", dSep: ".", aSep: ",", dGroup: 3, aSign: "CN\u00a5", pSign: "p", sample: "CN\u00a5123,456,789.12" },
        CO: { value: "CO", name: "Colombia", currency: "COP", alpha2: "CO", alpha3: "COL", dSep: ".", aSep: ",", dGroup: 3, aSign: "COP", pSign: "p", sample: "COP123,456,789" },
        CR: { value: "CR", name: "Costa Rica", currency: "CRC", alpha2: "CR", alpha3: "CRI", dSep: ".", aSep: ",", dGroup: 3, aSign: "CRC", pSign: "p", sample: "CRC123,456,789" },
        CV: { value: "CV", name: "Cape Verde", currency: "CVE", alpha2: "CV", alpha3: "CPV", dSep: ".", aSep: ",", dGroup: 3, aSign: "CVE", pSign: "p", sample: "CVE123,456,789.12" },
        CX: { value: "CX", name: "Christmas Island", currency: "AUD", alpha2: "CX", alpha3: "CXR", dSep: ".", aSep: ",", dGroup: 3, aSign: "A$", pSign: "p", sample: "A$123,456,789.12" },
        CY: { value: "CY", name: "Cyprus", currency: "EUR", alpha2: "CY", alpha3: "CYP", dSep: ".", aSep: ",", dGroup: 3, aSign: "\u20ac\u00a0", pSign: "p", sample: "\u20ac\u00a0123,456,789.12" },
        CZ: { value: "CZ", name: "Czech Republic", currency: "CZK", alpha2: "CZ", alpha3: "CZE", dSep: ".", aSep: ",", dGroup: 3, aSign: "CZK", pSign: "p", sample: "CZK123,456,789.12" },
        DE: { value: "DE", name: "Germany", currency: "EUR", alpha2: "DE", alpha3: "DEU", dSep: ",", aSep: ".", dGroup: 3, aSign: "\u00a0\u20ac", pSign: "s", sample: "123.456.789,12\u00a0\u20ac" },
        DJ: { value: "DJ", name: "Djibouti", currency: "DJF", alpha2: "DJ", alpha3: "DJI", dSep: ".", aSep: ",", dGroup: 3, aSign: "DJF", pSign: "p", sample: "DJF123,456,789" },
        DK: { value: "DK", name: "Denmark", currency: "DKK", alpha2: "DK", alpha3: "DNK", dSep: ".", aSep: ",", dGroup: 3, aSign: "DKK", pSign: "p", sample: "DKK123,456,789.12" },
        DM: { value: "DM", name: "Dominica", currency: "XCD", alpha2: "DM", alpha3: "DMA", dSep: ".", aSep: ",", dGroup: 3, aSign: "XCD", pSign: "p", sample: "XCD123,456,789.12" },
        DO: { value: "DO", name: "Dominican Republic", currency: "DOP", alpha2: "DO", alpha3: "DOM", dSep: ".", aSep: ",", dGroup: 3, aSign: "DOP", pSign: "p", sample: "DOP123,456,789.12" },
        DZ: { value: "DZ", name: "Algeria", currency: "DZD", alpha2: "DZ", alpha3: "DZA", dSep: ".", aSep: ",", dGroup: 3, aSign: "DZD", pSign: "p", sample: "DZD123,456,789.12" },
        EC: { value: "EC", name: "Ecuador", currency: "USD", alpha2: "EC", alpha3: "ECU", dSep: ".", aSep: ",", dGroup: 3, aSign: "$", pSign: "p", sample: "$123,456,789.12" },
        EE: { value: "EE", name: "Estonia", currency: "EEK", alpha2: "EE", alpha3: "EST", dSep: ".", aSep: ",", dGroup: 3, aSign: "EEK\u00a0", pSign: "p", sample: "EEK\u00a0123,456,789.12" },
        EG: { value: "EG", name: "Egypt", currency: "EGP", alpha2: "EG", alpha3: "EGY", dSep: ".", aSep: ",", dGroup: 3, aSign: "EGP", pSign: "p", sample: "EGP123,456,789.12" },
        EH: { value: "EH", name: "Western Sahara", currency: "MAD", alpha2: "EH", alpha3: "ESH", dSep: ".", aSep: ",", dGroup: 3, aSign: "MAD", pSign: "p", sample: "MAD123,456,789.12" },
        ER: { value: "ER", name: "Eritrea", currency: "ETB", alpha2: "ER", alpha3: "ERI", dSep: ".", aSep: ",", dGroup: 3, aSign: "ETB", pSign: "p", sample: "ETB123,456,789.12" },
        ES: { value: "ES", name: "Spain", currency: "EUR", alpha2: "ES", alpha3: "ESP", dSep: ",", aSep: ".", dGroup: 3, aSign: "\u00a0\u20ac", pSign: "s", sample: "123.456.789,12\u00a0\u20ac" },
        ET: { value: "ET", name: "Ethiopia", currency: "ETB", alpha2: "ET", alpha3: "ETH", dSep: ",", aSep: "\u00a0", dGroup: 3, aSign: "\u00a0ETB", pSign: "s", sample: "123\u00a0456\u00a0789,12\u00a0ETB" },
        FI: { value: "FI", name: "Finland", currency: "EUR", alpha2: "FI", alpha3: "FIN", dSep: ",", aSep: "\u00a0", dGroup: 3, aSign: "\u00a0\u20ac", pSign: "s", sample: "123\u00a0456\u00a0789,12\u00a0\u20ac" },
        FJ: { value: "FJ", name: "Fiji", currency: "USD", alpha2: "FJ", alpha3: "FJI", dSep: ".", aSep: ",", dGroup: 3, aSign: "$", pSign: "p", sample: "$123,456,789.12" },
        FK: { value: "FK", name: "Falkland Islands (Malvinas)", currency: "FKP", alpha2: "FK", alpha3: "FLK", dSep: ".", aSep: ",", dGroup: 3, aSign: "FKP", pSign: "p", sample: "FKP123,456,789.12" },
        FM: { value: "FM", name: "Micronesia, Federated States Of", currency: "USD", alpha2: "FM", alpha3: "FSM", dSep: ".", aSep: ",", dGroup: 3, aSign: "$", pSign: "p", sample: "$123,456,789.12" },
        FO: { value: "FO", name: "Faroe Islands", currency: "DKK", alpha2: "FO", alpha3: "FRO", dSep: ".", aSep: ",", dGroup: 3, aSign: "DKK\u00a0", pSign: "p", sample: "DKK\u00a0123,456,789.12" },
        FR: { value: "FR", name: "France", currency: "EUR", alpha2: "FR", alpha3: "FRA", dSep: ",", aSep: "\u00a0", dGroup: 3, aSign: "\u00a0\u20ac", pSign: "s", sample: "123\u00a0456\u00a0789,12\u00a0\u20ac" },
        GA: { value: "GA", name: "Gabon", currency: "XAF", alpha2: "GA", alpha3: "GAB", dSep: ".", aSep: ",", dGroup: 3, aSign: "FCFA\u00a0", pSign: "p", sample: "FCFA\u00a0123,456,789" },
        GB: { value: "GB", name: "United Kingdom", currency: "GBP", alpha2: "GB", alpha3: "GBR", dSep: ".", aSep: ",", dGroup: 3, aSign: "\u00a3", pSign: "p", sample: "\u00a3123,456,789.12" },
        GD: { value: "GD", name: "Grenada", currency: "XCD", alpha2: "GD", alpha3: "GRD", dSep: ".", aSep: ",", dGroup: 3, aSign: "XCD", pSign: "p", sample: "XCD123,456,789.12" },
        GE: { value: "GE", name: "Georgia", currency: "GEL", alpha2: "GE", alpha3: "GEO", dSep: ".", aSep: ",", dGroup: 3, aSign: "GEL", pSign: "p", sample: "GEL123,456,789.12" },
        GF: { value: "GF", name: "French Guiana", currency: "EUR", alpha2: "GF", alpha3: "GUF", dSep: ".", aSep: ",", dGroup: 3, aSign: "\u20ac", pSign: "p", sample: "\u20ac123,456,789.12" },
        GH: { value: "GH", name: "Ghana", currency: "GHS", alpha2: "GH", alpha3: "GHA", dSep: ".", aSep: ",", dGroup: 3, aSign: "GHS", pSign: "p", sample: "GHS123,456,789.12" },
        GI: { value: "GI", name: "Gibraltar", currency: "GIP", alpha2: "GI", alpha3: "GIB", dSep: ".", aSep: ",", dGroup: 3, aSign: "GIP", pSign: "p", sample: "GIP123,456,789.12" },
        GL: { value: "GL", name: "Greenland", currency: "DKK", alpha2: "GL", alpha3: "GRL", dSep: ".", aSep: ",", dGroup: 3, aSign: "DKK\u00a0", pSign: "p", sample: "DKK\u00a0123,456,789.12" },
        GM: { value: "GM", name: "Gambia", currency: "GMD", alpha2: "GM", alpha3: "GMB", dSep: ".", aSep: ",", dGroup: 3, aSign: "GMD", pSign: "p", sample: "GMD123,456,789.12" },
        GN: { value: "GN", name: "Guinea", currency: "GNF", alpha2: "GN", alpha3: "GIN", dSep: ".", aSep: ",", dGroup: 3, aSign: "GNF", pSign: "p", sample: "GNF123,456,789" },
        GP: { value: "GP", name: "Guadeloupe", currency: "EUR", alpha2: "GP", alpha3: "GLP", dSep: ".", aSep: ",", dGroup: 3, aSign: "\u20ac", pSign: "p", sample: "\u20ac123,456,789.12" },
        GQ: { value: "GQ", name: "Equatorial Guinea", currency: "XAF", alpha2: "GQ", alpha3: "GNQ", dSep: ".", aSep: ",", dGroup: 3, aSign: "FCFA", pSign: "p", sample: "FCFA123,456,789" },
        GR: { value: "GR", name: "Greece", currency: "EUR", alpha2: "GR", alpha3: "GRC", dSep: ".", aSep: ",", dGroup: 3, aSign: "\u20ac", pSign: "p", sample: "\u20ac123,456,789.12" },
        GS: { value: "GS", name: "South Georgia and the South Sandwich Islands", currency: "GBP", alpha2: "GS", alpha3: "SGS", dSep: ".", aSep: ",", dGroup: 3, aSign: "\u00a3", pSign: "p", sample: "\u00a3123,456,789.12" },
        GT: { value: "GT", name: "Guatemala", currency: "GTQ", alpha2: "GT", alpha3: "GTM", dSep: ".", aSep: ",", dGroup: 3, aSign: "GTQ", pSign: "p", sample: "GTQ123,456,789.12" },
        GU: { value: "GU", name: "Guam", currency: "USD", alpha2: "GU", alpha3: "GUM", dSep: ".", aSep: ",", dGroup: 2, aSign: "US$", pSign: "p", sample: "US$12,34,56,789.12" },
        GW: { value: "GW", name: "Guinea-Bissau", currency: "XOF", alpha2: "GW", alpha3: "GNB", dSep: ".", aSep: ",", dGroup: 3, aSign: "CFA", pSign: "p", sample: "CFA123,456,789" },
        GY: { value: "GY", name: "Guyana", currency: "GYD", alpha2: "GY", alpha3: "GUY", dSep: ".", aSep: ",", dGroup: 3, aSign: "GYD", pSign: "p", sample: "GYD123,456,789" },
        HK: { value: "HK", name: "Hong Kong", currency: "HKD", alpha2: "HK", alpha3: "HKG", dSep: ".", aSep: ",", dGroup: 3, aSign: "HK$", pSign: "p", sample: "HK$123,456,789.12" },
        HM: { value: "HM", name: "Heard and McDonald Islands", currency: "AUD", alpha2: "HM", alpha3: "HMD", dSep: ".", aSep: ",", dGroup: 3, aSign: "A$", pSign: "p", sample: "A$123,456,789.12" },
        HN: { value: "HN", name: "Honduras", currency: "HNL", alpha2: "HN", alpha3: "HND", dSep: ".", aSep: ",", dGroup: 3, aSign: "HNL", pSign: "p", sample: "HNL123,456,789.12" },
        HR: { value: "HR", name: "Croatia", currency: "HRK", alpha2: "HR", alpha3: "HRV", dSep: ",", aSep: ".", dGroup: 3, aSign: "\u00a0HRK", pSign: "s", sample: "123.456.789,12\u00a0HRK" },
        HT: { value: "HT", name: "Haiti", currency: "USD", alpha2: "HT", alpha3: "HTI", dSep: ".", aSep: ",", dGroup: 3, aSign: "$", pSign: "p", sample: "$123,456,789.12" },
        HU: { value: "HU", name: "Hungary", currency: "HUF", alpha2: "HU", alpha3: "HUN", dSep: ",", aSep: "\u00a0", dGroup: 3, aSign: "\u00a0Ft", pSign: "s", sample: "123\u00a0456\u00a0789,12\u00a0Ft" },
        ID: { value: "ID", name: "Indonesia", currency: "IDR", alpha2: "ID", alpha3: "IDN", dSep: ",", aSep: ".", dGroup: 3, aSign: "Rp", pSign: "p", sample: "Rp123.456.789" },
        IE: { value: "IE", name: "Ireland", currency: "EUR", alpha2: "IE", alpha3: "IRL", dSep: ".", aSep: ",", dGroup: 3, aSign: "\u20ac", pSign: "p", sample: "\u20ac123,456,789.12" },
        IL: { value: "IL", name: "Israel", currency: "ILS", alpha2: "IL", alpha3: "ISR", dSep: ".", aSep: ",", dGroup: 3, aSign: "\u20aa", pSign: "p", sample: "\u20aa123,456,789.12" },
        IN: { value: "IN", name: "India", currency: "INR", alpha2: "IN", alpha3: "IND", dSep: ",", aSep: ".", dGroup: 3, aSign: "Rs", pSign: "p", sample: "Rs123.456.789,12" },
        IO: { value: "IO", name: "British Indian Ocean Territory", currency: "USD", alpha2: "IO", alpha3: "IOT", dSep: ".", aSep: ",", dGroup: 3, aSign: "$", pSign: "p", sample: "$123,456,789.12" },
        IS: { value: "IS", name: "Iceland", currency: "ISK", alpha2: "IS", alpha3: "ISL", dSep: ".", aSep: ",", dGroup: 3, aSign: "ISK\u00a0", pSign: "p", sample: "ISK\u00a0123,456,789" },
        IT: { value: "IT", name: "Italy", currency: "EUR", alpha2: "IT", alpha3: "ITA", dSep: ",", aSep: ".", dGroup: 3, aSign: "\u00a0\u20ac", pSign: "s", sample: "123.456.789,12\u00a0\u20ac" },
        JM: { value: "JM", name: "Jamaica", currency: "JMD", alpha2: "JM", alpha3: "JAM", dSep: ".", aSep: ",", dGroup: 3, aSign: "JMD", pSign: "p", sample: "JMD123,456,789.12" },
        JO: { value: "JO", name: "Jordan", currency: "JOD", alpha2: "JO", alpha3: "JOR", dSep: ".", aSep: ",", dGroup: 3, aSign: "JOD", pSign: "p", sample: "JOD123,456,789.123" },
        JP: { value: "JP", name: "Japan", currency: "JPY", alpha2: "JP", alpha3: "JPN", dSep: ".", aSep: ",", dGroup: 3, aSign: "\u00a5", pSign: "p", sample: "\u00a5123,456,789" },
        KE: { value: "KE", name: "Kenya", currency: "KES", alpha2: "KE", alpha3: "KEN", dSep: ".", aSep: ",", dGroup: 3, aSign: "KES", pSign: "p", sample: "KES123,456,789.12" },
        KG: { value: "KG", name: "Kyrgyzstan", currency: "KGS", alpha2: "KG", alpha3: "KGZ", dSep: ".", aSep: ",", dGroup: 3, aSign: "KGS", pSign: "p", sample: "KGS123,456,789.12" },
        KH: { value: "KH", name: "Cambodia", currency: "KHR", alpha2: "KH", alpha3: "KHM", dSep: ".", aSep: ",", dGroup: 3, aSign: "KHR", pSign: "p", sample: "KHR123,456,789.12" },
        KI: { value: "KI", name: "Kiribati", currency: "AUD", alpha2: "KI", alpha3: "KIR", dSep: ".", aSep: ",", dGroup: 3, aSign: "A$", pSign: "p", sample: "A$123,456,789.12" },
        KM: { value: "KM", name: "Comoros", currency: "KMF", alpha2: "KM", alpha3: "COM", dSep: ".", aSep: ",", dGroup: 3, aSign: "KMF\u00a0", pSign: "p", sample: "KMF\u00a0123,456,789" },
        KN: { value: "KN", name: "Saint Kitts And Nevis", currency: "XCD", alpha2: "KN", alpha3: "KNA", dSep: ".", aSep: ",", dGroup: 3, aSign: "XCD", pSign: "p", sample: "XCD123,456,789.12" },
        KR: { value: "KR", name: "Korea, Republic of", currency: "KRW", alpha2: "KR", alpha3: "KOR", dSep: ".", aSep: ",", dGroup: 3, aSign: "\u20a9", pSign: "p", sample: "\u20a9123,456,789" },
        KW: { value: "KW", name: "Kuwait", currency: "KWD", alpha2: "KW", alpha3: "KWT", dSep: ".", aSep: ",", dGroup: 3, aSign: "KWD", pSign: "p", sample: "KWD123,456,789.123" },
        KY: { value: "KY", name: "Cayman Islands", currency: "KYD", alpha2: "KY", alpha3: "CYM", dSep: ".", aSep: ",", dGroup: 3, aSign: "KYD\u00a0", pSign: "p", sample: "KYD\u00a0123,456,789.12" },
        KZ: { value: "KZ", name: "Kazakhstan", currency: "KZT", alpha2: "KZ", alpha3: "KAZ", dSep: ".", aSep: ",", dGroup: 3, aSign: "KZT", pSign: "p", sample: "KZT123,456,789.12" },
        LA: { value: "LA", name: "Lao People's Democratic Republic", currency: "LAK", alpha2: "LA", alpha3: "LAO", dSep: ".", aSep: ",", dGroup: 3, aSign: "LAK", pSign: "p", sample: "LAK123,456,789" },
        LB: { value: "LB", name: "Lebanon", currency: "LBP", alpha2: "LB", alpha3: "LBN", dSep: ".", aSep: ",", dGroup: 3, aSign: "LBP", pSign: "p", sample: "LBP123,456,789" },
        LC: { value: "LC", name: "Saint Lucia", currency: "XCD", alpha2: "LC", alpha3: "LCA", dSep: ".", aSep: ",", dGroup: 3, aSign: "XCD", pSign: "p", sample: "XCD123,456,789.12" },
        LI: { value: "LI", name: "Liechtenstein", currency: "CHF", alpha2: "LI", alpha3: "LIE", dSep: ".", aSep: ",", dGroup: 3, aSign: "CHF", pSign: "p", sample: "CHF123,456,789.12" },
        LK: { value: "LK", name: "Sri Lanka", currency: "LKR", alpha2: "LK", alpha3: "LKA", dSep: ".", aSep: ",", dGroup: 3, aSign: "LKR", pSign: "p", sample: "LKR123,456,789.12" },
        LR: { value: "LR", name: "Liberia", currency: "LRD", alpha2: "LR", alpha3: "LBR", dSep: ".", aSep: ",", dGroup: 3, aSign: "LRD", pSign: "p", sample: "LRD123,456,789.12" },
        LS: { value: "LS", name: "Lesotho", currency: "LSL", alpha2: "LS", alpha3: "LSO", dSep: ".", aSep: ",", dGroup: 3, aSign: "LSL", pSign: "p", sample: "LSL123,456,789.12" },
        LT: { value: "LT", name: "Lithuania", currency: "LTL", alpha2: "LT", alpha3: "LTU", dSep: ",", aSep: "\u00a0", dGroup: 3, aSign: "\u00a0LTL", pSign: "s", sample: "123\u00a0456\u00a0789,12\u00a0LTL" },
        LU: { value: "LU", name: "Luxembourg", currency: "EUR", alpha2: "LU", alpha3: "LUX", dSep: ".", aSep: ",", dGroup: 3, aSign: "\u20ac", pSign: "p", sample: "\u20ac123,456,789.12" },
        LV: { value: "LV", name: "Latvia", currency: "LVL", alpha2: "LV", alpha3: "LVA", dSep: ",", aSep: "\u00a0", dGroup: 3, aSign: "\u00a0LVL", pSign: "s", sample: "123456789,12\u00a0LVL" },
        MA: { value: "MA", name: "Morocco", currency: "MAD", alpha2: "MA", alpha3: "MAR", dSep: ".", aSep: ",", dGroup: 3, aSign: "MAD", pSign: "p", sample: "MAD123,456,789.12" },
        MC: { value: "MC", name: "Monaco", currency: "EUR", alpha2: "MC", alpha3: "MCO", dSep: ".", aSep: ",", dGroup: 3, aSign: "\u20ac", pSign: "p", sample: "\u20ac123,456,789.12" },
        MD: { value: "MD", name: "Moldova, Republic of", currency: "MDL", alpha2: "MD", alpha3: "MDA", dSep: ".", aSep: ",", dGroup: 3, aSign: "MDL", pSign: "p", sample: "MDL123,456,789.12" },
        ME: { value: "ME", name: "Montenegro", currency: "EUR", alpha2: "ME", alpha3: "MNE", dSep: ".", aSep: ",", dGroup: 3, aSign: "\u20ac", pSign: "p", sample: "\u20ac123,456,789.12" },
        MG: { value: "MG", name: "Madagascar", currency: "MGA", alpha2: "MG", alpha3: "MDG", dSep: ".", aSep: ",", dGroup: 3, aSign: "MGA\u00a0", pSign: "p", sample: "MGA\u00a0123,456,789" },
        MH: { value: "MH", name: "Marshall Islands", currency: "USD", alpha2: "MH", alpha3: "MHL", dSep: ".", aSep: ",", dGroup: 3, aSign: "$", pSign: "p", sample: "$123,456,789.12" },
        ML: { value: "ML", name: "Mali", currency: "XOF", alpha2: "ML", alpha3: "MLI", dSep: ".", aSep: ",", dGroup: 2, aSign: "CFA", pSign: "p", sample: "CFA123,456,789" },
        MM: { value: "MM", name: "Myanmar", currency: "MNK", alpha2: "MM", alpha3: "MMR", dSep: ".", aSep: ",", dGroup: 3, aSign: "MNK", pSign: "p", sample: "MNK123,456,789.12" },
        MN: { value: "MN", name: "Mongolia", currency: "MNT", alpha2: "MN", alpha3: "MNG", dSep: ".", aSep: ",", dGroup: 3, aSign: "MNT\u00a0", pSign: "p", sample: "MNT\u00a0123,456,789" },
        MO: { value: "MO", name: "Macao", currency: "MOP", alpha2: "MO", alpha3: "MAC", dSep: ",", aSep: ".", dGroup: 3, aSign: "\u00a0MOP", pSign: "s", sample: "123.456.789,12\u00a0MOP" },
        MP: { value: "MP", name: "Northern Mariana Islands", currency: "USD", alpha2: "MP", alpha3: "MNP", dSep: ".", aSep: ",", dGroup: 3, aSign: "$", pSign: "p", sample: "$123,456,789.12" },
        MQ: { value: "MQ", name: "Martinique", currency: "EUR", alpha2: "MQ", alpha3: "MTQ", dSep: ".", aSep: ",", dGroup: 3, aSign: "\u20ac", pSign: "p", sample: "\u20ac123,456,789.12" },
        MR: {
            value: "MR",
            name: "Mauritania",
            currency: "MRO",
            alpha2: "MR",
            alpha3: "MRT",
            dSep: ".",
            aSep: ",",
            dGroup: 2,
            aSign: "MRO\u0967\u0968\u0969\u096a\u096b\u096c\u096d\u096e\u096f",
            pSign: "p",
            sample: "MRO\u0967\u0968\u0969,\u096a\u096b\u096c,\u096d\u096e\u096f",
        },
        MS: { value: "MS", name: "Montserrat", currency: "XCD", alpha2: "MS", alpha3: "MSR", dSep: ".", aSep: ",", dGroup: 3, aSign: "XCD", pSign: "p", sample: "XCD123,456,789.12" },
        MT: { value: "MT", name: "Malta", currency: "EUR", alpha2: "MT", alpha3: "MLT", dSep: ".", aSep: ",", dGroup: 3, aSign: "\u20ac\u00a0", pSign: "p", sample: "\u20ac\u00a0123,456,789.12" },
        MU: { value: "MU", name: "Mauritius", currency: "MUR", alpha2: "MU", alpha3: "MUS", dSep: ".", aSep: ",", dGroup: 3, aSign: "MUR", pSign: "p", sample: "MUR123,456,789" },
        MV: { value: "MV", name: "Maldives", currency: "MVR", alpha2: "MV", alpha3: "MDV", dSep: ".", aSep: ",", dGroup: 3, aSign: "MVR", pSign: "p", sample: "MVR123,456,789.12" },
        MW: { value: "MW", name: "Malawi", currency: "MWK", alpha2: "MW", alpha3: "MWI", dSep: ".", aSep: ",", dGroup: 3, aSign: "MWK", pSign: "p", sample: "MWK123,456,789.12" },
        MX: { value: "MX", name: "Mexico", currency: "MXN", alpha2: "MX", alpha3: "MEX", dSep: ".", aSep: ",", dGroup: 3, aSign: "MX$", pSign: "p", sample: "MX$123,456,789.12" },
        MY: { value: "MY", name: "Malaysia", currency: "MYR", alpha2: "MY", alpha3: "MYS", dSep: ".", aSep: ",", dGroup: 3, aSign: "MYR\u00a0", pSign: "p", sample: "MYR\u00a0123,456,789.12" },
        MZ: { value: "MZ", name: "Mozambique", currency: "MZN", alpha2: "MZ", alpha3: "MOZ", dSep: ".", aSep: ",", dGroup: 3, aSign: "MZN", pSign: "p", sample: "MZN123,456,789.12" },
        NA: { value: "NA", name: "Namibia", currency: "NAD", alpha2: "NA", alpha3: "NAM", dSep: ".", aSep: ",", dGroup: 3, aSign: "NAD", pSign: "p", sample: "NAD123,456,789.12" },
        NC: { value: "NC", name: "New Caledonia", currency: "XPF", alpha2: "NC", alpha3: "NCL", dSep: ".", aSep: ",", dGroup: 3, aSign: "XPF", pSign: "p", sample: "XPF123,456,789" },
        NE: { value: "NE", name: "Niger", currency: "XOF", alpha2: "NE", alpha3: "NER", dSep: ".", aSep: ",", dGroup: 3, aSign: "CFA\u00a0", pSign: "p", sample: "CFA\u00a0123,456,789" },
        NF: { value: "NF", name: "Norfolk Island", currency: "AUD", alpha2: "NF", alpha3: "NFK", dSep: ".", aSep: ",", dGroup: 3, aSign: "A$", pSign: "p", sample: "A$123,456,789.12" },
        NG: { value: "NG", name: "Nigeria", currency: "NGN", alpha2: "NG", alpha3: "NGA", dSep: ".", aSep: ",", dGroup: 3, aSign: "NGN", pSign: "p", sample: "NGN123,456,789.12" },
        NI: { value: "NI", name: "Nicaragua", currency: "NIO", alpha2: "NI", alpha3: "NIC", dSep: ".", aSep: ",", dGroup: 3, aSign: "NIO", pSign: "p", sample: "NIO123,456,789.12" },
        NL: { value: "NL", name: "Netherlands", currency: "EUR", alpha2: "NL", alpha3: "NLD", dSep: ",", aSep: ".", dGroup: 3, aSign: "\u20ac\u00a0", pSign: "p", sample: "\u20ac\u00a0123.456.789,12" },
        NO: { value: "NO", name: "Norway", currency: "NOK", alpha2: "NO", alpha3: "NOR", dSep: ".", aSep: ",", dGroup: 3, aSign: "NOK", pSign: "p", sample: "NOK123,456,789.12" },
        NP: { value: "NP", name: "Nepal", currency: "NPR", alpha2: "NP", alpha3: "NPL", dSep: ".", aSep: ",", dGroup: 3, aSign: "NPR", pSign: "p", sample: "NPR123,456,789.12" },
        NR: { value: "NR", name: "Nauru", currency: "AUD", alpha2: "NR", alpha3: "NRU", dSep: ".", aSep: ",", dGroup: 3, aSign: "A$", pSign: "p", sample: "A$123,456,789.12" },
        NU: { value: "NU", name: "Niue", currency: "NZD", alpha2: "NU", alpha3: "NIU", dSep: ".", aSep: ",", dGroup: 3, aSign: "NZ$", pSign: "p", sample: "NZ$123,456,789.12" },
        NZ: { value: "NZ", name: "New Zealand", currency: "NZD", alpha2: "NZ", alpha3: "NZL", dSep: ".", aSep: ",", dGroup: 3, aSign: "NZ$", pSign: "p", sample: "NZ$123,456,789.12" },
        OM: { value: "OM", name: "Oman", currency: "OMR", alpha2: "OM", alpha3: "OMN", dSep: ".", aSep: ",", dGroup: 3, aSign: "OMR\u00a0", pSign: "p", sample: "OMR\u00a0123,456,789.123" },
        PA: { value: "PA", name: "Panama", currency: "PAB", alpha2: "PA", alpha3: "PAN", dSep: ".", aSep: ",", dGroup: 3, aSign: "PAB\u00a0", pSign: "p", sample: "PAB\u00a0123,456,789.12" },
        PE: { value: "PE", name: "Peru", currency: "PEN", alpha2: "PE", alpha3: "PER", dSep: ".", aSep: ",", dGroup: 3, aSign: "PEN", pSign: "p", sample: "PEN123,456,789.12" },
        PF: { value: "PF", name: "French Polynesia", currency: "XPF", alpha2: "PF", alpha3: "PYF", dSep: ".", aSep: ",", dGroup: 3, aSign: "XPF", pSign: "p", sample: "XPF123,456,789" },
        PG: { value: "PG", name: "Papua New Guinea", currency: "PGK", alpha2: "PG", alpha3: "PNG", dSep: ".", aSep: ",", dGroup: 3, aSign: "PGK", pSign: "p", sample: "PGK123,456,789.12" },
        PH: { value: "PH", name: "Philippines", currency: "PHP", alpha2: "PH", alpha3: "PHL", dSep: ".", aSep: ",", dGroup: 3, aSign: "Php", pSign: "p", sample: "Php123,456,789.12" },
        PK: { value: "PK", name: "Pakistan", currency: "PKR", alpha2: "PK", alpha3: "PAK", dSep: ".", aSep: ",", dGroup: 3, aSign: "PKR", pSign: "p", sample: "PKR123,456,789" },
        PL: { value: "PL", name: "Poland", currency: "PLN", alpha2: "PL", alpha3: "POL", dSep: ",", aSep: "\u00a0", dGroup: 3, aSign: "\u00a0z\u0142", pSign: "s", sample: "123\u00a0456\u00a0789,12\u00a0z\u0142" },
        PM: { value: "PM", name: "Saint Pierre And Miquelon", currency: "EUR", alpha2: "PM", alpha3: "SPM", dSep: ".", aSep: ",", dGroup: 3, aSign: "\u20ac", pSign: "p", sample: "\u20ac123,456,789.12" },
        PN: { value: "PN", name: "Pitcairn", currency: "NZD", alpha2: "PN", alpha3: "PCN", dSep: ".", aSep: ",", dGroup: 3, aSign: "NZ$", pSign: "p", sample: "NZ$123,456,789.12" },
        PR: { value: "PR", name: "Puerto Rico", currency: "USD", alpha2: "PR", alpha3: "PRI", dSep: ".", aSep: ",", dGroup: 3, aSign: "$", pSign: "p", sample: "$123,456,789.12" },
        PT: { value: "PT", name: "Portugal", currency: "EUR", alpha2: "PT", alpha3: "PRT", dSep: ",", aSep: ".", dGroup: 3, aSign: "\u20ac", pSign: "p", sample: "\u20ac123.456.789,12" },
        PW: { value: "PW", name: "Palau", currency: "USD", alpha2: "PW", alpha3: "PLW", dSep: ".", aSep: ",", dGroup: 3, aSign: "$", pSign: "p", sample: "$123,456,789.12" },
        PY: { value: "PY", name: "Paraguay", currency: "PYG", alpha2: "PY", alpha3: "PRY", dSep: ".", aSep: ",", dGroup: 3, aSign: "PYG", pSign: "p", sample: "PYG123,456,789" },
        QA: { value: "QA", name: "Qatar", currency: "QAR", alpha2: "QA", alpha3: "QAT", dSep: ".", aSep: ",", dGroup: 3, aSign: "QAR", pSign: "p", sample: "QAR123,456,789.12" },
        RO: { value: "RO", name: "Romania", currency: "RON", alpha2: "RO", alpha3: "ROU", dSep: ",", aSep: ".", dGroup: 3, aSign: "\u00a0RON", pSign: "s", sample: "123.456.789,12\u00a0RON" },
        RU: { value: "RU", name: "Russian Federation", currency: "RUB", alpha2: "RU", alpha3: "RUS", dSep: ",", aSep: "\u00a0", dGroup: 3, aSign: "\u00a0\u20bd", pSign: "s", sample: "123\u00a0456\u00a0789,12\u00a0\u20bd" },
        SA: { value: "SA", name: "Saudi Arabia", currency: "SAR", alpha2: "SA", alpha3: "SAU", dSep: ".", aSep: ",", dGroup: 3, aSign: "SAR", pSign: "p", sample: "SAR123,456,789.12" },
        SB: { value: "SB", name: "Solomon Islands", currency: "SBD", alpha2: "SB", alpha3: "SLB", dSep: ".", aSep: ",", dGroup: 3, aSign: "SBD", pSign: "p", sample: "SBD123,456,789.12" },
        SC: { value: "SC", name: "Seychelles", currency: "SCR", alpha2: "SC", alpha3: "SYC", dSep: ".", aSep: ",", dGroup: 3, aSign: "SCR", pSign: "p", sample: "SCR123,456,789.12" },
        SE: { value: "SE", name: "Sweden", currency: "SEK", alpha2: "SE", alpha3: "SWE", dSep: ".", aSep: ",", dGroup: 3, aSign: "SEK", pSign: "p", sample: "SEK123,456,789.12" },
        SG: { value: "SG", name: "Singapore", currency: "SGD", alpha2: "SG", alpha3: "SGP", dSep: ".", aSep: ",", dGroup: 3, aSign: "SGD", pSign: "p", sample: "SGD123,456,789.12" },
        SH: { value: "SH", name: "Saint Helena", currency: "SHP", alpha2: "SH", alpha3: "SHN", dSep: ".", aSep: ",", dGroup: 3, aSign: "SHP", pSign: "p", sample: "SHP123,456,789.12" },
        SI: { value: "SI", name: "Slovenia", currency: "EUR", alpha2: "SI", alpha3: "SVN", dSep: ".", aSep: ",", dGroup: 3, aSign: "\u20ac\u00a0", pSign: "p", sample: "\u20ac\u00a0123,456,789.12" },
        SJ: { value: "SJ", name: "Svalbard And Jan Mayen", currency: "NOK", alpha2: "SJ", alpha3: "SJM", dSep: ".", aSep: ",", dGroup: 3, aSign: "NOK", pSign: "p", sample: "NOK123,456,789.12" },
        SK: { value: "SK", name: "Slovakia", currency: "EUR", alpha2: "SK", alpha3: "SVK", dSep: ",", aSep: "\u00a0", dGroup: 3, aSign: "\u00a0\u20ac", pSign: "s", sample: "123\u00a0456\u00a0789,12\u00a0\u20ac" },
        SL: { value: "SL", name: "Sierra Leone", currency: "SLL", alpha2: "SL", alpha3: "SLE", dSep: ",", aSep: ".", dGroup: 3, aSign: "\u00a0SLL", pSign: "s", sample: "123.456.789\u00a0SLL" },
        SM: { value: "SM", name: "San Marino", currency: "EUR", alpha2: "SM", alpha3: "SMR", dSep: ".", aSep: ",", dGroup: 3, aSign: "\u20ac", pSign: "p", sample: "\u20ac123,456,789.12" },
        SN: { value: "SN", name: "Senegal", currency: "XOF", alpha2: "SN", alpha3: "SEN", dSep: ".", aSep: ",", dGroup: 3, aSign: "CFA\u00a0", pSign: "p", sample: "CFA\u00a0123,456,789" },
        SO: { value: "SO", name: "Somalia", currency: "SOS", alpha2: "SO", alpha3: "SOM", dSep: ".", aSep: ",", dGroup: 3, aSign: "SOS\u00a0", pSign: "p", sample: "SOS\u00a0123,456,789" },
        SR: { value: "SR", name: "Suriname", currency: "SRD", alpha2: "SR", alpha3: "SUR", dSep: ",", aSep: ".", dGroup: 3, aSign: "\u00a0SRD", pSign: "s", sample: "123.456.789,12\u00a0SRD" },
        ST: { value: "ST", name: "Sao Tome and Principe", currency: "STD", alpha2: "ST", alpha3: "STP", dSep: ".", aSep: ",", dGroup: 3, aSign: "STD", pSign: "p", sample: "STD123,456,789" },
        SV: { value: "SV", name: "El Salvador", currency: "USD", alpha2: "SV", alpha3: "SLV", dSep: ",", aSep: "\u00a0", dGroup: 3, aSign: "\u00a0US$", pSign: "s", sample: "123\u00a0456\u00a0789,12\u00a0US$" },
        SY: { value: "SY", name: "Syrian Arab Republic", currency: "SYP", alpha2: "SY", alpha3: "SYR", dSep: ".", aSep: ",", dGroup: 3, aSign: "SYP", pSign: "p", sample: "SYP123,456,789" },
        SZ: { value: "SZ", name: "Swaziland", currency: "SZL", alpha2: "SZ", alpha3: "SWZ", dSep: ".", aSep: ",", dGroup: 3, aSign: "SZL", pSign: "p", sample: "SZL123,456,789.12" },
        TC: { value: "TC", name: "Turks and Caicos Islands", currency: "USD", alpha2: "TC", alpha3: "TCA", dSep: ".", aSep: ",", dGroup: 3, aSign: "$", pSign: "p", sample: "$123,456,789.12" },
        TD: { value: "TD", name: "Chad", currency: "XAF", alpha2: "TD", alpha3: "TCD", dSep: ".", aSep: ",", dGroup: 3, aSign: "FCFA", pSign: "p", sample: "FCFA123,456,789" },
        TF: { value: "TF", name: "French Southern Territories", currency: "EUR", alpha2: "TF", alpha3: "ATF", dSep: ".", aSep: ",", dGroup: 3, aSign: "\u20ac", pSign: "p", sample: "\u20ac123,456,789.12" },
        TG: { value: "TG", name: "Togo", currency: "XOF", alpha2: "TG", alpha3: "TGO", dSep: ".", aSep: ",", dGroup: 3, aSign: "CFA\u00a0", pSign: "p", sample: "CFA\u00a0123,456,789" },
        TH: { value: "TH", name: "Thailand", currency: "THB", alpha2: "TH", alpha3: "THA", dSep: ".", aSep: ",", dGroup: 3, aSign: "THB", pSign: "p", sample: "THB123,456,789.12" },
        TJ: { value: "TJ", name: "Tajikistan", currency: "TJS", alpha2: "TJ", alpha3: "TJK", dSep: ".", aSep: ",", dGroup: 3, aSign: "TJS", pSign: "p", sample: "TJS123,456,789.12" },
        TK: { value: "TK", name: "Tokelau", currency: "NZD", alpha2: "TK", alpha3: "TKL", dSep: ".", aSep: ",", dGroup: 3, aSign: "NZ$", pSign: "p", sample: "NZ$123,456,789.12" },
        TL: { value: "TL", name: "Timor-Leste", currency: "IDR", alpha2: "TL", alpha3: "TLS", dSep: ".", aSep: ",", dGroup: 3, aSign: "IDR", pSign: "p", sample: "IDR123,456,789" },
        TM: { value: "TM", name: "Turkmenistan", currency: "TMT", alpha2: "TM", alpha3: "TKM", dSep: ".", aSep: ",", dGroup: 3, aSign: "TMT", pSign: "p", sample: "TMT123,456,789.12" },
        TN: { value: "TN", name: "Tunisia", currency: "TND", alpha2: "TN", alpha3: "TUN", dSep: ".", aSep: ",", dGroup: 3, aSign: "TND", pSign: "p", sample: "TND123,456,789.123" },
        TO: { value: "TO", name: "Tonga", currency: "TOP", alpha2: "TO", alpha3: "TON", dSep: ".", aSep: ",", dGroup: 3, aSign: "TOP\u00a0", pSign: "p", sample: "TOP\u00a0123,456,789.12" },
        TR: { value: "TR", name: "Turkey", currency: "TRY", alpha2: "TR", alpha3: "TUR", dSep: ",", aSep: ".", dGroup: 3, aSign: "\u00a0\u20ba", pSign: "s", sample: "123.456.789,12\u00a0\u20ba" },
        TT: { value: "TT", name: "Trinidad and Tobago", currency: "TTD", alpha2: "TT", alpha3: "TTO", dSep: ".", aSep: ",", dGroup: 3, aSign: "TTD", pSign: "p", sample: "TTD123,456,789.12" },
        TV: { value: "TV", name: "Tuvalu", currency: "TVD", alpha2: "TV", alpha3: "TUV", dSep: ".", aSep: ",", dGroup: 3, aSign: "TVD", pSign: "p", sample: "TVD123,456,789.12" },
        TZ: { value: "TZ", name: "Tanzania, United Republic of", currency: "TZS", alpha2: "TZ", alpha3: "TZA", dSep: ".", aSep: ",", dGroup: 3, aSign: "TZS", pSign: "p", sample: "TZS123,456,789" },
        UA: { value: "UA", name: "Ukraine", currency: "UAH", alpha2: "UA", alpha3: "UKR", dSep: ".", aSep: ",", dGroup: 3, aSign: "UAH", pSign: "p", sample: "UAH123,456,789.12" },
        UG: { value: "UG", name: "Uganda", currency: "UGX", alpha2: "UG", alpha3: "UGA", dSep: ".", aSep: ",", dGroup: 3, aSign: "UGX", pSign: "p", sample: "UGX123,456,789" },
        UM: { value: "UM", name: "United States Minor Outlying Islands", currency: "USD", alpha2: "UM", alpha3: "UMI", dSep: ".", aSep: ",", dGroup: 3, aSign: "$", pSign: "p", sample: "$123,456,789.12" },
        US: { value: "US", name: "United States", currency: "USD", alpha2: "US", alpha3: "USA", dSep: ".", aSep: ",", dGroup: 3, aSign: "$", pSign: "p", sample: "$123,456,789.12" },
        UY: { value: "UY", name: "Uruguay", currency: "UYU", alpha2: "UY", alpha3: "URY", dSep: ".", aSep: ",", dGroup: 3, aSign: "UYU", pSign: "p", sample: "UYU123,456,789.12" },
        UZ: { value: "UZ", name: "Uzbekistan", currency: "UZS", alpha2: "UZ", alpha3: "UZB", dSep: ".", aSep: ",", dGroup: 3, aSign: "UZS\u00a0", pSign: "p", sample: "UZS\u00a0123,456,789" },
        VA: { value: "VA", name: "Holy See (Vatican City State)", currency: "EUR", alpha2: "VA", alpha3: "VAT", dSep: ".", aSep: ",", dGroup: 3, aSign: "\u20ac", pSign: "p", sample: "\u20ac123,456,789.12" },
        VC: { value: "VC", name: "Saint Vincent And The Grenedines", currency: "XCD", alpha2: "VC", alpha3: "VCT", dSep: ".", aSep: ",", dGroup: 3, aSign: "XCD", pSign: "p", sample: "XCD123,456,789.12" },
        VE: { value: "VE", name: "Venezuela, Bolivarian Republic of", currency: "VEF", alpha2: "VE", alpha3: "VEN", dSep: ".", aSep: ",", dGroup: 3, aSign: "VEF", pSign: "p", sample: "VEF123,456,789.12" },
        VG: { value: "VG", name: "Virgin Islands, British", currency: "USD", alpha2: "VG", alpha3: "VGB", dSep: ".", aSep: ",", dGroup: 3, aSign: "$", pSign: "p", sample: "$123,456,789.12" },
        VI: { value: "VI", name: "Virgin Islands, U.S.", currency: "USD", alpha2: "VI", alpha3: "VIR", dSep: ",", aSep: ".", dGroup: 3, aSign: "US$\u00a0", pSign: "p", sample: "US$\u00a0123.456.789,12" },
        VN: { value: "VN", name: "Viet Nam", currency: "VND", alpha2: "VN", alpha3: "VNM", dSep: ".", aSep: ",", dGroup: 3, aSign: "\u20ab", pSign: "p", sample: "\u20ab123,456,789" },
        VU: { value: "VU", name: "Vanuatu", currency: "VUV", alpha2: "VU", alpha3: "VUT", dSep: ".", aSep: ",", dGroup: 3, aSign: "VUV", pSign: "p", sample: "VUV123,456,789" },
        WF: { value: "WF", name: "Wallis and Futuna", currency: "XPF", alpha2: "WF", alpha3: "WLF", dSep: ".", aSep: ",", dGroup: 3, aSign: "XPF", pSign: "p", sample: "XPF123,456,789" },
        WS: { value: "WS", name: "Samoa", currency: "USD", alpha2: "WS", alpha3: "WSM", dSep: ".", aSep: ",", dGroup: 3, aSign: "$", pSign: "p", sample: "$123,456,789.12" },
        YE: { value: "YE", name: "Yemen", currency: "YER", alpha2: "YE", alpha3: "YEM", dSep: ".", aSep: ",", dGroup: 3, aSign: "YER", pSign: "p", sample: "YER123,456,789" },
        YT: { value: "YT", name: "Mayotte", currency: "EUR", alpha2: "YT", alpha3: "MYT", dSep: ".", aSep: ",", dGroup: 3, aSign: "\u20ac", pSign: "p", sample: "\u20ac123,456,789.12" },
        ZA: { value: "ZA", name: "South Africa", currency: "ZAR", alpha2: "ZA", alpha3: "ZAF", dSep: ".", aSep: ",", dGroup: 3, aSign: "ZAR", pSign: "p", sample: "ZAR123,456,789.12" },
        ZM: { value: "ZM", name: "Zambia", currency: "ZMK", alpha2: "ZM", alpha3: "ZMB", dSep: ".", aSep: ",", dGroup: 3, aSign: "ZMK", pSign: "p", sample: "ZMK123,456,789" },
        ZW: { value: "ZW", name: "Zimbabwe", currency: "ZWD", alpha2: "ZW", alpha3: "ZWE", dSep: ".", aSep: ",", dGroup: 3, aSign: "ZWD", pSign: "p", sample: "ZWD123,456,789" },
    };
    b.currencies = {
        EUR: { value: "EUR", name: "EUR", countries: "AD AT BE CY DE ES FI FR GF GP GR IE IT LU MC ME MF MQ MT NL PM PT RE SI SK SM TF VA YT".split(" ") },
        AED: { value: "AED", name: "AED", countries: ["AE"] },
        AFN: { value: "AFN", name: "AFN", countries: ["AF"] },
        XCD: { value: "XCD", name: "XCD", countries: "AG AI DM GD KN LC MS VC".split(" ") },
        ALL: { value: "ALL", name: "ALL", countries: ["AL"] },
        AMD: { value: "AMD", name: "AMD", countries: ["AM"] },
        ANG: { value: "ANG", name: "ANG", countries: ["AN"] },
        AOA: { value: "AOA", name: "AOA", countries: ["AO"] },
        null: { value: null, name: null, countries: "AX BL CD MG MK PS".split(" ") },
        AQD: { value: "AQD", name: "AQD", countries: ["AQ"] },
        ARS: { value: "ARS", name: "ARS", countries: ["AR"] },
        USD: { value: "USD", name: "USD", countries: "AS EC FJ FM GU HT IO MH MP PR PW SV TC UM US VG VI WS".split(" ") },
        AUD: { value: "AUD", name: "AUD", countries: "AU CC CX HM KI NF NR".split(" ") },
        AWG: { value: "AWG", name: "AWG", countries: ["AW"] },
        AZN: { value: "AZN", name: "AZN", countries: ["AZ"] },
        BAM: { value: "BAM", name: "BAM", countries: ["BA"] },
        BBD: { value: "BBD", name: "BBD", countries: ["BB"] },
        BTD: { value: "BTD", name: "BTD", countries: ["BD"] },
        XOF: { value: "XOF", name: "XOF", countries: "BF BJ CI GW ML NE SN TG".split(" ") },
        BGN: { value: "BGN", name: "BGN", countries: ["BG"] },
        BHD: { value: "BHD", name: "BHD", countries: ["BH"] },
        BIF: { value: "BIF", name: "BIF", countries: ["BI"] },
        BMD: { value: "BMD", name: "BMD", countries: ["BM"] },
        BND: { value: "BND", name: "BND", countries: ["BN"] },
        BOB: { value: "BOB", name: "BOB", countries: ["BO"] },
        BRL: { value: "BRL", name: "BRL", countries: ["BR"] },
        BSD: { value: "BSD", name: "BSD", countries: ["BS"] },
        BTN: { value: "BTN", name: "BTN", countries: ["BT"] },
        NOK: { value: "NOK", name: "NOK", countries: ["BV", "NO", "SJ"] },
        BWP: { value: "BWP", name: "BWP", countries: ["BW"] },
        BYR: { value: "BYR", name: "BYR", countries: ["BY"] },
        BZD: { value: "BZD", name: "BZD", countries: ["BZ"] },
        CAD: { value: "CAD", name: "CAD", countries: ["CA"] },
        XAF: { value: "XAF", name: "XAF", countries: "CF CG CM GA GQ TD".split(" ") },
        CHF: { value: "CHF", name: "CHF", countries: ["CH", "LI"] },
        NZD: { value: "NZD", name: "NZD", countries: ["CK", "NU", "NZ", "PN", "TK"] },
        CLP: { value: "CLP", name: "CLP", countries: ["CL"] },
        CNY: { value: "CNY", name: "CNY", countries: ["CN"] },
        COP: { value: "COP", name: "COP", countries: ["CO"] },
        CRC: { value: "CRC", name: "CRC", countries: ["CR"] },
        CUP: { value: "CUP", name: "CUP", countries: ["CU"] },
        CVE: { value: "CVE", name: "CVE", countries: ["CV"] },
        CZK: { value: "CZK", name: "CZK", countries: ["CZ"] },
        DJF: { value: "DJF", name: "DJF", countries: ["DJ"] },
        DKK: { value: "DKK", name: "DKK", countries: ["DK", "FO", "GL"] },
        DOP: { value: "DOP", name: "DOP", countries: ["DO"] },
        DZD: { value: "DZD", name: "DZD", countries: ["DZ"] },
        EEK: { value: "EEK", name: "EEK", countries: ["EE"] },
        EGP: { value: "EGP", name: "EGP", countries: ["EG"] },
        MAD: { value: "MAD", name: "MAD", countries: ["EH", "MA"] },
        ETB: { value: "ETB", name: "ETB", countries: ["ER", "ET"] },
        FKP: { value: "FKP", name: "FKP", countries: ["FK"] },
        GBP: { value: "GBP", name: "GBP", countries: ["GB", "GS"] },
        GEL: { value: "GEL", name: "GEL", countries: ["GE"] },
        GGP: { value: "GGP", name: "GGP", countries: ["GG"] },
        GHS: { value: "GHS", name: "GHS", countries: ["GH"] },
        GIP: { value: "GIP", name: "GIP", countries: ["GI"] },
        GMD: { value: "GMD", name: "GMD", countries: ["GM"] },
        GNF: { value: "GNF", name: "GNF", countries: ["GN"] },
        GTQ: { value: "GTQ", name: "GTQ", countries: ["GT"] },
        GYD: { value: "GYD", name: "GYD", countries: ["GY"] },
        HKD: { value: "HKD", name: "HKD", countries: ["HK"] },
        HNL: { value: "HNL", name: "HNL", countries: ["HN"] },
        HRK: { value: "HRK", name: "HRK", countries: ["HR"] },
        HUF: { value: "HUF", name: "HUF", countries: ["HU"] },
        IDR: { value: "IDR", name: "IDR", countries: ["ID", "TL"] },
        ILS: { value: "ILS", name: "ILS", countries: ["IL"] },
        IMP: { value: "IMP", name: "IMP", countries: ["IM"] },
        INR: { value: "INR", name: "INR", countries: ["IN"] },
        IQD: { value: "IQD", name: "IQD", countries: ["IQ"] },
        IRR: { value: "IRR", name: "IRR", countries: ["IR"] },
        ISK: { value: "ISK", name: "ISK", countries: ["IS"] },
        JEP: { value: "JEP", name: "JEP", countries: ["JE"] },
        JMD: { value: "JMD", name: "JMD", countries: ["JM"] },
        JOD: { value: "JOD", name: "JOD", countries: ["JO"] },
        JPY: { value: "JPY", name: "JPY", countries: ["JP"] },
        KES: { value: "KES", name: "KES", countries: ["KE"] },
        KGS: { value: "KGS", name: "KGS", countries: ["KG"] },
        KHR: { value: "KHR", name: "KHR", countries: ["KH"] },
        KMF: { value: "KMF", name: "KMF", countries: ["KM"] },
        KPW: { value: "KPW", name: "KPW", countries: ["KP"] },
        KRW: { value: "KRW", name: "KRW", countries: ["KR"] },
        KWD: { value: "KWD", name: "KWD", countries: ["KW"] },
        KYD: { value: "KYD", name: "KYD", countries: ["KY"] },
        KZT: { value: "KZT", name: "KZT", countries: ["KZ"] },
        LAK: { value: "LAK", name: "LAK", countries: ["LA"] },
        LBP: { value: "LBP", name: "LBP", countries: ["LB"] },
        LKR: { value: "LKR", name: "LKR", countries: ["LK"] },
        LRD: { value: "LRD", name: "LRD", countries: ["LR"] },
        LSL: { value: "LSL", name: "LSL", countries: ["LS"] },
        LTL: { value: "LTL", name: "LTL", countries: ["LT"] },
        LVL: { value: "LVL", name: "LVL", countries: ["LV"] },
        LYD: { value: "LYD", name: "LYD", countries: ["LY"] },
        MDL: { value: "MDL", name: "MDL", countries: ["MD"] },
        MGA: { value: "MGA", name: "MGA", countries: ["MG"] },
        MNK: { value: "MNK", name: "MNK", countries: ["MM"] },
        MNT: { value: "MNT", name: "MNT", countries: ["MN"] },
        MOP: { value: "MOP", name: "MOP", countries: ["MO"] },
        MRO: { value: "MRO", name: "MRO", countries: ["MR"] },
        MUR: { value: "MUR", name: "MUR", countries: ["MU"] },
        MVR: { value: "MVR", name: "MVR", countries: ["MV"] },
        MWK: { value: "MWK", name: "MWK", countries: ["MW"] },
        MXN: { value: "MXN", name: "MXN", countries: ["MX"] },
        MYR: { value: "MYR", name: "MYR", countries: ["MY"] },
        MZN: { value: "MZN", name: "MZN", countries: ["MZ"] },
        NAD: { value: "NAD", name: "NAD", countries: ["NA"] },
        XPF: { value: "XPF", name: "XPF", countries: ["NC", "PF", "WF"] },
        NGN: { value: "NGN", name: "NGN", countries: ["NG"] },
        NIO: { value: "NIO", name: "NIO", countries: ["NI"] },
        NPR: { value: "NPR", name: "NPR", countries: ["NP"] },
        OMR: { value: "OMR", name: "OMR", countries: ["OM"] },
        PAB: { value: "PAB", name: "PAB", countries: ["PA"] },
        PEN: { value: "PEN", name: "PEN", countries: ["PE"] },
        PGK: { value: "PGK", name: "PGK", countries: ["PG"] },
        PHP: { value: "PHP", name: "PHP", countries: ["PH"] },
        PKR: { value: "PKR", name: "PKR", countries: ["PK"] },
        PLN: { value: "PLN", name: "PLN", countries: ["PL"] },
        PYG: { value: "PYG", name: "PYG", countries: ["PY"] },
        QAR: { value: "QAR", name: "QAR", countries: ["QA"] },
        RON: { value: "RON", name: "RON", countries: ["RO"] },
        RSD: { value: "RSD", name: "RSD", countries: ["RS"] },
        RUB: { value: "RUB", name: "RUB", countries: ["RU"] },
        RWF: { value: "RWF", name: "RWF", countries: ["RW"] },
        SAR: { value: "SAR", name: "SAR", countries: ["SA"] },
        SBD: { value: "SBD", name: "SBD", countries: ["SB"] },
        SCR: { value: "SCR", name: "SCR", countries: ["SC"] },
        SDG: { value: "SDG", name: "SDG", countries: ["SD"] },
        SEK: { value: "SEK", name: "SEK", countries: ["SE"] },
        SGD: { value: "SGD", name: "SGD", countries: ["SG"] },
        SHP: { value: "SHP", name: "SHP", countries: ["SH"] },
        SLL: { value: "SLL", name: "SLL", countries: ["SL"] },
        SOS: { value: "SOS", name: "SOS", countries: ["SO"] },
        SRD: { value: "SRD", name: "SRD", countries: ["SR"] },
        STD: { value: "STD", name: "STD", countries: ["ST"] },
        SYP: { value: "SYP", name: "SYP", countries: ["SY"] },
        SZL: { value: "SZL", name: "SZL", countries: ["SZ"] },
        THB: { value: "THB", name: "THB", countries: ["TH"] },
        TJS: { value: "TJS", name: "TJS", countries: ["TJ"] },
        TMT: { value: "TMT", name: "TMT", countries: ["TM"] },
        TND: { value: "TND", name: "TND", countries: ["TN"] },
        TOP: { value: "TOP", name: "TOP", countries: ["TO"] },
        TRY: { value: "TRY", name: "TRY", countries: ["TR"] },
        TTD: { value: "TTD", name: "TTD", countries: ["TT"] },
        TVD: { value: "TVD", name: "TVD", countries: ["TV"] },
        TWD: { value: "TWD", name: "TWD", countries: ["TW"] },
        TZS: { value: "TZS", name: "TZS", countries: ["TZ"] },
        UAH: { value: "UAH", name: "UAH", countries: ["UA"] },
        UGX: { value: "UGX", name: "UGX", countries: ["UG"] },
        UYU: { value: "UYU", name: "UYU", countries: ["UY"] },
        UZS: { value: "UZS", name: "UZS", countries: ["UZ"] },
        VEF: { value: "VEF", name: "VEF", countries: ["VE"] },
        VND: { value: "VND", name: "VND", countries: ["VN"] },
        VUV: { value: "VUV", name: "VUV", countries: ["VU"] },
        YER: { value: "YER", name: "YER", countries: ["YE"] },
        ZAR: { value: "ZAR", name: "ZAR", countries: ["ZA"] },
        ZMK: { value: "ZMK", name: "ZMK", countries: ["ZM"] },
        ZWD: { value: "ZWD", name: "ZWD", countries: ["ZW"] },
    };
    b.findCountryByCode = function (a) {
        for (var c in b.countries) if (b.countries.hasOwnProperty(c) && (b.countries[c].alpha2 == a || b.countries[c].alpha3 == a)) return b.countries[c];
    };
    b.findCountryByNumber = function (a) {
        a = parseInt(a, 10);
        for (var c in b.countries) if (b.countries.hasOwnProperty(c) && parseInt(b.countries[c].number, 10) == a) return b.countries[c];
    };
    b.findCountryByName = function (a) {
        for (var c in b.countries) if (b.countries.hasOwnProperty(c) && (b.countries[c].name == a || (b.countries[c].names && -1 < b.countries[c].names.indexOf(a)))) return b.countries[c];
    };
    b.findCountriesByRegion = function (a) {
        var c = [],
            g;
        for (g in b.countries) b.countries.hasOwnProperty(g) && b.countries[g].region == a && c.push(b.countries[g]);
        return c.length ? c : void 0;
    };
    b.getSimpleCountryList = function () {
        var a = [],
            c;
        for (c in b.countries) a.push({ value: b.countries[c].value, name: b.countries[c].name });
        return a.sort(function (a, b) {
            return a.name < b.name ? -1 : a.name > b.name ? 1 : 0;
        });
    };
    b.getAllISOCodes = function () {
        return Object.keys(b.countries).sort(function (a, b) {
            return a < b ? -1 : a > b ? 1 : 0;
        });
    };
    b.findCurrency = function (a) {
        for (var c in b.currencies) if (b.currencies.hasOwnProperty(c) && b.currencies[c].value == a) return b.currencies[c];
    };
    b.checkCompatibility = function () {
        try {
            (0).toLocaleString("i");
        } catch (a) {
            return "RangeError" === a.name;
        }
        return !1;
    };
    b.checkCompatibility2 = function () {
        return !("object" != typeof Intl || !Intl || "function" != typeof Intl.NumberFormat);
    };
    b.formatCurrency = function (a) {
        var c = null;
        if (a || 0 === a)
            var c = BackboneConfig.country,
                g = b.findCountryByCode(c).currency,
                c = a.toLocaleString(c, { style: "currency", currency: g });
        return c;
    };
    b.getDecimalSeparator = function () {
        return (1.1).toLocaleString(BackboneConfig.country).substring(1, 2);
    };
    b.newList = {};
    b.createCurrencyDb = function () {
        var a = {},
            c = "",
            g = _.keys(I18n.t("envoy_backbone.countries")),
            f = "",
            k = "",
            h = /\s?[^0-9\(\?:\s,\.\)\+]\s?/gi,
            l = "",
            n = "p",
            q = ",",
            u = "3";
        _.each(g, function (g) {
            c = b.findCountryByCode(g).name;
            a = b.findCountryByCode(g);
            if ((f = a.currency))
                (k = (1.2345678912345e8).toLocaleString(g, { style: "currency", currency: f })),
                    (l = k.match(h).join("")),
                    (n = 0 < k.search(h) ? "s" : "p"),
                    (q = (1e3).toLocaleString(g).substring(1, 2)),
                    (u = _.indexOf((1.2345678912345e8).toLocaleString(g), q)),
                    (b.newList[g] = { value: g, name: c, currency: f, alpha2: a.alpha2, alpha3: a.alpha3, dSep: (1.1).toLocaleString(g).substring(1, 2), aSep: q, dGroup: u, aSign: l, pSign: n, sample: k });
        });
        console.log(JSON.stringify(b.newList));
    };
    b.getCurrencyFormat = function (a) {
        if (a) return (a = b.findCountryByCode(a)), { aSep: a.aSep, dGroup: a.dGroup, aDec: a.dSep, aSign: a.aSign, pSign: a.pSign, vMin: "0", wEmpty: "empty" };
    };
    b.getNumberFormat = function (a) {
        if (a) return (a = b.findCountryByCode(a)), { aSep: a.aSep, dGroup: a.dGroup, aDec: a.dSep, vMin: "0", wEmpty: "empty" };
    };
    b.sample = function () {
        var a = "locale;country;formatted\n";
        _.each(
            [
                { locale: "en-US", country: "US" },
                { locale: "en-GB", country: "GB" },
                { locale: "en-CA", country: "CA" },
                { locale: "en-AU", country: "AU" },
                { locale: "en-NZ", country: "NZ" },
                { locale: "fr", country: "FR" },
                { locale: "fr", country: "CA" },
                { locale: "es", country: "MX" },
                { locale: "es", country: "ES" },
                { locale: "it", country: "IT" },
                { locale: "nl", country: "NL" },
            ],
            function (c) {
                BackboneConfig.country = c.country;
                I18n.locale = c.locale;
                a += c.locale + ";" + c.country + ";" + b.formatCurrency(12.45) + "\n";
            }
        );
        console.log(a);
    };
})();
Backbone.View.prototype.assign = function (b, a) {
    var c = this;
    b = _.isArray(b) ? b : [b];
    _.each(b, function (b) {
        b.setElement(c.$(a)).render();
    });
};
if ("undefined" === typeof jQuery) throw Error("Bootstrap's JavaScript requires jQuery");
+(function (b) {
    b = b.fn.jquery.split(" ")[0].split(".");
    if ((2 > b[0] && 9 > b[1]) || (1 == b[0] && 9 == b[1] && 1 > b[2]) || 3 < b[0]) throw Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4");
})(jQuery);
+(function (b) {
    function a() {
        var a = document.createElement("bootstrap"),
            b = { WebkitTransition: "webkitTransitionEnd", MozTransition: "transitionend", OTransition: "oTransitionEnd otransitionend", transition: "transitionend" },
            e;
        for (e in b) if (void 0 !== a.style[e]) return { end: b[e] };
        return !1;
    }
    b.fn.emulateTransitionEnd = function (a) {
        var d = !1,
            e = this;
        b(this).one("bsTransitionEnd", function () {
            d = !0;
        });
        setTimeout(function () {
            d || b(e).trigger(b.support.transition.end);
        }, a);
        return this;
    };
    b(function () {
        b.support.transition = a();
        b.support.transition &&
            (b.event.special.bsTransitionEnd = {
                bindType: b.support.transition.end,
                delegateType: b.support.transition.end,
                handle: function (a) {
                    if (b(a.target).is(this)) return a.handleObj.handler.apply(this, arguments);
                },
            });
    });
})(jQuery);
+(function (b) {
    var a = function (a) {
        b(a).on("click", '[data-dismiss="alert"]', this.close);
    };
    a.VERSION = "3.3.7";
    a.TRANSITION_DURATION = 150;
    a.prototype.close = function (c) {
        function e() {
            k.detach().trigger("closed.bs.alert").remove();
        }
        var g = b(this),
            f = g.attr("data-target");
        f || (f = (f = g.attr("href")) && f.replace(/.*(?=#[^\s]*$)/, ""));
        var k = b("#" === f ? [] : f);
        c && c.preventDefault();
        k.length || (k = g.closest(".alert"));
        k.trigger((c = b.Event("close.bs.alert")));
        c.isDefaultPrevented() || (k.removeClass("in"), b.support.transition && k.hasClass("fade") ? k.one("bsTransitionEnd", e).emulateTransitionEnd(a.TRANSITION_DURATION) : e());
    };
    var c = b.fn.alert;
    b.fn.alert = function (c) {
        return this.each(function () {
            var e = b(this),
                g = e.data("bs.alert");
            g || e.data("bs.alert", (g = new a(this)));
            "string" == typeof c && g[c].call(e);
        });
    };
    b.fn.alert.Constructor = a;
    b.fn.alert.noConflict = function () {
        b.fn.alert = c;
        return this;
    };
    b(document).on("click.bs.alert.data-api", '[data-dismiss="alert"]', a.prototype.close);
})(jQuery);
+(function (b) {
    function a(a) {
        return this.each(function () {
            var d = b(this),
                f = d.data("bs.button"),
                k = "object" == typeof a && a;
            f || d.data("bs.button", (f = new c(this, k)));
            "toggle" == a ? f.toggle() : a && f.setState(a);
        });
    }
    var c = function (a, d) {
        this.$element = b(a);
        this.options = b.extend({}, c.DEFAULTS, d);
        this.isLoading = !1;
    };
    c.VERSION = "3.3.7";
    c.DEFAULTS = { loadingText: "loading..." };
    c.prototype.setState = function (a) {
        var c = this.$element,
            d = c.is("input") ? "val" : "html",
            k = c.data();
        a += "Text";
        null == k.resetText && c.data("resetText", c[d]());
        setTimeout(
            b.proxy(function () {
                c[d](null == k[a] ? this.options[a] : k[a]);
                "loadingText" == a
                    ? ((this.isLoading = !0), c.addClass("disabled").attr("disabled", "disabled").prop("disabled", !0))
                    : this.isLoading && ((this.isLoading = !1), c.removeClass("disabled").removeAttr("disabled").prop("disabled", !1));
            }, this),
            0
        );
    };
    c.prototype.toggle = function () {
        var a = !0,
            b = this.$element.closest('[data-toggle="buttons"]');
        if (b.length) {
            var c = this.$element.find("input");
            "radio" == c.prop("type")
                ? (c.prop("checked") && (a = !1), b.find(".active").removeClass("active"), this.$element.addClass("active"))
                : "checkbox" == c.prop("type") && (c.prop("checked") !== this.$element.hasClass("active") && (a = !1), this.$element.toggleClass("active"));
            c.prop("checked", this.$element.hasClass("active"));
            a && c.trigger("change");
        } else this.$element.attr("aria-pressed", !this.$element.hasClass("active")), this.$element.toggleClass("active");
    };
    var d = b.fn.button;
    b.fn.button = a;
    b.fn.button.Constructor = c;
    b.fn.button.noConflict = function () {
        b.fn.button = d;
        return this;
    };
    b(document)
        .on("click.bs.button.data-api", '[data-toggle^="button"]', function (c) {
            var d = b(c.target).closest(".btn");
            a.call(d, "toggle");
            b(c.target).is('input[type="radio"], input[type="checkbox"]') || (c.preventDefault(), d.is("input,button") ? d.trigger("focus") : d.find("input:visible,button:visible").first().trigger("focus"));
        })
        .on("focus.bs.button.data-api blur.bs.button.data-api", '[data-toggle^="button"]', function (a) {
            b(a.target)
                .closest(".btn")
                .toggleClass("focus", /^focus(in)?$/.test(a.type));
        });
})(jQuery);
+(function (b) {
    function a(a) {
        return this.each(function () {
            var d = b(this),
                e = d.data("bs.carousel"),
                h = b.extend({}, c.DEFAULTS, d.data(), "object" == typeof a && a),
                l = "string" == typeof a ? a : h.slide;
            e || d.data("bs.carousel", (e = new c(this, h)));
            if ("number" == typeof a) e.to(a);
            else if (l) e[l]();
            else h.interval && e.pause().cycle();
        });
    }
    var c = function (a, c) {
        this.$element = b(a);
        this.$indicators = this.$element.find(".carousel-indicators");
        this.options = c;
        this.$items = this.$active = this.interval = this.sliding = this.paused = null;
        this.options.keyboard && this.$element.on("keydown.bs.carousel", b.proxy(this.keydown, this));
        "hover" != this.options.pause || "ontouchstart" in document.documentElement || this.$element.on("mouseenter.bs.carousel", b.proxy(this.pause, this)).on("mouseleave.bs.carousel", b.proxy(this.cycle, this));
    };
    c.VERSION = "3.3.7";
    c.TRANSITION_DURATION = 600;
    c.DEFAULTS = { interval: 5e3, pause: "hover", wrap: !0, keyboard: !0 };
    c.prototype.keydown = function (a) {
        if (!/input|textarea/i.test(a.target.tagName)) {
            switch (a.which) {
                case 37:
                    this.prev();
                    break;
                case 39:
                    this.next();
                    break;
                default:
                    return;
            }
            a.preventDefault();
        }
    };
    c.prototype.cycle = function (a) {
        a || (this.paused = !1);
        this.interval && clearInterval(this.interval);
        this.options.interval && !this.paused && (this.interval = setInterval(b.proxy(this.next, this), this.options.interval));
        return this;
    };
    c.prototype.getItemIndex = function (a) {
        this.$items = a.parent().children(".item");
        return this.$items.index(a || this.$active);
    };
    c.prototype.getItemForDirection = function (a, b) {
        var c = this.getItemIndex(b);
        return (("prev" == a && 0 === c) || ("next" == a && c == this.$items.length - 1)) && !this.options.wrap ? b : this.$items.eq((c + ("prev" == a ? -1 : 1)) % this.$items.length);
    };
    c.prototype.to = function (a) {
        var b = this,
            c = this.getItemIndex((this.$active = this.$element.find(".item.active")));
        if (!(a > this.$items.length - 1 || 0 > a))
            return this.sliding
                ? this.$element.one("slid.bs.carousel", function () {
                      b.to(a);
                  })
                : c == a
                ? this.pause().cycle()
                : this.slide(a > c ? "next" : "prev", this.$items.eq(a));
    };
    c.prototype.pause = function (a) {
        a || (this.paused = !0);
        this.$element.find(".next, .prev").length && b.support.transition && (this.$element.trigger(b.support.transition.end), this.cycle(!0));
        this.interval = clearInterval(this.interval);
        return this;
    };
    c.prototype.next = function () {
        if (!this.sliding) return this.slide("next");
    };
    c.prototype.prev = function () {
        if (!this.sliding) return this.slide("prev");
    };
    c.prototype.slide = function (a, d) {
        var e = this.$element.find(".item.active"),
            h = d || this.getItemForDirection(a, e),
            l = this.interval,
            n = "next" == a ? "left" : "right",
            q = this;
        if (h.hasClass("active")) return (this.sliding = !1);
        var u = h[0],
            v = b.Event("slide.bs.carousel", { relatedTarget: u, direction: n });
        this.$element.trigger(v);
        if (!v.isDefaultPrevented()) {
            this.sliding = !0;
            l && this.pause();
            this.$indicators.length && (this.$indicators.find(".active").removeClass("active"), (v = b(this.$indicators.children()[this.getItemIndex(h)])) && v.addClass("active"));
            var w = b.Event("slid.bs.carousel", { relatedTarget: u, direction: n });
            b.support.transition && this.$element.hasClass("slide")
                ? (h.addClass(a),
                  h[0].offsetWidth,
                  e.addClass(n),
                  h.addClass(n),
                  e
                      .one("bsTransitionEnd", function () {
                          h.removeClass([a, n].join(" ")).addClass("active");
                          e.removeClass(["active", n].join(" "));
                          q.sliding = !1;
                          setTimeout(function () {
                              q.$element.trigger(w);
                          }, 0);
                      })
                      .emulateTransitionEnd(c.TRANSITION_DURATION))
                : (e.removeClass("active"), h.addClass("active"), (this.sliding = !1), this.$element.trigger(w));
            l && this.cycle();
            return this;
        }
    };
    var d = b.fn.carousel;
    b.fn.carousel = a;
    b.fn.carousel.Constructor = c;
    b.fn.carousel.noConflict = function () {
        b.fn.carousel = d;
        return this;
    };
    var e = function (c) {
        var d,
            e = b(this),
            h = b(e.attr("data-target") || ((d = e.attr("href")) && d.replace(/.*(?=#[^\s]+$)/, "")));
        if (h.hasClass("carousel")) {
            d = b.extend({}, h.data(), e.data());
            if ((e = e.attr("data-slide-to"))) d.interval = !1;
            a.call(h, d);
            e && h.data("bs.carousel").to(e);
            c.preventDefault();
        }
    };
    b(document).on("click.bs.carousel.data-api", "[data-slide]", e).on("click.bs.carousel.data-api", "[data-slide-to]", e);
    b(window).on("load", function () {
        b('[data-ride="carousel"]').each(function () {
            var c = b(this);
            a.call(c, c.data());
        });
    });
})(jQuery);
+(function (b) {
    function a(a) {
        var c;
        a = a.attr("data-target") || ((c = a.attr("href")) && c.replace(/.*(?=#[^\s]+$)/, ""));
        return b(a);
    }
    function c(a) {
        return this.each(function () {
            var c = b(this),
                e = c.data("bs.collapse"),
                h = b.extend({}, d.DEFAULTS, c.data(), "object" == typeof a && a);
            !e && h.toggle && /show|hide/.test(a) && (h.toggle = !1);
            e || c.data("bs.collapse", (e = new d(this, h)));
            if ("string" == typeof a) e[a]();
        });
    }
    var d = function (a, c) {
        this.$element = b(a);
        this.options = b.extend({}, d.DEFAULTS, c);
        this.$trigger = b('[data-toggle="collapse"][href="#' + a.id + '"],[data-toggle="collapse"][data-target="#' + a.id + '"]');
        this.transitioning = null;
        this.options.parent ? (this.$parent = this.getParent()) : this.addAriaAndCollapsedClass(this.$element, this.$trigger);
        this.options.toggle && this.toggle();
    };
    d.VERSION = "3.3.7";
    d.TRANSITION_DURATION = 350;
    d.DEFAULTS = { toggle: !0 };
    d.prototype.dimension = function () {
        return this.$element.hasClass("width") ? "width" : "height";
    };
    d.prototype.show = function () {
        if (!this.transitioning && !this.$element.hasClass("in")) {
            var a,
                e = this.$parent && this.$parent.children(".panel").children(".in, .collapsing");
            if (e && e.length && (a = e.data("bs.collapse")) && a.transitioning) return;
            var k = b.Event("show.bs.collapse");
            this.$element.trigger(k);
            if (!k.isDefaultPrevented()) {
                e && e.length && (c.call(e, "hide"), a || e.data("bs.collapse", null));
                var h = this.dimension();
                this.$element.removeClass("collapse").addClass("collapsing")[h](0).attr("aria-expanded", !0);
                this.$trigger.removeClass("collapsed").attr("aria-expanded", !0);
                this.transitioning = 1;
                a = function () {
                    this.$element.removeClass("collapsing").addClass("collapse in")[h]("");
                    this.transitioning = 0;
                    this.$element.trigger("shown.bs.collapse");
                };
                if (!b.support.transition) return a.call(this);
                e = b.camelCase(["scroll", h].join("-"));
                this.$element.one("bsTransitionEnd", b.proxy(a, this)).emulateTransitionEnd(d.TRANSITION_DURATION)[h](this.$element[0][e]);
            }
        }
    };
    d.prototype.hide = function () {
        if (!this.transitioning && this.$element.hasClass("in")) {
            var a = b.Event("hide.bs.collapse");
            this.$element.trigger(a);
            if (!a.isDefaultPrevented()) {
                a = this.dimension();
                this.$element[a](this.$element[a]())[0].offsetHeight;
                this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded", !1);
                this.$trigger.addClass("collapsed").attr("aria-expanded", !1);
                this.transitioning = 1;
                var c = function () {
                    this.transitioning = 0;
                    this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse");
                };
                if (!b.support.transition) return c.call(this);
                this.$element[a](0).one("bsTransitionEnd", b.proxy(c, this)).emulateTransitionEnd(d.TRANSITION_DURATION);
            }
        }
    };
    d.prototype.toggle = function () {
        this[this.$element.hasClass("in") ? "hide" : "show"]();
    };
    d.prototype.getParent = function () {
        return b(this.options.parent)
            .find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]')
            .each(
                b.proxy(function (c, d) {
                    var e = b(d);
                    this.addAriaAndCollapsedClass(a(e), e);
                }, this)
            )
            .end();
    };
    d.prototype.addAriaAndCollapsedClass = function (a, b) {
        var c = a.hasClass("in");
        a.attr("aria-expanded", c);
        b.toggleClass("collapsed", !c).attr("aria-expanded", c);
    };
    var e = b.fn.collapse;
    b.fn.collapse = c;
    b.fn.collapse.Constructor = d;
    b.fn.collapse.noConflict = function () {
        b.fn.collapse = e;
        return this;
    };
    b(document).on("click.bs.collapse.data-api", '[data-toggle="collapse"]', function (d) {
        var e = b(this);
        e.attr("data-target") || d.preventDefault();
        d = a(e);
        e = d.data("bs.collapse") ? "toggle" : e.data();
        c.call(d, e);
    });
})(jQuery);
+(function (b) {
    function a(a) {
        var c = a.attr("data-target");
        c || (c = (c = a.attr("href")) && /#[A-Za-z]/.test(c) && c.replace(/.*(?=#[^\s]*$)/, ""));
        return (c = c && b(c)) && c.length ? c : a.parent();
    }
    function c(c) {
        (c && 3 === c.which) ||
            (b(".dropdown-backdrop").remove(),
            b('[data-toggle="dropdown"]').each(function () {
                var d = b(this),
                    e = a(d),
                    h = { relatedTarget: this };
                !e.hasClass("open") ||
                    (c && "click" == c.type && /input|textarea/i.test(c.target.tagName) && b.contains(e[0], c.target)) ||
                    (e.trigger((c = b.Event("hide.bs.dropdown", h))), c.isDefaultPrevented() || (d.attr("aria-expanded", "false"), e.removeClass("open").trigger(b.Event("hidden.bs.dropdown", h))));
            }));
    }
    var d = function (a) {
        b(a).on("click.bs.dropdown", this.toggle);
    };
    d.VERSION = "3.3.7";
    d.prototype.toggle = function (d) {
        var e = b(this);
        if (!e.is(".disabled, :disabled")) {
            var k = a(e);
            d = k.hasClass("open");
            c();
            if (!d) {
                if ("ontouchstart" in document.documentElement && !k.closest(".navbar-nav").length) b(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(b(this)).on("click", c);
                var h = { relatedTarget: this };
                k.trigger((d = b.Event("show.bs.dropdown", h)));
                if (d.isDefaultPrevented()) return;
                e.trigger("focus").attr("aria-expanded", "true");
                k.toggleClass("open").trigger(b.Event("shown.bs.dropdown", h));
            }
            return !1;
        }
    };
    d.prototype.keydown = function (c) {
        if (/(38|40|27|32)/.test(c.which) && !/input|textarea/i.test(c.target.tagName)) {
            var d = b(this);
            c.preventDefault();
            c.stopPropagation();
            if (!d.is(".disabled, :disabled")) {
                var e = a(d),
                    h = e.hasClass("open");
                if ((!h && 27 != c.which) || (h && 27 == c.which)) return 27 == c.which && e.find('[data-toggle="dropdown"]').trigger("focus"), d.trigger("click");
                d = e.find(".dropdown-menu li:not(.disabled):visible a");
                d.length && ((e = d.index(c.target)), 38 == c.which && 0 < e && e--, 40 == c.which && e < d.length - 1 && e++, ~e || (e = 0), d.eq(e).trigger("focus"));
            }
        }
    };
    var e = b.fn.dropdown;
    b.fn.dropdown = function (a) {
        return this.each(function () {
            var c = b(this),
                e = c.data("bs.dropdown");
            e || c.data("bs.dropdown", (e = new d(this)));
            "string" == typeof a && e[a].call(c);
        });
    };
    b.fn.dropdown.Constructor = d;
    b.fn.dropdown.noConflict = function () {
        b.fn.dropdown = e;
        return this;
    };
    b(document)
        .on("click.bs.dropdown.data-api", c)
        .on("click.bs.dropdown.data-api", ".dropdown form", function (a) {
            a.stopPropagation();
        })
        .on("click.bs.dropdown.data-api", '[data-toggle="dropdown"]', d.prototype.toggle)
        .on("keydown.bs.dropdown.data-api", '[data-toggle="dropdown"]', d.prototype.keydown)
        .on("keydown.bs.dropdown.data-api", ".dropdown-menu", d.prototype.keydown);
})(jQuery);
+(function (b) {
    function a(a, d) {
        return this.each(function () {
            var f = b(this),
                k = f.data("bs.modal"),
                h = b.extend({}, c.DEFAULTS, f.data(), "object" == typeof a && a);
            k || f.data("bs.modal", (k = new c(this, h)));
            if ("string" == typeof a) k[a](d);
            else h.show && k.show(d);
        });
    }
    var c = function (a, c) {
        this.options = c;
        this.$body = b(document.body);
        this.$element = b(a);
        this.$dialog = this.$element.find(".modal-dialog");
        this.originalBodyPad = this.isShown = this.$backdrop = null;
        this.scrollbarWidth = 0;
        this.ignoreBackdropClick = !1;
        this.options.remote &&
            this.$element.find(".modal-content").load(
                this.options.remote,
                b.proxy(function () {
                    this.$element.trigger("loaded.bs.modal");
                }, this)
            );
    };
    c.VERSION = "3.3.7";
    c.TRANSITION_DURATION = 300;
    c.BACKDROP_TRANSITION_DURATION = 150;
    c.DEFAULTS = { backdrop: !0, keyboard: !0, show: !0 };
    c.prototype.toggle = function (a) {
        return this.isShown ? this.hide() : this.show(a);
    };
    c.prototype.show = function (a) {
        var d = this,
            f = b.Event("show.bs.modal", { relatedTarget: a });
        this.$element.trigger(f);
        this.isShown ||
            f.isDefaultPrevented() ||
            ((this.isShown = !0),
            this.checkScrollbar(),
            this.setScrollbar(),
            this.$body.addClass("modal-open"),
            this.escape(),
            this.resize(),
            this.$element.on("click.dismiss.bs.modal", '[data-dismiss="modal"]', b.proxy(this.hide, this)),
            this.$dialog.on("mousedown.dismiss.bs.modal", function () {
                d.$element.one("mouseup.dismiss.bs.modal", function (a) {
                    b(a.target).is(d.$element) && (d.ignoreBackdropClick = !0);
                });
            }),
            this.backdrop(function () {
                var f = b.support.transition && d.$element.hasClass("fade");
                d.$element.parent().length || d.$element.appendTo(d.$body);
                d.$element.show().scrollTop(0);
                d.adjustDialog();
                f && d.$element[0].offsetWidth;
                d.$element.addClass("in");
                d.enforceFocus();
                var h = b.Event("shown.bs.modal", { relatedTarget: a });
                f
                    ? d.$dialog
                          .one("bsTransitionEnd", function () {
                              d.$element.trigger("focus").trigger(h);
                          })
                          .emulateTransitionEnd(c.TRANSITION_DURATION)
                    : d.$element.trigger("focus").trigger(h);
            }));
    };
    c.prototype.hide = function (a) {
        a && a.preventDefault();
        a = b.Event("hide.bs.modal");
        this.$element.trigger(a);
        this.isShown &&
            !a.isDefaultPrevented() &&
            ((this.isShown = !1),
            this.escape(),
            this.resize(),
            b(document).off("focusin.bs.modal"),
            this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),
            this.$dialog.off("mousedown.dismiss.bs.modal"),
            b.support.transition && this.$element.hasClass("fade") ? this.$element.one("bsTransitionEnd", b.proxy(this.hideModal, this)).emulateTransitionEnd(c.TRANSITION_DURATION) : this.hideModal());
    };
    c.prototype.enforceFocus = function () {
        b(document)
            .off("focusin.bs.modal")
            .on(
                "focusin.bs.modal",
                b.proxy(function (a) {
                    document === a.target || this.$element[0] === a.target || this.$element.has(a.target).length || this.$element.trigger("focus");
                }, this)
            );
    };
    c.prototype.escape = function () {
        if (this.isShown && this.options.keyboard)
            this.$element.on(
                "keydown.dismiss.bs.modal",
                b.proxy(function (a) {
                    27 == a.which && this.hide();
                }, this)
            );
        else this.isShown || this.$element.off("keydown.dismiss.bs.modal");
    };
    c.prototype.resize = function () {
        if (this.isShown) b(window).on("resize.bs.modal", b.proxy(this.handleUpdate, this));
        else b(window).off("resize.bs.modal");
    };
    c.prototype.hideModal = function () {
        var a = this;
        this.$element.hide();
        this.backdrop(function () {
            a.$body.removeClass("modal-open");
            a.resetAdjustments();
            a.resetScrollbar();
            a.$element.trigger("hidden.bs.modal");
        });
    };
    c.prototype.removeBackdrop = function () {
        this.$backdrop && this.$backdrop.remove();
        this.$backdrop = null;
    };
    c.prototype.backdrop = function (a) {
        var d = this,
            f = this.$element.hasClass("fade") ? "fade" : "";
        if (this.isShown && this.options.backdrop) {
            var k = b.support.transition && f;
            this.$backdrop = b(document.createElement("div"))
                .addClass("modal-backdrop " + f)
                .appendTo(this.$body);
            this.$element.on(
                "click.dismiss.bs.modal",
                b.proxy(function (a) {
                    this.ignoreBackdropClick ? (this.ignoreBackdropClick = !1) : a.target === a.currentTarget && ("static" == this.options.backdrop ? this.$element[0].focus() : this.hide());
                }, this)
            );
            k && this.$backdrop[0].offsetWidth;
            this.$backdrop.addClass("in");
            a && (k ? this.$backdrop.one("bsTransitionEnd", a).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION) : a());
        } else
            !this.isShown && this.$backdrop
                ? (this.$backdrop.removeClass("in"),
                  (f = function () {
                      d.removeBackdrop();
                      a && a();
                  }),
                  b.support.transition && this.$element.hasClass("fade") ? this.$backdrop.one("bsTransitionEnd", f).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION) : f())
                : a && a();
    };
    c.prototype.handleUpdate = function () {
        this.adjustDialog();
    };
    c.prototype.adjustDialog = function () {
        var a = this.$element[0].scrollHeight > document.documentElement.clientHeight;
        this.$element.css({ paddingLeft: !this.bodyIsOverflowing && a ? this.scrollbarWidth : "", paddingRight: this.bodyIsOverflowing && !a ? this.scrollbarWidth : "" });
    };
    c.prototype.resetAdjustments = function () {
        this.$element.css({ paddingLeft: "", paddingRight: "" });
    };
    c.prototype.checkScrollbar = function () {
        var a = window.innerWidth;
        a || ((a = document.documentElement.getBoundingClientRect()), (a = a.right - Math.abs(a.left)));
        this.bodyIsOverflowing = document.body.clientWidth < a;
        this.scrollbarWidth = this.measureScrollbar();
    };
    c.prototype.setScrollbar = function () {
        var a = parseInt(this.$body.css("padding-right") || 0, 10);
        this.originalBodyPad = document.body.style.paddingRight || "";
        this.bodyIsOverflowing && this.$body.css("padding-right", a + this.scrollbarWidth);
    };
    c.prototype.resetScrollbar = function () {
        this.$body.css("padding-right", this.originalBodyPad);
    };
    c.prototype.measureScrollbar = function () {
        var a = document.createElement("div");
        a.className = "modal-scrollbar-measure";
        this.$body.append(a);
        var b = a.offsetWidth - a.clientWidth;
        this.$body[0].removeChild(a);
        return b;
    };
    var d = b.fn.modal;
    b.fn.modal = a;
    b.fn.modal.Constructor = c;
    b.fn.modal.noConflict = function () {
        b.fn.modal = d;
        return this;
    };
    b(document).on("click.bs.modal.data-api", '[data-toggle="modal"]', function (c) {
        var d = b(this),
            f = d.attr("href"),
            k = b(d.attr("data-target") || (f && f.replace(/.*(?=#[^\s]+$)/, ""))),
            f = k.data("bs.modal") ? "toggle" : b.extend({ remote: !/#/.test(f) && f }, k.data(), d.data());
        d.is("a") && c.preventDefault();
        k.one("show.bs.modal", function (a) {
            if (!a.isDefaultPrevented())
                k.one("hidden.bs.modal", function () {
                    d.is(":visible") && d.trigger("focus");
                });
        });
        a.call(k, f, this);
    });
})(jQuery);
+(function (b) {
    var a = function (a, b) {
        this.inState = this.$element = this.hoverState = this.timeout = this.enabled = this.options = this.type = null;
        this.init("tooltip", a, b);
    };
    a.VERSION = "3.3.7";
    a.TRANSITION_DURATION = 150;
    a.DEFAULTS = {
        animation: !0,
        placement: "top",
        selector: !1,
        template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
        trigger: "hover focus",
        title: "",
        delay: 0,
        html: !1,
        container: !1,
        viewport: { selector: "body", padding: 0 },
    };
    a.prototype.init = function (a, c, g) {
        this.enabled = !0;
        this.type = a;
        this.$element = b(c);
        this.options = this.getOptions(g);
        this.$viewport = this.options.viewport && b(b.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : this.options.viewport.selector || this.options.viewport);
        this.inState = { click: !1, hover: !1, focus: !1 };
        if (this.$element[0] instanceof document.constructor && !this.options.selector) throw Error("`selector` option must be specified when initializing " + this.type + " on the window.document object!");
        a = this.options.trigger.split(" ");
        for (c = a.length; c--; )
            if (((g = a[c]), "click" == g)) this.$element.on("click." + this.type, this.options.selector, b.proxy(this.toggle, this));
            else if ("manual" != g) {
                var f = "hover" == g ? "mouseleave" : "focusout";
                this.$element.on(("hover" == g ? "mouseenter" : "focusin") + "." + this.type, this.options.selector, b.proxy(this.enter, this));
                this.$element.on(f + "." + this.type, this.options.selector, b.proxy(this.leave, this));
            }
        this.options.selector ? (this._options = b.extend({}, this.options, { trigger: "manual", selector: "" })) : this.fixTitle();
    };
    a.prototype.getDefaults = function () {
        return a.DEFAULTS;
    };
    a.prototype.getOptions = function (a) {
        a = b.extend({}, this.getDefaults(), this.$element.data(), a);
        a.delay && "number" == typeof a.delay && (a.delay = { show: a.delay, hide: a.delay });
        return a;
    };
    a.prototype.getDelegateOptions = function () {
        var a = {},
            c = this.getDefaults();
        this._options &&
            b.each(this._options, function (b, f) {
                c[b] != f && (a[b] = f);
            });
        return a;
    };
    a.prototype.enter = function (a) {
        var c = a instanceof this.constructor ? a : b(a.currentTarget).data("bs." + this.type);
        c || ((c = new this.constructor(a.currentTarget, this.getDelegateOptions())), b(a.currentTarget).data("bs." + this.type, c));
        a instanceof b.Event && (c.inState["focusin" == a.type ? "focus" : "hover"] = !0);
        if (c.tip().hasClass("in") || "in" == c.hoverState) c.hoverState = "in";
        else {
            clearTimeout(c.timeout);
            c.hoverState = "in";
            if (!c.options.delay || !c.options.delay.show) return c.show();
            c.timeout = setTimeout(function () {
                "in" == c.hoverState && c.show();
            }, c.options.delay.show);
        }
    };
    a.prototype.isInStateTrue = function () {
        for (var a in this.inState) if (this.inState[a]) return !0;
        return !1;
    };
    a.prototype.leave = function (a) {
        var c = a instanceof this.constructor ? a : b(a.currentTarget).data("bs." + this.type);
        c || ((c = new this.constructor(a.currentTarget, this.getDelegateOptions())), b(a.currentTarget).data("bs." + this.type, c));
        a instanceof b.Event && (c.inState["focusout" == a.type ? "focus" : "hover"] = !1);
        if (!c.isInStateTrue()) {
            clearTimeout(c.timeout);
            c.hoverState = "out";
            if (!c.options.delay || !c.options.delay.hide) return c.hide();
            c.timeout = setTimeout(function () {
                "out" == c.hoverState && c.hide();
            }, c.options.delay.hide);
        }
    };
    a.prototype.show = function () {
        var c = b.Event("show.bs." + this.type);
        if (this.hasContent() && this.enabled) {
            this.$element.trigger(c);
            var e = b.contains(this.$element[0].ownerDocument.documentElement, this.$element[0]);
            if (!c.isDefaultPrevented() && e) {
                var g = this,
                    c = this.tip(),
                    e = this.getUID(this.type);
                this.setContent();
                c.attr("id", e);
                this.$element.attr("aria-describedby", e);
                this.options.animation && c.addClass("fade");
                var e = "function" == typeof this.options.placement ? this.options.placement.call(this, c[0], this.$element[0]) : this.options.placement,
                    f = /\s?auto?\s?/i,
                    k = f.test(e);
                k && (e = e.replace(f, "") || "top");
                c.detach()
                    .css({ top: 0, left: 0, display: "block" })
                    .addClass(e)
                    .data("bs." + this.type, this);
                this.options.container ? c.appendTo(this.options.container) : c.insertAfter(this.$element);
                this.$element.trigger("inserted.bs." + this.type);
                var f = this.getPosition(),
                    h = c[0].offsetWidth,
                    l = c[0].offsetHeight;
                if (k) {
                    var k = e,
                        n = this.getPosition(this.$viewport),
                        e = "bottom" == e && f.bottom + l > n.bottom ? "top" : "top" == e && f.top - l < n.top ? "bottom" : "right" == e && f.right + h > n.width ? "left" : "left" == e && f.left - h < n.left ? "right" : e;
                    c.removeClass(k).addClass(e);
                }
                f = this.getCalculatedOffset(e, f, h, l);
                this.applyPlacement(f, e);
                e = function () {
                    var a = g.hoverState;
                    g.$element.trigger("shown.bs." + g.type);
                    g.hoverState = null;
                    "out" == a && g.leave(g);
                };
                b.support.transition && this.$tip.hasClass("fade") ? c.one("bsTransitionEnd", e).emulateTransitionEnd(a.TRANSITION_DURATION) : e();
            }
        }
    };
    a.prototype.applyPlacement = function (a, c) {
        var g = this.tip(),
            f = g[0].offsetWidth,
            k = g[0].offsetHeight,
            h = parseInt(g.css("margin-top"), 10),
            l = parseInt(g.css("margin-left"), 10);
        isNaN(h) && (h = 0);
        isNaN(l) && (l = 0);
        a.top += h;
        a.left += l;
        b.offset.setOffset(
            g[0],
            b.extend(
                {
                    using: function (a) {
                        g.css({ top: Math.round(a.top), left: Math.round(a.left) });
                    },
                },
                a
            ),
            0
        );
        g.addClass("in");
        var l = g[0].offsetWidth,
            n = g[0].offsetHeight;
        "top" == c && n != k && (a.top = a.top + k - n);
        var q = this.getViewportAdjustedDelta(c, a, l, n);
        q.left ? (a.left += q.left) : (a.top += q.top);
        f = (h = /top|bottom/.test(c)) ? 2 * q.left - f + l : 2 * q.top - k + n;
        k = h ? "offsetWidth" : "offsetHeight";
        g.offset(a);
        this.replaceArrow(f, g[0][k], h);
    };
    a.prototype.replaceArrow = function (a, b, c) {
        this.arrow()
            .css(c ? "left" : "top", 50 * (1 - a / b) + "%")
            .css(c ? "top" : "left", "");
    };
    a.prototype.setContent = function () {
        var a = this.tip(),
            b = this.getTitle();
        a.find(".tooltip-inner")[this.options.html ? "html" : "text"](b);
        a.removeClass("fade in top bottom left right");
    };
    a.prototype.hide = function (c) {
        function e() {
            "in" != g.hoverState && f.detach();
            g.$element && g.$element.removeAttr("aria-describedby").trigger("hidden.bs." + g.type);
            c && c();
        }
        var g = this,
            f = b(this.$tip),
            k = b.Event("hide.bs." + this.type);
        this.$element.trigger(k);
        if (!k.isDefaultPrevented()) return f.removeClass("in"), b.support.transition && f.hasClass("fade") ? f.one("bsTransitionEnd", e).emulateTransitionEnd(a.TRANSITION_DURATION) : e(), (this.hoverState = null), this;
    };
    a.prototype.fixTitle = function () {
        var a = this.$element;
        (a.attr("title") || "string" != typeof a.attr("data-original-title")) && a.attr("data-original-title", a.attr("title") || "").attr("title", "");
    };
    a.prototype.hasContent = function () {
        return this.getTitle();
    };
    a.prototype.getPosition = function (a) {
        a = a || this.$element;
        var c = a[0],
            g = "BODY" == c.tagName,
            f = c.getBoundingClientRect();
        null == f.width && (f = b.extend({}, f, { width: f.right - f.left, height: f.bottom - f.top }));
        c = window.SVGElement && c instanceof window.SVGElement;
        c = g ? { top: 0, left: 0 } : c ? null : a.offset();
        a = { scroll: g ? document.documentElement.scrollTop || document.body.scrollTop : a.scrollTop() };
        g = g ? { width: b(window).width(), height: b(window).height() } : null;
        return b.extend({}, f, a, g, c);
    };
    a.prototype.getCalculatedOffset = function (a, b, c, f) {
        return "bottom" == a
            ? { top: b.top + b.height, left: b.left + b.width / 2 - c / 2 }
            : "top" == a
            ? { top: b.top - f, left: b.left + b.width / 2 - c / 2 }
            : "left" == a
            ? { top: b.top + b.height / 2 - f / 2, left: b.left - c }
            : { top: b.top + b.height / 2 - f / 2, left: b.left + b.width };
    };
    a.prototype.getViewportAdjustedDelta = function (a, b, c, f) {
        var k = { top: 0, left: 0 };
        if (!this.$viewport) return k;
        var h = (this.options.viewport && this.options.viewport.padding) || 0,
            l = this.getPosition(this.$viewport);
        /right|left/.test(a)
            ? ((c = b.top - h - l.scroll), (b = b.top + h - l.scroll + f), c < l.top ? (k.top = l.top - c) : b > l.top + l.height && (k.top = l.top + l.height - b))
            : ((f = b.left - h), (b = b.left + h + c), f < l.left ? (k.left = l.left - f) : b > l.right && (k.left = l.left + l.width - b));
        return k;
    };
    a.prototype.getTitle = function () {
        var a = this.$element,
            b = this.options;
        return a.attr("data-original-title") || ("function" == typeof b.title ? b.title.call(a[0]) : b.title);
    };
    a.prototype.getUID = function (a) {
        do a += ~~(1e6 * Math.random());
        while (document.getElementById(a));
        return a;
    };
    a.prototype.tip = function () {
        if (!this.$tip && ((this.$tip = b(this.options.template)), 1 != this.$tip.length)) throw Error(this.type + " `template` option must consist of exactly 1 top-level element!");
        return this.$tip;
    };
    a.prototype.arrow = function () {
        return (this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow"));
    };
    a.prototype.enable = function () {
        this.enabled = !0;
    };
    a.prototype.disable = function () {
        this.enabled = !1;
    };
    a.prototype.toggleEnabled = function () {
        this.enabled = !this.enabled;
    };
    a.prototype.toggle = function (a) {
        var c = this;
        a && ((c = b(a.currentTarget).data("bs." + this.type)), c || ((c = new this.constructor(a.currentTarget, this.getDelegateOptions())), b(a.currentTarget).data("bs." + this.type, c)));
        a ? ((c.inState.click = !c.inState.click), c.isInStateTrue() ? c.enter(c) : c.leave(c)) : c.tip().hasClass("in") ? c.leave(c) : c.enter(c);
    };
    a.prototype.destroy = function () {
        var a = this;
        clearTimeout(this.timeout);
        this.hide(function () {
            a.$element.off("." + a.type).removeData("bs." + a.type);
            a.$tip && a.$tip.detach();
            a.$tip = null;
            a.$arrow = null;
            a.$viewport = null;
            a.$element = null;
        });
    };
    var c = b.fn.tooltip;
    b.fn.tooltip = function (c) {
        return this.each(function () {
            var e = b(this),
                g = e.data("bs.tooltip"),
                f = "object" == typeof c && c;
            if (g || !/destroy|hide/.test(c)) if ((g || e.data("bs.tooltip", (g = new a(this, f))), "string" == typeof c)) g[c]();
        });
    };
    b.fn.tooltip.Constructor = a;
    b.fn.tooltip.noConflict = function () {
        b.fn.tooltip = c;
        return this;
    };
})(jQuery);
+(function (b) {
    var a = function (a, b) {
        this.init("popover", a, b);
    };
    if (!b.fn.tooltip) throw Error("Popover requires tooltip.js");
    a.VERSION = "3.3.7";
    a.DEFAULTS = b.extend({}, b.fn.tooltip.Constructor.DEFAULTS, {
        placement: "right",
        trigger: "click",
        content: "",
        template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>',
    });
    a.prototype = b.extend({}, b.fn.tooltip.Constructor.prototype);
    a.prototype.constructor = a;
    a.prototype.getDefaults = function () {
        return a.DEFAULTS;
    };
    a.prototype.setContent = function () {
        var a = this.tip(),
            b = this.getTitle(),
            c = this.getContent();
        a.find(".popover-title")[this.options.html ? "html" : "text"](b);
        a.find(".popover-content").children().detach().end()[this.options.html ? ("string" == typeof c ? "html" : "append") : "text"](c);
        a.removeClass("fade top bottom left right in");
        a.find(".popover-title").html() || a.find(".popover-title").hide();
    };
    a.prototype.hasContent = function () {
        return this.getTitle() || this.getContent();
    };
    a.prototype.getContent = function () {
        var a = this.$element,
            b = this.options;
        return a.attr("data-content") || ("function" == typeof b.content ? b.content.call(a[0]) : b.content);
    };
    a.prototype.arrow = function () {
        return (this.$arrow = this.$arrow || this.tip().find(".arrow"));
    };
    var c = b.fn.popover;
    b.fn.popover = function (c) {
        return this.each(function () {
            var e = b(this),
                g = e.data("bs.popover"),
                f = "object" == typeof c && c;
            if (g || !/destroy|hide/.test(c)) if ((g || e.data("bs.popover", (g = new a(this, f))), "string" == typeof c)) g[c]();
        });
    };
    b.fn.popover.Constructor = a;
    b.fn.popover.noConflict = function () {
        b.fn.popover = c;
        return this;
    };
})(jQuery);
+(function (b) {
    function a(c, d) {
        this.$body = b(document.body);
        this.$scrollElement = b(c).is(document.body) ? b(window) : b(c);
        this.options = b.extend({}, a.DEFAULTS, d);
        this.selector = (this.options.target || "") + " .nav li > a";
        this.offsets = [];
        this.targets = [];
        this.activeTarget = null;
        this.scrollHeight = 0;
        this.$scrollElement.on("scroll.bs.scrollspy", b.proxy(this.process, this));
        this.refresh();
        this.process();
    }
    function c(c) {
        return this.each(function () {
            var d = b(this),
                f = d.data("bs.scrollspy"),
                k = "object" == typeof c && c;
            f || d.data("bs.scrollspy", (f = new a(this, k)));
            if ("string" == typeof c) f[c]();
        });
    }
    a.VERSION = "3.3.7";
    a.DEFAULTS = { offset: 10 };
    a.prototype.getScrollHeight = function () {
        return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight);
    };
    a.prototype.refresh = function () {
        var a = this,
            c = "offset",
            d = 0;
        this.offsets = [];
        this.targets = [];
        this.scrollHeight = this.getScrollHeight();
        b.isWindow(this.$scrollElement[0]) || ((c = "position"), (d = this.$scrollElement.scrollTop()));
        this.$body
            .find(this.selector)
            .map(function () {
                var a = b(this),
                    a = a.data("target") || a.attr("href"),
                    e = /^#./.test(a) && b(a);
                return (e && e.length && e.is(":visible") && [[e[c]().top + d, a]]) || null;
            })
            .sort(function (a, b) {
                return a[0] - b[0];
            })
            .each(function () {
                a.offsets.push(this[0]);
                a.targets.push(this[1]);
            });
    };
    a.prototype.process = function () {
        var a = this.$scrollElement.scrollTop() + this.options.offset,
            b = this.getScrollHeight(),
            c = this.options.offset + b - this.$scrollElement.height(),
            d = this.offsets,
            h = this.targets,
            l = this.activeTarget,
            n;
        this.scrollHeight != b && this.refresh();
        if (a >= c) return l != (n = h[h.length - 1]) && this.activate(n);
        if (l && a < d[0]) return (this.activeTarget = null), this.clear();
        for (n = d.length; n--; ) l != h[n] && a >= d[n] && (void 0 === d[n + 1] || a < d[n + 1]) && this.activate(h[n]);
    };
    a.prototype.activate = function (a) {
        this.activeTarget = a;
        this.clear();
        a = b(this.selector + '[data-target="' + a + '"],' + this.selector + '[href="' + a + '"]')
            .parents("li")
            .addClass("active");
        a.parent(".dropdown-menu").length && (a = a.closest("li.dropdown").addClass("active"));
        a.trigger("activate.bs.scrollspy");
    };
    a.prototype.clear = function () {
        b(this.selector).parentsUntil(this.options.target, ".active").removeClass("active");
    };
    var d = b.fn.scrollspy;
    b.fn.scrollspy = c;
    b.fn.scrollspy.Constructor = a;
    b.fn.scrollspy.noConflict = function () {
        b.fn.scrollspy = d;
        return this;
    };
    b(window).on("load.bs.scrollspy.data-api", function () {
        b('[data-spy="scroll"]').each(function () {
            var a = b(this);
            c.call(a, a.data());
        });
    });
})(jQuery);
+(function (b) {
    function a(a) {
        return this.each(function () {
            var d = b(this),
                e = d.data("bs.tab");
            e || d.data("bs.tab", (e = new c(this)));
            if ("string" == typeof a) e[a]();
        });
    }
    var c = function (a) {
        this.element = b(a);
    };
    c.VERSION = "3.3.7";
    c.TRANSITION_DURATION = 150;
    c.prototype.show = function () {
        var a = this.element,
            c = a.closest("ul:not(.dropdown-menu)"),
            d = a.data("target");
        d || (d = (d = a.attr("href")) && d.replace(/.*(?=#[^\s]*$)/, ""));
        if (!a.parent("li").hasClass("active")) {
            var e = c.find(".active:last a"),
                l = b.Event("hide.bs.tab", { relatedTarget: a[0] }),
                n = b.Event("show.bs.tab", { relatedTarget: e[0] });
            e.trigger(l);
            a.trigger(n);
            n.isDefaultPrevented() ||
                l.isDefaultPrevented() ||
                ((d = b(d)),
                this.activate(a.closest("li"), c),
                this.activate(d, d.parent(), function () {
                    e.trigger({ type: "hidden.bs.tab", relatedTarget: a[0] });
                    a.trigger({ type: "shown.bs.tab", relatedTarget: e[0] });
                }));
        }
    };
    c.prototype.activate = function (a, d, e) {
        function h() {
            l.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded", !1);
            a.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded", !0);
            n ? (a[0].offsetWidth, a.addClass("in")) : a.removeClass("fade");
            a.parent(".dropdown-menu").length && a.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded", !0);
            e && e();
        }
        var l = d.find("> .active"),
            n = e && b.support.transition && ((l.length && l.hasClass("fade")) || !!d.find("> .fade").length);
        l.length && n ? l.one("bsTransitionEnd", h).emulateTransitionEnd(c.TRANSITION_DURATION) : h();
        l.removeClass("in");
    };
    var d = b.fn.tab;
    b.fn.tab = a;
    b.fn.tab.Constructor = c;
    b.fn.tab.noConflict = function () {
        b.fn.tab = d;
        return this;
    };
    var e = function (c) {
        c.preventDefault();
        a.call(b(this), "show");
    };
    b(document).on("click.bs.tab.data-api", '[data-toggle="tab"]', e).on("click.bs.tab.data-api", '[data-toggle="pill"]', e);
})(jQuery);
+(function (b) {
    function a(a) {
        return this.each(function () {
            var d = b(this),
                f = d.data("bs.affix"),
                k = "object" == typeof a && a;
            f || d.data("bs.affix", (f = new c(this, k)));
            if ("string" == typeof a) f[a]();
        });
    }
    var c = function (a, d) {
        this.options = b.extend({}, c.DEFAULTS, d);
        this.$target = b(this.options.target).on("scroll.bs.affix.data-api", b.proxy(this.checkPosition, this)).on("click.bs.affix.data-api", b.proxy(this.checkPositionWithEventLoop, this));
        this.$element = b(a);
        this.pinnedOffset = this.unpin = this.affixed = null;
        this.checkPosition();
    };
    c.VERSION = "3.3.7";
    c.RESET = "affix affix-top affix-bottom";
    c.DEFAULTS = { offset: 0, target: window };
    c.prototype.getState = function (a, b, c, d) {
        var h = this.$target.scrollTop(),
            l = this.$element.offset(),
            n = this.$target.height();
        if (null != c && "top" == this.affixed) return h < c ? "top" : !1;
        if ("bottom" == this.affixed) return null != c ? (h + this.unpin <= l.top ? !1 : "bottom") : h + n <= a - d ? !1 : "bottom";
        var q = null == this.affixed,
            l = q ? h : l.top;
        return null != c && h <= c ? "top" : null != d && l + (q ? n : b) >= a - d ? "bottom" : !1;
    };
    c.prototype.getPinnedOffset = function () {
        if (this.pinnedOffset) return this.pinnedOffset;
        this.$element.removeClass(c.RESET).addClass("affix");
        var a = this.$target.scrollTop();
        return (this.pinnedOffset = this.$element.offset().top - a);
    };
    c.prototype.checkPositionWithEventLoop = function () {
        setTimeout(b.proxy(this.checkPosition, this), 1);
    };
    c.prototype.checkPosition = function () {
        if (this.$element.is(":visible")) {
            var a = this.$element.height(),
                d = this.options.offset,
                f = d.top,
                k = d.bottom,
                h = Math.max(b(document).height(), b(document.body).height());
            "object" != typeof d && (k = f = d);
            "function" == typeof f && (f = d.top(this.$element));
            "function" == typeof k && (k = d.bottom(this.$element));
            d = this.getState(h, a, f, k);
            if (this.affixed != d) {
                null != this.unpin && this.$element.css("top", "");
                var f = "affix" + (d ? "-" + d : ""),
                    l = b.Event(f + ".bs.affix");
                this.$element.trigger(l);
                if (l.isDefaultPrevented()) return;
                this.affixed = d;
                this.unpin = "bottom" == d ? this.getPinnedOffset() : null;
                this.$element
                    .removeClass(c.RESET)
                    .addClass(f)
                    .trigger(f.replace("affix", "affixed") + ".bs.affix");
            }
            "bottom" == d && this.$element.offset({ top: h - a - k });
        }
    };
    var d = b.fn.affix;
    b.fn.affix = a;
    b.fn.affix.Constructor = c;
    b.fn.affix.noConflict = function () {
        b.fn.affix = d;
        return this;
    };
    b(window).on("load", function () {
        b('[data-spy="affix"]').each(function () {
            var c = b(this),
                d = c.data();
            d.offset = d.offset || {};
            null != d.offsetBottom && (d.offset.bottom = d.offsetBottom);
            null != d.offsetTop && (d.offset.top = d.offsetTop);
            a.call(c, d);
        });
    });
})(jQuery);
("use strict");
var _typeof =
    "function" === typeof Symbol && "symbol" === typeof Symbol.iterator
        ? function (b) {
              return typeof b;
          }
        : function (b) {
              return b && "function" === typeof Symbol && b.constructor === Symbol ? "symbol" : typeof b;
          };
(function (b) {
    if ("function" === typeof define && define.amd) define(["jquery"], b);
    else if ("object" === ("undefined" === typeof module ? "undefined" : _typeof(module)) && module.exports) {
        var a;
        try {
            a = require("jquery");
        } catch (c) {
            a = null;
        }
        module.exports = b(a);
    } else window && (window.Slider = b(window.jQuery));
})(function (b) {
    var a;
    (function (a) {
        function b() {}
        var e = Array.prototype.slice;
        (function (a) {
            function c(b) {
                b.prototype.option ||
                    (b.prototype.option = function (b) {
                        a.isPlainObject(b) && (this.options = a.extend(!0, this.options, b));
                    });
            }
            function k(b, c) {
                a.fn[b] = function (d) {
                    if ("string" === typeof d) {
                        for (var f = e.call(arguments, 1), k = 0, w = this.length; k < w; k++) {
                            var t = a.data(this[k], b);
                            if (t)
                                if (a.isFunction(t[d]) && "_" !== d.charAt(0)) {
                                    var y = t[d].apply(t, f);
                                    if (void 0 !== y && y !== t) return y;
                                } else h("no such method '" + d + "' for " + b + " instance");
                            else h("cannot call methods on " + b + " prior to initialization; attempted to call '" + d + "'");
                        }
                        return this;
                    }
                    f = this.map(function () {
                        var e = a.data(this, b);
                        e ? (e.option(d), e._init()) : ((e = new c(this, d)), a.data(this, b, e));
                        return a(this);
                    });
                    return !f || 1 < f.length ? f : f[0];
                };
            }
            if (a) {
                var h =
                    "undefined" === typeof console
                        ? b
                        : function (a) {
                              console.error(a);
                          };
                a.bridget = function (a, b) {
                    c(b);
                    k(a, b);
                };
                return a.bridget;
            }
        })(a);
    })(b);
    (function (b) {
        function d(a, d) {
            function e(a, b) {
                var c = "data-slider-" + b.replace(/_/g, "-"),
                    c = a.getAttribute(c);
                try {
                    return JSON.parse(c);
                } catch (d) {
                    return c;
                }
            }
            this._state = { value: null, enabled: null, offset: null, size: null, percentage: null, inDrag: !1, over: !1 };
            "string" === typeof a ? (this.element = document.querySelector(a)) : a instanceof HTMLElement && (this.element = a);
            d = d ? d : {};
            for (var l = Object.keys(this.defaultOptions), n = 0; n < l.length; n++) {
                var q = l[n],
                    u = d[q],
                    u = "undefined" !== typeof u ? u : e(this.element, q),
                    u = null !== u ? u : this.defaultOptions[q];
                this.options || (this.options = {});
                this.options[q] = u;
            }
            "vertical" !== this.options.orientation || ("top" !== this.options.tooltip_position && "bottom" !== this.options.tooltip_position)
                ? "horizontal" !== this.options.orientation || ("left" !== this.options.tooltip_position && "right" !== this.options.tooltip_position) || (this.options.tooltip_position = "top")
                : (this.options.tooltip_position = "right");
            var l = this.element.style.width,
                q = !1,
                u = this.element.parentNode,
                v,
                w,
                t,
                y,
                p;
            if (this.sliderElem) q = !0;
            else {
                this.sliderElem = document.createElement("div");
                this.sliderElem.className = "slider";
                var C = document.createElement("div");
                C.className = "slider-track";
                w = document.createElement("div");
                w.className = "slider-track-low";
                v = document.createElement("div");
                v.className = "slider-selection";
                t = document.createElement("div");
                t.className = "slider-track-high";
                y = document.createElement("div");
                y.className = "slider-handle min-slider-handle";
                y.setAttribute("role", "slider");
                y.setAttribute("aria-valuemin", this.options.min);
                y.setAttribute("aria-valuemax", this.options.max);
                p = document.createElement("div");
                p.className = "slider-handle max-slider-handle";
                p.setAttribute("role", "slider");
                p.setAttribute("aria-valuemin", this.options.min);
                p.setAttribute("aria-valuemax", this.options.max);
                C.appendChild(w);
                C.appendChild(v);
                C.appendChild(t);
                (n = Array.isArray(this.options.labelledby)) && this.options.labelledby[0] && y.setAttribute("aria-labelledby", this.options.labelledby[0]);
                n && this.options.labelledby[1] && p.setAttribute("aria-labelledby", this.options.labelledby[1]);
                !n && this.options.labelledby && (y.setAttribute("aria-labelledby", this.options.labelledby), p.setAttribute("aria-labelledby", this.options.labelledby));
                this.ticks = [];
                if (Array.isArray(this.options.ticks) && 0 < this.options.ticks.length) {
                    for (n = 0; n < this.options.ticks.length; n++) {
                        var r = document.createElement("div");
                        r.className = "slider-tick";
                        this.ticks.push(r);
                        C.appendChild(r);
                    }
                    v.className += " tick-slider-selection";
                }
                C.appendChild(y);
                C.appendChild(p);
                this.tickLabels = [];
                if (Array.isArray(this.options.ticks_labels) && 0 < this.options.ticks_labels.length)
                    for (this.tickLabelContainer = document.createElement("div"), this.tickLabelContainer.className = "slider-tick-label-container", n = 0; n < this.options.ticks_labels.length; n++) {
                        var r = document.createElement("div"),
                            x = 0 === this.options.ticks_positions.length,
                            x = this.options.reversed && x ? this.options.ticks_labels.length - (n + 1) : n;
                        r.className = "slider-tick-label";
                        r.innerHTML = this.options.ticks_labels[x];
                        this.tickLabels.push(r);
                        this.tickLabelContainer.appendChild(r);
                    }
                n = function (a) {
                    var b = document.createElement("div");
                    b.className = "tooltip-arrow";
                    var c = document.createElement("div");
                    c.className = "tooltip-inner";
                    a.appendChild(b);
                    a.appendChild(c);
                };
                r = document.createElement("div");
                r.className = "tooltip tooltip-main";
                r.setAttribute("role", "presentation");
                n(r);
                x = document.createElement("div");
                x.className = "tooltip tooltip-min";
                x.setAttribute("role", "presentation");
                n(x);
                var z = document.createElement("div");
                z.className = "tooltip tooltip-max";
                z.setAttribute("role", "presentation");
                n(z);
                this.sliderElem.appendChild(C);
                this.sliderElem.appendChild(r);
                this.sliderElem.appendChild(x);
                this.sliderElem.appendChild(z);
                this.tickLabelContainer && this.sliderElem.appendChild(this.tickLabelContainer);
                u.insertBefore(this.sliderElem, this.element);
                this.element.style.display = "none";
            }
            b && ((this.$element = b(this.element)), (this.$sliderElem = b(this.sliderElem)));
            this.eventToCallbackMap = {};
            this.sliderElem.id = this.options.id;
            this.touchCapable = "ontouchstart" in window || (window.DocumentTouch && document instanceof window.DocumentTouch);
            this.tooltip = this.sliderElem.querySelector(".tooltip-main");
            this.tooltipInner = this.tooltip.querySelector(".tooltip-inner");
            this.tooltip_min = this.sliderElem.querySelector(".tooltip-min");
            this.tooltipInner_min = this.tooltip_min.querySelector(".tooltip-inner");
            this.tooltip_max = this.sliderElem.querySelector(".tooltip-max");
            this.tooltipInner_max = this.tooltip_max.querySelector(".tooltip-inner");
            g[this.options.scale] && (this.options.scale = g[this.options.scale]);
            !0 === q &&
                (this._removeClass(this.sliderElem, "slider-horizontal"),
                this._removeClass(this.sliderElem, "slider-vertical"),
                this._removeClass(this.tooltip, "hide"),
                this._removeClass(this.tooltip_min, "hide"),
                this._removeClass(this.tooltip_max, "hide"),
                ["left", "top", "width", "height"].forEach(function (a) {
                    this._removeProperty(this.trackLow, a);
                    this._removeProperty(this.trackSelection, a);
                    this._removeProperty(this.trackHigh, a);
                }, this),
                [this.handle1, this.handle2].forEach(function (a) {
                    this._removeProperty(a, "left");
                    this._removeProperty(a, "top");
                }, this),
                [this.tooltip, this.tooltip_min, this.tooltip_max].forEach(function (a) {
                    this._removeProperty(a, "left");
                    this._removeProperty(a, "top");
                    this._removeProperty(a, "margin-left");
                    this._removeProperty(a, "margin-top");
                    this._removeClass(a, "right");
                    this._removeClass(a, "top");
                }, this));
            "vertical" === this.options.orientation
                ? (this._addClass(this.sliderElem, "slider-vertical"), (this.stylePos = "top"), (this.mousePos = "pageY"), (this.sizePos = "offsetHeight"))
                : (this._addClass(this.sliderElem, "slider-horizontal"), (this.sliderElem.style.width = l), (this.options.orientation = "horizontal"), (this.stylePos = "left"), (this.mousePos = "pageX"), (this.sizePos = "offsetWidth"));
            this._setTooltipPosition();
            Array.isArray(this.options.ticks) && 0 < this.options.ticks.length && ((this.options.max = Math.max.apply(Math, this.options.ticks)), (this.options.min = Math.min.apply(Math, this.options.ticks)));
            Array.isArray(this.options.value) ? ((this.options.range = !0), (this._state.value = this.options.value)) : (this._state.value = this.options.range ? [this.options.value, this.options.max] : this.options.value);
            this.trackLow = w || this.trackLow;
            this.trackSelection = v || this.trackSelection;
            this.trackHigh = t || this.trackHigh;
            "none" === this.options.selection && (this._addClass(this.trackLow, "hide"), this._addClass(this.trackSelection, "hide"), this._addClass(this.trackHigh, "hide"));
            this.handle1 = y || this.handle1;
            this.handle2 = p || this.handle2;
            if (!0 === q) for (this._removeClass(this.handle1, "round triangle"), this._removeClass(this.handle2, "round triangle hide"), n = 0; n < this.ticks.length; n++) this._removeClass(this.ticks[n], "round triangle hide");
            if (-1 !== ["round", "triangle", "custom"].indexOf(this.options.handle))
                for (this._addClass(this.handle1, this.options.handle), this._addClass(this.handle2, this.options.handle), n = 0; n < this.ticks.length; n++) this._addClass(this.ticks[n], this.options.handle);
            this._state.offset = this._offset(this.sliderElem);
            this._state.size = this.sliderElem[this.sizePos];
            this.setValue(this._state.value);
            this.handle1Keydown = this._keydown.bind(this, 0);
            this.handle1.addEventListener("keydown", this.handle1Keydown, !1);
            this.handle2Keydown = this._keydown.bind(this, 1);
            this.handle2.addEventListener("keydown", this.handle2Keydown, !1);
            this.mousedown = this._mousedown.bind(this);
            this.touchCapable && this.sliderElem.addEventListener("touchstart", this.mousedown, !1);
            this.sliderElem.addEventListener("mousedown", this.mousedown, !1);
            this.resize = this._resize.bind(this);
            window.addEventListener("resize", this.resize, !1);
            "hide" === this.options.tooltip
                ? (this._addClass(this.tooltip, "hide"), this._addClass(this.tooltip_min, "hide"), this._addClass(this.tooltip_max, "hide"))
                : "always" === this.options.tooltip
                ? (this._showTooltip(), (this._alwaysShowTooltip = !0))
                : ((this.showTooltip = this._showTooltip.bind(this)),
                  (this.hideTooltip = this._hideTooltip.bind(this)),
                  this.sliderElem.addEventListener("mouseenter", this.showTooltip, !1),
                  this.sliderElem.addEventListener("mouseleave", this.hideTooltip, !1),
                  this.handle1.addEventListener("focus", this.showTooltip, !1),
                  this.handle1.addEventListener("blur", this.hideTooltip, !1),
                  this.handle2.addEventListener("focus", this.showTooltip, !1),
                  this.handle2.addEventListener("blur", this.hideTooltip, !1));
            this.options.enabled ? this.enable() : this.disable();
        }
        var e = {
                formatInvalidInputErrorMsg: function (a) {
                    return "Invalid input value '" + a + "' passed in";
                },
                callingContextNotSliderInstance:
                    "Calling context element does not have instance of Slider bound to it. Check your code to make sure the JQuery object returned from the call to the slider() initializer is calling the method",
            },
            g = {
                linear: {
                    toValue: function (a) {
                        var b = (a / 100) * (this.options.max - this.options.min),
                            c = !0;
                        if (0 < this.options.ticks_positions.length) {
                            for (var d, e, g, b = 0, c = 1; c < this.options.ticks_positions.length; c++)
                                if (a <= this.options.ticks_positions[c]) {
                                    d = this.options.ticks[c - 1];
                                    g = this.options.ticks_positions[c - 1];
                                    e = this.options.ticks[c];
                                    b = this.options.ticks_positions[c];
                                    break;
                                }
                            b = d + ((a - g) / (b - g)) * (e - d);
                            c = !1;
                        }
                        a = (c ? this.options.min : 0) + Math.round(b / this.options.step) * this.options.step;
                        return a < this.options.min ? this.options.min : a > this.options.max ? this.options.max : a;
                    },
                    toPercentage: function (a) {
                        if (this.options.max === this.options.min) return 0;
                        if (0 < this.options.ticks_positions.length) {
                            for (var b, c, d, e = 0, g = 0; g < this.options.ticks.length; g++)
                                if (a <= this.options.ticks[g]) {
                                    b = 0 < g ? this.options.ticks[g - 1] : 0;
                                    d = 0 < g ? this.options.ticks_positions[g - 1] : 0;
                                    c = this.options.ticks[g];
                                    e = this.options.ticks_positions[g];
                                    break;
                                }
                            if (0 < g) return d + ((a - b) / (c - b)) * (e - d);
                        }
                        return (100 * (a - this.options.min)) / (this.options.max - this.options.min);
                    },
                },
                logarithmic: {
                    toValue: function (a) {
                        var b = 0 === this.options.min ? 0 : Math.log(this.options.min);
                        a = Math.exp(b + ((Math.log(this.options.max) - b) * a) / 100);
                        a = this.options.min + Math.round((a - this.options.min) / this.options.step) * this.options.step;
                        return a < this.options.min ? this.options.min : a > this.options.max ? this.options.max : a;
                    },
                    toPercentage: function (a) {
                        if (this.options.max === this.options.min) return 0;
                        var b = 0 === this.options.min ? 0 : Math.log(this.options.min);
                        return (100 * ((0 === a ? 0 : Math.log(a)) - b)) / (Math.log(this.options.max) - b);
                    },
                },
            };
        a = function (a, b) {
            d.call(this, a, b);
            return this;
        };
        a.prototype = {
            _init: function () {},
            constructor: a,
            defaultOptions: {
                id: "",
                min: 0,
                max: 10,
                step: 1,
                precision: 0,
                orientation: "horizontal",
                value: 5,
                range: !1,
                selection: "before",
                tooltip: "show",
                tooltip_split: !1,
                handle: "round",
                reversed: !1,
                enabled: !0,
                formatter: function (a) {
                    return Array.isArray(a) ? a[0] + " : " + a[1] : a;
                },
                natural_arrow_keys: !1,
                ticks: [],
                ticks_positions: [],
                ticks_labels: [],
                ticks_snap_bounds: 0,
                scale: "linear",
                focus: !1,
                tooltip_position: null,
                labelledby: null,
            },
            getElement: function () {
                return this.sliderElem;
            },
            getValue: function () {
                return this.options.range ? this._state.value : this._state.value[0];
            },
            setValue: function (a, b, c) {
                a || (a = 0);
                var d = this.getValue();
                this._state.value = this._validateInputValue(a);
                a = this._applyPrecision.bind(this);
                this.options.range
                    ? ((this._state.value[0] = a(this._state.value[0])),
                      (this._state.value[1] = a(this._state.value[1])),
                      (this._state.value[0] = Math.max(this.options.min, Math.min(this.options.max, this._state.value[0]))),
                      (this._state.value[1] = Math.max(this.options.min, Math.min(this.options.max, this._state.value[1]))))
                    : ((this._state.value = a(this._state.value)),
                      (this._state.value = [Math.max(this.options.min, Math.min(this.options.max, this._state.value))]),
                      this._addClass(this.handle2, "hide"),
                      (this._state.value[1] = "after" === this.options.selection ? this.options.max : this.options.min));
                this._state.percentage =
                    this.options.max > this.options.min ? [this._toPercentage(this._state.value[0]), this._toPercentage(this._state.value[1]), (100 * this.options.step) / (this.options.max - this.options.min)] : [0, 0, 100];
                this._layout();
                a = this.options.range ? this._state.value : this._state.value[0];
                !0 === b && this._trigger("slide", a);
                d !== a && !0 === c && this._trigger("change", { oldValue: d, newValue: a });
                this._setDataVal(a);
                return this;
            },
            destroy: function () {
                this._removeSliderEventHandlers();
                this.sliderElem.parentNode.removeChild(this.sliderElem);
                this.element.style.display = "";
                this._cleanUpEventCallbacksMap();
                this.element.removeAttribute("data");
                b && (this._unbindJQueryEventHandlers(), this.$element.removeData("slider"));
            },
            disable: function () {
                this._state.enabled = !1;
                this.handle1.removeAttribute("tabindex");
                this.handle2.removeAttribute("tabindex");
                this._addClass(this.sliderElem, "slider-disabled");
                this._trigger("slideDisabled");
                return this;
            },
            enable: function () {
                this._state.enabled = !0;
                this.handle1.setAttribute("tabindex", 0);
                this.handle2.setAttribute("tabindex", 0);
                this._removeClass(this.sliderElem, "slider-disabled");
                this._trigger("slideEnabled");
                return this;
            },
            toggle: function () {
                this._state.enabled ? this.disable() : this.enable();
                return this;
            },
            isEnabled: function () {
                return this._state.enabled;
            },
            on: function (a, b) {
                this._bindNonQueryEventHandler(a, b);
                return this;
            },
            off: function (a, d) {
                b ? (this.$element.off(a, d), this.$sliderElem.off(a, d)) : this._unbindNonQueryEventHandler(a, d);
            },
            getAttribute: function (a) {
                return a ? this.options[a] : this.options;
            },
            setAttribute: function (a, b) {
                this.options[a] = b;
                return this;
            },
            refresh: function () {
                this._removeSliderEventHandlers();
                d.call(this, this.element, this.options);
                b && b.data(this.element, "slider", this);
                return this;
            },
            relayout: function () {
                this._layout();
                return this;
            },
            _removeSliderEventHandlers: function () {
                this.handle1.removeEventListener("keydown", this.handle1Keydown, !1);
                this.handle2.removeEventListener("keydown", this.handle2Keydown, !1);
                this.showTooltip && (this.handle1.removeEventListener("focus", this.showTooltip, !1), this.handle2.removeEventListener("focus", this.showTooltip, !1));
                this.hideTooltip && (this.handle1.removeEventListener("blur", this.hideTooltip, !1), this.handle2.removeEventListener("blur", this.hideTooltip, !1));
                this.showTooltip && this.sliderElem.removeEventListener("mouseenter", this.showTooltip, !1);
                this.hideTooltip && this.sliderElem.removeEventListener("mouseleave", this.hideTooltip, !1);
                this.sliderElem.removeEventListener("touchstart", this.mousedown, !1);
                this.sliderElem.removeEventListener("mousedown", this.mousedown, !1);
                window.removeEventListener("resize", this.resize, !1);
            },
            _bindNonQueryEventHandler: function (a, b) {
                void 0 === this.eventToCallbackMap[a] && (this.eventToCallbackMap[a] = []);
                this.eventToCallbackMap[a].push(b);
            },
            _unbindNonQueryEventHandler: function (a, b) {
                var c = this.eventToCallbackMap[a];
                if (void 0 !== c)
                    for (var d = 0; d < c.length; d++)
                        if (c[d] === b) {
                            c.splice(d, 1);
                            break;
                        }
            },
            _cleanUpEventCallbacksMap: function () {
                for (var a = Object.keys(this.eventToCallbackMap), b = 0; b < a.length; b++) this.eventToCallbackMap[a[b]] = null;
            },
            _showTooltip: function () {
                !1 === this.options.tooltip_split
                    ? (this._addClass(this.tooltip, "in"), (this.tooltip_min.style.display = "none"), (this.tooltip_max.style.display = "none"))
                    : (this._addClass(this.tooltip_min, "in"), this._addClass(this.tooltip_max, "in"), (this.tooltip.style.display = "none"));
                this._state.over = !0;
            },
            _hideTooltip: function () {
                !1 === this._state.inDrag && !0 !== this.alwaysShowTooltip && (this._removeClass(this.tooltip, "in"), this._removeClass(this.tooltip_min, "in"), this._removeClass(this.tooltip_max, "in"));
                this._state.over = !1;
            },
            _layout: function () {
                var a;
                a = this.options.reversed ? [100 - this._state.percentage[0], this.options.range ? 100 - this._state.percentage[1] : this._state.percentage[1]] : [this._state.percentage[0], this._state.percentage[1]];
                this.handle1.style[this.stylePos] = a[0] + "%";
                this.handle1.setAttribute("aria-valuenow", this._state.value[0]);
                this.handle2.style[this.stylePos] = a[1] + "%";
                this.handle2.setAttribute("aria-valuenow", this._state.value[1]);
                if (Array.isArray(this.options.ticks) && 0 < this.options.ticks.length) {
                    var b = "vertical" === this.options.orientation ? "height" : "width",
                        c = "vertical" === this.options.orientation ? "marginTop" : "marginLeft",
                        d = this._state.size / (this.options.ticks.length - 1);
                    if (this.tickLabelContainer) {
                        var e = 0;
                        if (0 === this.options.ticks_positions.length) "vertical" !== this.options.orientation && (this.tickLabelContainer.style[c] = -d / 2 + "px"), (e = this.tickLabelContainer.offsetHeight);
                        else for (g = 0; g < this.tickLabelContainer.childNodes.length; g++) this.tickLabelContainer.childNodes[g].offsetHeight > e && (e = this.tickLabelContainer.childNodes[g].offsetHeight);
                        "horizontal" === this.options.orientation && (this.sliderElem.style.marginBottom = e + "px");
                    }
                    for (var g = 0; g < this.options.ticks.length; g++)
                        (e = this.options.ticks_positions[g] || this._toPercentage(this.options.ticks[g])),
                            this.options.reversed && (e = 100 - e),
                            (this.ticks[g].style[this.stylePos] = e + "%"),
                            this._removeClass(this.ticks[g], "in-selection"),
                            this.options.range
                                ? e >= a[0] && e <= a[1] && this._addClass(this.ticks[g], "in-selection")
                                : "after" === this.options.selection && e >= a[0]
                                ? this._addClass(this.ticks[g], "in-selection")
                                : "before" === this.options.selection && e <= a[0] && this._addClass(this.ticks[g], "in-selection"),
                            this.tickLabels[g] &&
                                ((this.tickLabels[g].style[b] = d + "px"),
                                "vertical" !== this.options.orientation && void 0 !== this.options.ticks_positions[g]
                                    ? ((this.tickLabels[g].style.position = "absolute"), (this.tickLabels[g].style[this.stylePos] = e + "%"), (this.tickLabels[g].style[c] = -d / 2 + "px"))
                                    : "vertical" === this.options.orientation &&
                                      ((this.tickLabels[g].style.marginLeft = this.sliderElem.offsetWidth + "px"), (this.tickLabelContainer.style.marginTop = (this.sliderElem.offsetWidth / 2) * -1 + "px")));
                }
                this.options.range
                    ? ((b = this.options.formatter(this._state.value)),
                      this._setText(this.tooltipInner, b),
                      (this.tooltip.style[this.stylePos] = (a[1] + a[0]) / 2 + "%"),
                      "vertical" === this.options.orientation ? this._css(this.tooltip, "margin-top", -this.tooltip.offsetHeight / 2 + "px") : this._css(this.tooltip, "margin-left", -this.tooltip.offsetWidth / 2 + "px"),
                      "vertical" === this.options.orientation ? this._css(this.tooltip, "margin-top", -this.tooltip.offsetHeight / 2 + "px") : this._css(this.tooltip, "margin-left", -this.tooltip.offsetWidth / 2 + "px"),
                      (b = this.options.formatter(this._state.value[0])),
                      this._setText(this.tooltipInner_min, b),
                      (b = this.options.formatter(this._state.value[1])),
                      this._setText(this.tooltipInner_max, b),
                      (this.tooltip_min.style[this.stylePos] = a[0] + "%"),
                      "vertical" === this.options.orientation ? this._css(this.tooltip_min, "margin-top", -this.tooltip_min.offsetHeight / 2 + "px") : this._css(this.tooltip_min, "margin-left", -this.tooltip_min.offsetWidth / 2 + "px"),
                      (this.tooltip_max.style[this.stylePos] = a[1] + "%"),
                      "vertical" === this.options.orientation ? this._css(this.tooltip_max, "margin-top", -this.tooltip_max.offsetHeight / 2 + "px") : this._css(this.tooltip_max, "margin-left", -this.tooltip_max.offsetWidth / 2 + "px"))
                    : ((b = this.options.formatter(this._state.value[0])),
                      this._setText(this.tooltipInner, b),
                      (this.tooltip.style[this.stylePos] = a[0] + "%"),
                      "vertical" === this.options.orientation ? this._css(this.tooltip, "margin-top", -this.tooltip.offsetHeight / 2 + "px") : this._css(this.tooltip, "margin-left", -this.tooltip.offsetWidth / 2 + "px"));
                "vertical" === this.options.orientation
                    ? ((this.trackLow.style.top = "0"),
                      (this.trackLow.style.height = Math.min(a[0], a[1]) + "%"),
                      (this.trackSelection.style.top = Math.min(a[0], a[1]) + "%"),
                      (this.trackSelection.style.height = Math.abs(a[0] - a[1]) + "%"),
                      (this.trackHigh.style.bottom = "0"),
                      (this.trackHigh.style.height = 100 - Math.min(a[0], a[1]) - Math.abs(a[0] - a[1]) + "%"))
                    : ((this.trackLow.style.left = "0"),
                      (this.trackLow.style.width = Math.min(a[0], a[1]) + "%"),
                      (this.trackSelection.style.left = Math.min(a[0], a[1]) + "%"),
                      (this.trackSelection.style.width = Math.abs(a[0] - a[1]) + "%"),
                      (this.trackHigh.style.right = "0"),
                      (this.trackHigh.style.width = 100 - Math.min(a[0], a[1]) - Math.abs(a[0] - a[1]) + "%"),
                      (a = this.tooltip_min.getBoundingClientRect()),
                      (b = this.tooltip_max.getBoundingClientRect()),
                      a.right > b.left
                          ? (this._removeClass(this.tooltip_max, "top"), this._addClass(this.tooltip_max, "bottom"), (this.tooltip_max.style.top = "18px"))
                          : (this._removeClass(this.tooltip_max, "bottom"), this._addClass(this.tooltip_max, "top"), (this.tooltip_max.style.top = this.tooltip_min.style.top)));
            },
            _resize: function (a) {
                this._state.offset = this._offset(this.sliderElem);
                this._state.size = this.sliderElem[this.sizePos];
                this._layout();
            },
            _removeProperty: function (a, b) {
                a.style.removeProperty ? a.style.removeProperty(b) : a.style.removeAttribute(b);
            },
            _mousedown: function (a) {
                if (!this._state.enabled) return !1;
                this._state.offset = this._offset(this.sliderElem);
                this._state.size = this.sliderElem[this.sizePos];
                var b = this._getPercentage(a);
                this._state.dragged = this.options.range ? (Math.abs(this._state.percentage[0] - b) < Math.abs(this._state.percentage[1] - b) ? 0 : 1) : 0;
                this._state.percentage[this._state.dragged] = b;
                this._layout();
                this.touchCapable && (document.removeEventListener("touchmove", this.mousemove, !1), document.removeEventListener("touchend", this.mouseup, !1));
                this.mousemove && document.removeEventListener("mousemove", this.mousemove, !1);
                this.mouseup && document.removeEventListener("mouseup", this.mouseup, !1);
                this.mousemove = this._mousemove.bind(this);
                this.mouseup = this._mouseup.bind(this);
                this.touchCapable && (document.addEventListener("touchmove", this.mousemove, !1), document.addEventListener("touchend", this.mouseup, !1));
                document.addEventListener("mousemove", this.mousemove, !1);
                document.addEventListener("mouseup", this.mouseup, !1);
                this._state.inDrag = !0;
                b = this._calculateValue();
                this._trigger("slideStart", b);
                this._setDataVal(b);
                this.setValue(b, !1, !0);
                this._pauseEvent(a);
                this.options.focus && this._triggerFocusOnHandle(this._state.dragged);
                return !0;
            },
            _triggerFocusOnHandle: function (a) {
                0 === a && this.handle1.focus();
                1 === a && this.handle2.focus();
            },
            _keydown: function (a, b) {
                if (!this._state.enabled) return !1;
                var c;
                switch (b.keyCode) {
                    case 37:
                    case 40:
                        c = -1;
                        break;
                    case 39:
                    case 38:
                        c = 1;
                }
                if (c) {
                    if (this.options.natural_arrow_keys) {
                        var d = "horizontal" === this.options.orientation && this.options.reversed;
                        if (("vertical" === this.options.orientation && !this.options.reversed) || d) c = -c;
                    }
                    c = this._state.value[a] + c * this.options.step;
                    this.options.range && (c = [a ? this._state.value[0] : c, a ? c : this._state.value[1]]);
                    this._trigger("slideStart", c);
                    this._setDataVal(c);
                    this.setValue(c, !0, !0);
                    this._setDataVal(c);
                    this._trigger("slideStop", c);
                    this._layout();
                    this._pauseEvent(b);
                    return !1;
                }
            },
            _pauseEvent: function (a) {
                a.stopPropagation && a.stopPropagation();
                a.preventDefault && a.preventDefault();
                a.cancelBubble = !0;
                a.returnValue = !1;
            },
            _mousemove: function (a) {
                if (!this._state.enabled) return !1;
                a = this._getPercentage(a);
                this._adjustPercentageForRangeSliders(a);
                this._state.percentage[this._state.dragged] = a;
                this._layout();
                a = this._calculateValue(!0);
                this.setValue(a, !0, !0);
                return !1;
            },
            _adjustPercentageForRangeSliders: function (a) {
                if (this.options.range) {
                    var b = this._getNumDigitsAfterDecimalPlace(a),
                        b = b ? b - 1 : 0;
                    a = this._applyToFixedAndParseFloat(a, b);
                    0 === this._state.dragged && this._applyToFixedAndParseFloat(this._state.percentage[1], b) < a
                        ? ((this._state.percentage[0] = this._state.percentage[1]), (this._state.dragged = 1))
                        : 1 === this._state.dragged && this._applyToFixedAndParseFloat(this._state.percentage[0], b) > a && ((this._state.percentage[1] = this._state.percentage[0]), (this._state.dragged = 0));
                }
            },
            _mouseup: function () {
                if (!this._state.enabled) return !1;
                this.touchCapable && (document.removeEventListener("touchmove", this.mousemove, !1), document.removeEventListener("touchend", this.mouseup, !1));
                document.removeEventListener("mousemove", this.mousemove, !1);
                document.removeEventListener("mouseup", this.mouseup, !1);
                this._state.inDrag = !1;
                !1 === this._state.over && this._hideTooltip();
                var a = this._calculateValue(!0);
                this._layout();
                this._setDataVal(a);
                this._trigger("slideStop", a);
                return !1;
            },
            _calculateValue: function (a) {
                var b;
                this.options.range
                    ? ((b = [this.options.min, this.options.max]),
                      0 !== this._state.percentage[0] && ((b[0] = this._toValue(this._state.percentage[0])), (b[0] = this._applyPrecision(b[0]))),
                      100 !== this._state.percentage[1] && ((b[1] = this._toValue(this._state.percentage[1])), (b[1] = this._applyPrecision(b[1]))))
                    : ((b = this._toValue(this._state.percentage[0])), (b = parseFloat(b)), (b = this._applyPrecision(b)));
                if (a) {
                    a = [b, Infinity];
                    for (var c = 0; c < this.options.ticks.length; c++) {
                        var d = Math.abs(this.options.ticks[c] - b);
                        d <= a[1] && (a = [this.options.ticks[c], d]);
                    }
                    if (a[1] <= this.options.ticks_snap_bounds) return a[0];
                }
                return b;
            },
            _applyPrecision: function (a) {
                var b = this.options.precision || this._getNumDigitsAfterDecimalPlace(this.options.step);
                return this._applyToFixedAndParseFloat(a, b);
            },
            _getNumDigitsAfterDecimalPlace: function (a) {
                return (a = ("" + a).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/)) ? Math.max(0, (a[1] ? a[1].length : 0) - (a[2] ? +a[2] : 0)) : 0;
            },
            _applyToFixedAndParseFloat: function (a, b) {
                var c = a.toFixed(b);
                return parseFloat(c);
            },
            _getPercentage: function (a) {
                !this.touchCapable || ("touchstart" !== a.type && "touchmove" !== a.type) || (a = a.touches[0]);
                a = ((a[this.mousePos] - this._state.offset[this.stylePos]) / this._state.size) * 100;
                a = Math.round(a / this._state.percentage[2]) * this._state.percentage[2];
                this.options.reversed && (a = 100 - a);
                return Math.max(0, Math.min(100, a));
            },
            _validateInputValue: function (a) {
                if ("number" === typeof a) return a;
                if (Array.isArray(a)) return this._validateArray(a), a;
                throw Error(e.formatInvalidInputErrorMsg(a));
            },
            _validateArray: function (a) {
                for (var b = 0; b < a.length; b++) {
                    var c = a[b];
                    if ("number" !== typeof c) throw Error(e.formatInvalidInputErrorMsg(c));
                }
            },
            _setDataVal: function (a) {
                this.element.setAttribute("data-value", a);
                this.element.setAttribute("value", a);
                this.element.value = a;
            },
            _trigger: function (a, d) {
                d = d || 0 === d ? d : void 0;
                var e = this.eventToCallbackMap[a];
                if (e && e.length) for (var g = 0; g < e.length; g++) (0, e[g])(d);
                b && this._triggerJQueryEvent(a, d);
            },
            _triggerJQueryEvent: function (a, b) {
                var c = { type: a, value: b };
                this.$element.trigger(c);
                this.$sliderElem.trigger(c);
            },
            _unbindJQueryEventHandlers: function () {
                this.$element.off();
                this.$sliderElem.off();
            },
            _setText: function (a, b) {
                "undefined" !== typeof a.innerText ? (a.innerText = b) : "undefined" !== typeof a.textContent && (a.textContent = b);
            },
            _removeClass: function (a, b) {
                for (var c = b.split(" "), d = a.className, e = 0; e < c.length; e++) d = d.replace(new RegExp("(?:\\s|^)" + c[e] + "(?:\\s|$)"), " ");
                a.className = d.trim();
            },
            _addClass: function (a, b) {
                for (var c = b.split(" "), d = a.className, e = 0; e < c.length; e++) {
                    var g = c[e];
                    new RegExp("(?:\\s|^)" + g + "(?:\\s|$)").test(d) || (d += " " + g);
                }
                a.className = d.trim();
            },
            _offsetLeft: function (a) {
                return a.getBoundingClientRect().left;
            },
            _offsetTop: function (a) {
                for (var b = a.offsetTop; (a = a.offsetParent) && !isNaN(a.offsetTop); ) b += a.offsetTop;
                return b;
            },
            _offset: function (a) {
                return { left: this._offsetLeft(a), top: this._offsetTop(a) };
            },
            _css: function (a, d, e) {
                b
                    ? b.style(a, d, e)
                    : ((d = d.replace(/^-ms-/, "ms-").replace(/-([\da-z])/gi, function (a, b) {
                          return b.toUpperCase();
                      })),
                      (a.style[d] = e));
            },
            _toValue: function (a) {
                return this.options.scale.toValue.apply(this, [a]);
            },
            _toPercentage: function (a) {
                return this.options.scale.toPercentage.apply(this, [a]);
            },
            _setTooltipPosition: function () {
                var a = [this.tooltip, this.tooltip_min, this.tooltip_max];
                if ("vertical" === this.options.orientation) {
                    var b = this.options.tooltip_position || "right",
                        c = "left" === b ? "right" : "left";
                    a.forEach(
                        function (a) {
                            this._addClass(a, b);
                            a.style[c] = "100%";
                        }.bind(this)
                    );
                } else
                    "bottom" === this.options.tooltip_position
                        ? a.forEach(
                              function (a) {
                                  this._addClass(a, "bottom");
                                  a.style.top = "22px";
                              }.bind(this)
                          )
                        : a.forEach(
                              function (a) {
                                  this._addClass(a, "top");
                                  a.style.top = -this.tooltip.outerHeight - 14 + "px";
                              }.bind(this)
                          );
            },
        };
        b && b.bridget(b.fn.slider ? "bootstrapSlider" : "slider", a);
    })(b);
    return a;
});
(function (b, a, c) {
    (function (a) {
        "function" === typeof define && define.amd ? define("datatables", ["jquery"], a) : "object" === typeof exports ? a(require("jquery")) : jQuery && !jQuery.fn.dataTable && a(jQuery);
    })(function (d) {
        function e(a) {
            var b,
                c,
                f = {};
            d.each(a, function (d, g) {
                (b = d.match(/^([^A-Z]+?)([A-Z])/)) && -1 !== "a aa ai ao as b fn i m o s ".indexOf(b[1] + " ") && ((c = d.replace(b[0], b[2].toLowerCase())), (f[c] = d), "o" === b[1] && e(a[d]));
            });
            a._hungarianMap = f;
        }
        function g(a, b, f) {
            a._hungarianMap || e(a);
            var h;
            d.each(b, function (e, l) {
                h = a._hungarianMap[e];
                h === c || (!f && b[h] !== c) || ("o" === h.charAt(0) ? (b[h] || (b[h] = {}), d.extend(!0, b[h], b[e]), g(a[h], b[h], f)) : (b[h] = b[e]));
            });
        }
        function f(a) {
            var b = E.defaults.oLanguage,
                c = a.sZeroRecords;
            !a.sEmptyTable && c && "No data available in table" === b.sEmptyTable && kb(a, a, "sZeroRecords", "sEmptyTable");
            !a.sLoadingRecords && c && "Loading..." === b.sLoadingRecords && kb(a, a, "sZeroRecords", "sLoadingRecords");
            a.sInfoThousands && (a.sThousands = a.sInfoThousands);
            (a = a.sDecimal) && Oc(a);
        }
        function k(a) {
            mb(a, "ordering", "bSort");
            mb(a, "orderMulti", "bSortMulti");
            mb(a, "orderClasses", "bSortClasses");
            mb(a, "orderCellsTop", "bSortCellsTop");
            mb(a, "order", "aaSorting");
            mb(a, "orderFixed", "aaSortingFixed");
            mb(a, "paging", "bPaginate");
            mb(a, "pagingType", "sPaginationType");
            mb(a, "pageLength", "iDisplayLength");
            mb(a, "searching", "bFilter");
            if ((a = a.aoSearchCols)) for (var b = 0, c = a.length; b < c; b++) a[b] && g(E.models.oSearch, a[b]);
        }
        function h(a) {
            mb(a, "orderable", "bSortable");
            mb(a, "orderData", "aDataSort");
            mb(a, "orderSequence", "asSorting");
            mb(a, "orderDataType", "sortDataType");
        }
        function l(a) {
            a = a.oBrowser;
            var b = d("<div/>")
                    .css({ position: "absolute", top: 0, left: 0, height: 1, width: 1, overflow: "hidden" })
                    .append(
                        d("<div/>")
                            .css({ position: "absolute", top: 1, left: 1, width: 100, overflow: "scroll" })
                            .append(d('<div class="test"/>').css({ width: "100%", height: 10 }))
                    )
                    .appendTo("body"),
                c = b.find(".test");
            a.bScrollOversize = 100 === c[0].offsetWidth;
            a.bScrollbarLeft = 1 !== c.offset().left;
            b.remove();
        }
        function n(a, b, d, e, f, g) {
            var h,
                l = !1;
            d !== c && ((h = d), (l = !0));
            for (; e !== f; ) a.hasOwnProperty(e) && ((h = l ? b(h, a[e], e, a) : a[e]), (l = !0), (e += g));
            return h;
        }
        function q(b, c) {
            var e = E.defaults.column,
                f = b.aoColumns.length,
                e = d.extend({}, E.models.oColumn, e, { nTh: c ? c : a.createElement("th"), sTitle: e.sTitle ? e.sTitle : c ? c.innerHTML : "", aDataSort: e.aDataSort ? e.aDataSort : [f], mData: e.mData ? e.mData : f, idx: f });
            b.aoColumns.push(e);
            e = b.aoPreSearchCols;
            e[f] = d.extend({}, E.models.oSearch, e[f]);
            u(b, f, null);
        }
        function u(a, b, e) {
            b = a.aoColumns[b];
            var f = a.oClasses,
                l = d(b.nTh);
            if (!b.sWidthOrig) {
                b.sWidthOrig = l.attr("width") || null;
                var k = (l.attr("style") || "").match(/width:\s*(\d+[pxem%]+)/);
                k && (b.sWidthOrig = k[1]);
            }
            e !== c &&
                null !== e &&
                (h(e),
                g(E.defaults.column, e),
                e.mDataProp === c || e.mData || (e.mData = e.mDataProp),
                e.sType && (b._sManualType = e.sType),
                e.className && !e.sClass && (e.sClass = e.className),
                d.extend(b, e),
                kb(b, e, "sWidth", "sWidthOrig"),
                "number" === typeof e.iDataSort && (b.aDataSort = [e.iDataSort]),
                kb(b, e, "aDataSort"));
            var n = b.mData,
                q = J(n),
                r = b.mRender ? J(b.mRender) : null;
            e = function (a) {
                return "string" === typeof a && -1 !== a.indexOf("@");
            };
            b._bAttrSrc = d.isPlainObject(n) && (e(n.sort) || e(n.type) || e(n.filter));
            b.fnGetData = function (a, b, d) {
                var e = q(a, b, c, d);
                return r && b ? r(e, b, a, d) : e;
            };
            b.fnSetData = function (a, b, c) {
                return A(n)(a, b, c);
            };
            "number" !== typeof n && (a._rowReadObject = !0);
            a.oFeatures.bSort || ((b.bSortable = !1), l.addClass(f.sSortableNone));
            a = -1 !== d.inArray("asc", b.asSorting);
            e = -1 !== d.inArray("desc", b.asSorting);
            b.bSortable && (a || e)
                ? a && !e
                    ? ((b.sSortingClass = f.sSortableAsc), (b.sSortingClassJUI = f.sSortJUIAscAllowed))
                    : !a && e
                    ? ((b.sSortingClass = f.sSortableDesc), (b.sSortingClassJUI = f.sSortJUIDescAllowed))
                    : ((b.sSortingClass = f.sSortable), (b.sSortingClassJUI = f.sSortJUI))
                : ((b.sSortingClass = f.sSortableNone), (b.sSortingClassJUI = ""));
        }
        function v(a) {
            if (!1 !== a.oFeatures.bAutoWidth) {
                var b = a.aoColumns;
                pc(a);
                for (var c = 0, d = b.length; c < d; c++) b[c].nTh.style.width = b[c].sWidth;
            }
            b = a.oScroll;
            ("" === b.sY && "" === b.sX) || bb(a);
            fa(a, null, "column-sizing", [a]);
        }
        function w(a, b) {
            var c = p(a, "bVisible");
            return "number" === typeof c[b] ? c[b] : null;
        }
        function t(a, b) {
            var c = p(a, "bVisible"),
                c = d.inArray(b, c);
            return -1 !== c ? c : null;
        }
        function y(a) {
            return p(a, "bVisible").length;
        }
        function p(a, b) {
            var c = [];
            d.map(a.aoColumns, function (a, d) {
                a[b] && c.push(d);
            });
            return c;
        }
        function C(a) {
            var b = a.aoColumns,
                d = a.aoData,
                e = E.ext.type.detect,
                f,
                g,
                h,
                l,
                k,
                n,
                q,
                r,
                x;
            f = 0;
            for (g = b.length; f < g; f++)
                if (((q = b[f]), (x = []), !q.sType && q._sManualType)) q.sType = q._sManualType;
                else if (!q.sType) {
                    h = 0;
                    for (l = e.length; h < l; h++) {
                        k = 0;
                        for (n = d.length; k < n; k++) {
                            x[k] === c && (x[k] = B(a, k, f, "type"));
                            r = e[h](x[k], a);
                            if (!r && h !== e.length - 1) break;
                            if ("html" === r) break;
                        }
                        if (r) {
                            q.sType = r;
                            break;
                        }
                    }
                    q.sType || (q.sType = "string");
                }
        }
        function r(a, b, e, f) {
            var g,
                h,
                l,
                k,
                n,
                r,
                x = a.aoColumns;
            if (b)
                for (g = b.length - 1; 0 <= g; g--) {
                    r = b[g];
                    var m = r.targets !== c ? r.targets : r.aTargets;
                    d.isArray(m) || (m = [m]);
                    h = 0;
                    for (l = m.length; h < l; h++)
                        if ("number" === typeof m[h] && 0 <= m[h]) {
                            for (; x.length <= m[h]; ) q(a);
                            f(m[h], r);
                        } else if ("number" === typeof m[h] && 0 > m[h]) f(x.length + m[h], r);
                        else if ("string" === typeof m[h]) for (k = 0, n = x.length; k < n; k++) ("_all" == m[h] || d(x[k].nTh).hasClass(m[h])) && f(k, r);
                }
            if (e) for (g = 0, a = e.length; g < a; g++) f(g, e[g]);
        }
        function x(a, b, c, e) {
            var f = a.aoData.length,
                g = d.extend(!0, {}, E.models.oRow, { src: c ? "dom" : "data" });
            g._aData = b;
            a.aoData.push(g);
            b = a.aoColumns;
            for (var g = 0, h = b.length; g < h; g++) c && G(a, f, g, B(a, f, g)), (b[g].sType = null);
            a.aiDisplayMaster.push(f);
            (!c && a.oFeatures.bDeferRender) || pa(a, f, c, e);
            return f;
        }
        function z(a, b) {
            var c;
            b instanceof d || (b = d(b));
            return b.map(function (b, d) {
                c = L(a, d);
                return x(a, c.data, d, c.cells);
            });
        }
        function B(a, b, d, e) {
            var f = a.iDraw,
                g = a.aoColumns[d],
                h = a.aoData[b]._aData,
                l = g.sDefaultContent;
            d = g.fnGetData(h, e, { settings: a, row: b, col: d });
            if (d === c) return a.iDrawError != f && null === l && (ub(a, 0, "Requested unknown parameter " + ("function" == typeof g.mData ? "{function}" : "'" + g.mData + "'") + " for row " + b, 4), (a.iDrawError = f)), l;
            if ((d === h || null === d) && null !== l) d = l;
            else if ("function" === typeof d) return d.call(h);
            return null === d && "display" == e ? "" : d;
        }
        function G(a, b, c, d) {
            a.aoColumns[c].fnSetData(a.aoData[b]._aData, d, { settings: a, row: b, col: c });
        }
        function H(a) {
            return d.map(a.match(/(\\.|[^\.])+/g), function (a) {
                return a.replace(/\\./g, ".");
            });
        }
        function J(a) {
            if (d.isPlainObject(a)) {
                var b = {};
                d.each(a, function (a, c) {
                    c && (b[a] = J(c));
                });
                return function (a, d, e, f) {
                    var g = b[d] || b._;
                    return g !== c ? g(a, d, e, f) : a;
                };
            }
            if (null === a)
                return function (a) {
                    return a;
                };
            if ("function" === typeof a)
                return function (b, c, d, e) {
                    return a(b, c, d, e);
                };
            if ("string" !== typeof a || (-1 === a.indexOf(".") && -1 === a.indexOf("[") && -1 === a.indexOf("(")))
                return function (b, c) {
                    return b[a];
                };
            var e = function (a, b, d) {
                var f, g;
                if ("" !== d) {
                    g = H(d);
                    for (var h = 0, l = g.length; h < l; h++) {
                        d = g[h].match(Xb);
                        f = g[h].match(Jb);
                        if (d) {
                            g[h] = g[h].replace(Xb, "");
                            "" !== g[h] && (a = a[g[h]]);
                            f = [];
                            g.splice(0, h + 1);
                            g = g.join(".");
                            h = 0;
                            for (l = a.length; h < l; h++) f.push(e(a[h], b, g));
                            a = d[0].substring(1, d[0].length - 1);
                            a = "" === a ? f : f.join(a);
                            break;
                        } else if (f) {
                            g[h] = g[h].replace(Jb, "");
                            a = a[g[h]]();
                            continue;
                        }
                        if (null === a || a[g[h]] === c) return c;
                        a = a[g[h]];
                    }
                }
                return a;
            };
            return function (b, c) {
                return e(b, c, a);
            };
        }
        function A(a) {
            if (d.isPlainObject(a)) return A(a._);
            if (null === a) return function () {};
            if ("function" === typeof a)
                return function (b, c, d) {
                    a(b, "set", c, d);
                };
            if ("string" !== typeof a || (-1 === a.indexOf(".") && -1 === a.indexOf("[") && -1 === a.indexOf("(")))
                return function (b, c) {
                    b[a] = c;
                };
            var b = function (a, d, e) {
                e = H(e);
                var f;
                f = e[e.length - 1];
                for (var g, h, l = 0, D = e.length - 1; l < D; l++) {
                    g = e[l].match(Xb);
                    h = e[l].match(Jb);
                    if (g) {
                        e[l] = e[l].replace(Xb, "");
                        a[e[l]] = [];
                        f = e.slice();
                        f.splice(0, l + 1);
                        g = f.join(".");
                        h = 0;
                        for (D = d.length; h < D; h++) (f = {}), b(f, d[h], g), a[e[l]].push(f);
                        return;
                    }
                    h && ((e[l] = e[l].replace(Jb, "")), (a = a[e[l]](d)));
                    if (null === a[e[l]] || a[e[l]] === c) a[e[l]] = {};
                    a = a[e[l]];
                }
                if (f.match(Jb)) a[f.replace(Jb, "")](d);
                else a[f.replace(Xb, "")] = d;
            };
            return function (c, d) {
                return b(c, d, a);
            };
        }
        function ea(a) {
            return lb(a.aoData, "_aData");
        }
        function ga(a) {
            a.aoData.length = 0;
            a.aiDisplayMaster.length = 0;
            a.aiDisplay.length = 0;
        }
        function ha(a, b, d) {
            for (var e = -1, f = 0, g = a.length; f < g; f++) a[f] == b ? (e = f) : a[f] > b && a[f]--;
            -1 != e && d === c && a.splice(e, 1);
        }
        function va(a, b, d, e) {
            var f = a.aoData[b],
                g,
                h = function (c, d) {
                    for (; c.childNodes.length; ) c.removeChild(c.firstChild);
                    c.innerHTML = B(a, b, d, "display");
                };
            if ("dom" !== d && ((d && "auto" !== d) || "dom" !== f.src)) {
                var l = f.anCells;
                if (l)
                    if (e !== c) h(l[e], e);
                    else for (d = 0, g = l.length; d < g; d++) h(l[d], d);
            } else f._aData = L(a, f, e, e === c ? c : f._aData).data;
            f._aSortData = null;
            f._aFilterData = null;
            h = a.aoColumns;
            if (e !== c) h[e].sType = null;
            else {
                d = 0;
                for (g = h.length; d < g; d++) h[d].sType = null;
                wa(f);
            }
        }
        function L(a, b, e, f) {
            var g = [],
                h = b.firstChild,
                l,
                k = 0,
                n,
                q = a.aoColumns,
                r = a._rowReadObject;
            f = f || r ? {} : [];
            var x = function (a, b) {
                if ("string" === typeof a) {
                    var c = a.indexOf("@");
                    -1 !== c && ((c = a.substring(c + 1)), A(a)(f, b.getAttribute(c)));
                }
            };
            a = function (a) {
                if (e === c || e === k)
                    (l = q[k]), (n = d.trim(a.innerHTML)), l && l._bAttrSrc ? (A(l.mData._)(f, n), x(l.mData.sort, a), x(l.mData.type, a), x(l.mData.filter, a)) : r ? (l._setter || (l._setter = A(l.mData)), l._setter(f, n)) : (f[k] = n);
                k++;
            };
            if (h)
                for (; h; ) {
                    b = h.nodeName.toUpperCase();
                    if ("TD" == b || "TH" == b) a(h), g.push(h);
                    h = h.nextSibling;
                }
            else for (g = b.anCells, h = 0, b = g.length; h < b; h++) a(g[h]);
            return { data: f, cells: g };
        }
        function pa(b, c, d, e) {
            var f = b.aoData[c],
                g = f._aData,
                h = [],
                l,
                k,
                n,
                q,
                r;
            if (null === f.nTr) {
                l = d || a.createElement("tr");
                f.nTr = l;
                f.anCells = h;
                l._DT_RowIndex = c;
                wa(f);
                q = 0;
                for (r = b.aoColumns.length; q < r; q++) {
                    n = b.aoColumns[q];
                    k = d ? e[q] : a.createElement(n.sCellType);
                    h.push(k);
                    if (!d || n.mRender || n.mData !== q) k.innerHTML = B(b, c, q, "display");
                    n.sClass && (k.className += " " + n.sClass);
                    n.bVisible && !d ? l.appendChild(k) : !n.bVisible && d && k.parentNode.removeChild(k);
                    n.fnCreatedCell && n.fnCreatedCell.call(b.oInstance, k, B(b, c, q), g, c, q);
                }
                fa(b, "aoRowCreatedCallback", null, [l, g, c]);
            }
            f.nTr.setAttribute("role", "row");
        }
        function wa(a) {
            var b = a.nTr,
                c = a._aData;
            if (b) {
                c.DT_RowId && (b.id = c.DT_RowId);
                if (c.DT_RowClass) {
                    var e = c.DT_RowClass.split(" ");
                    a.__rowc = a.__rowc ? ld(a.__rowc.concat(e)) : e;
                    d(b).removeClass(a.__rowc.join(" ")).addClass(c.DT_RowClass);
                }
                c.DT_RowData && d(b).data(c.DT_RowData);
            }
        }
        function Ba(a) {
            var b,
                c,
                e,
                f,
                g,
                h = a.nTHead,
                l = a.nTFoot,
                k = 0 === d("th, td", h).length,
                n = a.oClasses,
                q = a.aoColumns;
            k && (f = d("<tr/>").appendTo(h));
            b = 0;
            for (c = q.length; b < c; b++)
                (g = q[b]),
                    (e = d(g.nTh).addClass(g.sClass)),
                    k && e.appendTo(f),
                    a.oFeatures.bSort && (e.addClass(g.sSortingClass), !1 !== g.bSortable && (e.attr("tabindex", a.iTabIndex).attr("aria-controls", a.sTableId), ua(a, g.nTh, b))),
                    g.sTitle != e.html() && e.html(g.sTitle),
                    Kc(a, "header")(a, e, g, n);
            k && Ca(a.aoHeader, h);
            d(h).find(">tr").attr("role", "row");
            d(h).find(">tr>th, >tr>td").addClass(n.sHeaderTH);
            d(l).find(">tr>th, >tr>td").addClass(n.sFooterTH);
            if (null !== l) for (a = a.aoFooter[0], b = 0, c = a.length; b < c; b++) (g = q[b]), (g.nTf = a[b].cell), g.sClass && d(g.nTf).addClass(g.sClass);
        }
        function W(a, b, e) {
            var f,
                g,
                h,
                l = [],
                k = [],
                n = a.aoColumns.length,
                q;
            if (b) {
                e === c && (e = !1);
                f = 0;
                for (g = b.length; f < g; f++) {
                    l[f] = b[f].slice();
                    l[f].nTr = b[f].nTr;
                    for (h = n - 1; 0 <= h; h--) a.aoColumns[h].bVisible || e || l[f].splice(h, 1);
                    k.push([]);
                }
                f = 0;
                for (g = l.length; f < g; f++) {
                    if ((a = l[f].nTr)) for (; (h = a.firstChild); ) a.removeChild(h);
                    h = 0;
                    for (b = l[f].length; h < b; h++)
                        if (((q = n = 1), k[f][h] === c)) {
                            a.appendChild(l[f][h].cell);
                            for (k[f][h] = 1; l[f + n] !== c && l[f][h].cell == l[f + n][h].cell; ) (k[f + n][h] = 1), n++;
                            for (; l[f][h + q] !== c && l[f][h].cell == l[f][h + q].cell; ) {
                                for (e = 0; e < n; e++) k[f + e][h + q] = 1;
                                q++;
                            }
                            d(l[f][h].cell).attr("rowspan", n).attr("colspan", q);
                        }
                }
            }
        }
        function ra(a) {
            var b = fa(a, "aoPreDrawCallback", "preDraw", [a]);
            if (-1 !== d.inArray(!1, b)) Aa(a, !1);
            else {
                var b = [],
                    e = 0,
                    f = a.asStripeClasses,
                    g = f.length,
                    h = a.oLanguage,
                    l = a.iInitDisplayStart,
                    k = "ssp" == Ta(a),
                    n = a.aiDisplay;
                a.bDrawing = !0;
                l !== c && -1 !== l && ((a._iDisplayStart = k ? l : l >= a.fnRecordsDisplay() ? 0 : l), (a.iInitDisplayStart = -1));
                var l = a._iDisplayStart,
                    q = a.fnDisplayEnd();
                if (a.bDeferLoading) (a.bDeferLoading = !1), a.iDraw++, Aa(a, !1);
                else if (!k) a.iDraw++;
                else if (!a.bDestroying && !za(a)) return;
                if (0 !== n.length)
                    for (h = k ? a.aoData.length : q, k = k ? 0 : l; k < h; k++) {
                        var r = n[k],
                            x = a.aoData[r];
                        null === x.nTr && pa(a, r);
                        r = x.nTr;
                        if (0 !== g) {
                            var m = f[e % g];
                            x._sRowStripe != m && (d(r).removeClass(x._sRowStripe).addClass(m), (x._sRowStripe = m));
                        }
                        fa(a, "aoRowCallback", null, [r, x._aData, e, k]);
                        b.push(r);
                        e++;
                    }
                else
                    (e = h.sZeroRecords),
                        1 == a.iDraw && "ajax" == Ta(a) ? (e = h.sLoadingRecords) : h.sEmptyTable && 0 === a.fnRecordsTotal() && (e = h.sEmptyTable),
                        (b[0] = d("<tr/>", { class: g ? f[0] : "" }).append(d("<td />", { valign: "top", colSpan: y(a), class: a.oClasses.sRowEmpty }).html(e))[0]);
                fa(a, "aoHeaderCallback", "header", [d(a.nTHead).children("tr")[0], ea(a), l, q, n]);
                fa(a, "aoFooterCallback", "footer", [d(a.nTFoot).children("tr")[0], ea(a), l, q, n]);
                f = d(a.nTBody);
                f.children().detach();
                f.append(d(b));
                fa(a, "aoDrawCallback", "draw", [a]);
                a.bSorted = !1;
                a.bFiltered = !1;
                a.bDrawing = !1;
            }
        }
        function Q(a, b) {
            var c = a.oFeatures,
                d = c.bFilter;
            c.bSort && yb(a);
            d ? Sa(a, a.oPreviousSearch) : (a.aiDisplay = a.aiDisplayMaster.slice());
            !0 !== b && (a._iDisplayStart = 0);
            a._drawHold = b;
            ra(a);
            a._drawHold = !1;
        }
        function I(a) {
            var b = a.oClasses,
                c = d(a.nTable),
                c = d("<div/>").insertBefore(c),
                e = a.oFeatures,
                f = d("<div/>", { id: a.sTableId + "_wrapper", class: b.sWrapper + (a.nTFoot ? "" : " " + b.sNoFooter) });
            a.nHolding = c[0];
            a.nTableWrapper = f[0];
            a.nTableReinsertBefore = a.nTable.nextSibling;
            for (var g = a.sDom.split(""), h, l, k, n, q, r, x = 0; x < g.length; x++) {
                h = null;
                l = g[x];
                if ("<" == l) {
                    k = d("<div/>")[0];
                    n = g[x + 1];
                    if ("'" == n || '"' == n) {
                        q = "";
                        for (r = 2; g[x + r] != n; ) (q += g[x + r]), r++;
                        "H" == q ? (q = b.sJUIHeader) : "F" == q && (q = b.sJUIFooter);
                        -1 != q.indexOf(".") ? ((n = q.split(".")), (k.id = n[0].substr(1, n[0].length - 1)), (k.className = n[1])) : "#" == q.charAt(0) ? (k.id = q.substr(1, q.length - 1)) : (k.className = q);
                        x += r;
                    }
                    f.append(k);
                    f = d(k);
                } else if (">" == l) f = f.parent();
                else if ("l" == l && e.bPaginate && e.bLengthChange) h = Mc(a);
                else if ("f" == l && e.bFilter) h = Ka(a);
                else if ("r" == l && e.bProcessing) h = wb(a);
                else if ("t" == l) h = xb(a);
                else if ("i" == l && e.bInfo) h = zc(a);
                else if ("p" == l && e.bPaginate) h = ec(a);
                else if (0 !== E.ext.feature.length)
                    for (k = E.ext.feature, r = 0, n = k.length; r < n; r++)
                        if (l == k[r].cFeature) {
                            h = k[r].fnInit(a);
                            break;
                        }
                h && ((k = a.aanFeatures), k[l] || (k[l] = []), k[l].push(h), f.append(h));
            }
            c.replaceWith(f);
        }
        function Ca(a, b) {
            var c = d(b).children("tr"),
                e,
                f,
                g,
                h,
                l,
                k,
                n,
                q,
                r,
                x;
            a.splice(0, a.length);
            g = 0;
            for (k = c.length; g < k; g++) a.push([]);
            g = 0;
            for (k = c.length; g < k; g++)
                for (e = c[g], f = e.firstChild; f; ) {
                    if ("TD" == f.nodeName.toUpperCase() || "TH" == f.nodeName.toUpperCase()) {
                        q = 1 * f.getAttribute("colspan");
                        r = 1 * f.getAttribute("rowspan");
                        q = q && 0 !== q && 1 !== q ? q : 1;
                        r = r && 0 !== r && 1 !== r ? r : 1;
                        h = 0;
                        for (l = a[g]; l[h]; ) h++;
                        n = h;
                        x = 1 === q ? !0 : !1;
                        for (l = 0; l < q; l++) for (h = 0; h < r; h++) (a[g + h][n + l] = { cell: f, unique: x }), (a[g + h].nTr = e);
                    }
                    f = f.nextSibling;
                }
        }
        function M(a, b, c) {
            var d = [];
            c || ((c = a.aoHeader), b && ((c = []), Ca(c, b)));
            b = 0;
            for (var e = c.length; b < e; b++) for (var f = 0, g = c[b].length; f < g; f++) !c[b][f].unique || (d[f] && a.bSortCellsTop) || (d[f] = c[b][f].cell);
            return d;
        }
        function ma(a, b, c) {
            fa(a, "aoServerParams", "serverParams", [b]);
            if (b && d.isArray(b)) {
                var e = {},
                    f = /(.*?)\[\]$/;
                d.each(b, function (a, b) {
                    var c = b.name.match(f);
                    c ? ((c = c[0]), e[c] || (e[c] = []), e[c].push(b.value)) : (e[b.name] = b.value);
                });
                b = e;
            }
            var g,
                h = a.ajax,
                l = a.oInstance;
            if (d.isPlainObject(h) && h.data) {
                g = h.data;
                var k = d.isFunction(g) ? g(b) : g;
                b = d.isFunction(g) && k ? k : d.extend(!0, b, k);
                delete h.data;
            }
            k = {
                data: b,
                success: function (b) {
                    var d = b.error || b.sError;
                    d && a.oApi._fnLog(a, 0, d);
                    a.json = b;
                    fa(a, null, "xhr", [a, b]);
                    c(b);
                },
                dataType: "json",
                cache: !1,
                type: a.sServerMethod,
                error: function (b, c, d) {
                    d = a.oApi._fnLog;
                    "parsererror" == c ? d(a, 0, "Invalid JSON response", 1) : 4 === b.readyState && d(a, 0, "Ajax error", 7);
                    Aa(a, !1);
                },
            };
            a.oAjaxData = b;
            fa(a, null, "preXhr", [a, b]);
            a.fnServerData
                ? a.fnServerData.call(
                      l,
                      a.sAjaxSource,
                      d.map(b, function (a, b) {
                          return { name: b, value: a };
                      }),
                      c,
                      a
                  )
                : a.sAjaxSource || "string" === typeof h
                ? (a.jqXHR = d.ajax(d.extend(k, { url: h || a.sAjaxSource })))
                : d.isFunction(h)
                ? (a.jqXHR = h.call(l, b, c, a))
                : ((a.jqXHR = d.ajax(d.extend(k, h))), (h.data = g));
        }
        function za(a) {
            return a.bAjaxDataGet
                ? (a.iDraw++,
                  Aa(a, !0),
                  ma(a, ta(a), function (b) {
                      aa(a, b);
                  }),
                  !1)
                : !0;
        }
        function ta(a) {
            var b = a.aoColumns,
                c = b.length,
                e = a.oFeatures,
                f = a.oPreviousSearch,
                g = a.aoPreSearchCols,
                h,
                l = [],
                k,
                n,
                q,
                r = Da(a);
            h = a._iDisplayStart;
            k = !1 !== e.bPaginate ? a._iDisplayLength : -1;
            var x = function (a, b) {
                l.push({ name: a, value: b });
            };
            x("sEcho", a.iDraw);
            x("iColumns", c);
            x("sColumns", lb(b, "sName").join(","));
            x("iDisplayStart", h);
            x("iDisplayLength", k);
            var m = { draw: a.iDraw, columns: [], order: [], start: h, length: k, search: { value: f.sSearch, regex: f.bRegex } };
            for (h = 0; h < c; h++)
                (n = b[h]),
                    (q = g[h]),
                    (k = "function" == typeof n.mData ? "function" : n.mData),
                    m.columns.push({ data: k, name: n.sName, searchable: n.bSearchable, orderable: n.bSortable, search: { value: q.sSearch, regex: q.bRegex } }),
                    x("mDataProp_" + h, k),
                    e.bFilter && (x("sSearch_" + h, q.sSearch), x("bRegex_" + h, q.bRegex), x("bSearchable_" + h, n.bSearchable)),
                    e.bSort && x("bSortable_" + h, n.bSortable);
            e.bFilter && (x("sSearch", f.sSearch), x("bRegex", f.bRegex));
            e.bSort &&
                (d.each(r, function (a, b) {
                    m.order.push({ column: b.col, dir: b.dir });
                    x("iSortCol_" + a, b.col);
                    x("sSortDir_" + a, b.dir);
                }),
                x("iSortingCols", r.length));
            b = E.ext.legacy.ajax;
            return null === b ? (a.sAjaxSource ? l : m) : b ? l : m;
        }
        function aa(a, b) {
            var d = function (a, d) {
                    return b[a] !== c ? b[a] : b[d];
                },
                e = d("sEcho", "draw"),
                f = d("iTotalRecords", "recordsTotal"),
                d = d("iTotalDisplayRecords", "recordsFiltered");
            if (e) {
                if (1 * e < a.iDraw) return;
                a.iDraw = 1 * e;
            }
            ga(a);
            a._iRecordsTotal = parseInt(f, 10);
            a._iRecordsDisplay = parseInt(d, 10);
            e = ca(a, b);
            f = 0;
            for (d = e.length; f < d; f++) x(a, e[f]);
            a.aiDisplay = a.aiDisplayMaster.slice();
            a.bAjaxDataGet = !1;
            ra(a);
            a._bInitComplete || la(a, b);
            a.bAjaxDataGet = !0;
            Aa(a, !1);
        }
        function ca(a, b) {
            var e = d.isPlainObject(a.ajax) && a.ajax.dataSrc !== c ? a.ajax.dataSrc : a.sAjaxDataProp;
            return "data" === e ? b.aaData || b[e] : "" !== e ? J(e)(b) : b;
        }
        function Ka(b) {
            var c = b.oClasses,
                e = b.sTableId,
                f = b.oLanguage,
                g = b.oPreviousSearch,
                h = b.aanFeatures,
                l = '<input type="search" class="' + c.sFilterInput + '"/>',
                k = f.sSearch,
                k = k.match(/_INPUT_/) ? k.replace("_INPUT_", l) : k + l,
                c = d("<div/>", { id: h.f ? null : e + "_filter", class: c.sFilter }).append(d("<label/>").append(k)),
                h = function () {
                    var a = this.value ? this.value : "";
                    a != g.sSearch && (Sa(b, { sSearch: a, bRegex: g.bRegex, bSmart: g.bSmart, bCaseInsensitive: g.bCaseInsensitive }), (b._iDisplayStart = 0), ra(b));
                },
                l = null !== b.searchDelay ? b.searchDelay : "ssp" === Ta(b) ? 400 : 0,
                n = d("input", c)
                    .val(g.sSearch)
                    .attr("placeholder", f.sSearchPlaceholder)
                    .bind("keyup.DT search.DT input.DT paste.DT cut.DT", l ? Ra(h, l) : h)
                    .bind("keypress.DT", function (a) {
                        if (13 == a.keyCode) return !1;
                    })
                    .attr("aria-controls", e);
            d(b.nTable).on("search.dt.DT", function (c, d) {
                if (b === d)
                    try {
                        n[0] !== a.activeElement && n.val(g.sSearch);
                    } catch (e) {}
            });
            return c[0];
        }
        function Sa(a, b, d) {
            var e = a.oPreviousSearch,
                f = a.aoPreSearchCols,
                g = function (a) {
                    e.sSearch = a.sSearch;
                    e.bRegex = a.bRegex;
                    e.bSmart = a.bSmart;
                    e.bCaseInsensitive = a.bCaseInsensitive;
                },
                h = function (a) {
                    return a.bEscapeRegex !== c ? !a.bEscapeRegex : a.bRegex;
                };
            C(a);
            if ("ssp" != Ta(a)) {
                bc(a, b.sSearch, d, h(b), b.bSmart, b.bCaseInsensitive);
                g(b);
                for (b = 0; b < f.length; b++) T(a, f[b].sSearch, b, h(f[b]), f[b].bSmart, f[b].bCaseInsensitive);
                na(a);
            } else g(b);
            a.bFiltered = !0;
            fa(a, null, "search", [a]);
        }
        function na(a) {
            for (var b = E.ext.search, c = a.aiDisplay, d, e, f = 0, g = b.length; f < g; f++) {
                for (var h = [], l = 0, k = c.length; l < k; l++) (e = c[l]), (d = a.aoData[e]), b[f](a, d._aFilterData, e, d._aData, l) && h.push(e);
                c.length = 0;
                c.push.apply(c, h);
            }
        }
        function T(a, b, c, d, e, f) {
            if ("" !== b) {
                var g = a.aiDisplay;
                d = ab(b, d, e, f);
                for (e = g.length - 1; 0 <= e; e--) (b = a.aoData[g[e]]._aFilterData[c]), d.test(b) || g.splice(e, 1);
            }
        }
        function bc(a, b, c, d, e, f) {
            d = ab(b, d, e, f);
            e = a.oPreviousSearch.sSearch;
            f = a.aiDisplayMaster;
            var g;
            0 !== E.ext.search.length && (c = !0);
            g = Gb(a);
            if (0 >= b.length) a.aiDisplay = f.slice();
            else {
                if (g || c || e.length > b.length || 0 !== b.indexOf(e) || a.bSorted) a.aiDisplay = f.slice();
                b = a.aiDisplay;
                for (c = b.length - 1; 0 <= c; c--) d.test(a.aoData[b[c]]._sFilterRow) || b.splice(c, 1);
            }
        }
        function ab(a, b, c, e) {
            a = b ? a : vb(a);
            c &&
                (a =
                    "^(?=.*?" +
                    d
                        .map(a.match(/"[^"]+"|[^ ]+/g) || "", function (a) {
                            if ('"' === a.charAt(0)) {
                                var b = a.match(/^"(.*)"$/);
                                a = b ? b[1] : a;
                            }
                            return a.replace('"', "");
                        })
                        .join(")(?=.*?") +
                    ").*$");
            return new RegExp(a, e ? "i" : "");
        }
        function vb(a) {
            return a.replace(Ee, "\\$1");
        }
        function Gb(a) {
            var b = a.aoColumns,
                c,
                d,
                e,
                f,
                g,
                h,
                l,
                k,
                n = E.ext.type.search;
            c = !1;
            d = 0;
            for (f = a.aoData.length; d < f; d++)
                if (((k = a.aoData[d]), !k._aFilterData)) {
                    h = [];
                    e = 0;
                    for (g = b.length; e < g; e++)
                        (c = b[e]),
                            c.bSearchable ? ((l = B(a, d, e, "filter")), n[c.sType] && (l = n[c.sType](l)), null === l && (l = ""), "string" !== typeof l && l.toString && (l = l.toString())) : (l = ""),
                            l.indexOf && -1 !== l.indexOf("&") && ((Cc.innerHTML = l), (l = md ? Cc.textContent : Cc.innerText)),
                            l.replace && (l = l.replace(/[\r\n]/g, "")),
                            h.push(l);
                    k._aFilterData = h;
                    k._sFilterRow = h.join("  ");
                    c = !0;
                }
            return c;
        }
        function hb(a) {
            return { search: a.sSearch, smart: a.bSmart, regex: a.bRegex, caseInsensitive: a.bCaseInsensitive };
        }
        function Hb(a) {
            return { sSearch: a.search, bSmart: a.smart, bRegex: a.regex, bCaseInsensitive: a.caseInsensitive };
        }
        function zc(a) {
            var b = a.sTableId,
                c = a.aanFeatures.i,
                e = d("<div/>", { class: a.oClasses.sInfo, id: c ? null : b + "_info" });
            c || (a.aoDrawCallback.push({ fn: cc, sName: "information" }), e.attr("role", "status").attr("aria-live", "polite"), d(a.nTable).attr("aria-describedby", b + "_info"));
            return e[0];
        }
        function cc(a) {
            var b = a.aanFeatures.i;
            if (0 !== b.length) {
                var c = a.oLanguage,
                    e = a._iDisplayStart + 1,
                    f = a.fnDisplayEnd(),
                    g = a.fnRecordsTotal(),
                    h = a.fnRecordsDisplay(),
                    l = h ? c.sInfo : c.sInfoEmpty;
                h !== g && (l += " " + c.sInfoFiltered);
                l += c.sInfoPostFix;
                l = Ac(a, l);
                c = c.fnInfoCallback;
                null !== c && (l = c.call(a.oInstance, a, e, f, g, h, l));
                d(b).html(l);
            }
        }
        function Ac(a, b) {
            var c = a.fnFormatNumber,
                d = a._iDisplayStart + 1,
                e = a._iDisplayLength,
                f = a.fnRecordsDisplay(),
                g = -1 === e;
            return b
                .replace(/_START_/g, c.call(a, d))
                .replace(/_END_/g, c.call(a, a.fnDisplayEnd()))
                .replace(/_MAX_/g, c.call(a, a.fnRecordsTotal()))
                .replace(/_TOTAL_/g, c.call(a, f))
                .replace(/_PAGE_/g, c.call(a, g ? 1 : Math.ceil(d / e)))
                .replace(/_PAGES_/g, c.call(a, g ? 1 : Math.ceil(f / e)));
        }
        function dc(a) {
            var b,
                c,
                d = a.iInitDisplayStart,
                e = a.aoColumns,
                f;
            c = a.oFeatures;
            if (a.bInitialised) {
                I(a);
                Ba(a);
                W(a, a.aoHeader);
                W(a, a.aoFooter);
                Aa(a, !0);
                c.bAutoWidth && pc(a);
                b = 0;
                for (c = e.length; b < c; b++) (f = e[b]), f.sWidth && (f.nTh.style.width = X(f.sWidth));
                Q(a);
                e = Ta(a);
                "ssp" != e &&
                    ("ajax" == e
                        ? ma(
                              a,
                              [],
                              function (c) {
                                  var e = ca(a, c);
                                  for (b = 0; b < e.length; b++) x(a, e[b]);
                                  a.iInitDisplayStart = d;
                                  Q(a);
                                  Aa(a, !1);
                                  la(a, c);
                              },
                              a
                          )
                        : (Aa(a, !1), la(a)));
            } else
                setTimeout(function () {
                    dc(a);
                }, 200);
        }
        function la(a, b) {
            a._bInitComplete = !0;
            b && v(a);
            fa(a, "aoInitComplete", "init", [a, b]);
        }
        function m(a, b) {
            var c = parseInt(b, 10);
            a._iDisplayLength = c;
            Ja(a);
            fa(a, null, "length", [a, c]);
        }
        function Mc(a) {
            for (
                var b = a.oClasses, c = a.sTableId, e = a.aLengthMenu, f = d.isArray(e[0]), g = f ? e[0] : e, e = f ? e[1] : e, f = d("<select/>", { name: c + "_length", "aria-controls": c, class: b.sLengthSelect }), h = 0, l = g.length;
                h < l;
                h++
            )
                f[0][h] = new Option(e[h], g[h]);
            var k = d("<div><label/></div>").addClass(b.sLength);
            a.aanFeatures.l || (k[0].id = c + "_length");
            k.children().append(a.oLanguage.sLengthMenu.replace("_MENU_", f[0].outerHTML));
            d("select", k)
                .val(a._iDisplayLength)
                .bind("change.DT", function (b) {
                    m(a, d(this).val());
                    ra(a);
                });
            d(a.nTable).bind("length.dt.DT", function (b, c, e) {
                a === c && d("select", k).val(e);
            });
            return k[0];
        }
        function ec(a) {
            var b = a.sPaginationType,
                c = E.ext.pager[b],
                e = "function" === typeof c,
                f = function (a) {
                    ra(a);
                },
                b = d("<div/>").addClass(a.oClasses.sPaging + b)[0],
                g = a.aanFeatures;
            e || c.fnInit(a, b, f);
            g.p ||
                ((b.id = a.sTableId + "_paginate"),
                a.aoDrawCallback.push({
                    fn: function (a) {
                        if (e) {
                            var b = a._iDisplayStart,
                                d = a._iDisplayLength,
                                h = a.fnRecordsDisplay(),
                                l = -1 === d,
                                b = l ? 0 : Math.ceil(b / d),
                                d = l ? 1 : Math.ceil(h / d),
                                h = c(b, d),
                                k,
                                l = 0;
                            for (k = g.p.length; l < k; l++) Kc(a, "pageButton")(a, g.p[l], l, h, b, d);
                        } else c.fnUpdate(a, f);
                    },
                    sName: "pagination",
                }));
            return b;
        }
        function N(a, b, c) {
            var d = a._iDisplayStart,
                e = a._iDisplayLength,
                f = a.fnRecordsDisplay();
            0 === f || -1 === e
                ? (d = 0)
                : "number" === typeof b
                ? ((d = b * e), d > f && (d = 0))
                : "first" == b
                ? (d = 0)
                : "previous" == b
                ? ((d = 0 <= e ? d - e : 0), 0 > d && (d = 0))
                : "next" == b
                ? d + e < f && (d += e)
                : "last" == b
                ? (d = Math.floor((f - 1) / e) * e)
                : ub(a, 0, "Unknown paging action: " + b, 5);
            b = a._iDisplayStart !== d;
            a._iDisplayStart = d;
            b && (fa(a, null, "page", [a]), c && ra(a));
            return b;
        }
        function wb(a) {
            return d("<div/>", { id: a.aanFeatures.r ? null : a.sTableId + "_processing", class: a.oClasses.sProcessing })
                .html(a.oLanguage.sProcessing)
                .insertBefore(a.nTable)[0];
        }
        function Aa(a, b) {
            a.oFeatures.bProcessing && d(a.aanFeatures.r).css("display", b ? "block" : "none");
            fa(a, null, "processing", [a, b]);
        }
        function xb(a) {
            var b = d(a.nTable);
            b.attr("role", "grid");
            var c = a.oScroll;
            if ("" === c.sX && "" === c.sY) return a.nTable;
            var e = c.sX,
                f = c.sY,
                g = a.oClasses,
                h = b.children("caption"),
                l = h.length ? h[0]._captionSide : null,
                k = d(b[0].cloneNode(!1)),
                n = d(b[0].cloneNode(!1)),
                q = b.children("tfoot");
            c.sX && "100%" === b.attr("width") && b.removeAttr("width");
            q.length || (q = null);
            c = d("<div/>", { class: g.sScrollWrapper })
                .append(
                    d("<div/>", { class: g.sScrollHead })
                        .css({ overflow: "hidden", position: "relative", border: 0, width: e ? (e ? X(e) : null) : "100%" })
                        .append(
                            d("<div/>", { class: g.sScrollHeadInner })
                                .css({ "box-sizing": "content-box", width: c.sXInner || "100%" })
                                .append(
                                    k
                                        .removeAttr("id")
                                        .css("margin-left", 0)
                                        .append("top" === l ? h : null)
                                        .append(b.children("thead"))
                                )
                        )
                )
                .append(
                    d("<div/>", { class: g.sScrollBody })
                        .css({ overflow: "auto", height: f ? X(f) : null, width: e ? X(e) : null })
                        .append(b)
                );
            q &&
                c.append(
                    d("<div/>", { class: g.sScrollFoot })
                        .css({ overflow: "hidden", border: 0, width: e ? (e ? X(e) : null) : "100%" })
                        .append(
                            d("<div/>", { class: g.sScrollFootInner }).append(
                                n
                                    .removeAttr("id")
                                    .css("margin-left", 0)
                                    .append("bottom" === l ? h : null)
                                    .append(b.children("tfoot"))
                            )
                        )
                );
            var b = c.children(),
                r = b[0],
                g = b[1],
                x = q ? b[2] : null;
            e &&
                d(g).scroll(function (a) {
                    a = this.scrollLeft;
                    r.scrollLeft = a;
                    q && (x.scrollLeft = a);
                });
            a.nScrollHead = r;
            a.nScrollBody = g;
            a.nScrollFoot = x;
            a.aoDrawCallback.push({ fn: bb, sName: "scrolling" });
            return c[0];
        }
        function bb(a) {
            var b = a.oScroll,
                c = b.sX,
                e = b.sXInner,
                f = b.sY,
                g = b.iBarWidth,
                h = d(a.nScrollHead),
                l = h[0].style,
                k = h.children("div"),
                n = k[0].style,
                q = k.children("table"),
                k = a.nScrollBody,
                r = d(k),
                x = k.style,
                m = d(a.nScrollFoot).children("div"),
                u = m.children("table"),
                p = d(a.nTHead),
                z = d(a.nTable),
                v = z[0],
                B = v.style,
                t = a.nTFoot ? d(a.nTFoot) : null,
                y = a.oBrowser,
                A = y.bScrollOversize,
                G,
                C,
                H,
                J,
                Ba,
                L = [],
                ea = [],
                E = [],
                I,
                ga = function (a) {
                    a = a.style;
                    a.paddingTop = "0";
                    a.paddingBottom = "0";
                    a.borderTopWidth = "0";
                    a.borderBottomWidth = "0";
                    a.height = 0;
                };
            z.children("thead, tfoot").remove();
            Ba = p.clone().prependTo(z);
            G = p.find("tr");
            H = Ba.find("tr");
            Ba.find("th, td").removeAttr("tabindex");
            t && ((J = t.clone().prependTo(z)), (C = t.find("tr")), (J = J.find("tr")));
            c || ((x.width = "100%"), (h[0].style.width = "100%"));
            d.each(M(a, Ba), function (b, c) {
                I = w(a, b);
                c.style.width = a.aoColumns[I].sWidth;
            });
            t &&
                cb(function (a) {
                    a.style.width = "";
                }, J);
            b.bCollapse && "" !== f && (x.height = r[0].offsetHeight + p[0].offsetHeight + "px");
            h = z.outerWidth();
            "" === c
                ? ((B.width = "100%"), A && (z.find("tbody").height() > k.offsetHeight || "scroll" == r.css("overflow-y")) && (B.width = X(z.outerWidth() - g)))
                : "" !== e
                ? (B.width = X(e))
                : h == r.width() && r.height() < z.height()
                ? ((B.width = X(h - g)), z.outerWidth() > h - g && (B.width = X(h)))
                : (B.width = X(h));
            h = z.outerWidth();
            cb(ga, H);
            cb(function (a) {
                E.push(a.innerHTML);
                L.push(X(d(a).css("width")));
            }, H);
            cb(function (a, b) {
                a.style.width = L[b];
            }, G);
            d(H).height(0);
            t &&
                (cb(ga, J),
                cb(function (a) {
                    ea.push(X(d(a).css("width")));
                }, J),
                cb(function (a, b) {
                    a.style.width = ea[b];
                }, C),
                d(J).height(0));
            cb(function (a, b) {
                a.innerHTML = '<div class="dataTables_sizing" style="height:0;overflow:hidden;">' + E[b] + "</div>";
                a.style.width = L[b];
            }, H);
            t &&
                cb(function (a, b) {
                    a.innerHTML = "";
                    a.style.width = ea[b];
                }, J);
            z.outerWidth() < h
                ? ((C = k.scrollHeight > k.offsetHeight || "scroll" == r.css("overflow-y") ? h + g : h),
                  A && (k.scrollHeight > k.offsetHeight || "scroll" == r.css("overflow-y")) && (B.width = X(C - g)),
                  ("" !== c && "" === e) || ub(a, 1, "Possible column misalignment", 6))
                : (C = "100%");
            x.width = X(C);
            l.width = X(C);
            t && (a.nScrollFoot.style.width = X(C));
            !f && A && (x.height = X(v.offsetHeight + g));
            f && b.bCollapse && ((x.height = X(f)), (b = c && v.offsetWidth > k.offsetWidth ? g : 0), v.offsetHeight < k.offsetHeight && (x.height = X(v.offsetHeight + b)));
            b = z.outerWidth();
            q[0].style.width = X(b);
            n.width = X(b);
            q = z.height() > k.clientHeight || "scroll" == r.css("overflow-y");
            y = "padding" + (y.bScrollbarLeft ? "Left" : "Right");
            n[y] = q ? g + "px" : "0px";
            t && ((u[0].style.width = X(b)), (m[0].style.width = X(b)), (m[0].style[y] = q ? g + "px" : "0px"));
            r.scroll();
            (!a.bSorted && !a.bFiltered) || a._drawHold || (k.scrollTop = 0);
        }
        function cb(a, b, c) {
            for (var d = 0, e = 0, f = b.length, g, h; e < f; ) {
                g = b[e].firstChild;
                for (h = c ? c[e].firstChild : null; g; ) 1 === g.nodeType && (c ? a(g, h, d) : a(g, d), d++), (g = g.nextSibling), (h = c ? h.nextSibling : null);
                e++;
            }
        }
        function pc(a) {
            var c = a.nTable,
                e = a.aoColumns,
                f = a.oScroll,
                g = f.sY,
                h = f.sX,
                l = f.sXInner,
                k = e.length,
                f = p(a, "bVisible"),
                n = d("th", a.nTHead),
                q = c.getAttribute("width"),
                r = c.parentNode,
                x = !1,
                m,
                u;
            for (m = 0; m < f.length; m++) (u = e[f[m]]), null !== u.sWidth && ((u.sWidth = Ib(u.sWidthOrig, r)), (x = !0));
            if (x || h || g || k != y(a) || k != n.length) {
                k = d(c).clone().empty().css("visibility", "hidden").removeAttr("id").append(d(a.nTHead).clone(!1)).append(d(a.nTFoot).clone(!1)).append(d("<tbody><tr/></tbody>"));
                k.find("tfoot th, tfoot td").css("width", "");
                var z = k.find("tbody tr"),
                    n = M(a, k.find("thead")[0]);
                for (m = 0; m < f.length; m++) (u = e[f[m]]), (n[m].style.width = null !== u.sWidthOrig && "" !== u.sWidthOrig ? X(u.sWidthOrig) : "");
                if (a.aoData.length) for (m = 0; m < f.length; m++) (x = f[m]), (u = e[x]), d(gd(a, x)).clone(!1).append(u.sContentPadding).appendTo(z);
                k.appendTo(r);
                h && l ? k.width(l) : h ? (k.css("width", "auto"), k.width() < r.offsetWidth && k.width(r.offsetWidth)) : g ? k.width(r.offsetWidth) : q && k.width(q);
                jb(a, k[0]);
                if (h) {
                    for (m = l = 0; m < f.length; m++) (u = e[f[m]]), (g = d(n[m]).outerWidth()), (l += null === u.sWidthOrig ? g : parseInt(u.sWidth, 10) + g - d(n[m]).width());
                    k.width(X(l));
                    c.style.width = X(l);
                }
                for (m = 0; m < f.length; m++) if (((u = e[f[m]]), (g = d(n[m]).width()))) u.sWidth = X(g);
                c.style.width = X(k.css("width"));
                k.remove();
            } else for (m = 0; m < k; m++) e[m].sWidth = X(n.eq(m).width());
            q && (c.style.width = X(q));
            (!q && !h) ||
                a._reszEvt ||
                (d(b).bind(
                    "resize.DT-" + a.sInstance,
                    Ra(function () {
                        v(a);
                    })
                ),
                (a._reszEvt = !0));
        }
        function Ra(a, b) {
            var d = b !== c ? b : 200,
                e,
                f;
            return function () {
                var b = this,
                    g = +new Date(),
                    h = arguments;
                e && g < e + d
                    ? (clearTimeout(f),
                      (f = setTimeout(function () {
                          e = c;
                          a.apply(b, h);
                      }, d)))
                    : e
                    ? ((e = g), a.apply(b, h))
                    : (e = g);
            };
        }
        function Ib(b, c) {
            if (!b) return 0;
            var e = d("<div/>")
                    .css("width", X(b))
                    .appendTo(c || a.body),
                f = e[0].offsetWidth;
            e.remove();
            return f;
        }
        function jb(a, b) {
            var c = a.oScroll;
            if (c.sX || c.sY) (c = c.sX ? 0 : c.iBarWidth), (b.style.width = X(d(b).outerWidth() - c));
        }
        function gd(a, b) {
            var c = hd(a, b);
            if (0 > c) return null;
            var e = a.aoData[c];
            return e.nTr ? e.anCells[b] : d("<td/>").html(B(a, c, b, "display"))[0];
        }
        function hd(a, b) {
            for (var c, d = -1, e = -1, f = 0, g = a.aoData.length; f < g; f++) (c = B(a, f, b, "display") + ""), (c = c.replace(Be, "")), c.length > d && ((d = c.length), (e = f));
            return e;
        }
        function X(a) {
            return null === a ? "0px" : "number" == typeof a ? (0 > a ? "0px" : a + "px") : a.match(/\d$/) ? a + "px" : a;
        }
        function qc() {
            if (!E.__scrollbarWidth) {
                var a = d("<p/>").css({ width: "100%", height: 200, padding: 0 })[0],
                    b = d("<div/>").css({ position: "absolute", top: 0, left: 0, width: 200, height: 150, padding: 0, overflow: "hidden", visibility: "hidden" }).append(a).appendTo("body"),
                    c = a.offsetWidth;
                b.css("overflow", "scroll");
                a = a.offsetWidth;
                c === a && (a = b[0].clientWidth);
                b.remove();
                E.__scrollbarWidth = c - a;
            }
            return E.__scrollbarWidth;
        }
        function Da(a) {
            var b,
                e,
                f = [],
                g = a.aoColumns,
                h,
                l,
                k,
                n;
            b = a.aaSortingFixed;
            e = d.isPlainObject(b);
            var q = [];
            h = function (a) {
                a.length && !d.isArray(a[0]) ? q.push(a) : q.push.apply(q, a);
            };
            d.isArray(b) && h(b);
            e && b.pre && h(b.pre);
            h(a.aaSorting);
            e && b.post && h(b.post);
            for (a = 0; a < q.length; a++)
                for (n = q[a][0], h = g[n].aDataSort, b = 0, e = h.length; b < e; b++)
                    (l = h[b]), (k = g[l].sType || "string"), q[a]._idx === c && (q[a]._idx = d.inArray(q[a][1], g[l].asSorting)), f.push({ src: n, col: l, dir: q[a][1], index: q[a]._idx, type: k, formatter: E.ext.type.order[k + "-pre"] });
            return f;
        }
        function yb(a) {
            var b,
                c,
                d = [],
                e = E.ext.type.order,
                f = a.aoData,
                g = 0,
                h,
                l = a.aiDisplayMaster,
                k;
            C(a);
            k = Da(a);
            b = 0;
            for (c = k.length; b < c; b++) (h = k[b]), h.formatter && g++, Jc(a, h.col);
            if ("ssp" != Ta(a) && 0 !== k.length) {
                b = 0;
                for (c = l.length; b < c; b++) d[l[b]] = b;
                g === k.length
                    ? l.sort(function (a, b) {
                          var c,
                              e,
                              g,
                              h,
                              l = k.length,
                              n = f[a]._aSortData,
                              q = f[b]._aSortData;
                          for (g = 0; g < l; g++) if (((h = k[g]), (c = n[h.col]), (e = q[h.col]), (c = c < e ? -1 : c > e ? 1 : 0), 0 !== c)) return "asc" === h.dir ? c : -c;
                          c = d[a];
                          e = d[b];
                          return c < e ? -1 : c > e ? 1 : 0;
                      })
                    : l.sort(function (a, b) {
                          var c,
                              g,
                              h,
                              l,
                              n = k.length,
                              q = f[a]._aSortData,
                              D = f[b]._aSortData;
                          for (h = 0; h < n; h++) if (((l = k[h]), (c = q[l.col]), (g = D[l.col]), (l = e[l.type + "-" + l.dir] || e["string-" + l.dir]), (c = l(c, g)), 0 !== c)) return c;
                          c = d[a];
                          g = d[b];
                          return c < g ? -1 : c > g ? 1 : 0;
                      });
            }
            a.bSorted = !0;
        }
        function Bc(a) {
            var b,
                c,
                d = a.aoColumns,
                e = Da(a);
            a = a.oLanguage.oAria;
            for (var f = 0, g = d.length; f < g; f++) {
                c = d[f];
                var h = c.asSorting;
                b = c.sTitle.replace(/<.*?>/g, "");
                var l = c.nTh;
                l.removeAttribute("aria-sort");
                c.bSortable &&
                    (0 < e.length && e[0].col == f ? (l.setAttribute("aria-sort", "asc" == e[0].dir ? "ascending" : "descending"), (c = h[e[0].index + 1] || h[0])) : (c = h[0]), (b += "asc" === c ? a.sSortAscending : a.sSortDescending));
                l.setAttribute("aria-label", b);
            }
        }
        function U(a, b, e, f) {
            var g = a.aaSorting,
                h = a.aoColumns[b].asSorting,
                l = function (a, b) {
                    var e = a._idx;
                    e === c && (e = d.inArray(a[1], h));
                    return e + 1 < h.length ? e + 1 : b ? null : 0;
                };
            "number" === typeof g[0] && (g = a.aaSorting = [g]);
            e && a.oFeatures.bSortMulti
                ? ((e = d.inArray(b, lb(g, "0"))), -1 !== e ? ((b = l(g[e], !0)), null === b ? g.splice(e, 1) : ((g[e][1] = h[b]), (g[e]._idx = b))) : (g.push([b, h[0], 0]), (g[g.length - 1]._idx = 0)))
                : g.length && g[0][0] == b
                ? ((b = l(g[0])), (g.length = 1), (g[0][1] = h[b]), (g[0]._idx = b))
                : ((g.length = 0), g.push([b, h[0]]), (g[0]._idx = 0));
            Q(a);
            "function" == typeof f && f(a);
        }
        function ua(a, b, c, d) {
            var e = a.aoColumns[c];
            gc(b, {}, function (b) {
                !1 !== e.bSortable &&
                    (a.oFeatures.bProcessing
                        ? (Aa(a, !0),
                          setTimeout(function () {
                              U(a, c, b.shiftKey, d);
                              "ssp" !== Ta(a) && Aa(a, !1);
                          }, 0))
                        : U(a, c, b.shiftKey, d));
            });
        }
        function mc(a) {
            var b = a.aLastSort,
                c = a.oClasses.sSortColumn,
                e = Da(a),
                f = a.oFeatures,
                g,
                h;
            if (f.bSort && f.bSortClasses) {
                f = 0;
                for (g = b.length; f < g; f++) (h = b[f].src), d(lb(a.aoData, "anCells", h)).removeClass(c + (2 > f ? f + 1 : 3));
                f = 0;
                for (g = e.length; f < g; f++) (h = e[f].src), d(lb(a.aoData, "anCells", h)).addClass(c + (2 > f ? f + 1 : 3));
            }
            a.aLastSort = e;
        }
        function Jc(a, b) {
            var c = a.aoColumns[b],
                d = E.ext.order[c.sSortDataType],
                e;
            d && (e = d.call(a.oInstance, a, b, t(a, b)));
            for (var f, g = E.ext.type.order[c.sType + "-pre"], h = 0, l = a.aoData.length; h < l; h++)
                if (((c = a.aoData[h]), c._aSortData || (c._aSortData = []), !c._aSortData[b] || d)) (f = d ? e[h] : B(a, h, b, "sort")), (c._aSortData[b] = g ? g(f) : f);
        }
        function Vb(a) {
            if (a.oFeatures.bStateSave && !a.bDestroying) {
                var b = {
                    time: +new Date(),
                    start: a._iDisplayStart,
                    length: a._iDisplayLength,
                    order: d.extend(!0, [], a.aaSorting),
                    search: hb(a.oPreviousSearch),
                    columns: d.map(a.aoColumns, function (b, c) {
                        return { visible: b.bVisible, search: hb(a.aoPreSearchCols[c]) };
                    }),
                };
                fa(a, "aoStateSaveParams", "stateSaveParams", [a, b]);
                a.oSavedState = b;
                a.fnStateSaveCallback.call(a.oInstance, a, b);
            }
        }
        function ib(a, b) {
            var c,
                e,
                f = a.aoColumns;
            if (a.oFeatures.bStateSave) {
                var g = a.fnStateLoadCallback.call(a.oInstance, a);
                if (g && g.time && ((c = fa(a, "aoStateLoadParams", "stateLoadParams", [a, g])), -1 === d.inArray(!1, c) && ((c = a.iStateDuration), !(0 < c && g.time < +new Date() - 1e3 * c) && f.length === g.columns.length))) {
                    a.oLoadedState = d.extend(!0, {}, g);
                    a._iDisplayStart = g.start;
                    a.iInitDisplayStart = g.start;
                    a._iDisplayLength = g.length;
                    a.aaSorting = [];
                    d.each(g.order, function (b, c) {
                        a.aaSorting.push(c[0] >= f.length ? [0, c[1]] : c);
                    });
                    d.extend(a.oPreviousSearch, Hb(g.search));
                    c = 0;
                    for (e = g.columns.length; c < e; c++) {
                        var h = g.columns[c];
                        f[c].bVisible = h.visible;
                        d.extend(a.aoPreSearchCols[c], Hb(h.search));
                    }
                    fa(a, "aoStateLoaded", "stateLoaded", [a, g]);
                }
            }
        }
        function pb(a) {
            var b = E.settings;
            a = d.inArray(a, lb(b, "nTable"));
            return -1 !== a ? b[a] : null;
        }
        function ub(a, c, d, e) {
            d = "DataTables warning: " + (null !== a ? "table id=" + a.sTableId + " - " : "") + d;
            e && (d += ". For more information about this error, please see http://datatables.net/tn/" + e);
            if (c) b.console && console.log && console.log(d);
            else if (((a = E.ext), "alert" == (a.sErrMode || a.errMode))) alert(d);
            else throw Error(d);
        }
        function kb(a, b, e, f) {
            d.isArray(e)
                ? d.each(e, function (c, e) {
                      d.isArray(e) ? kb(a, b, e[0], e[1]) : kb(a, b, e);
                  })
                : (f === c && (f = e), b[e] !== c && (a[f] = b[e]));
        }
        function wc(a, b, c) {
            var e, f;
            for (f in b) b.hasOwnProperty(f) && ((e = b[f]), d.isPlainObject(e) ? (d.isPlainObject(a[f]) || (a[f] = {}), d.extend(!0, a[f], e)) : c && "data" !== f && "aaData" !== f && d.isArray(e) ? (a[f] = e.slice()) : (a[f] = e));
            return a;
        }
        function gc(a, b, c) {
            d(a)
                .bind("click.DT", b, function (b) {
                    a.blur();
                    c(b);
                })
                .bind("keypress.DT", b, function (a) {
                    13 === a.which && (a.preventDefault(), c(a));
                })
                .bind("selectstart.DT", function () {
                    return !1;
                });
        }
        function Ga(a, b, c, d) {
            c && a[b].push({ fn: c, sName: d });
        }
        function fa(a, b, c, e) {
            var f = [];
            b &&
                (f = d.map(a[b].slice().reverse(), function (b, c) {
                    return b.fn.apply(a.oInstance, e);
                }));
            null !== c && d(a.nTable).trigger(c + ".dt", e);
            return f;
        }
        function Ja(a) {
            var b = a._iDisplayStart,
                c = a.fnDisplayEnd(),
                d = a._iDisplayLength;
            b >= c && (b = c - d);
            b -= b % d;
            if (-1 === d || 0 > b) b = 0;
            a._iDisplayStart = b;
        }
        function Kc(a, b) {
            var c = a.renderer,
                e = E.ext.renderer[b];
            return d.isPlainObject(c) && c[b] ? e[c[b]] || e._ : "string" === typeof c ? e[c] || e._ : e._;
        }
        function Ta(a) {
            return a.oFeatures.bServerSide ? "ssp" : a.ajax || a.sAjaxSource ? "ajax" : "dom";
        }
        function jd(a, b) {
            var c = [],
                c = Nd.numbers_length,
                d = Math.floor(c / 2);
            b <= c
                ? (c = Ua(0, b))
                : a <= d
                ? ((c = Ua(0, c - 2)), c.push("ellipsis"), c.push(b - 1))
                : (a >= b - 1 - d ? (c = Ua(b - (c - 2), b)) : ((c = Ua(a - 1, a + 2)), c.push("ellipsis"), c.push(b - 1)), c.splice(0, 0, "ellipsis"), c.splice(0, 0, 0));
            c.DT_el = "span";
            return c;
        }
        function Oc(a) {
            d.each(
                {
                    num: function (b) {
                        return sa(b, a);
                    },
                    "num-fmt": function (b) {
                        return sa(b, a, Wb);
                    },
                    "html-num": function (b) {
                        return sa(b, a, Tb);
                    },
                    "html-num-fmt": function (b) {
                        return sa(b, a, Tb, Wb);
                    },
                },
                function (b, c) {
                    La.type.order[b + a + "-pre"] = c;
                    b.match(/^html\-/) && (La.type.search[b + a] = La.type.search.html);
                }
            );
        }
        function kd(a) {
            return function () {
                var b = [pb(this[E.ext.iApiIndex])].concat(Array.prototype.slice.call(arguments));
                return E.ext.internal[a].apply(this, b);
            };
        }
        var E,
            La,
            ia,
            V,
            ya,
            yc = {},
            xc = /[\r\n]/g,
            Tb = /<.*?>/g,
            Jd = /^[\w\+\-]/,
            hc = /[\w\+\-]$/,
            Ee = /(\/|\.|\*|\+|\?|\||\(|\)|\[|\]|\{|\}|\\|\$|\^|\-)/g,
            Wb = /[',$\u00a3\u20ac\u00a5%\u2009\u202F]/g,
            ob = function (a) {
                return a && !0 !== a && "-" !== a ? !1 : !0;
            },
            Lc = function (a) {
                var b = parseInt(a, 10);
                return !isNaN(b) && isFinite(a) ? b : null;
            },
            Ub = function (a, b) {
                yc[b] || (yc[b] = new RegExp(vb(b), "g"));
                return "string" === typeof a && "." !== b ? a.replace(/\./g, "").replace(yc[b], ".") : a;
            },
            nc = function (a, b, c) {
                var d = "string" === typeof a;
                b && d && (a = Ub(a, b));
                c && d && (a = a.replace(Wb, ""));
                return ob(a) || (!isNaN(parseFloat(a)) && isFinite(a));
            },
            Pc = function (a, b, c) {
                return ob(a) ? !0 : ob(a) || "string" === typeof a ? (nc(a.replace(Tb, ""), b, c) ? !0 : null) : null;
            },
            lb = function (a, b, d) {
                var e = [],
                    f = 0,
                    g = a.length;
                if (d !== c) for (; f < g; f++) a[f] && a[f][b] && e.push(a[f][b][d]);
                else for (; f < g; f++) a[f] && e.push(a[f][b]);
                return e;
            },
            qb = function (a, b, d, e) {
                var f = [],
                    g = 0,
                    h = b.length;
                if (e !== c) for (; g < h; g++) a[b[g]][d] && f.push(a[b[g]][d][e]);
                else for (; g < h; g++) f.push(a[b[g]][d]);
                return f;
            },
            Ua = function (a, b) {
                var d = [],
                    e;
                b === c ? ((b = 0), (e = a)) : ((e = b), (b = a));
                for (var f = b; f < e; f++) d.push(f);
                return d;
            },
            Kd = function (a) {
                for (var b = [], c = 0, d = a.length; c < d; c++) a[c] && b.push(a[c]);
                return b;
            },
            ld = function (a) {
                var b = [],
                    c,
                    d,
                    e = a.length,
                    f,
                    g = 0;
                d = 0;
                a: for (; d < e; d++) {
                    c = a[d];
                    for (f = 0; f < g; f++) if (b[f] === c) continue a;
                    b.push(c);
                    g++;
                }
                return b;
            },
            mb = function (a, b, d) {
                a[b] !== c && (a[d] = a[b]);
            },
            Xb = /\[.*?\]$/,
            Jb = /\(\)$/,
            Cc = d("<div>")[0],
            md = Cc.textContent !== c,
            Be = /<.*?>/g;
        E = function (a) {
            this.$ = function (a, b) {
                return this.api(!0).$(a, b);
            };
            this._ = function (a, b) {
                return this.api(!0).rows(a, b).data();
            };
            this.api = function (a) {
                return a ? new ia(pb(this[La.iApiIndex])) : new ia(this);
            };
            this.fnAddData = function (a, b) {
                var e = this.api(!0),
                    f = d.isArray(a) && (d.isArray(a[0]) || d.isPlainObject(a[0])) ? e.rows.add(a) : e.row.add(a);
                (b === c || b) && e.draw();
                return f.flatten().toArray();
            };
            this.fnAdjustColumnSizing = function (a) {
                var b = this.api(!0).columns.adjust(),
                    d = b.settings()[0],
                    e = d.oScroll;
                a === c || a ? b.draw(!1) : ("" === e.sX && "" === e.sY) || bb(d);
            };
            this.fnClearTable = function (a) {
                var b = this.api(!0).clear();
                (a === c || a) && b.draw();
            };
            this.fnClose = function (a) {
                this.api(!0).row(a).child.hide();
            };
            this.fnDeleteRow = function (a, b, d) {
                var e = this.api(!0);
                a = e.rows(a);
                var f = a.settings()[0],
                    g = f.aoData[a[0][0]];
                a.remove();
                b && b.call(this, f, g);
                (d === c || d) && e.draw();
                return g;
            };
            this.fnDestroy = function (a) {
                this.api(!0).destroy(a);
            };
            this.fnDraw = function (a) {
                this.api(!0).draw(!a);
            };
            this.fnFilter = function (a, b, d, e, f, g) {
                f = this.api(!0);
                null === b || b === c ? f.search(a, d, e, g) : f.column(b).search(a, d, e, g);
                f.draw();
            };
            this.fnGetData = function (a, b) {
                var d = this.api(!0);
                if (a !== c) {
                    var e = a.nodeName ? a.nodeName.toLowerCase() : "";
                    return b !== c || "td" == e || "th" == e ? d.cell(a, b).data() : d.row(a).data() || null;
                }
                return d.data().toArray();
            };
            this.fnGetNodes = function (a) {
                var b = this.api(!0);
                return a !== c ? b.row(a).node() : b.rows().nodes().flatten().toArray();
            };
            this.fnGetPosition = function (a) {
                var b = this.api(!0),
                    c = a.nodeName.toUpperCase();
                return "TR" == c ? b.row(a).index() : "TD" == c || "TH" == c ? ((a = b.cell(a).index()), [a.row, a.columnVisible, a.column]) : null;
            };
            this.fnIsOpen = function (a) {
                return this.api(!0).row(a).child.isShown();
            };
            this.fnOpen = function (a, b, c) {
                return this.api(!0).row(a).child(b, c).show().child()[0];
            };
            this.fnPageChange = function (a, b) {
                var d = this.api(!0).page(a);
                (b === c || b) && d.draw(!1);
            };
            this.fnSetColumnVis = function (a, b, d) {
                a = this.api(!0).column(a).visible(b);
                (d === c || d) && a.columns.adjust().draw();
            };
            this.fnSettings = function () {
                return pb(this[La.iApiIndex]);
            };
            this.fnSort = function (a) {
                this.api(!0).order(a).draw();
            };
            this.fnSortListener = function (a, b, c) {
                this.api(!0).order.listener(a, b, c);
            };
            this.fnUpdate = function (a, b, d, e, f) {
                var g = this.api(!0);
                d === c || null === d ? g.row(b).data(a) : g.cell(b, d).data(a);
                (f === c || f) && g.columns.adjust();
                (e === c || e) && g.draw();
                return 0;
            };
            this.fnVersionCheck = La.fnVersionCheck;
            var b = this,
                e = a === c,
                n = this.length;
            e && (a = {});
            this.oApi = this.internal = La.internal;
            for (var m in E.ext.internal) m && (this[m] = kd(m));
            this.each(function () {
                var m = {},
                    m = 1 < n ? wc(m, a, !0) : a,
                    p = 0,
                    v,
                    w = this.getAttribute("id"),
                    B = !1,
                    t = E.defaults;
                if ("table" != this.nodeName.toLowerCase()) ub(null, 0, "Non-table node initialisation (" + this.nodeName + ")", 2);
                else {
                    k(t);
                    h(t.column);
                    g(t, t, !0);
                    g(t.column, t.column, !0);
                    g(t, m);
                    var y = E.settings,
                        p = 0;
                    for (v = y.length; p < v; p++) {
                        if (y[p].nTable == this) {
                            v = m.bRetrieve !== c ? m.bRetrieve : t.bRetrieve;
                            if (e || v) return y[p].oInstance;
                            if (m.bDestroy !== c ? m.bDestroy : t.bDestroy) {
                                y[p].oInstance.fnDestroy();
                                break;
                            } else {
                                ub(y[p], 0, "Cannot reinitialise DataTable", 3);
                                return;
                            }
                        }
                        if (y[p].sTableId == this.id) {
                            y.splice(p, 1);
                            break;
                        }
                    }
                    if (null === w || "" === w) this.id = w = "DataTables_Table_" + E.ext._unique++;
                    var A = d.extend(!0, {}, E.models.oSettings, { nTable: this, oApi: b.internal, oInit: m, sDestroyWidth: d(this)[0].style.width, sInstance: w, sTableId: w });
                    y.push(A);
                    A.oInstance = 1 === b.length ? b : d(this).dataTable();
                    k(m);
                    m.oLanguage && f(m.oLanguage);
                    m.aLengthMenu && !m.iDisplayLength && (m.iDisplayLength = d.isArray(m.aLengthMenu[0]) ? m.aLengthMenu[0][0] : m.aLengthMenu[0]);
                    m = wc(d.extend(!0, {}, t), m);
                    kb(A.oFeatures, m, "bPaginate bLengthChange bFilter bSort bSortMulti bInfo bProcessing bAutoWidth bSortClasses bServerSide bDeferRender".split(" "));
                    kb(A, m, [
                        "asStripeClasses",
                        "ajax",
                        "fnServerData",
                        "fnFormatNumber",
                        "sServerMethod",
                        "aaSorting",
                        "aaSortingFixed",
                        "aLengthMenu",
                        "sPaginationType",
                        "sAjaxSource",
                        "sAjaxDataProp",
                        "iStateDuration",
                        "sDom",
                        "bSortCellsTop",
                        "iTabIndex",
                        "fnStateLoadCallback",
                        "fnStateSaveCallback",
                        "renderer",
                        "searchDelay",
                        ["iCookieDuration", "iStateDuration"],
                        ["oSearch", "oPreviousSearch"],
                        ["aoSearchCols", "aoPreSearchCols"],
                        ["iDisplayLength", "_iDisplayLength"],
                        ["bJQueryUI", "bJUI"],
                    ]);
                    kb(A.oScroll, m, [
                        ["sScrollX", "sX"],
                        ["sScrollXInner", "sXInner"],
                        ["sScrollY", "sY"],
                        ["bScrollCollapse", "bCollapse"],
                    ]);
                    kb(A.oLanguage, m, "fnInfoCallback");
                    Ga(A, "aoDrawCallback", m.fnDrawCallback, "user");
                    Ga(A, "aoServerParams", m.fnServerParams, "user");
                    Ga(A, "aoStateSaveParams", m.fnStateSaveParams, "user");
                    Ga(A, "aoStateLoadParams", m.fnStateLoadParams, "user");
                    Ga(A, "aoStateLoaded", m.fnStateLoaded, "user");
                    Ga(A, "aoRowCallback", m.fnRowCallback, "user");
                    Ga(A, "aoRowCreatedCallback", m.fnCreatedRow, "user");
                    Ga(A, "aoHeaderCallback", m.fnHeaderCallback, "user");
                    Ga(A, "aoFooterCallback", m.fnFooterCallback, "user");
                    Ga(A, "aoInitComplete", m.fnInitComplete, "user");
                    Ga(A, "aoPreDrawCallback", m.fnPreDrawCallback, "user");
                    w = A.oClasses;
                    m.bJQueryUI
                        ? (d.extend(w, E.ext.oJUIClasses, m.oClasses), m.sDom === t.sDom && "lfrtip" === t.sDom && (A.sDom = '<"H"lfr>t<"F"ip>'), A.renderer)
                            ? d.isPlainObject(A.renderer) && !A.renderer.header && (A.renderer.header = "jqueryui")
                            : (A.renderer = "jqueryui")
                        : d.extend(w, E.ext.classes, m.oClasses);
                    d(this).addClass(w.sTable);
                    if ("" !== A.oScroll.sX || "" !== A.oScroll.sY) A.oScroll.iBarWidth = qc();
                    !0 === A.oScroll.sX && (A.oScroll.sX = "100%");
                    A.iInitDisplayStart === c && ((A.iInitDisplayStart = m.iDisplayStart), (A._iDisplayStart = m.iDisplayStart));
                    null !== m.iDeferLoading && ((A.bDeferLoading = !0), (p = d.isArray(m.iDeferLoading)), (A._iRecordsDisplay = p ? m.iDeferLoading[0] : m.iDeferLoading), (A._iRecordsTotal = p ? m.iDeferLoading[1] : m.iDeferLoading));
                    var C = A.oLanguage;
                    d.extend(!0, C, m.oLanguage);
                    "" !== C.sUrl &&
                        (d.ajax({
                            dataType: "json",
                            url: C.sUrl,
                            success: function (a) {
                                f(a);
                                g(t.oLanguage, a);
                                d.extend(!0, C, a);
                                dc(A);
                            },
                            error: function () {
                                dc(A);
                            },
                        }),
                        (B = !0));
                    null === m.asStripeClasses && (A.asStripeClasses = [w.sStripeOdd, w.sStripeEven]);
                    var p = A.asStripeClasses,
                        G = d("tbody tr:eq(0)", this);
                    -1 !==
                        d.inArray(
                            !0,
                            d.map(p, function (a, b) {
                                return G.hasClass(a);
                            })
                        ) && (d("tbody tr", this).removeClass(p.join(" ")), (A.asDestroyStripes = p.slice()));
                    var y = [],
                        H,
                        p = this.getElementsByTagName("thead");
                    0 !== p.length && (Ca(A.aoHeader, p[0]), (y = M(A)));
                    if (null === m.aoColumns) for (H = [], p = 0, v = y.length; p < v; p++) H.push(null);
                    else H = m.aoColumns;
                    p = 0;
                    for (v = H.length; p < v; p++) q(A, y ? y[p] : null);
                    r(A, m.aoColumnDefs, H, function (a, b) {
                        u(A, a, b);
                    });
                    if (G.length) {
                        var Mb = function (a, b) {
                            return a.getAttribute("data-" + b) ? b : null;
                        };
                        d.each(L(A, G[0]).cells, function (a, b) {
                            var d = A.aoColumns[a];
                            if (d.mData === a) {
                                var e = Mb(b, "sort") || Mb(b, "order"),
                                    f = Mb(b, "filter") || Mb(b, "search");
                                if (null !== e || null !== f) (d.mData = { _: a + ".display", sort: null !== e ? a + ".@data-" + e : c, type: null !== e ? a + ".@data-" + e : c, filter: null !== f ? a + ".@data-" + f : c }), u(A, a);
                            }
                        });
                    }
                    var J = A.oFeatures;
                    m.bStateSave && ((J.bStateSave = !0), ib(A, m), Ga(A, "aoDrawCallback", Vb, "state_save"));
                    if (m.aaSorting === c) for (y = A.aaSorting, p = 0, v = y.length; p < v; p++) y[p][1] = A.aoColumns[p].asSorting[0];
                    mc(A);
                    J.bSort &&
                        Ga(A, "aoDrawCallback", function () {
                            if (A.bSorted) {
                                var a = Da(A),
                                    b = {};
                                d.each(a, function (a, c) {
                                    b[c.src] = c.dir;
                                });
                                fa(A, null, "order", [A, a, b]);
                                Bc(A);
                            }
                        });
                    Ga(
                        A,
                        "aoDrawCallback",
                        function () {
                            (A.bSorted || "ssp" === Ta(A) || J.bDeferRender) && mc(A);
                        },
                        "sc"
                    );
                    l(A);
                    p = d(this)
                        .children("caption")
                        .each(function () {
                            this._captionSide = d(this).css("caption-side");
                        });
                    v = d(this).children("thead");
                    0 === v.length && (v = d("<thead/>").appendTo(this));
                    A.nTHead = v[0];
                    v = d(this).children("tbody");
                    0 === v.length && (v = d("<tbody/>").appendTo(this));
                    A.nTBody = v[0];
                    v = d(this).children("tfoot");
                    0 === v.length && 0 < p.length && ("" !== A.oScroll.sX || "" !== A.oScroll.sY) && (v = d("<tfoot/>").appendTo(this));
                    0 === v.length || 0 === v.children().length ? d(this).addClass(w.sNoFooter) : 0 < v.length && ((A.nTFoot = v[0]), Ca(A.aoFooter, A.nTFoot));
                    if (m.aaData) for (p = 0; p < m.aaData.length; p++) x(A, m.aaData[p]);
                    else (A.bDeferLoading || "dom" == Ta(A)) && z(A, d(A.nTBody).children("tr"));
                    A.aiDisplay = A.aiDisplayMaster.slice();
                    A.bInitialised = !0;
                    !1 === B && dc(A);
                }
            });
            b = null;
            return this;
        };
        var nd = [],
            Va = Array.prototype,
            Fe = function (a) {
                var b,
                    c,
                    e = E.settings,
                    f = d.map(e, function (a, b) {
                        return a.nTable;
                    });
                if (a) {
                    if (a.nTable && a.oApi) return [a];
                    if (a.nodeName && "table" === a.nodeName.toLowerCase()) return (b = d.inArray(a, f)), -1 !== b ? [e[b]] : null;
                    if (a && "function" === typeof a.settings) return a.settings().toArray();
                    "string" === typeof a ? (c = d(a)) : a instanceof d && (c = a);
                } else return [];
                if (c)
                    return c
                        .map(function (a) {
                            b = d.inArray(this, f);
                            return -1 !== b ? e[b] : null;
                        })
                        .toArray();
            };
        ia = function (a, b) {
            if (!this instanceof ia) throw "DT API must be constructed as a new object";
            var c = [],
                e = function (a) {
                    (a = Fe(a)) && c.push.apply(c, a);
                };
            if (d.isArray(a)) for (var f = 0, g = a.length; f < g; f++) e(a[f]);
            else e(a);
            this.context = ld(c);
            b && this.push.apply(this, b.toArray ? b.toArray() : b);
            this.selector = { rows: null, cols: null, opts: null };
            ia.extend(this, this, nd);
        };
        E.Api = ia;
        ia.prototype = {
            concat: Va.concat,
            context: [],
            each: function (a) {
                for (var b = 0, c = this.length; b < c; b++) a.call(this, this[b], b, this);
                return this;
            },
            eq: function (a) {
                var b = this.context;
                return b.length > a ? new ia(b[a], this[a]) : null;
            },
            filter: function (a) {
                var b = [];
                if (Va.filter) b = Va.filter.call(this, a, this);
                else for (var c = 0, d = this.length; c < d; c++) a.call(this, this[c], c, this) && b.push(this[c]);
                return new ia(this.context, b);
            },
            flatten: function () {
                var a = [];
                return new ia(this.context, a.concat.apply(a, this.toArray()));
            },
            join: Va.join,
            indexOf:
                Va.indexOf ||
                function (a, b) {
                    for (var c = b || 0, d = this.length; c < d; c++) if (this[c] === a) return c;
                    return -1;
                },
            iterator: function (a, b, d, e) {
                var f = [],
                    g,
                    h,
                    l,
                    k,
                    n,
                    q = this.context,
                    r,
                    m,
                    x = this.selector;
                "string" === typeof a && ((e = d), (d = b), (b = a), (a = !1));
                h = 0;
                for (l = q.length; h < l; h++) {
                    var p = new ia(q[h]);
                    if ("table" === b) (g = d.call(p, q[h], h)), g !== c && f.push(g);
                    else if ("columns" === b || "rows" === b) (g = d.call(p, q[h], this[h], h)), g !== c && f.push(g);
                    else if ("column" === b || "column-rows" === b || "row" === b || "cell" === b)
                        for (m = this[h], "column-rows" === b && (r = Qc(q[h], x.opts)), k = 0, n = m.length; k < n; k++)
                            (g = m[k]), (g = "cell" === b ? d.call(p, q[h], g.row, g.column, h, k) : d.call(p, q[h], g, h, k, r)), g !== c && f.push(g);
                }
                return f.length || e ? ((a = new ia(q, a ? f.concat.apply([], f) : f)), (b = a.selector), (b.rows = x.rows), (b.cols = x.cols), (b.opts = x.opts), a) : this;
            },
            lastIndexOf:
                Va.lastIndexOf ||
                function (a, b) {
                    return this.indexOf.apply(this.toArray.reverse(), arguments);
                },
            length: 0,
            map: function (a) {
                var b = [];
                if (Va.map) b = Va.map.call(this, a, this);
                else for (var c = 0, d = this.length; c < d; c++) b.push(a.call(this, this[c], c));
                return new ia(this.context, b);
            },
            pluck: function (a) {
                return this.map(function (b) {
                    return b[a];
                });
            },
            pop: Va.pop,
            push: Va.push,
            reduce:
                Va.reduce ||
                function (a, b) {
                    return n(this, a, b, 0, this.length, 1);
                },
            reduceRight:
                Va.reduceRight ||
                function (a, b) {
                    return n(this, a, b, this.length - 1, -1, -1);
                },
            reverse: Va.reverse,
            selector: null,
            shift: Va.shift,
            sort: Va.sort,
            splice: Va.splice,
            toArray: function () {
                return Va.slice.call(this);
            },
            to$: function () {
                return d(this);
            },
            toJQuery: function () {
                return d(this);
            },
            unique: function () {
                return new ia(this.context, ld(this));
            },
            unshift: Va.unshift,
        };
        ia.extend = function (a, b, c) {
            if (b && (b instanceof ia || b.__dt_wrapper)) {
                var e,
                    f,
                    g,
                    h = function (a, b, c) {
                        return function () {
                            var d = b.apply(a, arguments);
                            ia.extend(d, d, c.methodExt);
                            return d;
                        };
                    };
                e = 0;
                for (f = c.length; e < f; e++) (g = c[e]), (b[g.name] = "function" === typeof g.val ? h(a, g.val, g) : d.isPlainObject(g.val) ? {} : g.val), (b[g.name].__dt_wrapper = !0), ia.extend(a, b[g.name], g.propExt);
            }
        };
        ia.register = V = function (a, b) {
            if (d.isArray(a)) for (var c = 0, e = a.length; c < e; c++) ia.register(a[c], b);
            else
                for (var f = a.split("."), g = nd, h, l, c = 0, e = f.length; c < e; c++) {
                    h = (l = -1 !== f[c].indexOf("()")) ? f[c].replace("()", "") : f[c];
                    var k;
                    a: {
                        k = 0;
                        for (var n = g.length; k < n; k++)
                            if (g[k].name === h) {
                                k = g[k];
                                break a;
                            }
                        k = null;
                    }
                    k || ((k = { name: h, val: {}, methodExt: [], propExt: [] }), g.push(k));
                    c === e - 1 ? (k.val = b) : (g = l ? k.methodExt : k.propExt);
                }
        };
        ia.registerPlural = ya = function (a, b, e) {
            ia.register(a, e);
            ia.register(b, function () {
                var a = e.apply(this, arguments);
                return a === this ? this : a instanceof ia ? (a.length ? (d.isArray(a[0]) ? new ia(a.context, a[0]) : a[0]) : c) : a;
            });
        };
        var Ge = function (a, b) {
            if ("number" === typeof a) return [b[a]];
            var c = d.map(b, function (a, b) {
                return a.nTable;
            });
            return d(c)
                .filter(a)
                .map(function (a) {
                    a = d.inArray(this, c);
                    return b[a];
                })
                .toArray();
        };
        V("tables()", function (a) {
            return a ? new ia(Ge(a, this.context)) : this;
        });
        V("table()", function (a) {
            a = this.tables(a);
            var b = a.context;
            return b.length ? new ia(b[0]) : a;
        });
        ya("tables().nodes()", "table().node()", function () {
            return this.iterator(
                "table",
                function (a) {
                    return a.nTable;
                },
                1
            );
        });
        ya("tables().body()", "table().body()", function () {
            return this.iterator(
                "table",
                function (a) {
                    return a.nTBody;
                },
                1
            );
        });
        ya("tables().header()", "table().header()", function () {
            return this.iterator(
                "table",
                function (a) {
                    return a.nTHead;
                },
                1
            );
        });
        ya("tables().footer()", "table().footer()", function () {
            return this.iterator(
                "table",
                function (a) {
                    return a.nTFoot;
                },
                1
            );
        });
        ya("tables().containers()", "table().container()", function () {
            return this.iterator(
                "table",
                function (a) {
                    return a.nTableWrapper;
                },
                1
            );
        });
        V("draw()", function (a) {
            return this.iterator("table", function (b) {
                Q(b, !1 === a);
            });
        });
        V("page()", function (a) {
            return a === c
                ? this.page.info().page
                : this.iterator("table", function (b) {
                      N(b, a);
                  });
        });
        V("page.info()", function (a) {
            if (0 === this.context.length) return c;
            a = this.context[0];
            var b = a._iDisplayStart,
                d = a._iDisplayLength,
                e = a.fnRecordsDisplay(),
                f = -1 === d;
            return { page: f ? 0 : Math.floor(b / d), pages: f ? 1 : Math.ceil(e / d), start: b, end: a.fnDisplayEnd(), length: d, recordsTotal: a.fnRecordsTotal(), recordsDisplay: e };
        });
        V("page.len()", function (a) {
            return a === c
                ? 0 !== this.context.length
                    ? this.context[0]._iDisplayLength
                    : c
                : this.iterator("table", function (b) {
                      m(b, a);
                  });
        });
        var Ld = function (a, b, c) {
            "ssp" == Ta(a)
                ? Q(a, b)
                : (Aa(a, !0),
                  ma(a, [], function (c) {
                      ga(a);
                      c = ca(a, c);
                      for (var d = 0, e = c.length; d < e; d++) x(a, c[d]);
                      Q(a, b);
                      Aa(a, !1);
                  }));
            if (c) {
                var d = new ia(a);
                d.one("draw", function () {
                    c(d.ajax.json());
                });
            }
        };
        V("ajax.json()", function () {
            var a = this.context;
            if (0 < a.length) return a[0].json;
        });
        V("ajax.params()", function () {
            var a = this.context;
            if (0 < a.length) return a[0].oAjaxData;
        });
        V("ajax.reload()", function (a, b) {
            return this.iterator("table", function (c) {
                Ld(c, !1 === b, a);
            });
        });
        V("ajax.url()", function (a) {
            var b = this.context;
            if (a === c) {
                if (0 === b.length) return c;
                b = b[0];
                return b.ajax ? (d.isPlainObject(b.ajax) ? b.ajax.url : b.ajax) : b.sAjaxSource;
            }
            return this.iterator("table", function (b) {
                d.isPlainObject(b.ajax) ? (b.ajax.url = a) : (b.ajax = a);
            });
        });
        V("ajax.url().load()", function (a, b) {
            return this.iterator("table", function (c) {
                Ld(c, !1 === b, a);
            });
        });
        var od = function (a, b) {
                var e = [],
                    f,
                    g,
                    h,
                    l,
                    k,
                    n;
                f = typeof a;
                (a && "string" !== f && "function" !== f && a.length !== c) || (a = [a]);
                h = 0;
                for (l = a.length; h < l; h++) for (g = a[h] && a[h].split ? a[h].split(",") : [a[h]], k = 0, n = g.length; k < n; k++) (f = b("string" === typeof g[k] ? d.trim(g[k]) : g[k])) && f.length && e.push.apply(e, f);
                return e;
            },
            pd = function (a) {
                a || (a = {});
                a.filter && !a.search && (a.search = a.filter);
                return { search: a.search || "none", order: a.order || "current", page: a.page || "all" };
            },
            qd = function (a) {
                for (var b = 0, c = a.length; b < c; b++) if (0 < a[b].length) return (a[0] = a[b]), (a.length = 1), (a.context = [a.context[b]]), a;
                a.length = 0;
                return a;
            },
            Qc = function (a, b) {
                var c,
                    e,
                    f,
                    g = [],
                    h = a.aiDisplay;
                c = a.aiDisplayMaster;
                var l = b.search;
                e = b.order;
                f = b.page;
                if ("ssp" == Ta(a)) return "removed" === l ? [] : Ua(0, c.length);
                if ("current" == f) for (c = a._iDisplayStart, e = a.fnDisplayEnd(); c < e; c++) g.push(h[c]);
                else if ("current" == e || "applied" == e)
                    g =
                        "none" == l
                            ? c.slice()
                            : "applied" == l
                            ? h.slice()
                            : d.map(c, function (a, b) {
                                  return -1 === d.inArray(a, h) ? a : null;
                              });
                else if ("index" == e || "original" == e) for (c = 0, e = a.aoData.length; c < e; c++) "none" == l ? g.push(c) : ((f = d.inArray(c, h)), ((-1 === f && "removed" == l) || (0 <= f && "applied" == l)) && g.push(c));
                return g;
            },
            Md = function (a, b, c) {
                return od(b, function (b) {
                    var e = Lc(b);
                    if (null !== e && !c) return [e];
                    var f = Qc(a, c);
                    if (null !== e && -1 !== d.inArray(e, f)) return [e];
                    if (!b) return f;
                    if ("function" === typeof b)
                        return d.map(f, function (c) {
                            var d = a.aoData[c];
                            return b(c, d._aData, d.nTr) ? c : null;
                        });
                    e = Kd(qb(a.aoData, f, "nTr"));
                    return b.nodeName && -1 !== d.inArray(b, e)
                        ? [b._DT_RowIndex]
                        : d(e)
                              .filter(b)
                              .map(function () {
                                  return this._DT_RowIndex;
                              })
                              .toArray();
                });
            };
        V("rows()", function (a, b) {
            a === c ? (a = "") : d.isPlainObject(a) && ((b = a), (a = ""));
            b = pd(b);
            var e = this.iterator(
                "table",
                function (c) {
                    return Md(c, a, b);
                },
                1
            );
            e.selector.rows = a;
            e.selector.opts = b;
            return e;
        });
        V("rows().nodes()", function () {
            return this.iterator(
                "row",
                function (a, b) {
                    return a.aoData[b].nTr || c;
                },
                1
            );
        });
        V("rows().data()", function () {
            return this.iterator(
                !0,
                "rows",
                function (a, b) {
                    return qb(a.aoData, b, "_aData");
                },
                1
            );
        });
        ya("rows().cache()", "row().cache()", function (a) {
            return this.iterator(
                "row",
                function (b, c) {
                    var d = b.aoData[c];
                    return "search" === a ? d._aFilterData : d._aSortData;
                },
                1
            );
        });
        ya("rows().invalidate()", "row().invalidate()", function (a) {
            return this.iterator("row", function (b, c) {
                va(b, c, a);
            });
        });
        ya("rows().indexes()", "row().index()", function () {
            return this.iterator(
                "row",
                function (a, b) {
                    return b;
                },
                1
            );
        });
        ya("rows().remove()", "row().remove()", function () {
            var a = this;
            return this.iterator("row", function (b, c, e) {
                var f = b.aoData;
                f.splice(c, 1);
                for (var g = 0, h = f.length; g < h; g++) null !== f[g].nTr && (f[g].nTr._DT_RowIndex = g);
                d.inArray(c, b.aiDisplay);
                ha(b.aiDisplayMaster, c);
                ha(b.aiDisplay, c);
                ha(a[e], c, !1);
                Ja(b);
            });
        });
        V("rows.add()", function (a) {
            var b = this.iterator(
                    "table",
                    function (b) {
                        var c,
                            d,
                            e,
                            f = [];
                        d = 0;
                        for (e = a.length; d < e; d++) (c = a[d]), c.nodeName && "TR" === c.nodeName.toUpperCase() ? f.push(z(b, c)[0]) : f.push(x(b, c));
                        return f;
                    },
                    1
                ),
                c = this.rows(-1);
            c.pop();
            c.push.apply(c, b.toArray());
            return c;
        });
        V("row()", function (a, b) {
            return qd(this.rows(a, b));
        });
        V("row().data()", function (a) {
            var b = this.context;
            if (a === c) return b.length && this.length ? b[0].aoData[this[0]]._aData : c;
            b[0].aoData[this[0]]._aData = a;
            va(b[0], this[0], "data");
            return this;
        });
        V("row().node()", function () {
            var a = this.context;
            return a.length && this.length ? a[0].aoData[this[0]].nTr || null : null;
        });
        V("row.add()", function (a) {
            a instanceof d && a.length && (a = a[0]);
            var b = this.iterator("table", function (b) {
                return a.nodeName && "TR" === a.nodeName.toUpperCase() ? z(b, a)[0] : x(b, a);
            });
            return this.row(b[0]);
        });
        var ed = function (a, b, c, e) {
                var f = [],
                    g = function (b, c) {
                        if (b.nodeName && "tr" === b.nodeName.toLowerCase()) f.push(b);
                        else {
                            var e = d("<tr><td/></tr>").addClass(c);
                            d("td", e).addClass(c).html(b)[0].colSpan = y(a);
                            f.push(e[0]);
                        }
                    };
                if (d.isArray(c) || c instanceof d) for (var h = 0, l = c.length; h < l; h++) g(c[h], e);
                else g(c, e);
                b._details && b._details.remove();
                b._details = d(f);
                b._detailsShow && b._details.insertAfter(b.nTr);
            },
            Rc = function (a, b) {
                var d = a.context;
                d.length && ((d = d[0].aoData[b !== c ? b : a[0]]), d._details && (d._details.remove(), (d._detailsShow = c), (d._details = c)));
            },
            Sc = function (a, b) {
                var c = a.context;
                if (c.length && a.length) {
                    var d = c[0].aoData[a[0]];
                    d._details && ((d._detailsShow = b) ? d._details.insertAfter(d.nTr) : d._details.detach(), He(c[0]));
                }
            },
            He = function (a) {
                var b = new ia(a),
                    c = a.aoData;
                b.off("draw.dt.DT_details column-visibility.dt.DT_details destroy.dt.DT_details");
                0 < lb(c, "_details").length &&
                    (b.on("draw.dt.DT_details", function (d, e) {
                        a === e &&
                            b
                                .rows({ page: "current" })
                                .eq(0)
                                .each(function (a) {
                                    a = c[a];
                                    a._detailsShow && a._details.insertAfter(a.nTr);
                                });
                    }),
                    b.on("column-visibility.dt.DT_details", function (b, d, e, f) {
                        if (a === d) for (d = y(d), e = 0, f = c.length; e < f; e++) (b = c[e]), b._details && b._details.children("td[colspan]").attr("colspan", d);
                    }),
                    b.on("destroy.dt.DT_details", function (d, e) {
                        if (a === e) for (var f = 0, g = c.length; f < g; f++) c[f]._details && Rc(b, f);
                    }));
            };
        V("row().child()", function (a, b) {
            var d = this.context;
            if (a === c) return d.length && this.length ? d[0].aoData[this[0]]._details : c;
            !0 === a ? this.child.show() : !1 === a ? Rc(this) : d.length && this.length && ed(d[0], d[0].aoData[this[0]], a, b);
            return this;
        });
        V(["row().child.show()", "row().child().show()"], function (a) {
            Sc(this, !0);
            return this;
        });
        V(["row().child.hide()", "row().child().hide()"], function () {
            Sc(this, !1);
            return this;
        });
        V(["row().child.remove()", "row().child().remove()"], function () {
            Rc(this);
            return this;
        });
        V("row().child.isShown()", function () {
            var a = this.context;
            return a.length && this.length ? a[0].aoData[this[0]]._detailsShow || !1 : !1;
        });
        var Dc = /^(.+):(name|visIdx|visible)$/,
            rd = function (a, b, c, d, e) {
                c = [];
                d = 0;
                for (var f = e.length; d < f; d++) c.push(B(a, e[d], b));
                return c;
            },
            sd = function (a, b, c) {
                var e = a.aoColumns,
                    f = lb(e, "sName"),
                    g = lb(e, "nTh");
                return od(b, function (b) {
                    var h = Lc(b);
                    if ("" === b) return Ua(e.length);
                    if (null !== h) return [0 <= h ? h : e.length + h];
                    if ("function" === typeof b) {
                        var l = Qc(a, c);
                        return d.map(e, function (c, d) {
                            return b(d, rd(a, d, 0, 0, l), g[d]) ? d : null;
                        });
                    }
                    var k = "string" === typeof b ? b.match(Dc) : "";
                    if (k)
                        switch (k[2]) {
                            case "visIdx":
                            case "visible":
                                h = parseInt(k[1], 10);
                                if (0 > h) {
                                    var n = d.map(e, function (a, b) {
                                        return a.bVisible ? b : null;
                                    });
                                    return [n[n.length + h]];
                                }
                                return [w(a, h)];
                            case "name":
                                return d.map(f, function (a, b) {
                                    return a === k[1] ? b : null;
                                });
                        }
                    else
                        return d(g)
                            .filter(b)
                            .map(function () {
                                return d.inArray(this, g);
                            })
                            .toArray();
                });
            };
        V("columns()", function (a, b) {
            a === c ? (a = "") : d.isPlainObject(a) && ((b = a), (a = ""));
            b = pd(b);
            var e = this.iterator(
                "table",
                function (c) {
                    return sd(c, a, b);
                },
                1
            );
            e.selector.cols = a;
            e.selector.opts = b;
            return e;
        });
        ya("columns().header()", "column().header()", function (a, b) {
            return this.iterator(
                "column",
                function (a, b) {
                    return a.aoColumns[b].nTh;
                },
                1
            );
        });
        ya("columns().footer()", "column().footer()", function (a, b) {
            return this.iterator(
                "column",
                function (a, b) {
                    return a.aoColumns[b].nTf;
                },
                1
            );
        });
        ya("columns().data()", "column().data()", function () {
            return this.iterator("column-rows", rd, 1);
        });
        ya("columns().dataSrc()", "column().dataSrc()", function () {
            return this.iterator(
                "column",
                function (a, b) {
                    return a.aoColumns[b].mData;
                },
                1
            );
        });
        ya("columns().cache()", "column().cache()", function (a) {
            return this.iterator(
                "column-rows",
                function (b, c, d, e, f) {
                    return qb(b.aoData, f, "search" === a ? "_aFilterData" : "_aSortData", c);
                },
                1
            );
        });
        ya("columns().nodes()", "column().nodes()", function () {
            return this.iterator(
                "column-rows",
                function (a, b, c, d, e) {
                    return qb(a.aoData, e, "anCells", b);
                },
                1
            );
        });
        ya("columns().visible()", "column().visible()", function (a, b) {
            return this.iterator("column", function (e, f) {
                if (a === c) return e.aoColumns[f].bVisible;
                var g = e.aoColumns,
                    h = g[f],
                    l = e.aoData,
                    k,
                    n,
                    q;
                if (a !== c && h.bVisible !== a) {
                    if (a) {
                        var r = d.inArray(!0, lb(g, "bVisible"), f + 1);
                        k = 0;
                        for (n = l.length; k < n; k++) (q = l[k].nTr), (g = l[k].anCells), q && q.insertBefore(g[f], g[r] || null);
                    } else d(lb(e.aoData, "anCells", f)).detach();
                    h.bVisible = a;
                    W(e, e.aoHeader);
                    W(e, e.aoFooter);
                    if (b === c || b) v(e), (e.oScroll.sX || e.oScroll.sY) && bb(e);
                    fa(e, null, "column-visibility", [e, f, a]);
                    Vb(e);
                }
            });
        });
        ya("columns().indexes()", "column().index()", function (a) {
            return this.iterator(
                "column",
                function (b, c) {
                    return "visible" === a ? t(b, c) : c;
                },
                1
            );
        });
        V("columns.adjust()", function () {
            return this.iterator(
                "table",
                function (a) {
                    v(a);
                },
                1
            );
        });
        V("column.index()", function (a, b) {
            if (0 !== this.context.length) {
                var c = this.context[0];
                if ("fromVisible" === a || "toData" === a) return w(c, b);
                if ("fromData" === a || "toVisible" === a) return t(c, b);
            }
        });
        V("column()", function (a, b) {
            return qd(this.columns(a, b));
        });
        var Ie = function (a, b, e) {
            var f = a.aoData,
                g = Qc(a, e);
            e = Kd(qb(f, g, "anCells"));
            var h = d([].concat.apply([], e)),
                l,
                k = a.aoColumns.length,
                n,
                q,
                r,
                m,
                x,
                p;
            return od(b, function (b) {
                var e = "function" === typeof b;
                if (null === b || b === c || e) {
                    n = [];
                    q = 0;
                    for (r = g.length; q < r; q++) for (l = g[q], m = 0; m < k; m++) (x = { row: l, column: m }), e ? ((p = a.aoData[l]), b(x, B(a, l, m), p.anCells[m]) && n.push(x)) : n.push(x);
                    return n;
                }
                return d.isPlainObject(b)
                    ? [b]
                    : h
                          .filter(b)
                          .map(function (a, b) {
                              l = b.parentNode._DT_RowIndex;
                              return { row: l, column: d.inArray(b, f[l].anCells) };
                          })
                          .toArray();
            });
        };
        V("cells()", function (a, b, e) {
            d.isPlainObject(a) && (typeof a.row !== c ? ((e = b), (b = null)) : ((e = a), (a = null)));
            d.isPlainObject(b) && ((e = b), (b = null));
            if (null === b || b === c)
                return this.iterator("table", function (b) {
                    return Ie(b, a, pd(e));
                });
            var f = this.columns(b, e),
                g = this.rows(a, e),
                h,
                l,
                k,
                n,
                q,
                r = this.iterator(
                    "table",
                    function (a, b) {
                        h = [];
                        l = 0;
                        for (k = g[b].length; l < k; l++) for (n = 0, q = f[b].length; n < q; n++) h.push({ row: g[b][l], column: f[b][n] });
                        return h;
                    },
                    1
                );
            d.extend(r.selector, { cols: b, rows: a, opts: e });
            return r;
        });
        ya("cells().nodes()", "cell().node()", function () {
            return this.iterator(
                "cell",
                function (a, b, d) {
                    return (a = a.aoData[b].anCells) ? a[d] : c;
                },
                1
            );
        });
        V("cells().data()", function () {
            return this.iterator(
                "cell",
                function (a, b, c) {
                    return B(a, b, c);
                },
                1
            );
        });
        ya("cells().cache()", "cell().cache()", function (a) {
            a = "search" === a ? "_aFilterData" : "_aSortData";
            return this.iterator(
                "cell",
                function (b, c, d) {
                    return b.aoData[c][a][d];
                },
                1
            );
        });
        ya("cells().render()", "cell().render()", function (a) {
            return this.iterator(
                "cell",
                function (b, c, d) {
                    return B(b, c, d, a);
                },
                1
            );
        });
        ya("cells().indexes()", "cell().index()", function () {
            return this.iterator(
                "cell",
                function (a, b, c) {
                    return { row: b, column: c, columnVisible: t(a, c) };
                },
                1
            );
        });
        ya("cells().invalidate()", "cell().invalidate()", function (a) {
            return this.iterator("cell", function (b, c, d) {
                va(b, c, a, d);
            });
        });
        V("cell()", function (a, b, c) {
            return qd(this.cells(a, b, c));
        });
        V("cell().data()", function (a) {
            var b = this.context,
                d = this[0];
            if (a === c) return b.length && d.length ? B(b[0], d[0].row, d[0].column) : c;
            G(b[0], d[0].row, d[0].column, a);
            va(b[0], d[0].row, "data", d[0].column);
            return this;
        });
        V("order()", function (a, b) {
            var e = this.context;
            if (a === c) return 0 !== e.length ? e[0].aaSorting : c;
            "number" === typeof a ? (a = [[a, b]]) : d.isArray(a[0]) || (a = Array.prototype.slice.call(arguments));
            return this.iterator("table", function (b) {
                b.aaSorting = a.slice();
            });
        });
        V("order.listener()", function (a, b, c) {
            return this.iterator("table", function (d) {
                ua(d, a, b, c);
            });
        });
        V(["columns().order()", "column().order()"], function (a) {
            var b = this;
            return this.iterator("table", function (c, e) {
                var f = [];
                d.each(b[e], function (b, c) {
                    f.push([c, a]);
                });
                c.aaSorting = f;
            });
        });
        V("search()", function (a, b, e, f) {
            var g = this.context;
            return a === c
                ? 0 !== g.length
                    ? g[0].oPreviousSearch.sSearch
                    : c
                : this.iterator("table", function (c) {
                      c.oFeatures.bFilter && Sa(c, d.extend({}, c.oPreviousSearch, { sSearch: a + "", bRegex: null === b ? !1 : b, bSmart: null === e ? !0 : e, bCaseInsensitive: null === f ? !0 : f }), 1);
                  });
        });
        ya("columns().search()", "column().search()", function (a, b, e, f) {
            return this.iterator("column", function (g, h) {
                var l = g.aoPreSearchCols;
                if (a === c) return l[h].sSearch;
                g.oFeatures.bFilter && (d.extend(l[h], { sSearch: a + "", bRegex: null === b ? !1 : b, bSmart: null === e ? !0 : e, bCaseInsensitive: null === f ? !0 : f }), Sa(g, g.oPreviousSearch, 1));
            });
        });
        V("state()", function () {
            return this.context.length ? this.context[0].oSavedState : null;
        });
        V("state.clear()", function () {
            return this.iterator("table", function (a) {
                a.fnStateSaveCallback.call(a.oInstance, a, {});
            });
        });
        V("state.loaded()", function () {
            return this.context.length ? this.context[0].oLoadedState : null;
        });
        V("state.save()", function () {
            return this.iterator("table", function (a) {
                Vb(a);
            });
        });
        E.versionCheck = E.fnVersionCheck = function (a) {
            var b = E.version.split(".");
            a = a.split(".");
            for (var c, d, e = 0, f = a.length; e < f; e++) if (((c = parseInt(b[e], 10) || 0), (d = parseInt(a[e], 10) || 0), c !== d)) return c > d;
            return !0;
        };
        E.isDataTable = E.fnIsDataTable = function (a) {
            var b = d(a).get(0),
                c = !1;
            d.each(E.settings, function (a, d) {
                if (d.nTable === b || d.nScrollHead === b || d.nScrollFoot === b) c = !0;
            });
            return c;
        };
        E.tables = E.fnTables = function (a) {
            return d.map(E.settings, function (b) {
                if (!a || (a && d(b.nTable).is(":visible"))) return b.nTable;
            });
        };
        E.util = { throttle: Ra, escapeRegex: vb };
        E.camelToHungarian = g;
        V("$()", function (a, b) {
            var c = this.rows(b).nodes(),
                c = d(c);
            return d([].concat(c.filter(a).toArray(), c.find(a).toArray()));
        });
        d.each(["on", "one", "off"], function (a, b) {
            V(b + "()", function () {
                var a = Array.prototype.slice.call(arguments);
                a[0].match(/\.dt\b/) || (a[0] += ".dt");
                var c = d(this.tables().nodes());
                c[b].apply(c, a);
                return this;
            });
        });
        V("clear()", function () {
            return this.iterator("table", function (a) {
                ga(a);
            });
        });
        V("settings()", function () {
            return new ia(this.context, this.context);
        });
        V("data()", function () {
            return this.iterator("table", function (a) {
                return lb(a.aoData, "_aData");
            }).flatten();
        });
        V("destroy()", function (a) {
            a = a || !1;
            return this.iterator("table", function (c) {
                var e = c.nTableWrapper.parentNode,
                    f = c.oClasses,
                    g = c.nTable,
                    h = c.nTBody,
                    l = c.nTHead,
                    k = c.nTFoot,
                    n = d(g),
                    h = d(h),
                    q = d(c.nTableWrapper),
                    r = d.map(c.aoData, function (a) {
                        return a.nTr;
                    }),
                    m;
                c.bDestroying = !0;
                fa(c, "aoDestroyCallback", "destroy", [c]);
                a || new ia(c).columns().visible(!0);
                q.unbind(".DT").find(":not(tbody *)").unbind(".DT");
                d(b).unbind(".DT-" + c.sInstance);
                g != l.parentNode && (n.children("thead").detach(), n.append(l));
                k && g != k.parentNode && (n.children("tfoot").detach(), n.append(k));
                n.detach();
                q.detach();
                c.aaSorting = [];
                c.aaSortingFixed = [];
                mc(c);
                d(r).removeClass(c.asStripeClasses.join(" "));
                d("th, td", l).removeClass(f.sSortable + " " + f.sSortableAsc + " " + f.sSortableDesc + " " + f.sSortableNone);
                c.bJUI &&
                    (d("th span." + f.sSortIcon + ", td span." + f.sSortIcon, l).detach(),
                    d("th, td", l).each(function () {
                        var a = d("div." + f.sSortJUIWrapper, this);
                        d(this).append(a.contents());
                        a.detach();
                    }));
                !a && e && e.insertBefore(g, c.nTableReinsertBefore);
                h.children().detach();
                h.append(r);
                n.css("width", c.sDestroyWidth).removeClass(f.sTable);
                (m = c.asDestroyStripes.length) &&
                    h.children().each(function (a) {
                        d(this).addClass(c.asDestroyStripes[a % m]);
                    });
                e = d.inArray(c, E.settings);
                -1 !== e && E.settings.splice(e, 1);
            });
        });
        E.version = "1.10.4";
        E.settings = [];
        E.models = {};
        E.models.oSearch = { bCaseInsensitive: !0, sSearch: "", bRegex: !1, bSmart: !0 };
        E.models.oRow = { nTr: null, anCells: null, _aData: [], _aSortData: null, _aFilterData: null, _sFilterRow: null, _sRowStripe: "", src: null };
        E.models.oColumn = {
            idx: null,
            aDataSort: null,
            asSorting: null,
            bSearchable: null,
            bSortable: null,
            bVisible: null,
            _sManualType: null,
            _bAttrSrc: !1,
            fnCreatedCell: null,
            fnGetData: null,
            fnSetData: null,
            mData: null,
            mRender: null,
            nTh: null,
            nTf: null,
            sClass: null,
            sContentPadding: null,
            sDefaultContent: null,
            sName: null,
            sSortDataType: "std",
            sSortingClass: null,
            sSortingClassJUI: null,
            sTitle: null,
            sType: null,
            sWidth: null,
            sWidthOrig: null,
        };
        E.defaults = {
            aaData: null,
            aaSorting: [[0, "asc"]],
            aaSortingFixed: [],
            ajax: null,
            aLengthMenu: [10, 25, 50, 100],
            aoColumns: null,
            aoColumnDefs: null,
            aoSearchCols: [],
            asStripeClasses: null,
            bAutoWidth: !0,
            bDeferRender: !1,
            bDestroy: !1,
            bFilter: !0,
            bInfo: !0,
            bJQueryUI: !1,
            bLengthChange: !0,
            bPaginate: !0,
            bProcessing: !1,
            bRetrieve: !1,
            bScrollCollapse: !1,
            bServerSide: !1,
            bSort: !0,
            bSortMulti: !0,
            bSortCellsTop: !1,
            bSortClasses: !0,
            bStateSave: !1,
            fnCreatedRow: null,
            fnDrawCallback: null,
            fnFooterCallback: null,
            fnFormatNumber: function (a) {
                return a.toString().replace(/\B(?=(\d{3})+(?!\d))/g, this.oLanguage.sThousands);
            },
            fnHeaderCallback: null,
            fnInfoCallback: null,
            fnInitComplete: null,
            fnPreDrawCallback: null,
            fnRowCallback: null,
            fnServerData: null,
            fnServerParams: null,
            fnStateLoadCallback: function (a) {
                try {
                    return JSON.parse((-1 === a.iStateDuration ? sessionStorage : localStorage).getItem("DataTables_" + a.sInstance + "_" + location.pathname));
                } catch (b) {}
            },
            fnStateLoadParams: null,
            fnStateLoaded: null,
            fnStateSaveCallback: function (a, b) {
                try {
                    (-1 === a.iStateDuration ? sessionStorage : localStorage).setItem("DataTables_" + a.sInstance + "_" + location.pathname, JSON.stringify(b));
                } catch (c) {}
            },
            fnStateSaveParams: null,
            iStateDuration: 7200,
            iDeferLoading: null,
            iDisplayLength: 10,
            iDisplayStart: 0,
            iTabIndex: 0,
            oClasses: {},
            oLanguage: {
                oAria: { sSortAscending: ": activate to sort column ascending", sSortDescending: ": activate to sort column descending" },
                oPaginate: { sFirst: "First", sLast: "Last", sNext: "Next", sPrevious: "Previous" },
                sEmptyTable: "No data available in table",
                sInfo: "Showing _START_ to _END_ of _TOTAL_ entries",
                sInfoEmpty: "Showing 0 to 0 of 0 entries",
                sInfoFiltered: "(filtered from _MAX_ total entries)",
                sInfoPostFix: "",
                sDecimal: "",
                sThousands: ",",
                sLengthMenu: "Show _MENU_ entries",
                sLoadingRecords: "Loading...",
                sProcessing: "Processing...",
                sSearch: "Search:",
                sSearchPlaceholder: "",
                sUrl: "",
                sZeroRecords: "No matching records found",
            },
            oSearch: d.extend({}, E.models.oSearch),
            sAjaxDataProp: "data",
            sAjaxSource: null,
            sDom: "lfrtip",
            searchDelay: null,
            sPaginationType: "simple_numbers",
            sScrollX: "",
            sScrollXInner: "",
            sScrollY: "",
            sServerMethod: "GET",
            renderer: null,
        };
        e(E.defaults);
        E.defaults.column = {
            aDataSort: null,
            iDataSort: -1,
            asSorting: ["asc", "desc"],
            bSearchable: !0,
            bSortable: !0,
            bVisible: !0,
            fnCreatedCell: null,
            mData: null,
            mRender: null,
            sCellType: "td",
            sClass: "",
            sContentPadding: "",
            sDefaultContent: null,
            sName: "",
            sSortDataType: "std",
            sTitle: null,
            sType: null,
            sWidth: null,
        };
        e(E.defaults.column);
        E.models.oSettings = {
            oFeatures: { bAutoWidth: null, bDeferRender: null, bFilter: null, bInfo: null, bLengthChange: null, bPaginate: null, bProcessing: null, bServerSide: null, bSort: null, bSortMulti: null, bSortClasses: null, bStateSave: null },
            oScroll: { bCollapse: null, iBarWidth: 0, sX: null, sXInner: null, sY: null },
            oLanguage: { fnInfoCallback: null },
            oBrowser: { bScrollOversize: !1, bScrollbarLeft: !1 },
            ajax: null,
            aanFeatures: [],
            aoData: [],
            aiDisplay: [],
            aiDisplayMaster: [],
            aoColumns: [],
            aoHeader: [],
            aoFooter: [],
            oPreviousSearch: {},
            aoPreSearchCols: [],
            aaSorting: null,
            aaSortingFixed: [],
            asStripeClasses: null,
            asDestroyStripes: [],
            sDestroyWidth: 0,
            aoRowCallback: [],
            aoHeaderCallback: [],
            aoFooterCallback: [],
            aoDrawCallback: [],
            aoRowCreatedCallback: [],
            aoPreDrawCallback: [],
            aoInitComplete: [],
            aoStateSaveParams: [],
            aoStateLoadParams: [],
            aoStateLoaded: [],
            sTableId: "",
            nTable: null,
            nTHead: null,
            nTFoot: null,
            nTBody: null,
            nTableWrapper: null,
            bDeferLoading: !1,
            bInitialised: !1,
            aoOpenRows: [],
            sDom: null,
            searchDelay: null,
            sPaginationType: "two_button",
            iStateDuration: 0,
            aoStateSave: [],
            aoStateLoad: [],
            oSavedState: null,
            oLoadedState: null,
            sAjaxSource: null,
            sAjaxDataProp: null,
            bAjaxDataGet: !0,
            jqXHR: null,
            json: c,
            oAjaxData: c,
            fnServerData: null,
            aoServerParams: [],
            sServerMethod: null,
            fnFormatNumber: null,
            aLengthMenu: null,
            iDraw: 0,
            bDrawing: !1,
            iDrawError: -1,
            _iDisplayLength: 10,
            _iDisplayStart: 0,
            _iRecordsTotal: 0,
            _iRecordsDisplay: 0,
            bJUI: null,
            oClasses: {},
            bFiltered: !1,
            bSorted: !1,
            bSortCellsTop: null,
            oInit: null,
            aoDestroyCallback: [],
            fnRecordsTotal: function () {
                return "ssp" == Ta(this) ? 1 * this._iRecordsTotal : this.aiDisplayMaster.length;
            },
            fnRecordsDisplay: function () {
                return "ssp" == Ta(this) ? 1 * this._iRecordsDisplay : this.aiDisplay.length;
            },
            fnDisplayEnd: function () {
                var a = this._iDisplayLength,
                    b = this._iDisplayStart,
                    c = b + a,
                    d = this.aiDisplay.length,
                    e = this.oFeatures,
                    f = e.bPaginate;
                return e.bServerSide ? (!1 === f || -1 === a ? b + d : Math.min(b + a, this._iRecordsDisplay)) : !f || c > d || -1 === a ? d : c;
            },
            oInstance: null,
            sInstance: null,
            iTabIndex: 0,
            nScrollHead: null,
            nScrollFoot: null,
            aLastSort: [],
            oPlugins: {},
        };
        E.ext = La = {
            classes: {},
            errMode: "alert",
            feature: [],
            search: [],
            internal: {},
            legacy: { ajax: null },
            pager: {},
            renderer: { pageButton: {}, header: {} },
            order: {},
            type: { detect: [], search: {}, order: {} },
            _unique: 0,
            fnVersionCheck: E.fnVersionCheck,
            iApiIndex: 0,
            oJUIClasses: {},
            sVersion: E.version,
        };
        d.extend(La, { afnFiltering: La.search, aTypes: La.type.detect, ofnSearch: La.type.search, oSort: La.type.order, afnSortData: La.order, aoFeatures: La.feature, oApi: La.internal, oStdClasses: La.classes, oPagination: La.pager });
        d.extend(E.ext.classes, {
            sTable: "dataTable",
            sNoFooter: "no-footer",
            sPageButton: "paginate_button",
            sPageButtonActive: "current",
            sPageButtonDisabled: "disabled",
            sStripeOdd: "odd",
            sStripeEven: "even",
            sRowEmpty: "dataTables_empty",
            sWrapper: "dataTables_wrapper",
            sFilter: "dataTables_filter",
            sInfo: "dataTables_info",
            sPaging: "dataTables_paginate paging_",
            sLength: "dataTables_length",
            sProcessing: "dataTables_processing",
            sSortAsc: "sorting_asc",
            sSortDesc: "sorting_desc",
            sSortable: "sorting",
            sSortableAsc: "sorting_asc_disabled",
            sSortableDesc: "sorting_desc_disabled",
            sSortableNone: "sorting_disabled",
            sSortColumn: "sorting_",
            sFilterInput: "",
            sLengthSelect: "",
            sScrollWrapper: "dataTables_scroll",
            sScrollHead: "dataTables_scrollHead",
            sScrollHeadInner: "dataTables_scrollHeadInner",
            sScrollBody: "dataTables_scrollBody",
            sScrollFoot: "dataTables_scrollFoot",
            sScrollFootInner: "dataTables_scrollFootInner",
            sHeaderTH: "",
            sFooterTH: "",
            sSortJUIAsc: "",
            sSortJUIDesc: "",
            sSortJUI: "",
            sSortJUIAscAllowed: "",
            sSortJUIDescAllowed: "",
            sSortJUIWrapper: "",
            sSortIcon: "",
            sJUIHeader: "",
            sJUIFooter: "",
        });
        (function () {
            var a = "",
                a = "",
                b = a + "ui-state-default",
                c = a + "css_right ui-icon ui-icon-",
                a = a + "fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix";
            d.extend(E.ext.oJUIClasses, E.ext.classes, {
                sPageButton: "fg-button ui-button " + b,
                sPageButtonActive: "ui-state-disabled",
                sPageButtonDisabled: "ui-state-disabled",
                sPaging: "dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi ui-buttonset-multi paging_",
                sSortAsc: b + " sorting_asc",
                sSortDesc: b + " sorting_desc",
                sSortable: b + " sorting",
                sSortableAsc: b + " sorting_asc_disabled",
                sSortableDesc: b + " sorting_desc_disabled",
                sSortableNone: b + " sorting_disabled",
                sSortJUIAsc: c + "triangle-1-n",
                sSortJUIDesc: c + "triangle-1-s",
                sSortJUI: c + "carat-2-n-s",
                sSortJUIAscAllowed: c + "carat-1-n",
                sSortJUIDescAllowed: c + "carat-1-s",
                sSortJUIWrapper: "DataTables_sort_wrapper",
                sSortIcon: "DataTables_sort_icon",
                sScrollHead: "dataTables_scrollHead " + b,
                sScrollFoot: "dataTables_scrollFoot " + b,
                sHeaderTH: b,
                sFooterTH: b,
                sJUIHeader: a + " ui-corner-tl ui-corner-tr",
                sJUIFooter: a + " ui-corner-bl ui-corner-br",
            });
        })();
        var Nd = E.ext.pager;
        d.extend(Nd, {
            simple: function (a, b) {
                return ["previous", "next"];
            },
            full: function (a, b) {
                return ["first", "previous", "next", "last"];
            },
            simple_numbers: function (a, b) {
                return ["previous", jd(a, b), "next"];
            },
            full_numbers: function (a, b) {
                return ["first", "previous", jd(a, b), "next", "last"];
            },
            _numbers: jd,
            numbers_length: 7,
        });
        d.extend(!0, E.ext.renderer, {
            pageButton: {
                _: function (b, c, e, f, g, h) {
                    var l = b.oClasses,
                        k = b.oLanguage.oPaginate,
                        n,
                        q,
                        r = 0,
                        m = function (a, c) {
                            var f,
                                x,
                                p,
                                u,
                                v = function (a) {
                                    N(b, a.data.action, !0);
                                };
                            f = 0;
                            for (x = c.length; f < x; f++)
                                if (((u = c[f]), d.isArray(u))) (p = d("<" + (u.DT_el || "div") + "/>").appendTo(a)), m(p, u);
                                else {
                                    q = n = "";
                                    switch (u) {
                                        case "ellipsis":
                                            a.append("<span>&hellip;</span>");
                                            break;
                                        case "first":
                                            n = k.sFirst;
                                            q = u + (0 < g ? "" : " " + l.sPageButtonDisabled);
                                            break;
                                        case "previous":
                                            n = k.sPrevious;
                                            q = u + (0 < g ? "" : " " + l.sPageButtonDisabled);
                                            break;
                                        case "next":
                                            n = k.sNext;
                                            q = u + (g < h - 1 ? "" : " " + l.sPageButtonDisabled);
                                            break;
                                        case "last":
                                            n = k.sLast;
                                            q = u + (g < h - 1 ? "" : " " + l.sPageButtonDisabled);
                                            break;
                                        default:
                                            (n = u + 1), (q = g === u ? l.sPageButtonActive : "");
                                    }
                                    n &&
                                        ((p = d("<a>", { class: l.sPageButton + " " + q, "aria-controls": b.sTableId, "data-dt-idx": r, tabindex: b.iTabIndex, id: 0 === e && "string" === typeof u ? b.sTableId + "_" + u : null })
                                            .html(n)
                                            .appendTo(a)),
                                        gc(p, { action: u }, v),
                                        r++);
                                }
                        };
                    try {
                        var x = d(a.activeElement).data("dt-idx");
                        m(d(c).empty(), f);
                        null !== x &&
                            d(c)
                                .find("[data-dt-idx=" + x + "]")
                                .focus();
                    } catch (p) {}
                },
            },
        });
        d.extend(E.ext.type.detect, [
            function (a, b) {
                var c = b.oLanguage.sDecimal;
                return nc(a, c) ? "num" + c : null;
            },
            function (a, b) {
                if (!(!a || a instanceof Date || (Jd.test(a) && hc.test(a)))) return null;
                var c = Date.parse(a);
                return (null !== c && !isNaN(c)) || ob(a) ? "date" : null;
            },
            function (a, b) {
                var c = b.oLanguage.sDecimal;
                return nc(a, c, !0) ? "num-fmt" + c : null;
            },
            function (a, b) {
                var c = b.oLanguage.sDecimal;
                return Pc(a, c) ? "html-num" + c : null;
            },
            function (a, b) {
                var c = b.oLanguage.sDecimal;
                return Pc(a, c, !0) ? "html-num-fmt" + c : null;
            },
            function (a, b) {
                return ob(a) || ("string" === typeof a && -1 !== a.indexOf("<")) ? "html" : null;
            },
        ]);
        d.extend(E.ext.type.search, {
            html: function (a) {
                return ob(a) ? a : "string" === typeof a ? a.replace(xc, " ").replace(Tb, "") : "";
            },
            string: function (a) {
                return ob(a) ? a : "string" === typeof a ? a.replace(xc, " ") : a;
            },
        });
        var sa = function (a, b, c, d) {
            if (0 !== a && (!a || "-" === a)) return -Infinity;
            b && (a = Ub(a, b));
            a.replace && (c && (a = a.replace(c, "")), d && (a = a.replace(d, "")));
            return 1 * a;
        };
        d.extend(La.type.order, {
            "date-pre": function (a) {
                return Date.parse(a) || 0;
            },
            "html-pre": function (a) {
                return ob(a) ? "" : a.replace ? a.replace(/<.*?>/g, "").toLowerCase() : a + "";
            },
            "string-pre": function (a) {
                return ob(a) ? "" : "string" === typeof a ? a.toLowerCase() : a.toString ? a.toString() : "";
            },
            "string-asc": function (a, b) {
                return a < b ? -1 : a > b ? 1 : 0;
            },
            "string-desc": function (a, b) {
                return a < b ? 1 : a > b ? -1 : 0;
            },
        });
        Oc("");
        d.extend(!0, E.ext.renderer, {
            header: {
                _: function (a, b, c, e) {
                    d(a.nTable).on("order.dt.DT", function (d, f, g, h) {
                        a === f && ((d = c.idx), b.removeClass(c.sSortingClass + " " + e.sSortAsc + " " + e.sSortDesc).addClass("asc" == h[d] ? e.sSortAsc : "desc" == h[d] ? e.sSortDesc : c.sSortingClass));
                    });
                },
                jqueryui: function (a, b, c, e) {
                    d("<div/>")
                        .addClass(e.sSortJUIWrapper)
                        .append(b.contents())
                        .append(d("<span/>").addClass(e.sSortIcon + " " + c.sSortingClassJUI))
                        .appendTo(b);
                    d(a.nTable).on("order.dt.DT", function (d, f, g, h) {
                        a === f &&
                            ((d = c.idx),
                            b.removeClass(e.sSortAsc + " " + e.sSortDesc).addClass("asc" == h[d] ? e.sSortAsc : "desc" == h[d] ? e.sSortDesc : c.sSortingClass),
                            b
                                .find("span." + e.sSortIcon)
                                .removeClass(e.sSortJUIAsc + " " + e.sSortJUIDesc + " " + e.sSortJUI + " " + e.sSortJUIAscAllowed + " " + e.sSortJUIDescAllowed)
                                .addClass("asc" == h[d] ? e.sSortJUIAsc : "desc" == h[d] ? e.sSortJUIDesc : c.sSortingClassJUI));
                    });
                },
            },
        });
        E.render = {
            number: function (a, b, c, d) {
                return {
                    display: function (e) {
                        var f = 0 > e ? "-" : "";
                        e = Math.abs(parseFloat(e));
                        var g = parseInt(e, 10);
                        e = c ? b + (e - g).toFixed(c).substring(2) : "";
                        return f + (d || "") + g.toString().replace(/\B(?=(\d{3})+(?!\d))/g, a) + e;
                    },
                };
            },
        };
        d.extend(E.ext.internal, {
            _fnExternApiFunc: kd,
            _fnBuildAjax: ma,
            _fnAjaxUpdate: za,
            _fnAjaxParameters: ta,
            _fnAjaxUpdateDraw: aa,
            _fnAjaxDataSrc: ca,
            _fnAddColumn: q,
            _fnColumnOptions: u,
            _fnAdjustColumnSizing: v,
            _fnVisibleToColumnIndex: w,
            _fnColumnIndexToVisible: t,
            _fnVisbleColumns: y,
            _fnGetColumns: p,
            _fnColumnTypes: C,
            _fnApplyColumnDefs: r,
            _fnHungarianMap: e,
            _fnCamelToHungarian: g,
            _fnLanguageCompat: f,
            _fnBrowserDetect: l,
            _fnAddData: x,
            _fnAddTr: z,
            _fnNodeToDataIndex: function (a, b) {
                return b._DT_RowIndex !== c ? b._DT_RowIndex : null;
            },
            _fnNodeToColumnIndex: function (a, b, c) {
                return d.inArray(c, a.aoData[b].anCells);
            },
            _fnGetCellData: B,
            _fnSetCellData: G,
            _fnSplitObjNotation: H,
            _fnGetObjectDataFn: J,
            _fnSetObjectDataFn: A,
            _fnGetDataMaster: ea,
            _fnClearTable: ga,
            _fnDeleteIndex: ha,
            _fnInvalidate: va,
            _fnGetRowElements: L,
            _fnCreateTr: pa,
            _fnBuildHead: Ba,
            _fnDrawHead: W,
            _fnDraw: ra,
            _fnReDraw: Q,
            _fnAddOptionsHtml: I,
            _fnDetectHeader: Ca,
            _fnGetUniqueThs: M,
            _fnFeatureHtmlFilter: Ka,
            _fnFilterComplete: Sa,
            _fnFilterCustom: na,
            _fnFilterColumn: T,
            _fnFilter: bc,
            _fnFilterCreateSearch: ab,
            _fnEscapeRegex: vb,
            _fnFilterData: Gb,
            _fnFeatureHtmlInfo: zc,
            _fnUpdateInfo: cc,
            _fnInfoMacros: Ac,
            _fnInitialise: dc,
            _fnInitComplete: la,
            _fnLengthChange: m,
            _fnFeatureHtmlLength: Mc,
            _fnFeatureHtmlPaginate: ec,
            _fnPageChange: N,
            _fnFeatureHtmlProcessing: wb,
            _fnProcessingDisplay: Aa,
            _fnFeatureHtmlTable: xb,
            _fnScrollDraw: bb,
            _fnApplyToChildren: cb,
            _fnCalculateColumnWidths: pc,
            _fnThrottle: Ra,
            _fnConvertToWidth: Ib,
            _fnScrollingWidthAdjust: jb,
            _fnGetWidestNode: gd,
            _fnGetMaxLenString: hd,
            _fnStringToCss: X,
            _fnScrollBarWidth: qc,
            _fnSortFlatten: Da,
            _fnSort: yb,
            _fnSortAria: Bc,
            _fnSortListener: U,
            _fnSortAttachListener: ua,
            _fnSortingClasses: mc,
            _fnSortData: Jc,
            _fnSaveState: Vb,
            _fnLoadState: ib,
            _fnSettingsFromNode: pb,
            _fnLog: ub,
            _fnMap: kb,
            _fnBindAction: gc,
            _fnCallbackReg: Ga,
            _fnCallbackFire: fa,
            _fnLengthOverflow: Ja,
            _fnRenderer: Kc,
            _fnDataSource: Ta,
            _fnRowAttributes: wa,
            _fnCalculateEnd: function () {},
        });
        d.fn.dataTable = E;
        d.fn.dataTableSettings = E.settings;
        d.fn.dataTableExt = E.ext;
        d.fn.DataTable = function (a) {
            return d(this).dataTable(a).api();
        };
        d.each(E, function (a, b) {
            d.fn.DataTable[a] = b;
        });
        return d.fn.dataTable;
    });
})(window, document);
(function (b, a, c) {
    b = function (a, b) {
        a.extend(!0, b.defaults, { dom: "<'row'<'col-sm-6'l><'col-sm-6'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-6'i><'col-sm-6'p>>", renderer: "bootstrap" });
        a.extend(b.ext.classes, { sWrapper: "dataTables_wrapper form-inline dt-bootstrap", sFilterInput: "form-control input-sm", sLengthSelect: "form-control input-sm" });
        b.ext.renderer.pageButton.bootstrap = function (c, f, k, h, l, n) {
            var q = new b.Api(c),
                u = c.oClasses,
                v = c.oLanguage.oPaginate,
                w,
                t,
                y = function (b, e) {
                    var f,
                        h,
                        z,
                        B,
                        G = function (b) {
                            b.preventDefault();
                            a(b.currentTarget).hasClass("disabled") || q.page(b.data.action).draw(!1);
                        };
                    f = 0;
                    for (h = e.length; f < h; f++)
                        if (((B = e[f]), a.isArray(B))) y(b, B);
                        else {
                            t = w = "";
                            switch (B) {
                                case "ellipsis":
                                    w = "&hellip;";
                                    t = "disabled";
                                    break;
                                case "first":
                                    w = v.sFirst;
                                    t = B + (0 < l ? "" : " disabled");
                                    break;
                                case "previous":
                                    w = v.sPrevious;
                                    t = B + (0 < l ? "" : " disabled");
                                    break;
                                case "next":
                                    w = v.sNext;
                                    t = B + (l < n - 1 ? "" : " disabled");
                                    break;
                                case "last":
                                    w = v.sLast;
                                    t = B + (l < n - 1 ? "" : " disabled");
                                    break;
                                default:
                                    (w = B + 1), (t = l === B ? "active" : "");
                            }
                            w &&
                                ((z = a("<li>", { class: u.sPageButton + " " + t, "aria-controls": c.sTableId, tabindex: c.iTabIndex, id: 0 === k && "string" === typeof B ? c.sTableId + "_" + B : null })
                                    .append(a("<a>", { href: "#" }).html(w))
                                    .appendTo(b)),
                                c.oApi._fnBindAction(z, { action: B }, G));
                        }
                };
            y(a(f).empty().html('<ul class="pagination"/>').children("ul"), h);
        };
        b.TableTools &&
            (a.extend(!0, b.TableTools.classes, {
                container: "DTTT btn-group",
                buttons: { normal: "btn btn-default", disabled: "disabled" },
                collection: { container: "DTTT_dropdown dropdown-menu", buttons: { normal: "", disabled: "disabled" } },
                print: { info: "DTTT_print_info" },
                select: { row: "active" },
            }),
            a.extend(!0, b.TableTools.DEFAULTS.oTags, { collection: { container: "ul", button: "li", liner: "a" } }));
    };
    "function" === typeof define && define.amd ? define(["jquery", "datatables"], b) : "object" === typeof exports ? b(require("jquery"), require("datatables")) : jQuery && b(jQuery, jQuery.fn.dataTable);
})(window, document);
(function (b, a, c) {
    var d = function (d, g) {
        var f = function (b, c) {
            !this instanceof f
                ? alert("Scroller warning: Scroller must be initialised with the 'new' keyword.")
                : ("undefined" == typeof c && (c = {}),
                  (this.s = {
                      dt: b,
                      tableTop: 0,
                      tableBottom: 0,
                      filtering: !1,
                      redrawTop: 0,
                      redrawBottom: 0,
                      autoHeight: !0,
                      viewportRows: 0,
                      stateTO: null,
                      drawTO: null,
                      heights: { jump: null, page: null, virtual: null, scroll: null, row: null, viewport: null },
                      topRowFloat: 0,
                      scrollDrawDiff: null,
                      loaderVisible: !1,
                  }),
                  (this.s = d.extend(this.s, f.oDefaults, c)),
                  (this.s.heights.row = this.s.rowHeight),
                  (this.dom = { force: a.createElement("div"), scroller: null, table: null, loader: null }),
                  (this.s.dt.oScroller = this),
                  this._fnConstruct());
        };
        f.prototype = {
            fnRowToPixels: function (a, b, d) {
                a = d ? this._domain("virtualToPhysical", a * this.s.heights.row) : this.s.baseScrollTop + (a - this.s.baseRowTop) * this.s.heights.row;
                return b || b === c ? parseInt(a, 10) : a;
            },
            fnPixelsToRow: function (a, b, d) {
                var e = a - this.s.baseScrollTop;
                a = d ? this._domain("physicalToVirtual", a) / this.s.heights.row : e / this.s.heights.row + this.s.baseRowTop;
                return b || b === c ? parseInt(a, 10) : a;
            },
            fnScrollToRow: function (a, b) {
                var c = this,
                    f = !1,
                    g = this.fnRowToPixels(a),
                    k = a - ((this.s.displayBuffer - 1) / 2) * this.s.viewportRows;
                0 > k && (k = 0);
                (g > this.s.redrawBottom || g < this.s.redrawTop) && this.s.dt._iDisplayStart !== k && ((f = !0), (g = this.fnRowToPixels(a, !1, !0)));
                "undefined" == typeof b || b
                    ? ((this.s.ani = f),
                      d(this.dom.scroller).animate({ scrollTop: g }, function () {
                          setTimeout(function () {
                              c.s.ani = !1;
                          }, 25);
                      }))
                    : d(this.dom.scroller).scrollTop(g);
            },
            fnMeasure: function (a) {
                this.s.autoHeight && this._fnCalcRowHeight();
                var b = this.s.heights;
                b.viewport = d(this.dom.scroller).height();
                this.s.viewportRows = parseInt(b.viewport / b.row, 10) + 1;
                this.s.dt._iDisplayLength = this.s.viewportRows * this.s.displayBuffer;
                (a === c || a) && this.s.dt.oInstance.fnDraw();
            },
            _fnConstruct: function () {
                var a = this;
                if (this.s.dt.oFeatures.bPaginate) {
                    this.dom.force.style.position = "absolute";
                    this.dom.force.style.top = "0px";
                    this.dom.force.style.left = "0px";
                    this.dom.force.style.width = "1px";
                    this.dom.scroller = d("div." + this.s.dt.oClasses.sScrollBody, this.s.dt.nTableWrapper)[0];
                    this.dom.scroller.appendChild(this.dom.force);
                    this.dom.scroller.style.position = "relative";
                    this.dom.table = d(">table", this.dom.scroller)[0];
                    this.dom.table.style.position = "absolute";
                    this.dom.table.style.top = "0px";
                    this.dom.table.style.left = "0px";
                    d(this.s.dt.nTableWrapper).addClass("DTS");
                    this.s.loadingIndicator &&
                        ((this.dom.loader = d('<div class="DTS_Loading">' + this.s.dt.oLanguage.sLoadingRecords + "</div>").css("display", "none")), d(this.dom.scroller.parentNode).css("position", "relative").append(this.dom.loader));
                    this.s.heights.row && "auto" != this.s.heights.row && (this.s.autoHeight = !1);
                    this.fnMeasure(!1);
                    this.s.ingnoreScroll = !0;
                    this.s.stateSaveThrottle = this.s.dt.oApi._fnThrottle(function () {
                        a.s.dt.oApi._fnSaveState(a.s.dt);
                    }, 500);
                    d(this.dom.scroller).on("scroll.DTS", function (b) {
                        a._fnScroll.call(a);
                    });
                    d(this.dom.scroller).on("touchstart.DTS", function () {
                        a._fnScroll.call(a);
                    });
                    this.s.dt.aoDrawCallback.push({
                        fn: function () {
                            a.s.dt.bInitialised && a._fnDrawCallback.call(a);
                        },
                        sName: "Scroller",
                    });
                    d(b).on("resize.DTS", function () {
                        a.fnMeasure(!1);
                        a._fnInfo();
                    });
                    var c = !0;
                    this.s.dt.oApi._fnCallbackReg(
                        this.s.dt,
                        "aoStateSaveParams",
                        function (b, d) {
                            c && a.s.dt.oLoadedState
                                ? ((d.iScroller = a.s.dt.oLoadedState.iScroller), (d.iScrollerTopRow = a.s.dt.oLoadedState.iScrollerTopRow), (c = !1))
                                : ((d.iScroller = a.dom.scroller.scrollTop), (d.iScrollerTopRow = a.s.topRowFloat));
                        },
                        "Scroller_State"
                    );
                    this.s.dt.oLoadedState && (this.s.topRowFloat = this.s.dt.oLoadedState.iScrollerTopRow || 0);
                    this.s.dt.aoDestroyCallback.push({
                        sName: "Scroller",
                        fn: function () {
                            d(b).off("resize.DTS");
                            d(a.dom.scroller).off("touchstart.DTS scroll.DTS");
                            d(a.s.dt.nTableWrapper).removeClass("DTS");
                            d("div.DTS_Loading", a.dom.scroller.parentNode).remove();
                            a.dom.table.style.position = "";
                            a.dom.table.style.top = "";
                            a.dom.table.style.left = "";
                        },
                    });
                } else this.s.dt.oApi._fnLog(this.s.dt, 0, "Pagination must be enabled for Scroller");
            },
            _fnScroll: function () {
                var a = this,
                    b = this.s.heights,
                    c = this.dom.scroller.scrollTop,
                    f;
                if (!this.s.skip && !this.s.ingnoreScroll)
                    if ((this.s.dt.bFiltered || this.s.dt.bSorted ? (this.s.filtering = !0) : this.s.filtering && ((this.s.filtering = !1), (this.s.redrawBottom = 0)), this.s.dt.bFiltered || this.s.dt.bSorted)) this.s.lastScrollTop = 0;
                    else {
                        this._fnInfo();
                        clearTimeout(this.s.stateTO);
                        this.s.stateTO = setTimeout(function () {
                            a.s.dt.oApi._fnSaveState(a.s.dt);
                        }, 250);
                        if (c < this.s.redrawTop || c > this.s.redrawBottom) {
                            var g = Math.ceil(((this.s.displayBuffer - 1) / 2) * this.s.viewportRows);
                            Math.abs(c - this.s.lastScrollTop) > b.viewport || this.s.ani
                                ? ((f = parseInt(this._domain("physicalToVirtual", c) / b.row, 10) - g), (this.s.topRowFloat = this._domain("physicalToVirtual", c) / b.row))
                                : ((f = this.fnPixelsToRow(c) - g), (this.s.topRowFloat = this.fnPixelsToRow(c, !1)));
                            0 >= f ? (f = 0) : f + this.s.dt._iDisplayLength > this.s.dt.fnRecordsDisplay() ? ((f = this.s.dt.fnRecordsDisplay() - this.s.dt._iDisplayLength), 0 > f && (f = 0)) : 0 !== f % 2 && f++;
                            f != this.s.dt._iDisplayStart &&
                                ((this.s.tableTop = d(this.s.dt.nTable).offset().top),
                                (this.s.tableBottom = d(this.s.dt.nTable).height() + this.s.tableTop),
                                (b = function () {
                                    null === a.s.scrollDrawReq && (a.s.scrollDrawReq = c);
                                    a.s.dt._iDisplayStart = f;
                                    a.s.dt.oApi._fnCalculateEnd && a.s.dt.oApi._fnCalculateEnd(a.s.dt);
                                    a.s.dt.oApi._fnDraw(a.s.dt);
                                }),
                                this.s.dt.oFeatures.bServerSide ? (clearTimeout(this.s.drawTO), (this.s.drawTO = setTimeout(b, this.s.serverWait))) : b(),
                                this.dom.loader && !this.s.loaderVisible && (this.dom.loader.css("display", "block"), (this.s.loaderVisible = !0)));
                        }
                        this.s.lastScrollTop = c;
                        this.s.stateSaveThrottle();
                    }
            },
            _domain: function (a, b) {
                var c = this.s.heights,
                    d;
                if (c.virtual === c.scroll) {
                    d = (c.virtual - c.viewport) / (c.scroll - c.viewport);
                    if ("virtualToPhysical" === a) return b / d;
                    if ("physicalToVirtual" === a) return b * d;
                }
                var e = (c.scroll - c.viewport) / 2,
                    f = (c.virtual - c.viewport) / 2;
                d = f / (e * e);
                if ("virtualToPhysical" === a) {
                    if (b < f) return Math.pow(b / d, 0.5);
                    b = 2 * f - b;
                    return 0 > b ? c.scroll : 2 * e - Math.pow(b / d, 0.5);
                }
                if ("physicalToVirtual" === a) {
                    if (b < e) return b * b * d;
                    b = 2 * e - b;
                    return 0 > b ? c.virtual : 2 * f - b * b * d;
                }
            },
            _fnDrawCallback: function () {
                var a = this,
                    b = this.s.heights,
                    c = this.dom.scroller.scrollTop,
                    f = d(this.s.dt.nTable).height(),
                    g = this.s.dt._iDisplayStart,
                    k = this.s.dt._iDisplayLength,
                    w = this.s.dt.fnRecordsDisplay();
                this.s.skip = !0;
                this._fnScrollForce();
                c = 0 === g ? this.s.topRowFloat * b.row : g + k >= w ? b.scroll - (w - this.s.topRowFloat) * b.row : this._domain("virtualToPhysical", this.s.topRowFloat * b.row);
                this.dom.scroller.scrollTop = c;
                this.s.baseScrollTop = c;
                this.s.baseRowTop = this.s.topRowFloat;
                var t = c - (this.s.topRowFloat - g) * b.row;
                0 === g ? (t = 0) : g + k >= w && (t = b.scroll - f);
                this.dom.table.style.top = t + "px";
                this.s.tableTop = t;
                this.s.tableBottom = f + this.s.tableTop;
                f = (c - this.s.tableTop) * this.s.boundaryScale;
                this.s.redrawTop = c - f;
                this.s.redrawBottom = c + f;
                this.s.skip = !1;
                this.s.dt.oFeatures.bStateSave && null !== this.s.dt.oLoadedState && "undefined" != typeof this.s.dt.oLoadedState.iScroller
                    ? (((c = (!this.s.dt.sAjaxSource && !a.s.dt.ajax) || this.s.dt.oFeatures.bServerSide ? !1 : !0) && 2 == this.s.dt.iDraw) || (!c && 1 == this.s.dt.iDraw)) &&
                      setTimeout(function () {
                          d(a.dom.scroller).scrollTop(a.s.dt.oLoadedState.iScroller);
                          a.s.redrawTop = a.s.dt.oLoadedState.iScroller - b.viewport / 2;
                          setTimeout(function () {
                              a.s.ingnoreScroll = !1;
                          }, 0);
                      }, 0)
                    : (a.s.ingnoreScroll = !1);
                setTimeout(function () {
                    a._fnInfo.call(a);
                }, 0);
                this.dom.loader && this.s.loaderVisible && (this.dom.loader.css("display", "none"), (this.s.loaderVisible = !1));
            },
            _fnScrollForce: function () {
                var a = this.s.heights;
                a.virtual = a.row * this.s.dt.fnRecordsDisplay();
                a.scroll = a.virtual;
                1e6 < a.scroll && (a.scroll = 1e6);
                this.dom.force.style.height = a.scroll + "px";
            },
            _fnCalcRowHeight: function () {
                var a = this.s.dt,
                    b = a.nTable,
                    c = b.cloneNode(!1),
                    f = d("<tbody/>").appendTo(c),
                    g = d('<div class="' + a.oClasses.sWrapper + ' DTS"><div class="' + a.oClasses.sScrollWrapper + '"><div class="' + a.oClasses.sScrollBody + '"></div></div></div>');
                for (d("tbody tr:lt(4)", b).clone().appendTo(f); 3 > d("tr", f).length; ) f.append("<tr><td>&nbsp;</td></tr>");
                d("div." + a.oClasses.sScrollBody, g).append(c);
                a._bInitComplete ? (a = b.parentNode) : (this.s.dt.nHolding || (this.s.dt.nHolding = d("<div></div>").insertBefore(this.s.dt.nTable)), (a = this.s.dt.nHolding));
                g.appendTo(a);
                this.s.heights.row = d("tr", f).eq(1).outerHeight();
                g.remove();
            },
            _fnInfo: function () {
                if (this.s.dt.oFeatures.bInfo) {
                    var a = this.s.dt,
                        b = a.oLanguage,
                        c = this.dom.scroller.scrollTop,
                        f = Math.floor(this.fnPixelsToRow(c, !1, this.s.ani) + 1),
                        g = a.fnRecordsTotal(),
                        k = a.fnRecordsDisplay(),
                        c = Math.ceil(this.fnPixelsToRow(c + this.s.heights.viewport, !1, this.s.ani)),
                        c = k < c ? k : c,
                        w = a.fnFormatNumber(f),
                        t = a.fnFormatNumber(c),
                        y = a.fnFormatNumber(g),
                        p = a.fnFormatNumber(k),
                        w =
                            0 === a.fnRecordsDisplay() && a.fnRecordsDisplay() == a.fnRecordsTotal()
                                ? b.sInfoEmpty + b.sInfoPostFix
                                : 0 === a.fnRecordsDisplay()
                                ? b.sInfoEmpty + " " + b.sInfoFiltered.replace("_MAX_", y) + b.sInfoPostFix
                                : a.fnRecordsDisplay() == a.fnRecordsTotal()
                                ? b.sInfo.replace("_START_", w).replace("_END_", t).replace("_MAX_", y).replace("_TOTAL_", p) + b.sInfoPostFix
                                : b.sInfo.replace("_START_", w).replace("_END_", t).replace("_MAX_", y).replace("_TOTAL_", p) + " " + b.sInfoFiltered.replace("_MAX_", a.fnFormatNumber(a.fnRecordsTotal())) + b.sInfoPostFix;
                    (b = b.fnInfoCallback) && (w = b.call(a.oInstance, a, f, c, g, k, w));
                    a = a.aanFeatures.i;
                    if ("undefined" != typeof a) for (f = 0, g = a.length; f < g; f++) d(a[f]).html(w);
                }
            },
        };
        f.defaults = { trace: !1, rowHeight: "auto", serverWait: 200, displayBuffer: 9, boundaryScale: 0.5, loadingIndicator: !1 };
        f.oDefaults = f.defaults;
        f.version = "1.2.2";
        "function" == typeof d.fn.dataTable && "function" == typeof d.fn.dataTableExt.fnVersionCheck && d.fn.dataTableExt.fnVersionCheck("1.9.0")
            ? d.fn.dataTableExt.aoFeatures.push({
                  fnInit: function (a) {
                      var b = a.oInit;
                      return new f(a, b.scroller || b.oScroller || {}).dom.wrapper;
                  },
                  cFeature: "S",
                  sFeature: "Scroller",
              })
            : alert("Warning: Scroller requires DataTables 1.9.0 or greater - www.datatables.net/download");
        d.fn.dataTable.Scroller = f;
        d.fn.DataTable.Scroller = f;
        if (d.fn.dataTable.Api) {
            var k = d.fn.dataTable.Api;
            k.register("scroller()", function () {
                return this;
            });
            k.register("scroller().rowToPixels()", function (a, b, c) {
                var d = this.context;
                if (d.length && d[0].oScroller) return d[0].oScroller.fnRowToPixels(a, b, c);
            });
            k.register("scroller().pixelsToRow()", function (a, b, c) {
                var d = this.context;
                if (d.length && d[0].oScroller) return d[0].oScroller.fnPixelsToRow(a, b, c);
            });
            k.register("scroller().scrollToRow()", function (a, b) {
                this.iterator("table", function (c) {
                    c.oScroller && c.oScroller.fnScrollToRow(a, b);
                });
                return this;
            });
            k.register("scroller().measure()", function (a) {
                this.iterator("table", function (b) {
                    b.oScroller && b.oScroller.fnMeasure(a);
                });
                return this;
            });
        }
        return f;
    };
    "function" === typeof define && define.amd ? define(["jquery", "datatables"], d) : "object" === typeof exports ? d(require("jquery"), require("datatables")) : jQuery && !jQuery.fn.dataTable.Scroller && d(jQuery, jQuery.fn.dataTable);
})(window, document);
(function (b) {
    "function" === typeof define && define.amd ? define(["jquery"], b) : "object" === typeof module && module.exports ? (module.exports = b(require("jquery"))) : b(jQuery);
})(function (b) {
    b.extend(b.fn, {
        validate: function (a) {
            if (this.length) {
                var c = b.data(this[0], "validator");
                if (c) return c;
                this.attr("novalidate", "novalidate");
                c = new b.validator(a, this[0]);
                b.data(this[0], "validator", c);
                c.settings.onsubmit &&
                    (this.on("click.validate", ":submit", function (a) {
                        c.settings.submitHandler && (c.submitButton = a.target);
                        b(this).hasClass("cancel") && (c.cancelSubmit = !0);
                        void 0 !== b(this).attr("formnovalidate") && (c.cancelSubmit = !0);
                    }),
                    this.on("submit.validate", function (a) {
                        function d() {
                            var f, h;
                            return c.settings.submitHandler
                                ? (c.submitButton && (f = b("<input type='hidden'/>").attr("name", c.submitButton.name).val(b(c.submitButton).val()).appendTo(c.currentForm)),
                                  (h = c.settings.submitHandler.call(c, c.currentForm, a)),
                                  c.submitButton && f.remove(),
                                  void 0 !== h ? h : !1)
                                : !0;
                        }
                        c.settings.debug && a.preventDefault();
                        if (c.cancelSubmit) return (c.cancelSubmit = !1), d();
                        if (c.form()) return c.pendingRequest ? ((c.formSubmitted = !0), !1) : d();
                        c.focusInvalid();
                        return !1;
                    }));
                return c;
            }
            a && a.debug && window.console && console.warn("Nothing selected, can't validate, returning nothing.");
        },
        valid: function () {
            var a, c, g;
            b(this[0]).is("form")
                ? (a = this.validate().form())
                : ((g = []),
                  (a = !0),
                  (c = b(this[0].form).validate()),
                  this.each(function () {
                      (a = c.element(this) && a) || (g = g.concat(c.errorList));
                  }),
                  (c.errorList = g));
            return a;
        },
        rules: function (a, c) {
            var g = this[0],
                f,
                k,
                h,
                l;
            if (null != g && null != g.form) {
                if (a)
                    switch (((f = b.data(g.form, "validator").settings), (k = f.rules), (h = b.validator.staticRules(g)), a)) {
                        case "add":
                            b.extend(h, b.validator.normalizeRule(c));
                            delete h.messages;
                            k[g.name] = h;
                            c.messages && (f.messages[g.name] = b.extend(f.messages[g.name], c.messages));
                            break;
                        case "remove":
                            if (!c) return delete k[g.name], h;
                            l = {};
                            b.each(c.split(/\s/), function (a, c) {
                                l[c] = h[c];
                                delete h[c];
                                "required" === c && b(g).removeAttr("aria-required");
                            });
                            return l;
                    }
                f = b.validator.normalizeRules(b.extend({}, b.validator.classRules(g), b.validator.attributeRules(g), b.validator.dataRules(g), b.validator.staticRules(g)), g);
                f.required && ((k = f.required), delete f.required, (f = b.extend({ required: k }, f)), b(g).attr("aria-required", "true"));
                f.remote && ((k = f.remote), delete f.remote, (f = b.extend(f, { remote: k })));
                return f;
            }
        },
    });
    b.extend(b.expr.pseudos || b.expr[":"], {
        blank: function (a) {
            return !b.trim("" + b(a).val());
        },
        filled: function (a) {
            a = b(a).val();
            return null !== a && !!b.trim("" + a);
        },
        unchecked: function (a) {
            return !b(a).prop("checked");
        },
    });
    b.validator = function (a, c) {
        this.settings = b.extend(!0, {}, b.validator.defaults, a);
        this.currentForm = c;
        this.init();
    };
    b.validator.format = function (a, c) {
        if (1 === arguments.length)
            return function () {
                var c = b.makeArray(arguments);
                c.unshift(a);
                return b.validator.format.apply(this, c);
            };
        if (void 0 === c) return a;
        2 < arguments.length && c.constructor !== Array && (c = b.makeArray(arguments).slice(1));
        c.constructor !== Array && (c = [c]);
        b.each(c, function (b, c) {
            a = a.replace(new RegExp("\\{" + b + "\\}", "g"), function () {
                return c;
            });
        });
        return a;
    };
    b.extend(b.validator, {
        defaults: {
            messages: {},
            groups: {},
            rules: {},
            errorClass: "error",
            pendingClass: "pending",
            validClass: "valid",
            errorElement: "label",
            focusCleanup: !1,
            focusInvalid: !0,
            errorContainer: b([]),
            errorLabelContainer: b([]),
            onsubmit: !0,
            ignore: ":hidden",
            ignoreTitle: !1,
            onfocusin: function (a) {
                this.lastActive = a;
                this.settings.focusCleanup && (this.settings.unhighlight && this.settings.unhighlight.call(this, a, this.settings.errorClass, this.settings.validClass), this.hideThese(this.errorsFor(a)));
            },
            onfocusout: function (a) {
                this.checkable(a) || (!(a.name in this.submitted) && this.optional(a)) || this.element(a);
            },
            onkeyup: function (a, c) {
                var g = [16, 17, 18, 20, 35, 36, 37, 38, 39, 40, 45, 144, 225];
                (9 === c.which && "" === this.elementValue(a)) || -1 !== b.inArray(c.keyCode, g) || ((a.name in this.submitted || a.name in this.invalid) && this.element(a));
            },
            onclick: function (a) {
                a.name in this.submitted ? this.element(a) : a.parentNode.name in this.submitted && this.element(a.parentNode);
            },
            highlight: function (a, c, g) {
                "radio" === a.type ? this.findByName(a.name).addClass(c).removeClass(g) : b(a).addClass(c).removeClass(g);
            },
            unhighlight: function (a, c, g) {
                "radio" === a.type ? this.findByName(a.name).removeClass(c).addClass(g) : b(a).removeClass(c).addClass(g);
            },
        },
        setDefaults: function (a) {
            b.extend(b.validator.defaults, a);
        },
        messages: {
            required: "This field is required.",
            remote: "Please fix this field.",
            email: "Please enter a valid email address.",
            url: "Please enter a valid URL.",
            date: "Please enter a valid date.",
            dateISO: "Please enter a valid date (ISO).",
            number: "Please enter a valid number.",
            digits: "Please enter only digits.",
            equalTo: "Please enter the same value again.",
            maxlength: b.validator.format("Please enter no more than {0} characters."),
            minlength: b.validator.format("Please enter at least {0} characters."),
            rangelength: b.validator.format("Please enter a value between {0} and {1} characters long."),
            range: b.validator.format("Please enter a value between {0} and {1}."),
            max: b.validator.format("Please enter a value less than or equal to {0}."),
            min: b.validator.format("Please enter a value greater than or equal to {0}."),
            step: b.validator.format("Please enter a multiple of {0}."),
        },
        autoCreateRanges: !1,
        prototype: {
            init: function () {
                function a(c) {
                    !this.form && this.hasAttribute("contenteditable") && (this.form = b(this).closest("form")[0]);
                    var d = b.data(this.form, "validator"),
                        e = "on" + c.type.replace(/^validate/, ""),
                        g = d.settings;
                    g[e] && !b(this).is(g.ignore) && g[e].call(d, this, c);
                }
                this.labelContainer = b(this.settings.errorLabelContainer);
                this.errorContext = (this.labelContainer.length && this.labelContainer) || b(this.currentForm);
                this.containers = b(this.settings.errorContainer).add(this.settings.errorLabelContainer);
                this.submitted = {};
                this.valueCache = {};
                this.pendingRequest = 0;
                this.pending = {};
                this.invalid = {};
                this.reset();
                var c = (this.groups = {}),
                    g;
                b.each(this.settings.groups, function (a, d) {
                    "string" === typeof d && (d = d.split(/\s/));
                    b.each(d, function (b, d) {
                        c[d] = a;
                    });
                });
                g = this.settings.rules;
                b.each(g, function (a, c) {
                    g[a] = b.validator.normalizeRule(c);
                });
                b(this.currentForm)
                    .on(
                        "focusin.validate focusout.validate keyup.validate",
                        ":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], [type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox'], [contenteditable], [type='button']",
                        a
                    )
                    .on("click.validate", "select, option, [type='radio'], [type='checkbox']", a);
                if (this.settings.invalidHandler) b(this.currentForm).on("invalid-form.validate", this.settings.invalidHandler);
                b(this.currentForm).find("[required], [data-rule-required], .required").attr("aria-required", "true");
            },
            form: function () {
                this.checkForm();
                b.extend(this.submitted, this.errorMap);
                this.invalid = b.extend({}, this.errorMap);
                this.valid() || b(this.currentForm).triggerHandler("invalid-form", [this]);
                this.showErrors();
                return this.valid();
            },
            checkForm: function () {
                this.prepareForm();
                for (var a = 0, b = (this.currentElements = this.elements()); b[a]; a++) this.check(b[a]);
                return this.valid();
            },
            element: function (a) {
                var c = this.clean(a),
                    g = this.validationTargetFor(c),
                    f = this,
                    k = !0,
                    h,
                    l;
                void 0 === g
                    ? delete this.invalid[c.name]
                    : (this.prepareElement(g),
                      (this.currentElements = b(g)),
                      (l = this.groups[g.name]) &&
                          b.each(this.groups, function (a, b) {
                              b === l && a !== g.name && (c = f.validationTargetFor(f.clean(f.findByName(a)))) && c.name in f.invalid && (f.currentElements.push(c), (k = f.check(c) && k));
                          }),
                      (h = !1 !== this.check(g)),
                      (k = k && h),
                      (this.invalid[g.name] = h ? !1 : !0),
                      this.numberOfInvalids() || (this.toHide = this.toHide.add(this.containers)),
                      this.showErrors(),
                      b(a).attr("aria-invalid", !h));
                return k;
            },
            showErrors: function (a) {
                if (a) {
                    var c = this;
                    b.extend(this.errorMap, a);
                    this.errorList = b.map(this.errorMap, function (a, b) {
                        return { message: a, element: c.findByName(b)[0] };
                    });
                    this.successList = b.grep(this.successList, function (b) {
                        return !(b.name in a);
                    });
                }
                this.settings.showErrors ? this.settings.showErrors.call(this, this.errorMap, this.errorList) : this.defaultShowErrors();
            },
            resetForm: function () {
                b.fn.resetForm && b(this.currentForm).resetForm();
                this.invalid = {};
                this.submitted = {};
                this.prepareForm();
                this.hideErrors();
                var a = this.elements().removeData("previousValue").removeAttr("aria-invalid");
                this.resetElements(a);
            },
            resetElements: function (a) {
                var b;
                if (this.settings.unhighlight) for (b = 0; a[b]; b++) this.settings.unhighlight.call(this, a[b], this.settings.errorClass, ""), this.findByName(a[b].name).removeClass(this.settings.validClass);
                else a.removeClass(this.settings.errorClass).removeClass(this.settings.validClass);
            },
            numberOfInvalids: function () {
                return this.objectLength(this.invalid);
            },
            objectLength: function (a) {
                var b = 0,
                    c;
                for (c in a) a[c] && b++;
                return b;
            },
            hideErrors: function () {
                this.hideThese(this.toHide);
            },
            hideThese: function (a) {
                a.not(this.containers).text("");
                this.addWrapper(a).hide();
            },
            valid: function () {
                return 0 === this.size();
            },
            size: function () {
                return this.errorList.length;
            },
            focusInvalid: function () {
                if (this.settings.focusInvalid)
                    try {
                        b(this.findLastActive() || (this.errorList.length && this.errorList[0].element) || [])
                            .filter(":visible")
                            .focus()
                            .trigger("focusin");
                    } catch (a) {}
            },
            findLastActive: function () {
                var a = this.lastActive;
                return (
                    a &&
                    1 ===
                        b.grep(this.errorList, function (b) {
                            return b.element.name === a.name;
                        }).length &&
                    a
                );
            },
            elements: function () {
                var a = this,
                    c = {};
                return b(this.currentForm)
                    .find("input, select, textarea, [contenteditable]")
                    .not(":submit, :reset, :image, :disabled")
                    .not(this.settings.ignore)
                    .filter(function () {
                        var g = this.name || b(this).attr("name");
                        !g && a.settings.debug && window.console && console.error("%o has no name assigned", this);
                        this.hasAttribute("contenteditable") && (this.form = b(this).closest("form")[0]);
                        return g in c || !a.objectLength(b(this).rules()) ? !1 : (c[g] = !0);
                    });
            },
            clean: function (a) {
                return b(a)[0];
            },
            errors: function () {
                var a = this.settings.errorClass.split(" ").join(".");
                return b(this.settings.errorElement + "." + a, this.errorContext);
            },
            resetInternals: function () {
                this.successList = [];
                this.errorList = [];
                this.errorMap = {};
                this.toShow = b([]);
                this.toHide = b([]);
            },
            reset: function () {
                this.resetInternals();
                this.currentElements = b([]);
            },
            prepareForm: function () {
                this.reset();
                this.toHide = this.errors().add(this.containers);
            },
            prepareElement: function (a) {
                this.reset();
                this.toHide = this.errorsFor(a);
            },
            elementValue: function (a) {
                var c = b(a),
                    g = a.type;
                if ("radio" === g || "checkbox" === g) return this.findByName(a.name).filter(":checked").val();
                if ("number" === g && "undefined" !== typeof a.validity) return a.validity.badInput ? "NaN" : c.val();
                a = a.hasAttribute("contenteditable") ? c.text() : c.val();
                if ("file" === g) {
                    if ("C:\\fakepath\\" === a.substr(0, 12)) return a.substr(12);
                    g = a.lastIndexOf("/");
                    if (0 <= g) return a.substr(g + 1);
                    g = a.lastIndexOf("\\");
                    return 0 <= g ? a.substr(g + 1) : a;
                }
                return "string" === typeof a ? a.replace(/\r/g, "") : a;
            },
            check: function (a) {
                a = this.validationTargetFor(this.clean(a));
                var c = b(a).rules(),
                    g = b.map(c, function (a, b) {
                        return b;
                    }).length,
                    f = !1,
                    k = this.elementValue(a),
                    h,
                    l,
                    n;
                if ("function" === typeof c.normalizer) {
                    k = c.normalizer.call(a, k);
                    if ("string" !== typeof k) throw new TypeError("The normalizer should return a string value.");
                    delete c.normalizer;
                }
                for (l in c) {
                    n = { method: l, parameters: c[l] };
                    try {
                        if (((h = b.validator.methods[l].call(this, k, a, n.parameters)), "dependency-mismatch" === h && 1 === g)) f = !0;
                        else {
                            f = !1;
                            if ("pending" === h) {
                                this.toHide = this.toHide.not(this.errorsFor(a));
                                return;
                            }
                            if (!h) return this.formatAndAdd(a, n), !1;
                        }
                    } catch (q) {
                        throw (
                            (this.settings.debug && window.console && console.log("Exception occurred when checking element " + a.id + ", check the '" + n.method + "' method.", q),
                            q instanceof TypeError && (q.message += ".  Exception occurred when checking element " + a.id + ", check the '" + n.method + "' method."),
                            q)
                        );
                    }
                }
                if (!f) return this.objectLength(c) && this.successList.push(a), !0;
            },
            customDataMessage: function (a, c) {
                return b(a).data("msg" + c.charAt(0).toUpperCase() + c.substring(1).toLowerCase()) || b(a).data("msg");
            },
            customMessage: function (a, b) {
                var c = this.settings.messages[a];
                return c && (c.constructor === String ? c : c[b]);
            },
            findDefined: function () {
                for (var a = 0; a < arguments.length; a++) if (void 0 !== arguments[a]) return arguments[a];
            },
            defaultMessage: function (a, c) {
                "string" === typeof c && (c = { method: c });
                var g = this.findDefined(
                        this.customMessage(a.name, c.method),
                        this.customDataMessage(a, c.method),
                        (!this.settings.ignoreTitle && a.title) || void 0,
                        b.validator.messages[c.method],
                        "<strong>Warning: No message defined for " + a.name + "</strong>"
                    ),
                    f = /\$?\{(\d+)\}/g;
                "function" === typeof g ? (g = g.call(this, c.parameters, a)) : f.test(g) && (g = b.validator.format(g.replace(f, "{$1}"), c.parameters));
                return g;
            },
            formatAndAdd: function (a, b) {
                var c = this.defaultMessage(a, b);
                this.errorList.push({ message: c, element: a, method: b.method });
                this.errorMap[a.name] = c;
                this.submitted[a.name] = c;
            },
            addWrapper: function (a) {
                this.settings.wrapper && (a = a.add(a.parent(this.settings.wrapper)));
                return a;
            },
            defaultShowErrors: function () {
                var a, b;
                for (a = 0; this.errorList[a]; a++) (b = this.errorList[a]), this.settings.highlight && this.settings.highlight.call(this, b.element, this.settings.errorClass, this.settings.validClass), this.showLabel(b.element, b.message);
                this.errorList.length && (this.toShow = this.toShow.add(this.containers));
                if (this.settings.success) for (a = 0; this.successList[a]; a++) this.showLabel(this.successList[a]);
                if (this.settings.unhighlight) for (a = 0, b = this.validElements(); b[a]; a++) this.settings.unhighlight.call(this, b[a], this.settings.errorClass, this.settings.validClass);
                this.toHide = this.toHide.not(this.toShow);
                this.hideErrors();
                this.addWrapper(this.toShow).show();
            },
            validElements: function () {
                return this.currentElements.not(this.invalidElements());
            },
            invalidElements: function () {
                return b(this.errorList).map(function () {
                    return this.element;
                });
            },
            showLabel: function (a, c) {
                var g,
                    f,
                    k,
                    h = this.errorsFor(a),
                    l = this.idOrName(a),
                    n = b(a).attr("aria-describedby");
                h.length
                    ? (h.removeClass(this.settings.validClass).addClass(this.settings.errorClass), h.html(c))
                    : ((g = h = b("<" + this.settings.errorElement + ">")
                          .attr("id", l + "-error")
                          .addClass(this.settings.errorClass)
                          .html(c || "")),
                      this.settings.wrapper &&
                          (g = h
                              .hide()
                              .show()
                              .wrap("<" + this.settings.wrapper + "/>")
                              .parent()),
                      this.labelContainer.length ? this.labelContainer.append(g) : this.settings.errorPlacement ? this.settings.errorPlacement.call(this, g, b(a)) : g.insertAfter(a),
                      h.is("label"))
                    ? h.attr("for", l)
                    : 0 === h.parents("label[for='" + this.escapeCssMeta(l) + "']").length &&
                      ((g = h.attr("id")), n ? n.match(new RegExp("\\b" + this.escapeCssMeta(g) + "\\b")) || (n += " " + g) : (n = g), b(a).attr("aria-describedby", n), (f = this.groups[a.name])) &&
                      ((k = this),
                      b.each(k.groups, function (a, c) {
                          c === f && b("[name='" + k.escapeCssMeta(a) + "']", k.currentForm).attr("aria-describedby", h.attr("id"));
                      }));
                !c && this.settings.success && (h.text(""), "string" === typeof this.settings.success ? h.addClass(this.settings.success) : this.settings.success(h, a));
                this.toShow = this.toShow.add(h);
            },
            errorsFor: function (a) {
                var c = this.escapeCssMeta(this.idOrName(a));
                a = b(a).attr("aria-describedby");
                c = "label[for='" + c + "'], label[for='" + c + "'] *";
                a && (c = c + ", #" + this.escapeCssMeta(a).replace(/\s+/g, ", #"));
                return this.errors().filter(c);
            },
            escapeCssMeta: function (a) {
                return a.replace(/([\\!"#$%&'()*+,./:;<=>?@\[\]^`{|}~])/g, "\\$1");
            },
            idOrName: function (a) {
                return this.groups[a.name] || (this.checkable(a) ? a.name : a.id || a.name);
            },
            validationTargetFor: function (a) {
                this.checkable(a) && (a = this.findByName(a.name));
                return b(a).not(this.settings.ignore)[0];
            },
            checkable: function (a) {
                return /radio|checkbox/i.test(a.type);
            },
            findByName: function (a) {
                return b(this.currentForm).find("[name='" + this.escapeCssMeta(a) + "']");
            },
            getLength: function (a, c) {
                switch (c.nodeName.toLowerCase()) {
                    case "select":
                        return b("option:selected", c).length;
                    case "input":
                        if (this.checkable(c)) return this.findByName(c.name).filter(":checked").length;
                }
                return a.length;
            },
            depend: function (a, b) {
                return this.dependTypes[typeof a] ? this.dependTypes[typeof a](a, b) : !0;
            },
            dependTypes: {
                boolean: function (a) {
                    return a;
                },
                string: function (a, c) {
                    return !!b(a, c.form).length;
                },
                function: function (a, b) {
                    return a(b);
                },
            },
            optional: function (a) {
                var c = this.elementValue(a);
                return !b.validator.methods.required.call(this, c, a) && "dependency-mismatch";
            },
            startRequest: function (a) {
                this.pending[a.name] || (this.pendingRequest++, b(a).addClass(this.settings.pendingClass), (this.pending[a.name] = !0));
            },
            stopRequest: function (a, c) {
                this.pendingRequest--;
                0 > this.pendingRequest && (this.pendingRequest = 0);
                delete this.pending[a.name];
                b(a).removeClass(this.settings.pendingClass);
                c && 0 === this.pendingRequest && this.formSubmitted && this.form()
                    ? (b(this.currentForm).submit(), (this.formSubmitted = !1))
                    : !c && 0 === this.pendingRequest && this.formSubmitted && (b(this.currentForm).triggerHandler("invalid-form", [this]), (this.formSubmitted = !1));
            },
            previousValue: function (a, c) {
                c = ("string" === typeof c && c) || "remote";
                return b.data(a, "previousValue") || b.data(a, "previousValue", { old: null, valid: !0, message: this.defaultMessage(a, { method: c }) });
            },
            destroy: function () {
                this.resetForm();
                b(this.currentForm).off(".validate").removeData("validator").find(".validate-equalTo-blur").off(".validate-equalTo").removeClass("validate-equalTo-blur");
            },
        },
        classRuleSettings: { required: { required: !0 }, email: { email: !0 }, url: { url: !0 }, date: { date: !0 }, dateISO: { dateISO: !0 }, number: { number: !0 }, digits: { digits: !0 }, creditcard: { creditcard: !0 } },
        addClassRules: function (a, c) {
            a.constructor === String ? (this.classRuleSettings[a] = c) : b.extend(this.classRuleSettings, a);
        },
        classRules: function (a) {
            var c = {};
            (a = b(a).attr("class")) &&
                b.each(a.split(" "), function () {
                    this in b.validator.classRuleSettings && b.extend(c, b.validator.classRuleSettings[this]);
                });
            return c;
        },
        normalizeAttributeRule: function (a, b, c, f) {
            /min|max|step/.test(c) && (null === b || /number|range|text/.test(b)) && ((f = Number(f)), isNaN(f) && (f = void 0));
            f || 0 === f ? (a[c] = f) : b === c && "range" !== b && (a[c] = !0);
        },
        attributeRules: function (a) {
            var c = {},
                g = b(a),
                f = a.getAttribute("type"),
                k,
                h;
            for (k in b.validator.methods) "required" === k ? ((h = a.getAttribute(k)), "" === h && (h = !0), (h = !!h)) : (h = g.attr(k)), this.normalizeAttributeRule(c, f, k, h);
            c.maxlength && /-1|2147483647|524288/.test(c.maxlength) && delete c.maxlength;
            return c;
        },
        dataRules: function (a) {
            var c = {},
                g = b(a);
            a = a.getAttribute("type");
            var f, k;
            for (f in b.validator.methods) (k = g.data("rule" + f.charAt(0).toUpperCase() + f.substring(1).toLowerCase())), this.normalizeAttributeRule(c, a, f, k);
            return c;
        },
        staticRules: function (a) {
            var c = {},
                g = b.data(a.form, "validator");
            g.settings.rules && (c = b.validator.normalizeRule(g.settings.rules[a.name]) || {});
            return c;
        },
        normalizeRules: function (a, c) {
            b.each(a, function (g, f) {
                if (!1 === f) delete a[g];
                else if (f.param || f.depends) {
                    var k = !0;
                    switch (typeof f.depends) {
                        case "string":
                            k = !!b(f.depends, c.form).length;
                            break;
                        case "function":
                            k = f.depends.call(c, c);
                    }
                    k ? (a[g] = void 0 !== f.param ? f.param : !0) : (b.data(c.form, "validator").resetElements(b(c)), delete a[g]);
                }
            });
            b.each(a, function (g, f) {
                a[g] = b.isFunction(f) && "normalizer" !== g ? f(c) : f;
            });
            b.each(["minlength", "maxlength"], function () {
                a[this] && (a[this] = Number(a[this]));
            });
            b.each(["rangelength", "range"], function () {
                var c;
                a[this] && (b.isArray(a[this]) ? (a[this] = [Number(a[this][0]), Number(a[this][1])]) : "string" === typeof a[this] && ((c = a[this].replace(/[\[\]]/g, "").split(/[\s,]+/)), (a[this] = [Number(c[0]), Number(c[1])])));
            });
            b.validator.autoCreateRanges &&
                (null != a.min && null != a.max && ((a.range = [a.min, a.max]), delete a.min, delete a.max),
                null != a.minlength && null != a.maxlength && ((a.rangelength = [a.minlength, a.maxlength]), delete a.minlength, delete a.maxlength));
            return a;
        },
        normalizeRule: function (a) {
            if ("string" === typeof a) {
                var c = {};
                b.each(a.split(/\s/), function () {
                    c[this] = !0;
                });
                a = c;
            }
            return a;
        },
        addMethod: function (a, c, g) {
            b.validator.methods[a] = c;
            b.validator.messages[a] = void 0 !== g ? g : b.validator.messages[a];
            3 > c.length && b.validator.addClassRules(a, b.validator.normalizeRule(a));
        },
        methods: {
            required: function (a, c, g) {
                return this.depend(g, c) ? ("select" === c.nodeName.toLowerCase() ? (a = b(c).val()) && 0 < a.length : this.checkable(c) ? 0 < this.getLength(a, c) : 0 < a.length) : "dependency-mismatch";
            },
            email: function (a, b) {
                return this.optional(b) || /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(a);
            },
            url: function (a, b) {
                return (
                    this.optional(b) ||
                    /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(
                        a
                    )
                );
            },
            date: function (a, b) {
                return this.optional(b) || !/Invalid|NaN/.test(new Date(a).toString());
            },
            dateISO: function (a, b) {
                return this.optional(b) || /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(a);
            },
            number: function (a, b) {
                return this.optional(b) || /^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(a);
            },
            digits: function (a, b) {
                return this.optional(b) || /^\d+$/.test(a);
            },
            minlength: function (a, c, g) {
                a = b.isArray(a) ? a.length : this.getLength(a, c);
                return this.optional(c) || a >= g;
            },
            maxlength: function (a, c, g) {
                a = b.isArray(a) ? a.length : this.getLength(a, c);
                return this.optional(c) || a <= g;
            },
            rangelength: function (a, c, g) {
                a = b.isArray(a) ? a.length : this.getLength(a, c);
                return this.optional(c) || (a >= g[0] && a <= g[1]);
            },
            min: function (a, b, c) {
                return this.optional(b) || a >= c;
            },
            max: function (a, b, c) {
                return this.optional(b) || a <= c;
            },
            range: function (a, b, c) {
                return this.optional(b) || (a >= c[0] && a <= c[1]);
            },
            step: function (a, c, g) {
                var f = b(c).attr("type"),
                    k = "Step attribute on input type " + f + " is not supported.",
                    h = ["text", "number", "range"],
                    l = new RegExp("\\b" + f + "\\b"),
                    n = function (a) {
                        return (a = ("" + a).match(/(?:\.(\d+))?$/)) ? (a[1] ? a[1].length : 0) : 0;
                    },
                    q = !0;
                if (f && !l.test(h.join())) throw Error(k);
                f = n(g);
                if (n(a) > f || 0 !== Math.round(a * Math.pow(10, f)) % Math.round(g * Math.pow(10, f))) q = !1;
                return this.optional(c) || q;
            },
            equalTo: function (a, c, g) {
                g = b(g);
                if (this.settings.onfocusout && g.not(".validate-equalTo-blur").length)
                    g.addClass("validate-equalTo-blur").on("blur.validate-equalTo", function () {
                        b(c).valid();
                    });
                return a === g.val();
            },
            remote: function (a, c, g, f) {
                if (this.optional(c)) return "dependency-mismatch";
                f = ("string" === typeof f && f) || "remote";
                var k = this.previousValue(c, f),
                    h,
                    l;
                this.settings.messages[c.name] || (this.settings.messages[c.name] = {});
                k.originalMessage = k.originalMessage || this.settings.messages[c.name][f];
                this.settings.messages[c.name][f] = k.message;
                g = ("string" === typeof g && { url: g }) || g;
                l = b.param(b.extend({ data: a }, g.data));
                if (k.old === l) return k.valid;
                k.old = l;
                h = this;
                this.startRequest(c);
                l = {};
                l[c.name] = a;
                b.ajax(
                    b.extend(
                        !0,
                        {
                            mode: "abort",
                            port: "validate" + c.name,
                            dataType: "json",
                            data: l,
                            context: h.currentForm,
                            success: function (b) {
                                var g = !0 === b || "true" === b,
                                    l;
                                h.settings.messages[c.name][f] = k.originalMessage;
                                g
                                    ? ((l = h.formSubmitted), h.resetInternals(), (h.toHide = h.errorsFor(c)), (h.formSubmitted = l), h.successList.push(c), (h.invalid[c.name] = !1), h.showErrors())
                                    : ((l = {}), (b = b || h.defaultMessage(c, { method: f, parameters: a })), (l[c.name] = k.message = b), (h.invalid[c.name] = !0), h.showErrors(l));
                                k.valid = g;
                                h.stopRequest(c, g);
                            },
                        },
                        g
                    )
                );
                return "pending";
            },
        },
    });
    var a = {},
        c;
    b.ajaxPrefilter
        ? b.ajaxPrefilter(function (b, c, g) {
              c = b.port;
              "abort" === b.mode && (a[c] && a[c].abort(), (a[c] = g));
          })
        : ((c = b.ajax),
          (b.ajax = function (d) {
              var e = ("port" in d ? d : b.ajaxSettings).port;
              return "abort" === ("mode" in d ? d : b.ajaxSettings).mode ? (a[e] && a[e].abort(), (a[e] = c.apply(this, arguments)), a[e]) : c.apply(this, arguments);
          }));
    return b;
});
(function (b) {
    "function" === typeof define && define.amd ? define(["jquery", "./jquery.validate"], b) : "object" === typeof module && module.exports ? (module.exports = b(require("jquery"))) : b(jQuery);
})(function (b) {
    (function () {
        function a(a) {
            return a
                .replace(/<.[^<>]*?>/g, " ")
                .replace(/&nbsp;|&#160;/gi, " ")
                .replace(/[.(),;:!?%#$'\"_+=\/\-\u201c\u201d\u2019]*/g, "");
        }
        b.validator.addMethod(
            "maxWords",
            function (b, d, e) {
                return this.optional(d) || a(b).match(/\b\w+\b/g).length <= e;
            },
            b.validator.format("Please enter {0} words or less.")
        );
        b.validator.addMethod(
            "minWords",
            function (b, d, e) {
                return this.optional(d) || a(b).match(/\b\w+\b/g).length >= e;
            },
            b.validator.format("Please enter at least {0} words.")
        );
        b.validator.addMethod(
            "rangeWords",
            function (b, d, e) {
                b = a(b);
                var g = /\b\w+\b/g;
                return this.optional(d) || (b.match(g).length >= e[0] && b.match(g).length <= e[1]);
            },
            b.validator.format("Please enter between {0} and {1} words.")
        );
    })();
    b.validator.addMethod(
        "accept",
        function (a, c, d) {
            a = "string" === typeof d ? d.replace(/\s/g, "") : "image/*";
            d = this.optional(c);
            var e;
            if (d) return d;
            if (
                "file" === b(c).attr("type") &&
                ((a = a
                    .replace(/[\-\[\]\/\{\}\(\)\+\?\.\\\^\$\|]/g, "\\$&")
                    .replace(/,/g, "|")
                    .replace("/*", "/.*")),
                c.files && c.files.length)
            )
                for (e = new RegExp(".?(" + a + ")$", "i"), a = 0; a < c.files.length; a++) if (((d = c.files[a]), !d.type.match(e))) return !1;
            return !0;
        },
        b.validator.format("Please enter a value with a valid mimetype.")
    );
    b.validator.addMethod(
        "alphanumeric",
        function (a, b) {
            return this.optional(b) || /^\w+$/i.test(a);
        },
        "Letters, numbers, and underscores only please"
    );
    b.validator.addMethod(
        "bankaccountNL",
        function (a, b) {
            if (this.optional(b)) return !0;
            if (!/^[0-9]{9}|([0-9]{2} ){3}[0-9]{3}$/.test(a)) return !1;
            var d = a.replace(/ /g, ""),
                e = 0,
                g = d.length,
                f,
                k,
                h;
            for (f = 0; f < g; f++) (k = g - f), (h = d.substring(f, f + 1)), (e += k * h);
            return 0 === e % 11;
        },
        "Please specify a valid bank account number"
    );
    b.validator.addMethod(
        "bankorgiroaccountNL",
        function (a, c) {
            return this.optional(c) || b.validator.methods.bankaccountNL.call(this, a, c) || b.validator.methods.giroaccountNL.call(this, a, c);
        },
        "Please specify a valid bank or giro account number"
    );
    b.validator.addMethod(
        "bic",
        function (a, b) {
            return this.optional(b) || /^([A-Z]{6}[A-Z2-9][A-NP-Z1-9])(X{3}|[A-WY-Z0-9][A-Z0-9]{2})?$/.test(a.toUpperCase());
        },
        "Please specify a valid BIC code"
    );
    b.validator.addMethod(
        "cifES",
        function (a) {
            var b = [],
                d,
                e,
                g,
                f;
            a = a.toUpperCase();
            if (!a.match("((^[A-Z]{1}[0-9]{7}[A-Z0-9]{1}$|^[T]{1}[A-Z0-9]{8}$)|^[0-9]{8}[A-Z]{1}$)")) return !1;
            for (d = 0; 9 > d; d++) b[d] = parseInt(a.charAt(d), 10);
            d = b[2] + b[4] + b[6];
            for (e = 1; 8 > e; e += 2) (g = (2 * b[e]).toString()), (f = g.charAt(1)), (d += parseInt(g.charAt(0), 10) + ("" === f ? 0 : parseInt(f, 10)));
            return /^[ABCDEFGHJNPQRSUVW]{1}/.test(a) ? ((d += ""), (d = 10 - parseInt(d.charAt(d.length - 1), 10)), (a += d), b[8].toString() === String.fromCharCode(64 + d) || b[8].toString() === a.charAt(a.length - 1)) : !1;
        },
        "Please specify a valid CIF number."
    );
    b.validator.addMethod(
        "cpfBR",
        function (a) {
            a = a.replace(/([~!@#$%^&*()_+=`{}\[\]\-|\\:;'<>,.\/? ])+/g, "");
            if (11 !== a.length) return !1;
            var b = 0,
                d,
                e,
                g,
                f;
            d = parseInt(a.substring(9, 10), 10);
            e = parseInt(a.substring(10, 11), 10);
            g = function (a, b) {
                var c = (10 * a) % 11;
                if (10 === c || 11 === c) c = 0;
                return c === b;
            };
            if (
                "" === a ||
                "00000000000" === a ||
                "11111111111" === a ||
                "22222222222" === a ||
                "33333333333" === a ||
                "44444444444" === a ||
                "55555555555" === a ||
                "66666666666" === a ||
                "77777777777" === a ||
                "88888888888" === a ||
                "99999999999" === a
            )
                return !1;
            for (f = 1; 9 >= f; f++) b += parseInt(a.substring(f - 1, f), 10) * (11 - f);
            if (g(b, d)) {
                b = 0;
                for (f = 1; 10 >= f; f++) b += parseInt(a.substring(f - 1, f), 10) * (12 - f);
                return g(b, e);
            }
            return !1;
        },
        "Please specify a valid CPF number"
    );
    b.validator.addMethod(
        "creditcard",
        function (a, b) {
            if (this.optional(b)) return "dependency-mismatch";
            if (/[^0-9 \-]+/.test(a)) return !1;
            var d = 0,
                e = 0,
                g = !1,
                f;
            a = a.replace(/\D/g, "");
            if (13 > a.length || 19 < a.length) return !1;
            for (f = a.length - 1; 0 <= f; f--) (e = a.charAt(f)), (e = parseInt(e, 10)), g && 9 < (e *= 2) && (e -= 9), (d += e), (g = !g);
            return 0 === d % 10;
        },
        "Please enter a valid credit card number."
    );
    b.validator.addMethod(
        "creditcardtypes",
        function (a, b, d) {
            if (/[^0-9\-]+/.test(a)) return !1;
            a = a.replace(/\D/g, "");
            b = 0;
            d.mastercard && (b |= 1);
            d.visa && (b |= 2);
            d.amex && (b |= 4);
            d.dinersclub && (b |= 8);
            d.enroute && (b |= 16);
            d.discover && (b |= 32);
            d.jcb && (b |= 64);
            d.unknown && (b |= 128);
            d.all && (b = 255);
            return (b & 1 && /^(5[12345])/.test(a)) || (b & 2 && /^(4)/.test(a))
                ? 16 === a.length
                : b & 4 && /^(3[47])/.test(a)
                ? 15 === a.length
                : b & 8 && /^(3(0[012345]|[68]))/.test(a)
                ? 14 === a.length
                : b & 16 && /^(2(014|149))/.test(a)
                ? 15 === a.length
                : (b & 32 && /^(6011)/.test(a)) || (b & 64 && /^(3)/.test(a))
                ? 16 === a.length
                : b & 64 && /^(2131|1800)/.test(a)
                ? 15 === a.length
                : b & 128
                ? !0
                : !1;
        },
        "Please enter a valid credit card number."
    );
    b.validator.addMethod(
        "currency",
        function (a, b, d) {
            var e = "string" === typeof d,
                g = e ? d : d[0];
            d = e ? !0 : d[1];
            g = g.replace(/,/g, "");
            g = "^[" + (d ? g + "]" : g + "]?") + "([1-9]{1}[0-9]{0,2}(\\,[0-9]{3})*(\\.[0-9]{0,2})?|[1-9]{1}[0-9]{0,}(\\.[0-9]{0,2})?|0(\\.[0-9]{0,2})?|(\\.[0-9]{1,2})?)$";
            g = new RegExp(g);
            return this.optional(b) || g.test(a);
        },
        "Please specify a valid currency"
    );
    b.validator.addMethod(
        "dateFA",
        function (a, b) {
            return this.optional(b) || /^[1-4]\d{3}\/((0?[1-6]\/((3[0-1])|([1-2][0-9])|(0?[1-9])))|((1[0-2]|(0?[7-9]))\/(30|([1-2][0-9])|(0?[1-9]))))$/.test(a);
        },
        b.validator.messages.date
    );
    b.validator.addMethod(
        "dateITA",
        function (a, b) {
            var d = !1,
                e,
                g,
                f;
            /^\d{1,2}\/\d{1,2}\/\d{4}$/.test(a)
                ? ((e = a.split("/")),
                  (d = parseInt(e[0], 10)),
                  (g = parseInt(e[1], 10)),
                  (e = parseInt(e[2], 10)),
                  (f = new Date(Date.UTC(e, g - 1, d, 12, 0, 0, 0))),
                  (d = f.getUTCFullYear() === e && f.getUTCMonth() === g - 1 && f.getUTCDate() === d ? !0 : !1))
                : (d = !1);
            return this.optional(b) || d;
        },
        b.validator.messages.date
    );
    b.validator.addMethod(
        "dateNL",
        function (a, b) {
            return this.optional(b) || /^(0?[1-9]|[12]\d|3[01])[\.\/\-](0?[1-9]|1[012])[\.\/\-]([12]\d)?(\d\d)$/.test(a);
        },
        b.validator.messages.date
    );
    b.validator.addMethod(
        "extension",
        function (a, b, d) {
            d = "string" === typeof d ? d.replace(/,/g, "|") : "png|jpe?g|gif";
            return this.optional(b) || a.match(new RegExp("\\.(" + d + ")$", "i"));
        },
        b.validator.format("Please enter a value with a valid extension.")
    );
    b.validator.addMethod(
        "giroaccountNL",
        function (a, b) {
            return this.optional(b) || /^[0-9]{1,7}$/.test(a);
        },
        "Please specify a valid giro account number"
    );
    b.validator.addMethod(
        "iban",
        function (a, b) {
            if (this.optional(b)) return !0;
            var d = a.replace(/ /g, "").toUpperCase(),
                e = "",
                g = !0,
                f = "",
                k = "",
                h,
                k = {
                    AL: "\\d{8}[\\dA-Z]{16}",
                    AD: "\\d{8}[\\dA-Z]{12}",
                    AT: "\\d{16}",
                    AZ: "[\\dA-Z]{4}\\d{20}",
                    BE: "\\d{12}",
                    BH: "[A-Z]{4}[\\dA-Z]{14}",
                    BA: "\\d{16}",
                    BR: "\\d{23}[A-Z][\\dA-Z]",
                    BG: "[A-Z]{4}\\d{6}[\\dA-Z]{8}",
                    CR: "\\d{17}",
                    HR: "\\d{17}",
                    CY: "\\d{8}[\\dA-Z]{16}",
                    CZ: "\\d{20}",
                    DK: "\\d{14}",
                    DO: "[A-Z]{4}\\d{20}",
                    EE: "\\d{16}",
                    FO: "\\d{14}",
                    FI: "\\d{14}",
                    FR: "\\d{10}[\\dA-Z]{11}\\d{2}",
                    GE: "[\\dA-Z]{2}\\d{16}",
                    DE: "\\d{18}",
                    GI: "[A-Z]{4}[\\dA-Z]{15}",
                    GR: "\\d{7}[\\dA-Z]{16}",
                    GL: "\\d{14}",
                    GT: "[\\dA-Z]{4}[\\dA-Z]{20}",
                    HU: "\\d{24}",
                    IS: "\\d{22}",
                    IE: "[\\dA-Z]{4}\\d{14}",
                    IL: "\\d{19}",
                    IT: "[A-Z]\\d{10}[\\dA-Z]{12}",
                    KZ: "\\d{3}[\\dA-Z]{13}",
                    KW: "[A-Z]{4}[\\dA-Z]{22}",
                    LV: "[A-Z]{4}[\\dA-Z]{13}",
                    LB: "\\d{4}[\\dA-Z]{20}",
                    LI: "\\d{5}[\\dA-Z]{12}",
                    LT: "\\d{16}",
                    LU: "\\d{3}[\\dA-Z]{13}",
                    MK: "\\d{3}[\\dA-Z]{10}\\d{2}",
                    MT: "[A-Z]{4}\\d{5}[\\dA-Z]{18}",
                    MR: "\\d{23}",
                    MU: "[A-Z]{4}\\d{19}[A-Z]{3}",
                    MC: "\\d{10}[\\dA-Z]{11}\\d{2}",
                    MD: "[\\dA-Z]{2}\\d{18}",
                    ME: "\\d{18}",
                    NL: "[A-Z]{4}\\d{10}",
                    NO: "\\d{11}",
                    PK: "[\\dA-Z]{4}\\d{16}",
                    PS: "[\\dA-Z]{4}\\d{21}",
                    PL: "\\d{24}",
                    PT: "\\d{21}",
                    RO: "[A-Z]{4}[\\dA-Z]{16}",
                    SM: "[A-Z]\\d{10}[\\dA-Z]{12}",
                    SA: "\\d{2}[\\dA-Z]{18}",
                    RS: "\\d{18}",
                    SK: "\\d{20}",
                    SI: "\\d{15}",
                    ES: "\\d{20}",
                    SE: "\\d{20}",
                    CH: "\\d{5}[\\dA-Z]{12}",
                    TN: "\\d{20}",
                    TR: "\\d{5}[\\dA-Z]{17}",
                    AE: "\\d{3}\\d{16}",
                    GB: "[A-Z]{4}\\d{14}",
                    VG: "[\\dA-Z]{4}\\d{16}",
                }[d.substring(0, 2)];
            if ("undefined" !== typeof k && ((k = new RegExp("^[A-Z]{2}\\d{2}" + k + "$", "")), !k.test(d))) return !1;
            d = d.substring(4, d.length) + d.substring(0, 4);
            for (h = 0; h < d.length; h++) (k = d.charAt(h)), "0" !== k && (g = !1), g || (e += "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".indexOf(k));
            for (g = 0; g < e.length; g++) (d = e.charAt(g)), (k = "" + f + "" + d), (f = k % 97);
            return 1 === f;
        },
        "Please specify a valid IBAN"
    );
    b.validator.addMethod(
        "integer",
        function (a, b) {
            return this.optional(b) || /^-?\d+$/.test(a);
        },
        "A positive or negative non-decimal number please"
    );
    b.validator.addMethod(
        "ipv4",
        function (a, b) {
            return this.optional(b) || /^(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)$/i.test(a);
        },
        "Please enter a valid IP v4 address."
    );
    b.validator.addMethod(
        "ipv6",
        function (a, b) {
            return (
                this.optional(b) ||
                /^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$/i.test(
                    a
                )
            );
        },
        "Please enter a valid IP v6 address."
    );
    b.validator.addMethod(
        "lettersonly",
        function (a, b) {
            return this.optional(b) || /^[a-z]+$/i.test(a);
        },
        "Letters only please"
    );
    b.validator.addMethod(
        "letterswithbasicpunc",
        function (a, b) {
            return this.optional(b) || /^[a-z\-.,()'"\s]+$/i.test(a);
        },
        "Letters or punctuation only please"
    );
    b.validator.addMethod(
        "mobileNL",
        function (a, b) {
            return this.optional(b) || /^((\+|00(\s|\s?\-\s?)?)31(\s|\s?\-\s?)?(\(0\)[\-\s]?)?|0)6((\s|\s?\-\s?)?[0-9]){8}$/.test(a);
        },
        "Please specify a valid mobile number"
    );
    b.validator.addMethod(
        "mobileUK",
        function (a, b) {
            a = a.replace(/\(|\)|\s+|-/g, "");
            return this.optional(b) || (9 < a.length && a.match(/^(?:(?:(?:00\s?|\+)44\s?|0)7(?:[1345789]\d{2}|624)\s?\d{3}\s?\d{3})$/));
        },
        "Please specify a valid mobile number"
    );
    b.validator.addMethod(
        "nieES",
        function (a) {
            a = a.toUpperCase();
            return a.match("((^[A-Z]{1}[0-9]{7}[A-Z0-9]{1}$|^[T]{1}[A-Z0-9]{8}$)|^[0-9]{8}[A-Z]{1}$)")
                ? /^[T]{1}/.test(a)
                    ? a[8] === /^[T]{1}[A-Z0-9]{8}$/.test(a)
                    : /^[XYZ]{1}/.test(a)
                    ? a[8] === "TRWAGMYFPDXBNJZSQVHLCKE".charAt(a.replace("X", "0").replace("Y", "1").replace("Z", "2").substring(0, 8) % 23)
                    : !1
                : !1;
        },
        "Please specify a valid NIE number."
    );
    b.validator.addMethod(
        "nifES",
        function (a) {
            a = a.toUpperCase();
            return a.match("((^[A-Z]{1}[0-9]{7}[A-Z0-9]{1}$|^[T]{1}[A-Z0-9]{8}$)|^[0-9]{8}[A-Z]{1}$)")
                ? /^[0-9]{8}[A-Z]{1}$/.test(a)
                    ? "TRWAGMYFPDXBNJZSQVHLCKE".charAt(a.substring(8, 0) % 23) === a.charAt(8)
                    : /^[KLM]{1}/.test(a)
                    ? a[8] === String.fromCharCode(64)
                    : !1
                : !1;
        },
        "Please specify a valid NIF number."
    );
    jQuery.validator.addMethod(
        "notEqualTo",
        function (a, c, d) {
            return this.optional(c) || !b.validator.methods.equalTo.call(this, a, c, d);
        },
        "Please enter a different value, values must not be the same."
    );
    b.validator.addMethod(
        "nowhitespace",
        function (a, b) {
            return this.optional(b) || /^\S+$/i.test(a);
        },
        "No white space please"
    );
    b.validator.addMethod(
        "pattern",
        function (a, b, d) {
            if (this.optional(b)) return !0;
            "string" === typeof d && (d = new RegExp("^(?:" + d + ")$"));
            return d.test(a);
        },
        "Invalid format."
    );
    b.validator.addMethod(
        "phoneNL",
        function (a, b) {
            return this.optional(b) || /^((\+|00(\s|\s?\-\s?)?)31(\s|\s?\-\s?)?(\(0\)[\-\s]?)?|0)[1-9]((\s|\s?\-\s?)?[0-9]){8}$/.test(a);
        },
        "Please specify a valid phone number."
    );
    b.validator.addMethod(
        "phoneUK",
        function (a, b) {
            a = a.replace(/\(|\)|\s+|-/g, "");
            return this.optional(b) || (9 < a.length && a.match(/^(?:(?:(?:00\s?|\+)44\s?)|(?:\(?0))(?:\d{2}\)?\s?\d{4}\s?\d{4}|\d{3}\)?\s?\d{3}\s?\d{3,4}|\d{4}\)?\s?(?:\d{5}|\d{3}\s?\d{3})|\d{5}\)?\s?\d{4,5})$/));
        },
        "Please specify a valid phone number"
    );
    b.validator.addMethod(
        "phoneUS",
        function (a, b) {
            a = a.replace(/\s+/g, "");
            return this.optional(b) || (9 < a.length && a.match(/^(\+?1-?)?(\([2-9]([02-9]\d|1[02-9])\)|[2-9]([02-9]\d|1[02-9]))-?[2-9]([02-9]\d|1[02-9])-?\d{4}$/));
        },
        "Please specify a valid phone number"
    );
    b.validator.addMethod(
        "phonesUK",
        function (a, b) {
            a = a.replace(/\(|\)|\s+|-/g, "");
            return this.optional(b) || (9 < a.length && a.match(/^(?:(?:(?:00\s?|\+)44\s?|0)(?:1\d{8,9}|[23]\d{9}|7(?:[1345789]\d{8}|624\d{6})))$/));
        },
        "Please specify a valid uk phone number"
    );
    b.validator.addMethod(
        "postalCodeCA",
        function (a, b) {
            return this.optional(b) || /^[ABCEGHJKLMNPRSTVXY]\d[ABCEGHJKLMNPRSTVWXYZ] *\d[ABCEGHJKLMNPRSTVWXYZ]\d$/i.test(a);
        },
        "Please specify a valid postal code"
    );
    b.validator.addMethod(
        "postalcodeBR",
        function (a, b) {
            return this.optional(b) || /^\d{2}.\d{3}-\d{3}?$|^\d{5}-?\d{3}?$/.test(a);
        },
        "Informe um CEP v\u00e1lido."
    );
    b.validator.addMethod(
        "postalcodeIT",
        function (a, b) {
            return this.optional(b) || /^\d{5}$/.test(a);
        },
        "Please specify a valid postal code"
    );
    b.validator.addMethod(
        "postalcodeNL",
        function (a, b) {
            return this.optional(b) || /^[1-9][0-9]{3}\s?[a-zA-Z]{2}$/.test(a);
        },
        "Please specify a valid postal code"
    );
    b.validator.addMethod(
        "postcodeUK",
        function (a, b) {
            return (
                this.optional(b) ||
                /^((([A-PR-UWYZ][0-9])|([A-PR-UWYZ][0-9][0-9])|([A-PR-UWYZ][A-HK-Y][0-9])|([A-PR-UWYZ][A-HK-Y][0-9][0-9])|([A-PR-UWYZ][0-9][A-HJKSTUW])|([A-PR-UWYZ][A-HK-Y][0-9][ABEHMNPRVWXY]))\s?([0-9][ABD-HJLNP-UW-Z]{2})|(GIR)\s?(0AA))$/i.test(
                    a
                )
            );
        },
        "Please specify a valid UK postcode"
    );
    b.validator.addMethod(
        "require_from_group",
        function (a, c, d) {
            a = b(d[1], c.form);
            var e = a.eq(0),
                g = e.data("valid_req_grp") ? e.data("valid_req_grp") : b.extend({}, this);
            d =
                a.filter(function () {
                    return g.elementValue(this);
                }).length >= d[0];
            e.data("valid_req_grp", g);
            b(c).data("being_validated") ||
                (a.data("being_validated", !0),
                a.each(function () {
                    g.element(this);
                }),
                a.data("being_validated", !1));
            return d;
        },
        b.validator.format("Please fill at least {0} of these fields.")
    );
    b.validator.addMethod(
        "skip_or_fill_minimum",
        function (a, c, d) {
            a = b(d[1], c.form);
            var e = a.eq(0),
                g = e.data("valid_skip") ? e.data("valid_skip") : b.extend({}, this),
                f = a.filter(function () {
                    return g.elementValue(this);
                }).length;
            d = 0 === f || f >= d[0];
            e.data("valid_skip", g);
            b(c).data("being_validated") ||
                (a.data("being_validated", !0),
                a.each(function () {
                    g.element(this);
                }),
                a.data("being_validated", !1));
            return d;
        },
        b.validator.format("Please either skip these fields or fill at least {0} of them.")
    );
    b.validator.addMethod(
        "stateUS",
        function (a, b, d) {
            var e = "undefined" === typeof d,
                g = e || "undefined" === typeof d.caseSensitive ? !1 : d.caseSensitive,
                f = e || "undefined" === typeof d.includeTerritories ? !1 : d.includeTerritories;
            d = e || "undefined" === typeof d.includeMilitary ? !1 : d.includeMilitary;
            f =
                f || d
                    ? f && d
                        ? "^(A[AEKLPRSZ]|C[AOT]|D[CE]|FL|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEINOPST]|N[CDEHJMVY]|O[HKR]|P[AR]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$"
                        : f
                        ? "^(A[KLRSZ]|C[AOT]|D[CE]|FL|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEINOPST]|N[CDEHJMVY]|O[HKR]|P[AR]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$"
                        : "^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$"
                    : "^(A[KLRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$";
            f = g ? new RegExp(f) : new RegExp(f, "i");
            return this.optional(b) || f.test(a);
        },
        "Please specify a valid state"
    );
    b.validator.addMethod(
        "strippedminlength",
        function (a, c, d) {
            return b(a).text().length >= d;
        },
        b.validator.format("Please enter at least {0} characters")
    );
    b.validator.addMethod(
        "time",
        function (a, b) {
            return this.optional(b) || /^([01]\d|2[0-3]|[0-9])(:[0-5]\d){1,2}$/.test(a);
        },
        "Please enter a valid time, between 00:00 and 23:59"
    );
    b.validator.addMethod(
        "time12h",
        function (a, b) {
            return this.optional(b) || /^((0?[1-9]|1[012])(:[0-5]\d){1,2}(\ ?[AP]M))$/i.test(a);
        },
        "Please enter a valid time in 12-hour am/pm format"
    );
    b.validator.addMethod(
        "url2",
        function (a, b) {
            return (
                this.optional(b) ||
                /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)*(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(
                    a
                )
            );
        },
        b.validator.messages.url
    );
    b.validator.addMethod(
        "vinUS",
        function (a) {
            if (17 !== a.length) return !1;
            var b = "ABCDEFGHJKLMNPRSTUVWXYZ".split(""),
                d = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 7, 9, 2, 3, 4, 5, 6, 7, 8, 9],
                e = [8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2],
                g = 0,
                f,
                k,
                h,
                l,
                n;
            for (f = 0; 17 > f; f++) {
                l = e[f];
                h = a.slice(f, f + 1);
                8 === f && (n = h);
                if (isNaN(h))
                    for (k = 0; k < b.length; k++) {
                        if (h.toUpperCase() === b[k]) {
                            h = d[k];
                            h *= l;
                            isNaN(n) && 8 === k && (n = b[k]);
                            break;
                        }
                    }
                else h *= l;
                g += h;
            }
            a = g % 11;
            10 === a && (a = "X");
            return a === n ? !0 : !1;
        },
        "The specified vehicle identification number (VIN) is invalid."
    );
    b.validator.addMethod(
        "zipcodeUS",
        function (a, b) {
            return this.optional(b) || /^\d{5}(-\d{4})?$/.test(a);
        },
        "The specified US ZIP Code is invalid"
    );
    b.validator.addMethod(
        "ziprange",
        function (a, b) {
            return this.optional(b) || /^90[2-5]\d\{2\}-\d{4}$/.test(a);
        },
        "Your ZIP-code must be in the range 902xx-xxxx to 905xx-xxxx"
    );
});
(function (b) {
    "function" === typeof define && define.amd ? define(["jquery"], b) : "object" === typeof exports ? b(require("jquery")) : b(jQuery);
})(function (b) {
    var a = (function () {
            if (b && b.fn && b.fn.select2 && b.fn.select2.amd) var a = b.fn.select2.amd;
            (function () {
                if (!a || !a.requirejs) {
                    a ? (c = a) : (a = {});
                    var b, c, f;
                    (function (a) {
                        function d(a, b) {
                            var c,
                                e,
                                f,
                                g,
                                h,
                                l,
                                k,
                                n,
                                q,
                                r = b && b.split("/"),
                                x = z.map,
                                p = (x && x["*"]) || {};
                            if (a && "." === a.charAt(0))
                                if (b) {
                                    a = a.split("/");
                                    h = a.length - 1;
                                    z.nodeIdCompat && J.test(a[h]) && (a[h] = a[h].replace(J, ""));
                                    a = r.slice(0, r.length - 1).concat(a);
                                    for (h = 0; h < a.length; h += 1)
                                        if (((c = a[h]), "." === c)) a.splice(h, 1), --h;
                                        else if (".." === c)
                                            if (1 !== h || (".." !== a[2] && ".." !== a[0])) 0 < h && (a.splice(h - 1, 2), (h -= 2));
                                            else break;
                                    a = a.join("/");
                                } else 0 === a.indexOf("./") && (a = a.substring(2));
                            if ((r || p) && x) {
                                c = a.split("/");
                                for (h = c.length; 0 < h; --h) {
                                    e = c.slice(0, h).join("/");
                                    if (r)
                                        for (q = r.length; 0 < q; --q)
                                            if ((f = x[r.slice(0, q).join("/")]))
                                                if ((f = f[e])) {
                                                    g = f;
                                                    l = h;
                                                    break;
                                                }
                                    if (g) break;
                                    !k && p && p[e] && ((k = p[e]), (n = h));
                                }
                                !g && k && ((g = k), (l = n));
                                g && (c.splice(0, l, g), (a = c.join("/")));
                            }
                            return a;
                        }
                        function l(b, c) {
                            return function () {
                                var d = H.call(arguments, 0);
                                "string" !== typeof d[0] && 1 === d.length && d.push(null);
                                return y.apply(a, d.concat([b, c]));
                            };
                        }
                        function n(a) {
                            return function (b) {
                                return d(b, a);
                            };
                        }
                        function q(a) {
                            return function (b) {
                                r[a] = b;
                            };
                        }
                        function u(b) {
                            if (G.call(x, b)) {
                                var c = x[b];
                                delete x[b];
                                B[b] = !0;
                                t.apply(a, c);
                            }
                            if (!G.call(r, b) && !G.call(B, b)) throw Error("No " + b);
                            return r[b];
                        }
                        function v(a) {
                            var b,
                                c = a ? a.indexOf("!") : -1;
                            -1 < c && ((b = a.substring(0, c)), (a = a.substring(c + 1, a.length)));
                            return [b, a];
                        }
                        function w(a) {
                            return function () {
                                return (z && z.config && z.config[a]) || {};
                            };
                        }
                        var t,
                            y,
                            p,
                            C,
                            r = {},
                            x = {},
                            z = {},
                            B = {},
                            G = Object.prototype.hasOwnProperty,
                            H = [].slice,
                            J = /\.js$/;
                        p = function (a, b) {
                            var c,
                                e = v(a),
                                f = e[0];
                            a = e[1];
                            f && ((f = d(f, b)), (c = u(f)));
                            f ? (a = c && c.normalize ? c.normalize(a, n(b)) : d(a, b)) : ((a = d(a, b)), (e = v(a)), (f = e[0]), (a = e[1]), f && (c = u(f)));
                            return { f: f ? f + "!" + a : a, n: a, pr: f, p: c };
                        };
                        C = {
                            require: function (a) {
                                return l(a);
                            },
                            exports: function (a) {
                                var b = r[a];
                                return "undefined" !== typeof b ? b : (r[a] = {});
                            },
                            module: function (a) {
                                return { id: a, uri: "", exports: r[a], config: w(a) };
                            },
                        };
                        t = function (b, c, d, e) {
                            var f,
                                g,
                                h,
                                n,
                                z = [];
                            g = typeof d;
                            var v;
                            e = e || b;
                            if ("undefined" === g || "function" === g) {
                                c = !c.length && d.length ? ["require", "exports", "module"] : c;
                                for (n = 0; n < c.length; n += 1)
                                    if (((h = p(c[n], e)), (g = h.f), "require" === g)) z[n] = C.require(b);
                                    else if ("exports" === g) (z[n] = C.exports(b)), (v = !0);
                                    else if ("module" === g) f = z[n] = C.module(b);
                                    else if (G.call(r, g) || G.call(x, g) || G.call(B, g)) z[n] = u(g);
                                    else if (h.p) h.p.load(h.n, l(e, !0), q(g), {}), (z[n] = r[g]);
                                    else throw Error(b + " missing " + g);
                                c = d ? d.apply(r[b], z) : void 0;
                                b && (f && f.exports !== a && f.exports !== r[b] ? (r[b] = f.exports) : (c === a && v) || (r[b] = c));
                            } else b && (r[b] = d);
                        };
                        b = c = y = function (b, c, d, e, f) {
                            if ("string" === typeof b) return C[b] ? C[b](c) : u(p(b, c).f);
                            if (!b.splice) {
                                z = b;
                                z.deps && y(z.deps, z.callback);
                                if (!c) return;
                                c.splice ? ((b = c), (c = d), (d = null)) : (b = a);
                            }
                            c = c || function () {};
                            "function" === typeof d && ((d = e), (e = f));
                            e
                                ? t(a, b, c, d)
                                : setTimeout(function () {
                                      t(a, b, c, d);
                                  }, 4);
                            return y;
                        };
                        y.config = function (a) {
                            return y(a);
                        };
                        b._defined = r;
                        f = function (a, b, c) {
                            if ("string" !== typeof a) throw Error("See almond README: incorrect module build, no module name");
                            b.splice || ((c = b), (b = []));
                            G.call(r, a) || G.call(x, a) || (x[a] = [a, b, c]);
                        };
                        f.amd = { jQuery: !0 };
                    })();
                    a.requirejs = b;
                    a.require = c;
                    a.define = f;
                }
            })();
            a.define("almond", function () {});
            a.define("jquery", [], function () {
                var a = b || $;
                null == a && console && console.error && console.error("Select2: An instance of jQuery or a jQuery-compatible library was not found. Make sure that you are including jQuery before Select2 on your web page.");
                return a;
            });
            a.define("select2/utils", ["jquery"], function (a) {
                function b(a) {
                    a = a.prototype;
                    var c = [],
                        d;
                    for (d in a) "function" === typeof a[d] && "constructor" !== d && c.push(d);
                    return c;
                }
                var c = {
                        Extend: function (a, b) {
                            function c() {
                                this.constructor = a;
                            }
                            var d = {}.hasOwnProperty,
                                e;
                            for (e in b) d.call(b, e) && (a[e] = b[e]);
                            c.prototype = b.prototype;
                            a.prototype = new c();
                            a.__super__ = b.prototype;
                            return a;
                        },
                        Decorate: function (a, c) {
                            function d() {
                                var b = Array.prototype.unshift,
                                    e = a.prototype.constructor;
                                0 < c.prototype.constructor.length && (b.call(arguments, a.prototype.constructor), (e = c.prototype.constructor));
                                e.apply(this, arguments);
                            }
                            var e = b(c),
                                f = b(a);
                            c.displayName = a.displayName;
                            d.prototype = new (function () {
                                this.constructor = d;
                            })();
                            for (var k = 0; k < f.length; k++) {
                                var w = f[k];
                                d.prototype[w] = a.prototype[w];
                            }
                            f = function (a) {
                                var b = function () {};
                                a in d.prototype && (b = d.prototype[a]);
                                var e = c.prototype[a];
                                return function () {
                                    Array.prototype.unshift.call(arguments, b);
                                    return e.apply(this, arguments);
                                };
                            };
                            for (k = 0; k < e.length; k++) (w = e[k]), (d.prototype[w] = f(w));
                            return d;
                        },
                    },
                    d = function () {
                        this.listeners = {};
                    };
                d.prototype.on = function (a, b) {
                    this.listeners = this.listeners || {};
                    a in this.listeners ? this.listeners[a].push(b) : (this.listeners[a] = [b]);
                };
                d.prototype.trigger = function (a) {
                    var b = Array.prototype.slice,
                        c = b.call(arguments, 1);
                    this.listeners = this.listeners || {};
                    null == c && (c = []);
                    0 === c.length && c.push({});
                    c[0]._type = a;
                    a in this.listeners && this.invoke(this.listeners[a], b.call(arguments, 1));
                    "*" in this.listeners && this.invoke(this.listeners["*"], arguments);
                };
                d.prototype.invoke = function (a, b) {
                    for (var c = 0, d = a.length; c < d; c++) a[c].apply(this, b);
                };
                c.Observable = d;
                c.generateChars = function (a) {
                    for (var b = "", c = 0; c < a; c++) b += Math.floor(36 * Math.random()).toString(36);
                    return b;
                };
                c.bind = function (a, b) {
                    return function () {
                        a.apply(b, arguments);
                    };
                };
                c._convertData = function (a) {
                    for (var b in a) {
                        var c = b.split("-"),
                            d = a;
                        if (1 !== c.length) {
                            for (var e = 0; e < c.length; e++) {
                                var f = c[e],
                                    f = f.substring(0, 1).toLowerCase() + f.substring(1);
                                f in d || (d[f] = {});
                                e == c.length - 1 && (d[f] = a[b]);
                                d = d[f];
                            }
                            delete a[b];
                        }
                    }
                    return a;
                };
                c.hasScroll = function (b, c) {
                    var d = a(c),
                        f = c.style.overflowX,
                        g = c.style.overflowY;
                    return f !== g || ("hidden" !== g && "visible" !== g) ? ("scroll" === f || "scroll" === g ? !0 : d.innerHeight() < c.scrollHeight || d.innerWidth() < c.scrollWidth) : !1;
                };
                c.escapeMarkup = function (a) {
                    var b = { "\\": "&#92;", "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;", "/": "&#47;" };
                    return "string" !== typeof a
                        ? a
                        : String(a).replace(/[&<>"'\/\\]/g, function (a) {
                              return b[a];
                          });
                };
                c.appendMany = function (b, c) {
                    if ("1.7" === a.fn.jquery.substr(0, 3)) {
                        var d = a();
                        a.map(c, function (a) {
                            d = d.add(a);
                        });
                        c = d;
                    }
                    b.append(c);
                };
                return c;
            });
            a.define("select2/results", ["jquery", "./utils"], function (a, b) {
                function c(a, b, d) {
                    this.$element = a;
                    this.data = d;
                    this.options = b;
                    c.__super__.constructor.call(this);
                }
                b.Extend(c, b.Observable);
                c.prototype.render = function () {
                    var b = a('<ul class="select2-results__options" role="tree"></ul>');
                    this.options.get("multiple") && b.attr("aria-multiselectable", "true");
                    return (this.$results = b);
                };
                c.prototype.clear = function () {
                    this.$results.empty();
                };
                c.prototype.displayMessage = function (b) {
                    var c = this.options.get("escapeMarkup");
                    this.clear();
                    this.hideLoading();
                    var d = a('<li role="treeitem" aria-live="assertive" class="select2-results__option"></li>'),
                        f = this.options.get("translations").get(b.message);
                    d.append(c(f(b.args)));
                    d[0].className += " select2-results__message";
                    this.$results.append(d);
                };
                c.prototype.hideMessages = function () {
                    this.$results.find(".select2-results__message").remove();
                };
                c.prototype.append = function (a) {
                    this.hideLoading();
                    var b = [];
                    if (null == a.results || 0 === a.results.length) 0 === this.$results.children().length && this.trigger("results:message", { message: "noResults" });
                    else {
                        a.results = this.sort(a.results);
                        for (var c = 0; c < a.results.length; c++) {
                            var d = this.option(a.results[c]);
                            b.push(d);
                        }
                        this.$results.append(b);
                    }
                };
                c.prototype.position = function (a, b) {
                    b.find(".select2-results").append(a);
                };
                c.prototype.sort = function (a) {
                    return this.options.get("sorter")(a);
                };
                c.prototype.highlightFirstItem = function () {
                    var a = this.$results.find(".select2-results__option[aria-selected]"),
                        b = a.filter("[aria-selected=true]");
                    0 < b.length ? b.first().trigger("mouseenter") : a.first().trigger("mouseenter");
                    this.ensureHighlightVisible();
                };
                c.prototype.setClasses = function () {
                    var b = this;
                    this.data.current(function (c) {
                        var d = a.map(c, function (a) {
                            return a.id.toString();
                        });
                        b.$results.find(".select2-results__option[aria-selected]").each(function () {
                            var b = a(this),
                                c = a.data(this, "data"),
                                f = "" + c.id;
                            (null != c.element && c.element.selected) || (null == c.element && -1 < a.inArray(f, d)) ? b.attr("aria-selected", "true") : b.attr("aria-selected", "false");
                        });
                    });
                };
                c.prototype.showLoading = function (a) {
                    this.hideLoading();
                    a = { disabled: !0, loading: !0, text: this.options.get("translations").get("searching")(a) };
                    a = this.option(a);
                    a.className += " loading-results";
                    this.$results.prepend(a);
                };
                c.prototype.hideLoading = function () {
                    this.$results.find(".loading-results").remove();
                };
                c.prototype.option = function (b) {
                    var c = document.createElement("li");
                    c.className = "select2-results__option";
                    var d = { role: "treeitem", "aria-selected": "false" };
                    b.disabled && (delete d["aria-selected"], (d["aria-disabled"] = "true"));
                    null == b.id && delete d["aria-selected"];
                    null != b._resultId && (c.id = b._resultId);
                    b.title && (c.title = b.title);
                    b.children && ((d.role = "group"), (d["aria-label"] = b.text), delete d["aria-selected"]);
                    for (var f in d) c.setAttribute(f, d[f]);
                    if (b.children) {
                        d = a(c);
                        f = document.createElement("strong");
                        f.className = "select2-results__group";
                        a(f);
                        this.template(b, f);
                        for (var g = [], u = 0; u < b.children.length; u++) {
                            var v = this.option(b.children[u]);
                            g.push(v);
                        }
                        u = a("<ul></ul>", { class: "select2-results__options select2-results__options--nested" });
                        u.append(g);
                        d.append(f);
                        d.append(u);
                    } else this.template(b, c);
                    a.data(c, "data", b);
                    return c;
                };
                c.prototype.bind = function (b, c) {
                    var d = this;
                    this.$results.attr("id", b.id + "-results");
                    b.on("results:all", function (a) {
                        d.clear();
                        d.append(a.data);
                        b.isOpen() && (d.setClasses(), d.highlightFirstItem());
                    });
                    b.on("results:append", function (a) {
                        d.append(a.data);
                        b.isOpen() && d.setClasses();
                    });
                    b.on("query", function (a) {
                        d.hideMessages();
                        d.showLoading(a);
                    });
                    b.on("select", function () {
                        b.isOpen() && (d.setClasses(), d.highlightFirstItem());
                    });
                    b.on("unselect", function () {
                        b.isOpen() && (d.setClasses(), d.highlightFirstItem());
                    });
                    b.on("open", function () {
                        d.$results.attr("aria-expanded", "true");
                        d.$results.attr("aria-hidden", "false");
                        d.setClasses();
                        d.ensureHighlightVisible();
                    });
                    b.on("close", function () {
                        d.$results.attr("aria-expanded", "false");
                        d.$results.attr("aria-hidden", "true");
                        d.$results.removeAttr("aria-activedescendant");
                    });
                    b.on("results:toggle", function () {
                        var a = d.getHighlightedResults();
                        0 !== a.length && a.trigger("mouseup");
                    });
                    b.on("results:select", function () {
                        var a = d.getHighlightedResults();
                        if (0 !== a.length) {
                            var b = a.data("data");
                            "true" == a.attr("aria-selected") ? d.trigger("close", {}) : d.trigger("select", { data: b });
                        }
                    });
                    b.on("results:previous", function () {
                        var a = d.getHighlightedResults(),
                            b = d.$results.find("[aria-selected]"),
                            c = b.index(a);
                        if (0 !== c) {
                            --c;
                            0 === a.length && (c = 0);
                            b = b.eq(c);
                            b.trigger("mouseenter");
                            var a = d.$results.offset().top,
                                b = b.offset().top,
                                e = d.$results.scrollTop() + (b - a);
                            0 === c ? d.$results.scrollTop(0) : 0 > b - a && d.$results.scrollTop(e);
                        }
                    });
                    b.on("results:next", function () {
                        var a = d.getHighlightedResults(),
                            b = d.$results.find("[aria-selected]"),
                            a = b.index(a) + 1;
                        if (!(a >= b.length)) {
                            var c = b.eq(a);
                            c.trigger("mouseenter");
                            var b = d.$results.offset().top + d.$results.outerHeight(!1),
                                c = c.offset().top + c.outerHeight(!1),
                                e = d.$results.scrollTop() + c - b;
                            0 === a ? d.$results.scrollTop(0) : c > b && d.$results.scrollTop(e);
                        }
                    });
                    b.on("results:focus", function (a) {
                        a.element.addClass("select2-results__option--highlighted");
                    });
                    b.on("results:message", function (a) {
                        d.displayMessage(a);
                    });
                    if (a.fn.mousewheel)
                        this.$results.on("mousewheel", function (a) {
                            var b = d.$results.scrollTop(),
                                c = d.$results.get(0).scrollHeight - b + a.deltaY,
                                b = 0 < a.deltaY && 0 >= b - a.deltaY,
                                c = 0 > a.deltaY && c <= d.$results.height();
                            b ? (d.$results.scrollTop(0), a.preventDefault(), a.stopPropagation()) : c && (d.$results.scrollTop(d.$results.get(0).scrollHeight - d.$results.height()), a.preventDefault(), a.stopPropagation());
                        });
                    this.$results.on("mouseup", ".select2-results__option[aria-selected]", function (b) {
                        var c = a(this),
                            f = c.data("data");
                        "true" === c.attr("aria-selected") ? (d.options.get("multiple") ? d.trigger("unselect", { originalEvent: b, data: f }) : d.trigger("close", {})) : d.trigger("select", { originalEvent: b, data: f });
                    });
                    this.$results.on("mouseenter", ".select2-results__option[aria-selected]", function (b) {
                        b = a(this).data("data");
                        d.getHighlightedResults().removeClass("select2-results__option--highlighted");
                        d.trigger("results:focus", { data: b, element: a(this) });
                    });
                };
                c.prototype.getHighlightedResults = function () {
                    return this.$results.find(".select2-results__option--highlighted");
                };
                c.prototype.destroy = function () {
                    this.$results.remove();
                };
                c.prototype.ensureHighlightVisible = function () {
                    var a = this.getHighlightedResults();
                    if (0 !== a.length) {
                        var b = this.$results.find("[aria-selected]").index(a),
                            c = this.$results.offset().top,
                            d = a.offset().top,
                            e = this.$results.scrollTop() + (d - c),
                            c = d - c,
                            e = e - 2 * a.outerHeight(!1);
                        2 >= b ? this.$results.scrollTop(0) : (c > this.$results.outerHeight() || 0 > c) && this.$results.scrollTop(e);
                    }
                };
                c.prototype.template = function (b, c) {
                    var d = this.options.get("templateResult"),
                        f = this.options.get("escapeMarkup"),
                        d = d(b, c);
                    null == d ? (c.style.display = "none") : "string" === typeof d ? (c.innerHTML = f(d)) : a(c).append(d);
                };
                return c;
            });
            a.define("select2/keys", [], function () {
                return { BACKSPACE: 8, TAB: 9, ENTER: 13, SHIFT: 16, CTRL: 17, ALT: 18, ESC: 27, SPACE: 32, PAGE_UP: 33, PAGE_DOWN: 34, END: 35, HOME: 36, LEFT: 37, UP: 38, RIGHT: 39, DOWN: 40, DELETE: 46 };
            });
            a.define("select2/selection/base", ["jquery", "../utils", "../keys"], function (a, b, c) {
                function d(a, b) {
                    this.$element = a;
                    this.options = b;
                    d.__super__.constructor.call(this);
                }
                b.Extend(d, b.Observable);
                d.prototype.render = function () {
                    var b = a('<span class="select2-selection" role="combobox"  aria-haspopup="true" aria-expanded="false"></span>');
                    this._tabindex = 0;
                    null != this.$element.data("old-tabindex") ? (this._tabindex = this.$element.data("old-tabindex")) : null != this.$element.attr("tabindex") && (this._tabindex = this.$element.attr("tabindex"));
                    b.attr("title", this.$element.attr("title"));
                    b.attr("tabindex", this._tabindex);
                    return (this.$selection = b);
                };
                d.prototype.bind = function (a, b) {
                    var d = this,
                        e = a.id + "-results";
                    this.container = a;
                    this.$selection.on("focus", function (a) {
                        d.trigger("focus", a);
                    });
                    this.$selection.on("blur", function (a) {
                        d._handleBlur(a);
                    });
                    this.$selection.on("keydown", function (a) {
                        d.trigger("keypress", a);
                        a.which === c.SPACE && a.preventDefault();
                    });
                    a.on("results:focus", function (a) {
                        d.$selection.attr("aria-activedescendant", a.data._resultId);
                    });
                    a.on("selection:update", function (a) {
                        d.update(a.data);
                    });
                    a.on("open", function () {
                        d.$selection.attr("aria-expanded", "true");
                        d.$selection.attr("aria-owns", e);
                        d._attachCloseHandler(a);
                    });
                    a.on("close", function () {
                        d.$selection.attr("aria-expanded", "false");
                        d.$selection.removeAttr("aria-activedescendant");
                        d.$selection.removeAttr("aria-owns");
                        d.$selection.focus();
                        d._detachCloseHandler(a);
                    });
                    a.on("enable", function () {
                        d.$selection.attr("tabindex", d._tabindex);
                    });
                    a.on("disable", function () {
                        d.$selection.attr("tabindex", "-1");
                    });
                };
                d.prototype._handleBlur = function (b) {
                    var c = this;
                    window.setTimeout(function () {
                        document.activeElement == c.$selection[0] || a.contains(c.$selection[0], document.activeElement) || c.trigger("blur", b);
                    }, 1);
                };
                d.prototype._attachCloseHandler = function (b) {
                    a(document.body).on("mousedown.select2." + b.id, function (b) {
                        var c = a(b.target).closest(".select2");
                        a(".select2.select2-container--open").each(function () {
                            var b = a(this);
                            this != c[0] && b.data("element").select2("close");
                        });
                    });
                };
                d.prototype._detachCloseHandler = function (b) {
                    a(document.body).off("mousedown.select2." + b.id);
                };
                d.prototype.position = function (a, b) {
                    b.find(".selection").append(a);
                };
                d.prototype.destroy = function () {
                    this._detachCloseHandler(this.container);
                };
                d.prototype.update = function (a) {
                    throw Error("The `update` method must be defined in child classes.");
                };
                return d;
            });
            a.define("select2/selection/single", ["jquery", "./base", "../utils", "../keys"], function (a, b, c, d) {
                function h() {
                    h.__super__.constructor.apply(this, arguments);
                }
                c.Extend(h, b);
                h.prototype.render = function () {
                    var a = h.__super__.render.call(this);
                    a.addClass("select2-selection--single");
                    a.html('<span class="select2-selection__rendered"></span><span class="select2-selection__arrow" role="presentation"><b role="presentation"></b></span>');
                    return a;
                };
                h.prototype.bind = function (a, b) {
                    var c = this;
                    h.__super__.bind.apply(this, arguments);
                    var d = a.id + "-container";
                    this.$selection.find(".select2-selection__rendered").attr("id", d);
                    this.$selection.attr("aria-labelledby", d);
                    this.$selection.on("mousedown", function (a) {
                        1 === a.which && c.trigger("toggle", { originalEvent: a });
                    });
                    this.$selection.on("focus", function (a) {});
                    this.$selection.on("blur", function (a) {});
                    a.on("focus", function (b) {
                        a.isOpen() || c.$selection.focus();
                    });
                    a.on("selection:update", function (a) {
                        c.update(a.data);
                    });
                };
                h.prototype.clear = function () {
                    this.$selection.find(".select2-selection__rendered").empty();
                };
                h.prototype.display = function (a, b) {
                    var c = this.options.get("templateSelection");
                    return this.options.get("escapeMarkup")(c(a, b));
                };
                h.prototype.selectionContainer = function () {
                    return a("<span></span>");
                };
                h.prototype.update = function (a) {
                    if (0 === a.length) this.clear();
                    else {
                        a = a[0];
                        var b = this.$selection.find(".select2-selection__rendered"),
                            c = this.display(a, b);
                        b.empty().append(c);
                        b.prop("title", a.title || a.text);
                    }
                };
                return h;
            });
            a.define("select2/selection/multiple", ["jquery", "./base", "../utils"], function (a, b, c) {
                function d(a, b) {
                    d.__super__.constructor.apply(this, arguments);
                }
                c.Extend(d, b);
                d.prototype.render = function () {
                    var a = d.__super__.render.call(this);
                    a.addClass("select2-selection--multiple");
                    a.html('<ul class="select2-selection__rendered"></ul>');
                    return a;
                };
                d.prototype.bind = function (b, c) {
                    var f = this;
                    d.__super__.bind.apply(this, arguments);
                    this.$selection.on("click", function (a) {
                        f.trigger("toggle", { originalEvent: a });
                    });
                    this.$selection.on("click", ".select2-selection__choice__remove", function (b) {
                        if (!f.options.get("disabled")) {
                            var c = a(this).parent().data("data");
                            f.trigger("unselect", { originalEvent: b, data: c });
                        }
                    });
                };
                d.prototype.clear = function () {
                    this.$selection.find(".select2-selection__rendered").empty();
                };
                d.prototype.display = function (a, b) {
                    var c = this.options.get("templateSelection");
                    return this.options.get("escapeMarkup")(c(a, b));
                };
                d.prototype.selectionContainer = function () {
                    return a('<li class="select2-selection__choice"><span class="select2-selection__choice__remove" role="presentation">&times;</span></li>');
                };
                d.prototype.update = function (a) {
                    this.clear();
                    if (0 !== a.length) {
                        for (var b = [], d = 0; d < a.length; d++) {
                            var e = a[d],
                                g = this.selectionContainer(),
                                k = this.display(e, g);
                            g.append(k);
                            g.prop("title", e.title || e.text);
                            g.data("data", e);
                            b.push(g);
                        }
                        a = this.$selection.find(".select2-selection__rendered");
                        c.appendMany(a, b);
                    }
                };
                return d;
            });
            a.define("select2/selection/placeholder", ["../utils"], function (a) {
                function b(a, c, d) {
                    this.placeholder = this.normalizePlaceholder(d.get("placeholder"));
                    a.call(this, c, d);
                }
                b.prototype.normalizePlaceholder = function (a, b) {
                    "string" === typeof b && (b = { id: "", text: b });
                    return b;
                };
                b.prototype.createPlaceholder = function (a, b) {
                    var c = this.selectionContainer();
                    c.html(this.display(b));
                    c.addClass("select2-selection__placeholder").removeClass("select2-selection__choice");
                    return c;
                };
                b.prototype.update = function (a, b) {
                    var c = 1 == b.length && b[0].id != this.placeholder.id;
                    if (1 < b.length || c) return a.call(this, b);
                    this.clear();
                    c = this.createPlaceholder(this.placeholder);
                    this.$selection.find(".select2-selection__rendered").append(c);
                };
                return b;
            });
            a.define("select2/selection/allowClear", ["jquery", "../keys"], function (a, b) {
                function c() {}
                c.prototype.bind = function (a, b, c) {
                    var d = this;
                    a.call(this, b, c);
                    null == this.placeholder && this.options.get("debug") && window.console && console.error && console.error("Select2: The `allowClear` option should be used in combination with the `placeholder` option.");
                    this.$selection.on("mousedown", ".select2-selection__clear", function (a) {
                        d._handleClear(a);
                    });
                    b.on("keypress", function (a) {
                        d._handleKeyboardClear(a, b);
                    });
                };
                c.prototype._handleClear = function (a, b) {
                    if (!this.options.get("disabled")) {
                        var c = this.$selection.find(".select2-selection__clear");
                        if (0 !== c.length) {
                            b.stopPropagation();
                            for (var c = c.data("data"), d = 0; d < c.length; d++) {
                                var e = { data: c[d] };
                                this.trigger("unselect", e);
                                if (e.prevented) return;
                            }
                            this.$element.val(this.placeholder.id).trigger("change");
                            this.trigger("toggle", {});
                        }
                    }
                };
                c.prototype._handleKeyboardClear = function (a, c, d) {
                    d.isOpen() || (c.which != b.DELETE && c.which != b.BACKSPACE) || this._handleClear(c);
                };
                c.prototype.update = function (b, c) {
                    b.call(this, c);
                    if (!(0 < this.$selection.find(".select2-selection__placeholder").length || 0 === c.length)) {
                        var d = a('<span class="select2-selection__clear">&times;</span>');
                        d.data("data", c);
                        this.$selection.find(".select2-selection__rendered").prepend(d);
                    }
                };
                return c;
            });
            a.define("select2/selection/search", ["jquery", "../utils", "../keys"], function (a, b, c) {
                function d(a, b, c) {
                    a.call(this, b, c);
                }
                d.prototype.render = function (b) {
                    var c = a(
                        '<li class="select2-search select2-search--inline"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" role="textbox" aria-autocomplete="list" /></li>'
                    );
                    this.$searchContainer = c;
                    this.$search = c.find("input");
                    b = b.call(this);
                    this._transferTabIndex();
                    return b;
                };
                d.prototype.bind = function (a, b, d) {
                    var e = this;
                    a.call(this, b, d);
                    b.on("open", function () {
                        e.$search.trigger("focus");
                    });
                    b.on("close", function () {
                        e.$search.val("");
                        e.$search.removeAttr("aria-activedescendant");
                        e.$search.trigger("focus");
                    });
                    b.on("enable", function () {
                        e.$search.prop("disabled", !1);
                        e._transferTabIndex();
                    });
                    b.on("disable", function () {
                        e.$search.prop("disabled", !0);
                    });
                    b.on("focus", function (a) {
                        e.$search.trigger("focus");
                    });
                    b.on("results:focus", function (a) {
                        e.$search.attr("aria-activedescendant", a.id);
                    });
                    this.$selection.on("focusin", ".select2-search--inline", function (a) {
                        e.trigger("focus", a);
                    });
                    this.$selection.on("focusout", ".select2-search--inline", function (a) {
                        e._handleBlur(a);
                    });
                    this.$selection.on("keydown", ".select2-search--inline", function (a) {
                        a.stopPropagation();
                        e.trigger("keypress", a);
                        e._keyUpPrevented = a.isDefaultPrevented();
                        if (a.which === c.BACKSPACE && "" === e.$search.val()) {
                            var b = e.$searchContainer.prev(".select2-selection__choice");
                            0 < b.length && ((b = b.data("data")), e.searchRemoveChoice(b), a.preventDefault());
                        }
                    });
                    var g = (a = document.documentMode) && 11 >= a;
                    this.$selection.on("input.searchcheck", ".select2-search--inline", function (a) {
                        g ? e.$selection.off("input.search input.searchcheck") : e.$selection.off("keyup.search");
                    });
                    this.$selection.on("keyup.search input.search", ".select2-search--inline", function (a) {
                        if (g && "input" === a.type) e.$selection.off("input.search input.searchcheck");
                        else {
                            var b = a.which;
                            b != c.SHIFT && b != c.CTRL && b != c.ALT && b != c.TAB && e.handleSearch(a);
                        }
                    });
                };
                d.prototype._transferTabIndex = function (a) {
                    this.$search.attr("tabindex", this.$selection.attr("tabindex"));
                    this.$selection.attr("tabindex", "-1");
                };
                d.prototype.createPlaceholder = function (a, b) {
                    this.$search.attr("placeholder", b.text);
                };
                d.prototype.update = function (a, b) {
                    var c = this.$search[0] == document.activeElement;
                    this.$search.attr("placeholder", "");
                    a.call(this, b);
                    this.$selection.find(".select2-selection__rendered").append(this.$searchContainer);
                    this.resizeSearch();
                    c && this.$search.focus();
                };
                d.prototype.handleSearch = function () {
                    this.resizeSearch();
                    if (!this._keyUpPrevented) {
                        var a = this.$search.val();
                        this.trigger("query", { term: a });
                    }
                    this._keyUpPrevented = !1;
                };
                d.prototype.searchRemoveChoice = function (a, b) {
                    this.trigger("unselect", { data: b });
                    this.$search.val(b.text);
                    this.handleSearch();
                };
                d.prototype.resizeSearch = function () {
                    this.$search.css("width", "25px");
                    var a = "",
                        a = "" !== this.$search.attr("placeholder") ? this.$selection.find(".select2-selection__rendered").innerWidth() : 0.75 * (this.$search.val().length + 1) + "em";
                    this.$search.css("width", a);
                };
                return d;
            });
            a.define("select2/selection/eventRelay", ["jquery"], function (a) {
                function b() {}
                b.prototype.bind = function (b, c, d) {
                    var g = this,
                        n = "open opening close closing select selecting unselect unselecting".split(" "),
                        q = ["opening", "closing", "selecting", "unselecting"];
                    b.call(this, c, d);
                    c.on("*", function (b, c) {
                        if (-1 !== a.inArray(b, n)) {
                            c = c || {};
                            var d = a.Event("select2:" + b, { params: c });
                            g.$element.trigger(d);
                            -1 !== a.inArray(b, q) && (c.prevented = d.isDefaultPrevented());
                        }
                    });
                };
                return b;
            });
            a.define("select2/translation", ["jquery", "require"], function (a, b) {
                function c(a) {
                    this.dict = a || {};
                }
                c.prototype.all = function () {
                    return this.dict;
                };
                c.prototype.get = function (a) {
                    return this.dict[a];
                };
                c.prototype.extend = function (b) {
                    this.dict = a.extend({}, b.all(), this.dict);
                };
                c._cache = {};
                c.loadPath = function (a) {
                    if (!(a in c._cache)) {
                        var d = b(a);
                        c._cache[a] = d;
                    }
                    return new c(c._cache[a]);
                };
                return c;
            });
            a.define("select2/diacritics", [], function () {
                return {
                    "\u24b6": "A",
                    Ａ: "A",
                    À: "A",
                    Á: "A",
                    Â: "A",
                    Ầ: "A",
                    Ấ: "A",
                    Ẫ: "A",
                    Ẩ: "A",
                    Ã: "A",
                    Ā: "A",
                    Ă: "A",
                    Ằ: "A",
                    Ắ: "A",
                    Ẵ: "A",
                    Ẳ: "A",
                    Ȧ: "A",
                    Ǡ: "A",
                    Ä: "A",
                    Ǟ: "A",
                    Ả: "A",
                    Å: "A",
                    Ǻ: "A",
                    Ǎ: "A",
                    Ȁ: "A",
                    Ȃ: "A",
                    Ạ: "A",
                    Ậ: "A",
                    Ặ: "A",
                    Ḁ: "A",
                    Ą: "A",
                    Ⱥ: "A",
                    Ɐ: "A",
                    Ꜳ: "AA",
                    Æ: "AE",
                    Ǽ: "AE",
                    Ǣ: "AE",
                    Ꜵ: "AO",
                    Ꜷ: "AU",
                    Ꜹ: "AV",
                    Ꜻ: "AV",
                    Ꜽ: "AY",
                    "\u24b7": "B",
                    Ｂ: "B",
                    Ḃ: "B",
                    Ḅ: "B",
                    Ḇ: "B",
                    Ƀ: "B",
                    Ƃ: "B",
                    Ɓ: "B",
                    "\u24b8": "C",
                    Ｃ: "C",
                    Ć: "C",
                    Ĉ: "C",
                    Ċ: "C",
                    Č: "C",
                    Ç: "C",
                    Ḉ: "C",
                    Ƈ: "C",
                    Ȼ: "C",
                    Ꜿ: "C",
                    "\u24b9": "D",
                    Ｄ: "D",
                    Ḋ: "D",
                    Ď: "D",
                    Ḍ: "D",
                    Ḑ: "D",
                    Ḓ: "D",
                    Ḏ: "D",
                    Đ: "D",
                    Ƌ: "D",
                    Ɗ: "D",
                    Ɖ: "D",
                    Ꝺ: "D",
                    Ǳ: "DZ",
                    Ǆ: "DZ",
                    ǲ: "Dz",
                    ǅ: "Dz",
                    "\u24ba": "E",
                    Ｅ: "E",
                    È: "E",
                    É: "E",
                    Ê: "E",
                    Ề: "E",
                    Ế: "E",
                    Ễ: "E",
                    Ể: "E",
                    Ẽ: "E",
                    Ē: "E",
                    Ḕ: "E",
                    Ḗ: "E",
                    Ĕ: "E",
                    Ė: "E",
                    Ë: "E",
                    Ẻ: "E",
                    Ě: "E",
                    Ȅ: "E",
                    Ȇ: "E",
                    Ẹ: "E",
                    Ệ: "E",
                    Ȩ: "E",
                    Ḝ: "E",
                    Ę: "E",
                    Ḙ: "E",
                    Ḛ: "E",
                    Ɛ: "E",
                    Ǝ: "E",
                    "\u24bb": "F",
                    Ｆ: "F",
                    Ḟ: "F",
                    Ƒ: "F",
                    Ꝼ: "F",
                    "\u24bc": "G",
                    Ｇ: "G",
                    Ǵ: "G",
                    Ĝ: "G",
                    Ḡ: "G",
                    Ğ: "G",
                    Ġ: "G",
                    Ǧ: "G",
                    Ģ: "G",
                    Ǥ: "G",
                    Ɠ: "G",
                    Ꞡ: "G",
                    Ᵹ: "G",
                    Ꝿ: "G",
                    "\u24bd": "H",
                    Ｈ: "H",
                    Ĥ: "H",
                    Ḣ: "H",
                    Ḧ: "H",
                    Ȟ: "H",
                    Ḥ: "H",
                    Ḩ: "H",
                    Ḫ: "H",
                    Ħ: "H",
                    Ⱨ: "H",
                    Ⱶ: "H",
                    Ɥ: "H",
                    "\u24be": "I",
                    Ｉ: "I",
                    Ì: "I",
                    Í: "I",
                    Î: "I",
                    Ĩ: "I",
                    Ī: "I",
                    Ĭ: "I",
                    İ: "I",
                    Ï: "I",
                    Ḯ: "I",
                    Ỉ: "I",
                    Ǐ: "I",
                    Ȉ: "I",
                    Ȋ: "I",
                    Ị: "I",
                    Į: "I",
                    Ḭ: "I",
                    Ɨ: "I",
                    "\u24bf": "J",
                    Ｊ: "J",
                    Ĵ: "J",
                    Ɉ: "J",
                    "\u24c0": "K",
                    Ｋ: "K",
                    Ḱ: "K",
                    Ǩ: "K",
                    Ḳ: "K",
                    Ķ: "K",
                    Ḵ: "K",
                    Ƙ: "K",
                    Ⱪ: "K",
                    Ꝁ: "K",
                    Ꝃ: "K",
                    Ꝅ: "K",
                    Ꞣ: "K",
                    "\u24c1": "L",
                    Ｌ: "L",
                    Ŀ: "L",
                    Ĺ: "L",
                    Ľ: "L",
                    Ḷ: "L",
                    Ḹ: "L",
                    Ļ: "L",
                    Ḽ: "L",
                    Ḻ: "L",
                    Ł: "L",
                    Ƚ: "L",
                    Ɫ: "L",
                    Ⱡ: "L",
                    Ꝉ: "L",
                    Ꝇ: "L",
                    Ꞁ: "L",
                    Ǉ: "LJ",
                    ǈ: "Lj",
                    "\u24c2": "M",
                    Ｍ: "M",
                    Ḿ: "M",
                    Ṁ: "M",
                    Ṃ: "M",
                    Ɱ: "M",
                    Ɯ: "M",
                    "\u24c3": "N",
                    Ｎ: "N",
                    Ǹ: "N",
                    Ń: "N",
                    Ñ: "N",
                    Ṅ: "N",
                    Ň: "N",
                    Ṇ: "N",
                    Ņ: "N",
                    Ṋ: "N",
                    Ṉ: "N",
                    Ƞ: "N",
                    Ɲ: "N",
                    Ꞑ: "N",
                    Ꞥ: "N",
                    Ǌ: "NJ",
                    ǋ: "Nj",
                    "\u24c4": "O",
                    Ｏ: "O",
                    Ò: "O",
                    Ó: "O",
                    Ô: "O",
                    Ồ: "O",
                    Ố: "O",
                    Ỗ: "O",
                    Ổ: "O",
                    Õ: "O",
                    Ṍ: "O",
                    Ȭ: "O",
                    Ṏ: "O",
                    Ō: "O",
                    Ṑ: "O",
                    Ṓ: "O",
                    Ŏ: "O",
                    Ȯ: "O",
                    Ȱ: "O",
                    Ö: "O",
                    Ȫ: "O",
                    Ỏ: "O",
                    Ő: "O",
                    Ǒ: "O",
                    Ȍ: "O",
                    Ȏ: "O",
                    Ơ: "O",
                    Ờ: "O",
                    Ớ: "O",
                    Ỡ: "O",
                    Ở: "O",
                    Ợ: "O",
                    Ọ: "O",
                    Ộ: "O",
                    Ǫ: "O",
                    Ǭ: "O",
                    Ø: "O",
                    Ǿ: "O",
                    Ɔ: "O",
                    Ɵ: "O",
                    Ꝋ: "O",
                    Ꝍ: "O",
                    Ƣ: "OI",
                    Ꝏ: "OO",
                    Ȣ: "OU",
                    "\u24c5": "P",
                    Ｐ: "P",
                    Ṕ: "P",
                    Ṗ: "P",
                    Ƥ: "P",
                    Ᵽ: "P",
                    Ꝑ: "P",
                    Ꝓ: "P",
                    Ꝕ: "P",
                    "\u24c6": "Q",
                    Ｑ: "Q",
                    Ꝗ: "Q",
                    Ꝙ: "Q",
                    Ɋ: "Q",
                    "\u24c7": "R",
                    Ｒ: "R",
                    Ŕ: "R",
                    Ṙ: "R",
                    Ř: "R",
                    Ȑ: "R",
                    Ȓ: "R",
                    Ṛ: "R",
                    Ṝ: "R",
                    Ŗ: "R",
                    Ṟ: "R",
                    Ɍ: "R",
                    Ɽ: "R",
                    Ꝛ: "R",
                    Ꞧ: "R",
                    Ꞃ: "R",
                    "\u24c8": "S",
                    Ｓ: "S",
                    ẞ: "S",
                    Ś: "S",
                    Ṥ: "S",
                    Ŝ: "S",
                    Ṡ: "S",
                    Š: "S",
                    Ṧ: "S",
                    Ṣ: "S",
                    Ṩ: "S",
                    Ș: "S",
                    Ş: "S",
                    Ȿ: "S",
                    Ꞩ: "S",
                    Ꞅ: "S",
                    "\u24c9": "T",
                    Ｔ: "T",
                    Ṫ: "T",
                    Ť: "T",
                    Ṭ: "T",
                    Ț: "T",
                    Ţ: "T",
                    Ṱ: "T",
                    Ṯ: "T",
                    Ŧ: "T",
                    Ƭ: "T",
                    Ʈ: "T",
                    Ⱦ: "T",
                    Ꞇ: "T",
                    Ꜩ: "TZ",
                    "\u24ca": "U",
                    Ｕ: "U",
                    Ù: "U",
                    Ú: "U",
                    Û: "U",
                    Ũ: "U",
                    Ṹ: "U",
                    Ū: "U",
                    Ṻ: "U",
                    Ŭ: "U",
                    Ü: "U",
                    Ǜ: "U",
                    Ǘ: "U",
                    Ǖ: "U",
                    Ǚ: "U",
                    Ủ: "U",
                    Ů: "U",
                    Ű: "U",
                    Ǔ: "U",
                    Ȕ: "U",
                    Ȗ: "U",
                    Ư: "U",
                    Ừ: "U",
                    Ứ: "U",
                    Ữ: "U",
                    Ử: "U",
                    Ự: "U",
                    Ụ: "U",
                    Ṳ: "U",
                    Ų: "U",
                    Ṷ: "U",
                    Ṵ: "U",
                    Ʉ: "U",
                    "\u24cb": "V",
                    Ｖ: "V",
                    Ṽ: "V",
                    Ṿ: "V",
                    Ʋ: "V",
                    Ꝟ: "V",
                    Ʌ: "V",
                    Ꝡ: "VY",
                    "\u24cc": "W",
                    Ｗ: "W",
                    Ẁ: "W",
                    Ẃ: "W",
                    Ŵ: "W",
                    Ẇ: "W",
                    Ẅ: "W",
                    Ẉ: "W",
                    Ⱳ: "W",
                    "\u24cd": "X",
                    Ｘ: "X",
                    Ẋ: "X",
                    Ẍ: "X",
                    "\u24ce": "Y",
                    Ｙ: "Y",
                    Ỳ: "Y",
                    Ý: "Y",
                    Ŷ: "Y",
                    Ỹ: "Y",
                    Ȳ: "Y",
                    Ẏ: "Y",
                    Ÿ: "Y",
                    Ỷ: "Y",
                    Ỵ: "Y",
                    Ƴ: "Y",
                    Ɏ: "Y",
                    Ỿ: "Y",
                    "\u24cf": "Z",
                    Ｚ: "Z",
                    Ź: "Z",
                    Ẑ: "Z",
                    Ż: "Z",
                    Ž: "Z",
                    Ẓ: "Z",
                    Ẕ: "Z",
                    Ƶ: "Z",
                    Ȥ: "Z",
                    Ɀ: "Z",
                    Ⱬ: "Z",
                    Ꝣ: "Z",
                    "\u24d0": "a",
                    ａ: "a",
                    ẚ: "a",
                    à: "a",
                    á: "a",
                    â: "a",
                    ầ: "a",
                    ấ: "a",
                    ẫ: "a",
                    ẩ: "a",
                    ã: "a",
                    ā: "a",
                    ă: "a",
                    ằ: "a",
                    ắ: "a",
                    ẵ: "a",
                    ẳ: "a",
                    ȧ: "a",
                    ǡ: "a",
                    ä: "a",
                    ǟ: "a",
                    ả: "a",
                    å: "a",
                    ǻ: "a",
                    ǎ: "a",
                    ȁ: "a",
                    ȃ: "a",
                    ạ: "a",
                    ậ: "a",
                    ặ: "a",
                    ḁ: "a",
                    ą: "a",
                    ⱥ: "a",
                    ɐ: "a",
                    ꜳ: "aa",
                    æ: "ae",
                    ǽ: "ae",
                    ǣ: "ae",
                    ꜵ: "ao",
                    ꜷ: "au",
                    ꜹ: "av",
                    ꜻ: "av",
                    ꜽ: "ay",
                    "\u24d1": "b",
                    ｂ: "b",
                    ḃ: "b",
                    ḅ: "b",
                    ḇ: "b",
                    ƀ: "b",
                    ƃ: "b",
                    ɓ: "b",
                    "\u24d2": "c",
                    ｃ: "c",
                    ć: "c",
                    ĉ: "c",
                    ċ: "c",
                    č: "c",
                    ç: "c",
                    ḉ: "c",
                    ƈ: "c",
                    ȼ: "c",
                    ꜿ: "c",
                    ↄ: "c",
                    "\u24d3": "d",
                    ｄ: "d",
                    ḋ: "d",
                    ď: "d",
                    ḍ: "d",
                    ḑ: "d",
                    ḓ: "d",
                    ḏ: "d",
                    đ: "d",
                    ƌ: "d",
                    ɖ: "d",
                    ɗ: "d",
                    ꝺ: "d",
                    ǳ: "dz",
                    ǆ: "dz",
                    "\u24d4": "e",
                    ｅ: "e",
                    è: "e",
                    é: "e",
                    ê: "e",
                    ề: "e",
                    ế: "e",
                    ễ: "e",
                    ể: "e",
                    ẽ: "e",
                    ē: "e",
                    ḕ: "e",
                    ḗ: "e",
                    ĕ: "e",
                    ė: "e",
                    ë: "e",
                    ẻ: "e",
                    ě: "e",
                    ȅ: "e",
                    ȇ: "e",
                    ẹ: "e",
                    ệ: "e",
                    ȩ: "e",
                    ḝ: "e",
                    ę: "e",
                    ḙ: "e",
                    ḛ: "e",
                    ɇ: "e",
                    ɛ: "e",
                    ǝ: "e",
                    "\u24d5": "f",
                    ｆ: "f",
                    ḟ: "f",
                    ƒ: "f",
                    ꝼ: "f",
                    "\u24d6": "g",
                    ｇ: "g",
                    ǵ: "g",
                    ĝ: "g",
                    ḡ: "g",
                    ğ: "g",
                    ġ: "g",
                    ǧ: "g",
                    ģ: "g",
                    ǥ: "g",
                    ɠ: "g",
                    ꞡ: "g",
                    ᵹ: "g",
                    ꝿ: "g",
                    "\u24d7": "h",
                    ｈ: "h",
                    ĥ: "h",
                    ḣ: "h",
                    ḧ: "h",
                    ȟ: "h",
                    ḥ: "h",
                    ḩ: "h",
                    ḫ: "h",
                    ẖ: "h",
                    ħ: "h",
                    ⱨ: "h",
                    ⱶ: "h",
                    ɥ: "h",
                    ƕ: "hv",
                    "\u24d8": "i",
                    ｉ: "i",
                    ì: "i",
                    í: "i",
                    î: "i",
                    ĩ: "i",
                    ī: "i",
                    ĭ: "i",
                    ï: "i",
                    ḯ: "i",
                    ỉ: "i",
                    ǐ: "i",
                    ȉ: "i",
                    ȋ: "i",
                    ị: "i",
                    į: "i",
                    ḭ: "i",
                    ɨ: "i",
                    ı: "i",
                    "\u24d9": "j",
                    ｊ: "j",
                    ĵ: "j",
                    ǰ: "j",
                    ɉ: "j",
                    "\u24da": "k",
                    ｋ: "k",
                    ḱ: "k",
                    ǩ: "k",
                    ḳ: "k",
                    ķ: "k",
                    ḵ: "k",
                    ƙ: "k",
                    ⱪ: "k",
                    ꝁ: "k",
                    ꝃ: "k",
                    ꝅ: "k",
                    ꞣ: "k",
                    "\u24db": "l",
                    ｌ: "l",
                    ŀ: "l",
                    ĺ: "l",
                    ľ: "l",
                    ḷ: "l",
                    ḹ: "l",
                    ļ: "l",
                    ḽ: "l",
                    ḻ: "l",
                    ſ: "l",
                    ł: "l",
                    ƚ: "l",
                    ɫ: "l",
                    ⱡ: "l",
                    ꝉ: "l",
                    ꞁ: "l",
                    ꝇ: "l",
                    ǉ: "lj",
                    "\u24dc": "m",
                    ｍ: "m",
                    ḿ: "m",
                    ṁ: "m",
                    ṃ: "m",
                    ɱ: "m",
                    ɯ: "m",
                    "\u24dd": "n",
                    ｎ: "n",
                    ǹ: "n",
                    ń: "n",
                    ñ: "n",
                    ṅ: "n",
                    ň: "n",
                    ṇ: "n",
                    ņ: "n",
                    ṋ: "n",
                    ṉ: "n",
                    ƞ: "n",
                    ɲ: "n",
                    ŉ: "n",
                    ꞑ: "n",
                    ꞥ: "n",
                    ǌ: "nj",
                    "\u24de": "o",
                    ｏ: "o",
                    ò: "o",
                    ó: "o",
                    ô: "o",
                    ồ: "o",
                    ố: "o",
                    ỗ: "o",
                    ổ: "o",
                    õ: "o",
                    ṍ: "o",
                    ȭ: "o",
                    ṏ: "o",
                    ō: "o",
                    ṑ: "o",
                    ṓ: "o",
                    ŏ: "o",
                    ȯ: "o",
                    ȱ: "o",
                    ö: "o",
                    ȫ: "o",
                    ỏ: "o",
                    ő: "o",
                    ǒ: "o",
                    ȍ: "o",
                    ȏ: "o",
                    ơ: "o",
                    ờ: "o",
                    ớ: "o",
                    ỡ: "o",
                    ở: "o",
                    ợ: "o",
                    ọ: "o",
                    ộ: "o",
                    ǫ: "o",
                    ǭ: "o",
                    ø: "o",
                    ǿ: "o",
                    ɔ: "o",
                    ꝋ: "o",
                    ꝍ: "o",
                    ɵ: "o",
                    ƣ: "oi",
                    ȣ: "ou",
                    ꝏ: "oo",
                    "\u24df": "p",
                    ｐ: "p",
                    ṕ: "p",
                    ṗ: "p",
                    ƥ: "p",
                    ᵽ: "p",
                    ꝑ: "p",
                    ꝓ: "p",
                    ꝕ: "p",
                    "\u24e0": "q",
                    ｑ: "q",
                    ɋ: "q",
                    ꝗ: "q",
                    ꝙ: "q",
                    "\u24e1": "r",
                    ｒ: "r",
                    ŕ: "r",
                    ṙ: "r",
                    ř: "r",
                    ȑ: "r",
                    ȓ: "r",
                    ṛ: "r",
                    ṝ: "r",
                    ŗ: "r",
                    ṟ: "r",
                    ɍ: "r",
                    ɽ: "r",
                    ꝛ: "r",
                    ꞧ: "r",
                    ꞃ: "r",
                    "\u24e2": "s",
                    ｓ: "s",
                    ß: "s",
                    ś: "s",
                    ṥ: "s",
                    ŝ: "s",
                    ṡ: "s",
                    š: "s",
                    ṧ: "s",
                    ṣ: "s",
                    ṩ: "s",
                    ș: "s",
                    ş: "s",
                    ȿ: "s",
                    ꞩ: "s",
                    ꞅ: "s",
                    ẛ: "s",
                    "\u24e3": "t",
                    ｔ: "t",
                    ṫ: "t",
                    ẗ: "t",
                    ť: "t",
                    ṭ: "t",
                    ț: "t",
                    ţ: "t",
                    ṱ: "t",
                    ṯ: "t",
                    ŧ: "t",
                    ƭ: "t",
                    ʈ: "t",
                    ⱦ: "t",
                    ꞇ: "t",
                    ꜩ: "tz",
                    "\u24e4": "u",
                    ｕ: "u",
                    ù: "u",
                    ú: "u",
                    û: "u",
                    ũ: "u",
                    ṹ: "u",
                    ū: "u",
                    ṻ: "u",
                    ŭ: "u",
                    ü: "u",
                    ǜ: "u",
                    ǘ: "u",
                    ǖ: "u",
                    ǚ: "u",
                    ủ: "u",
                    ů: "u",
                    ű: "u",
                    ǔ: "u",
                    ȕ: "u",
                    ȗ: "u",
                    ư: "u",
                    ừ: "u",
                    ứ: "u",
                    ữ: "u",
                    ử: "u",
                    ự: "u",
                    ụ: "u",
                    ṳ: "u",
                    ų: "u",
                    ṷ: "u",
                    ṵ: "u",
                    ʉ: "u",
                    "\u24e5": "v",
                    ｖ: "v",
                    ṽ: "v",
                    ṿ: "v",
                    ʋ: "v",
                    ꝟ: "v",
                    ʌ: "v",
                    ꝡ: "vy",
                    "\u24e6": "w",
                    ｗ: "w",
                    ẁ: "w",
                    ẃ: "w",
                    ŵ: "w",
                    ẇ: "w",
                    ẅ: "w",
                    ẘ: "w",
                    ẉ: "w",
                    ⱳ: "w",
                    "\u24e7": "x",
                    ｘ: "x",
                    ẋ: "x",
                    ẍ: "x",
                    "\u24e8": "y",
                    ｙ: "y",
                    ỳ: "y",
                    ý: "y",
                    ŷ: "y",
                    ỹ: "y",
                    ȳ: "y",
                    ẏ: "y",
                    ÿ: "y",
                    ỷ: "y",
                    ẙ: "y",
                    ỵ: "y",
                    ƴ: "y",
                    ɏ: "y",
                    ỿ: "y",
                    "\u24e9": "z",
                    ｚ: "z",
                    ź: "z",
                    ẑ: "z",
                    ż: "z",
                    ž: "z",
                    ẓ: "z",
                    ẕ: "z",
                    ƶ: "z",
                    ȥ: "z",
                    ɀ: "z",
                    ⱬ: "z",
                    ꝣ: "z",
                    Ά: "\u0391",
                    Έ: "\u0395",
                    Ή: "\u0397",
                    Ί: "\u0399",
                    Ϊ: "\u0399",
                    Ό: "\u039f",
                    Ύ: "\u03a5",
                    Ϋ: "\u03a5",
                    Ώ: "\u03a9",
                    ά: "\u03b1",
                    έ: "\u03b5",
                    ή: "\u03b7",
                    ί: "\u03b9",
                    ϊ: "\u03b9",
                    ΐ: "\u03b9",
                    ό: "\u03bf",
                    ύ: "\u03c5",
                    ϋ: "\u03c5",
                    ΰ: "\u03c5",
                    ω: "\u03c9",
                    ς: "\u03c3",
                };
            });
            a.define("select2/data/base", ["../utils"], function (a) {
                function b(a, c) {
                    b.__super__.constructor.call(this);
                }
                a.Extend(b, a.Observable);
                b.prototype.current = function (a) {
                    throw Error("The `current` method must be defined in child classes.");
                };
                b.prototype.query = function (a, b) {
                    throw Error("The `query` method must be defined in child classes.");
                };
                b.prototype.bind = function (a, b) {};
                b.prototype.destroy = function () {};
                b.prototype.generateResultId = function (b, c) {
                    var d = b.id + "-result-",
                        d = d + a.generateChars(4);
                    return (d = null != c.id ? d + ("-" + c.id.toString()) : d + ("-" + a.generateChars(4)));
                };
                return b;
            });
            a.define("select2/data/select", ["./base", "../utils", "jquery"], function (a, b, c) {
                function d(a, b) {
                    this.$element = a;
                    this.options = b;
                    d.__super__.constructor.call(this);
                }
                b.Extend(d, a);
                d.prototype.current = function (a) {
                    var b = [],
                        d = this;
                    this.$element.find(":selected").each(function () {
                        var a = c(this),
                            a = d.item(a);
                        b.push(a);
                    });
                    a(b);
                };
                d.prototype.select = function (a) {
                    var b = this;
                    a.selected = !0;
                    c(a.element).is("option")
                        ? ((a.element.selected = !0), this.$element.trigger("change"))
                        : this.$element.prop("multiple")
                        ? this.current(function (d) {
                              var e = [];
                              a = [a];
                              a.push.apply(a, d);
                              for (d = 0; d < a.length; d++) {
                                  var g = a[d].id;
                                  -1 === c.inArray(g, e) && e.push(g);
                              }
                              b.$element.val(e);
                              b.$element.trigger("change");
                          })
                        : (this.$element.val(a.id), this.$element.trigger("change"));
                };
                d.prototype.unselect = function (a) {
                    var b = this;
                    this.$element.prop("multiple") &&
                        ((a.selected = !1),
                        c(a.element).is("option")
                            ? ((a.element.selected = !1), this.$element.trigger("change"))
                            : this.current(function (d) {
                                  for (var e = [], g = 0; g < d.length; g++) {
                                      var k = d[g].id;
                                      k !== a.id && -1 === c.inArray(k, e) && e.push(k);
                                  }
                                  b.$element.val(e);
                                  b.$element.trigger("change");
                              }));
                };
                d.prototype.bind = function (a, b) {
                    var c = this;
                    this.container = a;
                    a.on("select", function (a) {
                        c.select(a.data);
                    });
                    a.on("unselect", function (a) {
                        c.unselect(a.data);
                    });
                };
                d.prototype.destroy = function () {
                    this.$element.find("*").each(function () {
                        c.removeData(this, "data");
                    });
                };
                d.prototype.query = function (a, b) {
                    var d = [],
                        e = this;
                    this.$element.children().each(function () {
                        var b = c(this);
                        if (b.is("option") || b.is("optgroup")) (b = e.item(b)), (b = e.matches(a, b)), null !== b && d.push(b);
                    });
                    b({ results: d });
                };
                d.prototype.addOptions = function (a) {
                    b.appendMany(this.$element, a);
                };
                d.prototype.option = function (a) {
                    var b;
                    a.children ? ((b = document.createElement("optgroup")), (b.label = a.text)) : ((b = document.createElement("option")), void 0 !== b.textContent ? (b.textContent = a.text) : (b.innerText = a.text));
                    a.id && (b.value = a.id);
                    a.disabled && (b.disabled = !0);
                    a.selected && (b.selected = !0);
                    a.title && (b.title = a.title);
                    var d = c(b);
                    a = this._normalizeItem(a);
                    a.element = b;
                    c.data(b, "data", a);
                    return d;
                };
                d.prototype.item = function (a) {
                    var b = {},
                        b = c.data(a[0], "data");
                    if (null != b) return b;
                    if (a.is("option")) b = { id: a.val(), text: a.text(), disabled: a.prop("disabled"), selected: a.prop("selected"), title: a.prop("title") };
                    else if (a.is("optgroup")) {
                        for (var b = { text: a.prop("label"), children: [], title: a.prop("title") }, d = a.children("option"), e = [], g = 0; g < d.length; g++) {
                            var k = c(d[g]),
                                k = this.item(k);
                            e.push(k);
                        }
                        b.children = e;
                    }
                    b = this._normalizeItem(b);
                    b.element = a[0];
                    c.data(a[0], "data", b);
                    return b;
                };
                d.prototype._normalizeItem = function (a) {
                    c.isPlainObject(a) || (a = { id: a, text: a });
                    a = c.extend({}, { text: "" }, a);
                    null != a.id && (a.id = a.id.toString());
                    null != a.text && (a.text = a.text.toString());
                    null == a._resultId && a.id && null != this.container && (a._resultId = this.generateResultId(this.container, a));
                    return c.extend({}, { selected: !1, disabled: !1 }, a);
                };
                d.prototype.matches = function (a, b) {
                    return this.options.get("matcher")(a, b);
                };
                return d;
            });
            a.define("select2/data/array", ["./select", "../utils", "jquery"], function (a, b, c) {
                function d(a, b) {
                    var c = b.get("data") || [];
                    d.__super__.constructor.call(this, a, b);
                    this.addOptions(this.convertToOptions(c));
                }
                b.Extend(d, a);
                d.prototype.select = function (a) {
                    var b = this.$element.find("option").filter(function (b, c) {
                        return c.value == a.id.toString();
                    });
                    0 === b.length && ((b = this.option(a)), this.addOptions(b));
                    d.__super__.select.call(this, a);
                };
                d.prototype.convertToOptions = function (a) {
                    function d(a) {
                        return function () {
                            return c(this).val() == a.id;
                        };
                    }
                    for (
                        var e = this,
                            k = this.$element.find("option"),
                            u = k
                                .map(function () {
                                    return e.item(c(this)).id;
                                })
                                .get(),
                            v = [],
                            w = 0;
                        w < a.length;
                        w++
                    ) {
                        var t = this._normalizeItem(a[w]);
                        if (0 <= c.inArray(t.id, u)) {
                            var y = k.filter(d(t)),
                                p = this.item(y),
                                t = c.extend(!0, {}, t, p),
                                t = this.option(t);
                            y.replaceWith(t);
                        } else (y = this.option(t)), t.children && ((t = this.convertToOptions(t.children)), b.appendMany(y, t)), v.push(y);
                    }
                    return v;
                };
                return d;
            });
            a.define("select2/data/ajax", ["./array", "../utils", "jquery"], function (a, b, c) {
                function d(a, b) {
                    this.ajaxOptions = this._applyDefaults(b.get("ajax"));
                    null != this.ajaxOptions.processResults && (this.processResults = this.ajaxOptions.processResults);
                    d.__super__.constructor.call(this, a, b);
                }
                b.Extend(d, a);
                d.prototype._applyDefaults = function (a) {
                    return c.extend(
                        {},
                        {
                            data: function (a) {
                                return c.extend({}, a, { q: a.term });
                            },
                            transport: function (a, b, d) {
                                a = c.ajax(a);
                                a.then(b);
                                a.fail(d);
                                return a;
                            },
                        },
                        a,
                        !0
                    );
                };
                d.prototype.processResults = function (a) {
                    return a;
                };
                d.prototype.query = function (a, b) {
                    function d() {
                        var k = g.transport(
                            g,
                            function (d) {
                                d = e.processResults(d, a);
                                e.options.get("debug") &&
                                    window.console &&
                                    console.error &&
                                    ((d && d.results && c.isArray(d.results)) || console.error("Select2: The AJAX results did not return an array in the `results` key of the response."));
                                b(d);
                            },
                            function () {
                                (k.status && "0" === k.status) || e.trigger("results:message", { message: "errorLoading" });
                            }
                        );
                        e._request = k;
                    }
                    var e = this;
                    null != this._request && (c.isFunction(this._request.abort) && this._request.abort(), (this._request = null));
                    var g = c.extend({ type: "GET" }, this.ajaxOptions);
                    "function" === typeof g.url && (g.url = g.url.call(this.$element, a));
                    "function" === typeof g.data && (g.data = g.data.call(this.$element, a));
                    this.ajaxOptions.delay && null != a.term ? (this._queryTimeout && window.clearTimeout(this._queryTimeout), (this._queryTimeout = window.setTimeout(d, this.ajaxOptions.delay))) : d();
                };
                return d;
            });
            a.define("select2/data/tags", ["jquery"], function (a) {
                function b(c, d, g) {
                    var l = g.get("tags"),
                        n = g.get("createTag");
                    void 0 !== n && (this.createTag = n);
                    n = g.get("insertTag");
                    void 0 !== n && (this.insertTag = n);
                    c.call(this, d, g);
                    if (a.isArray(l)) for (c = 0; c < l.length; c++) (d = this._normalizeItem(l[c])), (d = this.option(d)), this.$element.append(d);
                }
                b.prototype.query = function (a, b, c) {
                    function d(a, f) {
                        for (var g = a.results, w = 0; w < g.length; w++) {
                            var t = g[w],
                                y = null != t.children && !d({ results: t.children }, !0);
                            if (t.text === b.term || y) {
                                if (f) return !1;
                                a.data = g;
                                c(a);
                                return;
                            }
                        }
                        if (f) return !0;
                        w = e.createTag(b);
                        null != w && ((t = e.option(w)), t.attr("data-select2-tag", !0), e.addOptions([t]), e.insertTag(g, w));
                        a.results = g;
                        c(a);
                    }
                    var e = this;
                    this._removeOldTags();
                    null == b.term || null != b.page ? a.call(this, b, c) : a.call(this, b, d);
                };
                b.prototype.createTag = function (b, c) {
                    var d = a.trim(c.term);
                    return "" === d ? null : { id: d, text: d };
                };
                b.prototype.insertTag = function (a, b, c) {
                    b.unshift(c);
                };
                b.prototype._removeOldTags = function (b) {
                    this.$element.find("option[data-select2-tag]").each(function () {
                        this.selected || a(this).remove();
                    });
                };
                return b;
            });
            a.define("select2/data/tokenizer", ["jquery"], function (a) {
                function b(a, c, d) {
                    var e = d.get("tokenizer");
                    void 0 !== e && (this.tokenizer = e);
                    a.call(this, c, d);
                }
                b.prototype.bind = function (a, b, c) {
                    a.call(this, b, c);
                    this.$search = b.dropdown.$search || b.selection.$search || c.find(".select2-search__field");
                };
                b.prototype.query = function (b, c, d) {
                    var g = this;
                    c.term = c.term || "";
                    var n = this.tokenizer(c, this.options, function (b) {
                        var c = g._normalizeItem(b);
                        g.$element.find("option").filter(function () {
                            return a(this).val() === c.id;
                        }).length || ((b = g.option(c)), b.attr("data-select2-tag", !0), g._removeOldTags(), g.addOptions([b]));
                        g.trigger("select", { data: c });
                    });
                    n.term !== c.term && (this.$search.length && (this.$search.val(n.term), this.$search.focus()), (c.term = n.term));
                    b.call(this, c, d);
                };
                b.prototype.tokenizer = function (b, c, d, g) {
                    b = d.get("tokenSeparators") || [];
                    d = c.term;
                    for (
                        var n = 0,
                            q =
                                this.createTag ||
                                function (a) {
                                    return { id: a.term, text: a.term };
                                };
                        n < d.length;

                    )
                        if (-1 === a.inArray(d[n], b)) n++;
                        else {
                            var u = d.substr(0, n),
                                u = a.extend({}, c, { term: u }),
                                u = q(u);
                            null == u ? n++ : (g(u), (d = d.substr(n + 1) || ""), (n = 0));
                        }
                    return { term: d };
                };
                return b;
            });
            a.define("select2/data/minimumInputLength", [], function () {
                function a(b, c, d) {
                    this.minimumInputLength = d.get("minimumInputLength");
                    b.call(this, c, d);
                }
                a.prototype.query = function (a, b, c) {
                    b.term = b.term || "";
                    b.term.length < this.minimumInputLength ? this.trigger("results:message", { message: "inputTooShort", args: { minimum: this.minimumInputLength, input: b.term, params: b } }) : a.call(this, b, c);
                };
                return a;
            });
            a.define("select2/data/maximumInputLength", [], function () {
                function a(b, c, d) {
                    this.maximumInputLength = d.get("maximumInputLength");
                    b.call(this, c, d);
                }
                a.prototype.query = function (a, b, c) {
                    b.term = b.term || "";
                    0 < this.maximumInputLength && b.term.length > this.maximumInputLength
                        ? this.trigger("results:message", { message: "inputTooLong", args: { maximum: this.maximumInputLength, input: b.term, params: b } })
                        : a.call(this, b, c);
                };
                return a;
            });
            a.define("select2/data/maximumSelectionLength", [], function () {
                function a(b, c, d) {
                    this.maximumSelectionLength = d.get("maximumSelectionLength");
                    b.call(this, c, d);
                }
                a.prototype.query = function (a, b, c) {
                    var d = this;
                    this.current(function (e) {
                        e = null != e ? e.length : 0;
                        0 < d.maximumSelectionLength && e >= d.maximumSelectionLength ? d.trigger("results:message", { message: "maximumSelected", args: { maximum: d.maximumSelectionLength } }) : a.call(d, b, c);
                    });
                };
                return a;
            });
            a.define("select2/dropdown", ["jquery", "./utils"], function (a, b) {
                function c(a, b) {
                    this.$element = a;
                    this.options = b;
                    c.__super__.constructor.call(this);
                }
                b.Extend(c, b.Observable);
                c.prototype.render = function () {
                    var b = a('<span class="select2-dropdown"><span class="select2-results"></span></span>');
                    b.attr("dir", this.options.get("dir"));
                    return (this.$dropdown = b);
                };
                c.prototype.bind = function () {};
                c.prototype.position = function (a, b) {};
                c.prototype.destroy = function () {
                    this.$dropdown.remove();
                };
                return c;
            });
            a.define("select2/dropdown/search", ["jquery", "../utils"], function (a, b) {
                function c() {}
                c.prototype.render = function (b) {
                    b = b.call(this);
                    var c = a(
                        '<span class="select2-search select2-search--dropdown"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" role="textbox" /></span>'
                    );
                    this.$searchContainer = c;
                    this.$search = c.find("input");
                    b.prepend(c);
                    return b;
                };
                c.prototype.bind = function (b, c, d) {
                    var f = this;
                    b.call(this, c, d);
                    this.$search.on("keydown", function (a) {
                        f.trigger("keypress", a);
                        f._keyUpPrevented = a.isDefaultPrevented();
                    });
                    this.$search.on("input", function (b) {
                        a(this).off("keyup");
                    });
                    this.$search.on("keyup input", function (a) {
                        f.handleSearch(a);
                    });
                    c.on("open", function () {
                        f.$search.attr("tabindex", 0);
                        f.$search.focus();
                        window.setTimeout(function () {
                            f.$search.focus();
                        }, 0);
                    });
                    c.on("close", function () {
                        f.$search.attr("tabindex", -1);
                        f.$search.val("");
                    });
                    c.on("focus", function () {
                        c.isOpen() && f.$search.focus();
                    });
                    c.on("results:all", function (a) {
                        if (null == a.query.term || "" === a.query.term) f.showSearch(a) ? f.$searchContainer.removeClass("select2-search--hide") : f.$searchContainer.addClass("select2-search--hide");
                    });
                };
                c.prototype.handleSearch = function (a) {
                    this._keyUpPrevented || ((a = this.$search.val()), this.trigger("query", { term: a }));
                    this._keyUpPrevented = !1;
                };
                c.prototype.showSearch = function (a, b) {
                    return !0;
                };
                return c;
            });
            a.define("select2/dropdown/hidePlaceholder", [], function () {
                function a(b, c, d, e) {
                    this.placeholder = this.normalizePlaceholder(d.get("placeholder"));
                    b.call(this, c, d, e);
                }
                a.prototype.append = function (a, b) {
                    b.results = this.removePlaceholder(b.results);
                    a.call(this, b);
                };
                a.prototype.normalizePlaceholder = function (a, b) {
                    "string" === typeof b && (b = { id: "", text: b });
                    return b;
                };
                a.prototype.removePlaceholder = function (a, b) {
                    for (var c = b.slice(0), d = b.length - 1; 0 <= d; d--) this.placeholder.id === b[d].id && c.splice(d, 1);
                    return c;
                };
                return a;
            });
            a.define("select2/dropdown/infiniteScroll", ["jquery"], function (a) {
                function b(a, c, d, e) {
                    this.lastParams = {};
                    a.call(this, c, d, e);
                    this.$loadingMore = this.createLoadingMore();
                    this.loading = !1;
                }
                b.prototype.append = function (a, b) {
                    this.$loadingMore.remove();
                    this.loading = !1;
                    a.call(this, b);
                    this.showLoadingMore(b) && this.$results.append(this.$loadingMore);
                };
                b.prototype.bind = function (b, c, d) {
                    var g = this;
                    b.call(this, c, d);
                    c.on("query", function (a) {
                        g.lastParams = a;
                        g.loading = !0;
                    });
                    c.on("query:append", function (a) {
                        g.lastParams = a;
                        g.loading = !0;
                    });
                    this.$results.on("scroll", function () {
                        var b = a.contains(document.documentElement, g.$loadingMore[0]);
                        if (!g.loading && b) {
                            var b = g.$results.offset().top + g.$results.outerHeight(!1),
                                c = g.$loadingMore.offset().top + g.$loadingMore.outerHeight(!1);
                            b + 50 >= c && g.loadMore();
                        }
                    });
                };
                b.prototype.loadMore = function () {
                    this.loading = !0;
                    var b = a.extend({}, { page: 1 }, this.lastParams);
                    b.page++;
                    this.trigger("query:append", b);
                };
                b.prototype.showLoadingMore = function (a, b) {
                    return b.pagination && b.pagination.more;
                };
                b.prototype.createLoadingMore = function () {
                    var b = a('<li class="select2-results__option select2-results__option--load-more"role="treeitem" aria-disabled="true"></li>'),
                        c = this.options.get("translations").get("loadingMore");
                    b.html(c(this.lastParams));
                    return b;
                };
                return b;
            });
            a.define("select2/dropdown/attachBody", ["jquery", "../utils"], function (a, b) {
                function c(b, d, f) {
                    this.$dropdownParent = f.get("dropdownParent") || a(document.body);
                    b.call(this, d, f);
                }
                c.prototype.bind = function (a, b, c) {
                    var d = this,
                        e = !1;
                    a.call(this, b, c);
                    b.on("open", function () {
                        d._showDropdown();
                        d._attachPositioningHandler(b);
                        e ||
                            ((e = !0),
                            b.on("results:all", function () {
                                d._positionDropdown();
                                d._resizeDropdown();
                            }),
                            b.on("results:append", function () {
                                d._positionDropdown();
                                d._resizeDropdown();
                            }));
                    });
                    b.on("close", function () {
                        d._hideDropdown();
                        d._detachPositioningHandler(b);
                    });
                    this.$dropdownContainer.on("mousedown", function (a) {
                        a.stopPropagation();
                    });
                };
                c.prototype.destroy = function (a) {
                    a.call(this);
                    this.$dropdownContainer.remove();
                };
                c.prototype.position = function (a, b, c) {
                    b.attr("class", c.attr("class"));
                    b.removeClass("select2");
                    b.addClass("select2-container--open");
                    b.css({ position: "absolute", top: -999999 });
                    this.$container = c;
                };
                c.prototype.render = function (b) {
                    var c = a("<span></span>");
                    b = b.call(this);
                    c.append(b);
                    return (this.$dropdownContainer = c);
                };
                c.prototype._hideDropdown = function (a) {
                    this.$dropdownContainer.detach();
                };
                c.prototype._attachPositioningHandler = function (c, d) {
                    var f = this,
                        n = "scroll.select2." + d.id,
                        q = "resize.select2." + d.id,
                        u = "orientationchange.select2." + d.id,
                        v = this.$container.parents().filter(b.hasScroll);
                    v.each(function () {
                        a(this).data("select2-scroll-position", { x: a(this).scrollLeft(), y: a(this).scrollTop() });
                    });
                    v.on(n, function (b) {
                        b = a(this).data("select2-scroll-position");
                        a(this).scrollTop(b.y);
                    });
                    a(window).on(n + " " + q + " " + u, function (a) {
                        f._positionDropdown();
                        f._resizeDropdown();
                    });
                };
                c.prototype._detachPositioningHandler = function (c, d) {
                    var f = "scroll.select2." + d.id,
                        n = "resize.select2." + d.id,
                        q = "orientationchange.select2." + d.id;
                    this.$container.parents().filter(b.hasScroll).off(f);
                    a(window).off(f + " " + n + " " + q);
                };
                c.prototype._positionDropdown = function () {
                    var b = a(window),
                        c = this.$dropdown.hasClass("select2-dropdown--above"),
                        d = this.$dropdown.hasClass("select2-dropdown--below"),
                        f = null,
                        g = this.$container.offset();
                    g.bottom = g.top + this.$container.outerHeight(!1);
                    var u = this.$container.outerHeight(!1),
                        v,
                        w;
                    v = g.top;
                    w = g.top + u;
                    var u = this.$dropdown.outerHeight(!1),
                        t = b.scrollTop(),
                        y = b.scrollTop() + b.height(),
                        b = t < g.top - u,
                        t = y > g.bottom + u,
                        g = { left: g.left, top: w };
                    w = this.$dropdownParent;
                    "static" === w.css("position") && (w = w.offsetParent());
                    w = w.offset();
                    g.top -= w.top;
                    g.left -= w.left;
                    c || d || (f = "below");
                    t || !b || c ? !b && t && c && (f = "below") : (f = "above");
                    if ("above" == f || (c && "below" !== f)) g.top = v - w.top - u;
                    null != f &&
                        (this.$dropdown.removeClass("select2-dropdown--below select2-dropdown--above").addClass("select2-dropdown--" + f),
                        this.$container.removeClass("select2-container--below select2-container--above").addClass("select2-container--" + f));
                    this.$dropdownContainer.css(g);
                };
                c.prototype._resizeDropdown = function () {
                    var a = { width: this.$container.outerWidth(!1) + "px" };
                    this.options.get("dropdownAutoWidth") && ((a.minWidth = a.width), (a.position = "relative"), (a.width = "auto"));
                    this.$dropdown.css(a);
                };
                c.prototype._showDropdown = function (a) {
                    this.$dropdownContainer.appendTo(this.$dropdownParent);
                    this._positionDropdown();
                    this._resizeDropdown();
                };
                return c;
            });
            a.define("select2/dropdown/minimumResultsForSearch", [], function () {
                function a(b) {
                    for (var c = 0, d = 0; d < b.length; d++) {
                        var g = b[d];
                        g.children ? (c += a(g.children)) : c++;
                    }
                    return c;
                }
                function b(a, c, d, e) {
                    this.minimumResultsForSearch = d.get("minimumResultsForSearch");
                    0 > this.minimumResultsForSearch && (this.minimumResultsForSearch = Infinity);
                    a.call(this, c, d, e);
                }
                b.prototype.showSearch = function (b, c) {
                    return a(c.data.results) < this.minimumResultsForSearch ? !1 : b.call(this, c);
                };
                return b;
            });
            a.define("select2/dropdown/selectOnClose", [], function () {
                function a() {}
                a.prototype.bind = function (a, b, c) {
                    var d = this;
                    a.call(this, b, c);
                    b.on("close", function (a) {
                        d._handleSelectOnClose(a);
                    });
                };
                a.prototype._handleSelectOnClose = function (a, b) {
                    if (b && null != b.originalSelect2Event) {
                        var c = b.originalSelect2Event;
                        if ("select" === c._type || "unselect" === c._type) return;
                    }
                    c = this.getHighlightedResults();
                    1 > c.length || ((c = c.data("data")), (null != c.element && c.element.selected) || (null == c.element && c.selected) || this.trigger("select", { data: c }));
                };
                return a;
            });
            a.define("select2/dropdown/closeOnSelect", [], function () {
                function a() {}
                a.prototype.bind = function (a, b, c) {
                    var d = this;
                    a.call(this, b, c);
                    b.on("select", function (a) {
                        d._selectTriggered(a);
                    });
                    b.on("unselect", function (a) {
                        d._selectTriggered(a);
                    });
                };
                a.prototype._selectTriggered = function (a, b) {
                    var c = b.originalEvent;
                    (c && c.ctrlKey) || this.trigger("close", { originalEvent: c, originalSelect2Event: b });
                };
                return a;
            });
            a.define("select2/i18n/en", [], function () {
                return {
                    errorLoading: function () {
                        return "The results could not be loaded.";
                    },
                    inputTooLong: function (a) {
                        a = a.input.length - a.maximum;
                        var b = "Please delete " + a + " character";
                        1 != a && (b += "s");
                        return b;
                    },
                    inputTooShort: function (a) {
                        return "Please enter " + (a.minimum - a.input.length) + " or more characters";
                    },
                    loadingMore: function () {
                        return "Loading more results\u2026";
                    },
                    maximumSelected: function (a) {
                        var b = "You can only select " + a.maximum + " item";
                        1 != a.maximum && (b += "s");
                        return b;
                    },
                    noResults: function () {
                        return "No results found";
                    },
                    searching: function () {
                        return "Searching\u2026";
                    },
                };
            });
            a.define(
                "select2/defaults",
                "jquery require ./results ./selection/single ./selection/multiple ./selection/placeholder ./selection/allowClear ./selection/search ./selection/eventRelay ./utils ./translation ./diacritics ./data/select ./data/array ./data/ajax ./data/tags ./data/tokenizer ./data/minimumInputLength ./data/maximumInputLength ./data/maximumSelectionLength ./dropdown ./dropdown/search ./dropdown/hidePlaceholder ./dropdown/infiniteScroll ./dropdown/attachBody ./dropdown/minimumResultsForSearch ./dropdown/selectOnClose ./dropdown/closeOnSelect ./i18n/en".split(
                    " "
                ),
                function (a, b, c, d, h, l, n, q, u, v, w, t, y, p, C, r, x, z, B, G, H, J, A, ea, ga, ha, va, L, pa) {
                    function wa() {
                        this.reset();
                    }
                    wa.prototype.apply = function (t) {
                        t = a.extend(!0, {}, this.defaults, t);
                        if (null == t.dataAdapter) {
                            t.dataAdapter = null != t.ajax ? C : null != t.data ? p : y;
                            0 < t.minimumInputLength && (t.dataAdapter = v.Decorate(t.dataAdapter, z));
                            0 < t.maximumInputLength && (t.dataAdapter = v.Decorate(t.dataAdapter, B));
                            0 < t.maximumSelectionLength && (t.dataAdapter = v.Decorate(t.dataAdapter, G));
                            t.tags && (t.dataAdapter = v.Decorate(t.dataAdapter, r));
                            if (null != t.tokenSeparators || null != t.tokenizer) t.dataAdapter = v.Decorate(t.dataAdapter, x);
                            if (null != t.query) {
                                var W = b(t.amdBase + "compat/query");
                                t.dataAdapter = v.Decorate(t.dataAdapter, W);
                            }
                            null != t.initSelection && ((W = b(t.amdBase + "compat/initSelection")), (t.dataAdapter = v.Decorate(t.dataAdapter, W)));
                        }
                        null == t.resultsAdapter &&
                            ((t.resultsAdapter = c),
                            null != t.ajax && (t.resultsAdapter = v.Decorate(t.resultsAdapter, ea)),
                            null != t.placeholder && (t.resultsAdapter = v.Decorate(t.resultsAdapter, A)),
                            t.selectOnClose && (t.resultsAdapter = v.Decorate(t.resultsAdapter, va)));
                        if (null == t.dropdownAdapter) {
                            t.multiple ? (t.dropdownAdapter = H) : ((W = v.Decorate(H, J)), (t.dropdownAdapter = W));
                            0 !== t.minimumResultsForSearch && (t.dropdownAdapter = v.Decorate(t.dropdownAdapter, ha));
                            t.closeOnSelect && (t.dropdownAdapter = v.Decorate(t.dropdownAdapter, L));
                            if (null != t.dropdownCssClass || null != t.dropdownCss || null != t.adaptDropdownCssClass) (W = b(t.amdBase + "compat/dropdownCss")), (t.dropdownAdapter = v.Decorate(t.dropdownAdapter, W));
                            t.dropdownAdapter = v.Decorate(t.dropdownAdapter, ga);
                        }
                        if (null == t.selectionAdapter) {
                            t.selectionAdapter = t.multiple ? h : d;
                            null != t.placeholder && (t.selectionAdapter = v.Decorate(t.selectionAdapter, l));
                            t.allowClear && (t.selectionAdapter = v.Decorate(t.selectionAdapter, n));
                            t.multiple && (t.selectionAdapter = v.Decorate(t.selectionAdapter, q));
                            if (null != t.containerCssClass || null != t.containerCss || null != t.adaptContainerCssClass) (W = b(t.amdBase + "compat/containerCss")), (t.selectionAdapter = v.Decorate(t.selectionAdapter, W));
                            t.selectionAdapter = v.Decorate(t.selectionAdapter, u);
                        }
                        "string" === typeof t.language && (0 < t.language.indexOf("-") ? ((W = t.language.split("-")[0]), (t.language = [t.language, W])) : (t.language = [t.language]));
                        if (a.isArray(t.language)) {
                            W = new w();
                            t.language.push("en");
                            for (var ra = t.language, Q = 0; Q < ra.length; Q++) {
                                var I = ra[Q],
                                    pa = {};
                                try {
                                    pa = w.loadPath(I);
                                } catch (M) {
                                    try {
                                        (I = this.defaults.amdLanguageBase + I), (pa = w.loadPath(I));
                                    } catch (ma) {
                                        t.debug && window.console && console.warn && console.warn('Select2: The language file for "' + I + '" could not be automatically loaded. A fallback will be used instead.');
                                        continue;
                                    }
                                }
                                W.extend(pa);
                            }
                            t.translations = W;
                        } else (W = w.loadPath(this.defaults.amdLanguageBase + "en")), (ra = new w(t.language)), ra.extend(W), (t.translations = ra);
                        return t;
                    };
                    wa.prototype.reset = function () {
                        function b(a) {
                            return a.replace(/[^\u0000-\u007E]/g, function (a) {
                                return t[a] || a;
                            });
                        }
                        function c(d, f) {
                            if ("" === a.trim(d.term)) return f;
                            if (f.children && 0 < f.children.length) {
                                for (var g = a.extend(!0, {}, f), h = f.children.length - 1; 0 <= h; h--) null == c(d, f.children[h]) && g.children.splice(h, 1);
                                return 0 < g.children.length ? g : c(d, g);
                            }
                            g = b(f.text).toUpperCase();
                            h = b(d.term).toUpperCase();
                            return -1 < g.indexOf(h) ? f : null;
                        }
                        this.defaults = {
                            amdBase: "./",
                            amdLanguageBase: "./i18n/",
                            closeOnSelect: !0,
                            debug: !1,
                            dropdownAutoWidth: !1,
                            escapeMarkup: v.escapeMarkup,
                            language: pa,
                            matcher: c,
                            minimumInputLength: 0,
                            maximumInputLength: 0,
                            maximumSelectionLength: 0,
                            minimumResultsForSearch: 0,
                            selectOnClose: !1,
                            sorter: function (a) {
                                return a;
                            },
                            templateResult: function (a) {
                                return a.text;
                            },
                            templateSelection: function (a) {
                                return a.text;
                            },
                            theme: "default",
                            width: "resolve",
                        };
                    };
                    wa.prototype.set = function (b, c) {
                        var d = a.camelCase(b),
                            f = {};
                        f[d] = c;
                        d = v._convertData(f);
                        a.extend(this.defaults, d);
                    };
                    return new wa();
                }
            );
            a.define("select2/options", ["require", "jquery", "./defaults", "./utils"], function (a, b, c, d) {
                function h(b, g) {
                    this.options = b;
                    null != g && this.fromElement(g);
                    this.options = c.apply(this.options);
                    if (g && g.is("input")) {
                        var h = a(this.get("amdBase") + "compat/inputData");
                        this.options.dataAdapter = d.Decorate(this.options.dataAdapter, h);
                    }
                }
                h.prototype.fromElement = function (a) {
                    var c = ["select2"];
                    null == this.options.multiple && (this.options.multiple = a.prop("multiple"));
                    null == this.options.disabled && (this.options.disabled = a.prop("disabled"));
                    null == this.options.language && (a.prop("lang") ? (this.options.language = a.prop("lang").toLowerCase()) : a.closest("[lang]").prop("lang") && (this.options.language = a.closest("[lang]").prop("lang")));
                    null == this.options.dir && (a.prop("dir") ? (this.options.dir = a.prop("dir")) : a.closest("[dir]").prop("dir") ? (this.options.dir = a.closest("[dir]").prop("dir")) : (this.options.dir = "ltr"));
                    a.prop("disabled", this.options.disabled);
                    a.prop("multiple", this.options.multiple);
                    a.data("select2Tags") &&
                        (this.options.debug &&
                            window.console &&
                            console.warn &&
                            console.warn('Select2: The `data-select2-tags` attribute has been changed to use the `data-data` and `data-tags="true"` attributes and will be removed in future versions of Select2.'),
                        a.data("data", a.data("select2Tags")),
                        a.data("tags", !0));
                    a.data("ajaxUrl") &&
                        (this.options.debug &&
                            window.console &&
                            console.warn &&
                            console.warn("Select2: The `data-ajax-url` attribute has been changed to `data-ajax--url` and support for the old attribute will be removed in future versions of Select2."),
                        a.attr("ajax--url", a.data("ajaxUrl")),
                        a.data("ajax--url", a.data("ajaxUrl")));
                    var e = {},
                        e = b.fn.jquery && "1." == b.fn.jquery.substr(0, 2) && a[0].dataset ? b.extend(!0, {}, a[0].dataset, a.data()) : a.data();
                    a = b.extend(!0, {}, e);
                    a = d._convertData(a);
                    for (var f in a) -1 < b.inArray(f, c) || (b.isPlainObject(this.options[f]) ? b.extend(this.options[f], a[f]) : (this.options[f] = a[f]));
                    return this;
                };
                h.prototype.get = function (a) {
                    return this.options[a];
                };
                h.prototype.set = function (a, b) {
                    this.options[a] = b;
                };
                return h;
            });
            a.define("select2/core", ["jquery", "./options", "./utils", "./keys"], function (a, b, c, d) {
                var h = function (a, c) {
                    null != a.data("select2") && a.data("select2").destroy();
                    this.$element = a;
                    this.id = this._generateId(a);
                    c = c || {};
                    this.options = new b(c, a);
                    h.__super__.constructor.call(this);
                    var d = a.attr("tabindex") || 0;
                    a.data("old-tabindex", d);
                    a.attr("tabindex", "-1");
                    this.dataAdapter = new (this.options.get("dataAdapter"))(a, this.options);
                    d = this.render();
                    this._placeContainer(d);
                    this.selection = new (this.options.get("selectionAdapter"))(a, this.options);
                    this.$selection = this.selection.render();
                    this.selection.position(this.$selection, d);
                    this.dropdown = new (this.options.get("dropdownAdapter"))(a, this.options);
                    this.$dropdown = this.dropdown.render();
                    this.dropdown.position(this.$dropdown, d);
                    this.results = new (this.options.get("resultsAdapter"))(a, this.options, this.dataAdapter);
                    this.$results = this.results.render();
                    this.results.position(this.$results, this.$dropdown);
                    var e = this;
                    this._bindAdapters();
                    this._registerDomEvents();
                    this._registerDataEvents();
                    this._registerSelectionEvents();
                    this._registerDropdownEvents();
                    this._registerResultsEvents();
                    this._registerEvents();
                    this.dataAdapter.current(function (a) {
                        e.trigger("selection:update", { data: a });
                    });
                    a.addClass("select2-hidden-accessible");
                    a.attr("aria-hidden", "true");
                    this._syncAttributes();
                    a.data("select2", this);
                };
                c.Extend(h, c.Observable);
                h.prototype._generateId = function (a) {
                    var b = "",
                        b = null != a.attr("id") ? a.attr("id") : null != a.attr("name") ? a.attr("name") + "-" + c.generateChars(2) : c.generateChars(4),
                        b = b.replace(/(:|\.|\[|\]|,)/g, "");
                    return "select2-" + b;
                };
                h.prototype._placeContainer = function (a) {
                    a.insertAfter(this.$element);
                    var b = this._resolveWidth(this.$element, this.options.get("width"));
                    null != b && a.css("width", b);
                };
                h.prototype._resolveWidth = function (a, b) {
                    var c = /^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;
                    if ("resolve" == b) return (c = this._resolveWidth(a, "style")), null != c ? c : this._resolveWidth(a, "element");
                    if ("element" == b) return (c = a.outerWidth(!1)), 0 >= c ? "auto" : c + "px";
                    if ("style" == b) {
                        var d = a.attr("style");
                        if ("string" !== typeof d) return null;
                        for (var d = d.split(";"), e = 0, f = d.length; e < f; e += 1) {
                            var g = d[e].replace(/\s/g, "").match(c);
                            if (null !== g && 1 <= g.length) return g[1];
                        }
                        return null;
                    }
                    return b;
                };
                h.prototype._bindAdapters = function () {
                    this.dataAdapter.bind(this, this.$container);
                    this.selection.bind(this, this.$container);
                    this.dropdown.bind(this, this.$container);
                    this.results.bind(this, this.$container);
                };
                h.prototype._registerDomEvents = function () {
                    var b = this;
                    this.$element.on("change.select2", function () {
                        b.dataAdapter.current(function (a) {
                            b.trigger("selection:update", { data: a });
                        });
                    });
                    this.$element.on("focus.select2", function (a) {
                        b.trigger("focus", a);
                    });
                    this._syncA = c.bind(this._syncAttributes, this);
                    this._syncS = c.bind(this._syncSubtree, this);
                    this.$element[0].attachEvent && this.$element[0].attachEvent("onpropertychange", this._syncA);
                    var d = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;
                    null != d
                        ? ((this._observer = new d(function (c) {
                              a.each(c, b._syncA);
                              a.each(c, b._syncS);
                          })),
                          this._observer.observe(this.$element[0], { attributes: !0, childList: !0, subtree: !1 }))
                        : this.$element[0].addEventListener &&
                          (this.$element[0].addEventListener("DOMAttrModified", b._syncA, !1), this.$element[0].addEventListener("DOMNodeInserted", b._syncS, !1), this.$element[0].addEventListener("DOMNodeRemoved", b._syncS, !1));
                };
                h.prototype._registerDataEvents = function () {
                    var a = this;
                    this.dataAdapter.on("*", function (b, c) {
                        a.trigger(b, c);
                    });
                };
                h.prototype._registerSelectionEvents = function () {
                    var b = this,
                        c = ["toggle", "focus"];
                    this.selection.on("toggle", function () {
                        b.toggleDropdown();
                    });
                    this.selection.on("focus", function (a) {
                        b.focus(a);
                    });
                    this.selection.on("*", function (d, f) {
                        -1 === a.inArray(d, c) && b.trigger(d, f);
                    });
                };
                h.prototype._registerDropdownEvents = function () {
                    var a = this;
                    this.dropdown.on("*", function (b, c) {
                        a.trigger(b, c);
                    });
                };
                h.prototype._registerResultsEvents = function () {
                    var a = this;
                    this.results.on("*", function (b, c) {
                        a.trigger(b, c);
                    });
                };
                h.prototype._registerEvents = function () {
                    var a = this;
                    this.on("open", function () {
                        a.$container.addClass("select2-container--open");
                    });
                    this.on("close", function () {
                        a.$container.removeClass("select2-container--open");
                    });
                    this.on("enable", function () {
                        a.$container.removeClass("select2-container--disabled");
                    });
                    this.on("disable", function () {
                        a.$container.addClass("select2-container--disabled");
                    });
                    this.on("blur", function () {
                        a.$container.removeClass("select2-container--focus");
                    });
                    this.on("query", function (b) {
                        a.isOpen() || a.trigger("open", {});
                        this.dataAdapter.query(b, function (c) {
                            a.trigger("results:all", { data: c, query: b });
                        });
                    });
                    this.on("query:append", function (b) {
                        this.dataAdapter.query(b, function (c) {
                            a.trigger("results:append", { data: c, query: b });
                        });
                    });
                    this.on("keypress", function (b) {
                        var c = b.which;
                        if (a.isOpen())
                            c === d.ESC || c === d.TAB || (c === d.UP && b.altKey)
                                ? (a.close(), b.preventDefault())
                                : c === d.ENTER
                                ? (a.trigger("results:select", {}), b.preventDefault())
                                : c === d.SPACE && b.ctrlKey
                                ? (a.trigger("results:toggle", {}), b.preventDefault())
                                : c === d.UP
                                ? (a.trigger("results:previous", {}), b.preventDefault())
                                : c === d.DOWN && (a.trigger("results:next", {}), b.preventDefault());
                        else if (c === d.ENTER || c === d.SPACE || (c === d.DOWN && b.altKey)) a.open(), b.preventDefault();
                    });
                };
                h.prototype._syncAttributes = function () {
                    this.options.set("disabled", this.$element.prop("disabled"));
                    this.options.get("disabled") ? (this.isOpen() && this.close(), this.trigger("disable", {})) : this.trigger("enable", {});
                };
                h.prototype._syncSubtree = function (a, b) {
                    var c = !1,
                        d = this;
                    if (!a || !a.target || "OPTION" === a.target.nodeName || "OPTGROUP" === a.target.nodeName) {
                        if (b)
                            if (b.addedNodes && 0 < b.addedNodes.length) for (var e = 0; e < b.addedNodes.length; e++) b.addedNodes[e].selected && (c = !0);
                            else b.removedNodes && 0 < b.removedNodes.length && (c = !0);
                        else c = !0;
                        c &&
                            this.dataAdapter.current(function (a) {
                                d.trigger("selection:update", { data: a });
                            });
                    }
                };
                h.prototype.trigger = function (a, b) {
                    var c = h.__super__.trigger,
                        d = { open: "opening", close: "closing", select: "selecting", unselect: "unselecting" };
                    void 0 === b && (b = {});
                    if (a in d) {
                        var e = { prevented: !1, name: a, args: b };
                        c.call(this, d[a], e);
                        if (e.prevented) {
                            b.prevented = !0;
                            return;
                        }
                    }
                    c.call(this, a, b);
                };
                h.prototype.toggleDropdown = function () {
                    this.options.get("disabled") || (this.isOpen() ? this.close() : this.open());
                };
                h.prototype.open = function () {
                    this.isOpen() || this.trigger("query", {});
                };
                h.prototype.close = function () {
                    this.isOpen() && this.trigger("close", {});
                };
                h.prototype.isOpen = function () {
                    return this.$container.hasClass("select2-container--open");
                };
                h.prototype.hasFocus = function () {
                    return this.$container.hasClass("select2-container--focus");
                };
                h.prototype.focus = function (a) {
                    this.hasFocus() || (this.$container.addClass("select2-container--focus"), this.trigger("focus", {}));
                };
                h.prototype.enable = function (a) {
                    this.options.get("debug") &&
                        window.console &&
                        console.warn &&
                        console.warn('Select2: The `select2("enable")` method has been deprecated and will be removed in later Select2 versions. Use $element.prop("disabled") instead.');
                    if (null == a || 0 === a.length) a = [!0];
                    this.$element.prop("disabled", !a[0]);
                };
                h.prototype.data = function () {
                    this.options.get("debug") &&
                        0 < arguments.length &&
                        window.console &&
                        console.warn &&
                        console.warn('Select2: Data can no longer be set using `select2("data")`. You should consider setting the value instead using `$element.val()`.');
                    var a = [];
                    this.dataAdapter.current(function (b) {
                        a = b;
                    });
                    return a;
                };
                h.prototype.val = function (b) {
                    this.options.get("debug") && window.console && console.warn && console.warn('Select2: The `select2("val")` method has been deprecated and will be removed in later Select2 versions. Use $element.val() instead.');
                    if (null == b || 0 === b.length) return this.$element.val();
                    b = b[0];
                    a.isArray(b) &&
                        (b = a.map(b, function (a) {
                            return a.toString();
                        }));
                    this.$element.val(b).trigger("change");
                };
                h.prototype.destroy = function () {
                    this.$container.remove();
                    this.$element[0].detachEvent && this.$element[0].detachEvent("onpropertychange", this._syncA);
                    null != this._observer
                        ? (this._observer.disconnect(), (this._observer = null))
                        : this.$element[0].removeEventListener &&
                          (this.$element[0].removeEventListener("DOMAttrModified", this._syncA, !1),
                          this.$element[0].removeEventListener("DOMNodeInserted", this._syncS, !1),
                          this.$element[0].removeEventListener("DOMNodeRemoved", this._syncS, !1));
                    this._syncS = this._syncA = null;
                    this.$element.off(".select2");
                    this.$element.attr("tabindex", this.$element.data("old-tabindex"));
                    this.$element.removeClass("select2-hidden-accessible");
                    this.$element.attr("aria-hidden", "false");
                    this.$element.removeData("select2");
                    this.dataAdapter.destroy();
                    this.selection.destroy();
                    this.dropdown.destroy();
                    this.results.destroy();
                    this.results = this.dropdown = this.selection = this.dataAdapter = null;
                };
                h.prototype.render = function () {
                    var b = a('<span class="select2 select2-container"><span class="selection"></span><span class="dropdown-wrapper" aria-hidden="true"></span></span>');
                    b.attr("dir", this.options.get("dir"));
                    this.$container = b;
                    this.$container.addClass("select2-container--" + this.options.get("theme"));
                    b.data("element", this.$element);
                    return b;
                };
                return h;
            });
            a.define("jquery-mousewheel", ["jquery"], function (a) {
                return a;
            });
            a.define("jquery.select2", ["jquery", "jquery-mousewheel", "./select2/core", "./select2/defaults"], function (a, b, c, d) {
                if (null == a.fn.select2) {
                    var h = ["open", "close", "destroy"];
                    a.fn.select2 = function (b) {
                        b = b || {};
                        if ("object" === typeof b)
                            return (
                                this.each(function () {
                                    var d = a.extend(!0, {}, b);
                                    new c(a(this), d);
                                }),
                                this
                            );
                        if ("string" === typeof b) {
                            var d,
                                g = Array.prototype.slice.call(arguments, 1);
                            this.each(function () {
                                var c = a(this).data("select2");
                                null == c && window.console && console.error && console.error("The select2('" + b + "') method was called on an element that is not using Select2.");
                                d = c[b].apply(c, g);
                            });
                            return -1 < a.inArray(b, h) ? this : d;
                        }
                        throw Error("Invalid arguments for Select2: " + b);
                    };
                }
                null == a.fn.select2.defaults && (a.fn.select2.defaults = d);
                return c;
            });
            return { define: a.define, require: a.require };
        })(),
        c = a.require("jquery.select2");
    b.fn.select2.amd = a;
    return c;
});
(function (b) {
    "function" === typeof define && define.amd ? define(["jquery"], b) : "object" === typeof exports ? b(require("jquery")) : b(jQuery);
})(function (b) {
    function a(a) {
        a = e.json ? JSON.stringify(a) : String(a);
        return e.raw ? a : encodeURIComponent(a);
    }
    function c(a, c) {
        var k;
        if (e.raw) k = a;
        else
            a: {
                var h = a;
                0 === h.indexOf('"') && (h = h.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, "\\"));
                try {
                    h = decodeURIComponent(h.replace(d, " "));
                    k = e.json ? JSON.parse(h) : h;
                    break a;
                } catch (l) {}
                k = void 0;
            }
        return b.isFunction(c) ? c(k) : k;
    }
    var d = /\+/g,
        e = (b.cookie = function (d, f, k) {
            if (1 < arguments.length && !b.isFunction(f)) {
                k = b.extend({}, e.defaults, k);
                if ("number" === typeof k.expires) {
                    var h = k.expires,
                        l = (k.expires = new Date());
                    l.setTime(+l + 864e5 * h);
                }
                return (document.cookie = [
                    e.raw ? d : encodeURIComponent(d),
                    "=",
                    a(f),
                    k.expires ? "; expires=" + k.expires.toUTCString() : "",
                    k.path ? "; path=" + k.path : "",
                    k.domain ? "; domain=" + k.domain : "",
                    k.secure ? "; secure" : "",
                ].join(""));
            }
            for (var h = d ? void 0 : {}, l = document.cookie ? document.cookie.split("; ") : [], n = 0, q = l.length; n < q; n++) {
                var u = l[n].split("="),
                    v;
                v = u.shift();
                v = e.raw ? v : decodeURIComponent(v);
                u = u.join("=");
                if (d && d === v) {
                    h = c(u, f);
                    break;
                }
                d || void 0 === (u = c(u)) || (h[v] = u);
            }
            return h;
        });
    e.defaults = {};
    b.removeCookie = function (a, c) {
        if (void 0 === b.cookie(a)) return !1;
        b.cookie(a, "", b.extend({}, c, { expires: -1 }));
        return !b.cookie(a);
    };
});
(function (b) {
    "function" === typeof define && define.amd ? define(["jquery"], b) : "object" === typeof module && module.exports ? (module.exports = b(require("jquery"))) : b(window.jQuery);
})(function (b) {
    function a(a, b, c) {
        void 0 === a.selectionStart ? (a.focus(), (a = a.createTextRange()), a.collapse(!0), a.moveEnd("character", c), a.moveStart("character", b), a.select()) : ((a.selectionStart = b), (a.selectionEnd = c));
    }
    function c(a, c) {
        b.each(c, function (b, d) {
            "function" === typeof d ? (c[b] = d(a, c, b)) : "function" === typeof a.autoNumeric[d] && (c[b] = a.autoNumeric[d](a, c, b));
        });
    }
    function d(a, b) {
        "string" === typeof a[b] && (a[b] *= 1);
    }
    function e(a, b) {
        c(a, b);
        b.tagList = "b caption cite code dd del div dfn dt em h1 h2 h3 h4 h5 h6 ins kdb label li output p q s sample span strong td th u var".split(" ");
        var e = b.vMax.toString().split("."),
            f = b.vMin || 0 === b.vMin ? b.vMin.toString().split(".") : [];
        d(b, "vMax");
        d(b, "vMin");
        d(b, "mDec");
        b.mDec = "CHF" === b.mRound ? "2" : b.mDec;
        b.allowLeading = !0;
        b.aNeg = 0 > b.vMin ? "-" : "";
        e[0] = e[0].replace("-", "");
        f[0] = f[0].replace("-", "");
        b.mInt = Math.max(e[0].length, f[0].length, 1);
        if (null === b.mDec) {
            var g = 0,
                h = 0;
            e[1] && (g = e[1].length);
            f[1] && (h = f[1].length);
            b.mDec = Math.max(g, h);
        }
        null === b.altDec && 0 < b.mDec && ("." === b.aDec && "," !== b.aSep ? (b.altDec = ",") : "," === b.aDec && "." !== b.aSep && (b.altDec = "."));
        e = b.aNeg ? "([-\\" + b.aNeg + "]?)" : "(-?)";
        b.aNegRegAutoStrip = e;
        b.skipFirstAutoStrip = new RegExp(e + "[^-" + (b.aNeg ? "\\" + b.aNeg : "") + "\\" + b.aDec + "\\d].*?(\\d|\\" + b.aDec + "\\d)");
        b.skipLastAutoStrip = new RegExp("(\\d\\" + b.aDec + "?)[^\\" + b.aDec + "\\d]\\D*$");
        b.allowedAutoStrip = new RegExp("[^" + ("-" + b.aNum + "\\" + b.aDec) + "]", "gi");
        b.numRegAutoStrip = new RegExp(e + "(?:\\" + b.aDec + "?(\\d+\\" + b.aDec + "\\d+)|(\\d*(?:\\" + b.aDec + "\\d*)?))");
        return b;
    }
    function g(a, b, c) {
        if (b.aSign) for (; -1 < a.indexOf(b.aSign); ) a = a.replace(b.aSign, "");
        a = a.replace(b.skipFirstAutoStrip, "$1$2");
        a = a.replace(b.skipLastAutoStrip, "$1");
        a = a.replace(b.allowedAutoStrip, "");
        b.altDec && (a = a.replace(b.altDec, b.aDec));
        a = (a = a.match(b.numRegAutoStrip)) ? [a[1], a[2], a[3]].join("") : "";
        if (("allow" === b.lZero || "keep" === b.lZero) && "strip" !== c) {
            var d = [],
                e = "",
                d = a.split(b.aDec);
            -1 !== d[0].indexOf("-") && ((e = "-"), (d[0] = d[0].replace("-", "")));
            d[0].length > b.mInt && "0" === d[0].charAt(0) && (d[0] = d[0].slice(1));
            a = e + d.join(b.aDec);
        }
        if ((c && "deny" === b.lZero) || (c && "allow" === b.lZero && !1 === b.allowLeading)) (b = "^" + b.aNegRegAutoStrip + "0*(\\d" + ("leading" === c ? ")" : "|$)")), (b = new RegExp(b)), (a = a.replace(b, "$1$2"));
        return a;
    }
    function f(a, b) {
        if ("p" === b.pSign) {
            var c = b.nBracket.split(",");
            if (!b.hasFocus && !b.removeBrackets) (a = a.replace(b.aNeg, "")), (a = c[0] + a + c[1]);
            else if ((b.hasFocus && a.charAt(0) === c[0]) || (b.removeBrackets && a.charAt(0) === c[0])) (a = a.replace(c[0], b.aNeg)), (a = a.replace(c[1], ""));
        }
        return a;
    }
    function k(a, b) {
        if (a) {
            var c = +a;
            1e-6 > c && -1 < c
                ? ((a = +a), 1e-6 > a && 0 < a && ((a = (a + 10).toString()), (a = a.substring(1))), 0 > a && -1 < a && ((a = (a - 10).toString()), (a = "-" + a.substring(2))), (a = a.toString()))
                : ((c = a.split(".")), void 0 !== c[1] && (0 === +c[1] ? (a = c[0]) : ((c[1] = c[1].replace(/0*$/, "")), (a = c.join(".")))));
        }
        return "keep" === b.lZero ? a : a.replace(/^0*(\d)/, "$1");
    }
    function h(a, b, c) {
        b && "." !== b && (a = a.replace(b, "."));
        c && "-" !== c && (a = a.replace(c, "-"));
        a.match(/\d/) || (a += "0");
        return a;
    }
    function l(a, b, c) {
        c && "-" !== c && (a = a.replace("-", c));
        b && "." !== b && (a = a.replace(".", b));
        return a;
    }
    function n(a, b, c) {
        return "" === a || a === b.aNeg ? ("zero" === b.wEmpty ? a + "0" : "sign" === b.wEmpty || c ? a + b.aSign : a) : null;
    }
    function q(a, b) {
        a = g(a, b);
        var c = a.replace(",", "."),
            d = n(a, b, !0);
        if (null !== d) return d;
        var d = "",
            d = 2 === b.dGroup ? /(\d)((\d)(\d{2}?)+)$/ : 4 === b.dGroup ? /(\d)((\d{4}?)+)$/ : /(\d)((\d{3}?)+)$/,
            e = a.split(b.aDec);
        b.altDec && 1 === e.length && (e = a.split(b.altDec));
        var h = e[0];
        if (b.aSep) for (; d.test(h); ) h = h.replace(d, "$1" + b.aSep + "$2");
        0 !== b.mDec && 1 < e.length ? (e[1].length > b.mDec && (e[1] = e[1].substring(0, b.mDec)), (a = h + b.aDec + e[1])) : (a = h);
        b.aSign && ((d = -1 !== a.indexOf(b.aNeg)), (a = a.replace(b.aNeg, "")), (a = "p" === b.pSign ? b.aSign + a : a + b.aSign), d && (a = b.aNeg + a));
        0 > c && null !== b.nBracket && (a = f(a, b));
        return a;
    }
    function u(a, b) {
        a = "" === a ? "0" : a.toString();
        d(b, "mDec");
        "CHF" === b.mRound && (a = (Math.round(20 * a) / 20).toString());
        var c = "",
            e = 0,
            f = "",
            g = "boolean" === typeof b.aPad || null === b.aPad ? (b.aPad ? b.mDec : 0) : +b.aPad,
            h = function (a) {
                a = a.replace(0 === g ? /(\.(?:\d*[1-9])?)0*$/ : 1 === g ? /(\.\d(?:\d*[1-9])?)0*$/ : new RegExp("(\\.\\d{" + g + "}(?:\\d*[1-9])?)0*$"), "$1");
                0 === g && (a = a.replace(/\.$/, ""));
                return a;
            };
        "-" === a.charAt(0) && ((f = "-"), (a = a.replace("-", "")));
        a.match(/^\d/) || (a = "0" + a);
        "-" === f && 0 === +a && (f = "");
        if ((0 < +a && "keep" !== b.lZero) || (0 < a.length && "allow" === b.lZero)) a = a.replace(/^0*(\d)/, "$1");
        var k = a.lastIndexOf("."),
            l = a.length - 1 - (-1 === k ? a.length - 1 : k);
        if (l <= b.mDec) {
            c = a;
            if (l < g) for (-1 === k && (c += b.aDec), e = "000000"; l < g; ) (e = e.substring(0, g - l)), (c += e), (l += e.length);
            else l > g ? (c = h(c)) : 0 === l && 0 === g && (c = c.replace(/\.$/, ""));
            if ("CHF" !== b.mRound) return 0 === +c ? c : f + c;
            "CHF" === b.mRound && ((k = c.lastIndexOf(".")), (a = c));
        }
        var c = k + b.mDec,
            e = +a.charAt(c + 1),
            k = a.substring(0, c + 1).split(""),
            n = "." === a.charAt(c) ? a.charAt(c - 1) % 2 : a.charAt(c) % 2,
            l = !0;
        1 !== n && (n = 0 === n && 0 < a.substring(c + 2, a.length) ? 1 : 0);
        if (
            (4 < e && "S" === b.mRound) ||
            (4 < e && "A" === b.mRound && "" === f) ||
            (5 < e && "A" === b.mRound && "-" === f) ||
            (5 < e && "s" === b.mRound) ||
            (5 < e && "a" === b.mRound && "" === f) ||
            (4 < e && "a" === b.mRound && "-" === f) ||
            (5 < e && "B" === b.mRound) ||
            (5 === e && "B" === b.mRound && 1 === n) ||
            (0 < e && "C" === b.mRound && "" === f) ||
            (0 < e && "F" === b.mRound && "-" === f) ||
            (0 < e && "U" === b.mRound) ||
            "CHF" === b.mRound
        )
            for (e = k.length - 1; 0 <= e; --e)
                if ("." !== k[e]) {
                    if ("CHF" === b.mRound && 2 >= k[e] && l) {
                        k[e] = 0;
                        l = !1;
                        break;
                    }
                    if ("CHF" === b.mRound && 7 >= k[e] && l) {
                        k[e] = 5;
                        l = !1;
                        break;
                    }
                    "CHF" === b.mRound && l ? ((k[e] = 10), (l = !1)) : (k[e] = +k[e] + 1);
                    if (10 > k[e]) break;
                    0 < e && (k[e] = "0");
                }
        k = k.slice(0, c + 1);
        c = h(k.join(""));
        return 0 === +c ? c : f + c;
    }
    function v(a, b, c) {
        var d = b.aDec,
            e = b.mDec;
        a = "paste" === c ? u(a, b) : a;
        d && e && ((b = a.split(d)), b[1] && b[1].length > e && (0 < e ? ((b[1] = b[1].substring(0, e)), (a = b.join(d))) : (a = b[0])));
        return a;
    }
    function w(a, b) {
        a = g(a, b);
        a = v(a, b);
        a = h(a, b.aDec, b.aNeg);
        var c = +a;
        return c >= b.vMin && c <= b.vMax;
    }
    function t(a, c) {
        this.settings = c;
        this.that = a;
        this.$that = b(a);
        this.formatted = !1;
        this.settingsClone = e(this.$that, this.settings);
        this.value = a.value;
    }
    function y(a) {
        "string" === typeof a && ((a = a.replace(/\[/g, "\\[").replace(/\]/g, "\\]")), (a = "#" + a.replace(/(:|\.)/g, "\\$1")));
        return b(a);
    }
    function p(a, b, c) {
        var d = a.data("autoNumeric");
        d || ((d = {}), a.data("autoNumeric", d));
        var e = d.holder;
        if ((void 0 === e && b) || c) (e = new t(a.get(0), b)), (d.holder = e);
        return e;
    }
    t.prototype = {
        init: function (a) {
            this.value = this.that.value;
            this.settingsClone = e(this.$that, this.settings);
            this.ctrlKey = a.ctrlKey;
            this.cmdKey = a.metaKey;
            this.shiftKey = a.shiftKey;
            var b = this.that,
                c = {};
            if (void 0 === b.selectionStart) {
                b.focus();
                var d = document.selection.createRange();
                c.length = d.text.length;
                d.moveStart("character", -b.value.length);
                c.end = d.text.length;
                c.start = c.end - c.length;
            } else (c.start = b.selectionStart), (c.end = b.selectionEnd), (c.length = c.end - c.start);
            this.selection = c;
            if ("keydown" === a.type || "keyup" === a.type) this.kdCode = a.keyCode;
            this.which = a.which;
            this.formatted = this.processed = !1;
        },
        setSelection: function (b, c, d) {
            b = Math.max(b, 0);
            c = Math.min(c, this.that.value.length);
            this.selection = { start: b, end: c, length: c - b };
            (void 0 === d || d) && a(this.that, b, c);
        },
        setPosition: function (a, b) {
            this.setSelection(a, a, b);
        },
        getBeforeAfter: function () {
            var a = this.value,
                b = a.substring(0, this.selection.start),
                a = a.substring(this.selection.end, a.length);
            return [b, a];
        },
        getBeforeAfterStriped: function () {
            var a = this.getBeforeAfter();
            a[0] = g(a[0], this.settingsClone);
            a[1] = g(a[1], this.settingsClone);
            return a;
        },
        normalizeParts: function (a, b) {
            var c = this.settingsClone;
            b = g(b, c);
            var d = b.match(/^\d/) ? !0 : "leading";
            a = g(a, c, d);
            ("" !== a && a !== c.aNeg) || "deny" !== c.lZero || ("" < b && (b = b.replace(/^0*(\d)/, "$1")));
            d = a + b;
            if (c.aDec) {
                var e = d.match(new RegExp("^" + c.aNegRegAutoStrip + "\\" + c.aDec));
                e && ((a = a.replace(e[1], e[1] + "0")), (d = a + b));
            }
            "zero" !== c.wEmpty || (d !== c.aNeg && "" !== d) || (a += "0");
            return [a, b];
        },
        setValueParts: function (a, b, c) {
            var d = this.settingsClone;
            b = this.normalizeParts(a, b);
            a = b.join("");
            b = b[0].length;
            return w(a, d) ? ((a = v(a, d, c)), b > a.length && (b = a.length), (this.value = a), this.setPosition(b, !1), !0) : !1;
        },
        signPosition: function () {
            var a = this.settingsClone,
                b = a.aSign,
                c = this.that;
            if (b) {
                b = b.length;
                if ("p" === a.pSign) return a.aNeg && c.value && c.value.charAt(0) === a.aNeg ? [1, b + 1] : [0, b];
                a = c.value.length;
                return [a - b, a];
            }
            return [1e3, -1];
        },
        expandSelectionOnSign: function (a) {
            var b = this.signPosition(),
                c = this.selection;
            c.start < b[1] &&
                c.end > b[0] &&
                ((c.start < b[0] || c.end > b[1]) && this.value.substring(Math.max(c.start, b[0]), Math.min(c.end, b[1])).match(/^\s*$/)
                    ? c.start < b[0]
                        ? this.setSelection(c.start, b[0], a)
                        : this.setSelection(b[1], c.end, a)
                    : this.setSelection(Math.min(c.start, b[0]), Math.max(c.end, b[1]), a));
        },
        checkPaste: function () {
            if (void 0 !== this.valuePartsBeforePaste) {
                var a = this.getBeforeAfter(),
                    b = this.valuePartsBeforePaste;
                delete this.valuePartsBeforePaste;
                a[0] = a[0].substr(0, b[0].length) + g(a[0].substr(b[0].length), this.settingsClone);
                this.setValueParts(a[0], a[1], "paste") || ((this.value = b.join("")), this.setPosition(b[0].length, !1));
            }
        },
        skipAllways: function (a) {
            var b = this.kdCode,
                c = this.which,
                d = this.ctrlKey,
                e = this.cmdKey,
                f = this.shiftKey;
            if (((d || e) && "keyup" === a.type && void 0 !== this.valuePartsBeforePaste) || (f && 45 === b)) return this.checkPaste(), !1;
            if ((112 <= b && 123 >= b) || (91 <= b && 93 >= b) || (9 <= b && 31 >= b) || (8 > b && (0 === c || c === b)) || 144 === b || 145 === b || 45 === b || 224 === b) return !0;
            if ((d || e) && 65 === b) return !0;
            if ((d || e) && (67 === b || 86 === b || 88 === b)) {
                "keydown" === a.type && this.expandSelectionOnSign();
                if (86 === b || 45 === b) "keydown" === a.type || "keypress" === a.type ? void 0 === this.valuePartsBeforePaste && (this.valuePartsBeforePaste = this.getBeforeAfter()) : this.checkPaste();
                return "keydown" === a.type || "keypress" === a.type || 67 === b;
            }
            return d || e
                ? !0
                : 37 === b || 39 === b
                ? ((c = this.settingsClone.aSep),
                  (d = this.selection.start),
                  (e = this.that.value),
                  "keydown" === a.type && c && !this.shiftKey && (37 === b && e.charAt(d - 2) === c ? this.setPosition(d - 1) : 39 === b && e.charAt(d + 1) === c && this.setPosition(d + 1)),
                  !0)
                : 34 <= b && 40 >= b
                ? !0
                : !1;
        },
        processAllways: function () {
            var a;
            return 8 === this.kdCode || 46 === this.kdCode
                ? (this.selection.length
                      ? (this.expandSelectionOnSign(!1), (a = this.getBeforeAfterStriped()))
                      : ((a = this.getBeforeAfterStriped()), 8 === this.kdCode ? (a[0] = a[0].substring(0, a[0].length - 1)) : (a[1] = a[1].substring(1, a[1].length))),
                  this.setValueParts(a[0], a[1]),
                  !0)
                : !1;
        },
        processKeypress: function () {
            var a = this.settingsClone,
                b = String.fromCharCode(this.which),
                c = this.getBeforeAfterStriped(),
                d = c[0],
                c = c[1];
            if (b === a.aDec || (a.altDec && b === a.altDec) || (("." === b || "," === b) && 110 === this.kdCode)) {
                if (!a.mDec || !a.aDec || (a.aNeg && -1 < c.indexOf(a.aNeg)) || -1 < d.indexOf(a.aDec) || 0 < c.indexOf(a.aDec)) return !0;
                0 === c.indexOf(a.aDec) && (c = c.substr(1));
                this.setValueParts(d + a.aDec, c);
                return !0;
            }
            if ("-" === b || "+" === b) {
                if (!a.aNeg) return !0;
                "" === d && -1 < c.indexOf(a.aNeg) && ((d = a.aNeg), (c = c.substring(1, c.length)));
                d = d.charAt(0) === a.aNeg ? d.substring(1, d.length) : "-" === b ? a.aNeg + d : d;
                this.setValueParts(d, c);
                return !0;
            }
            "0" <= b &&
                "9" >= b &&
                (a.aNeg && "" === d && -1 < c.indexOf(a.aNeg) && ((d = a.aNeg), (c = c.substring(1, c.length))),
                0 >= a.vMax && a.vMin < a.vMax && -1 === this.value.indexOf(a.aNeg) && "0" !== b && (d = a.aNeg + d),
                this.setValueParts(d + b, c));
            return !0;
        },
        formatQuick: function () {
            var a = this.settingsClone,
                b = this.getBeforeAfterStriped(),
                c = this.value;
            if (("" === a.aSep || ("" !== a.aSep && -1 === c.indexOf(a.aSep))) && ("" === a.aSign || ("" !== a.aSign && -1 === c.indexOf(a.aSign)))) {
                var d = [],
                    e = "",
                    d = c.split(a.aDec);
                -1 < d[0].indexOf("-") && ((e = "-"), (d[0] = d[0].replace("-", "")), (b[0] = b[0].replace("-", "")));
                d[0].length > a.mInt && "0" === b[0].charAt(0) && (b[0] = b[0].slice(1));
                b[0] = e + b[0];
            }
            c = q(this.value, this.settingsClone);
            d = c.length;
            if (c) {
                b = b[0].split("");
                e = 0;
                for (e; e < b.length; e += 1) b[e].match("\\d") || (b[e] = "\\" + b[e]);
                b = new RegExp("^.*?" + b.join(".*?"));
                (b = c.match(b))
                    ? ((d = b[0].length), ((0 === d && c.charAt(0) !== a.aNeg) || (1 === d && c.charAt(0) === a.aNeg)) && a.aSign && "p" === a.pSign && (d = this.settingsClone.aSign.length + ("-" === c.charAt(0) ? 1 : 0)))
                    : a.aSign && "s" === a.pSign && (d -= a.aSign.length);
            }
            this.that.value !== c && ((this.that.value = c), this.setPosition(d));
            this.formatted = !0;
        },
    };
    var C = {
        init: function (c) {
            return this.each(function () {
                var d = b(this),
                    e = d.data("autoNumeric"),
                    k = d.data(),
                    t = d.is("input[type=text], input[type=hidden], input[type=tel], input:not([type])");
                if ("object" !== typeof e)
                    (e = b.extend({}, b.fn.autoNumeric.defaults, k, c, {
                        aNum: "0123456789",
                        hasFocus: !1,
                        removeBrackets: !1,
                        runOnce: !1,
                        tagList: "b caption cite code dd del div dfn dt em h1 h2 h3 h4 h5 h6 ins kdb label li output p q s sample span strong td th u var".split(" "),
                    })),
                        e.aDec === e.aSep && b.error("autoNumeric will not function properly when the decimal character aDec: '" + e.aDec + "' and thousand separator aSep: '" + e.aSep + "' are the same character"),
                        d.data("autoNumeric", e);
                else return this;
                var v = p(d, e);
                t || "input" !== d.prop("tagName").toLowerCase() || b.error('The input type "' + d.prop("type") + '" is not supported by autoNumeric()');
                -1 === b.inArray(d.prop("tagName").toLowerCase(), e.tagList) && "input" !== d.prop("tagName").toLowerCase() && b.error("The <" + d.prop("tagName").toLowerCase() + "> is not supported by autoNumeric()");
                !1 === e.runOnce &&
                    e.aForm &&
                    (t &&
                        ((k = !0),
                        "" === d[0].value && "empty" === e.wEmpty && ((d[0].value = ""), (k = !1)),
                        "" === d[0].value && "sign" === e.wEmpty && ((d[0].value = e.aSign), (k = !1)),
                        k && "" !== d.val() && ((null === e.anDefault && d[0].value === d.prop("defaultValue")) || (null !== e.anDefault && e.anDefault.toString() === d.val())) && d.autoNumeric("set", d.val())),
                    -1 !== b.inArray(d.prop("tagName").toLowerCase(), e.tagList) && "" !== d.text() && d.autoNumeric("set", d.text()));
                e.runOnce = !0;
                d.is("input[type=text], input[type=hidden], input[type=tel], input:not([type])") &&
                    (d.on("keydown.autoNumeric", function (a) {
                        v = p(d);
                        v.settings.aDec === v.settings.aSep &&
                            b.error("autoNumeric will not function properly when the decimal character aDec: '" + v.settings.aDec + "' and thousand separator aSep: '" + v.settings.aSep + "' are the same character");
                        if (v.that.readOnly) return (v.processed = !0);
                        v.init(a);
                        if (v.skipAllways(a)) return (v.processed = !0);
                        if (v.processAllways()) return (v.processed = !0), v.formatQuick(), a.preventDefault(), !1;
                        v.formatted = !1;
                        return !0;
                    }),
                    d.on("keypress.autoNumeric", function (a) {
                        v = p(d);
                        var b = v.processed;
                        v.init(a);
                        if (v.skipAllways(a)) return !0;
                        if (b) return a.preventDefault(), !1;
                        if (v.processAllways() || v.processKeypress()) return v.formatQuick(), a.preventDefault(), !1;
                        v.formatted = !1;
                    }),
                    d.on("keyup.autoNumeric", function (b) {
                        v = p(d);
                        v.init(b);
                        b = v.skipAllways(b);
                        var c = v.kdCode;
                        v.kdCode = 0;
                        delete v.valuePartsBeforePaste;
                        d[0].value === v.settings.aSign ? ("s" === v.settings.pSign ? a(this, 0, 0) : a(this, v.settings.aSign.length, v.settings.aSign.length)) : 9 === c && a(this, 0, d.val().length);
                        if (b || "" === this.value) return !0;
                        v.formatted || v.formatQuick();
                    }),
                    d.on("focusin.autoNumeric", function () {
                        v = p(d);
                        var a = v.settingsClone;
                        a.hasFocus = !0;
                        if (null !== a.nBracket) {
                            var b = d.val();
                            d.val(f(b, a));
                        }
                        v.inVal = d.val();
                        a = n(v.inVal, a, !0);
                        null !== a && "" !== a && d.val(a);
                    }),
                    d.on("focusout.autoNumeric", function () {
                        v = p(d);
                        var a = v.settingsClone,
                            b = d.val(),
                            c = b;
                        a.hasFocus = !1;
                        var e = "";
                        "allow" === a.lZero && ((a.allowLeading = !1), (e = "leading"));
                        "" !== b && ((b = g(b, a, e)), null === n(b, a) && w(b, a, d[0]) ? ((b = h(b, a.aDec, a.aNeg)), (b = u(b, a)), (b = l(b, a.aDec, a.aNeg))) : (b = ""));
                        e = n(b, a, !1);
                        null === e && (e = q(b, a));
                        if (e !== v.inVal || e !== c) d.val(e), d.change(), delete v.inVal;
                    }));
            });
        },
        destroy: function () {
            return b(this).each(function () {
                var a = b(this);
                a.removeData("autoNumeric");
                a.off(".autoNumeric");
            });
        },
        update: function (a) {
            return b(this).each(function () {
                var c = y(b(this)),
                    d = c.data("autoNumeric");
                "object" !== typeof d && b.error("You must initialize autoNumeric('init', {options}) prior to calling the 'update' method");
                var e = c.autoNumeric("get"),
                    d = b.extend(d, a);
                p(c, d, !0);
                d.aDec === d.aSep && b.error("autoNumeric will not function properly when the decimal character aDec: '" + d.aDec + "' and thousand separator aSep: '" + d.aSep + "' are the same character");
                c.data("autoNumeric", d);
                if ("" !== c.val() || "" !== c.text()) return c.autoNumeric("set", e);
            });
        },
        set: function (a) {
            if (null !== a && !isNaN(a))
                return b(this).each(function () {
                    var c = y(b(this)),
                        d = c.data("autoNumeric"),
                        e = a.toString(),
                        f = a.toString(),
                        g = c.is("input[type=text], input[type=hidden], input[type=tel], input:not([type])");
                    "object" !== typeof d && b.error("You must initialize autoNumeric('init', {options}) prior to calling the 'set' method");
                    (f !== c.attr("value") && f !== c.text()) || !1 !== d.runOnce || (e = e.replace(",", "."));
                    b.isNumeric(+e) || b.error("The value (" + e + ") being 'set' is not numeric and has caused a error to be thrown");
                    e = k(e, d);
                    d.setEvent = !0;
                    e.toString();
                    "" !== e && (e = u(e, d));
                    e = l(e, d.aDec, d.aNeg);
                    w(e, d) || (e = u("", d));
                    e = q(e, d);
                    return g ? c.val(e) : -1 !== b.inArray(c.prop("tagName").toLowerCase(), d.tagList) ? c.text(e) : !1;
                });
        },
        get: function () {
            var a = y(b(this)),
                c = a.data("autoNumeric");
            "object" !== typeof c && b.error("You must initialize autoNumeric('init', {options}) prior to calling the 'get' method");
            var d = "";
            a.is("input[type=text], input[type=hidden], input[type=tel], input:not([type])")
                ? (d = a.eq(0).val())
                : -1 !== b.inArray(a.prop("tagName").toLowerCase(), c.tagList)
                ? (d = a.eq(0).text())
                : b.error("The <" + a.prop("tagName").toLowerCase() + "> is not supported by autoNumeric()");
            if (("" === d && "empty" === c.wEmpty) || (d === c.aSign && ("sign" === c.wEmpty || "empty" === c.wEmpty))) return "";
            "" !== d && null !== c.nBracket && ((c.removeBrackets = !0), (d = f(d, c)), (c.removeBrackets = !1));
            if (c.runOnce || !1 === c.aForm) d = g(d, c);
            d = h(d, c.aDec, c.aNeg);
            0 === +d && "keep" !== c.lZero && (d = "0");
            return "keep" === c.lZero ? d : (d = k(d, c));
        },
        getString: function () {
            var a = !1,
                c = y(b(this)),
                d = c.serialize().split("&"),
                e = b("form").index(c),
                c = b("form:eq(" + e + ")"),
                f = [],
                g = [],
                h = /^(?:submit|button|image|reset|file)$/i,
                k = /^(?:input|select|textarea|keygen)/i,
                l = /^(?:checkbox|radio)$/i,
                n = /^(?:button|checkbox|color|date|datetime|datetime-local|email|file|image|month|number|password|radio|range|reset|search|submit|time|url|week)/i,
                p = 0;
            b.each(c[0], function (a, b) {
                "" === b.name || !k.test(b.localName) || h.test(b.type) || b.disabled || (!b.checked && l.test(b.type)) ? g.push(-1) : (g.push(p), (p += 1));
            });
            p = 0;
            b.each(c[0], function (a, b) {
                "input" !== b.localName || ("" !== b.type && "text" !== b.type && "hidden" !== b.type && "tel" !== b.type) ? (f.push(-1), "input" === b.localName && n.test(b.type) && (p += 1)) : (f.push(p), (p += 1));
            });
            b.each(d, function (c, h) {
                h = d[c].split("=");
                var k = b.inArray(c, g);
                -1 < k &&
                    -1 < f[k] &&
                    "object" === typeof b("form:eq(" + e + ") input:eq(" + f[k] + ")").data("autoNumeric") &&
                    null !== h[1] &&
                    ((h[1] = b("form:eq(" + e + ") input:eq(" + f[k] + ")")
                        .autoNumeric("get")
                        .toString()),
                    (d[c] = h.join("=")),
                    (a = !0));
            });
            a || b.error("You must initialize autoNumeric('init', {options}) prior to calling the 'getString' method");
            return d.join("&");
        },
        getArray: function () {
            var a = !1,
                c = y(b(this)),
                d = c.serializeArray(),
                e = b("form").index(c),
                c = b("form:eq(" + e + ")"),
                f = [],
                g = [],
                h = /^(?:submit|button|image|reset|file)$/i,
                k = /^(?:input|select|textarea|keygen)/i,
                l = /^(?:checkbox|radio)$/i,
                n = /^(?:button|checkbox|color|date|datetime|datetime-local|email|file|image|month|number|password|radio|range|reset|search|submit|time|url|week)/i,
                p = 0;
            b.each(c[0], function (a, b) {
                "" === b.name || !k.test(b.localName) || h.test(b.type) || b.disabled || (!b.checked && l.test(b.type)) ? g.push(-1) : (g.push(p), (p += 1));
            });
            p = 0;
            b.each(c[0], function (a, b) {
                "input" !== b.localName || ("" !== b.type && "text" !== b.type && "hidden" !== b.type && "tel" !== b.type) ? (f.push(-1), "input" === b.localName && n.test(b.type) && (p += 1)) : (f.push(p), (p += 1));
            });
            b.each(d, function (c, d) {
                var h = b.inArray(c, g);
                -1 < h &&
                    -1 < f[h] &&
                    "object" === typeof b("form:eq(" + e + ") input:eq(" + f[h] + ")").data("autoNumeric") &&
                    ((d.value = b("form:eq(" + e + ") input:eq(" + f[h] + ")")
                        .autoNumeric("get")
                        .toString()),
                    (a = !0));
            });
            a || b.error("None of the successful form inputs are initialized by autoNumeric.");
            return d;
        },
        getSettings: function () {
            return y(b(this)).eq(0).data("autoNumeric");
        },
    };
    b.fn.autoNumeric = function (a) {
        if (C[a]) return C[a].apply(this, Array.prototype.slice.call(arguments, 1));
        if ("object" === typeof a || !a) return C.init.apply(this, arguments);
        b.error('Method "' + a + '" is not supported by autoNumeric()');
    };
    b.fn.autoNumeric.defaults = {
        aSep: ",",
        dGroup: "3",
        aDec: ".",
        altDec: null,
        aSign: "",
        pSign: "p",
        vMax: "9999999999999.99",
        vMin: "-9999999999999.99",
        mDec: null,
        mRound: "S",
        aPad: !0,
        nBracket: null,
        wEmpty: "empty",
        lZero: "allow",
        sNumber: !0,
        aForm: !0,
        anDefault: null,
    };
});
(function (b, a) {
    "object" === typeof exports && "undefined" !== typeof module ? a(exports) : "function" === typeof define && define.amd ? define(["exports"], a) : a((b.d3 = b.d3 || {}));
})(this, function (b) {
    function a(a) {
        return function (b, c) {
            return td(a(b), c);
        };
    }
    function c(a, b) {
        return [a, b];
    }
    function d(a, b, c) {
        b = (b - a) / Math.max(0, c);
        a = Math.floor(Math.log(b) / Math.LN10);
        b /= Math.pow(10, a);
        return 0 <= a ? (b >= dh ? 10 : b >= eh ? 5 : b >= fh ? 2 : 1) * Math.pow(10, a) : -Math.pow(10, -a) / (b >= dh ? 10 : b >= eh ? 5 : b >= fh ? 2 : 1);
    }
    function e(a, b, c) {
        var d = Math.abs(b - a) / Math.max(0, c);
        c = Math.pow(10, Math.floor(Math.log(d) / Math.LN10));
        d /= c;
        d >= dh ? (c *= 10) : d >= eh ? (c *= 5) : d >= fh && (c *= 2);
        return b < a ? -c : c;
    }
    function g(a) {
        return a.length;
    }
    function f(a) {
        return "translate(" + (a + 0.5) + ",0)";
    }
    function k(a) {
        return "translate(0," + (a + 0.5) + ")";
    }
    function h(a) {
        var b = Math.max(0, a.bandwidth() - 1) / 2;
        a.round() && (b = Math.round(b));
        return function (c) {
            return a(c) + b;
        };
    }
    function l() {
        return !this.__axis;
    }
    function n(a, b) {
        function c(f) {
            var db = null == e ? (b.ticks ? b.ticks.apply(b, d) : b.domain()) : e,
                k = null == g ? (b.tickFormat ? b.tickFormat.apply(b, d) : xj) : g,
                t = Math.max(m, 0) + p,
                r = b.range(),
                v = r[0] + 0.5,
                r = r[r.length - 1] + 0.5,
                P = (b.bandwidth ? h : xj)(b.copy()),
                ud = f.selection ? f.selection() : f,
                w = ud.selectAll(".domain").data([null]),
                db = ud.selectAll(".tick").data(db, b).order(),
                u = db.exit(),
                y = db.enter().append("g").attr("class", "tick"),
                x = db.select("line"),
                z = db.select("text"),
                w = w.merge(w.enter().insert("path", ".tick").attr("class", "domain").attr("stroke", "#000")),
                db = db.merge(y),
                x = x.merge(
                    y
                        .append("line")
                        .attr("stroke", "#000")
                        .attr(F + "2", q * m)
                ),
                z = z.merge(
                    y
                        .append("text")
                        .attr("fill", "#000")
                        .attr(F, q * t)
                        .attr("dy", 1 === a ? "0em" : 3 === a ? "0.71em" : "0.32em")
                );
            f !== ud &&
                ((w = w.transition(f)),
                (db = db.transition(f)),
                (x = x.transition(f)),
                (z = z.transition(f)),
                (u = u
                    .transition(f)
                    .attr("opacity", 1e-6)
                    .attr("transform", function (a) {
                        return isFinite((a = P(a))) ? Je(a) : this.getAttribute("transform");
                    })),
                y.attr("opacity", 1e-6).attr("transform", function (a) {
                    var b = this.parentNode.__axis;
                    return Je(b && isFinite((b = b(a))) ? b : P(a));
                }));
            u.remove();
            w.attr("d", 4 === a || 2 == a ? "M" + q * n + "," + v + "H0.5V" + r + "H" + q * n : "M" + v + "," + q * n + "V0.5H" + r + "V" + q * n);
            db.attr("opacity", 1).attr("transform", function (a) {
                return Je(P(a));
            });
            x.attr(F + "2", q * m);
            z.attr(F, q * t).text(k);
            ud.filter(l)
                .attr("fill", "none")
                .attr("font-size", 10)
                .attr("font-family", "sans-serif")
                .attr("text-anchor", 2 === a ? "start" : 4 === a ? "end" : "middle");
            ud.each(function () {
                this.__axis = P;
            });
        }
        var d = [],
            e = null,
            g = null,
            m = 6,
            n = 6,
            p = 3,
            q = 1 === a || 4 === a ? -1 : 1,
            F = 4 === a || 2 === a ? "x" : "y",
            Je = 1 === a || 3 === a ? f : k;
        c.scale = function (a) {
            return arguments.length ? ((b = a), c) : b;
        };
        c.ticks = function () {
            return (d = gh.call(arguments)), c;
        };
        c.tickArguments = function (a) {
            return arguments.length ? ((d = null == a ? [] : gh.call(a)), c) : d.slice();
        };
        c.tickValues = function (a) {
            return arguments.length ? ((e = null == a ? null : gh.call(a)), c) : e && e.slice();
        };
        c.tickFormat = function (a) {
            return arguments.length ? ((g = a), c) : g;
        };
        c.tickSize = function (a) {
            return arguments.length ? ((m = n = +a), c) : m;
        };
        c.tickSizeInner = function (a) {
            return arguments.length ? ((m = +a), c) : m;
        };
        c.tickSizeOuter = function (a) {
            return arguments.length ? ((n = +a), c) : n;
        };
        c.tickPadding = function (a) {
            return arguments.length ? ((p = +a), c) : p;
        };
        return c;
    }
    function q() {
        for (var a = 0, b = arguments.length, c = {}, d; a < b; ++a) {
            if (!(d = arguments[a] + "") || d in c) throw Error("illegal type: " + d);
            c[d] = [];
        }
        return new u(c);
    }
    function u(a) {
        this._ = a;
    }
    function v(a, b) {
        return a
            .trim()
            .split(/^|\s+/)
            .map(function (a) {
                var c = "",
                    d = a.indexOf(".");
                0 <= d && ((c = a.slice(d + 1)), (a = a.slice(0, d)));
                if (a && !b.hasOwnProperty(a)) throw Error("unknown type: " + a);
                return { type: a, name: c };
            });
    }
    function w(a, b, c) {
        for (var d = 0, e = a.length; d < e; ++d)
            if (a[d].name === b) {
                a[d] = fo;
                a = a.slice(0, d).concat(a.slice(d + 1));
                break;
            }
        null != c && a.push({ name: b, value: c });
        return a;
    }
    function t(a) {
        return function () {
            var b = this.ownerDocument,
                c = this.namespaceURI;
            return "http://www.w3.org/1999/xhtml" === c && "http://www.w3.org/1999/xhtml" === b.documentElement.namespaceURI ? b.createElement(a) : b.createElementNS(c, a);
        };
    }
    function y(a) {
        return function () {
            return this.ownerDocument.createElementNS(a.space, a.local);
        };
    }
    function p() {
        return new C();
    }
    function C() {
        this._ = "@" + (++go).toString(36);
    }
    function r(a, b, c) {
        a = x(a, b, c);
        return function (b) {
            var c = b.relatedTarget;
            (c && (c === this || c.compareDocumentPosition(this) & 8)) || a.call(this, b);
        };
    }
    function x(a, c, d) {
        return function (e) {
            var f = b.event;
            b.event = e;
            try {
                a.call(this, this.__data__, c, d);
            } finally {
                b.event = f;
            }
        };
    }
    function z(a) {
        return a
            .trim()
            .split(/^|\s+/)
            .map(function (a) {
                var b = "",
                    c = a.indexOf(".");
                0 <= c && ((b = a.slice(c + 1)), (a = a.slice(0, c)));
                return { type: a, name: b };
            });
    }
    function B(a) {
        return function () {
            var b = this.__on;
            if (b) {
                for (var c = 0, d = -1, e = b.length, f; c < e; ++c) ((f = b[c]), (a.type && f.type !== a.type) || f.name !== a.name) ? (b[++d] = f) : this.removeEventListener(f.type, f.listener, f.capture);
                ++d ? (b.length = d) : delete this.__on;
            }
        };
    }
    function G(a, b, c) {
        var d = zj.hasOwnProperty(a.type) ? r : x;
        return function (e, f, g) {
            e = this.__on;
            var h;
            f = d(b, f, g);
            if (e) {
                g = 0;
                for (var k = e.length; g < k; ++g)
                    if ((h = e[g]).type === a.type && h.name === a.name) {
                        this.removeEventListener(h.type, h.listener, h.capture);
                        this.addEventListener(h.type, (h.listener = f), (h.capture = c));
                        h.value = b;
                        return;
                    }
            }
            this.addEventListener(a.type, f, c);
            h = { type: a.type, name: a.name, value: b, listener: f, capture: c };
            e ? e.push(h) : (this.__on = [h]);
        };
    }
    function H(a, c, d, e) {
        var f = b.event;
        a.sourceEvent = b.event;
        b.event = a;
        try {
            return c.apply(d, e);
        } finally {
            b.event = f;
        }
    }
    function J() {}
    function A() {
        return [];
    }
    function ea(a, b) {
        this.ownerDocument = a.ownerDocument;
        this.namespaceURI = a.namespaceURI;
        this._next = null;
        this._parent = a;
        this.__data__ = b;
    }
    function ga(a, b, c, d, e, f) {
        for (var g = 0, h, k = b.length, l = f.length; g < l; ++g) (h = b[g]) ? ((h.__data__ = f[g]), (d[g] = h)) : (c[g] = new ea(a, f[g]));
        for (; g < k; ++g) if ((h = b[g])) e[g] = h;
    }
    function ha(a, b, c, d, e, f, g) {
        var h,
            k,
            l = {},
            F = b.length,
            m = f.length,
            n = Array(F),
            p;
        for (h = 0; h < F; ++h) if ((k = b[h])) (n[h] = p = "$" + g.call(k, k.__data__, h, b)), p in l ? (e[h] = k) : (l[p] = k);
        for (h = 0; h < m; ++h) (p = "$" + g.call(a, f[h], h, f)), (k = l[p]) ? ((d[h] = k), (k.__data__ = f[h]), (l[p] = null)) : (c[h] = new ea(a, f[h]));
        for (h = 0; h < F; ++h) (k = b[h]) && l[n[h]] === k && (e[h] = k);
    }
    function va(a, b) {
        return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }
    function L(a) {
        return function () {
            this.removeAttribute(a);
        };
    }
    function pa(a) {
        return function () {
            this.removeAttributeNS(a.space, a.local);
        };
    }
    function wa(a, b) {
        return function () {
            this.setAttribute(a, b);
        };
    }
    function Ba(a, b) {
        return function () {
            this.setAttributeNS(a.space, a.local, b);
        };
    }
    function W(a, b) {
        return function () {
            var c = b.apply(this, arguments);
            null == c ? this.removeAttribute(a) : this.setAttribute(a, c);
        };
    }
    function ra(a, b) {
        return function () {
            var c = b.apply(this, arguments);
            null == c ? this.removeAttributeNS(a.space, a.local) : this.setAttributeNS(a.space, a.local, c);
        };
    }
    function Q(a) {
        return function () {
            this.style.removeProperty(a);
        };
    }
    function I(a, b, c) {
        return function () {
            this.style.setProperty(a, b, c);
        };
    }
    function Ca(a, b, c) {
        return function () {
            var d = b.apply(this, arguments);
            null == d ? this.style.removeProperty(a) : this.style.setProperty(a, d, c);
        };
    }
    function M(a, b) {
        return a.style.getPropertyValue(b) || hh(a).getComputedStyle(a, null).getPropertyValue(b);
    }
    function ma(a) {
        return function () {
            delete this[a];
        };
    }
    function za(a, b) {
        return function () {
            this[a] = b;
        };
    }
    function ta(a, b) {
        return function () {
            var c = b.apply(this, arguments);
            null == c ? delete this[a] : (this[a] = c);
        };
    }
    function aa(a) {
        return a.classList || new ca(a);
    }
    function ca(a) {
        this._node = a;
        this._names = (a.getAttribute("class") || "").trim().split(/^|\s+/);
    }
    function Ka(a, b) {
        for (var c = aa(a), d = -1, e = b.length; ++d < e; ) c.add(b[d]);
    }
    function Sa(a, b) {
        for (var c = aa(a), d = -1, e = b.length; ++d < e; ) c.remove(b[d]);
    }
    function na(a) {
        return function () {
            Ka(this, a);
        };
    }
    function T(a) {
        return function () {
            Sa(this, a);
        };
    }
    function bc(a, b) {
        return function () {
            (b.apply(this, arguments) ? Ka : Sa)(this, a);
        };
    }
    function ab() {
        this.textContent = "";
    }
    function vb(a) {
        return function () {
            this.textContent = a;
        };
    }
    function Gb(a) {
        return function () {
            var b = a.apply(this, arguments);
            this.textContent = null == b ? "" : b;
        };
    }
    function hb() {
        this.innerHTML = "";
    }
    function Hb(a) {
        return function () {
            this.innerHTML = a;
        };
    }
    function zc(a) {
        return function () {
            var b = a.apply(this, arguments);
            this.innerHTML = null == b ? "" : b;
        };
    }
    function cc() {
        this.nextSibling && this.parentNode.appendChild(this);
    }
    function Ac() {
        this.previousSibling && this.parentNode.insertBefore(this, this.parentNode.firstChild);
    }
    function dc() {
        return null;
    }
    function la() {
        var a = this.parentNode;
        a && a.removeChild(this);
    }
    function m(a, b, c) {
        var d = hh(a),
            e = d.CustomEvent;
        "function" === typeof e ? (e = new e(b, c)) : ((e = d.document.createEvent("Event")), c ? (e.initEvent(b, c.bubbles, c.cancelable), (e.detail = c.detail)) : e.initEvent(b, !1, !1));
        a.dispatchEvent(e);
    }
    function Mc(a, b) {
        return function () {
            return m(this, a, b);
        };
    }
    function ec(a, b) {
        return function () {
            return m(this, a, b.apply(this, arguments));
        };
    }
    function N(a, b) {
        this._groups = a;
        this._parents = b;
    }
    function wb() {
        return new N([[document.documentElement]], ih);
    }
    function Aa(a, b) {
        var c = a.document.documentElement,
            d = Pb(a).on("dragstart.drag", null);
        b &&
            (d.on("click.drag", Od, !0),
            setTimeout(function () {
                d.on("click.drag", null);
            }, 0));
        if ("onselectstart" in c) d.on("selectstart.drag", null);
        else (c.style.MozUserSelect = c.__noselect), delete c.__noselect;
    }
    function xb(a, b, c, d, e, f, g, h, k, l) {
        this.target = a;
        this.type = b;
        this.subject = c;
        this.identifier = d;
        this.active = e;
        this.x = f;
        this.y = g;
        this.dx = h;
        this.dy = k;
        this._ = l;
    }
    function bb() {
        return !b.event.button;
    }
    function cb() {
        return this.parentNode;
    }
    function pc(a) {
        return null == a ? { x: b.event.x, y: b.event.y } : a;
    }
    function Ra(a, b) {
        var c = Object.create(a.prototype),
            d;
        for (d in b) c[d] = b[d];
        return c;
    }
    function Ib() {}
    function jb(a) {
        var b;
        a = (a + "").trim().toLowerCase();
        return (b = ho.exec(a))
            ? ((b = parseInt(b[1], 16)), new Da(((b >> 8) & 15) | ((b >> 4) & 240), ((b >> 4) & 15) | (b & 240), ((b & 15) << 4) | (b & 15), 1))
            : (b = io.exec(a))
            ? gd(parseInt(b[1], 16))
            : (b = jo.exec(a))
            ? new Da(b[1], b[2], b[3], 1)
            : (b = ko.exec(a))
            ? new Da((255 * b[1]) / 100, (255 * b[2]) / 100, (255 * b[3]) / 100, 1)
            : (b = lo.exec(a))
            ? hd(b[1], b[2], b[3], b[4])
            : (b = mo.exec(a))
            ? hd((255 * b[1]) / 100, (255 * b[2]) / 100, (255 * b[3]) / 100, b[4])
            : (b = no.exec(a))
            ? yb(b[1], b[2] / 100, b[3] / 100, 1)
            : (b = oo.exec(a))
            ? yb(b[1], b[2] / 100, b[3] / 100, b[4])
            : Aj.hasOwnProperty(a)
            ? gd(Aj[a])
            : "transparent" === a
            ? new Da(NaN, NaN, NaN, 0)
            : null;
    }
    function gd(a) {
        return new Da((a >> 16) & 255, (a >> 8) & 255, a & 255, 1);
    }
    function hd(a, b, c, d) {
        0 >= d && (a = b = c = NaN);
        return new Da(a, b, c, d);
    }
    function X(a) {
        a instanceof Ib || (a = jb(a));
        if (!a) return new Da();
        a = a.rgb();
        return new Da(a.r, a.g, a.b, a.opacity);
    }
    function qc(a, b, c, d) {
        return 1 === arguments.length ? X(a) : new Da(a, b, c, null == d ? 1 : d);
    }
    function Da(a, b, c, d) {
        this.r = +a;
        this.g = +b;
        this.b = +c;
        this.opacity = +d;
    }
    function yb(a, b, c, d) {
        0 >= d ? (a = b = c = NaN) : 0 >= c || 1 <= c ? (a = b = NaN) : 0 >= b && (a = NaN);
        return new ua(a, b, c, d);
    }
    function Bc(a) {
        if (a instanceof ua) return new ua(a.h, a.s, a.l, a.opacity);
        a instanceof Ib || (a = jb(a));
        if (!a) return new ua();
        if (a instanceof ua) return a;
        a = a.rgb();
        var b = a.r / 255,
            c = a.g / 255,
            d = a.b / 255,
            e = Math.min(b, c, d),
            f = Math.max(b, c, d),
            g = NaN,
            h = f - e,
            k = (f + e) / 2;
        h ? ((g = b === f ? (c - d) / h + 6 * (c < d) : c === f ? (d - b) / h + 2 : (b - c) / h + 4), (h /= 0.5 > k ? f + e : 2 - f - e), (g *= 60)) : (h = 0 < k && 1 > k ? 0 : g);
        return new ua(g, h, k, a.opacity);
    }
    function U(a, b, c, d) {
        return 1 === arguments.length ? Bc(a) : new ua(a, b, c, null == d ? 1 : d);
    }
    function ua(a, b, c, d) {
        this.h = +a;
        this.s = +b;
        this.l = +c;
        this.opacity = +d;
    }
    function mc(a, b, c) {
        return 255 * (60 > a ? b + ((c - b) * a) / 60 : 180 > a ? c : 240 > a ? b + ((c - b) * (240 - a)) / 60 : b);
    }
    function Jc(a) {
        if (a instanceof ib) return new ib(a.l, a.a, a.b, a.opacity);
        if (a instanceof Ga) {
            var b = a.h * Bj;
            return new ib(a.l, Math.cos(b) * a.c, Math.sin(b) * a.c, a.opacity);
        }
        a instanceof Da || (a = X(a));
        var c = wc(a.r),
            d = wc(a.g),
            e = wc(a.b),
            b = pb((0.4124564 * c + 0.3575761 * d + 0.1804375 * e) / 0.95047),
            f = pb((0.2126729 * c + 0.7151522 * d + 0.072175 * e) / 1),
            c = pb((0.0193339 * c + 0.119192 * d + 0.9503041 * e) / 1.08883);
        return new ib(116 * f - 16, 500 * (b - f), 200 * (f - c), a.opacity);
    }
    function Vb(a, b, c, d) {
        return 1 === arguments.length ? Jc(a) : new ib(a, b, c, null == d ? 1 : d);
    }
    function ib(a, b, c, d) {
        this.l = +a;
        this.a = +b;
        this.b = +c;
        this.opacity = +d;
    }
    function pb(a) {
        return a > po ? Math.pow(a, 1 / 3) : a / Cj + Dj;
    }
    function ub(a) {
        return a > Pd ? a * a * a : Cj * (a - Dj);
    }
    function kb(a) {
        return 255 * (0.0031308 >= a ? 12.92 * a : 1.055 * Math.pow(a, 1 / 2.4) - 0.055);
    }
    function wc(a) {
        return 0.04045 >= (a /= 255) ? a / 12.92 : Math.pow((a + 0.055) / 1.055, 2.4);
    }
    function gc(a, b, c, d) {
        var e;
        if (1 === arguments.length)
            if (((e = a), e instanceof Ga)) e = new Ga(e.h, e.c, e.l, e.opacity);
            else {
                e instanceof ib || (e = Jc(e));
                var f = Math.atan2(e.b, e.a) * Ej;
                e = new Ga(0 > f ? f + 360 : f, Math.sqrt(e.a * e.a + e.b * e.b), e.l, e.opacity);
            }
        else e = new Ga(a, b, c, null == d ? 1 : d);
        return e;
    }
    function Ga(a, b, c, d) {
        this.h = +a;
        this.c = +b;
        this.l = +c;
        this.opacity = +d;
    }
    function fa(a, b, c, d) {
        var e;
        if (1 === arguments.length)
            if (((e = a), e instanceof Ja)) e = new Ja(e.h, e.s, e.l, e.opacity);
            else {
                e instanceof Da || (e = X(e));
                var f = e.g / 255,
                    g = e.b / 255,
                    h = (Fj * g + (e.r / 255) * -1.7884503806 - 3.5172982438 * f) / (Fj + -1.7884503806 - 3.5172982438),
                    g = g - h,
                    k = (1.97294 * (f - h) - -0.29227 * g) / -0.90649,
                    g = (f = Math.sqrt(k * k + g * g) / (1.97294 * h * (1 - h))) ? Math.atan2(k, g) * Ej - 120 : NaN;
                e = new Ja(0 > g ? g + 360 : g, f, h, e.opacity);
            }
        else e = new Ja(a, b, c, null == d ? 1 : d);
        return e;
    }
    function Ja(a, b, c, d) {
        this.h = +a;
        this.s = +b;
        this.l = +c;
        this.opacity = +d;
    }
    function Kc(a, b, c, d, e) {
        var f = a * a,
            g = f * a;
        return ((1 - 3 * a + 3 * f - g) * b + (4 - 6 * f + 3 * g) * c + (1 + 3 * a + 3 * f - 3 * g) * d + g * e) / 6;
    }
    function Ta(a, b) {
        return function (c) {
            return a + c * b;
        };
    }
    function jd(a, b, c) {
        return (
            (a = Math.pow(a, c)),
            (b = Math.pow(b, c) - a),
            (c = 1 / c),
            function (d) {
                return Math.pow(a + d * b, c);
            }
        );
    }
    function Oc(a, b) {
        var c = b - a;
        return c ? Ta(a, 180 < c || -180 > c ? c - 360 * Math.round(c / 360) : c) : Df(isNaN(a) ? b : a);
    }
    function kd(a) {
        return 1 === (a = +a)
            ? E
            : function (b, c) {
                  return c - b ? jd(b, c, a) : Df(isNaN(b) ? c : b);
              };
    }
    function E(a, b) {
        var c = b - a;
        return c ? Ta(a, c) : Df(isNaN(a) ? b : a);
    }
    function La(a) {
        return function (b) {
            var c = b.length,
                d = Array(c),
                e = Array(c),
                f = Array(c),
                g,
                h;
            for (g = 0; g < c; ++g) (h = qc(b[g])), (d[g] = h.r || 0), (e[g] = h.g || 0), (f[g] = h.b || 0);
            d = a(d);
            e = a(e);
            f = a(f);
            h.opacity = 1;
            return function (a) {
                h.r = d(a);
                h.g = e(a);
                h.b = f(a);
                return h + "";
            };
        };
    }
    function ia(a) {
        return function () {
            return a;
        };
    }
    function V(a) {
        return function (b) {
            return a(b) + "";
        };
    }
    function ya(a, b, c, d) {
        function e(a) {
            return a.length ? a.pop() + " " : "";
        }
        function f(a, d, e, g, Na, h) {
            a !== e || d !== g ? ((Na = Na.push("translate(", null, b, null, c)), h.push({ i: Na - 4, x: Qb(a, e) }, { i: Na - 2, x: Qb(d, g) })) : (e || g) && Na.push("translate(" + e + b + g + c);
        }
        function g(a, b, c, f) {
            a !== b ? (180 < a - b ? (b += 360) : 180 < b - a && (a += 360), f.push({ i: c.push(e(c) + "rotate(", null, d) - 2, x: Qb(a, b) })) : b && c.push(e(c) + "rotate(" + b + d);
        }
        function h(a, b, c, f) {
            a !== b ? f.push({ i: c.push(e(c) + "skewX(", null, d) - 2, x: Qb(a, b) }) : b && c.push(e(c) + "skewX(" + b + d);
        }
        function k(a, b, c, d, f, g) {
            a !== c || b !== d ? ((f = f.push(e(f) + "scale(", null, ",", null, ")")), g.push({ i: f - 4, x: Qb(a, c) }, { i: f - 2, x: Qb(b, d) })) : (1 === c && 1 === d) || f.push(e(f) + "scale(" + c + "," + d + ")");
        }
        return function (b, c) {
            var d = [],
                e = [];
            b = a(b);
            c = a(c);
            f(b.translateX, b.translateY, c.translateX, c.translateY, d, e);
            g(b.rotate, c.rotate, d, e);
            h(b.skewX, c.skewX, d, e);
            k(b.scaleX, b.scaleY, c.scaleX, c.scaleY, d, e);
            b = c = null;
            return function (a) {
                for (var b = -1, c = e.length, f; ++b < c; ) d[(f = e[b]).i] = f.x(a);
                return d.join("");
            };
        };
    }
    function yc(a) {
        return ((a = Math.exp(a)) + 1 / a) / 2;
    }
    function xc(a) {
        return function (b, c) {
            var d = a((b = U(b)).h, (c = U(c)).h),
                e = E(b.s, c.s),
                f = E(b.l, c.l),
                g = E(b.opacity, c.opacity);
            return function (a) {
                b.h = d(a);
                b.s = e(a);
                b.l = f(a);
                b.opacity = g(a);
                return b + "";
            };
        };
    }
    function Tb(a) {
        return function (b, c) {
            var d = a((b = gc(b)).h, (c = gc(c)).h),
                e = E(b.c, c.c),
                f = E(b.l, c.l),
                g = E(b.opacity, c.opacity);
            return function (a) {
                b.h = d(a);
                b.c = e(a);
                b.l = f(a);
                b.opacity = g(a);
                return b + "";
            };
        };
    }
    function Jd(a) {
        return (function db(b) {
            function c(d, e) {
                var f = a((d = fa(d)).h, (e = fa(e)).h),
                    g = E(d.s, e.s),
                    h = E(d.l, e.l),
                    db = E(d.opacity, e.opacity);
                return function (a) {
                    d.h = f(a);
                    d.s = g(a);
                    d.l = h(Math.pow(a, b));
                    d.opacity = db(a);
                    return d + "";
                };
            }
            b = +b;
            c.gamma = db;
            return c;
        })(1);
    }
    function hc() {
        return Tc || (Gj(Ee), (Tc = jh.now() + Ef));
    }
    function Ee() {
        Tc = 0;
    }
    function Wb() {
        this._call = this._time = this._next = null;
    }
    function ob(a, b, c) {
        var d = new Wb();
        d.restart(a, b, c);
        return d;
    }
    function Lc() {
        hc();
        ++Qd;
        for (var a = Ff, b; a; ) 0 <= (b = Tc - a._time) && a._call.call(null, b), (a = a._next);
        --Qd;
    }
    function Ub() {
        Tc = (Gf = jh.now()) + Ef;
        Qd = Ke = 0;
        try {
            Lc();
        } finally {
            Qd = 0;
            for (var a, b = Ff, c, d = Infinity; b; ) b._call ? (d > b._time && (d = b._time), (a = b), (b = b._next)) : ((c = b._next), (b._next = null), (b = a ? (a._next = c) : (Ff = c)));
            Le = a;
            Pc(d);
            Tc = 0;
        }
    }
    function nc() {
        var a = jh.now(),
            b = a - Gf;
        1e3 < b && ((Ef -= b), (Gf = a));
    }
    function Pc(a) {
        if (!Qd) {
            Ke && (Ke = clearTimeout(Ke));
            var b = a - Tc;
            24 < b ? (Infinity > a && (Ke = setTimeout(Ub, b)), Me && (Me = clearInterval(Me))) : (Me || ((Gf = Tc), (Me = setInterval(nc, 1e3))), (Qd = 1), Gj(Ub));
        }
    }
    function lb(a, b) {
        var c = a.__transition;
        if (!c || !(c = c[b]) || 0 < c.state) throw Error("too late");
        return c;
    }
    function qb(a, b) {
        var c = a.__transition;
        if (!c || !(c = c[b]) || 2 < c.state) throw Error("too late");
        return c;
    }
    function Ua(a, b) {
        var c = a.__transition;
        if (!c || !(c = c[b])) throw Error("too late");
        return c;
    }
    function Kd(a, b, c) {
        function d(k) {
            var l, F, m, n;
            if (1 !== c.state) return f();
            for (l in g)
                if (((n = g[l]), n.name === c.name)) {
                    if (3 === n.state) return kh(d);
                    4 === n.state ? ((n.state = 6), n.timer.stop(), n.on.call("interrupt", a, a.__data__, n.index, n.group), delete g[l]) : +l < b && ((n.state = 6), n.timer.stop(), delete g[l]);
                }
            kh(function () {
                3 === c.state && ((c.state = 4), c.timer.restart(e, c.delay, c.time), e(k));
            });
            c.state = 2;
            c.on.call("start", a, a.__data__, c.index, c.group);
            if (2 === c.state) {
                c.state = 3;
                h = Array((m = c.tween.length));
                l = 0;
                for (F = -1; l < m; ++l) if ((n = c.tween[l].value.call(a, a.__data__, c.index, c.group))) h[++F] = n;
                h.length = F + 1;
            }
        }
        function e(b) {
            b = b < c.duration ? c.ease.call(null, b / c.duration) : (c.timer.restart(f), (c.state = 5), 1);
            for (var d = -1, g = h.length; ++d < g; ) h[d].call(null, b);
            5 === c.state && (c.on.call("end", a, a.__data__, c.index, c.group), f());
        }
        function f() {
            c.state = 6;
            c.timer.stop();
            delete g[b];
            for (var d in g) return;
            delete a.__transition;
        }
        var g = a.__transition,
            h;
        g[b] = c;
        c.timer = ob(
            function (a) {
                c.state = 1;
                c.timer.restart(d, c.delay, c.time);
                c.delay <= a && d(a - c.delay);
            },
            0,
            c.time
        );
    }
    function ld(a, b) {
        var c, d;
        return function () {
            var e = qb(this, a),
                f = e.tween;
            if (f !== c) {
                d = c = f;
                for (var f = 0, g = d.length; f < g; ++f)
                    if (d[f].name === b) {
                        d = d.slice();
                        d.splice(f, 1);
                        break;
                    }
            }
            e.tween = d;
        };
    }
    function mb(a, b, c) {
        var d, e;
        if ("function" !== typeof c) throw Error();
        return function () {
            var f = qb(this, a),
                g = f.tween;
            if (g !== d) {
                e = (d = g).slice();
                for (var g = { name: b, value: c }, h = 0, k = e.length; h < k; ++h)
                    if (e[h].name === b) {
                        e[h] = g;
                        break;
                    }
                h === k && e.push(g);
            }
            f.tween = e;
        };
    }
    function Xb(a, b, c) {
        var d = a._id;
        a.each(function () {
            var a = qb(this, d);
            (a.value || (a.value = {}))[b] = c.apply(this, arguments);
        });
        return function (a) {
            return Ua(a, d).value[b];
        };
    }
    function Jb(a) {
        return function () {
            this.removeAttribute(a);
        };
    }
    function Cc(a) {
        return function () {
            this.removeAttributeNS(a.space, a.local);
        };
    }
    function md(a, b, c) {
        var d, e;
        return function () {
            var f = this.getAttribute(a);
            return f === c ? null : f === d ? e : (e = b((d = f), c));
        };
    }
    function Be(a, b, c) {
        var d, e;
        return function () {
            var f = this.getAttributeNS(a.space, a.local);
            return f === c ? null : f === d ? e : (e = b((d = f), c));
        };
    }
    function nd(a, b, c) {
        var d, e, f;
        return function () {
            var g,
                h = c(this);
            if (null == h) return void this.removeAttribute(a);
            g = this.getAttribute(a);
            return g === h ? null : g === d && h === e ? f : (f = b((d = g), (e = h)));
        };
    }
    function Va(a, b, c) {
        var d, e, f;
        return function () {
            var g,
                h = c(this);
            if (null == h) return void this.removeAttributeNS(a.space, a.local);
            g = this.getAttributeNS(a.space, a.local);
            return g === h ? null : g === d && h === e ? f : (f = b((d = g), (e = h)));
        };
    }
    function Fe(a, b) {
        function c() {
            var d = this,
                e = b.apply(d, arguments);
            return (
                e &&
                function (b) {
                    d.setAttributeNS(a.space, a.local, e(b));
                }
            );
        }
        c._value = b;
        return c;
    }
    function Ge(a, b) {
        function c() {
            var d = this,
                e = b.apply(d, arguments);
            return (
                e &&
                function (b) {
                    d.setAttribute(a, e(b));
                }
            );
        }
        c._value = b;
        return c;
    }
    function Ld(a, b) {
        return function () {
            lb(this, a).delay = +b.apply(this, arguments);
        };
    }
    function od(a, b) {
        return (
            (b = +b),
            function () {
                lb(this, a).delay = b;
            }
        );
    }
    function pd(a, b) {
        return function () {
            qb(this, a).duration = +b.apply(this, arguments);
        };
    }
    function qd(a, b) {
        return (
            (b = +b),
            function () {
                qb(this, a).duration = b;
            }
        );
    }
    function Qc(a, b) {
        if ("function" !== typeof b) throw Error();
        return function () {
            qb(this, a).ease = b;
        };
    }
    function Md(a) {
        return (a + "")
            .trim()
            .split(/^|\s+/)
            .every(function (a) {
                var b = a.indexOf(".");
                0 <= b && (a = a.slice(0, b));
                return !a || "start" === a;
            });
    }
    function ed(a, b, c) {
        var d,
            e,
            f = Md(b) ? lb : qb;
        return function () {
            var g = f(this, a),
                h = g.on;
            if (h !== d) (e = (d = h).copy()).on(b, c);
            g.on = e;
        };
    }
    function Rc(a) {
        return function () {
            var b = this.parentNode,
                c;
            for (c in this.__transition) if (+c !== a) return;
            b && b.removeChild(this);
        };
    }
    function Sc(a, b) {
        var c, d, e;
        return function () {
            var f = M(this, a),
                g = (this.style.removeProperty(a), M(this, a));
            return f === g ? null : f === c && g === d ? e : (e = b((c = f), (d = g)));
        };
    }
    function He(a) {
        return function () {
            this.style.removeProperty(a);
        };
    }
    function Dc(a, b, c) {
        var d, e;
        return function () {
            var f = M(this, a);
            return f === c ? null : f === d ? e : (e = b((d = f), c));
        };
    }
    function rd(a, b, c) {
        var d, e, f;
        return function () {
            var g = M(this, a),
                h = c(this);
            null == h && (h = (this.style.removeProperty(a), M(this, a)));
            return g === h ? null : g === d && h === e ? f : (f = b((d = g), (e = h)));
        };
    }
    function sd(a, b, c) {
        function d() {
            var e = this,
                f = b.apply(e, arguments);
            return (
                f &&
                function (b) {
                    e.style.setProperty(a, f(b), c);
                }
            );
        }
        d._value = b;
        return d;
    }
    function Ie(a) {
        return function () {
            this.textContent = a;
        };
    }
    function Nd(a) {
        return function () {
            var b = a(this);
            this.textContent = null == b ? "" : b;
        };
    }
    function sa(a, b, c, d) {
        this._groups = a;
        this._parents = b;
        this._name = c;
        this._id = d;
    }
    function D(a) {
        return wb().transition(a);
    }
    function O(a) {
        return (1 >= (a *= 2) ? a * a : --a * (2 - a) + 1) / 2;
    }
    function Z(a) {
        return (1 >= (a *= 2) ? a * a * a : (a -= 2) * a * a + 2) / 2;
    }
    function Qa(a) {
        return (1 - Math.cos(Hj * a)) / 2;
    }
    function Mb(a) {
        return (1 >= (a *= 2) ? Math.pow(2, 10 * a - 10) : 2 - Math.pow(2, 10 - 10 * a)) / 2;
    }
    function da(a) {
        return (1 >= (a *= 2) ? 1 - Math.sqrt(1 - a * a) : Math.sqrt(1 - (a -= 2) * a) + 1) / 2;
    }
    function ze(a) {
        return (a = +a) < lh ? Hf * a * a : a < qo ? Hf * (a -= ro) * a + 0.75 : a < so ? Hf * (a -= to) * a + 0.9375 : Hf * (a -= uo) * a + 0.984375;
    }
    function vc(a) {
        return { type: a };
    }
    function qn() {
        return !b.event.button;
    }
    function rn() {
        var a = this.ownerSVGElement || this;
        return [
            [0, 0],
            [a.width.baseVal.value, a.height.baseVal.value],
        ];
    }
    function Ae(a) {
        for (; !a.__brush; ) if (!(a = a.parentNode)) return;
        return a.__brush;
    }
    function Tg(a) {
        return a[0][0] === a[1][0] || a[0][1] === a[1][1];
    }
    function Ug(a) {
        function c(b) {
            var e = b
                .property("__brush", h)
                .selectAll(".overlay")
                .data([vc("overlay")]);
            e.enter()
                .append("rect")
                .attr("class", "overlay")
                .attr("pointer-events", "all")
                .attr("cursor", Ec.overlay)
                .merge(e)
                .each(function () {
                    var a = Ae(this).extent;
                    Pb(this)
                        .attr("x", a[0][0])
                        .attr("y", a[0][1])
                        .attr("width", a[1][0] - a[0][0])
                        .attr("height", a[1][1] - a[0][1]);
                });
            b.selectAll(".selection")
                .data([vc("selection")])
                .enter()
                .append("rect")
                .attr("class", "selection")
                .attr("cursor", Ec.selection)
                .attr("fill", "#777")
                .attr("fill-opacity", 0.3)
                .attr("stroke", "#fff")
                .attr("shape-rendering", "crispEdges");
            e = b.selectAll(".handle").data(a.handles, function (a) {
                return a.type;
            });
            e.exit().remove();
            e.enter()
                .append("rect")
                .attr("class", function (a) {
                    return "handle handle--" + a.type;
                })
                .attr("cursor", function (a) {
                    return Ec[a.type];
                });
            b.each(d).attr("fill", "none").attr("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush touchstart.brush", g);
        }
        function d() {
            var a = Pb(this),
                b = Ae(this).selection;
            b
                ? (a
                      .selectAll(".selection")
                      .style("display", null)
                      .attr("x", b[0][0])
                      .attr("y", b[0][1])
                      .attr("width", b[1][0] - b[0][0])
                      .attr("height", b[1][1] - b[0][1]),
                  a
                      .selectAll(".handle")
                      .style("display", null)
                      .attr("x", function (a) {
                          return "e" === a.type[a.type.length - 1] ? b[1][0] - F / 2 : b[0][0] - F / 2;
                      })
                      .attr("y", function (a) {
                          return "s" === a.type[0] ? b[1][1] - F / 2 : b[0][1] - F / 2;
                      })
                      .attr("width", function (a) {
                          return "n" === a.type || "s" === a.type ? b[1][0] - b[0][0] + F : F;
                      })
                      .attr("height", function (a) {
                          return "e" === a.type || "w" === a.type ? b[1][1] - b[0][1] + F : F;
                      }))
                : a.selectAll(".selection,.handle").style("display", "none").attr("x", null).attr("y", null).attr("width", null).attr("height", null);
        }
        function e(a, b) {
            return a.__brush.emitter || new f(a, b);
        }
        function f(a, b) {
            this.that = a;
            this.args = b;
            this.state = a.__brush;
            this.active = 0;
        }
        function g() {
            function c() {
                var a = Uc(F);
                !x || z || C || (Math.abs(a[0] - A[0]) > Math.abs(a[1] - A[1]) ? (C = !0) : (z = !0));
                A = a;
                y = !0;
                If();
                f();
            }
            function f() {
                var a;
                eb = A[0] - B[0];
                Wa = A[1] - B[1];
                switch (m) {
                    case mh:
                    case Ij:
                        Ea && ((eb = Math.max(K - ba, Math.min(t - Za, eb))), (Xa = ba + eb), (r = Za + eb));
                        p && ((Wa = Math.max(Kb - ja, Math.min(v - w, Wa))), (rb = ja + Wa), (u = w + Wa));
                        break;
                    case Rd:
                        0 > Ea ? ((eb = Math.max(K - ba, Math.min(t - ba, eb))), (Xa = ba + eb), (r = Za)) : 0 < Ea && ((eb = Math.max(K - Za, Math.min(t - Za, eb))), (Xa = ba), (r = Za + eb));
                        0 > p ? ((Wa = Math.max(Kb - ja, Math.min(v - ja, Wa))), (rb = ja + Wa), (u = w)) : 0 < p && ((Wa = Math.max(Kb - w, Math.min(v - w, Wa))), (rb = ja), (u = w + Wa));
                        break;
                    case Sd:
                        Ea && ((Xa = Math.max(K, Math.min(t, ba - eb * Ea))), (r = Math.max(K, Math.min(t, Za + eb * Ea)))), p && ((rb = Math.max(Kb, Math.min(v, ja - Wa * p))), (u = Math.max(Kb, Math.min(v, w + Wa * p))));
                }
                r < Xa && ((Ea *= -1), (a = ba), (ba = Za), (Za = a), (a = Xa), (Xa = r), (r = a), nb in Jj && H.attr("cursor", Ec[(nb = Jj[nb])]));
                u < rb && ((p *= -1), (a = ja), (ja = w), (w = a), (a = rb), (rb = u), (u = a), nb in Kj && H.attr("cursor", Ec[(nb = Kj[nb])]));
                ic.selection && (Oa = ic.selection);
                z && ((Xa = Oa[0][0]), (r = Oa[1][0]));
                C && ((rb = Oa[0][1]), (u = Oa[1][1]));
                if (Oa[0][0] !== Xa || Oa[0][1] !== rb || Oa[1][0] !== r || Oa[1][1] !== u)
                    (ic.selection = [
                        [Xa, rb],
                        [r, u],
                    ]),
                        d.call(F),
                        G.brush();
            }
            function h() {
                b.event.stopImmediatePropagation();
                if (b.event.touches) {
                    if (b.event.touches.length) return;
                    n && clearTimeout(n);
                    n = setTimeout(function () {
                        n = null;
                    }, 500);
                    D.on("touchmove.brush touchend.brush touchcancel.brush", null);
                } else Aa(b.event.view, y), J.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);
                D.attr("pointer-events", "all");
                H.attr("cursor", Ec.overlay);
                ic.selection && (Oa = ic.selection);
                Tg(Oa) && ((ic.selection = null), d.call(F));
                G.end();
            }
            function oa() {
                switch (b.event.keyCode) {
                    case 16:
                        x = Ea && p;
                        break;
                    case 18:
                        m === Rd && (Ea && ((Za = r - eb * Ea), (ba = Xa + eb * Ea)), p && ((w = u - Wa * p), (ja = rb + Wa * p)), (m = Sd), f());
                        break;
                    case 32:
                        if (m === Rd || m === Sd) 0 > Ea ? (Za = r - eb) : 0 < Ea && (ba = Xa - eb), 0 > p ? (w = u - Wa) : 0 < p && (ja = rb - Wa), (m = mh), H.attr("cursor", Ec.selection), f();
                        break;
                    default:
                        return;
                }
                If();
            }
            function k() {
                switch (b.event.keyCode) {
                    case 16:
                        x && ((z = C = x = !1), f());
                        break;
                    case 18:
                        m === Sd && (0 > Ea ? (Za = r) : 0 < Ea && (ba = Xa), 0 > p ? (w = u) : 0 < p && (ja = rb), (m = Rd), f());
                        break;
                    case 32:
                        m === mh &&
                            (b.event.altKey
                                ? (Ea && ((Za = r - eb * Ea), (ba = Xa + eb * Ea)), p && ((w = u - Wa * p), (ja = rb + Wa * p)), (m = Sd))
                                : (0 > Ea ? (Za = r) : 0 < Ea && (ba = Xa), 0 > p ? (w = u) : 0 < p && (ja = rb), (m = Rd)),
                            H.attr("cursor", Ec[nb]),
                            f());
                        break;
                    default:
                        return;
                }
                If();
            }
            if (b.event.touches) {
                if (b.event.changedTouches.length < b.event.touches.length) return If();
            } else if (n) return;
            if (l.apply(this, arguments)) {
                var F = this,
                    nb = b.event.target.__data__.type,
                    m = "selection" === (b.event.metaKey ? (nb = "overlay") : nb) ? Ij : b.event.altKey ? Sd : Rd,
                    Ea = a === Kf ? null : wo[nb],
                    p = a === Lf ? null : xo[nb],
                    ic = Ae(F),
                    q = ic.extent,
                    Oa = ic.selection,
                    K = q[0][0],
                    ba,
                    Xa,
                    Kb = q[0][1],
                    ja,
                    rb,
                    t = q[1][0],
                    Za,
                    r,
                    v = q[1][1],
                    w,
                    u,
                    eb,
                    Wa,
                    y,
                    x = Ea && p && b.event.shiftKey,
                    z,
                    C,
                    B = Uc(F),
                    A = B,
                    G = e(F, arguments).beforestart();
                "overlay" === nb
                    ? (ic.selection = Oa = [
                          [(ba = a === Kf ? K : B[0]), (ja = a === Lf ? Kb : B[1])],
                          [(Za = a === Kf ? t : ba), (w = a === Lf ? v : ja)],
                      ])
                    : ((ba = Oa[0][0]), (ja = Oa[0][1]), (Za = Oa[1][0]), (w = Oa[1][1]));
                Xa = ba;
                rb = ja;
                r = Za;
                u = w;
                var D = Pb(F).attr("pointer-events", "none"),
                    H = D.selectAll(".overlay").attr("cursor", Ec[nb]);
                if (b.event.touches) D.on("touchmove.brush", c, !0).on("touchend.brush touchcancel.brush", h, !0);
                else {
                    var J = Pb(b.event.view).on("keydown.brush", oa, !0).on("keyup.brush", k, !0).on("mousemove.brush", c, !0).on("mouseup.brush", h, !0);
                    Mf(b.event.view);
                }
                b.event.stopImmediatePropagation();
                vd(F);
                d.call(F);
                G.start();
            }
        }
        function h() {
            var b = this.__brush || { selection: null };
            b.extent = k.apply(this, arguments);
            b.dim = a;
            return b;
        }
        var k = rn,
            l = qn,
            m = q(c, "start", "brush", "end"),
            F = 6,
            n;
        c.move = function (b, c) {
            b.selection
                ? b
                      .on("start.brush", function () {
                          e(this, arguments).beforestart().start();
                      })
                      .on("interrupt.brush end.brush", function () {
                          e(this, arguments).end();
                      })
                      .tween("brush", function () {
                          function b(a) {
                              g.selection = 1 === a && Tg(k) ? null : l(a);
                              d.call(f);
                              h.brush();
                          }
                          var f = this,
                              g = f.__brush,
                              h = e(f, arguments),
                              oa = g.selection,
                              k = a.input("function" === typeof c ? c.apply(this, arguments) : c, g.extent),
                              l = Ne(oa, k);
                          return oa && k ? b : b(1);
                      })
                : b.each(function () {
                      var b = arguments,
                          f = this.__brush,
                          g = a.input("function" === typeof c ? c.apply(this, b) : c, f.extent),
                          b = e(this, b).beforestart();
                      vd(this);
                      f.selection = null == g || Tg(g) ? null : g;
                      d.call(this);
                      b.start().brush().end();
                  });
        };
        f.prototype = {
            beforestart: function () {
                1 === ++this.active && ((this.state.emitter = this), (this.starting = !0));
                return this;
            },
            start: function () {
                this.starting && ((this.starting = !1), this.emit("start"));
                return this;
            },
            brush: function () {
                this.emit("brush");
                return this;
            },
            end: function () {
                0 === --this.active && (delete this.state.emitter, this.emit("end"));
                return this;
            },
            emit: function (b) {
                H(new yo(c, b, a.output(this.state.selection)), m.apply, m, [b, this.that, this.args]);
            },
        };
        c.extent = function (a) {
            return arguments.length
                ? ((k =
                      "function" === typeof a
                          ? a
                          : Lj([
                                [+a[0][0], +a[0][1]],
                                [+a[1][0], +a[1][1]],
                            ])),
                  c)
                : k;
        };
        c.filter = function (a) {
            return arguments.length ? ((l = "function" === typeof a ? a : Lj(!!a)), c) : l;
        };
        c.handleSize = function (a) {
            return arguments.length ? ((F = +a), c) : F;
        };
        c.on = function () {
            var a = m.on.apply(m, arguments);
            return a === m ? c : a;
        };
        return c;
    }
    function sn(a) {
        return function (b, c) {
            return a(b.source.value + b.target.value, c.source.value + c.target.value);
        };
    }
    function Yg() {
        this._x0 = this._y0 = this._x1 = this._y1 = null;
        this._ = "";
    }
    function Nc() {
        return new Yg();
    }
    function Jn(a) {
        return a.source;
    }
    function Kn(a) {
        return a.target;
    }
    function Ln(a) {
        return a.radius;
    }
    function Mn(a) {
        return a.startAngle;
    }
    function Bn(a) {
        return a.endAngle;
    }
    function wf() {}
    function oc(a, b) {
        var c = new wf();
        if (a instanceof wf)
            a.each(function (a, b) {
                c.set(b, a);
            });
        else if (Array.isArray(a)) {
            var d = -1,
                e = a.length,
                f;
            if (null == b) for (; ++d < e; ) c.set(d, a[d]);
            else for (; ++d < e; ) c.set(b((f = a[d]), d, a), f);
        } else if (a) for (d in a) c.set(d, a[d]);
        return c;
    }
    function Nn() {
        return {};
    }
    function En(a, b, c) {
        a[b] = c;
    }
    function nj() {
        return oc();
    }
    function ej(a, b, c) {
        a.set(b, c);
    }
    function xf() {}
    function oj(a, b) {
        var c = new xf();
        if (a instanceof xf)
            a.each(function (a) {
                c.add(a);
            });
        else if (a) {
            var d = -1,
                e = a.length;
            if (null == b) for (; ++d < e; ) c.add(a[d]);
            else for (; ++d < e; ) c.add(b(a[d], d, a));
        }
        return c;
    }
    function pj(a) {
        return new Function(
            "d",
            "return {" +
                a
                    .map(function (a, b) {
                        return JSON.stringify(a) + ": d[" + b + "]";
                    })
                    .join(",") +
                "}"
        );
    }
    function zn(a, b) {
        var c = pj(a);
        return function (d, e) {
            return b(c(d), e, a);
        };
    }
    function yn(a) {
        var b = Object.create(null),
            c = [];
        a.forEach(function (a) {
            for (var d in a) d in b || c.push((b[d] = d));
        });
        return c;
    }
    function qj(a, b, c, d) {
        if (isNaN(b) || isNaN(c)) return a;
        var e,
            f = a._root;
        d = { data: d };
        var g = a._x0,
            h = a._y0,
            k = a._x1,
            l = a._y1,
            F,
            m,
            n,
            p,
            q,
            t;
        if (!f) return (a._root = d), a;
        for (; f.length; ) if (((q = b >= (F = (g + k) / 2)) ? (g = F) : (k = F), (t = c >= (m = (h + l) / 2)) ? (h = m) : (l = m), (e = f), !(f = f[(q |= t << 1)]))) return (e[q] = d), a;
        n = +a._x.call(null, f.data);
        p = +a._y.call(null, f.data);
        if (b === n && c === p) return (d.next = f), e ? (e[q] = d) : (a._root = d), a;
        do (e = e ? (e[q] = Array(4)) : (a._root = Array(4))), (q = b >= (F = (g + k) / 2)) ? (g = F) : (k = F), (t = c >= (m = (h + l) / 2)) ? (h = m) : (l = m);
        while ((q |= t << 1) === (t = ((p >= m) << 1) | (n >= F)));
        return (e[t] = f), (e[q] = d), a;
    }
    function An(a) {
        return a[0];
    }
    function Cn(a) {
        return a[1];
    }
    function yf(a, b, c) {
        b = new ah(null == b ? An : b, null == c ? Cn : c, NaN, NaN, NaN, NaN);
        return null == a ? b : b.addAll(a);
    }
    function ah(a, b, c, d, e, f) {
        this._x = a;
        this._y = b;
        this._x0 = c;
        this._y0 = d;
        this._x1 = e;
        this._y1 = f;
        this._root = void 0;
    }
    function bj(a) {
        for (var b = { data: a.data }, c = b; (a = a.next); ) c = c.next = { data: a.data };
        return b;
    }
    function Dn(a) {
        return a.x + a.vx;
    }
    function xn(a) {
        return a.y + a.vy;
    }
    function In(a) {
        return a.index;
    }
    function gj(a, b) {
        var c = a.get(b);
        if (!c) throw Error("missing: " + b);
        return c;
    }
    function On(a) {
        return a.x;
    }
    function Pn(a) {
        return a.y;
    }
    function De(a) {
        return new bh(a);
    }
    function bh(a) {
        if (!(b = zo.exec(a))) throw Error("invalid format: " + a);
        var b;
        a = b[1] || " ";
        var c = b[2] || ">",
            d = b[3] || "-",
            e = b[4] || "",
            f = !!b[5],
            g = b[6] && +b[6],
            h = !!b[7],
            k = b[8] && +b[8].slice(1);
        b = b[9] || "";
        "n" === b ? ((h = !0), (b = "g")) : Mj[b] || (b = "");
        if (f || ("0" === a && "=" === c)) (f = !0), (a = "0"), (c = "=");
        this.fill = a;
        this.align = c;
        this.sign = d;
        this.symbol = e;
        this.zero = f;
        this.width = g;
        this.comma = h;
        this.precision = k;
        this.type = b;
    }
    function rj(a) {
        Nf = Nj(a);
        b.format = Nf.format;
        b.formatPrefix = Nf.formatPrefix;
        return Nf;
    }
    function fc() {
        this.reset();
    }
    function mj(a, b, c) {
        var d = (a.s = b + c),
            e = d - b;
        a.t = b - (d - e) + (c - e);
    }
    function sj(a) {
        return 1 < a ? 0 : -1 > a ? qa : Math.acos(a);
    }
    function Ob(a) {
        return 1 < a ? Pa : -1 > a ? -Pa : Math.asin(a);
    }
    function tj(a) {
        return (a = R(a / 2)) * a;
    }
    function Ma() {}
    function zf(a, b) {
        if (a && Oj.hasOwnProperty(a.type)) Oj[a.type](a, b);
    }
    function Xg(a, b, c) {
        var d = -1;
        c = a.length - c;
        var e;
        for (b.lineStart(); ++d < c; ) (e = a[d]), b.point(e[0], e[1], e[2]);
        b.lineEnd();
    }
    function uj(a, b) {
        var c = -1,
            d = a.length;
        for (b.polygonStart(); ++c < d; ) Xg(a[c], b, 1);
        b.polygonEnd();
    }
    function Qn() {
        rc.point = Sn;
    }
    function Rn() {
        vj(Pj, Qj);
    }
    function Sn(a, b) {
        rc.point = vj;
        Pj = a;
        Qj = b;
        a *= Y;
        b *= Y;
        nh = a;
        oh = S((b = b / 2 + Of));
        ph = R(b);
    }
    function vj(a, b) {
        a *= Y;
        b *= Y;
        b = b / 2 + Of;
        var c = a - nh,
            d = 0 <= c ? 1 : -1,
            e = d * c,
            c = S(b),
            f = R(b),
            g = ph * f,
            h = oh * c + g * S(e),
            d = g * d * R(e);
        Pf.add(zb(d, h));
        nh = a;
        oh = c;
        ph = f;
    }
    function Af(a) {
        return [zb(a[1], a[0]), Ob(a[2])];
    }
    function fd(a) {
        var b = a[0];
        a = a[1];
        var c = S(a);
        return [c * S(b), c * R(b), R(a)];
    }
    function Bf(a, b) {
        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    }
    function Id(a, b) {
        return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
    }
    function Wg(a, b) {
        a[0] += b[0];
        a[1] += b[1];
        a[2] += b[2];
    }
    function vf(a, b) {
        return [a[0] * b, a[1] * b, a[2] * b];
    }
    function Cf(a) {
        var b = fb(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
        a[0] /= b;
        a[1] /= b;
        a[2] /= b;
    }
    function ch(a, b) {
        Vc.push((Fc = [(Ya = a), ($a = a)]));
        b < Rb && (Rb = b);
        b > Yb && (Yb = b);
    }
    function cj(a, b) {
        var c = fd([a * Y, b * Y]);
        if (Td) {
            var d = Id(Td, c),
                d = Id([d[1], -d[0], 0], d);
            Cf(d);
            var d = Af(d),
                e = a - wd,
                f = 0 < e ? 1 : -1,
                g = d[0] * Ia * f,
                e = 180 < xa(e);
            e ^ (f * wd < g && g < f * a) ? ((d = d[1] * Ia), d > Yb && (Yb = d)) : ((g = ((g + 360) % 360) - 180), e ^ (f * wd < g && g < f * a)) ? ((d = -d[1] * Ia), d < Rb && (Rb = d)) : (b < Rb && (Rb = b), b > Yb && (Yb = b));
            e ? (a < wd ? Nb(Ya, a) > Nb(Ya, $a) && ($a = a) : Nb(a, $a) > Nb(Ya, $a) && (Ya = a)) : $a >= Ya ? (a < Ya && (Ya = a), a > $a && ($a = a)) : a > wd ? Nb(Ya, a) > Nb(Ya, $a) && ($a = a) : Nb(a, $a) > Nb(Ya, $a) && (Ya = a);
        } else Vc.push((Fc = [(Ya = a), ($a = a)]));
        b < Rb && (Rb = b);
        b > Yb && (Yb = b);
        Td = c;
        wd = a;
    }
    function dj() {
        Gc.point = cj;
    }
    function wj() {
        Fc[0] = Ya;
        Fc[1] = $a;
        Gc.point = ch;
        Td = null;
    }
    function fj(a, b) {
        if (Td) {
            var c = a - wd;
            Oe.add(180 < xa(c) ? c + (0 < c ? 360 : -360) : c);
        } else (Rj = a), (Sj = b);
        rc.point(a, b);
        cj(a, b);
    }
    function Yi() {
        rc.lineStart();
    }
    function tn() {
        fj(Rj, Sj);
        rc.lineEnd();
        1e-6 < xa(Oe) && (Ya = -($a = 180));
        Fc[0] = Ya;
        Fc[1] = $a;
        Td = null;
    }
    function Nb(a, b) {
        return 0 > (b -= a) ? b + 360 : b;
    }
    function un(a, b) {
        return a[0] - b[0];
    }
    function Zi(a, b) {
        return a[0] <= a[1] ? a[0] <= b && b <= a[1] : b < a[0] || a[1] < b;
    }
    function Vg(a, b) {
        a *= Y;
        b *= Y;
        var c = S(b);
        Ce(c * S(a), c * R(a), R(b));
    }
    function Ce(a, b, c) {
        ++Pe;
        Qe += (a - Qe) / Pe;
        Re += (b - Re) / Pe;
        Se += (c - Se) / Pe;
    }
    function $i() {
        jc.point = vn;
    }
    function vn(a, b) {
        a *= Y;
        b *= Y;
        var c = S(b);
        Ab = c * S(a);
        Bb = c * R(a);
        Cb = R(b);
        jc.point = wn;
        Ce(Ab, Bb, Cb);
    }
    function wn(a, b) {
        a *= Y;
        b *= Y;
        var c = S(b),
            d = c * S(a),
            c = c * R(a),
            e = R(b),
            f = zb(fb((f = Bb * e - Cb * c) * f + (f = Cb * d - Ab * e) * f + (f = Ab * c - Bb * d) * f), Ab * d + Bb * c + Cb * e);
        Ud += f;
        Vd += f * (Ab + (Ab = d));
        Wd += f * (Bb + (Bb = c));
        Xd += f * (Cb + (Cb = e));
        Ce(Ab, Bb, Cb);
    }
    function aj() {
        jc.point = Vg;
    }
    function Fn() {
        jc.point = Hn;
    }
    function Gn() {
        hj(Tj, Uj);
        jc.point = Vg;
    }
    function Hn(a, b) {
        Tj = a;
        Uj = b;
        a *= Y;
        b *= Y;
        jc.point = hj;
        var c = S(b);
        Ab = c * S(a);
        Bb = c * R(a);
        Cb = R(b);
        Ce(Ab, Bb, Cb);
    }
    function hj(a, b) {
        a *= Y;
        b *= Y;
        var c = S(b),
            d = c * S(a),
            c = c * R(a),
            e = R(b),
            f = Bb * e - Cb * c,
            g = Cb * d - Ab * e,
            h = Ab * c - Bb * d,
            k = fb(f * f + g * g + h * h),
            l = Ob(k),
            k = k && -l / k;
        Qf += k * f;
        Rf += k * g;
        Sf += k * h;
        Ud += l;
        Vd += l * (Ab + (Ab = d));
        Wd += l * (Bb + (Bb = c));
        Xd += l * (Cb + (Cb = e));
        Ce(Ab, Bb, Cb);
    }
    function Zg(a, b) {
        return [a > qa ? a - Lb : a < -qa ? a + Lb : a, b];
    }
    function $g(a, b, c) {
        return (a %= Lb) ? (b || c ? Vj(jj(a), kj(b, c)) : jj(a)) : b || c ? kj(b, c) : Zg;
    }
    function ij(a) {
        return function (b, c) {
            return (b += a), [b > qa ? b - Lb : b < -qa ? b + Lb : b, c];
        };
    }
    function jj(a) {
        var b = ij(a);
        b.invert = ij(-a);
        return b;
    }
    function kj(a, b) {
        function c(a, b) {
            var h = S(b),
                Na = S(a) * h,
                h = R(a) * h,
                oa = R(b),
                k = oa * d + Na * e;
            return [zb(h * f - k * g, Na * d - oa * e), Ob(k * f + h * g)];
        }
        var d = S(a),
            e = R(a),
            f = S(b),
            g = R(b);
        c.invert = function (a, b) {
            var c = S(b),
                h = S(a) * c,
                c = R(a) * c,
                Na = R(b),
                oa = Na * f - c * g;
            return [zb(c * f + Na * g, h * d + oa * e), Ob(oa * d - h * e)];
        };
        return c;
    }
    function lj(a, b, c, d, e, f) {
        if (c) {
            var g = S(b),
                h = R(b);
            c *= d;
            if (null == e) (e = b + d * Lb), (f = b - c / 2);
            else if (((e = Wj(g, e)), (f = Wj(g, f)), 0 < d ? e < f : e > f)) e += d * Lb;
            for (; 0 < d ? e > f : e < f; e -= c) (b = Af([g, -h * S(e), -h * R(e)])), a.point(b[0], b[1]);
        }
    }
    function Wj(a, b) {
        b = fd(b);
        b[0] -= a;
        Cf(b);
        var c = sj(-b[1]);
        return ((0 > -b[2] ? -c : c) + Lb - 1e-6) % Lb;
    }
    function Tf(a, b, c, d) {
        this.x = a;
        this.z = b;
        this.o = c;
        this.e = d;
        this.v = !1;
        this.n = this.p = null;
    }
    function Xj(a) {
        if ((b = a.length)) {
            for (var b, c = 0, d = a[0], e; ++c < b; ) (d.n = e = a[c]), (e.p = d), (d = e);
            d.n = e = a[0];
            e.p = d;
        }
    }
    function qh(a, b, c, d) {
        function e(g, k, l, m) {
            var n = 0,
                nb = 0;
            if (null == g || (n = f(g, l)) !== (nb = f(k, l)) || (0 > h(g, k)) ^ (0 < l)) {
                do m.point(0 === n || 3 === n ? a : c, 1 < n ? d : b);
                while ((n = (n + l + 4) % 4) !== nb);
            } else m.point(k[0], k[1]);
        }
        function f(d, e) {
            return 1e-6 > xa(d[0] - a) ? (0 < e ? 0 : 3) : 1e-6 > xa(d[0] - c) ? (0 < e ? 2 : 1) : 1e-6 > xa(d[1] - b) ? (0 < e ? 1 : 0) : 0 < e ? 3 : 2;
        }
        function g(a, b) {
            return h(a.x, b.x);
        }
        function h(a, b) {
            var c = f(a, 1),
                d = f(b, 1);
            return c !== d ? c - d : 0 === c ? b[1] - a[1] : 1 === c ? a[0] - b[0] : 2 === c ? a[1] - b[1] : b[0] - a[0];
        }
        return function (f) {
            function h(e, f) {
                a <= e && e <= c && b <= f && f <= d && l.point(e, f);
            }
            function k(e, f) {
                var g = a <= e && e <= c && b <= f && f <= d;
                p && Ea.push([e, f]);
                if (u) (q = e), (t = f), (P = g), (u = !1), g && (l.lineStart(), l.point(e, f));
                else if (g && w) l.point(e, f);
                else {
                    var h = [(Oa = Math.max(-1e9, Math.min(1e9, Oa))), (r = Math.max(-1e9, Math.min(1e9, r)))],
                        F = [(e = Math.max(-1e9, Math.min(1e9, e))), (f = Math.max(-1e9, Math.min(1e9, f)))];
                    Ao(h, F, a, b, c, d) ? (w || (l.lineStart(), l.point(h[0], h[1])), l.point(F[0], F[1]), g || l.lineEnd(), (v = !1)) : g && (l.lineStart(), l.point(e, f), (v = !1));
                }
                Oa = e;
                r = f;
                w = g;
            }
            var l = f,
                m = Yj(),
                n,
                p,
                Ea,
                q,
                t,
                P,
                Oa,
                r,
                w,
                u,
                v,
                y = {
                    point: h,
                    lineStart: function () {
                        y.point = k;
                        p && p.push((Ea = []));
                        u = !0;
                        w = !1;
                        Oa = r = NaN;
                    },
                    lineEnd: function () {
                        n && (k(q, t), P && w && m.rejoin(), n.push(m.result()));
                        y.point = h;
                        w && l.lineEnd();
                    },
                    polygonStart: function () {
                        l = m;
                        n = [];
                        p = [];
                        v = !0;
                    },
                    polygonEnd: function () {
                        for (var b, c = (b = 0), h = p.length; c < h; ++c)
                            for (var oa = p[c], k = 1, db = oa.length, F = oa[0], m, q, P = F[0], F = F[1]; k < db; ++k)
                                (m = P), (q = F), (F = oa[k]), (P = F[0]), (F = F[1]), q <= d ? F > d && (P - m) * (d - q) > (F - q) * (a - m) && ++b : F <= d && (P - m) * (d - q) < (F - q) * (a - m) && --b;
                        c = v && b;
                        h = (n = rh(n)).length;
                        if (c || h) f.polygonStart(), c && (f.lineStart(), e(null, null, 1, f), f.lineEnd()), h && Zj(n, g, b, e, f), f.polygonEnd();
                        l = f;
                        n = p = Ea = null;
                    },
                };
            return y;
        };
    }
    function Bo() {
        Yd.point = Yd.lineEnd = Ma;
    }
    function Co(a, b) {
        a *= Y;
        b *= Y;
        sh = a;
        Uf = R(b);
        Vf = S(b);
        Yd.point = Do;
    }
    function Do(a, b) {
        a *= Y;
        b *= Y;
        var c = R(b),
            d = S(b),
            e = xa(a - sh),
            f = S(e),
            e = R(e),
            e = d * e,
            g = Vf * c - Uf * d * f,
            f = Uf * c + Vf * d * f;
        th.add(zb(fb(e * e + g * g), f));
        sh = a;
        Uf = c;
        Vf = d;
    }
    function Wf(a, b) {
        return a && ak.hasOwnProperty(a.type) ? ak[a.type](a, b) : !1;
    }
    function bk(a, b) {
        var c = Zd(a[0], a[1]),
            d = Zd(a[0], b),
            e = Zd(b, a[1]);
        return d + e <= c + 1e-6;
    }
    function ck(a, b) {
        return !!dk(a.map(Eo), ek(b));
    }
    function Eo(a) {
        return (a = a.map(ek)), a.pop(), a;
    }
    function ek(a) {
        return [a[0] * Y, a[1] * Y];
    }
    function fk(a, b, c) {
        var d = kc(a, b - 1e-6, c).concat(b);
        return function (a) {
            return d.map(function (b) {
                return [a, b];
            });
        };
    }
    function gk(a, b, c) {
        var d = kc(a, b - 1e-6, c).concat(b);
        return function (a) {
            return d.map(function (b) {
                return [b, a];
            });
        };
    }
    function hk() {
        function a() {
            return { type: "MultiLineString", coordinates: b() };
        }
        function b() {
            return kc(Xf(f / n) * n, e, n)
                .map(r)
                .concat(kc(Xf(l / p) * p, k, p).map(w))
                .concat(
                    kc(Xf(d / F) * F, c, F)
                        .filter(function (a) {
                            return 1e-6 < xa(a % n);
                        })
                        .map(q)
                )
                .concat(
                    kc(Xf(h / m) * m, g, m)
                        .filter(function (a) {
                            return 1e-6 < xa(a % p);
                        })
                        .map(t)
                );
        }
        var c,
            d,
            e,
            f,
            g,
            h,
            k,
            l,
            F = 10,
            m = F,
            n = 90,
            p = 360,
            q,
            t,
            r,
            w,
            P = 2.5;
        a.lines = function () {
            return b().map(function (a) {
                return { type: "LineString", coordinates: a };
            });
        };
        a.outline = function () {
            return { type: "Polygon", coordinates: [r(f).concat(w(k).slice(1), r(e).reverse().slice(1), w(l).reverse().slice(1))] };
        };
        a.extent = function (b) {
            return arguments.length ? a.extentMajor(b).extentMinor(b) : a.extentMinor();
        };
        a.extentMajor = function (b) {
            if (!arguments.length)
                return [
                    [f, l],
                    [e, k],
                ];
            f = +b[0][0];
            e = +b[1][0];
            l = +b[0][1];
            k = +b[1][1];
            f > e && ((b = f), (f = e), (e = b));
            l > k && ((b = l), (l = k), (k = b));
            return a.precision(P);
        };
        a.extentMinor = function (b) {
            if (!arguments.length)
                return [
                    [d, h],
                    [c, g],
                ];
            d = +b[0][0];
            c = +b[1][0];
            h = +b[0][1];
            g = +b[1][1];
            d > c && ((b = d), (d = c), (c = b));
            h > g && ((b = h), (h = g), (g = b));
            return a.precision(P);
        };
        a.step = function (b) {
            return arguments.length ? a.stepMajor(b).stepMinor(b) : a.stepMinor();
        };
        a.stepMajor = function (b) {
            if (!arguments.length) return [n, p];
            n = +b[0];
            p = +b[1];
            return a;
        };
        a.stepMinor = function (b) {
            if (!arguments.length) return [F, m];
            F = +b[0];
            m = +b[1];
            return a;
        };
        a.precision = function (b) {
            if (!arguments.length) return P;
            P = +b;
            q = fk(h, g, 90);
            t = gk(d, c, P);
            r = fk(l, k, 90);
            w = gk(f, e, P);
            return a;
        };
        return a
            .extentMajor([
                [-180, -89.999999],
                [180, 89.999999],
            ])
            .extentMinor([
                [-180, -80.000001],
                [180, 80.000001],
            ]);
    }
    function Fo() {
        Hc.point = Go;
    }
    function Go(a, b) {
        Hc.point = ik;
        jk = uh = a;
        kk = vh = b;
    }
    function ik(a, b) {
        wh.add(vh * a - uh * b);
        uh = a;
        vh = b;
    }
    function Ho() {
        ik(jk, kk);
    }
    function xd(a, b) {
        Yf += a;
        Zf += b;
        ++Te;
    }
    function lk() {
        Zb.point = Io;
    }
    function Io(a, b) {
        Zb.point = Jo;
        xd((sc = a), (tc = b));
    }
    function Jo(a, b) {
        var c = a - sc,
            d = b - tc,
            c = fb(c * c + d * d);
        $d += (c * (sc + a)) / 2;
        ae += (c * (tc + b)) / 2;
        Wc += c;
        xd((sc = a), (tc = b));
    }
    function mk() {
        Zb.point = xd;
    }
    function Ko() {
        Zb.point = Lo;
    }
    function Mo() {
        nk(ok, pk);
    }
    function Lo(a, b) {
        Zb.point = nk;
        xd((ok = sc = a), (pk = tc = b));
    }
    function nk(a, b) {
        var c = a - sc,
            d = b - tc,
            c = fb(c * c + d * d);
        $d += (c * (sc + a)) / 2;
        ae += (c * (tc + b)) / 2;
        Wc += c;
        c = tc * a - sc * b;
        $f += c * (sc + a);
        ag += c * (tc + b);
        be += 3 * c;
        xd((sc = a), (tc = b));
    }
    function qk(a) {
        this._context = a;
    }
    function No(a, b) {
        Ue.point = rk;
        sk = ce = a;
        tk = de = b;
    }
    function rk(a, b) {
        ce -= a;
        de -= b;
        xh.add(fb(ce * ce + de * de));
        ce = a;
        de = b;
    }
    function uk() {
        this._string = [];
    }
    function vk(a) {
        return "m0," + a + "a" + a + "," + a + " 0 1,1 0," + -2 * a + "a" + a + "," + a + " 0 1,1 0," + 2 * a + "z";
    }
    function Oo(a) {
        return 1 < a.length;
    }
    function Po(a, b) {
        return (0 > (a = a.x)[0] ? a[1] - Pa - 1e-6 : Pa - a[1]) - (0 > (b = b.x)[0] ? b[1] - Pa - 1e-6 : Pa - b[1]);
    }
    function bg(a) {
        return function (b) {
            var c = new yh(),
                d;
            for (d in a) c[d] = a[d];
            c.stream = b;
            return c;
        };
    }
    function yh() {}
    function ee(a, b, c) {
        var d = b[1][0] - b[0][0],
            e = b[1][1] - b[0][1],
            f = a.clipExtent && a.clipExtent();
        a.scale(150).translate([0, 0]);
        null != f && a.clipExtent(null);
        lc(c, a.stream(cg));
        var g = cg.result();
        c = Math.min(d / (g[1][0] - g[0][0]), e / (g[1][1] - g[0][1]));
        d = +b[0][0] + (d - c * (g[1][0] + g[0][0])) / 2;
        b = +b[0][1] + (e - c * (g[1][1] + g[0][1])) / 2;
        null != f && a.clipExtent(f);
        return a.scale(150 * c).translate([d, b]);
    }
    function Qo(a) {
        return bg({
            point: function (b, c) {
                b = a(b, c);
                this.stream.point(b[0], b[1]);
            },
        });
    }
    function Ro(a, b) {
        function c(d, e, f, g, h, k, l, F, m, n, p, q, t, r) {
            var w = l - d,
                P = F - e,
                v = w * w + P * P;
            if (v > 4 * b && t--) {
                var u = g + n,
                    y = h + p,
                    x = k + q,
                    z = fb(u * u + y * y + x * x),
                    C = Ob((x /= z)),
                    K = 1e-6 > xa(xa(x) - 1) || 1e-6 > xa(f - m) ? (f + m) / 2 : zb(y, u),
                    ba = a(K, C),
                    C = ba[0],
                    ba = ba[1],
                    Xa = C - d,
                    Kb = ba - e,
                    ja = P * Xa - w * Kb;
                if ((ja * ja) / v > b || 0.3 < xa((w * Xa + P * Kb) / v - 0.5) || g * n + h * p + k * q < So) c(d, e, f, g, h, k, C, ba, K, (u /= z), (y /= z), x, t, r), r.point(C, ba), c(C, ba, K, u, y, x, l, F, m, n, p, q, t, r);
            }
        }
        return function (b) {
            function d(c, e) {
                c = a(c, e);
                b.point(c[0], c[1]);
            }
            function e() {
                P = NaN;
                x.point = f;
                b.lineStart();
            }
            function f(d, e) {
                var g = fd([d, e]),
                    h = a(d, e);
                c(P, w, r, u, v, y, (P = h[0]), (w = h[1]), (r = d), (u = g[0]), (v = g[1]), (y = g[2]), 16, b);
                b.point(P, w);
            }
            function g() {
                x.point = d;
                b.lineEnd();
            }
            function h() {
                e();
                x.point = oa;
                x.lineEnd = k;
            }
            function oa(a, b) {
                f((l = a), b);
                m = P;
                n = w;
                p = u;
                q = v;
                t = y;
                x.point = f;
            }
            function k() {
                c(P, w, r, u, v, y, m, n, l, p, q, t, 16, b);
                x.lineEnd = g;
                g();
            }
            var l,
                m,
                n,
                p,
                q,
                t,
                r,
                P,
                w,
                u,
                v,
                y,
                x = {
                    point: d,
                    lineStart: e,
                    lineEnd: g,
                    polygonStart: function () {
                        b.polygonStart();
                        x.lineStart = h;
                    },
                    polygonEnd: function () {
                        b.polygonEnd();
                        x.lineStart = e;
                    },
                };
            return x;
        };
    }
    function Xc(a) {
        return zh(function () {
            return a;
        })();
    }
    function zh(a) {
        function b(a) {
            a = P(a[0] * Y, a[1] * Y);
            return [a[0] * h + F, m - a[1] * h];
        }
        function c(a) {
            return (a = P.invert((a[0] - F) / h, (m - a[1]) / h)) && [a[0] * Ia, a[1] * Ia];
        }
        function d(a, b) {
            return (a = g(a, b)), [a[0] * h + F, m - a[1] * h];
        }
        function e() {
            P = Vj((w = $g(q, t, r)), g);
            var a = g(n, p);
            F = k - a[0] * h;
            m = l + a[1] * h;
            return f();
        }
        function f() {
            Kb = ja = null;
            return b;
        }
        var g,
            h = 150,
            k = 480,
            l = 250,
            F,
            m,
            n = 0,
            p = 0,
            q = 0,
            t = 0,
            r = 0,
            w,
            P,
            u = null,
            v = wk,
            y = null,
            x,
            z,
            C,
            K = yd,
            ba = 0.5,
            Xa = xk(d, ba),
            Kb,
            ja;
        b.stream = function (a) {
            return Kb && ja === a ? Kb : (Kb = To(v(w, Xa(K((ja = a))))));
        };
        b.clipAngle = function (a) {
            return arguments.length ? ((v = +a ? Uo((u = a * Y), 6 * Y) : ((u = null), wk)), f()) : u * Ia;
        };
        b.clipExtent = function (a) {
            return arguments.length
                ? ((K = null == a ? ((y = x = z = C = null), yd) : qh((y = +a[0][0]), (x = +a[0][1]), (z = +a[1][0]), (C = +a[1][1]))), f())
                : null == y
                ? null
                : [
                      [y, x],
                      [z, C],
                  ];
        };
        b.scale = function (a) {
            return arguments.length ? ((h = +a), e()) : h;
        };
        b.translate = function (a) {
            return arguments.length ? ((k = +a[0]), (l = +a[1]), e()) : [k, l];
        };
        b.center = function (a) {
            return arguments.length ? ((n = (a[0] % 360) * Y), (p = (a[1] % 360) * Y), e()) : [n * Ia, p * Ia];
        };
        b.rotate = function (a) {
            return arguments.length ? ((q = (a[0] % 360) * Y), (t = (a[1] % 360) * Y), (r = 2 < a.length ? (a[2] % 360) * Y : 0), e()) : [q * Ia, t * Ia, r * Ia];
        };
        b.precision = function (a) {
            return arguments.length ? ((Xa = xk(d, (ba = a * a))), f()) : fb(ba);
        };
        b.fitExtent = function (a, c) {
            return ee(b, a, c);
        };
        b.fitSize = function (a, c) {
            return ee(b, [[0, 0], a], c);
        };
        return function () {
            g = a.apply(this, arguments);
            b.invert = g.invert && c;
            return e();
        };
    }
    function Ah(a) {
        var b = 0,
            c = qa / 3,
            d = zh(a);
        a = d(b, c);
        a.parallels = function (a) {
            return arguments.length ? d((b = a[0] * Y), (c = a[1] * Y)) : [b * Ia, c * Ia];
        };
        return a;
    }
    function Vo(a) {
        function b(a, d) {
            return [a * c, R(d) / c];
        }
        var c = S(a);
        b.invert = function (a, b) {
            return [a / c, Ob(b * c)];
        };
        return b;
    }
    function yk(a, b) {
        function c(a, b) {
            var d = fb(f - 2 * e * R(b)) / e;
            return [d * R((a *= e)), g - d * S(a)];
        }
        var d = R(a),
            e = (d + R(b)) / 2;
        if (1e-6 > xa(e)) return Vo(a);
        var f = 1 + d * (2 * e - d),
            g = fb(f) / e;
        c.invert = function (a, b) {
            var c = g - b;
            return [(zb(a, xa(c)) / e) * Ve(c), Ob((f - (a * a + c * c) * e * e) / (2 * e))];
        };
        return c;
    }
    function Wo(a) {
        var b = a.length;
        return {
            point: function (c, d) {
                for (var e = -1; ++e < b; ) a[e].point(c, d);
            },
            sphere: function () {
                for (var c = -1; ++c < b; ) a[c].sphere();
            },
            lineStart: function () {
                for (var c = -1; ++c < b; ) a[c].lineStart();
            },
            lineEnd: function () {
                for (var c = -1; ++c < b; ) a[c].lineEnd();
            },
            polygonStart: function () {
                for (var c = -1; ++c < b; ) a[c].polygonStart();
            },
            polygonEnd: function () {
                for (var c = -1; ++c < b; ) a[c].polygonEnd();
            },
        };
    }
    function zk(a) {
        return function (b, c) {
            var d = S(b),
                e = S(c),
                d = a(d * e);
            return [d * e * R(b), d * R(c)];
        };
    }
    function We(a) {
        return function (b, c) {
            var d = fb(b * b + c * c),
                e = a(d),
                f = R(e),
                e = S(e);
            return [zb(b * f, d * e), Ob(d && (c * f) / d)];
        };
    }
    function Xe(a, b) {
        return [a, dg(fe((Pa + b) / 2))];
    }
    function Ak(a) {
        function b() {
            var d = qa * e(),
                f = c(Bk(c.rotate()).invert([0, 0]));
            return g(
                null == h
                    ? [
                          [f[0] - d, f[1] - d],
                          [f[0] + d, f[1] + d],
                      ]
                    : a === Xe
                    ? [
                          [Math.max(f[0] - d, h), k],
                          [Math.min(f[0] + d, l), F],
                      ]
                    : [
                          [h, Math.max(f[1] - d, k)],
                          [l, Math.min(f[1] + d, F)],
                      ]
            );
        }
        var c = Xc(a),
            d = c.center,
            e = c.scale,
            f = c.translate,
            g = c.clipExtent,
            h = null,
            k,
            l,
            F;
        c.scale = function (a) {
            return arguments.length ? (e(a), b()) : e();
        };
        c.translate = function (a) {
            return arguments.length ? (f(a), b()) : f();
        };
        c.center = function (a) {
            return arguments.length ? (d(a), b()) : d();
        };
        c.clipExtent = function (a) {
            return arguments.length
                ? (null == a ? (h = k = l = F = null) : ((h = +a[0][0]), (k = +a[0][1]), (l = +a[1][0]), (F = +a[1][1])), b())
                : null == h
                ? null
                : [
                      [h, k],
                      [l, F],
                  ];
        };
        return b();
    }
    function Ck(a, b) {
        function c(a, b) {
            0 < f ? b < -Pa + 1e-6 && (b = -Pa + 1e-6) : b > Pa - 1e-6 && (b = Pa - 1e-6);
            var d = f / Bh(fe((Pa + b) / 2), e);
            return [d * R(e * a), f - d * S(e * a)];
        }
        var d = S(a),
            e = a === b ? R(a) : dg(d / S(b)) / dg(fe((Pa + b) / 2) / fe((Pa + a) / 2)),
            f = (d * Bh(fe((Pa + a) / 2), e)) / e;
        if (!e) return Xe;
        c.invert = function (a, b) {
            var c = f - b,
                d = Ve(e) * fb(a * a + c * c);
            return [(zb(a, xa(c)) / e) * Ve(c), 2 * ge(Bh(f / d, 1 / e)) - Pa];
        };
        return c;
    }
    function Ye(a, b) {
        return [a, b];
    }
    function Dk(a, b) {
        function c(a, b) {
            var d = f - b,
                g = e * a;
            return [d * R(g), f - d * S(g)];
        }
        var d = S(a),
            e = a === b ? R(a) : (d - S(b)) / (b - a),
            f = d / e + a;
        if (1e-6 > xa(e)) return Ye;
        c.invert = function (a, b) {
            var c = f - b;
            return [(zb(a, xa(c)) / e) * Ve(c), f - Ve(e) * fb(a * a + c * c)];
        };
        return c;
    }
    function Ch(a, b) {
        var c = S(b),
            d = S(a) * c;
        return [(c * R(a)) / d, R(b) / d];
    }
    function eg(a, b, c, d) {
        return 1 === a && 1 === b && 0 === c && 0 === d
            ? yd
            : bg({
                  point: function (e, f) {
                      this.stream.point(e * a + c, f * b + d);
                  },
              });
    }
    function Dh(a, b) {
        return [S(b) * R(a), R(b)];
    }
    function Eh(a, b) {
        var c = S(b),
            d = 1 + S(a) * c;
        return [(c * R(a)) / d, R(b) / d];
    }
    function Fh(a, b) {
        return [dg(fe((Pa + b) / 2)), -a];
    }
    function Xo(a, b) {
        return a.parent === b.parent ? 1 : 2;
    }
    function Yo(a, b) {
        return a + b.x;
    }
    function Zo(a, b) {
        return Math.max(a, b.y);
    }
    function $o(a) {
        for (var b; (b = a.children); ) a = b[0];
        return a;
    }
    function ap(a) {
        for (var b; (b = a.children); ) a = b[b.length - 1];
        return a;
    }
    function bp(a) {
        var b = 0,
            c = a.children,
            d = c && c.length;
        if (d) for (; 0 <= --d; ) b += c[d].value;
        else b = 1;
        a.value = b;
    }
    function Gh(a, b) {
        var c = new he(a),
            d = +a.value && (c.value = a.value),
            e,
            f = [c],
            g,
            h,
            k,
            l;
        for (null == b && (b = cp); (e = f.pop()); )
            if ((d && (e.value = +e.data.value), (h = b(e.data)) && (l = h.length))) for (e.children = Array(l), k = l - 1; 0 <= k; --k) f.push((g = e.children[k] = new he(h[k]))), (g.parent = e), (g.depth = e.depth + 1);
        return c.eachBefore(Ek);
    }
    function cp(a) {
        return a.children;
    }
    function dp(a) {
        a.data = a.data.data;
    }
    function Ek(a) {
        var b = 0;
        do a.height = b;
        while ((a = a.parent) && a.height < ++b);
    }
    function he(a) {
        this.data = a;
        this.depth = this.height = 0;
        this.parent = null;
    }
    function ep(a) {
        this._ = a;
        this.next = null;
    }
    function Fk(a, b) {
        var c,
            d = null,
            e = a.head,
            f,
            g;
        switch (b.length) {
            case 1:
                c = b[0];
                c = { x: c.x, y: c.y, r: c.r };
                break;
            case 2:
                g = b[0];
                var h = b[1];
                c = g.x;
                f = g.y;
                g = g.r;
                var k = h.x,
                    l = h.y,
                    h = h.r,
                    F = k - c,
                    m = l - f,
                    n = h - g,
                    p = Math.sqrt(F * F + m * m);
                c = { x: (c + k + (F / p) * n) / 2, y: (f + l + (m / p) * n) / 2, r: (p + g + h) / 2 };
                break;
            case 3:
                g = b[0];
                l = b[1];
                k = b[2];
                c = g.x;
                f = g.y;
                g = g.r;
                var m = l.x,
                    n = l.y,
                    q = l.r,
                    F = k.x,
                    p = k.y,
                    t = k.r,
                    k = 2 * (c - m),
                    h = 2 * (f - n),
                    l = 2 * (q - g),
                    q = c * c + f * f - g * g - m * m - n * n + q * q,
                    m = 2 * (c - F),
                    r = 2 * (f - p),
                    n = 2 * (t - g),
                    t = c * c + f * f - g * g - F * F - p * p + t * t,
                    p = m * h - k * r,
                    F = (h * t - r * q) / p - c,
                    h = (r * l - h * n) / p,
                    q = (m * q - k * t) / p - f,
                    k = (k * n - m * l) / p,
                    l = h * h + k * k - 1,
                    m = 2 * (F * h + q * k + g);
                g = (-m - Math.sqrt(m * m - 4 * l * (F * F + q * q - g * g))) / (2 * l);
                c = { x: F + h * g + c, y: q + k * g + f, r: g };
        }
        for (; e; )
            (g = e._),
                (f = e.next),
                (k = !c) || ((k = g.x - c.x), (l = g.y - c.y), (h = c.r - g.r), (k = !(h * h + 1e-6 > k * k + l * l))),
                k
                    ? (d ? ((a.tail = d), (d.next = null)) : (a.head = a.tail = null), b.push(g), (c = Fk(a, b)), b.pop(), a.head ? ((e.next = a.head), (a.head = e)) : ((e.next = null), (a.head = a.tail = e)), (d = a.tail), (d.next = f))
                    : (d = e),
                (e = f);
        a.tail = d;
        return c;
    }
    function Gk(a, b, c) {
        var d = a.x,
            e = a.y,
            f = b.r + c.r;
        a = a.r + c.r;
        var g = b.x - d;
        b = b.y - e;
        var h = g * g + b * b;
        if (h) {
            var k = 0.5 + ((a *= a) - (f *= f)) / (2 * h),
                f = Math.sqrt(Math.max(0, 2 * f * (a + h) - (a -= h) * a - f * f)) / (2 * h);
            c.x = d + k * g + f * b;
            c.y = e + k * b - f * g;
        } else (c.x = d + a), (c.y = e);
    }
    function Hk(a, b) {
        var c = b.x - a.x,
            d = b.y - a.y,
            e = a.r + b.r;
        return e * e - 1e-6 > c * c + d * d;
    }
    function Ik(a, b, c) {
        var d = a._;
        a = a.next._;
        var e = d.r + a.r;
        b = (d.x * a.r + a.x * d.r) / e - b;
        c = (d.y * a.r + a.y * d.r) / e - c;
        return b * b + c * c;
    }
    function fg(a) {
        this._ = a;
        this.previous = this.next = null;
    }
    function Jk(a) {
        if (!(e = a.length)) return 0;
        var b, c, d, e;
        b = a[0];
        b.x = 0;
        b.y = 0;
        if (!(1 < e)) return b.r;
        c = a[1];
        b.x = -c.r;
        c.x = b.r;
        c.y = 0;
        if (!(2 < e)) return b.r + c.r;
        Gk(c, b, (d = a[2]));
        var f = b.r * b.r,
            g = c.r * c.r,
            h = d.r * d.r,
            k = f + g + h,
            l = f * b.x + g * c.x + h * d.x,
            g = f * b.y + g * c.y + h * d.y,
            F,
            m,
            n;
        b = new fg(b);
        c = new fg(c);
        d = new fg(d);
        b.next = d.previous = c;
        c.next = b.previous = d;
        d.next = c.previous = b;
        n = 3;
        a: for (; n < e; ++n) {
            Gk(b._, c._, (d = a[n]));
            d = new fg(d);
            f = c.next;
            h = b.previous;
            F = c._.r;
            m = b._.r;
            do
                if (F <= m) {
                    if (Hk(f._, d._)) {
                        c = f;
                        b.next = c;
                        c.previous = b;
                        --n;
                        continue a;
                    }
                    F += f._.r;
                    f = f.next;
                } else {
                    if (Hk(h._, d._)) {
                        b = h;
                        b.next = c;
                        c.previous = b;
                        --n;
                        continue a;
                    }
                    m += h._.r;
                    h = h.previous;
                }
            while (f !== h.next);
            d.previous = b;
            d.next = c;
            b.next = c.previous = c = d;
            k += h = d._.r * d._.r;
            l += h * d._.x;
            g += h * d._.y;
            for (f = Ik(b, (F = l / k), (m = g / k)); (d = d.next) !== c; ) (h = Ik(d, F, m)) < f && ((b = d), (f = h));
            c = b.next;
        }
        b = [c._];
        for (d = c; (d = d.next) !== c; ) b.push(d._);
        d = Kk(b);
        for (n = 0; n < e; ++n) (b = a[n]), (b.x -= d.x), (b.y -= d.y);
        return d.r;
    }
    function gg(a) {
        if ("function" !== typeof a) throw Error();
        return a;
    }
    function zd() {
        return 0;
    }
    function fp(a) {
        return Math.sqrt(a.value);
    }
    function Lk(a) {
        return function (b) {
            b.children || (b.r = Math.max(0, +a(b) || 0));
        };
    }
    function Hh(a, b) {
        return function (c) {
            if ((d = c.children)) {
                var d,
                    e,
                    f = d.length,
                    g = a(c) * b || 0,
                    h;
                if (g) for (e = 0; e < f; ++e) d[e].r += g;
                h = Jk(d);
                if (g) for (e = 0; e < f; ++e) d[e].r -= g;
                c.r = h + g;
            }
        };
    }
    function Mk(a) {
        return function (b) {
            var c = b.parent;
            b.r *= a;
            c && ((b.x = c.x + a * b.x), (b.y = c.y + a * b.y));
        };
    }
    function gp(a) {
        return a.id;
    }
    function hp(a) {
        return a.parentId;
    }
    function ip(a, b) {
        return a.parent === b.parent ? 1 : 2;
    }
    function Ih(a) {
        var b = a.children;
        return b ? b[0] : a.t;
    }
    function Jh(a) {
        var b = a.children;
        return b ? b[b.length - 1] : a.t;
    }
    function hg(a, b) {
        this._ = a;
        this.A = this.children = this.parent = null;
        this.a = this;
        this.s = this.c = this.m = this.z = 0;
        this.t = null;
        this.i = b;
    }
    function jp(a) {
        a = new hg(a, 0);
        for (var b, c = [a], d, e, f; (b = c.pop()); ) if ((e = b._.children)) for (b.children = Array((d = e.length)), f = d - 1; 0 <= f; --f) c.push((d = b.children[f] = new hg(e[f], f))), (d.parent = b);
        (a.parent = new hg(null, 0)).children = [a];
        return a;
    }
    function Nk(a, b, c, d, e, f) {
        for (var g = [], h = b.children, k, l, F = (k = 0), m = h.length, n, p = b.value, q, t, r, w, P, u; k < m; ) {
            b = e - c;
            n = f - d;
            do q = h[F++].value;
            while (!q && F < m);
            t = r = q;
            u = Math.max(n / b, b / n) / (p * a);
            w = q * q * u;
            for (P = Math.max(r / w, w / t); F < m; ++F) {
                q += l = h[F].value;
                l < t && (t = l);
                l > r && (r = l);
                w = q * q * u;
                w = Math.max(r / w, w / t);
                if (w > P) {
                    q -= l;
                    break;
                }
                P = w;
            }
            g.push((k = { value: q, dice: b < n, children: h.slice(k, F) }));
            k.dice ? Ze(k, c, d, e, p ? (d += (n * q) / p) : f) : ig(k, c, d, p ? (c += (b * q) / p) : e, f);
            p -= q;
            k = F;
        }
        return g;
    }
    function kp(a, b) {
        return a[0] - b[0] || a[1] - b[1];
    }
    function Ok(a) {
        for (var b = a.length, c = [0, 1], d = 2, e = 2; e < b; ++e) {
            for (; 1 < d && 0 >= lp(a[c[d - 2]], a[c[d - 1]], a[e]); ) --d;
            c[d++] = e;
        }
        return c.slice(0, d);
    }
    function Kh(a) {
        this._size = a;
        this._call = this._error = null;
        this._tasks = [];
        this._data = [];
        this._waiting = this._active = this._ended = this._start = 0;
    }
    function Pk(a) {
        if (!a._start)
            try {
                for (; (a._start = a._waiting && a._active < a._size); ) {
                    var b = a._ended + a._active,
                        c = a._tasks[b],
                        d = c.length - 1,
                        e = c[d];
                    c[d] = mp(a, b);
                    --a._waiting;
                    ++a._active;
                    c = e.apply(null, c);
                    a._tasks[b] && (a._tasks[b] = c || np);
                }
            } catch (f) {
                if (a._tasks[a._ended + a._active - 1]) Lh(a, f);
                else if (!a._data) throw f;
            }
    }
    function mp(a, b) {
        return function (c, d) {
            a._tasks[b] && (--a._active, ++a._ended, (a._tasks[b] = null), null == a._error && (null != c ? Lh(a, c) : ((a._data[b] = d), a._waiting ? Pk(a) : jg(a))));
        };
    }
    function Lh(a, b) {
        var c = a._tasks.length,
            d;
        a._error = b;
        a._data = void 0;
        for (a._waiting = NaN; 0 <= --c; )
            if ((d = a._tasks[c]))
                if (((a._tasks[c] = null), d.abort))
                    try {
                        d.abort();
                    } catch (e) {}
        a._active = NaN;
        jg(a);
    }
    function jg(a) {
        if (!a._active && a._call) {
            var b = a._data;
            a._data = void 0;
            a._call(a._error, b);
        }
    }
    function Qk(a) {
        if (null == a) a = Infinity;
        else if (!(1 <= (a = +a))) throw Error("invalid concurrency");
        return new Kh(a);
    }
    function op(a) {
        return function (b, c) {
            a(null == b ? c : null);
        };
    }
    function pp(a, b) {
        return function (c) {
            return a(c.responseText, b);
        };
    }
    function Mh(a) {
        function b(f) {
            var g = f + "",
                h = c.get(g);
            if (!h) {
                if (e !== Nh) return e;
                c.set(g, (h = d.push(f)));
            }
            return a[(h - 1) % a.length];
        }
        var c = oc(),
            d = [],
            e = Nh;
        a = null == a ? [] : Yc.call(a);
        b.domain = function (a) {
            if (!arguments.length) return d.slice();
            d = [];
            c = oc();
            for (var e = -1, f = a.length, g, h; ++e < f; ) c.has((h = (g = a[e]) + "")) || c.set(h, d.push(g));
            return b;
        };
        b.range = function (c) {
            return arguments.length ? ((a = Yc.call(c)), b) : a.slice();
        };
        b.unknown = function (a) {
            return arguments.length ? ((e = a), b) : e;
        };
        b.copy = function () {
            return Mh().domain(d).range(a).unknown(e);
        };
        return b;
    }
    function Oh() {
        function a() {
            var b = c().length,
                Na = e[1] < e[0],
                oa = e[Na - 0],
                n = e[1 - Na];
            f = (n - oa) / Math.max(1, b - k + 2 * l);
            h && (f = Math.floor(f));
            oa += (n - oa - f * (b - k)) * m;
            g = f * (1 - k);
            h && ((oa = Math.round(oa)), (g = Math.round(g)));
            b = kc(b).map(function (a) {
                return oa + f * a;
            });
            return d(Na ? b.reverse() : b);
        }
        var b = Mh().unknown(void 0),
            c = b.domain,
            d = b.range,
            e = [0, 1],
            f,
            g,
            h = !1,
            k = 0,
            l = 0,
            m = 0.5;
        delete b.unknown;
        b.domain = function (b) {
            return arguments.length ? (c(b), a()) : c();
        };
        b.range = function (b) {
            return arguments.length ? ((e = [+b[0], +b[1]]), a()) : e.slice();
        };
        b.rangeRound = function (b) {
            return (e = [+b[0], +b[1]]), (h = !0), a();
        };
        b.bandwidth = function () {
            return g;
        };
        b.step = function () {
            return f;
        };
        b.round = function (b) {
            return arguments.length ? ((h = !!b), a()) : h;
        };
        b.padding = function (b) {
            return arguments.length ? ((k = l = Math.max(0, Math.min(1, b))), a()) : k;
        };
        b.paddingInner = function (b) {
            return arguments.length ? ((k = Math.max(0, Math.min(1, b))), a()) : k;
        };
        b.paddingOuter = function (b) {
            return arguments.length ? ((l = Math.max(0, Math.min(1, b))), a()) : l;
        };
        b.align = function (b) {
            return arguments.length ? ((m = Math.max(0, Math.min(1, b))), a()) : m;
        };
        b.copy = function () {
            return Oh().domain(c()).range(e).round(h).paddingInner(k).paddingOuter(l).align(m);
        };
        return a();
    }
    function Rk(a) {
        var b = a.copy;
        a.padding = a.paddingOuter;
        delete a.paddingInner;
        delete a.paddingOuter;
        a.copy = function () {
            return Rk(b());
        };
        return a;
    }
    function Ph(a, b) {
        return (b -= a = +a)
            ? function (c) {
                  return (c - a) / b;
              }
            : Qh(b);
    }
    function qp(a) {
        return function (b, c) {
            var d = a((b = +b), (c = +c));
            return function (a) {
                return a <= b ? 0 : a >= c ? 1 : d(a);
            };
        };
    }
    function rp(a) {
        return function (b, c) {
            var d = a((b = +b), (c = +c));
            return function (a) {
                return 0 >= a ? b : 1 <= a ? c : d(a);
            };
        };
    }
    function sp(a, b, c, d) {
        var e = a[0];
        a = a[1];
        var f = b[0];
        b = b[1];
        a < e ? ((e = c(a, e)), (f = d(b, f))) : ((e = c(e, a)), (f = d(f, b)));
        return function (a) {
            return f(e(a));
        };
    }
    function tp(a, b, c, d) {
        var e = Math.min(a.length, b.length) - 1,
            f = Array(e),
            g = Array(e),
            h = -1;
        a[e] < a[0] && ((a = a.slice().reverse()), (b = b.slice().reverse()));
        for (; ++h < e; ) (f[h] = c(a[h], a[h + 1])), (g[h] = d(b[h], b[h + 1]));
        return function (b) {
            var c = Ad(a, b, 1, e) - 1;
            return g[c](f[c](b));
        };
    }
    function kg(a, b) {
        return b.domain(a.domain()).range(a.range()).interpolate(a.interpolate()).clamp(a.clamp());
    }
    function lg(a, b) {
        function c() {
            k = 2 < Math.min(e.length, f.length) ? tp : sp;
            l = m = null;
            return d;
        }
        function d(b) {
            return (l || (l = k(e, f, h ? qp(a) : a, g)))(+b);
        }
        var e = Sk,
            f = Sk,
            g = Ne,
            h = !1,
            k,
            l,
            m;
        d.invert = function (a) {
            return (m || (m = k(f, e, Ph, h ? rp(b) : b)))(+a);
        };
        d.domain = function (a) {
            return arguments.length ? ((e = Rh.call(a, Tk)), c()) : e.slice();
        };
        d.range = function (a) {
            return arguments.length ? ((f = Yc.call(a)), c()) : f.slice();
        };
        d.rangeRound = function (a) {
            return (f = Yc.call(a)), (g = Uk), c();
        };
        d.clamp = function (a) {
            return arguments.length ? ((h = !!a), c()) : h;
        };
        d.interpolate = function (a) {
            return arguments.length ? ((g = a), c()) : g;
        };
        return c();
    }
    function $e(a) {
        var c = a.domain;
        a.ticks = function (a) {
            var b = c();
            return Sh(b[0], b[b.length - 1], null == a ? 10 : a);
        };
        a.tickFormat = function (a, d) {
            var f;
            a: {
                var g = c();
                f = d;
                var h = g[0],
                    k = g[g.length - 1],
                    g = e(h, k, null == a ? 10 : a),
                    l;
                f = De(null == f ? ",f" : f);
                switch (f.type) {
                    case "s":
                        h = Math.max(Math.abs(h), Math.abs(k));
                        null != f.precision || isNaN((l = Vk(g, h))) || (f.precision = l);
                        f = b.formatPrefix(f, h);
                        break a;
                    case "":
                    case "e":
                    case "g":
                    case "p":
                    case "r":
                        null != f.precision || isNaN((l = Wk(g, Math.max(Math.abs(h), Math.abs(k))))) || (f.precision = l - ("e" === f.type));
                        break;
                    case "f":
                    case "%":
                        null != f.precision || isNaN((l = Xk(g))) || (f.precision = l - 2 * ("%" === f.type));
                }
                f = b.format(f);
            }
            return f;
        };
        a.nice = function (b) {
            null == b && (b = 10);
            var e = c(),
                f = 0,
                g = e.length - 1,
                h = e[f],
                k = e[g],
                l;
            k < h && ((l = h), (h = k), (k = l), (l = f), (f = g), (g = l));
            l = d(h, k, b);
            0 < l ? ((h = Math.floor(h / l) * l), (k = Math.ceil(k / l) * l), (l = d(h, k, b))) : 0 > l && ((h = Math.ceil(h * l) / l), (k = Math.floor(k * l) / l), (l = d(h, k, b)));
            0 < l ? ((e[f] = Math.floor(h / l) * l), (e[g] = Math.ceil(k / l) * l), c(e)) : 0 > l && ((e[f] = Math.ceil(h * l) / l), (e[g] = Math.floor(k * l) / l), c(e));
            return a;
        };
        return a;
    }
    function Yk() {
        var a = lg(Ph, Qb);
        a.copy = function () {
            return kg(a, Yk());
        };
        return $e(a);
    }
    function Zk() {
        function a(b) {
            return +b;
        }
        var b = [0, 1];
        a.invert = a;
        a.domain = a.range = function (c) {
            return arguments.length ? ((b = Rh.call(c, Tk)), a) : b.slice();
        };
        a.copy = function () {
            return Zk().domain(b);
        };
        return $e(a);
    }
    function up(a, b) {
        return (b = Math.log(b / a))
            ? function (c) {
                  return Math.log(c / a) / b;
              }
            : Qh(b);
    }
    function vp(a, b) {
        return 0 > a
            ? function (c) {
                  return -Math.pow(-b, c) * Math.pow(-a, 1 - c);
              }
            : function (c) {
                  return Math.pow(b, c) * Math.pow(a, 1 - c);
              };
    }
    function wp(a) {
        return isFinite(a) ? +("1e" + a) : 0 > a ? 0 : a;
    }
    function $k(a) {
        return 10 === a
            ? wp
            : a === Math.E
            ? Math.exp
            : function (b) {
                  return Math.pow(a, b);
              };
    }
    function al(a) {
        return a === Math.E
            ? Math.log
            : (10 === a && Math.log10) ||
                  (2 === a && Math.log2) ||
                  ((a = Math.log(a)),
                  function (b) {
                      return Math.log(b) / a;
                  });
    }
    function bl(a) {
        return function (b) {
            return -a(-b);
        };
    }
    function cl() {
        function a() {
            f = al(e);
            g = $k(e);
            0 > d()[0] && ((f = bl(f)), (g = bl(g)));
            return c;
        }
        var c = lg(up, vp).domain([1, 10]),
            d = c.domain,
            e = 10,
            f = al(10),
            g = $k(10);
        c.base = function (b) {
            return arguments.length ? ((e = +b), a()) : e;
        };
        c.domain = function (b) {
            return arguments.length ? (d(b), a()) : d();
        };
        c.ticks = function (a) {
            var b = d(),
                c = b[0],
                b = b[b.length - 1],
                h;
            if ((h = b < c)) (k = c), (c = b), (b = k);
            var k = f(c),
                l = f(b),
                Na,
                oa,
                m;
            Na = null == a ? 10 : +a;
            a = [];
            if (!(e % 1) && l - k < Na)
                if (((k = Math.round(k) - 1), (l = Math.round(l) + 1), 0 < c))
                    for (; k < l; ++k)
                        for (oa = 1, Na = g(k); oa < e; ++oa) {
                            if (((m = Na * oa), !(m < c))) {
                                if (m > b) break;
                                a.push(m);
                            }
                        }
                else
                    for (; k < l; ++k)
                        for (oa = e - 1, Na = g(k); 1 <= oa; --oa) {
                            if (((m = Na * oa), !(m < c))) {
                                if (m > b) break;
                                a.push(m);
                            }
                        }
            else a = Sh(k, l, Math.min(l - k, Na)).map(g);
            return h ? a.reverse() : a;
        };
        c.tickFormat = function (a, d) {
            null == d && (d = 10 === e ? ".0e" : ",");
            "function" !== typeof d && (d = b.format(d));
            if (Infinity === a) return d;
            null == a && (a = 10);
            var h = Math.max(1, (e * a) / c.ticks().length);
            return function (a) {
                var b = a / g(Math.round(f(a)));
                b * e < e - 0.5 && (b *= e);
                return b <= h ? d(a) : "";
            };
        };
        c.nice = function () {
            return d(
                dl(d(), {
                    floor: function (a) {
                        return g(Math.floor(f(a)));
                    },
                    ceil: function (a) {
                        return g(Math.ceil(f(a)));
                    },
                })
            );
        };
        c.copy = function () {
            return kg(c, cl().base(e));
        };
        return c;
    }
    function ie(a, b) {
        return 0 > a ? -Math.pow(-a, b) : Math.pow(a, b);
    }
    function Th() {
        var a = 1,
            b = lg(
                function (b, c) {
                    return (c = ie(c, a) - (b = ie(b, a)))
                        ? function (d) {
                              return (ie(d, a) - b) / c;
                          }
                        : Qh(c);
                },
                function (b, c) {
                    c = ie(c, a) - (b = ie(b, a));
                    return function (d) {
                        return ie(b + c * d, 1 / a);
                    };
                }
            ),
            c = b.domain;
        b.exponent = function (b) {
            return arguments.length ? ((a = +b), c(c())) : a;
        };
        b.copy = function () {
            return kg(b, Th().exponent(a));
        };
        return $e(b);
    }
    function el() {
        function a() {
            var f = 0,
                g = Math.max(1, d.length);
            for (e = Array(g - 1); ++f < g; ) e[f - 1] = af(c, f / g);
            return b;
        }
        function b(a) {
            if (!isNaN((a = +a))) return d[Ad(e, a)];
        }
        var c = [],
            d = [],
            e = [];
        b.invertExtent = function (a) {
            a = d.indexOf(a);
            return 0 > a ? [NaN, NaN] : [0 < a ? e[a - 1] : c[0], a < e.length ? e[a] : c[c.length - 1]];
        };
        b.domain = function (b) {
            if (!arguments.length) return c.slice();
            c = [];
            for (var d = 0, e = b.length, f; d < e; ++d) ((f = b[d]), null == f || isNaN((f = +f))) || c.push(f);
            c.sort(td);
            return a();
        };
        b.range = function (b) {
            return arguments.length ? ((d = Yc.call(b)), a()) : d.slice();
        };
        b.quantiles = function () {
            return e.slice();
        };
        b.copy = function () {
            return el().domain(c).range(d);
        };
        return b;
    }
    function fl() {
        function a(b) {
            if (b <= b) return g[Ad(f, b, 0, e)];
        }
        function b() {
            var g = -1;
            for (f = Array(e); ++g < e; ) f[g] = ((g + 1) * d - (g - e) * c) / (e + 1);
            return a;
        }
        var c = 0,
            d = 1,
            e = 1,
            f = [0.5],
            g = [0, 1];
        a.domain = function (a) {
            return arguments.length ? ((c = +a[0]), (d = +a[1]), b()) : [c, d];
        };
        a.range = function (a) {
            return arguments.length ? ((e = (g = Yc.call(a)).length - 1), b()) : g.slice();
        };
        a.invertExtent = function (a) {
            a = g.indexOf(a);
            return 0 > a ? [NaN, NaN] : 1 > a ? [c, f[0]] : a >= e ? [f[e - 1], d] : [f[a - 1], f[a]];
        };
        a.copy = function () {
            return fl().domain([c, d]).range(g);
        };
        return $e(a);
    }
    function gl() {
        function a(e) {
            if (e <= e) return c[Ad(b, e, 0, d)];
        }
        var b = [0.5],
            c = [0, 1],
            d = 1;
        a.domain = function (e) {
            return arguments.length ? ((b = Yc.call(e)), (d = Math.min(b.length, c.length - 1)), a) : b.slice();
        };
        a.range = function (e) {
            return arguments.length ? ((c = Yc.call(e)), (d = Math.min(b.length, c.length - 1)), a) : c.slice();
        };
        a.invertExtent = function (a) {
            a = c.indexOf(a);
            return [b[a - 1], b[a]];
        };
        a.copy = function () {
            return gl().domain(b).range(c);
        };
        return a;
    }
    function gb(a, b, c, d) {
        function e(b) {
            return a((b = new Date(+b))), b;
        }
        e.floor = e;
        e.ceil = function (c) {
            return a((c = new Date(c - 1))), b(c, 1), a(c), c;
        };
        e.round = function (a) {
            var b = e(a),
                c = e.ceil(a);
            return a - b < c - a ? b : c;
        };
        e.offset = function (a, c) {
            return b((a = new Date(+a)), null == c ? 1 : Math.floor(c)), a;
        };
        e.range = function (c, d, f) {
            var g = [];
            c = e.ceil(c);
            f = null == f ? 1 : Math.floor(f);
            if (!(c < d && 0 < f)) return g;
            do g.push(new Date(+c));
            while ((b(c, f), a(c), c < d));
            return g;
        };
        e.filter = function (c) {
            return gb(
                function (b) {
                    if (b >= b) for (; a(b), !c(b); ) b.setTime(b - 1);
                },
                function (a, d) {
                    if (a >= a) for (; 0 <= --d; ) for (; b(a, 1), !c(a); );
                }
            );
        };
        c &&
            ((e.count = function (b, d) {
                Uh.setTime(+b);
                Vh.setTime(+d);
                a(Uh);
                a(Vh);
                return Math.floor(c(Uh, Vh));
            }),
            (e.every = function (a) {
                a = Math.floor(a);
                return isFinite(a) && 0 < a
                    ? 1 < a
                        ? e.filter(
                              d
                                  ? function (b) {
                                        return 0 === d(b) % a;
                                    }
                                  : function (b) {
                                        return 0 === e.count(0, b) % a;
                                    }
                          )
                        : e
                    : null;
            }));
        return e;
    }
    function Bd(a) {
        return gb(
            function (b) {
                b.setDate(b.getDate() - ((b.getDay() + 7 - a) % 7));
                b.setHours(0, 0, 0, 0);
            },
            function (a, b) {
                a.setDate(a.getDate() + 7 * b);
            },
            function (a, b) {
                return (b - a - 6e4 * (b.getTimezoneOffset() - a.getTimezoneOffset())) / 6048e5;
            }
        );
    }
    function Cd(a) {
        return gb(
            function (b) {
                b.setUTCDate(b.getUTCDate() - ((b.getUTCDay() + 7 - a) % 7));
                b.setUTCHours(0, 0, 0, 0);
            },
            function (a, b) {
                a.setUTCDate(a.getUTCDate() + 7 * b);
            },
            function (a, b) {
                return (b - a) / 6048e5;
            }
        );
    }
    function xp(a) {
        if (0 <= a.y && 100 > a.y) {
            var b = new Date(-1, a.m, a.d, a.H, a.M, a.S, a.L);
            b.setFullYear(a.y);
            return b;
        }
        return new Date(a.y, a.m, a.d, a.H, a.M, a.S, a.L);
    }
    function Wh(a) {
        if (0 <= a.y && 100 > a.y) {
            var b = new Date(Date.UTC(-1, a.m, a.d, a.H, a.M, a.S, a.L));
            b.setUTCFullYear(a.y);
            return b;
        }
        return new Date(Date.UTC(a.y, a.m, a.d, a.H, a.M, a.S, a.L));
    }
    function Xh(a) {
        return { y: a, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0 };
    }
    function hl(a) {
        function b(a, c) {
            return function (b) {
                var d = [],
                    e = -1,
                    f = 0,
                    g = a.length,
                    h,
                    k;
                for (b instanceof Date || (b = new Date(+b)); ++e < g; )
                    if (37 === a.charCodeAt(e)) {
                        d.push(a.slice(f, e));
                        null != (f = il[(h = a.charAt(++e))]) ? (h = a.charAt(++e)) : (f = "e" === h ? " " : "0");
                        if ((k = c[h])) h = k(b, f);
                        d.push(h);
                        f = e + 1;
                    }
                d.push(a.slice(f, e));
                return d.join("");
            };
        }
        function c(a, b) {
            return function (c) {
                var e = Xh(1900);
                if (d(e, a, (c += ""), 0) != c.length) return null;
                "p" in e && (e.H = (e.H % 12) + 12 * e.p);
                if ("W" in e || "U" in e)
                    "w" in e || (e.w = "W" in e ? 1 : 0), (c = "Z" in e ? Wh(Xh(e.y)).getUTCDay() : b(Xh(e.y)).getDay()), (e.m = 0), (e.d = "W" in e ? ((e.w + 6) % 7) + 7 * e.W - ((c + 5) % 7) : e.w + 7 * e.U - ((c + 6) % 7));
                return "Z" in e ? ((e.H += (e.Z / 100) | 0), (e.M += e.Z % 100), Wh(e)) : b(e);
            };
        }
        function d(a, b, c, e) {
            for (var f = 0, g = b.length, h = c.length, k; f < g; ) {
                if (e >= h) return -1;
                k = b.charCodeAt(f++);
                if (37 === k) {
                    if (((k = b.charAt(f++)), (k = B[k in il ? b.charAt(f++) : k]), !k || 0 > (e = k(a, c, e)))) return -1;
                } else if (k != c.charCodeAt(e++)) return -1;
            }
            return e;
        }
        var e = a.dateTime,
            f = a.date,
            g = a.time,
            h = a.periods,
            k = a.days,
            l = a.shortDays,
            m = a.months,
            n = a.shortMonths,
            p = bf(h),
            q = cf(h),
            t = bf(k),
            r = cf(k),
            w = bf(l),
            u = cf(l),
            P = bf(m),
            v = cf(m),
            y = bf(n),
            x = cf(n),
            z = {
                a: function (a) {
                    return l[a.getDay()];
                },
                A: function (a) {
                    return k[a.getDay()];
                },
                b: function (a) {
                    return n[a.getMonth()];
                },
                B: function (a) {
                    return m[a.getMonth()];
                },
                c: null,
                d: jl,
                e: jl,
                H: yp,
                I: zp,
                j: Ap,
                L: Bp,
                m: Cp,
                M: Dp,
                p: function (a) {
                    return h[+(12 <= a.getHours())];
                },
                S: Ep,
                U: Fp,
                w: Gp,
                W: Hp,
                x: null,
                X: null,
                y: Ip,
                Y: Jp,
                Z: Kp,
                "%": kl,
            },
            C = {
                a: function (a) {
                    return l[a.getUTCDay()];
                },
                A: function (a) {
                    return k[a.getUTCDay()];
                },
                b: function (a) {
                    return n[a.getUTCMonth()];
                },
                B: function (a) {
                    return m[a.getUTCMonth()];
                },
                c: null,
                d: ll,
                e: ll,
                H: Lp,
                I: Mp,
                j: Np,
                L: Op,
                m: Pp,
                M: Qp,
                p: function (a) {
                    return h[+(12 <= a.getUTCHours())];
                },
                S: Rp,
                U: Sp,
                w: Tp,
                W: Up,
                x: null,
                X: null,
                y: Vp,
                Y: Wp,
                Z: Xp,
                "%": kl,
            },
            B = {
                a: function (a, b, c) {
                    return (b = w.exec(b.slice(c))) ? ((a.w = u[b[0].toLowerCase()]), c + b[0].length) : -1;
                },
                A: function (a, b, c) {
                    return (b = t.exec(b.slice(c))) ? ((a.w = r[b[0].toLowerCase()]), c + b[0].length) : -1;
                },
                b: function (a, b, c) {
                    return (b = y.exec(b.slice(c))) ? ((a.m = x[b[0].toLowerCase()]), c + b[0].length) : -1;
                },
                B: function (a, b, c) {
                    return (b = P.exec(b.slice(c))) ? ((a.m = v[b[0].toLowerCase()]), c + b[0].length) : -1;
                },
                c: function (a, b, c) {
                    return d(a, e, b, c);
                },
                d: ml,
                e: ml,
                H: nl,
                I: nl,
                j: Yp,
                L: Zp,
                m: $p,
                M: aq,
                p: function (a, b, c) {
                    return (b = p.exec(b.slice(c))) ? ((a.p = q[b[0].toLowerCase()]), c + b[0].length) : -1;
                },
                S: bq,
                U: cq,
                w: dq,
                W: eq,
                x: function (a, b, c) {
                    return d(a, f, b, c);
                },
                X: function (a, b, c) {
                    return d(a, g, b, c);
                },
                y: fq,
                Y: gq,
                Z: hq,
                "%": iq,
            };
        z.x = b(f, z);
        z.X = b(g, z);
        z.c = b(e, z);
        C.x = b(f, C);
        C.X = b(g, C);
        C.c = b(e, C);
        return {
            format: function (a) {
                var c = b((a += ""), z);
                c.toString = function () {
                    return a;
                };
                return c;
            },
            parse: function (a) {
                var b = c((a += ""), xp);
                b.toString = function () {
                    return a;
                };
                return b;
            },
            utcFormat: function (a) {
                var c = b((a += ""), C);
                c.toString = function () {
                    return a;
                };
                return c;
            },
            utcParse: function (a) {
                var b = c(a, Wh);
                b.toString = function () {
                    return a;
                };
                return b;
            },
        };
    }
    function Ha(a, b, c) {
        var d = 0 > a ? "-" : "";
        a = (d ? -a : a) + "";
        var e = a.length;
        return d + (e < c ? Array(c - e + 1).join(b) + a : a);
    }
    function jq(a) {
        return a.replace(kq, "\\$&");
    }
    function bf(a) {
        return new RegExp("^(?:" + a.map(jq).join("|") + ")", "i");
    }
    function cf(a) {
        for (var b = {}, c = -1, d = a.length; ++c < d; ) b[a[c].toLowerCase()] = c;
        return b;
    }
    function dq(a, b, c) {
        return (b = $b.exec(b.slice(c, c + 1))) ? ((a.w = +b[0]), c + b[0].length) : -1;
    }
    function cq(a, b, c) {
        return (b = $b.exec(b.slice(c))) ? ((a.U = +b[0]), c + b[0].length) : -1;
    }
    function eq(a, b, c) {
        return (b = $b.exec(b.slice(c))) ? ((a.W = +b[0]), c + b[0].length) : -1;
    }
    function gq(a, b, c) {
        return (b = $b.exec(b.slice(c, c + 4))) ? ((a.y = +b[0]), c + b[0].length) : -1;
    }
    function fq(a, b, c) {
        return (b = $b.exec(b.slice(c, c + 2))) ? ((a.y = +b[0] + (68 < +b[0] ? 1900 : 2e3)), c + b[0].length) : -1;
    }
    function hq(a, b, c) {
        return (b = /^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(b.slice(c, c + 6))) ? ((a.Z = b[1] ? 0 : -(b[2] + (b[3] || "00"))), c + b[0].length) : -1;
    }
    function $p(a, b, c) {
        return (b = $b.exec(b.slice(c, c + 2))) ? ((a.m = b[0] - 1), c + b[0].length) : -1;
    }
    function ml(a, b, c) {
        return (b = $b.exec(b.slice(c, c + 2))) ? ((a.d = +b[0]), c + b[0].length) : -1;
    }
    function Yp(a, b, c) {
        return (b = $b.exec(b.slice(c, c + 3))) ? ((a.m = 0), (a.d = +b[0]), c + b[0].length) : -1;
    }
    function nl(a, b, c) {
        return (b = $b.exec(b.slice(c, c + 2))) ? ((a.H = +b[0]), c + b[0].length) : -1;
    }
    function aq(a, b, c) {
        return (b = $b.exec(b.slice(c, c + 2))) ? ((a.M = +b[0]), c + b[0].length) : -1;
    }
    function bq(a, b, c) {
        return (b = $b.exec(b.slice(c, c + 2))) ? ((a.S = +b[0]), c + b[0].length) : -1;
    }
    function Zp(a, b, c) {
        return (b = $b.exec(b.slice(c, c + 3))) ? ((a.L = +b[0]), c + b[0].length) : -1;
    }
    function iq(a, b, c) {
        return (a = lq.exec(b.slice(c, c + 1))) ? c + a[0].length : -1;
    }
    function jl(a, b) {
        return Ha(a.getDate(), b, 2);
    }
    function yp(a, b) {
        return Ha(a.getHours(), b, 2);
    }
    function zp(a, b) {
        return Ha(a.getHours() % 12 || 12, b, 2);
    }
    function Ap(a, b) {
        return Ha(1 + mg.count(Dd(a), a), b, 3);
    }
    function Bp(a, b) {
        return Ha(a.getMilliseconds(), b, 3);
    }
    function Cp(a, b) {
        return Ha(a.getMonth() + 1, b, 2);
    }
    function Dp(a, b) {
        return Ha(a.getMinutes(), b, 2);
    }
    function Ep(a, b) {
        return Ha(a.getSeconds(), b, 2);
    }
    function Fp(a, b) {
        return Ha(df.count(Dd(a), a), b, 2);
    }
    function Gp(a) {
        return a.getDay();
    }
    function Hp(a, b) {
        return Ha(Yh.count(Dd(a), a), b, 2);
    }
    function Ip(a, b) {
        return Ha(a.getFullYear() % 100, b, 2);
    }
    function Jp(a, b) {
        return Ha(a.getFullYear() % 1e4, b, 4);
    }
    function Kp(a) {
        a = a.getTimezoneOffset();
        return (0 < a ? "-" : ((a *= -1), "+")) + Ha((a / 60) | 0, "0", 2) + Ha(a % 60, "0", 2);
    }
    function ll(a, b) {
        return Ha(a.getUTCDate(), b, 2);
    }
    function Lp(a, b) {
        return Ha(a.getUTCHours(), b, 2);
    }
    function Mp(a, b) {
        return Ha(a.getUTCHours() % 12 || 12, b, 2);
    }
    function Np(a, b) {
        return Ha(1 + ng.count(Ed(a), a), b, 3);
    }
    function Op(a, b) {
        return Ha(a.getUTCMilliseconds(), b, 3);
    }
    function Pp(a, b) {
        return Ha(a.getUTCMonth() + 1, b, 2);
    }
    function Qp(a, b) {
        return Ha(a.getUTCMinutes(), b, 2);
    }
    function Rp(a, b) {
        return Ha(a.getUTCSeconds(), b, 2);
    }
    function Sp(a, b) {
        return Ha(ef.count(Ed(a), a), b, 2);
    }
    function Tp(a) {
        return a.getUTCDay();
    }
    function Up(a, b) {
        return Ha(Zh.count(Ed(a), a), b, 2);
    }
    function Vp(a, b) {
        return Ha(a.getUTCFullYear() % 100, b, 2);
    }
    function Wp(a, b) {
        return Ha(a.getUTCFullYear() % 1e4, b, 4);
    }
    function Xp() {
        return "+0000";
    }
    function kl() {
        return "%";
    }
    function ol(a) {
        je = hl(a);
        b.timeFormat = je.format;
        b.timeParse = je.parse;
        b.utcFormat = je.utcFormat;
        b.utcParse = je.utcParse;
        return je;
    }
    function mq(a) {
        return a.toISOString();
    }
    function nq(a) {
        a = new Date(a);
        return isNaN(a) ? null : a;
    }
    function oq(a) {
        return new Date(a);
    }
    function pq(a) {
        return a instanceof Date ? +a : +new Date(+a);
    }
    function $h(a, b, c, d, f, g, h, k, l) {
        function m(e) {
            return (h(e) < e ? t : g(e) < e ? r : f(e) < e ? w : d(e) < e ? u : b(e) < e ? (c(e) < e ? P : v) : a(e) < e ? y : x)(e);
        }
        function F(b, c, d, f) {
            null == b && (b = 10);
            if ("number" === typeof b) {
                f = Math.abs(d - c) / b;
                var g = ai(function (a) {
                    return a[2];
                }).right(z, f);
                g === z.length ? ((f = e(c / 31536e6, d / 31536e6, b)), (b = a)) : g ? ((g = z[f / z[g - 1][2] < z[g][2] / f ? g - 1 : g]), (f = g[1]), (b = g[0])) : ((f = e(c, d, b)), (b = k));
            }
            return null == f ? b : b.every(f);
        }
        var n = lg(Ph, Qb),
            p = n.invert,
            q = n.domain,
            t = l(".%L"),
            r = l(":%S"),
            w = l("%I:%M"),
            u = l("%I %p"),
            P = l("%a %d"),
            v = l("%b %d"),
            y = l("%B"),
            x = l("%Y"),
            z = [
                [h, 1, 1e3],
                [h, 5, 5e3],
                [h, 15, 15e3],
                [h, 30, 3e4],
                [g, 1, 6e4],
                [g, 5, 3e5],
                [g, 15, 9e5],
                [g, 30, 18e5],
                [f, 1, 36e5],
                [f, 3, 108e5],
                [f, 6, 216e5],
                [f, 12, 432e5],
                [d, 1, 864e5],
                [d, 2, 1728e5],
                [c, 1, 6048e5],
                [b, 1, 2592e6],
                [b, 3, 7776e6],
                [a, 1, 31536e6],
            ];
        n.invert = function (a) {
            return new Date(p(a));
        };
        n.domain = function (a) {
            return arguments.length ? q(Rh.call(a, pq)) : q().map(oq);
        };
        n.ticks = function (a, b) {
            var c = q(),
                d = c[0],
                c = c[c.length - 1],
                e = c < d,
                f;
            e && ((f = d), (d = c), (c = f));
            f = (f = F(a, d, c, b)) ? f.range(d, c + 1) : [];
            return e ? f.reverse() : f;
        };
        n.tickFormat = function (a, b) {
            return null == b ? m : l(b);
        };
        n.nice = function (a, b) {
            var c = q();
            return (a = F(a, c[0], c[c.length - 1], b)) ? q(dl(c, a)) : n;
        };
        n.copy = function () {
            return kg(n, $h(a, b, c, d, f, g, h, k, l));
        };
        return n;
    }
    function og(a) {
        var b = a.length;
        return function (c) {
            return a[Math.max(0, Math.min(b - 1, Math.floor(c * b)))];
        };
    }
    function pl(a) {
        function b(f) {
            f = (f - c) / (d - c);
            return a(e ? Math.max(0, Math.min(1, f)) : f);
        }
        var c = 0,
            d = 1,
            e = !1;
        b.domain = function (a) {
            return arguments.length ? ((c = +a[0]), (d = +a[1]), b) : [c, d];
        };
        b.clamp = function (a) {
            return arguments.length ? ((e = !!a), b) : e;
        };
        b.interpolator = function (c) {
            return arguments.length ? ((a = c), b) : a;
        };
        b.copy = function () {
            return pl(a).domain([c, d]).clamp(e);
        };
        return $e(b);
    }
    function ql(a) {
        return 1 <= a ? pg : -1 >= a ? -pg : Math.asin(a);
    }
    function qq(a) {
        return a.innerRadius;
    }
    function rq(a) {
        return a.outerRadius;
    }
    function sq(a) {
        return a.startAngle;
    }
    function tq(a) {
        return a.endAngle;
    }
    function uq(a) {
        return a && a.padAngle;
    }
    function qg(a, b, c, d, e, f, g) {
        var h = a - c,
            k = b - d;
        g = (g ? f : -f) / ke(h * h + k * k);
        var k = g * k,
            h = -g * h,
            l = a + k,
            m = b + h,
            n = c + k,
            p = d + h;
        c = (l + n) / 2;
        d = (m + p) / 2;
        b = n - l;
        a = p - m;
        g = b * b + a * a;
        f = e - f;
        var p = l * p - n * m,
            q = (0 > a ? -1 : 1) * ke(vq(0, f * f * g - p * p)),
            l = (p * a - b * q) / g,
            m = (-p * b - a * q) / g,
            n = (p * a + b * q) / g;
        b = (-p * b + a * q) / g;
        a = l - c;
        g = m - d;
        c = n - c;
        d = b - d;
        a * a + g * g > c * c + d * d && ((l = n), (m = b));
        return { cx: l, cy: m, x01: -k, y01: -h, x11: l * (e / f - 1), y11: m * (e / f - 1) };
    }
    function rl(a) {
        this._context = a;
    }
    function bi(a) {
        return a[0];
    }
    function ci(a) {
        return a[1];
    }
    function sl(a) {
        this._curve = a;
    }
    function di(a) {
        function b(c) {
            return new sl(a(c));
        }
        b._curve = a;
        return b;
    }
    function ff(a) {
        var b = a.curve;
        a.angle = a.x;
        delete a.x;
        a.radius = a.y;
        delete a.y;
        a.curve = function (a) {
            return arguments.length ? b(di(a)) : b()._curve;
        };
        return a;
    }
    function wq(a) {
        return a.source;
    }
    function xq(a) {
        return a.target;
    }
    function ei(a) {
        function b() {
            var h,
                k = fi.call(arguments),
                l = c.apply(this, k),
                m = d.apply(this, k);
            g || (g = h = Nc());
            a(g, +e.apply(this, ((k[0] = l), k)), +f.apply(this, k), +e.apply(this, ((k[0] = m), k)), +f.apply(this, k));
            if (h) return (g = null), h + "" || null;
        }
        var c = wq,
            d = xq,
            e = bi,
            f = ci,
            g = null;
        b.source = function (a) {
            return arguments.length ? ((c = a), b) : c;
        };
        b.target = function (a) {
            return arguments.length ? ((d = a), b) : d;
        };
        b.x = function (a) {
            return arguments.length ? ((e = "function" === typeof a ? a : ka(+a)), b) : e;
        };
        b.y = function (a) {
            return arguments.length ? ((f = "function" === typeof a ? a : ka(+a)), b) : f;
        };
        b.context = function (a) {
            return arguments.length ? ((g = null == a ? null : a), b) : g;
        };
        return b;
    }
    function yq(a, b, c, d, e) {
        a.moveTo(b, c);
        a.bezierCurveTo((b = (b + d) / 2), c, b, e, d, e);
    }
    function zq(a, b, c, d, e) {
        a.moveTo(b, c);
        a.bezierCurveTo(b, (c = (c + e) / 2), d, c, d, e);
    }
    function Aq(a, b, c, d, e) {
        var f = rg(b, c);
        b = rg(b, (c = (c + e) / 2));
        c = rg(d, c);
        d = rg(d, e);
        a.moveTo(f[0], f[1]);
        a.bezierCurveTo(b[0], b[1], c[0], c[1], d[0], d[1]);
    }
    function sg(a, b, c) {
        a._context.bezierCurveTo((2 * a._x0 + a._x1) / 3, (2 * a._y0 + a._y1) / 3, (a._x0 + 2 * a._x1) / 3, (a._y0 + 2 * a._y1) / 3, (a._x0 + 4 * a._x1 + b) / 6, (a._y0 + 4 * a._y1 + c) / 6);
    }
    function tg(a) {
        this._context = a;
    }
    function tl(a) {
        this._context = a;
    }
    function ul(a) {
        this._context = a;
    }
    function vl(a, b) {
        this._basis = new tg(a);
        this._beta = b;
    }
    function ug(a, b, c) {
        a._context.bezierCurveTo(a._x1 + a._k * (a._x2 - a._x0), a._y1 + a._k * (a._y2 - a._y0), a._x2 + a._k * (a._x1 - b), a._y2 + a._k * (a._y1 - c), a._x2, a._y2);
    }
    function gi(a, b) {
        this._context = a;
        this._k = (1 - b) / 6;
    }
    function hi(a, b) {
        this._context = a;
        this._k = (1 - b) / 6;
    }
    function ii(a, b) {
        this._context = a;
        this._k = (1 - b) / 6;
    }
    function ji(a, b, c) {
        var d = a._x1,
            e = a._y1,
            f = a._x2,
            g = a._y2;
        if (1e-12 < a._l01_a)
            var h = 2 * a._l01_2a + 3 * a._l01_a * a._l12_a + a._l12_2a,
                k = 3 * a._l01_a * (a._l01_a + a._l12_a),
                d = (d * h - a._x0 * a._l12_2a + a._x2 * a._l01_2a) / k,
                e = (e * h - a._y0 * a._l12_2a + a._y2 * a._l01_2a) / k;
        1e-12 < a._l23_a &&
            ((h = 2 * a._l23_2a + 3 * a._l23_a * a._l12_a + a._l12_2a), (k = 3 * a._l23_a * (a._l23_a + a._l12_a)), (f = (f * h + a._x1 * a._l23_2a - b * a._l12_2a) / k), (g = (g * h + a._y1 * a._l23_2a - c * a._l12_2a) / k));
        a._context.bezierCurveTo(d, e, f, g, a._x2, a._y2);
    }
    function wl(a, b) {
        this._context = a;
        this._alpha = b;
    }
    function xl(a, b) {
        this._context = a;
        this._alpha = b;
    }
    function yl(a, b) {
        this._context = a;
        this._alpha = b;
    }
    function zl(a) {
        this._context = a;
    }
    function Al(a, b, c) {
        var d = a._x1 - a._x0;
        b -= a._x1;
        var e = (a._y1 - a._y0) / (d || (0 > b && -0));
        a = (c - a._y1) / (b || (0 > d && -0));
        return ((0 > e ? -1 : 1) + (0 > a ? -1 : 1)) * Math.min(Math.abs(e), Math.abs(a), 0.5 * Math.abs((e * b + a * d) / (d + b))) || 0;
    }
    function Bl(a, b) {
        var c = a._x1 - a._x0;
        return c ? ((3 * (a._y1 - a._y0)) / c - b) / 2 : b;
    }
    function ki(a, b, c) {
        var d = a._x0,
            e = a._x1,
            f = a._y1,
            g = (e - d) / 3;
        a._context.bezierCurveTo(d + g, a._y0 + g * b, e - g, f - g * c, e, f);
    }
    function vg(a) {
        this._context = a;
    }
    function Cl(a) {
        this._context = new Dl(a);
    }
    function Dl(a) {
        this._context = a;
    }
    function El(a) {
        this._context = a;
    }
    function Fl(a) {
        var b,
            c = a.length - 1,
            d,
            e = Array(c),
            f = Array(c),
            g = Array(c);
        e[0] = 0;
        f[0] = 2;
        g[0] = a[0] + 2 * a[1];
        for (b = 1; b < c - 1; ++b) (e[b] = 1), (f[b] = 4), (g[b] = 4 * a[b] + 2 * a[b + 1]);
        e[c - 1] = 2;
        f[c - 1] = 7;
        g[c - 1] = 8 * a[c - 1] + a[c];
        for (b = 1; b < c; ++b) (d = e[b] / f[b - 1]), (f[b] -= d), (g[b] -= d * g[b - 1]);
        e[c - 1] = g[c - 1] / f[c - 1];
        for (b = c - 2; 0 <= b; --b) e[b] = (g[b] - e[b + 1]) / f[b];
        f[c - 1] = (a[c] + e[c - 1]) / 2;
        for (b = 0; b < c - 1; ++b) f[b] = 2 * a[b + 1] - e[b + 1];
        return [e, f];
    }
    function wg(a, b) {
        this._context = a;
        this._t = b;
    }
    function Bq(a, b) {
        return a[b];
    }
    function Gl(a) {
        for (var b = 0, c = -1, d = a.length, e; ++c < d; ) if ((e = +a[c][1])) b += e;
        return b;
    }
    function Cq(a) {
        return a[0];
    }
    function Dq(a) {
        return a[1];
    }
    function xg() {
        this._ = null;
    }
    function yg(a) {
        a.U = a.C = a.L = a.R = a.P = a.N = null;
    }
    function gf(a, b) {
        var c = b.R,
            d = b.U;
        d ? (d.L === b ? (d.L = c) : (d.R = c)) : (a._ = c);
        c.U = d;
        b.U = c;
        b.R = c.L;
        b.R && (b.R.U = b);
        c.L = b;
    }
    function hf(a, b) {
        var c = b.L,
            d = b.U;
        d ? (d.L === b ? (d.L = c) : (d.R = c)) : (a._ = c);
        c.U = d;
        b.U = c;
        b.L = c.R;
        b.L && (b.L.U = b);
        c.R = b;
    }
    function Hl(a) {
        for (; a.L; ) a = a.L;
        return a;
    }
    function jf(a, b, c, d) {
        var e = [null, null],
            f = sb.push(e) - 1;
        e.left = a;
        e.right = b;
        c && zg(e, a, b, c);
        d && zg(e, b, a, d);
        Sb[a.index].halfedges.push(f);
        Sb[b.index].halfedges.push(f);
        return e;
    }
    function kf(a, b, c) {
        b = [b, c];
        b.left = a;
        return b;
    }
    function zg(a, b, c, d) {
        a[0] || a[1] ? (a.left === c ? (a[1] = d) : (a[0] = d)) : ((a[0] = d), (a.left = b), (a.right = c));
    }
    function Eq(a, b, c, d, e) {
        var f = a[0],
            g = a[1],
            h = f[0],
            f = f[1],
            k = 0,
            l = 1,
            m = g[0] - h,
            g = g[1] - f;
        b -= h;
        if (m || !(0 < b)) {
            b /= m;
            if (0 > m) {
                if (b < k) return;
                b < l && (l = b);
            } else if (0 < m) {
                if (b > l) return;
                b > k && (k = b);
            }
            b = d - h;
            if (m || !(0 > b)) {
                b /= m;
                if (0 > m) {
                    if (b > l) return;
                    b > k && (k = b);
                } else if (0 < m) {
                    if (b < k) return;
                    b < l && (l = b);
                }
                b = c - f;
                if (g || !(0 < b)) {
                    b /= g;
                    if (0 > g) {
                        if (b < k) return;
                        b < l && (l = b);
                    } else if (0 < g) {
                        if (b > l) return;
                        b > k && (k = b);
                    }
                    b = e - f;
                    if (g || !(0 > b)) {
                        b /= g;
                        if (0 > g) {
                            if (b > l) return;
                            b > k && (k = b);
                        } else if (0 < g) {
                            if (b < k) return;
                            b < l && (l = b);
                        }
                        if (!(0 < k || 1 > l)) return !0;
                        0 < k && (a[0] = [h + k * m, f + k * g]);
                        1 > l && (a[1] = [h + l * m, f + l * g]);
                        return !0;
                    }
                }
            }
        }
    }
    function Fq(a, b, c, d, e) {
        var f = a[1];
        if (f) return !0;
        var g = a[0],
            h = a.left,
            k = a.right,
            f = h[0],
            h = h[1],
            l = k[0],
            k = k[1],
            m = (f + l) / 2,
            n;
        if (k === h) {
            if (m < b || m >= d) return;
            if (f > l) {
                if (!g) g = [m, c];
                else if (g[1] >= e) return;
                f = [m, e];
            } else {
                if (!g) g = [m, e];
                else if (g[1] < c) return;
                f = [m, c];
            }
        } else if (((n = (f - l) / (k - h)), (m = (h + k) / 2 - n * m), -1 > n || 1 < n))
            if (f > l) {
                if (!g) g = [(c - m) / n, c];
                else if (g[1] >= e) return;
                f = [(e - m) / n, e];
            } else {
                if (!g) g = [(e - m) / n, e];
                else if (g[1] < c) return;
                f = [(c - m) / n, c];
            }
        else if (h < k) {
            if (!g) g = [b, n * b + m];
            else if (g[0] >= d) return;
            f = [d, n * d + m];
        } else {
            if (!g) g = [d, n * d + m];
            else if (g[0] < b) return;
            f = [b, n * b + m];
        }
        a[0] = g;
        a[1] = f;
        return !0;
    }
    function Gq(a, b) {
        var c = a.site,
            d = b.left,
            e = b.right;
        c === e && ((e = d), (d = c));
        if (e) return Math.atan2(e[1] - d[1], e[0] - d[0]);
        c === d ? ((d = b[1]), (e = b[0])) : ((d = b[0]), (e = b[1]));
        return Math.atan2(d[0] - e[0], e[1] - d[1]);
    }
    function Il(a, b) {
        return b[+(b.left !== a.site)];
    }
    function Hq() {
        for (var a = 0, b = Sb.length, c, d, e, f; a < b; ++a)
            if ((c = Sb[a]) && (f = (d = c.halfedges).length)) {
                var g = Array(f),
                    h = Array(f);
                for (e = 0; e < f; ++e) (g[e] = e), (h[e] = Gq(c, sb[d[e]]));
                g.sort(function (a, b) {
                    return h[b] - h[a];
                });
                for (e = 0; e < f; ++e) h[e] = d[g[e]];
                for (e = 0; e < f; ++e) d[e] = h[e];
            }
    }
    function Iq() {
        yg(this);
        this.x = this.y = this.arc = this.site = this.cy = null;
    }
    function le(a) {
        var b = a.P,
            c = a.N;
        if (b && c) {
            var d = b.site,
                b = a.site,
                e = c.site;
            if (d !== e) {
                var c = b[0],
                    f = b[1],
                    g = d[0] - c,
                    h = d[1] - f,
                    d = e[0] - c,
                    k = e[1] - f,
                    e = 2 * (g * k - h * d);
                if (!(e >= -Jq)) {
                    var l = g * g + h * h,
                        m = d * d + k * k,
                        h = (k * l - h * m) / e,
                        d = (g * m - d * l) / e,
                        g = Jl.pop() || new Iq();
                    g.arc = a;
                    g.site = b;
                    g.x = h + c;
                    g.y = (g.cy = d + f) + Math.sqrt(h * h + d * d);
                    a.circle = g;
                    a = null;
                    for (b = lf._; b; )
                        if (g.y < b.y || (g.y === b.y && g.x <= b.x))
                            if (b.L) b = b.L;
                            else {
                                a = b.P;
                                break;
                            }
                        else if (b.R) b = b.R;
                        else {
                            a = b;
                            break;
                        }
                    lf.insert(a, g);
                    a || (li = g);
                }
            }
        }
    }
    function me(a) {
        var b = a.circle;
        b && (b.P || (li = b.N), lf.remove(b), Jl.push(b), yg(b), (a.circle = null));
    }
    function Kq() {
        yg(this);
        this.edge = this.site = this.circle = null;
    }
    function Kl(a) {
        var b = Ll.pop() || new Kq();
        b.site = a;
        return b;
    }
    function mi(a) {
        me(a);
        ne.remove(a);
        Ll.push(a);
        yg(a);
    }
    function Ml(a, b) {
        var c = a.site,
            d = c[0],
            e = c[1],
            f = e - b;
        if (!f) return d;
        var g = a.P;
        if (!g) return -Infinity;
        var c = g.site,
            g = c[0],
            c = c[1],
            h = c - b;
        if (!h) return g;
        var k = g - d,
            l = 1 / f - 1 / h,
            m = k / h;
        return l ? (-m + Math.sqrt(m * m - 2 * l * ((k * k) / (-2 * h) - c + h / 2 + e - f / 2))) / l + d : (d + g) / 2;
    }
    function Lq(a, b) {
        return b[1] - a[1] || b[0] - a[0];
    }
    function ni(a, b) {
        var c = a.sort(Lq).pop(),
            d,
            e,
            f;
        sb = [];
        Sb = Array(a.length);
        ne = new xg();
        for (lf = new xg(); ; )
            if (((f = li), c && (!f || c[1] < f.y || (c[1] === f.y && c[0] < f.x)))) {
                if (c[0] !== d || c[1] !== e) {
                    d = c;
                    for (var g = d[0], h = d[1], k = (f = e = void 0), l = void 0, m = ne._; m; )
                        if (((k = Ml(m, h) - g), k > Fa)) m = m.L;
                        else {
                            var n = m,
                                l = h,
                                p = n.N;
                            p ? (l = Ml(p, l)) : ((n = n.site), (l = n[1] === l ? n[0] : Infinity));
                            l = g - l;
                            if (l > Fa) {
                                if (!m.R) {
                                    e = m;
                                    break;
                                }
                                m = m.R;
                            } else {
                                k > -Fa ? ((e = m.P), (f = m)) : l > -Fa ? ((e = m), (f = m.N)) : (e = f = m);
                                break;
                            }
                        }
                    Sb[d.index] = { site: d, halfedges: [] };
                    g = Kl(d);
                    ne.insert(e, g);
                    if (e || f)
                        if (e === f) me(e), (f = Kl(e.site)), ne.insert(g, f), (g.edge = f.edge = jf(e.site, g.site)), le(e), le(f);
                        else if (f) {
                            me(e);
                            me(f);
                            var h = e.site,
                                m = h[0],
                                l = h[1],
                                n = d[0] - m,
                                p = d[1] - l,
                                k = f.site,
                                q = k[0] - m,
                                t = k[1] - l,
                                r = 2 * (n * t - p * q),
                                w = n * n + p * p,
                                u = q * q + t * t,
                                m = [(t * w - p * u) / r + m, (n * u - q * w) / r + l];
                            zg(f.edge, h, k, m);
                            g.edge = jf(h, d, null, m);
                            f.edge = jf(d, k, null, m);
                            le(e);
                            le(f);
                        } else g.edge = jf(e.site, g.site);
                    d = c[0];
                    e = c[1];
                }
                c = a.pop();
            } else if (f) {
                k = f.arc;
                f = k.circle;
                h = f.x;
                m = f.cy;
                f = [h, m];
                n = k.P;
                l = k.N;
                g = [k];
                mi(k);
                for (k = n; k.circle && Math.abs(h - k.circle.x) < Fa && Math.abs(m - k.circle.cy) < Fa; ) (n = k.P), g.unshift(k), mi(k), (k = n);
                g.unshift(k);
                me(k);
                for (n = l; n.circle && Math.abs(h - n.circle.x) < Fa && Math.abs(m - n.circle.cy) < Fa; ) (l = n.N), g.push(n), mi(n), (n = l);
                g.push(n);
                me(n);
                h = g.length;
                m = void 0;
                for (m = 1; m < h; ++m) (n = g[m]), (k = g[m - 1]), zg(n.edge, k.site, n.site, f);
                k = g[0];
                n = g[h - 1];
                n.edge = jf(k.site, n.site, null, f);
                le(k);
                le(n);
            } else break;
        Hq();
        if (b) {
            g = +b[0][0];
            c = +b[0][1];
            d = +b[1][0];
            e = +b[1][1];
            f = sb.length;
            for (var P; f--; ) (Fq((P = sb[f]), g, c, d, e) && Eq(P, g, c, d, e) && (Math.abs(P[0][0] - P[1][0]) > Fa || Math.abs(P[0][1] - P[1][1]) > Fa)) || delete sb[f];
            P = Sb.length;
            var v;
            f = !0;
            for (h = 0; h < P; ++h)
                if ((k = Sb[h])) {
                    v = k.site;
                    l = k.halfedges;
                    for (m = l.length; m--; ) sb[l[m]] || l.splice(m, 1);
                    m = 0;
                    for (n = l.length; m < n; )
                        if (((p = sb[l[m]]), (q = p[+(p.left === k.site)]), (t = q[0]), (r = q[1]), (w = Il(k, sb[l[++m % n]])), (p = w[0]), (w = w[1]), Math.abs(t - p) > Fa || Math.abs(r - w) > Fa))
                            l.splice(
                                m,
                                0,
                                sb.push(
                                    kf(
                                        v,
                                        q,
                                        Math.abs(t - g) < Fa && e - r > Fa
                                            ? [g, Math.abs(p - g) < Fa ? w : e]
                                            : Math.abs(r - e) < Fa && d - t > Fa
                                            ? [Math.abs(w - e) < Fa ? p : d, e]
                                            : Math.abs(t - d) < Fa && r - c > Fa
                                            ? [d, Math.abs(p - d) < Fa ? w : c]
                                            : Math.abs(r - c) < Fa && t - g > Fa
                                            ? [Math.abs(w - c) < Fa ? p : g, c]
                                            : null
                                    )
                                ) - 1
                            ),
                                ++n;
                    n && (f = !1);
                }
            if (f) {
                m = Infinity;
                h = 0;
                for (f = null; h < P; ++h) if ((k = Sb[h])) (v = k.site), (l = v[0] - g), (n = v[1] - c), (l = l * l + n * n), l < m && ((m = l), (f = k));
                f && ((h = [g, c]), (g = [g, e]), (e = [d, e]), (c = [d, c]), f.halfedges.push(sb.push(kf((v = f.site), h, g)) - 1, sb.push(kf(v, g, e)) - 1, sb.push(kf(v, e, c)) - 1, sb.push(kf(v, c, h)) - 1));
            }
            for (h = 0; h < P; ++h) if ((k = Sb[h])) k.halfedges.length || delete Sb[h];
        }
        this.edges = sb;
        this.cells = Sb;
        ne = lf = sb = Sb = null;
    }
    function Mq(a, b, c) {
        this.target = a;
        this.type = b;
        this.transform = c;
    }
    function Ic(a, b, c) {
        this.k = a;
        this.x = b;
        this.y = c;
    }
    function Nl(a) {
        return a.__zoom || oi;
    }
    function Nq() {
        return !b.event.button;
    }
    function Oq() {
        var a = this,
            b;
        a instanceof SVGElement ? ((a = a.ownerSVGElement || a), (b = a.width.baseVal.value), (a = a.height.baseVal.value)) : ((b = a.clientWidth), (a = a.clientHeight));
        return [
            [0, 0],
            [b, a],
        ];
    }
    function Ol() {
        return this.__zoom || oi;
    }
    var td = function (a, b) {
            return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
        },
        ai = function (b) {
            1 === b.length && (b = a(b));
            return {
                left: function (a, c, d, e) {
                    null == d && (d = 0);
                    null == e && (e = a.length);
                    for (; d < e; ) {
                        var f = (d + e) >>> 1;
                        0 > b(a[f], c) ? (d = f + 1) : (e = f);
                    }
                    return d;
                },
                right: function (a, c, d, e) {
                    null == d && (d = 0);
                    null == e && (e = a.length);
                    for (; d < e; ) {
                        var f = (d + e) >>> 1;
                        0 < b(a[f], c) ? (e = f) : (d = f + 1);
                    }
                    return d;
                },
            };
        },
        Pl = ai(td),
        Ad = Pl.right,
        Pq = Pl.left,
        Zc = function (a) {
            return null === a ? NaN : +a;
        },
        Ql = function (a, b) {
            var c = a.length,
                d = 0,
                e = -1,
                f = 0,
                g,
                h,
                k = 0;
            if (null == b) for (; ++e < c; ) isNaN((g = Zc(a[e]))) || ((h = g - f), (f += h / ++d), (k += h * (g - f)));
            else for (; ++e < c; ) isNaN((g = Zc(b(a[e], e, a)))) || ((h = g - f), (f += h / ++d), (k += h * (g - f)));
            if (1 < d) return k / (d - 1);
        },
        Rl = function (a, b) {
            var c = Ql(a, b);
            return c ? Math.sqrt(c) : c;
        },
        Sl = function (a, b) {
            var c = a.length,
                d = -1,
                e,
                f,
                g;
            if (null == b)
                for (; ++d < c; ) {
                    if (null != (e = a[d]) && e >= e) for (f = g = e; ++d < c; ) null != (e = a[d]) && (f > e && (f = e), g < e && (g = e));
                }
            else for (; ++d < c; ) if (null != (e = b(a[d], d, a)) && e >= e) for (f = g = e; ++d < c; ) null != (e = b(a[d], d, a)) && (f > e && (f = e), g < e && (g = e));
            return [f, g];
        },
        Tl = Array.prototype,
        Qq = Tl.slice,
        Rq = Tl.map,
        Ag = function (a) {
            return function () {
                return a;
            };
        },
        Sq = function (a) {
            return a;
        },
        kc = function (a, b, c) {
            a = +a;
            b = +b;
            c = 2 > (e = arguments.length) ? ((b = a), (a = 0), 1) : 3 > e ? 1 : +c;
            for (var d = -1, e = Math.max(0, Math.ceil((b - a) / c)) | 0, f = Array(e); ++d < e; ) f[d] = a + d * c;
            return f;
        },
        dh = Math.sqrt(50),
        eh = Math.sqrt(10),
        fh = Math.sqrt(2),
        Sh = function (a, b, c) {
            var e = b < a,
                f = -1,
                g,
                h;
            e && ((g = a), (a = b), (b = g));
            if (0 === (h = d(a, b, c)) || !isFinite(h)) return [];
            if (0 < h) for (a = Math.ceil(a / h), b = Math.floor(b / h), b = Array((g = Math.ceil(b - a + 1))); ++f < g; ) b[f] = (a + f) * h;
            else for (a = Math.floor(a * h), b = Math.ceil(b * h), b = Array((g = Math.ceil(a - b + 1))); ++f < g; ) b[f] = (a - f) / h;
            e && b.reverse();
            return b;
        },
        Ul = function (a) {
            return Math.ceil(Math.log(a.length) / Math.LN2) + 1;
        },
        af = function (a, b, c) {
            null == c && (c = Zc);
            if ((d = a.length)) {
                if (0 >= (b = +b) || 2 > d) return +c(a[0], 0, a);
                if (1 <= b) return +c(a[d - 1], d - 1, a);
                var d;
                b *= d - 1;
                d = Math.floor(b);
                var e = +c(a[d], d, a);
                a = +c(a[d + 1], d + 1, a);
                return e + (a - e) * (b - d);
            }
        },
        rh = function (a) {
            var b = a.length,
                c;
            c = -1;
            for (var d = 0, e, f; ++c < b; ) d += a[c].length;
            for (e = Array(d); 0 <= --b; ) for (f = a[b], c = f.length; 0 <= --c; ) e[--d] = f[c];
            return e;
        },
        Vl = function (a, b) {
            var c = a.length,
                d = -1,
                e,
                f;
            if (null == b)
                for (; ++d < c; ) {
                    if (null != (e = a[d]) && e >= e) for (f = e; ++d < c; ) null != (e = a[d]) && f > e && (f = e);
                }
            else for (; ++d < c; ) if (null != (e = b(a[d], d, a)) && e >= e) for (f = e; ++d < c; ) null != (e = b(a[d], d, a)) && f > e && (f = e);
            return f;
        },
        Wl = function (a) {
            if (!(f = a.length)) return [];
            for (var b = -1, c = Vl(a, g), d = Array(c); ++b < c; ) for (var e = -1, f, h = (d[b] = Array(f)); ++e < f; ) h[e] = a[e][b];
            return d;
        },
        gh = Array.prototype.slice,
        xj = function (a) {
            return a;
        },
        fo = { value: function () {} };
    u.prototype = q.prototype = {
        constructor: u,
        on: function (a, b) {
            var c = this._,
                d = v(a + "", c),
                e,
                f = -1,
                g = d.length;
            if (2 > arguments.length)
                for (; ++f < g; ) {
                    var h;
                    if ((h = e = (a = d[f]).type)) {
                        a: {
                            e = c[e];
                            h = 0;
                            for (var k = e.length, l = void 0; h < k; ++h)
                                if ((l = e[h]).name === a.name) {
                                    e = l.value;
                                    break a;
                                }
                            e = void 0;
                        }
                        h = e;
                    }
                    if (h) return e;
                }
            else {
                if (null != b && "function" !== typeof b) throw Error("invalid callback: " + b);
                for (; ++f < g; )
                    if ((e = (a = d[f]).type)) c[e] = w(c[e], a.name, b);
                    else if (null == b) for (e in c) c[e] = w(c[e], a.name, null);
                return this;
            }
        },
        copy: function () {
            var a = {},
                b = this._,
                c;
            for (c in b) a[c] = b[c].slice();
            return new u(a);
        },
        call: function (a, b) {
            if (0 < (e = arguments.length - 2)) for (var c = Array(e), d = 0, e, f; d < e; ++d) c[d] = arguments[d + 2];
            if (!this._.hasOwnProperty(a)) throw Error("unknown type: " + a);
            f = this._[a];
            d = 0;
            for (e = f.length; d < e; ++d) f[d].value.apply(b, c);
        },
        apply: function (a, b, c) {
            if (!this._.hasOwnProperty(a)) throw Error("unknown type: " + a);
            a = this._[a];
            for (var d = 0, e = a.length; d < e; ++d) a[d].value.apply(b, c);
        },
    };
    var pi = { svg: "http://www.w3.org/2000/svg", xhtml: "http://www.w3.org/1999/xhtml", xlink: "http://www.w3.org/1999/xlink", xml: "http://www.w3.org/XML/1998/namespace", xmlns: "http://www.w3.org/2000/xmlns/" },
        mf = function (a) {
            var b = (a += ""),
                c = b.indexOf(":");
            0 <= c && "xmlns" !== (b = a.slice(0, c)) && (a = a.slice(c + 1));
            return pi.hasOwnProperty(b) ? { space: pi[b], local: a } : a;
        },
        qi = function (a) {
            a = mf(a);
            return (a.local ? y : t)(a);
        },
        go = 0;
    C.prototype = p.prototype = {
        constructor: C,
        get: function (a) {
            for (var b = this._; !(b in a); ) if (!(a = a.parentNode)) return;
            return a[b];
        },
        set: function (a, b) {
            return (a[this._] = b);
        },
        remove: function (a) {
            return this._ in a && delete a[this._];
        },
        toString: function () {
            return this._;
        },
    };
    var Xl = function (a) {
        return function () {
            return this.matches(a);
        };
    };
    if ("undefined" !== typeof document) {
        var nf = document.documentElement;
        if (!nf.matches)
            var Tq = nf.webkitMatchesSelector || nf.msMatchesSelector || nf.mozMatchesSelector || nf.oMatchesSelector,
                Xl = function (a) {
                    return function () {
                        return Tq.call(this, a);
                    };
                };
    }
    var ri = Xl,
        zj = {};
    b.event = null;
    "undefined" !== typeof document && ("onmouseenter" in document.documentElement || (zj = { mouseenter: "mouseover", mouseleave: "mouseout" }));
    var si = function () {
            for (var a = b.event, c; (c = a.sourceEvent); ) a = c;
            return a;
        },
        ti = function (a, b) {
            var c = a.ownerSVGElement || a;
            if (c.createSVGPoint) return (c = c.createSVGPoint()), (c.x = b.clientX), (c.y = b.clientY), (c = c.matrixTransform(a.getScreenCTM().inverse())), [c.x, c.y];
            c = a.getBoundingClientRect();
            return [b.clientX - c.left - a.clientLeft, b.clientY - c.top - a.clientTop];
        },
        Uc = function (a) {
            var b = si();
            b.changedTouches && (b = b.changedTouches[0]);
            return ti(a, b);
        },
        Bg = function (a) {
            return null == a
                ? J
                : function () {
                      return this.querySelector(a);
                  };
        },
        ui = function (a) {
            return null == a
                ? A
                : function () {
                      return this.querySelectorAll(a);
                  };
        },
        Yl = function (a) {
            return Array(a.length);
        };
    ea.prototype = {
        constructor: ea,
        appendChild: function (a) {
            return this._parent.insertBefore(a, this._next);
        },
        insertBefore: function (a, b) {
            return this._parent.insertBefore(a, b);
        },
        querySelector: function (a) {
            return this._parent.querySelector(a);
        },
        querySelectorAll: function (a) {
            return this._parent.querySelectorAll(a);
        },
    };
    var Uq = function (a) {
            return function () {
                return a;
            };
        },
        hh = function (a) {
            return (a.ownerDocument && a.ownerDocument.defaultView) || (a.document && a) || a.defaultView;
        };
    ca.prototype = {
        add: function (a) {
            0 > this._names.indexOf(a) && (this._names.push(a), this._node.setAttribute("class", this._names.join(" ")));
        },
        remove: function (a) {
            a = this._names.indexOf(a);
            0 <= a && (this._names.splice(a, 1), this._node.setAttribute("class", this._names.join(" ")));
        },
        contains: function (a) {
            return 0 <= this._names.indexOf(a);
        },
    };
    var ih = [null];
    N.prototype = wb.prototype = {
        constructor: N,
        select: function (a) {
            "function" !== typeof a && (a = Bg(a));
            for (var b = this._groups, c = b.length, d = Array(c), e = 0; e < c; ++e)
                for (var f = b[e], g = f.length, h = (d[e] = Array(g)), k, l, m = 0; m < g; ++m) (k = f[m]) && (l = a.call(k, k.__data__, m, f)) && ("__data__" in k && (l.__data__ = k.__data__), (h[m] = l));
            return new N(d, this._parents);
        },
        selectAll: function (a) {
            "function" !== typeof a && (a = ui(a));
            for (var b = this._groups, c = b.length, d = [], e = [], f = 0; f < c; ++f) for (var g = b[f], h = g.length, k, l = 0; l < h; ++l) if ((k = g[l])) d.push(a.call(k, k.__data__, l, g)), e.push(k);
            return new N(d, e);
        },
        filter: function (a) {
            "function" !== typeof a && (a = ri(a));
            for (var b = this._groups, c = b.length, d = Array(c), e = 0; e < c; ++e) for (var f = b[e], g = f.length, h = (d[e] = []), k, l = 0; l < g; ++l) (k = f[l]) && a.call(k, k.__data__, l, f) && h.push(k);
            return new N(d, this._parents);
        },
        data: function (a, b) {
            if (!a)
                return (
                    (q = Array(this.size())),
                    (l = -1),
                    this.each(function (a) {
                        q[++l] = a;
                    }),
                    q
                );
            var c = b ? ha : ga,
                d = this._parents,
                e = this._groups;
            "function" !== typeof a && (a = Uq(a));
            for (var f = e.length, g = Array(f), h = Array(f), k = Array(f), l = 0; l < f; ++l) {
                var m = d[l],
                    n = e[l],
                    p = n.length,
                    q = a.call(m, m && m.__data__, l, d),
                    t = q.length,
                    r = (h[l] = Array(t)),
                    w = (g[l] = Array(t)),
                    p = (k[l] = Array(p));
                c(m, n, r, w, p, q, b);
                for (var n = (m = 0), u; m < t; ++m)
                    if ((p = r[m])) {
                        for (m >= n && (n = m + 1); !(u = w[n]) && ++n < t; );
                        p._next = u || null;
                    }
            }
            g = new N(g, d);
            g._enter = h;
            g._exit = k;
            return g;
        },
        enter: function () {
            return new N(this._enter || this._groups.map(Yl), this._parents);
        },
        exit: function () {
            return new N(this._exit || this._groups.map(Yl), this._parents);
        },
        merge: function (a) {
            var b = this._groups;
            a = a._groups;
            for (var c = b.length, d = Math.min(c, a.length), e = Array(c), f = 0; f < d; ++f) for (var g = b[f], h = a[f], k = g.length, l = (e[f] = Array(k)), m, n = 0; n < k; ++n) if ((m = g[n] || h[n])) l[n] = m;
            for (; f < c; ++f) e[f] = b[f];
            return new N(e, this._parents);
        },
        order: function () {
            for (var a = this._groups, b = -1, c = a.length; ++b < c; ) for (var d = a[b], e = d.length - 1, f = d[e], g; 0 <= --e; ) if ((g = d[e])) f && f !== g.nextSibling && f.parentNode.insertBefore(g, f), (f = g);
            return this;
        },
        sort: function (a) {
            function b(c, d) {
                return c && d ? a(c.__data__, d.__data__) : !c - !d;
            }
            a || (a = va);
            for (var c = this._groups, d = c.length, e = Array(d), f = 0; f < d; ++f) {
                for (var g = c[f], h = g.length, k = (e[f] = Array(h)), l, m = 0; m < h; ++m) if ((l = g[m])) k[m] = l;
                k.sort(b);
            }
            return new N(e, this._parents).order();
        },
        call: function () {
            var a = arguments[0];
            arguments[0] = this;
            a.apply(null, arguments);
            return this;
        },
        nodes: function () {
            var a = Array(this.size()),
                b = -1;
            this.each(function () {
                a[++b] = this;
            });
            return a;
        },
        node: function () {
            for (var a = this._groups, b = 0, c = a.length; b < c; ++b)
                for (var d = a[b], e = 0, f = d.length; e < f; ++e) {
                    var g = d[e];
                    if (g) return g;
                }
            return null;
        },
        size: function () {
            var a = 0;
            this.each(function () {
                ++a;
            });
            return a;
        },
        empty: function () {
            return !this.node();
        },
        each: function (a) {
            for (var b = this._groups, c = 0, d = b.length; c < d; ++c) for (var e = b[c], f = 0, g = e.length, h; f < g; ++f) (h = e[f]) && a.call(h, h.__data__, f, e);
            return this;
        },
        attr: function (a, b) {
            var c = mf(a);
            if (2 > arguments.length) {
                var d = this.node();
                return c.local ? d.getAttributeNS(c.space, c.local) : d.getAttribute(c);
            }
            return this.each((null == b ? (c.local ? pa : L) : "function" === typeof b ? (c.local ? ra : W) : c.local ? Ba : wa)(c, b));
        },
        style: function (a, b, c) {
            return 1 < arguments.length ? this.each((null == b ? Q : "function" === typeof b ? Ca : I)(a, b, null == c ? "" : c)) : M(this.node(), a);
        },
        property: function (a, b) {
            return 1 < arguments.length ? this.each((null == b ? ma : "function" === typeof b ? ta : za)(a, b)) : this.node()[a];
        },
        classed: function (a, b) {
            var c = (a + "").trim().split(/^|\s+/);
            if (2 > arguments.length) {
                for (var d = aa(this.node()), e = -1, f = c.length; ++e < f; ) if (!d.contains(c[e])) return !1;
                return !0;
            }
            return this.each(("function" === typeof b ? bc : b ? na : T)(c, b));
        },
        text: function (a) {
            return arguments.length ? this.each(null == a ? ab : ("function" === typeof a ? Gb : vb)(a)) : this.node().textContent;
        },
        html: function (a) {
            return arguments.length ? this.each(null == a ? hb : ("function" === typeof a ? zc : Hb)(a)) : this.node().innerHTML;
        },
        raise: function () {
            return this.each(cc);
        },
        lower: function () {
            return this.each(Ac);
        },
        append: function (a) {
            var b = "function" === typeof a ? a : qi(a);
            return this.select(function () {
                return this.appendChild(b.apply(this, arguments));
            });
        },
        insert: function (a, b) {
            var c = "function" === typeof a ? a : qi(a),
                d = null == b ? dc : "function" === typeof b ? b : Bg(b);
            return this.select(function () {
                return this.insertBefore(c.apply(this, arguments), d.apply(this, arguments) || null);
            });
        },
        remove: function () {
            return this.each(la);
        },
        datum: function (a) {
            return arguments.length ? this.property("__data__", a) : this.node().__data__;
        },
        on: function (a, b, c) {
            var d = z(a + ""),
                e,
                f = d.length,
                g;
            if (2 > arguments.length) {
                var h = this.node().__on;
                if (h) for (var k = 0, l = h.length, m; k < l; ++k) for (e = 0, m = h[k]; e < f; ++e) if ((g = d[e]).type === m.type && g.name === m.name) return m.value;
            } else {
                h = b ? G : B;
                null == c && (c = !1);
                for (e = 0; e < f; ++e) this.each(h(d[e], b, c));
                return this;
            }
        },
        dispatch: function (a, b) {
            return this.each(("function" === typeof b ? ec : Mc)(a, b));
        },
    };
    var Pb = function (a) {
            return "string" === typeof a ? new N([[document.querySelector(a)]], [document.documentElement]) : new N([[a]], ih);
        },
        Cg = function (a, b, c) {
            3 > arguments.length && ((c = b), (b = si().changedTouches));
            for (var d = 0, e = b ? b.length : 0, f; d < e; ++d) if ((f = b[d]).identifier === c) return ti(a, f);
            return null;
        },
        Od = function () {
            b.event.preventDefault();
            b.event.stopImmediatePropagation();
        },
        Mf = function (a) {
            var b = a.document.documentElement;
            a = Pb(a).on("dragstart.drag", Od, !0);
            if ("onselectstart" in b) a.on("selectstart.drag", Od, !0);
            else (b.__noselect = b.style.MozUserSelect), (b.style.MozUserSelect = "none");
        },
        vi = function (a) {
            return function () {
                return a;
            };
        };
    xb.prototype.on = function () {
        var a = this._.on.apply(this._, arguments);
        return a === this._ ? this : a;
    };
    var oe = function (a, b, c) {
            a.prototype = b.prototype = c;
            c.constructor = a;
        },
        pe = 1 / 0.7,
        ho = /^#([0-9a-f]{3})$/,
        io = /^#([0-9a-f]{6})$/,
        jo = /^rgb\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*\)$/,
        ko = /^rgb\(\s*([+-]?\d*\.?\d+(?:[eE][+-]?\d+)?)%\s*,\s*([+-]?\d*\.?\d+(?:[eE][+-]?\d+)?)%\s*,\s*([+-]?\d*\.?\d+(?:[eE][+-]?\d+)?)%\s*\)$/,
        lo = /^rgba\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d*\.?\d+(?:[eE][+-]?\d+)?)\s*\)$/,
        mo = /^rgba\(\s*([+-]?\d*\.?\d+(?:[eE][+-]?\d+)?)%\s*,\s*([+-]?\d*\.?\d+(?:[eE][+-]?\d+)?)%\s*,\s*([+-]?\d*\.?\d+(?:[eE][+-]?\d+)?)%\s*,\s*([+-]?\d*\.?\d+(?:[eE][+-]?\d+)?)\s*\)$/,
        no = /^hsl\(\s*([+-]?\d*\.?\d+(?:[eE][+-]?\d+)?)\s*,\s*([+-]?\d*\.?\d+(?:[eE][+-]?\d+)?)%\s*,\s*([+-]?\d*\.?\d+(?:[eE][+-]?\d+)?)%\s*\)$/,
        oo = /^hsla\(\s*([+-]?\d*\.?\d+(?:[eE][+-]?\d+)?)\s*,\s*([+-]?\d*\.?\d+(?:[eE][+-]?\d+)?)%\s*,\s*([+-]?\d*\.?\d+(?:[eE][+-]?\d+)?)%\s*,\s*([+-]?\d*\.?\d+(?:[eE][+-]?\d+)?)\s*\)$/,
        Aj = {
            aliceblue: 15792383,
            antiquewhite: 16444375,
            aqua: 65535,
            aquamarine: 8388564,
            azure: 15794175,
            beige: 16119260,
            bisque: 16770244,
            black: 0,
            blanchedalmond: 16772045,
            blue: 255,
            blueviolet: 9055202,
            brown: 10824234,
            burlywood: 14596231,
            cadetblue: 6266528,
            chartreuse: 8388352,
            chocolate: 13789470,
            coral: 16744272,
            cornflowerblue: 6591981,
            cornsilk: 16775388,
            crimson: 14423100,
            cyan: 65535,
            darkblue: 139,
            darkcyan: 35723,
            darkgoldenrod: 12092939,
            darkgray: 11119017,
            darkgreen: 25600,
            darkgrey: 11119017,
            darkkhaki: 12433259,
            darkmagenta: 9109643,
            darkolivegreen: 5597999,
            darkorange: 16747520,
            darkorchid: 10040012,
            darkred: 9109504,
            darksalmon: 15308410,
            darkseagreen: 9419919,
            darkslateblue: 4734347,
            darkslategray: 3100495,
            darkslategrey: 3100495,
            darkturquoise: 52945,
            darkviolet: 9699539,
            deeppink: 16716947,
            deepskyblue: 49151,
            dimgray: 6908265,
            dimgrey: 6908265,
            dodgerblue: 2003199,
            firebrick: 11674146,
            floralwhite: 16775920,
            forestgreen: 2263842,
            fuchsia: 16711935,
            gainsboro: 14474460,
            ghostwhite: 16316671,
            gold: 16766720,
            goldenrod: 14329120,
            gray: 8421504,
            green: 32768,
            greenyellow: 11403055,
            grey: 8421504,
            honeydew: 15794160,
            hotpink: 16738740,
            indianred: 13458524,
            indigo: 4915330,
            ivory: 16777200,
            khaki: 15787660,
            lavender: 15132410,
            lavenderblush: 16773365,
            lawngreen: 8190976,
            lemonchiffon: 16775885,
            lightblue: 11393254,
            lightcoral: 15761536,
            lightcyan: 14745599,
            lightgoldenrodyellow: 16448210,
            lightgray: 13882323,
            lightgreen: 9498256,
            lightgrey: 13882323,
            lightpink: 16758465,
            lightsalmon: 16752762,
            lightseagreen: 2142890,
            lightskyblue: 8900346,
            lightslategray: 7833753,
            lightslategrey: 7833753,
            lightsteelblue: 11584734,
            lightyellow: 16777184,
            lime: 65280,
            limegreen: 3329330,
            linen: 16445670,
            magenta: 16711935,
            maroon: 8388608,
            mediumaquamarine: 6737322,
            mediumblue: 205,
            mediumorchid: 12211667,
            mediumpurple: 9662683,
            mediumseagreen: 3978097,
            mediumslateblue: 8087790,
            mediumspringgreen: 64154,
            mediumturquoise: 4772300,
            mediumvioletred: 13047173,
            midnightblue: 1644912,
            mintcream: 16121850,
            mistyrose: 16770273,
            moccasin: 16770229,
            navajowhite: 16768685,
            navy: 128,
            oldlace: 16643558,
            olive: 8421376,
            olivedrab: 7048739,
            orange: 16753920,
            orangered: 16729344,
            orchid: 14315734,
            palegoldenrod: 15657130,
            palegreen: 10025880,
            paleturquoise: 11529966,
            palevioletred: 14381203,
            papayawhip: 16773077,
            peachpuff: 16767673,
            peru: 13468991,
            pink: 16761035,
            plum: 14524637,
            powderblue: 11591910,
            purple: 8388736,
            rebeccapurple: 6697881,
            red: 16711680,
            rosybrown: 12357519,
            royalblue: 4286945,
            saddlebrown: 9127187,
            salmon: 16416882,
            sandybrown: 16032864,
            seagreen: 3050327,
            seashell: 16774638,
            sienna: 10506797,
            silver: 12632256,
            skyblue: 8900331,
            slateblue: 6970061,
            slategray: 7372944,
            slategrey: 7372944,
            snow: 16775930,
            springgreen: 65407,
            steelblue: 4620980,
            tan: 13808780,
            teal: 32896,
            thistle: 14204888,
            tomato: 16737095,
            turquoise: 4251856,
            violet: 15631086,
            wheat: 16113331,
            white: 16777215,
            whitesmoke: 16119285,
            yellow: 16776960,
            yellowgreen: 10145074,
        };
    oe(Ib, jb, {
        displayable: function () {
            return this.rgb().displayable();
        },
        toString: function () {
            return this.rgb() + "";
        },
    });
    oe(
        Da,
        qc,
        Ra(Ib, {
            brighter: function (a) {
                a = null == a ? pe : Math.pow(pe, a);
                return new Da(this.r * a, this.g * a, this.b * a, this.opacity);
            },
            darker: function (a) {
                a = null == a ? 0.7 : Math.pow(0.7, a);
                return new Da(this.r * a, this.g * a, this.b * a, this.opacity);
            },
            rgb: function () {
                return this;
            },
            displayable: function () {
                return 0 <= this.r && 255 >= this.r && 0 <= this.g && 255 >= this.g && 0 <= this.b && 255 >= this.b && 0 <= this.opacity && 1 >= this.opacity;
            },
            toString: function () {
                var a = this.opacity,
                    a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
                return (
                    (1 === a ? "rgb(" : "rgba(") +
                    Math.max(0, Math.min(255, Math.round(this.r) || 0)) +
                    ", " +
                    Math.max(0, Math.min(255, Math.round(this.g) || 0)) +
                    ", " +
                    Math.max(0, Math.min(255, Math.round(this.b) || 0)) +
                    (1 === a ? ")" : ", " + a + ")")
                );
            },
        })
    );
    oe(
        ua,
        U,
        Ra(Ib, {
            brighter: function (a) {
                a = null == a ? pe : Math.pow(pe, a);
                return new ua(this.h, this.s, this.l * a, this.opacity);
            },
            darker: function (a) {
                a = null == a ? 0.7 : Math.pow(0.7, a);
                return new ua(this.h, this.s, this.l * a, this.opacity);
            },
            rgb: function () {
                var a = (this.h % 360) + 360 * (0 > this.h),
                    b = isNaN(a) || isNaN(this.s) ? 0 : this.s,
                    c = this.l,
                    b = c + (0.5 > c ? c : 1 - c) * b,
                    c = 2 * c - b;
                return new Da(mc(240 <= a ? a - 240 : a + 120, c, b), mc(a, c, b), mc(120 > a ? a + 240 : a - 120, c, b), this.opacity);
            },
            displayable: function () {
                return ((0 <= this.s && 1 >= this.s) || isNaN(this.s)) && 0 <= this.l && 1 >= this.l && 0 <= this.opacity && 1 >= this.opacity;
            },
        })
    );
    var Bj = Math.PI / 180,
        Ej = 180 / Math.PI,
        Dj = 4 / 29,
        Pd = 6 / 29,
        Cj = 3 * Pd * Pd,
        po = Pd * Pd * Pd;
    oe(
        ib,
        Vb,
        Ra(Ib, {
            brighter: function (a) {
                return new ib(this.l + 18 * (null == a ? 1 : a), this.a, this.b, this.opacity);
            },
            darker: function (a) {
                return new ib(this.l - 18 * (null == a ? 1 : a), this.a, this.b, this.opacity);
            },
            rgb: function () {
                var a = (this.l + 16) / 116,
                    b = isNaN(this.a) ? a : a + this.a / 500,
                    c = isNaN(this.b) ? a : a - this.b / 200,
                    a = 1 * ub(a),
                    b = 0.95047 * ub(b),
                    c = 1.08883 * ub(c);
                return new Da(kb(3.2404542 * b - 1.5371385 * a - 0.4985314 * c), kb(-0.969266 * b + 1.8760108 * a + 0.041556 * c), kb(0.0556434 * b - 0.2040259 * a + 1.0572252 * c), this.opacity);
            },
        })
    );
    oe(
        Ga,
        gc,
        Ra(Ib, {
            brighter: function (a) {
                return new Ga(this.h, this.c, this.l + 18 * (null == a ? 1 : a), this.opacity);
            },
            darker: function (a) {
                return new Ga(this.h, this.c, this.l - 18 * (null == a ? 1 : a), this.opacity);
            },
            rgb: function () {
                return Jc(this).rgb();
            },
        })
    );
    var Fj = 1.78277 * -0.29227 - 0.1347134789;
    oe(
        Ja,
        fa,
        Ra(Ib, {
            brighter: function (a) {
                a = null == a ? pe : Math.pow(pe, a);
                return new Ja(this.h, this.s, this.l * a, this.opacity);
            },
            darker: function (a) {
                a = null == a ? 0.7 : Math.pow(0.7, a);
                return new Ja(this.h, this.s, this.l * a, this.opacity);
            },
            rgb: function () {
                var a = isNaN(this.h) ? 0 : (this.h + 120) * Bj,
                    b = +this.l,
                    c = isNaN(this.s) ? 0 : this.s * b * (1 - b),
                    d = Math.cos(a),
                    a = Math.sin(a);
                return new Da(255 * (b + c * (-0.14861 * d + 1.78277 * a)), 255 * (b + c * (-0.29227 * d + -0.90649 * a)), 255 * (b + 1.97294 * c * d), this.opacity);
            },
        })
    );
    var Zl = function (a) {
            var b = a.length - 1;
            return function (c) {
                var d = 0 >= c ? (c = 0) : 1 <= c ? ((c = 1), b - 1) : Math.floor(c * b),
                    e = a[d],
                    f = a[d + 1];
                return Kc((c - d / b) * b, 0 < d ? a[d - 1] : 2 * e - f, e, f, d < b - 1 ? a[d + 2] : 2 * f - e);
            };
        },
        $l = function (a) {
            var b = a.length;
            return function (c) {
                var d = Math.floor((0 > (c %= 1) ? ++c : c) * b);
                return Kc((c - d / b) * b, a[(d + b - 1) % b], a[d % b], a[(d + 1) % b], a[(d + 2) % b]);
            };
        },
        Df = function (a) {
            return function () {
                return a;
            };
        },
        of = (function oa(a) {
            function b(a, d) {
                var e = c((a = qc(a)).r, (d = qc(d)).r),
                    f = c(a.g, d.g),
                    g = c(a.b, d.b),
                    h = E(a.opacity, d.opacity);
                return function (b) {
                    a.r = e(b);
                    a.g = f(b);
                    a.b = g(b);
                    a.opacity = h(b);
                    return a + "";
                };
            }
            var c = kd(a);
            b.gamma = oa;
            return b;
        })(1),
        Vq = La(Zl),
        Wq = La($l),
        am = function (a, b) {
            var c = b ? b.length : 0,
                d = a ? Math.min(c, a.length) : 0,
                e = Array(c),
                f = Array(c),
                g;
            for (g = 0; g < d; ++g) e[g] = Ne(a[g], b[g]);
            for (; g < c; ++g) f[g] = b[g];
            return function (a) {
                for (g = 0; g < d; ++g) f[g] = e[g](a);
                return f;
            };
        },
        bm = function (a, b) {
            var c = new Date();
            return (
                (a = +a),
                (b -= a),
                function (d) {
                    return c.setTime(a + b * d), c;
                }
            );
        },
        Qb = function (a, b) {
            return (
                (a = +a),
                (b -= a),
                function (c) {
                    return a + b * c;
                }
            );
        },
        cm = function (a, b) {
            var c = {},
                d = {},
                e;
            if (null === a || "object" !== typeof a) a = {};
            if (null === b || "object" !== typeof b) b = {};
            for (e in b) e in a ? (c[e] = Ne(a[e], b[e])) : (d[e] = b[e]);
            return function (a) {
                for (e in c) d[e] = c[e](a);
                return d;
            };
        },
        wi = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
        xi = new RegExp(wi.source, "g"),
        yi = function (a, b) {
            var c = (wi.lastIndex = xi.lastIndex = 0),
                d,
                e,
                f,
                g = -1,
                h = [],
                k = [];
            a += "";
            for (b += ""; (d = wi.exec(a)) && (e = xi.exec(b)); )
                (f = e.index) > c && ((f = b.slice(c, f)), h[g] ? (h[g] += f) : (h[++g] = f)), (d = d[0]) === (e = e[0]) ? (h[g] ? (h[g] += e) : (h[++g] = e)) : ((h[++g] = null), k.push({ i: g, x: Qb(d, e) })), (c = xi.lastIndex);
            c < b.length && ((f = b.slice(c)), h[g] ? (h[g] += f) : (h[++g] = f));
            return 2 > h.length
                ? k[0]
                    ? V(k[0].x)
                    : ia(b)
                : ((b = k.length),
                  function (a) {
                      for (var c = 0, d; c < b; ++c) h[(d = k[c]).i] = d.x(a);
                      return h.join("");
                  });
        },
        Ne = function (a, b) {
            var c = typeof b,
                d;
            return null == b || "boolean" === c
                ? Df(b)
                : ("number" === c
                      ? Qb
                      : "string" === c
                      ? (d = jb(b))
                          ? ((b = d), of)
                          : yi
                      : b instanceof jb
                      ? of
                      : b instanceof Date
                      ? bm
                      : Array.isArray(b)
                      ? am
                      : ("function" !== typeof b.valueOf && "function" !== typeof b.toString) || isNaN(b)
                      ? cm
                      : Qb)(a, b);
        },
        Uk = function (a, b) {
            return (
                (a = +a),
                (b -= a),
                function (c) {
                    return Math.round(a + b * c);
                }
            );
        },
        dm = 180 / Math.PI,
        zi = { translateX: 0, translateY: 0, rotate: 0, skewX: 0, scaleX: 1, scaleY: 1 },
        em = function (a, b, c, d, e, f) {
            var g, h, k;
            if ((g = Math.sqrt(a * a + b * b))) (a /= g), (b /= g);
            if ((k = a * c + b * d)) (c -= a * k), (d -= b * k);
            if ((h = Math.sqrt(c * c + d * d))) (c /= h), (d /= h), (k /= h);
            a * d < b * c && ((a = -a), (b = -b), (k = -k), (g = -g));
            return { translateX: e, translateY: f, rotate: Math.atan2(b, a) * dm, skewX: Math.atan(k) * dm, scaleX: g, scaleY: h };
        },
        pf,
        Ai,
        fm,
        Dg,
        gm = ya(
            function (a) {
                if ("none" === a) return zi;
                pf || ((pf = document.createElement("DIV")), (Ai = document.documentElement), (fm = document.defaultView));
                pf.style.transform = a;
                a = fm.getComputedStyle(Ai.appendChild(pf), null).getPropertyValue("transform");
                Ai.removeChild(pf);
                a = a.slice(7, -1).split(",");
                return em(+a[0], +a[1], +a[2], +a[3], +a[4], +a[5]);
            },
            "px, ",
            "px)",
            "deg)"
        ),
        hm = ya(
            function (a) {
                if (null == a) return zi;
                Dg || (Dg = document.createElementNS("http://www.w3.org/2000/svg", "g"));
                Dg.setAttribute("transform", a);
                if (!(a = Dg.transform.baseVal.consolidate())) return zi;
                a = a.matrix;
                return em(a.a, a.b, a.c, a.d, a.e, a.f);
            },
            ", ",
            ")",
            ")"
        ),
        qf = Math.SQRT2,
        im = function (a, b) {
            var c = a[0],
                d = a[1],
                e = a[2],
                f = b[2],
                g = b[0] - c,
                h = b[1] - d,
                k = g * g + h * h,
                l,
                m;
            if (1e-12 > k)
                (m = Math.log(f / e) / qf),
                    (l = function (a) {
                        return [c + a * g, d + a * h, e * Math.exp(qf * a * m)];
                    });
            else {
                var n = Math.sqrt(k);
                l = (f * f - e * e + 4 * k) / (4 * e * n);
                var f = (f * f - e * e - 4 * k) / (4 * f * n),
                    p = Math.log(Math.sqrt(l * l + 1) - l);
                m = (Math.log(Math.sqrt(f * f + 1) - f) - p) / qf;
                l = function (a) {
                    a *= m;
                    var b = yc(p),
                        f = e / (2 * n),
                        k,
                        l = qf * a + p;
                    k = ((l = Math.exp(2 * l)) - 1) / (l + 1);
                    var F = p,
                        l = ((F = Math.exp(F)) - 1 / F) / 2,
                        f = f * (b * k - l);
                    return [c + f * g, d + f * h, (e * b) / yc(qf * a + p)];
                };
            }
            l.duration = 1e3 * m;
            return l;
        },
        Xq = xc(Oc),
        Yq = xc(E),
        Zq = Tb(Oc),
        $q = Tb(E),
        ar = Jd(Oc),
        Eg = Jd(E),
        Qd = 0,
        Ke = 0,
        Me = 0,
        Ff,
        Le,
        Gf = 0,
        Tc = 0,
        Ef = 0,
        jh = "object" === typeof performance && performance.now ? performance : Date,
        Gj =
            "function" === typeof requestAnimationFrame
                ? requestAnimationFrame
                : function (a) {
                      setTimeout(a, 17);
                  };
    Wb.prototype = ob.prototype = {
        constructor: Wb,
        restart: function (a, b, c) {
            if ("function" !== typeof a) throw new TypeError("callback is not a function");
            c = (null == c ? hc() : +c) + (null == b ? 0 : +b);
            this._next || Le === this || (Le ? (Le._next = this) : (Ff = this), (Le = this));
            this._call = a;
            this._time = c;
            Pc();
        },
        stop: function () {
            this._call && ((this._call = null), (this._time = Infinity), Pc());
        },
    };
    var kh = function (a, b, c) {
            var d = new Wb();
            b = null == b ? 0 : +b;
            d.restart(
                function (c) {
                    d.stop();
                    a(c + b);
                },
                b,
                c
            );
            return d;
        },
        br = q("start", "end", "interrupt"),
        cr = [],
        Fg = function (a, b, c, d, e, f) {
            var g = a.__transition;
            if (!g) a.__transition = {};
            else if (c in g) return;
            Kd(a, c, { name: b, index: d, group: e, on: br, tween: cr, time: f.time, delay: f.delay, duration: f.duration, ease: f.ease, timer: null, state: 0 });
        },
        vd = function (a, b) {
            var c = a.__transition,
                d,
                e,
                f = !0,
                g;
            if (c) {
                b = null == b ? null : b + "";
                for (g in c) (d = c[g]).name !== b ? (f = !1) : ((e = 2 < d.state && 5 > d.state), (d.state = 6), d.timer.stop(), e && d.on.call("interrupt", a, a.__data__, d.index, d.group), delete c[g]);
                f && delete a.__transition;
            }
        },
        jm = function (a, b) {
            var c;
            return ("number" === typeof b ? Qb : b instanceof jb ? of : (c = jb(b)) ? ((b = c), of) : yi)(a, b);
        },
        dr = wb.prototype.constructor,
        km = 0,
        qe = wb.prototype;
    sa.prototype = D.prototype = {
        constructor: sa,
        select: function (a) {
            var b = this._name,
                c = this._id;
            "function" !== typeof a && (a = Bg(a));
            for (var d = this._groups, e = d.length, f = Array(e), g = 0; g < e; ++g)
                for (var h = d[g], k = h.length, l = (f[g] = Array(k)), m, n, p = 0; p < k; ++p) (m = h[p]) && (n = a.call(m, m.__data__, p, h)) && ("__data__" in m && (n.__data__ = m.__data__), (l[p] = n), Fg(l[p], b, c, p, l, Ua(m, c)));
            return new sa(f, this._parents, b, c);
        },
        selectAll: function (a) {
            var b = this._name,
                c = this._id;
            "function" !== typeof a && (a = ui(a));
            for (var d = this._groups, e = d.length, f = [], g = [], h = 0; h < e; ++h)
                for (var k = d[h], l = k.length, m, n = 0; n < l; ++n)
                    if ((m = k[n])) {
                        for (var p = a.call(m, m.__data__, n, k), q, t = Ua(m, c), r = 0, w = p.length; r < w; ++r) (q = p[r]) && Fg(q, b, c, r, p, t);
                        f.push(p);
                        g.push(m);
                    }
            return new sa(f, g, b, c);
        },
        filter: function (a) {
            "function" !== typeof a && (a = ri(a));
            for (var b = this._groups, c = b.length, d = Array(c), e = 0; e < c; ++e) for (var f = b[e], g = f.length, h = (d[e] = []), k, l = 0; l < g; ++l) (k = f[l]) && a.call(k, k.__data__, l, f) && h.push(k);
            return new sa(d, this._parents, this._name, this._id);
        },
        merge: function (a) {
            if (a._id !== this._id) throw Error();
            var b = this._groups;
            a = a._groups;
            for (var c = b.length, d = Math.min(c, a.length), e = Array(c), f = 0; f < d; ++f) for (var g = b[f], h = a[f], k = g.length, l = (e[f] = Array(k)), m, n = 0; n < k; ++n) if ((m = g[n] || h[n])) l[n] = m;
            for (; f < c; ++f) e[f] = b[f];
            return new sa(e, this._parents, this._name, this._id);
        },
        selection: function () {
            return new dr(this._groups, this._parents);
        },
        transition: function () {
            for (var a = this._name, b = this._id, c = ++km, d = this._groups, e = d.length, f = 0; f < e; ++f)
                for (var g = d[f], h = g.length, k, l = 0; l < h; ++l)
                    if ((k = g[l])) {
                        var m = Ua(k, b);
                        Fg(k, a, c, l, g, { time: m.time + m.delay + m.duration, delay: 0, duration: m.duration, ease: m.ease });
                    }
            return new sa(d, this._parents, a, c);
        },
        call: qe.call,
        nodes: qe.nodes,
        node: qe.node,
        size: qe.size,
        empty: qe.empty,
        each: qe.each,
        on: function (a, b) {
            var c = this._id;
            return 2 > arguments.length ? Ua(this.node(), c).on.on(a) : this.each(ed(c, a, b));
        },
        attr: function (a, b) {
            var c = mf(a),
                d = "transform" === c ? hm : jm;
            return this.attrTween(a, "function" === typeof b ? (c.local ? Va : nd)(c, d, Xb(this, "attr." + a, b)) : null == b ? (c.local ? Cc : Jb)(c) : (c.local ? Be : md)(c, d, b + ""));
        },
        attrTween: function (a, b) {
            var c = "attr." + a;
            if (2 > arguments.length) return (c = this.tween(c)) && c._value;
            if (null == b) return this.tween(c, null);
            if ("function" !== typeof b) throw Error();
            var d = mf(a);
            return this.tween(c, (d.local ? Fe : Ge)(d, b));
        },
        style: function (a, b, c) {
            var d = "transform" === (a += "") ? gm : jm;
            return null == b ? this.styleTween(a, Sc(a, d)).on("end.style." + a, He(a)) : this.styleTween(a, "function" === typeof b ? rd(a, d, Xb(this, "style." + a, b)) : Dc(a, d, b + ""), c);
        },
        styleTween: function (a, b, c) {
            var d = "style." + (a += "");
            if (2 > arguments.length) return (d = this.tween(d)) && d._value;
            if (null == b) return this.tween(d, null);
            if ("function" !== typeof b) throw Error();
            return this.tween(d, sd(a, b, null == c ? "" : c));
        },
        text: function (a) {
            return this.tween("text", "function" === typeof a ? Nd(Xb(this, "text", a)) : Ie(null == a ? "" : a + ""));
        },
        remove: function () {
            return this.on("end.remove", Rc(this._id));
        },
        tween: function (a, b) {
            var c = this._id;
            a += "";
            if (2 > arguments.length) {
                for (var c = Ua(this.node(), c).tween, d = 0, e = c.length, f; d < e; ++d) if ((f = c[d]).name === a) return f.value;
                return null;
            }
            return this.each((null == b ? ld : mb)(c, a, b));
        },
        delay: function (a) {
            var b = this._id;
            return arguments.length ? this.each(("function" === typeof a ? Ld : od)(b, a)) : Ua(this.node(), b).delay;
        },
        duration: function (a) {
            var b = this._id;
            return arguments.length ? this.each(("function" === typeof a ? pd : qd)(b, a)) : Ua(this.node(), b).duration;
        },
        ease: function (a) {
            var b = this._id;
            return arguments.length ? this.each(Qc(b, a)) : Ua(this.node(), b).ease;
        },
    };
    var er = (function db(a) {
            function b(c) {
                return Math.pow(c, a);
            }
            a = +a;
            b.exponent = db;
            return b;
        })(3),
        fr = (function Tn(a) {
            function b(c) {
                return 1 - Math.pow(1 - c, a);
            }
            a = +a;
            b.exponent = Tn;
            return b;
        })(3),
        lm = (function nb(a) {
            function b(c) {
                return (1 >= (c *= 2) ? Math.pow(c, a) : 2 - Math.pow(2 - c, a)) / 2;
            }
            a = +a;
            b.exponent = nb;
            return b;
        })(3),
        Hj = Math.PI,
        mm = Hj / 2,
        lh = 4 / 11,
        ro = 6 / 11,
        qo = 8 / 11,
        to = 9 / 11,
        so = 10 / 11,
        uo = 21 / 22,
        Hf = 1 / lh / lh,
        gr = (function Ea(a) {
            function b(c) {
                return c * c * ((a + 1) * c - a);
            }
            a = +a;
            b.overshoot = Ea;
            return b;
        })(1.70158),
        hr = (function ic(a) {
            function b(c) {
                return --c * c * ((a + 1) * c + a) + 1;
            }
            a = +a;
            b.overshoot = ic;
            return b;
        })(1.70158),
        nm = (function Oa(a) {
            function b(c) {
                return (1 > (c *= 2) ? c * c * ((a + 1) * c - a) : (c -= 2) * c * ((a + 1) * c + a) + 2) / 2;
            }
            a = +a;
            b.overshoot = Oa;
            return b;
        })(1.70158),
        re = 2 * Math.PI,
        ir = (function yj(a, b) {
            function c(e) {
                return a * Math.pow(2, 10 * --e) * Math.sin((d - e) / b);
            }
            var d = Math.asin(1 / (a = Math.max(1, a))) * (b /= re);
            c.amplitude = function (a) {
                return yj(a, b * re);
            };
            c.period = function (b) {
                return yj(a, b);
            };
            return c;
        })(1, 0.3),
        om = (function Wa(a, b) {
            function c(e) {
                return 1 - a * Math.pow(2, -10 * (e = +e)) * Math.sin((e + d) / b);
            }
            var d = Math.asin(1 / (a = Math.max(1, a))) * (b /= re);
            c.amplitude = function (a) {
                return Wa(a, b * re);
            };
            c.period = function (b) {
                return Wa(a, b);
            };
            return c;
        })(1, 0.3),
        jr = (function F(a, b) {
            function c(e) {
                return (0 > (e = 2 * e - 1) ? a * Math.pow(2, 10 * e) * Math.sin((d - e) / b) : 2 - a * Math.pow(2, -10 * e) * Math.sin((d + e) / b)) / 2;
            }
            var d = Math.asin(1 / (a = Math.max(1, a))) * (b /= re);
            c.amplitude = function (a) {
                return F(a, b * re);
            };
            c.period = function (b) {
                return F(a, b);
            };
            return c;
        })(1, 0.3),
        Bi = { time: null, delay: 0, duration: 250, ease: Z };
    wb.prototype.interrupt = function (a) {
        return this.each(function () {
            vd(this, a);
        });
    };
    wb.prototype.transition = function (a) {
        var b, c;
        a instanceof sa ? ((b = a._id), (a = a._name)) : ((b = ++km), ((c = Bi).time = hc()), (a = null == a ? null : a + ""));
        for (var d = this._groups, e = d.length, f = 0; f < e; ++f)
            for (var g = d[f], h = g.length, k, l = 0; l < h; ++l)
                if ((k = g[l])) {
                    var m = k,
                        n = a,
                        p = b,
                        q = l,
                        t = g,
                        K;
                    if (!(K = c))
                        a: {
                            K = b;
                            for (var ba = void 0; !(ba = k.__transition) || !(ba = ba[K]); )
                                if (!(k = k.parentNode)) {
                                    K = ((Bi.time = hc()), Bi);
                                    break a;
                                }
                            K = ba;
                        }
                    Fg(m, n, p, q, t, K);
                }
        return new sa(d, this._parents, a, b);
    };
    var kr = [null],
        Lj = function (a) {
            return function () {
                return a;
            };
        },
        yo = function (a, b, c) {
            this.target = a;
            this.type = b;
            this.selection = c;
        },
        If = function () {
            b.event.preventDefault();
            b.event.stopImmediatePropagation();
        },
        Ij = { name: "drag" },
        mh = { name: "space" },
        Rd = { name: "handle" },
        Sd = { name: "center" },
        Lf = {
            name: "x",
            handles: ["e", "w"].map(vc),
            input: function (a, b) {
                return (
                    a && [
                        [a[0], b[0][1]],
                        [a[1], b[1][1]],
                    ]
                );
            },
            output: function (a) {
                return a && [a[0][0], a[1][0]];
            },
        },
        Kf = {
            name: "y",
            handles: ["n", "s"].map(vc),
            input: function (a, b) {
                return (
                    a && [
                        [b[0][0], a[0]],
                        [b[1][0], a[1]],
                    ]
                );
            },
            output: function (a) {
                return a && [a[0][1], a[1][1]];
            },
        },
        lr = {
            name: "xy",
            handles: "n e s w nw ne se sw".split(" ").map(vc),
            input: function (a) {
                return a;
            },
            output: function (a) {
                return a;
            },
        },
        Ec = { overlay: "crosshair", selection: "move", n: "ns-resize", e: "ew-resize", s: "ns-resize", w: "ew-resize", nw: "nwse-resize", ne: "nesw-resize", se: "nwse-resize", sw: "nesw-resize" },
        Jj = { e: "w", w: "e", nw: "ne", ne: "nw", se: "sw", sw: "se" },
        Kj = { n: "s", s: "n", nw: "sw", ne: "se", se: "ne", sw: "nw" },
        wo = { overlay: 1, selection: 1, n: null, e: 1, s: null, w: -1, nw: -1, ne: 1, se: 1, sw: -1 },
        xo = { overlay: 1, selection: 1, n: -1, e: null, s: 1, w: null, nw: -1, ne: -1, se: 1, sw: 1 },
        pm = Math.cos,
        qm = Math.sin,
        rm = Math.PI,
        Gg = rm / 2,
        sm = 2 * rm,
        tm = Math.max,
        mr = Array.prototype.slice,
        Ci = function (a) {
            return function () {
                return a;
            };
        },
        Di = Math.PI,
        Ei = 2 * Di,
        nr = Ei - 1e-6;
    Yg.prototype = Nc.prototype = {
        constructor: Yg,
        moveTo: function (a, b) {
            this._ += "M" + (this._x0 = this._x1 = +a) + "," + (this._y0 = this._y1 = +b);
        },
        closePath: function () {
            null !== this._x1 && ((this._x1 = this._x0), (this._y1 = this._y0), (this._ += "Z"));
        },
        lineTo: function (a, b) {
            this._ += "L" + (this._x1 = +a) + "," + (this._y1 = +b);
        },
        quadraticCurveTo: function (a, b, c, d) {
            this._ += "Q" + +a + "," + +b + "," + (this._x1 = +c) + "," + (this._y1 = +d);
        },
        bezierCurveTo: function (a, b, c, d, e, f) {
            this._ += "C" + +a + "," + +b + "," + +c + "," + +d + "," + (this._x1 = +e) + "," + (this._y1 = +f);
        },
        arcTo: function (a, b, c, d, e) {
            a = +a;
            b = +b;
            c = +c;
            d = +d;
            e = +e;
            var f = this._x1,
                g = this._y1,
                h = c - a,
                k = d - b,
                l = f - a,
                m = g - b,
                n = l * l + m * m;
            if (0 > e) throw Error("negative radius: " + e);
            if (null === this._x1) this._ += "M" + (this._x1 = a) + "," + (this._y1 = b);
            else if (1e-6 < n)
                if (1e-6 < Math.abs(m * h - k * l) && e) {
                    c -= f;
                    d -= g;
                    var p = h * h + k * k,
                        g = Math.sqrt(p),
                        f = Math.sqrt(n),
                        n = e * Math.tan((Di - Math.acos((p + n - (c * c + d * d)) / (2 * g * f))) / 2),
                        f = n / f,
                        n = n / g;
                    1e-6 < Math.abs(f - 1) && (this._ += "L" + (a + f * l) + "," + (b + f * m));
                    this._ += "A" + e + "," + e + ",0,0," + +(m * c > l * d) + "," + (this._x1 = a + n * h) + "," + (this._y1 = b + n * k);
                } else this._ += "L" + (this._x1 = a) + "," + (this._y1 = b);
        },
        arc: function (a, b, c, d, e, f) {
            a = +a;
            b = +b;
            c = +c;
            var g = c * Math.cos(d),
                h = c * Math.sin(d),
                k = a + g,
                l = b + h,
                m = 1 ^ f;
            d = f ? d - e : e - d;
            if (0 > c) throw Error("negative radius: " + c);
            if (null === this._x1) this._ += "M" + k + "," + l;
            else if (1e-6 < Math.abs(this._x1 - k) || 1e-6 < Math.abs(this._y1 - l)) this._ += "L" + k + "," + l;
            c &&
                (0 > d && (d = (d % Ei) + Ei),
                d > nr
                    ? (this._ += "A" + c + "," + c + ",0,1," + m + "," + (a - g) + "," + (b - h) + "A" + c + "," + c + ",0,1," + m + "," + (this._x1 = k) + "," + (this._y1 = l))
                    : 1e-6 < d && (this._ += "A" + c + "," + c + ",0," + +(d >= Di) + "," + m + "," + (this._x1 = a + c * Math.cos(e)) + "," + (this._y1 = b + c * Math.sin(e))));
        },
        rect: function (a, b, c, d) {
            this._ += "M" + (this._x0 = this._x1 = +a) + "," + (this._y0 = this._y1 = +b) + "h" + +c + "v" + +d + "h" + -c + "Z";
        },
        toString: function () {
            return this._;
        },
    };
    wf.prototype = oc.prototype = {
        constructor: wf,
        has: function (a) {
            return "$" + a in this;
        },
        get: function (a) {
            return this["$" + a];
        },
        set: function (a, b) {
            this["$" + a] = b;
            return this;
        },
        remove: function (a) {
            a = "$" + a;
            return a in this && delete this[a];
        },
        clear: function () {
            for (var a in this) "$" === a[0] && delete this[a];
        },
        keys: function () {
            var a = [],
                b;
            for (b in this) "$" === b[0] && a.push(b.slice(1));
            return a;
        },
        values: function () {
            var a = [],
                b;
            for (b in this) "$" === b[0] && a.push(this[b]);
            return a;
        },
        entries: function () {
            var a = [],
                b;
            for (b in this) "$" === b[0] && a.push({ key: b.slice(1), value: this[b] });
            return a;
        },
        size: function () {
            var a = 0,
                b;
            for (b in this) "$" === b[0] && ++a;
            return a;
        },
        empty: function () {
            for (var a in this) if ("$" === a[0]) return !1;
            return !0;
        },
        each: function (a) {
            for (var b in this) "$" === b[0] && a(this[b], b.slice(1), this);
        },
    };
    var Fd = oc.prototype;
    xf.prototype = oj.prototype = {
        constructor: xf,
        has: Fd.has,
        add: function (a) {
            a += "";
            this["$" + a] = a;
            return this;
        },
        remove: Fd.remove,
        clear: Fd.clear,
        values: Fd.keys,
        size: Fd.size,
        empty: Fd.empty,
        each: Fd.each,
    };
    var Fi = function (a) {
            function b(a, c) {
                function d() {
                    if (l >= k) return g;
                    if (n) return (n = !1), e;
                    var b = l,
                        c;
                    if (34 === a.charCodeAt(b)) {
                        for (var h = b; h++ < k; )
                            if (34 === a.charCodeAt(h)) {
                                if (34 !== a.charCodeAt(h + 1)) break;
                                ++h;
                            }
                        l = h + 2;
                        c = a.charCodeAt(h + 1);
                        13 === c ? ((n = !0), 10 === a.charCodeAt(h + 2) && ++l) : 10 === c && (n = !0);
                        return a.slice(b + 1, h).replace(/""/g, '"');
                    }
                    for (; l < k; ) {
                        h = 1;
                        c = a.charCodeAt(l++);
                        if (10 === c) n = !0;
                        else if (13 === c) (n = !0), 10 === a.charCodeAt(l) && (++l, ++h);
                        else if (c !== f) continue;
                        return a.slice(b, l - h);
                    }
                    return a.slice(b);
                }
                for (var e = {}, g = {}, h = [], k = a.length, l = 0, m = 0, K, n; (K = d()) !== g; ) {
                    for (var p = []; K !== e && K !== g; ) p.push(K), (K = d());
                    (c && null == (p = c(p, m++))) || h.push(p);
                }
                return h;
            }
            function c(b) {
                return b.map(d).join(a);
            }
            function d(a) {
                return null == a ? "" : e.test((a += "")) ? '"' + a.replace(/\"/g, '""') + '"' : a;
            }
            var e = new RegExp('["' + a + "\n\r]"),
                f = a.charCodeAt(0);
            return {
                parse: function (a, c) {
                    var d,
                        e,
                        f = b(a, function (a, b) {
                            if (d) return d(a, b - 1);
                            e = a;
                            d = c ? zn(a, c) : pj(a);
                        });
                    f.columns = e;
                    return f;
                },
                parseRows: b,
                format: function (b, c) {
                    null == c && (c = yn(b));
                    return [c.map(d).join(a)]
                        .concat(
                            b.map(function (b) {
                                return c
                                    .map(function (a) {
                                        return d(b[a]);
                                    })
                                    .join(a);
                            })
                        )
                        .join("\n");
                },
                formatRows: function (a) {
                    return a.map(c).join("\n");
                },
            };
        },
        Hg = Fi(","),
        um = Hg.parse,
        or = Hg.parseRows,
        pr = Hg.format,
        qr = Hg.formatRows,
        Ig = Fi("\t"),
        vm = Ig.parse,
        rr = Ig.parseRows,
        sr = Ig.format,
        tr = Ig.formatRows,
        Db = function (a) {
            return function () {
                return a;
            };
        },
        $c = function () {
            return 1e-6 * (Math.random() - 0.5);
        },
        Eb = function (a, b, c, d, e) {
            this.node = a;
            this.x0 = b;
            this.y0 = c;
            this.x1 = d;
            this.y1 = e;
        },
        Fb = (yf.prototype = ah.prototype);
    Fb.copy = function () {
        var a = new ah(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
            b = this._root,
            c,
            d;
        if (!b) return a;
        if (!b.length) return (a._root = bj(b)), a;
        for (c = [{ source: b, target: (a._root = Array(4)) }]; (b = c.pop()); ) for (var e = 0; 4 > e; ++e) if ((d = b.source[e])) d.length ? c.push({ source: d, target: (b.target[e] = Array(4)) }) : (b.target[e] = bj(d));
        return a;
    };
    Fb.add = function (a) {
        var b = +this._x.call(null, a),
            c = +this._y.call(null, a);
        return qj(this.cover(b, c), b, c, a);
    };
    Fb.addAll = function (a) {
        var b,
            c,
            d = a.length,
            e,
            f,
            g = Array(d),
            h = Array(d),
            k = Infinity,
            l = Infinity,
            m = -Infinity,
            n = -Infinity;
        for (c = 0; c < d; ++c) isNaN((e = +this._x.call(null, (b = a[c])))) || isNaN((f = +this._y.call(null, b))) || ((g[c] = e), (h[c] = f), e < k && (k = e), e > m && (m = e), f < l && (l = f), f > n && (n = f));
        m < k && ((k = this._x0), (m = this._x1));
        n < l && ((l = this._y0), (n = this._y1));
        this.cover(k, l).cover(m, n);
        for (c = 0; c < d; ++c) qj(this, g[c], h[c], a[c]);
        return this;
    };
    Fb.cover = function (a, b) {
        if (isNaN((a = +a)) || isNaN((b = +b))) return this;
        var c = this._x0,
            d = this._y0,
            e = this._x1,
            f = this._y1;
        if (isNaN(c)) (e = (c = Math.floor(a)) + 1), (f = (d = Math.floor(b)) + 1);
        else if (c > a || a > e || d > b || b > f) {
            var g = e - c,
                h = this._root,
                k,
                l;
            switch ((l = ((b < (d + f) / 2) << 1) | (a < (c + e) / 2))) {
                case 0:
                    do (k = Array(4)), (k[l] = h), (h = k);
                    while (((g *= 2), (e = c + g), (f = d + g), a > e || b > f));
                    break;
                case 1:
                    do (k = Array(4)), (k[l] = h), (h = k);
                    while (((g *= 2), (c = e - g), (f = d + g), c > a || b > f));
                    break;
                case 2:
                    do (k = Array(4)), (k[l] = h), (h = k);
                    while (((g *= 2), (e = c + g), (d = f - g), a > e || d > b));
                    break;
                case 3:
                    do (k = Array(4)), (k[l] = h), (h = k);
                    while (((g *= 2), (c = e - g), (d = f - g), c > a || d > b));
            }
            this._root && this._root.length && (this._root = h);
        } else return this;
        this._x0 = c;
        this._y0 = d;
        this._x1 = e;
        this._y1 = f;
        return this;
    };
    Fb.data = function () {
        var a = [];
        this.visit(function (b) {
            if (!b.length) {
                do a.push(b.data);
                while ((b = b.next));
            }
        });
        return a;
    };
    Fb.extent = function (a) {
        return arguments.length
            ? this.cover(+a[0][0], +a[0][1]).cover(+a[1][0], +a[1][1])
            : isNaN(this._x0)
            ? void 0
            : [
                  [this._x0, this._y0],
                  [this._x1, this._y1],
              ];
    };
    Fb.find = function (a, b, c) {
        var d,
            e = this._x0,
            f = this._y0,
            g,
            h,
            k,
            l,
            m = this._x1,
            n = this._y1,
            p = [],
            q = this._root,
            t;
        q && p.push(new Eb(q, e, f, m, n));
        null == c ? (c = Infinity) : ((e = a - c), (f = b - c), (m = a + c), (n = b + c), (c *= c));
        for (; (t = p.pop()); )
            if (!(!(q = t.node) || (g = t.x0) > m || (h = t.y0) > n || (k = t.x1) < e || (l = t.y1) < f))
                if (q.length) {
                    t = (g + k) / 2;
                    var K = (h + l) / 2;
                    p.push(new Eb(q[3], t, K, k, l), new Eb(q[2], g, K, t, l), new Eb(q[1], t, h, k, K), new Eb(q[0], g, h, t, K));
                    if ((q = ((b >= K) << 1) | (a >= t))) (t = p[p.length - 1]), (p[p.length - 1] = p[p.length - 1 - q]), (p[p.length - 1 - q] = t);
                } else (t = a - +this._x.call(null, q.data)), (K = b - +this._y.call(null, q.data)), (t = t * t + K * K), t < c && ((d = Math.sqrt((c = t))), (e = a - d), (f = b - d), (m = a + d), (n = b + d), (d = q.data));
        return d;
    };
    Fb.remove = function (a) {
        if (isNaN((l = +this._x.call(null, a))) || isNaN((m = +this._y.call(null, a)))) return this;
        var b,
            c = this._root,
            d,
            e,
            f = this._x0,
            g = this._y0,
            h = this._x1,
            k = this._y1,
            l,
            m,
            n,
            p,
            q,
            t,
            K;
        if (!c) return this;
        if (c.length)
            for (;;) {
                (q = l >= (n = (f + h) / 2)) ? (f = n) : (h = n);
                (t = m >= (p = (g + k) / 2)) ? (g = p) : (k = p);
                if (!((b = c), (c = c[(q |= t << 1)]))) return this;
                if (!c.length) break;
                if (b[(q + 1) & 3] || b[(q + 2) & 3] || b[(q + 3) & 3]) (d = b), (K = q);
            }
        for (; c.data !== a; ) if (!((e = c), (c = c.next))) return this;
        (a = c.next) && delete c.next;
        if (e) return a ? (e.next = a) : delete e.next, this;
        if (!b) return (this._root = a), this;
        a ? (b[q] = a) : delete b[q];
        (c = b[0] || b[1] || b[2] || b[3]) && c === (b[3] || b[2] || b[1] || b[0]) && !c.length && (d ? (d[K] = c) : (this._root = c));
        return this;
    };
    Fb.removeAll = function (a) {
        for (var b = 0, c = a.length; b < c; ++b) this.remove(a[b]);
        return this;
    };
    Fb.root = function () {
        return this._root;
    };
    Fb.size = function () {
        var a = 0;
        this.visit(function (b) {
            if (!b.length) {
                do ++a;
                while ((b = b.next));
            }
        });
        return a;
    };
    Fb.visit = function (a) {
        var b = [],
            c,
            d = this._root,
            e,
            f,
            g,
            h;
        for (d && b.push(new Eb(d, this._x0, this._y0, this._x1, this._y1)); (c = b.pop()); )
            if (!a((d = c.node), (f = c.x0), (g = c.y0), (h = c.x1), (c = c.y1)) && d.length) {
                var k = (f + h) / 2,
                    l = (g + c) / 2;
                (e = d[3]) && b.push(new Eb(e, k, l, h, c));
                (e = d[2]) && b.push(new Eb(e, f, l, k, c));
                (e = d[1]) && b.push(new Eb(e, k, g, h, l));
                (e = d[0]) && b.push(new Eb(e, f, g, k, l));
            }
        return this;
    };
    Fb.visitAfter = function (a) {
        var b = [],
            c = [],
            d;
        for (this._root && b.push(new Eb(this._root, this._x0, this._y0, this._x1, this._y1)); (d = b.pop()); ) {
            var e = d.node;
            if (e.length) {
                var f,
                    g = d.x0,
                    h = d.y0,
                    k = d.x1,
                    l = d.y1,
                    m = (g + k) / 2,
                    n = (h + l) / 2;
                (f = e[0]) && b.push(new Eb(f, g, h, m, n));
                (f = e[1]) && b.push(new Eb(f, m, h, k, n));
                (f = e[2]) && b.push(new Eb(f, g, n, m, l));
                (f = e[3]) && b.push(new Eb(f, m, n, k, l));
            }
            c.push(d);
        }
        for (; (d = c.pop()); ) a(d.node, d.x0, d.y0, d.x1, d.y1);
        return this;
    };
    Fb.x = function (a) {
        return arguments.length ? ((this._x = a), this) : this._x;
    };
    Fb.y = function (a) {
        return arguments.length ? ((this._y = a), this) : this._y;
    };
    var ur = Math.PI * (3 - Math.sqrt(5)),
        Jg = function (a, b) {
            if (0 > (c = (a = b ? a.toExponential(b - 1) : a.toExponential()).indexOf("e"))) return null;
            var c,
                d = a.slice(0, c);
            return [1 < d.length ? d[0] + d.slice(2) : d, +a.slice(c + 1)];
        },
        se = function (a) {
            return (a = Jg(Math.abs(a))), a ? a[1] : NaN;
        },
        vr = function (a, b) {
            return function (c, d) {
                for (var e = c.length, f = [], g = 0, h = a[0], k = 0; 0 < e && 0 < h; ) {
                    k + h + 1 > d && (h = Math.max(1, d - k));
                    f.push(c.substring((e -= h), e + h));
                    if ((k += h + 1) > d) break;
                    h = a[(g = (g + 1) % a.length)];
                }
                return f.reverse().join(b);
            };
        },
        wr = function (a) {
            return function (b) {
                return b.replace(/[0-9]/g, function (b) {
                    return a[+b];
                });
            };
        },
        wm,
        xm = function (a, b) {
            var c = Jg(a, b);
            if (!c) return a + "";
            var d = c[0],
                c = c[1];
            return 0 > c ? "0." + Array(-c).join("0") + d : d.length > c + 1 ? d.slice(0, c + 1) + "." + d.slice(c + 1) : d + Array(c - d.length + 2).join("0");
        },
        Mj = {
            "": function (a, b) {
                a = a.toPrecision(b);
                var c = a.length,
                    d = 1,
                    e = -1,
                    f;
                a: for (; d < c; ++d)
                    switch (a[d]) {
                        case ".":
                            e = f = d;
                            break;
                        case "0":
                            0 === e && (e = d);
                            f = d;
                            break;
                        case "e":
                            break a;
                        default:
                            0 < e && (e = 0);
                    }
                return 0 < e ? a.slice(0, e) + a.slice(f + 1) : a;
            },
            "%": function (a, b) {
                return (100 * a).toFixed(b);
            },
            b: function (a) {
                return Math.round(a).toString(2);
            },
            c: function (a) {
                return a + "";
            },
            d: function (a) {
                return Math.round(a).toString(10);
            },
            e: function (a, b) {
                return a.toExponential(b);
            },
            f: function (a, b) {
                return a.toFixed(b);
            },
            g: function (a, b) {
                return a.toPrecision(b);
            },
            o: function (a) {
                return Math.round(a).toString(8);
            },
            p: function (a, b) {
                return xm(100 * a, b);
            },
            r: xm,
            s: function (a, b) {
                var c = Jg(a, b);
                if (!c) return a + "";
                var d = c[0],
                    c = c[1],
                    c = c - (wm = 3 * Math.max(-8, Math.min(8, Math.floor(c / 3)))) + 1,
                    e = d.length;
                return c === e ? d : c > e ? d + Array(c - e + 1).join("0") : 0 < c ? d.slice(0, c) + "." + d.slice(c) : "0." + Array(1 - c).join("0") + Jg(a, Math.max(0, b + c - 1))[0];
            },
            X: function (a) {
                return Math.round(a).toString(16).toUpperCase();
            },
            x: function (a) {
                return Math.round(a).toString(16);
            },
        },
        zo = /^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;
    De.prototype = bh.prototype;
    bh.prototype.toString = function () {
        return (
            this.fill +
            this.align +
            this.sign +
            this.symbol +
            (this.zero ? "0" : "") +
            (null == this.width ? "" : Math.max(1, this.width | 0)) +
            (this.comma ? "," : "") +
            (null == this.precision ? "" : "." + Math.max(0, this.precision | 0)) +
            this.type
        );
    };
    var ym = function (a) {
            return a;
        },
        zm = "y z a f p n \u00b5 m  k M G T P E Z Y".split(" "),
        Nj = function (a) {
            function b(a) {
                function h(a) {
                    var b = w,
                        d = ja,
                        g,
                        n,
                        P;
                    if ("c" === r) (d = u(a) + d), (a = "");
                    else if (
                        ((a = +a),
                        (g = 0 > a),
                        (a = u(Math.abs(a), t)),
                        g && 0 === +a && (g = !1),
                        (b = (g ? ("(" === m ? m : "-") : "-" === m || "(" === m ? "" : m) + b),
                        (d = d + ("s" === r ? zm[8 + wm / 3] : "") + (g && "(" === m ? ")" : "")),
                        v)
                    )
                        for (g = -1, n = a.length; ++g < n; )
                            if (((P = a.charCodeAt(g)), 48 > P || 57 < P)) {
                                d = (46 === P ? e + a.slice(g + 1) : a.slice(g)) + d;
                                a = a.slice(0, g);
                                break;
                            }
                    K && !p && (a = c(a, Infinity));
                    P = b.length + a.length + d.length;
                    g = P < q ? Array(q - P + 1).join(k) : "";
                    K && p && ((a = c(g + a, g.length ? q - d.length : Infinity)), (g = ""));
                    switch (l) {
                        case "<":
                            a = b + a + d + g;
                            break;
                        case "=":
                            a = b + g + a + d;
                            break;
                        case "^":
                            a = g.slice(0, (P = g.length >> 1)) + b + a + d + g.slice(P);
                            break;
                        default:
                            a = g + b + a + d;
                    }
                    return f(a);
                }
                a = De(a);
                var k = a.fill,
                    l = a.align,
                    m = a.sign,
                    n = a.symbol,
                    p = a.zero,
                    q = a.width,
                    K = a.comma,
                    t = a.precision,
                    r = a.type,
                    w = "$" === n ? d[0] : "#" === n && /[boxX]/.test(r) ? "0" + r.toLowerCase() : "",
                    ja = "$" === n ? d[1] : /[%p]/.test(r) ? g : "",
                    u = Mj[r],
                    v = !r || /[defgprs%]/.test(r),
                    t = null == t ? (r ? 6 : 12) : /[gprs]/.test(r) ? Math.max(1, Math.min(21, t)) : Math.max(0, Math.min(20, t));
                h.toString = function () {
                    return a + "";
                };
                return h;
            }
            var c = a.grouping && a.thousands ? vr(a.grouping, a.thousands) : ym,
                d = a.currency,
                e = a.decimal,
                f = a.numerals ? wr(a.numerals) : ym,
                g = a.percent || "%";
            return {
                format: b,
                formatPrefix: function (a, c) {
                    var d = b(((a = De(a)), (a.type = "f"), a)),
                        e = 3 * Math.max(-8, Math.min(8, Math.floor(se(c) / 3))),
                        f = Math.pow(10, -e),
                        g = zm[8 + e / 3];
                    return function (a) {
                        return d(f * a) + g;
                    };
                },
            };
        },
        Nf;
    rj({ decimal: ".", thousands: ",", grouping: [3], currency: ["$", ""] });
    var Xk = function (a) {
            return Math.max(0, -se(Math.abs(a)));
        },
        Vk = function (a, b) {
            return Math.max(0, 3 * Math.max(-8, Math.min(8, Math.floor(se(b) / 3))) - se(Math.abs(a)));
        },
        Wk = function (a, b) {
            a = Math.abs(a);
            b = Math.abs(b) - a;
            return Math.max(0, se(b) - se(a)) + 1;
        };
    fc.prototype = {
        constructor: fc,
        reset: function () {
            this.s = this.t = 0;
        },
        add: function (a) {
            mj(Kg, a, this.t);
            mj(this, Kg.s, this.s);
            this.s ? (this.t += Kg.t) : (this.s = Kg.t);
        },
        valueOf: function () {
            return this.s;
        },
    };
    var Kg = new fc(),
        qa = Math.PI,
        Pa = qa / 2,
        Of = qa / 4,
        Lb = 2 * qa,
        Ia = 180 / qa,
        Y = qa / 180,
        xa = Math.abs,
        ge = Math.atan,
        zb = Math.atan2,
        S = Math.cos,
        Xf = Math.ceil,
        Am = Math.exp,
        dg = Math.log,
        Bh = Math.pow,
        R = Math.sin,
        Ve =
            Math.sign ||
            function (a) {
                return 0 < a ? 1 : 0 > a ? -1 : 0;
            },
        fb = Math.sqrt,
        fe = Math.tan,
        Bm = {
            Feature: function (a, b) {
                zf(a.geometry, b);
            },
            FeatureCollection: function (a, b) {
                for (var c = a.features, d = -1, e = c.length; ++d < e; ) zf(c[d].geometry, b);
            },
        },
        Oj = {
            Sphere: function (a, b) {
                b.sphere();
            },
            Point: function (a, b) {
                a = a.coordinates;
                b.point(a[0], a[1], a[2]);
            },
            MultiPoint: function (a, b) {
                for (var c = a.coordinates, d = -1, e = c.length; ++d < e; ) (a = c[d]), b.point(a[0], a[1], a[2]);
            },
            LineString: function (a, b) {
                Xg(a.coordinates, b, 0);
            },
            MultiLineString: function (a, b) {
                for (var c = a.coordinates, d = -1, e = c.length; ++d < e; ) Xg(c[d], b, 0);
            },
            Polygon: function (a, b) {
                uj(a.coordinates, b);
            },
            MultiPolygon: function (a, b) {
                for (var c = a.coordinates, d = -1, e = c.length; ++d < e; ) uj(c[d], b);
            },
            GeometryCollection: function (a, b) {
                for (var c = a.geometries, d = -1, e = c.length; ++d < e; ) zf(c[d], b);
            },
        },
        lc = function (a, b) {
            if (a && Bm.hasOwnProperty(a.type)) Bm[a.type](a, b);
            else zf(a, b);
        },
        Pf = new fc(),
        Lg = new fc(),
        Pj,
        Qj,
        nh,
        oh,
        ph,
        rc = {
            point: Ma,
            lineStart: Ma,
            lineEnd: Ma,
            polygonStart: function () {
                Pf.reset();
                rc.lineStart = Qn;
                rc.lineEnd = Rn;
            },
            polygonEnd: function () {
                var a = +Pf;
                Lg.add(0 > a ? Lb + a : a);
                this.lineStart = this.lineEnd = this.point = Ma;
            },
            sphere: function () {
                Lg.add(Lb);
            },
        },
        Ya,
        Rb,
        $a,
        Yb,
        wd,
        Rj,
        Sj,
        Td,
        Oe = new fc(),
        Vc,
        Fc,
        Gc = {
            point: ch,
            lineStart: dj,
            lineEnd: wj,
            polygonStart: function () {
                Gc.point = fj;
                Gc.lineStart = Yi;
                Gc.lineEnd = tn;
                Oe.reset();
                rc.polygonStart();
            },
            polygonEnd: function () {
                rc.polygonEnd();
                Gc.point = ch;
                Gc.lineStart = dj;
                Gc.lineEnd = wj;
                0 > Pf ? ((Ya = -($a = 180)), (Rb = -(Yb = 90))) : 1e-6 < Oe ? (Yb = 90) : -1e-6 > Oe && (Rb = -90);
                Fc[0] = Ya;
                Fc[1] = $a;
            },
        },
        Pe,
        Ud,
        Qe,
        Re,
        Se,
        Vd,
        Wd,
        Xd,
        Qf,
        Rf,
        Sf,
        Tj,
        Uj,
        Ab,
        Bb,
        Cb,
        jc = {
            sphere: Ma,
            point: Vg,
            lineStart: $i,
            lineEnd: aj,
            polygonStart: function () {
                jc.lineStart = Fn;
                jc.lineEnd = Gn;
            },
            polygonEnd: function () {
                jc.lineStart = $i;
                jc.lineEnd = aj;
            },
        },
        te = function (a) {
            return function () {
                return a;
            };
        },
        Vj = function (a, b) {
            function c(d, e) {
                return (d = a(d, e)), b(d[0], d[1]);
            }
            a.invert &&
                b.invert &&
                (c.invert = function (c, d) {
                    return (c = b.invert(c, d)), c && a.invert(c[0], c[1]);
                });
            return c;
        };
    Zg.invert = Zg;
    var Bk = function (a) {
            function b(c) {
                c = a(c[0] * Y, c[1] * Y);
                return (c[0] *= Ia), (c[1] *= Ia), c;
            }
            a = $g(a[0] * Y, a[1] * Y, 2 < a.length ? a[2] * Y : 0);
            b.invert = function (b) {
                b = a.invert(b[0] * Y, b[1] * Y);
                return (b[0] *= Ia), (b[1] *= Ia), b;
            };
            return b;
        },
        Yj = function () {
            var a = [],
                b;
            return {
                point: function (a, c) {
                    b.push([a, c]);
                },
                lineStart: function () {
                    a.push((b = []));
                },
                lineEnd: Ma,
                rejoin: function () {
                    1 < a.length && a.push(a.pop().concat(a.shift()));
                },
                result: function () {
                    var c = a;
                    a = [];
                    b = null;
                    return c;
                },
            };
        },
        Ao = function (a, b, c, d, e, f) {
            var g = a[0],
                h = a[1],
                k = 0,
                l = 1,
                m = b[0] - g,
                n = b[1] - h;
            c -= g;
            if (m || !(0 < c)) {
                c /= m;
                if (0 > m) {
                    if (c < k) return;
                    c < l && (l = c);
                } else if (0 < m) {
                    if (c > l) return;
                    c > k && (k = c);
                }
                c = e - g;
                if (m || !(0 > c)) {
                    c /= m;
                    if (0 > m) {
                        if (c > l) return;
                        c > k && (k = c);
                    } else if (0 < m) {
                        if (c < k) return;
                        c < l && (l = c);
                    }
                    c = d - h;
                    if (n || !(0 < c)) {
                        c /= n;
                        if (0 > n) {
                            if (c < k) return;
                            c < l && (l = c);
                        } else if (0 < n) {
                            if (c > l) return;
                            c > k && (k = c);
                        }
                        c = f - h;
                        if (n || !(0 > c)) {
                            c /= n;
                            if (0 > n) {
                                if (c > l) return;
                                c > k && (k = c);
                            } else if (0 < n) {
                                if (c < k) return;
                                c < l && (l = c);
                            }
                            0 < k && ((a[0] = g + k * m), (a[1] = h + k * n));
                            1 > l && ((b[0] = g + l * m), (b[1] = h + l * n));
                            return !0;
                        }
                    }
                }
            }
        },
        Mg = function (a, b) {
            return 1e-6 > xa(a[0] - b[0]) && 1e-6 > xa(a[1] - b[1]);
        },
        Zj = function (a, b, c, d, e) {
            var f = [],
                g = [],
                h;
            a.forEach(function (a) {
                if (!(0 >= (b = a.length - 1))) {
                    var b,
                        c = a[0],
                        d = a[b];
                    if (Mg(c, d)) {
                        e.lineStart();
                        for (h = 0; h < b; ++h) e.point((c = a[h])[0], c[1]);
                        e.lineEnd();
                    } else f.push((b = new Tf(c, a, null, !0))), g.push((b.o = new Tf(c, null, b, !1))), f.push((b = new Tf(d, a, null, !1))), g.push((b.o = new Tf(d, null, b, !0)));
                }
            });
            if (f.length) {
                g.sort(b);
                Xj(f);
                Xj(g);
                h = 0;
                for (a = g.length; h < a; ++h) g[h].e = c = !c;
                c = f[0];
                for (var k; ; ) {
                    for (var l = c, m = !0; l.v; ) if ((l = l.n) === c) return;
                    b = l.z;
                    e.lineStart();
                    do {
                        l.v = l.o.v = !0;
                        if (l.e) {
                            if (m) for (h = 0, a = b.length; h < a; ++h) e.point((k = b[h])[0], k[1]);
                            else d(l.x, l.n.x, 1, e);
                            l = l.n;
                        } else {
                            if (m) for (b = l.p.z, h = b.length - 1; 0 <= h; --h) e.point((k = b[h])[0], k[1]);
                            else d(l.x, l.p.x, -1, e);
                            l = l.p;
                        }
                        l = l.o;
                        b = l.z;
                        m = !m;
                    } while (!l.v);
                    e.lineEnd();
                }
            }
        },
        Gi = new fc(),
        dk = function (a, b) {
            var c = b[0],
                d = b[1],
                e = [R(c), -S(c), 0],
                f = 0,
                g = 0;
            Gi.reset();
            for (var h = 0, k = a.length; h < k; ++h)
                if ((m = (l = a[h]).length))
                    for (var l, m, n = l[m - 1], p = n[0], q = n[1] / 2 + Of, t = R(q), K = S(q), q = 0; q < m; ++q, p = r, t = ja, K = w, n = ba) {
                        var ba = l[q],
                            r = ba[0],
                            w = ba[1] / 2 + Of,
                            ja = R(w),
                            w = S(w),
                            u = r - p,
                            v = 0 <= u ? 1 : -1,
                            Za = v * u,
                            Jf = Za > qa,
                            t = t * ja;
                        Gi.add(zb(t * v * R(Za), K * w + t * S(Za)));
                        f += Jf ? u + v * Lb : u;
                        Jf ^ (p >= c) ^ (r >= c) && ((n = Id(fd(n), fd(ba))), Cf(n), (p = Id(e, n)), Cf(p), (p = (Jf ^ (0 <= u) ? -1 : 1) * Ob(p[2])), d > p || (d === p && (n[0] || n[1]))) && (g += Jf ^ (0 <= u) ? 1 : -1);
                    }
            return (-1e-6 > f || (1e-6 > f && -1e-6 > Gi)) ^ (g & 1);
        },
        th = new fc(),
        sh,
        Uf,
        Vf,
        Yd = {
            sphere: Ma,
            point: Ma,
            lineStart: function () {
                Yd.point = Co;
                Yd.lineEnd = Bo;
            },
            lineEnd: Ma,
            polygonStart: Ma,
            polygonEnd: Ma,
        },
        Cm = function (a) {
            th.reset();
            lc(a, Yd);
            return +th;
        },
        Hi = [null, null],
        xr = { type: "LineString", coordinates: Hi },
        Zd = function (a, b) {
            Hi[0] = a;
            Hi[1] = b;
            return Cm(xr);
        },
        Dm = {
            Feature: function (a, b) {
                return Wf(a.geometry, b);
            },
            FeatureCollection: function (a, b) {
                for (var c = a.features, d = -1, e = c.length; ++d < e; ) if (Wf(c[d].geometry, b)) return !0;
                return !1;
            },
        },
        ak = {
            Sphere: function () {
                return !0;
            },
            Point: function (a, b) {
                return 0 === Zd(a.coordinates, b);
            },
            MultiPoint: function (a, b) {
                for (var c = a.coordinates, d = -1, e = c.length; ++d < e; ) if (0 === Zd(c[d], b)) return !0;
                return !1;
            },
            LineString: function (a, b) {
                return bk(a.coordinates, b);
            },
            MultiLineString: function (a, b) {
                for (var c = a.coordinates, d = -1, e = c.length; ++d < e; ) if (bk(c[d], b)) return !0;
                return !1;
            },
            Polygon: function (a, b) {
                return ck(a.coordinates, b);
            },
            MultiPolygon: function (a, b) {
                for (var c = a.coordinates, d = -1, e = c.length; ++d < e; ) if (ck(c[d], b)) return !0;
                return !1;
            },
            GeometryCollection: function (a, b) {
                for (var c = a.geometries, d = -1, e = c.length; ++d < e; ) if (Wf(c[d], b)) return !0;
                return !1;
            },
        },
        yd = function (a) {
            return a;
        },
        Ii = new fc(),
        wh = new fc(),
        jk,
        kk,
        uh,
        vh,
        Hc = {
            point: Ma,
            lineStart: Ma,
            lineEnd: Ma,
            polygonStart: function () {
                Hc.lineStart = Fo;
                Hc.lineEnd = Ho;
            },
            polygonEnd: function () {
                Hc.lineStart = Hc.lineEnd = Hc.point = Ma;
                Ii.add(xa(wh));
                wh.reset();
            },
            result: function () {
                var a = Ii / 2;
                Ii.reset();
                return a;
            },
        },
        ue = Infinity,
        Ng = ue,
        rf = -ue,
        Og = rf,
        cg = {
            point: function (a, b) {
                a < ue && (ue = a);
                a > rf && (rf = a);
                b < Ng && (Ng = b);
                b > Og && (Og = b);
            },
            lineStart: Ma,
            lineEnd: Ma,
            polygonStart: Ma,
            polygonEnd: Ma,
            result: function () {
                var a = [
                    [ue, Ng],
                    [rf, Og],
                ];
                rf = Og = -(Ng = ue = Infinity);
                return a;
            },
        },
        Yf = 0,
        Zf = 0,
        Te = 0,
        $d = 0,
        ae = 0,
        Wc = 0,
        $f = 0,
        ag = 0,
        be = 0,
        ok,
        pk,
        sc,
        tc,
        Zb = {
            point: xd,
            lineStart: lk,
            lineEnd: mk,
            polygonStart: function () {
                Zb.lineStart = Ko;
                Zb.lineEnd = Mo;
            },
            polygonEnd: function () {
                Zb.point = xd;
                Zb.lineStart = lk;
                Zb.lineEnd = mk;
            },
            result: function () {
                var a = be ? [$f / be, ag / be] : Wc ? [$d / Wc, ae / Wc] : Te ? [Yf / Te, Zf / Te] : [NaN, NaN];
                Yf = Zf = Te = $d = ae = Wc = $f = ag = be = 0;
                return a;
            },
        };
    qk.prototype = {
        _radius: 4.5,
        pointRadius: function (a) {
            return (this._radius = a), this;
        },
        polygonStart: function () {
            this._line = 0;
        },
        polygonEnd: function () {
            this._line = NaN;
        },
        lineStart: function () {
            this._point = 0;
        },
        lineEnd: function () {
            0 === this._line && this._context.closePath();
            this._point = NaN;
        },
        point: function (a, b) {
            switch (this._point) {
                case 0:
                    this._context.moveTo(a, b);
                    this._point = 1;
                    break;
                case 1:
                    this._context.lineTo(a, b);
                    break;
                default:
                    this._context.moveTo(a + this._radius, b), this._context.arc(a, b, this._radius, 0, Lb);
            }
        },
        result: Ma,
    };
    var xh = new fc(),
        Ji,
        sk,
        tk,
        ce,
        de,
        Ue = {
            point: Ma,
            lineStart: function () {
                Ue.point = No;
            },
            lineEnd: function () {
                Ji && rk(sk, tk);
                Ue.point = Ma;
            },
            polygonStart: function () {
                Ji = !0;
            },
            polygonEnd: function () {
                Ji = null;
            },
            result: function () {
                var a = +xh;
                xh.reset();
                return a;
            },
        };
    uk.prototype = {
        _radius: 4.5,
        _circle: vk(4.5),
        pointRadius: function (a) {
            (a = +a) !== this._radius && ((this._radius = a), (this._circle = null));
            return this;
        },
        polygonStart: function () {
            this._line = 0;
        },
        polygonEnd: function () {
            this._line = NaN;
        },
        lineStart: function () {
            this._point = 0;
        },
        lineEnd: function () {
            0 === this._line && this._string.push("Z");
            this._point = NaN;
        },
        point: function (a, b) {
            switch (this._point) {
                case 0:
                    this._string.push("M", a, ",", b);
                    this._point = 1;
                    break;
                case 1:
                    this._string.push("L", a, ",", b);
                    break;
                default:
                    null == this._circle && (this._circle = vk(this._radius)), this._string.push("M", a, ",", b, this._circle);
            }
        },
        result: function () {
            if (this._string.length) {
                var a = this._string.join("");
                this._string = [];
                return a;
            }
            return null;
        },
    };
    var Em = function (a, b, c, d) {
            return function (e, f) {
                function g(b, c) {
                    var d = e(b, c);
                    a((b = d[0]), (c = d[1])) && f.point(b, c);
                }
                function h(a, b) {
                    var c = e(a, b);
                    q.point(c[0], c[1]);
                }
                function k() {
                    v.point = h;
                    q.lineStart();
                }
                function l() {
                    v.point = g;
                    q.lineEnd();
                }
                function m(a, b) {
                    u.push([a, b]);
                    var c = e(a, b);
                    ba.point(c[0], c[1]);
                }
                function n() {
                    ba.lineStart();
                    u = [];
                }
                function p() {
                    m(u[0][0], u[0][1]);
                    ba.lineEnd();
                    var a = ba.clean(),
                        b = K.result(),
                        c = b.length,
                        d;
                    u.pop();
                    w.push(u);
                    u = null;
                    if (c)
                        if (a & 1) {
                            if (((c = b[0]), 0 < (b = c.length - 1))) {
                                r || (f.polygonStart(), (r = !0));
                                f.lineStart();
                                for (a = 0; a < b; ++a) f.point((d = c[a])[0], d[1]);
                                f.lineEnd();
                            }
                        } else 1 < c && a & 2 && b.push(b.pop().concat(b.shift())), ja.push(b.filter(Oo));
                }
                var q = b(f),
                    t = e.invert(d[0], d[1]),
                    K = Yj(),
                    ba = b(K),
                    r = !1,
                    w,
                    ja,
                    u,
                    v = {
                        point: g,
                        lineStart: k,
                        lineEnd: l,
                        polygonStart: function () {
                            v.point = m;
                            v.lineStart = n;
                            v.lineEnd = p;
                            ja = [];
                            w = [];
                        },
                        polygonEnd: function () {
                            v.point = g;
                            v.lineStart = k;
                            v.lineEnd = l;
                            ja = rh(ja);
                            var a = dk(w, t);
                            ja.length ? (r || (f.polygonStart(), (r = !0)), Zj(ja, Po, a, c, f)) : a && (r || (f.polygonStart(), (r = !0)), f.lineStart(), c(null, null, 1, f), f.lineEnd());
                            r && (f.polygonEnd(), (r = !1));
                            ja = w = null;
                        },
                        sphere: function () {
                            f.polygonStart();
                            f.lineStart();
                            c(null, null, 1, f);
                            f.lineEnd();
                            f.polygonEnd();
                        },
                    };
                return v;
            };
        },
        wk = Em(
            function () {
                return !0;
            },
            function (a) {
                var b = NaN,
                    c = NaN,
                    d = NaN,
                    e;
                return {
                    lineStart: function () {
                        a.lineStart();
                        e = 1;
                    },
                    point: function (f, g) {
                        var h = 0 < f ? qa : -qa,
                            k = xa(f - b);
                        if (1e-6 > xa(k - qa)) a.point(b, (c = 0 < (c + g) / 2 ? Pa : -Pa)), a.point(d, c), a.lineEnd(), a.lineStart(), a.point(h, c), a.point(f, c), (e = 0);
                        else if (d !== h && k >= qa) {
                            1e-6 > xa(b - d) && (b -= 1e-6 * d);
                            1e-6 > xa(f - h) && (f -= 1e-6 * h);
                            var k = b,
                                l = c,
                                m = f,
                                n,
                                p,
                                q = R(k - m);
                            c = 1e-6 < xa(q) ? ge((R(l) * (p = S(g)) * R(m) - R(g) * (n = S(l)) * R(k)) / (n * p * q)) : (l + g) / 2;
                            a.point(d, c);
                            a.lineEnd();
                            a.lineStart();
                            a.point(h, c);
                            e = 0;
                        }
                        a.point((b = f), (c = g));
                        d = h;
                    },
                    lineEnd: function () {
                        a.lineEnd();
                        b = c = NaN;
                    },
                    clean: function () {
                        return 2 - e;
                    },
                };
            },
            function (a, b, c, d) {
                null == a
                    ? ((c *= Pa), d.point(-qa, c), d.point(0, c), d.point(qa, c), d.point(qa, 0), d.point(qa, -c), d.point(0, -c), d.point(-qa, -c), d.point(-qa, 0), d.point(-qa, c))
                    : 1e-6 < xa(a[0] - b[0])
                    ? ((a = a[0] < b[0] ? qa : -qa), (c = (c * a) / 2), d.point(-a, c), d.point(0, c), d.point(a, c))
                    : d.point(b[0], b[1]);
            },
            [-qa, -Pa]
        ),
        Uo = function (a, b) {
            function c(a, b) {
                return S(a) * S(b) > f;
            }
            function d(a, b, c) {
                var e = fd(a),
                    g = fd(b),
                    h = [1, 0, 0],
                    g = Id(e, g),
                    k = Bf(g, g),
                    e = g[0],
                    l = k - e * e;
                if (!l) return !c && a;
                k = (f * k) / l;
                l = (-f * e) / l;
                e = Id(h, g);
                h = vf(h, k);
                g = vf(g, l);
                Wg(h, g);
                g = Bf(h, e);
                k = Bf(e, e);
                l = g * g - k * (Bf(h, h) - 1);
                if (!(0 > l)) {
                    var m = fb(l),
                        l = vf(e, (-g - m) / k);
                    Wg(l, h);
                    l = Af(l);
                    if (!c) return l;
                    c = a[0];
                    var n = b[0];
                    a = a[1];
                    b = b[1];
                    var p;
                    n < c && ((p = c), (c = n), (n = p));
                    var q = n - c,
                        t = 1e-6 > xa(q - qa);
                    !t && b < a && ((p = a), (a = b), (b = p));
                    if (t || 1e-6 > q ? (t ? (0 < a + b) ^ (l[1] < (1e-6 > xa(l[0] - c) ? a : b)) : a <= l[1] && l[1] <= b) : (q > qa) ^ (c <= l[0] && l[0] <= n)) return (b = vf(e, (-g + m) / k)), Wg(b, h), [l, Af(b)];
                }
            }
            function e(b, c) {
                var d = g ? a : qa - a,
                    f = 0;
                b < -d ? (f |= 1) : b > d && (f |= 2);
                c < -d ? (f |= 4) : c > d && (f |= 8);
                return f;
            }
            var f = S(a),
                g = 0 < f,
                h = 1e-6 < xa(f);
            return Em(
                c,
                function (a) {
                    var b, f, k, l, m;
                    return {
                        lineStart: function () {
                            l = k = !1;
                            m = 1;
                        },
                        point: function (n, K) {
                            var p = [n, K],
                                q,
                                t = c(n, K),
                                r = g ? (t ? 0 : e(n, K)) : t ? e(n + (0 > n ? qa : -qa), K) : 0;
                            !b && (l = k = t) && a.lineStart();
                            t !== k && ((q = d(b, p)), !q || Mg(b, q) || Mg(p, q)) && ((p[0] += 1e-6), (p[1] += 1e-6), (t = c(p[0], p[1])));
                            if (t !== k) (m = 0), t ? (a.lineStart(), (q = d(p, b)), a.point(q[0], q[1])) : ((q = d(b, p)), a.point(q[0], q[1]), a.lineEnd()), (b = q);
                            else if (h && b && g ^ t) {
                                var w;
                                r & f ||
                                    !(w = d(p, b, !0)) ||
                                    ((m = 0), g ? (a.lineStart(), a.point(w[0][0], w[0][1]), a.point(w[1][0], w[1][1]), a.lineEnd()) : (a.point(w[1][0], w[1][1]), a.lineEnd(), a.lineStart(), a.point(w[0][0], w[0][1])));
                            }
                            !t || (b && Mg(b, p)) || a.point(p[0], p[1]);
                            b = p;
                            k = t;
                            f = r;
                        },
                        lineEnd: function () {
                            k && a.lineEnd();
                            b = null;
                        },
                        clean: function () {
                            return m | ((l && k) << 1);
                        },
                    };
                },
                function (c, d, e, f) {
                    lj(f, a, b, e, c, d);
                },
                g ? [0, -a] : [-qa, a - qa]
            );
        };
    yh.prototype = {
        constructor: yh,
        point: function (a, b) {
            this.stream.point(a, b);
        },
        sphere: function () {
            this.stream.sphere();
        },
        lineStart: function () {
            this.stream.lineStart();
        },
        lineEnd: function () {
            this.stream.lineEnd();
        },
        polygonStart: function () {
            this.stream.polygonStart();
        },
        polygonEnd: function () {
            this.stream.polygonEnd();
        },
    };
    var So = S(30 * Y),
        xk = function (a, b) {
            return +b ? Ro(a, b) : Qo(a);
        },
        To = bg({
            point: function (a, b) {
                this.stream.point(a * Y, b * Y);
            },
        }),
        Pg = function () {
            return Ah(yk).scale(155.424).center([0, 33.6442]);
        },
        Fm = function () {
            return Pg().parallels([29.5, 45.5]).scale(1070).translate([480, 250]).rotate([96, 0]).center([-0.6, 38.7]);
        },
        Ki = zk(function (a) {
            return fb(2 / (1 + a));
        });
    Ki.invert = We(function (a) {
        return 2 * Ob(a / 2);
    });
    var Li = zk(function (a) {
        return (a = sj(a)) && a / R(a);
    });
    Li.invert = We(function (a) {
        return a;
    });
    Xe.invert = function (a, b) {
        return [a, 2 * ge(Am(b)) - Pa];
    };
    Ye.invert = Ye;
    Ch.invert = We(ge);
    Dh.invert = We(Ob);
    Eh.invert = We(function (a) {
        return 2 * ge(a);
    });
    Fh.invert = function (a, b) {
        return [-b, 2 * ge(Am(a)) - Pa];
    };
    he.prototype = Gh.prototype = {
        constructor: he,
        count: function () {
            return this.eachAfter(bp);
        },
        each: function (a) {
            var b,
                c,
                d = [this],
                e,
                f;
            do for (c = d.reverse(), d = []; (b = c.pop()); ) if ((a(b), (b = b.children))) for (e = 0, f = b.length; e < f; ++e) d.push(b[e]);
            while (d.length);
            return this;
        },
        eachAfter: function (a) {
            for (var b, c = [this], d = [], e, f; (b = c.pop()); ) if ((d.push(b), (b = b.children))) for (e = 0, f = b.length; e < f; ++e) c.push(b[e]);
            for (; (b = d.pop()); ) a(b);
            return this;
        },
        eachBefore: function (a) {
            for (var b, c = [this], d; (b = c.pop()); ) if ((a(b), (b = b.children))) for (d = b.length - 1; 0 <= d; --d) c.push(b[d]);
            return this;
        },
        sum: function (a) {
            return this.eachAfter(function (b) {
                for (var c = +a(b.data) || 0, d = b.children, e = d && d.length; 0 <= --e; ) c += d[e].value;
                b.value = c;
            });
        },
        sort: function (a) {
            return this.eachBefore(function (b) {
                b.children && b.children.sort(a);
            });
        },
        path: function (a) {
            var b = this,
                c;
            c = b;
            var d = a;
            if (c !== d) {
                var e = c.ancestors(),
                    f = d.ancestors(),
                    g = null;
                c = e.pop();
                for (d = f.pop(); c === d; ) (g = c), (c = e.pop()), (d = f.pop());
                c = g;
            }
            for (d = [b]; b !== c; ) (b = b.parent), d.push(b);
            for (b = d.length; a !== c; ) d.splice(b, 0, a), (a = a.parent);
            return d;
        },
        ancestors: function () {
            for (var a = this, b = [a]; (a = a.parent); ) b.push(a);
            return b;
        },
        descendants: function () {
            var a = [];
            this.each(function (b) {
                a.push(b);
            });
            return a;
        },
        leaves: function () {
            var a = [];
            this.eachBefore(function (b) {
                b.children || a.push(b);
            });
            return a;
        },
        links: function () {
            var a = this,
                b = [];
            a.each(function (c) {
                c !== a && b.push({ source: c.parent, target: c });
            });
            return b;
        },
        copy: function () {
            return Gh(this).eachBefore(dp);
        },
    };
    var Kk = function (a) {
            for (var b = (a = a.slice()).length, c = null, d = c; b; ) {
                var e = new ep(a[b - 1]),
                    d = d ? (d.next = e) : (c = e);
                a[void 0] = a[--b];
            }
            return Fk({ head: c, tail: d }, []);
        },
        ve = function (a) {
            return function () {
                return a;
            };
        },
        Gm = function (a) {
            a.x0 = Math.round(a.x0);
            a.y0 = Math.round(a.y0);
            a.x1 = Math.round(a.x1);
            a.y1 = Math.round(a.y1);
        },
        Ze = function (a, b, c, d, e) {
            var f = a.children,
                g = -1,
                h = f.length;
            for (d = a.value && (d - b) / a.value; ++g < h; ) (a = f[g]), (a.y0 = c), (a.y1 = e), (a.x0 = b), (a.x1 = b += a.value * d);
        },
        yr = { depth: -1 },
        Hm = {};
    hg.prototype = Object.create(he.prototype);
    var ig = function (a, b, c, d, e) {
            var f = a.children,
                g = -1,
                h = f.length;
            for (e = a.value && (e - c) / a.value; ++g < h; ) (a = f[g]), (a.x0 = b), (a.x1 = d), (a.y0 = c), (a.y1 = c += a.value * e);
        },
        Im = (1 + Math.sqrt(5)) / 2,
        Jm = (function Je(a) {
            function b(c, d, e, f, g) {
                Nk(a, c, d, e, f, g);
            }
            b.ratio = function (a) {
                return Je(1 < (a = +a) ? a : 1);
            };
            return b;
        })(Im),
        zr = (function Un(a) {
            function b(c, d, e, f, g) {
                if ((h = c._squarify) && h.ratio === a)
                    for (var h, k, l, m = -1, n, K = h.length, p = c.value; ++m < K; ) {
                        c = h[m];
                        k = c.children;
                        l = c.value = 0;
                        for (n = k.length; l < n; ++l) c.value += k[l].value;
                        c.dice ? Ze(c, d, e, f, (e += ((g - e) * c.value) / p)) : ig(c, d, e, (d += ((f - d) * c.value) / p), g);
                        p -= c.value;
                    }
                else (c._squarify = h = Nk(a, c, d, e, f, g)), (h.ratio = a);
            }
            b.ratio = function (a) {
                return Un(1 < (a = +a) ? a : 1);
            };
            return b;
        })(Im),
        lp = function (a, b, c) {
            return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
        },
        Ar = [].slice,
        np = {};
    Kh.prototype = Qk.prototype = {
        constructor: Kh,
        defer: function (a) {
            if ("function" !== typeof a) throw Error("invalid callback");
            if (this._call) throw Error("defer after await");
            if (null != this._error) return this;
            var b = Ar.call(arguments, 1);
            b.push(a);
            ++this._waiting;
            this._tasks.push(b);
            Pk(this);
            return this;
        },
        abort: function () {
            null == this._error && Lh(this, Error("abort"));
            return this;
        },
        await: function (a) {
            if ("function" !== typeof a) throw Error("invalid callback");
            if (this._call) throw Error("multiple await");
            this._call = function (b, c) {
                a.apply(null, [b].concat(c));
            };
            jg(this);
            return this;
        },
        awaitAll: function (a) {
            if ("function" !== typeof a) throw Error("invalid callback");
            if (this._call) throw Error("multiple await");
            this._call = a;
            jg(this);
            return this;
        },
    };
    var we = function () {
            return Math.random();
        },
        Br = (function Vn(a) {
            function b(c, d) {
                c = null == c ? 0 : +c;
                d = null == d ? 1 : +d;
                1 === arguments.length ? ((d = c), (c = 0)) : (d -= c);
                return function () {
                    return a() * d + c;
                };
            }
            b.source = Vn;
            return b;
        })(we),
        Km = (function Wn(a) {
            function b(c, d) {
                var e, f;
                c = null == c ? 0 : +c;
                d = null == d ? 1 : +d;
                return function () {
                    var b;
                    if (null != e) (b = e), (e = null);
                    else {
                        do (e = 2 * a() - 1), (b = 2 * a() - 1), (f = e * e + b * b);
                        while (!f || 1 < f);
                    }
                    return c + d * b * Math.sqrt((-2 * Math.log(f)) / f);
                };
            }
            b.source = Wn;
            return b;
        })(we),
        Cr = (function Xn(a) {
            function b() {
                var c = Km.source(a).apply(this, arguments);
                return function () {
                    return Math.exp(c());
                };
            }
            b.source = Xn;
            return b;
        })(we),
        Lm = (function Yn(a) {
            function b(c) {
                return function () {
                    for (var b = 0, d = 0; d < c; ++d) b += a();
                    return b;
                };
            }
            b.source = Yn;
            return b;
        })(we),
        Dr = (function Zn(a) {
            function b(c) {
                var d = Lm.source(a)(c);
                return function () {
                    return d() / c;
                };
            }
            b.source = Zn;
            return b;
        })(we),
        Er = (function P(a) {
            function b(c) {
                return function () {
                    return -Math.log(1 - a()) / c;
                };
            }
            b.source = P;
            return b;
        })(we),
        Mi = function (a, b) {
            function c(a) {
                var b = h.status,
                    f,
                    g;
                if ((g = !b)) g = (g = h.responseType) && "text" !== g ? h.response : h.responseText;
                if (g || (200 <= b && 300 > b) || 304 === b) {
                    if (m)
                        try {
                            f = m.call(d, h);
                        } catch (k) {
                            e.call("error", d, k);
                            return;
                        }
                    else f = h;
                    e.call("load", d, f);
                } else e.call("error", d, a);
            }
            var d,
                e = q("beforesend", "progress", "load", "error"),
                f,
                g = oc(),
                h = new XMLHttpRequest(),
                k = null,
                l = null,
                m,
                n,
                p = 0;
            "undefined" === typeof XDomainRequest || "withCredentials" in h || !/^(http(s)?:)?\/\//.test(a) || (h = new XDomainRequest());
            "onload" in h
                ? (h.onload = h.onerror = h.ontimeout = c)
                : (h.onreadystatechange = function (a) {
                      3 < h.readyState && c(a);
                  });
            h.onprogress = function (a) {
                e.call("progress", d, a);
            };
            d = {
                header: function (a, b) {
                    a = (a + "").toLowerCase();
                    if (2 > arguments.length) return g.get(a);
                    null == b ? g.remove(a) : g.set(a, b + "");
                    return d;
                },
                mimeType: function (a) {
                    if (!arguments.length) return f;
                    f = null == a ? null : a + "";
                    return d;
                },
                responseType: function (a) {
                    if (!arguments.length) return n;
                    n = a;
                    return d;
                },
                timeout: function (a) {
                    if (!arguments.length) return p;
                    p = +a;
                    return d;
                },
                user: function (a) {
                    return 1 > arguments.length ? k : ((k = null == a ? null : a + ""), d);
                },
                password: function (a) {
                    return 1 > arguments.length ? l : ((l = null == a ? null : a + ""), d);
                },
                response: function (a) {
                    m = a;
                    return d;
                },
                get: function (a, b) {
                    return d.send("GET", a, b);
                },
                post: function (a, b) {
                    return d.send("POST", a, b);
                },
                send: function (b, c, m) {
                    h.open(b, a, !0, k, l);
                    null == f || g.has("accept") || g.set("accept", f + ",*/*");
                    h.setRequestHeader &&
                        g.each(function (a, b) {
                            h.setRequestHeader(b, a);
                        });
                    null != f && h.overrideMimeType && h.overrideMimeType(f);
                    null != n && (h.responseType = n);
                    0 < p && (h.timeout = p);
                    null == m && "function" === typeof c && ((m = c), (c = null));
                    null != m && 1 === m.length && (m = op(m));
                    if (null != m)
                        d.on("error", m).on("load", function (a) {
                            m(null, a);
                        });
                    e.call("beforesend", d, h);
                    h.send(null == c ? null : c);
                    return d;
                },
                abort: function () {
                    h.abort();
                    return d;
                },
                on: function () {
                    var a = e.on.apply(e, arguments);
                    return a === e ? d : a;
                },
            };
            if (null != b) {
                if ("function" !== typeof b) throw Error("invalid callback: " + b);
                return d.get(b);
            }
            return d;
        },
        Qg = function (a, b) {
            return function (c, d) {
                var e = Mi(c).mimeType(a).response(b);
                if (null != d) {
                    if ("function" !== typeof d) throw Error("invalid callback: " + d);
                    return e.get(d);
                }
                return e;
            };
        },
        Fr = Qg("text/html", function (a) {
            return document.createRange().createContextualFragment(a.responseText);
        }),
        Gr = Qg("application/json", function (a) {
            return JSON.parse(a.responseText);
        }),
        Hr = Qg("text/plain", function (a) {
            return a.responseText;
        }),
        Ir = Qg("application/xml", function (a) {
            a = a.responseXML;
            if (!a) throw Error("parse error");
            return a;
        }),
        Mm = function (a, b) {
            return function (c, d, e) {
                3 > arguments.length && ((e = d), (d = null));
                var f = Mi(c).mimeType(a);
                f.row = function (a) {
                    return arguments.length ? f.response(pp(b, (d = a))) : d;
                };
                f.row(d);
                return e ? f.get(e) : f;
            };
        },
        Jr = Mm("text/csv", um),
        Kr = Mm("text/tab-separated-values", vm),
        Nm = Array.prototype,
        Rh = Nm.map,
        Yc = Nm.slice,
        Nh = { name: "implicit" },
        Qh = function (a) {
            return function () {
                return a;
            };
        },
        Tk = function (a) {
            return +a;
        },
        Sk = [0, 1],
        dl = function (a, b) {
            a = a.slice();
            var c = 0,
                d = a.length - 1,
                e = a[c],
                f = a[d],
                g;
            f < e && ((g = c), (c = d), (d = g), (g = e), (e = f), (f = g));
            a[c] = b.floor(e);
            a[d] = b.ceil(f);
            return a;
        },
        Uh = new Date(),
        Vh = new Date(),
        Gd = gb(
            function () {},
            function (a, b) {
                a.setTime(+a + b);
            },
            function (a, b) {
                return b - a;
            }
        );
    Gd.every = function (a) {
        a = Math.floor(a);
        return isFinite(a) && 0 < a
            ? 1 < a
                ? gb(
                      function (b) {
                          b.setTime(Math.floor(b / a) * a);
                      },
                      function (b, c) {
                          b.setTime(+b + c * a);
                      },
                      function (b, c) {
                          return (c - b) / a;
                      }
                  )
                : Gd
            : null;
    };
    var Om = Gd.range,
        sf = gb(
            function (a) {
                a.setTime(1e3 * Math.floor(a / 1e3));
            },
            function (a, b) {
                a.setTime(+a + 1e3 * b);
            },
            function (a, b) {
                return (b - a) / 1e3;
            },
            function (a) {
                return a.getUTCSeconds();
            }
        ),
        Pm = sf.range,
        Ni = gb(
            function (a) {
                a.setTime(6e4 * Math.floor(a / 6e4));
            },
            function (a, b) {
                a.setTime(+a + 6e4 * b);
            },
            function (a, b) {
                return (b - a) / 6e4;
            },
            function (a) {
                return a.getMinutes();
            }
        ),
        Lr = Ni.range,
        Oi = gb(
            function (a) {
                var b = (6e4 * a.getTimezoneOffset()) % 36e5;
                0 > b && (b += 36e5);
                a.setTime(36e5 * Math.floor((+a - b) / 36e5) + b);
            },
            function (a, b) {
                a.setTime(+a + 36e5 * b);
            },
            function (a, b) {
                return (b - a) / 36e5;
            },
            function (a) {
                return a.getHours();
            }
        ),
        Mr = Oi.range,
        mg = gb(
            function (a) {
                a.setHours(0, 0, 0, 0);
            },
            function (a, b) {
                a.setDate(a.getDate() + b);
            },
            function (a, b) {
                return (b - a - 6e4 * (b.getTimezoneOffset() - a.getTimezoneOffset())) / 864e5;
            },
            function (a) {
                return a.getDate() - 1;
            }
        ),
        Nr = mg.range,
        df = Bd(0),
        Yh = Bd(1),
        Qm = Bd(2),
        Rm = Bd(3),
        Sm = Bd(4),
        Tm = Bd(5),
        Um = Bd(6),
        Vm = df.range,
        Or = Yh.range,
        Pr = Qm.range,
        Qr = Rm.range,
        Rr = Sm.range,
        Sr = Tm.range,
        Tr = Um.range,
        Pi = gb(
            function (a) {
                a.setDate(1);
                a.setHours(0, 0, 0, 0);
            },
            function (a, b) {
                a.setMonth(a.getMonth() + b);
            },
            function (a, b) {
                return b.getMonth() - a.getMonth() + 12 * (b.getFullYear() - a.getFullYear());
            },
            function (a) {
                return a.getMonth();
            }
        ),
        Ur = Pi.range,
        Dd = gb(
            function (a) {
                a.setMonth(0, 1);
                a.setHours(0, 0, 0, 0);
            },
            function (a, b) {
                a.setFullYear(a.getFullYear() + b);
            },
            function (a, b) {
                return b.getFullYear() - a.getFullYear();
            },
            function (a) {
                return a.getFullYear();
            }
        );
    Dd.every = function (a) {
        return isFinite((a = Math.floor(a))) && 0 < a
            ? gb(
                  function (b) {
                      b.setFullYear(Math.floor(b.getFullYear() / a) * a);
                      b.setMonth(0, 1);
                      b.setHours(0, 0, 0, 0);
                  },
                  function (b, c) {
                      b.setFullYear(b.getFullYear() + c * a);
                  }
              )
            : null;
    };
    var Vr = Dd.range,
        Qi = gb(
            function (a) {
                a.setUTCSeconds(0, 0);
            },
            function (a, b) {
                a.setTime(+a + 6e4 * b);
            },
            function (a, b) {
                return (b - a) / 6e4;
            },
            function (a) {
                return a.getUTCMinutes();
            }
        ),
        Wr = Qi.range,
        Ri = gb(
            function (a) {
                a.setUTCMinutes(0, 0, 0);
            },
            function (a, b) {
                a.setTime(+a + 36e5 * b);
            },
            function (a, b) {
                return (b - a) / 36e5;
            },
            function (a) {
                return a.getUTCHours();
            }
        ),
        Xr = Ri.range,
        ng = gb(
            function (a) {
                a.setUTCHours(0, 0, 0, 0);
            },
            function (a, b) {
                a.setUTCDate(a.getUTCDate() + b);
            },
            function (a, b) {
                return (b - a) / 864e5;
            },
            function (a) {
                return a.getUTCDate() - 1;
            }
        ),
        Yr = ng.range,
        ef = Cd(0),
        Zh = Cd(1),
        Wm = Cd(2),
        Xm = Cd(3),
        Ym = Cd(4),
        Zm = Cd(5),
        $m = Cd(6),
        an = ef.range,
        Zr = Zh.range,
        $r = Wm.range,
        as = Xm.range,
        bs = Ym.range,
        cs = Zm.range,
        ds = $m.range,
        Si = gb(
            function (a) {
                a.setUTCDate(1);
                a.setUTCHours(0, 0, 0, 0);
            },
            function (a, b) {
                a.setUTCMonth(a.getUTCMonth() + b);
            },
            function (a, b) {
                return b.getUTCMonth() - a.getUTCMonth() + 12 * (b.getUTCFullYear() - a.getUTCFullYear());
            },
            function (a) {
                return a.getUTCMonth();
            }
        ),
        es = Si.range,
        Ed = gb(
            function (a) {
                a.setUTCMonth(0, 1);
                a.setUTCHours(0, 0, 0, 0);
            },
            function (a, b) {
                a.setUTCFullYear(a.getUTCFullYear() + b);
            },
            function (a, b) {
                return b.getUTCFullYear() - a.getUTCFullYear();
            },
            function (a) {
                return a.getUTCFullYear();
            }
        );
    Ed.every = function (a) {
        return isFinite((a = Math.floor(a))) && 0 < a
            ? gb(
                  function (b) {
                      b.setUTCFullYear(Math.floor(b.getUTCFullYear() / a) * a);
                      b.setUTCMonth(0, 1);
                      b.setUTCHours(0, 0, 0, 0);
                  },
                  function (b, c) {
                      b.setUTCFullYear(b.getUTCFullYear() + c * a);
                  }
              )
            : null;
    };
    var fs = Ed.range,
        il = { "-": "", _: " ", 0: "0" },
        $b = /^\s*\d+/,
        lq = /^%/,
        kq = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g,
        je;
    ol({
        dateTime: "%x, %X",
        date: "%-m/%-d/%Y",
        time: "%-I:%M:%S %p",
        periods: ["AM", "PM"],
        days: "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),
        shortDays: "Sun Mon Tue Wed Thu Fri Sat".split(" "),
        months: "January February March April May June July August September October November December".split(" "),
        shortMonths: "Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),
    });
    var gs = Date.prototype.toISOString ? mq : b.utcFormat("%Y-%m-%dT%H:%M:%S.%LZ"),
        hs = +new Date("2000-01-01T00:00:00.000Z") ? nq : b.utcParse("%Y-%m-%dT%H:%M:%S.%LZ"),
        ad = function (a) {
            return a.match(/.{6}/g).map(function (a) {
                return "#" + a;
            });
        },
        is = ad("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),
        js = ad("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6"),
        ks = ad("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9"),
        ls = ad("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5"),
        ms = Eg(fa(300, 0.5, 0), fa(-240, 0.5, 1)),
        ns = Eg(fa(-100, 0.75, 0.35), fa(80, 1.5, 0.8)),
        os = Eg(fa(260, 0.75, 0.35), fa(80, 1.5, 0.8)),
        Rg = fa(),
        ps = og(
            ad(
                "44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"
            )
        ),
        qs = og(
            ad(
                "00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"
            )
        ),
        rs = og(
            ad(
                "00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"
            )
        ),
        ss = og(
            ad(
                "0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"
            )
        ),
        ka = function (a) {
            return function () {
                return a;
            };
        },
        bn = Math.abs,
        tb = Math.atan2,
        Hd = Math.cos,
        vq = Math.max,
        Ti = Math.min,
        uc = Math.sin,
        ke = Math.sqrt,
        bd = Math.PI,
        pg = bd / 2,
        cd = 2 * bd;
    rl.prototype = {
        areaStart: function () {
            this._line = 0;
        },
        areaEnd: function () {
            this._line = NaN;
        },
        lineStart: function () {
            this._point = 0;
        },
        lineEnd: function () {
            (this._line || (0 !== this._line && 1 === this._point)) && this._context.closePath();
            this._line = 1 - this._line;
        },
        point: function (a, b) {
            a = +a;
            b = +b;
            switch (this._point) {
                case 0:
                    this._point = 1;
                    this._line ? this._context.lineTo(a, b) : this._context.moveTo(a, b);
                    break;
                case 1:
                    this._point = 2;
                default:
                    this._context.lineTo(a, b);
            }
        },
    };
    var Sg = function (a) {
            return new rl(a);
        },
        Ui = function () {
            function a(h) {
                var k,
                    l = h.length,
                    m,
                    n = !1,
                    p;
                null == e && (g = f((p = Nc())));
                for (k = 0; k <= l; ++k) !(k < l && d((m = h[k]), k, h)) === n && ((n = !n) ? g.lineStart() : g.lineEnd()), n && g.point(+b(m, k, h), +c(m, k, h));
                if (p) return (g = null), p + "" || null;
            }
            var b = bi,
                c = ci,
                d = ka(!0),
                e = null,
                f = Sg,
                g = null;
            a.x = function (c) {
                return arguments.length ? ((b = "function" === typeof c ? c : ka(+c)), a) : b;
            };
            a.y = function (b) {
                return arguments.length ? ((c = "function" === typeof b ? b : ka(+b)), a) : c;
            };
            a.defined = function (b) {
                return arguments.length ? ((d = "function" === typeof b ? b : ka(!!b)), a) : d;
            };
            a.curve = function (b) {
                return arguments.length ? ((f = b), null != e && (g = f(e)), a) : f;
            };
            a.context = function (b) {
                return arguments.length ? (null == b ? (e = g = null) : (g = f((e = b))), a) : e;
            };
            return a;
        },
        cn = function () {
            function a(b) {
                var m,
                    n,
                    p,
                    q = b.length,
                    t,
                    r = !1,
                    w,
                    u = Array(q),
                    v = Array(q);
                null == h && (l = k((w = Nc())));
                for (m = 0; m <= q; ++m) {
                    if (!(m < q && g((t = b[m]), m, b)) === r)
                        if ((r = !r)) (n = m), l.areaStart(), l.lineStart();
                        else {
                            l.lineEnd();
                            l.lineStart();
                            for (p = m - 1; p >= n; --p) l.point(u[p], v[p]);
                            l.lineEnd();
                            l.areaEnd();
                        }
                    r && ((u[m] = +c(t, m, b)), (v[m] = +e(t, m, b)), l.point(d ? +d(t, m, b) : u[m], f ? +f(t, m, b) : v[m]));
                }
                if (w) return (l = null), w + "" || null;
            }
            function b() {
                return Ui().defined(g).curve(k).context(h);
            }
            var c = bi,
                d = null,
                e = ka(0),
                f = ci,
                g = ka(!0),
                h = null,
                k = Sg,
                l = null;
            a.x = function (b) {
                return arguments.length ? ((c = "function" === typeof b ? b : ka(+b)), (d = null), a) : c;
            };
            a.x0 = function (b) {
                return arguments.length ? ((c = "function" === typeof b ? b : ka(+b)), a) : c;
            };
            a.x1 = function (b) {
                return arguments.length ? ((d = null == b ? null : "function" === typeof b ? b : ka(+b)), a) : d;
            };
            a.y = function (b) {
                return arguments.length ? ((e = "function" === typeof b ? b : ka(+b)), (f = null), a) : e;
            };
            a.y0 = function (b) {
                return arguments.length ? ((e = "function" === typeof b ? b : ka(+b)), a) : e;
            };
            a.y1 = function (b) {
                return arguments.length ? ((f = null == b ? null : "function" === typeof b ? b : ka(+b)), a) : f;
            };
            a.lineX0 = a.lineY0 = function () {
                return b().x(c).y(e);
            };
            a.lineY1 = function () {
                return b().x(c).y(f);
            };
            a.lineX1 = function () {
                return b().x(d).y(e);
            };
            a.defined = function (b) {
                return arguments.length ? ((g = "function" === typeof b ? b : ka(!!b)), a) : g;
            };
            a.curve = function (b) {
                return arguments.length ? ((k = b), null != h && (l = k(h)), a) : k;
            };
            a.context = function (b) {
                return arguments.length ? (null == b ? (h = l = null) : (l = k((h = b))), a) : h;
            };
            return a;
        },
        ts = function (a, b) {
            return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
        },
        us = function (a) {
            return a;
        },
        dn = di(Sg);
    sl.prototype = {
        areaStart: function () {
            this._curve.areaStart();
        },
        areaEnd: function () {
            this._curve.areaEnd();
        },
        lineStart: function () {
            this._curve.lineStart();
        },
        lineEnd: function () {
            this._curve.lineEnd();
        },
        point: function (a, b) {
            this._curve.point(b * Math.sin(a), b * -Math.cos(a));
        },
    };
    var fi = Array.prototype.slice,
        rg = function (a, b) {
            return [(b = +b) * Math.cos((a -= Math.PI / 2)), b * Math.sin(a)];
        },
        Vi = {
            draw: function (a, b) {
                var c = Math.sqrt(b / bd);
                a.moveTo(c, 0);
                a.arc(0, 0, c, 0, cd);
            },
        },
        en = {
            draw: function (a, b) {
                var c = Math.sqrt(b / 5) / 2;
                a.moveTo(-3 * c, -c);
                a.lineTo(-c, -c);
                a.lineTo(-c, -3 * c);
                a.lineTo(c, -3 * c);
                a.lineTo(c, -c);
                a.lineTo(3 * c, -c);
                a.lineTo(3 * c, c);
                a.lineTo(c, c);
                a.lineTo(c, 3 * c);
                a.lineTo(-c, 3 * c);
                a.lineTo(-c, c);
                a.lineTo(-3 * c, c);
                a.closePath();
            },
        },
        fn = Math.sqrt(1 / 3),
        vs = 2 * fn,
        gn = {
            draw: function (a, b) {
                var c = Math.sqrt(b / vs),
                    d = c * fn;
                a.moveTo(0, -c);
                a.lineTo(d, 0);
                a.lineTo(0, c);
                a.lineTo(-d, 0);
                a.closePath();
            },
        },
        hn = Math.sin(bd / 10) / Math.sin((7 * bd) / 10),
        ws = Math.sin(cd / 10) * hn,
        xs = -Math.cos(cd / 10) * hn,
        jn = {
            draw: function (a, b) {
                var c = Math.sqrt(0.8908130915292852 * b),
                    d = ws * c,
                    e = xs * c;
                a.moveTo(0, -c);
                a.lineTo(d, e);
                for (var f = 1; 5 > f; ++f) {
                    var g = (cd * f) / 5,
                        h = Math.cos(g),
                        g = Math.sin(g);
                    a.lineTo(g * c, -h * c);
                    a.lineTo(h * d - g * e, g * d + h * e);
                }
                a.closePath();
            },
        },
        kn = {
            draw: function (a, b) {
                var c = Math.sqrt(b),
                    d = -c / 2;
                a.rect(d, d, c, c);
            },
        },
        Wi = Math.sqrt(3),
        ln = {
            draw: function (a, b) {
                var c = -Math.sqrt(b / (3 * Wi));
                a.moveTo(0, 2 * c);
                a.lineTo(-Wi * c, -c);
                a.lineTo(Wi * c, -c);
                a.closePath();
            },
        },
        ac = Math.sqrt(3) / 2,
        Xi = 1 / Math.sqrt(12),
        ys = 3 * (Xi / 2 + 1),
        mn = {
            draw: function (a, b) {
                var c = Math.sqrt(b / ys),
                    d = c / 2,
                    e = c * Xi,
                    c = c * Xi + c,
                    f = -d;
                a.moveTo(d, e);
                a.lineTo(d, c);
                a.lineTo(f, c);
                a.lineTo(-0.5 * d - ac * e, ac * d + -0.5 * e);
                a.lineTo(-0.5 * d - ac * c, ac * d + -0.5 * c);
                a.lineTo(-0.5 * f - ac * c, ac * f + -0.5 * c);
                a.lineTo(-0.5 * d + ac * e, -0.5 * e - ac * d);
                a.lineTo(-0.5 * d + ac * c, -0.5 * c - ac * d);
                a.lineTo(-0.5 * f + ac * c, -0.5 * c - ac * f);
                a.closePath();
            },
        },
        zs = [Vi, en, gn, kn, jn, ln, mn],
        dd = function () {};
    tg.prototype = {
        areaStart: function () {
            this._line = 0;
        },
        areaEnd: function () {
            this._line = NaN;
        },
        lineStart: function () {
            this._x0 = this._x1 = this._y0 = this._y1 = NaN;
            this._point = 0;
        },
        lineEnd: function () {
            switch (this._point) {
                case 3:
                    sg(this, this._x1, this._y1);
                case 2:
                    this._context.lineTo(this._x1, this._y1);
            }
            (this._line || (0 !== this._line && 1 === this._point)) && this._context.closePath();
            this._line = 1 - this._line;
        },
        point: function (a, b) {
            a = +a;
            b = +b;
            switch (this._point) {
                case 0:
                    this._point = 1;
                    this._line ? this._context.lineTo(a, b) : this._context.moveTo(a, b);
                    break;
                case 1:
                    this._point = 2;
                    break;
                case 2:
                    (this._point = 3), this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
                default:
                    sg(this, a, b);
            }
            this._x0 = this._x1;
            this._x1 = a;
            this._y0 = this._y1;
            this._y1 = b;
        },
    };
    tl.prototype = {
        areaStart: dd,
        areaEnd: dd,
        lineStart: function () {
            this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
            this._point = 0;
        },
        lineEnd: function () {
            switch (this._point) {
                case 1:
                    this._context.moveTo(this._x2, this._y2);
                    this._context.closePath();
                    break;
                case 2:
                    this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
                    this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
                    this._context.closePath();
                    break;
                case 3:
                    this.point(this._x2, this._y2), this.point(this._x3, this._y3), this.point(this._x4, this._y4);
            }
        },
        point: function (a, b) {
            a = +a;
            b = +b;
            switch (this._point) {
                case 0:
                    this._point = 1;
                    this._x2 = a;
                    this._y2 = b;
                    break;
                case 1:
                    this._point = 2;
                    this._x3 = a;
                    this._y3 = b;
                    break;
                case 2:
                    this._point = 3;
                    this._x4 = a;
                    this._y4 = b;
                    this._context.moveTo((this._x0 + 4 * this._x1 + a) / 6, (this._y0 + 4 * this._y1 + b) / 6);
                    break;
                default:
                    sg(this, a, b);
            }
            this._x0 = this._x1;
            this._x1 = a;
            this._y0 = this._y1;
            this._y1 = b;
        },
    };
    ul.prototype = {
        areaStart: function () {
            this._line = 0;
        },
        areaEnd: function () {
            this._line = NaN;
        },
        lineStart: function () {
            this._x0 = this._x1 = this._y0 = this._y1 = NaN;
            this._point = 0;
        },
        lineEnd: function () {
            (this._line || (0 !== this._line && 3 === this._point)) && this._context.closePath();
            this._line = 1 - this._line;
        },
        point: function (a, b) {
            a = +a;
            b = +b;
            switch (this._point) {
                case 0:
                    this._point = 1;
                    break;
                case 1:
                    this._point = 2;
                    break;
                case 2:
                    this._point = 3;
                    var c = (this._x0 + 4 * this._x1 + a) / 6,
                        d = (this._y0 + 4 * this._y1 + b) / 6;
                    this._line ? this._context.lineTo(c, d) : this._context.moveTo(c, d);
                    break;
                case 3:
                    this._point = 4;
                default:
                    sg(this, a, b);
            }
            this._x0 = this._x1;
            this._x1 = a;
            this._y0 = this._y1;
            this._y1 = b;
        },
    };
    vl.prototype = {
        lineStart: function () {
            this._x = [];
            this._y = [];
            this._basis.lineStart();
        },
        lineEnd: function () {
            var a = this._x,
                b = this._y,
                c = a.length - 1;
            if (0 < c) for (var d = a[0], e = b[0], f = a[c] - d, g = b[c] - e, h = -1, k; ++h <= c; ) (k = h / c), this._basis.point(this._beta * a[h] + (1 - this._beta) * (d + k * f), this._beta * b[h] + (1 - this._beta) * (e + k * g));
            this._x = this._y = null;
            this._basis.lineEnd();
        },
        point: function (a, b) {
            this._x.push(+a);
            this._y.push(+b);
        },
    };
    var As = (function ud(a) {
        function b(c) {
            return 1 === a ? new tg(c) : new vl(c, a);
        }
        b.beta = function (a) {
            return ud(+a);
        };
        return b;
    })(0.85);
    gi.prototype = {
        areaStart: function () {
            this._line = 0;
        },
        areaEnd: function () {
            this._line = NaN;
        },
        lineStart: function () {
            this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
            this._point = 0;
        },
        lineEnd: function () {
            switch (this._point) {
                case 2:
                    this._context.lineTo(this._x2, this._y2);
                    break;
                case 3:
                    ug(this, this._x1, this._y1);
            }
            (this._line || (0 !== this._line && 1 === this._point)) && this._context.closePath();
            this._line = 1 - this._line;
        },
        point: function (a, b) {
            a = +a;
            b = +b;
            switch (this._point) {
                case 0:
                    this._point = 1;
                    this._line ? this._context.lineTo(a, b) : this._context.moveTo(a, b);
                    break;
                case 1:
                    this._point = 2;
                    this._x1 = a;
                    this._y1 = b;
                    break;
                case 2:
                    this._point = 3;
                default:
                    ug(this, a, b);
            }
            this._x0 = this._x1;
            this._x1 = this._x2;
            this._x2 = a;
            this._y0 = this._y1;
            this._y1 = this._y2;
            this._y2 = b;
        },
    };
    var Bs = (function $n(a) {
        function b(c) {
            return new gi(c, a);
        }
        b.tension = function (a) {
            return $n(+a);
        };
        return b;
    })(0);
    hi.prototype = {
        areaStart: dd,
        areaEnd: dd,
        lineStart: function () {
            this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
            this._point = 0;
        },
        lineEnd: function () {
            switch (this._point) {
                case 1:
                    this._context.moveTo(this._x3, this._y3);
                    this._context.closePath();
                    break;
                case 2:
                    this._context.lineTo(this._x3, this._y3);
                    this._context.closePath();
                    break;
                case 3:
                    this.point(this._x3, this._y3), this.point(this._x4, this._y4), this.point(this._x5, this._y5);
            }
        },
        point: function (a, b) {
            a = +a;
            b = +b;
            switch (this._point) {
                case 0:
                    this._point = 1;
                    this._x3 = a;
                    this._y3 = b;
                    break;
                case 1:
                    this._point = 2;
                    this._context.moveTo((this._x4 = a), (this._y4 = b));
                    break;
                case 2:
                    this._point = 3;
                    this._x5 = a;
                    this._y5 = b;
                    break;
                default:
                    ug(this, a, b);
            }
            this._x0 = this._x1;
            this._x1 = this._x2;
            this._x2 = a;
            this._y0 = this._y1;
            this._y1 = this._y2;
            this._y2 = b;
        },
    };
    var Cs = (function ao(a) {
        function b(c) {
            return new hi(c, a);
        }
        b.tension = function (a) {
            return ao(+a);
        };
        return b;
    })(0);
    ii.prototype = {
        areaStart: function () {
            this._line = 0;
        },
        areaEnd: function () {
            this._line = NaN;
        },
        lineStart: function () {
            this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
            this._point = 0;
        },
        lineEnd: function () {
            (this._line || (0 !== this._line && 3 === this._point)) && this._context.closePath();
            this._line = 1 - this._line;
        },
        point: function (a, b) {
            a = +a;
            b = +b;
            switch (this._point) {
                case 0:
                    this._point = 1;
                    break;
                case 1:
                    this._point = 2;
                    break;
                case 2:
                    this._point = 3;
                    this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
                    break;
                case 3:
                    this._point = 4;
                default:
                    ug(this, a, b);
            }
            this._x0 = this._x1;
            this._x1 = this._x2;
            this._x2 = a;
            this._y0 = this._y1;
            this._y1 = this._y2;
            this._y2 = b;
        },
    };
    var Ds = (function bo(a) {
        function b(c) {
            return new ii(c, a);
        }
        b.tension = function (a) {
            return bo(+a);
        };
        return b;
    })(0);
    wl.prototype = {
        areaStart: function () {
            this._line = 0;
        },
        areaEnd: function () {
            this._line = NaN;
        },
        lineStart: function () {
            this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
            this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
        },
        lineEnd: function () {
            switch (this._point) {
                case 2:
                    this._context.lineTo(this._x2, this._y2);
                    break;
                case 3:
                    this.point(this._x2, this._y2);
            }
            (this._line || (0 !== this._line && 1 === this._point)) && this._context.closePath();
            this._line = 1 - this._line;
        },
        point: function (a, b) {
            a = +a;
            b = +b;
            if (this._point) {
                var c = this._x2 - a,
                    d = this._y2 - b;
                this._l23_a = Math.sqrt((this._l23_2a = Math.pow(c * c + d * d, this._alpha)));
            }
            switch (this._point) {
                case 0:
                    this._point = 1;
                    this._line ? this._context.lineTo(a, b) : this._context.moveTo(a, b);
                    break;
                case 1:
                    this._point = 2;
                    break;
                case 2:
                    this._point = 3;
                default:
                    ji(this, a, b);
            }
            this._l01_a = this._l12_a;
            this._l12_a = this._l23_a;
            this._l01_2a = this._l12_2a;
            this._l12_2a = this._l23_2a;
            this._x0 = this._x1;
            this._x1 = this._x2;
            this._x2 = a;
            this._y0 = this._y1;
            this._y1 = this._y2;
            this._y2 = b;
        },
    };
    var Es = (function co(a) {
        function b(c) {
            return a ? new wl(c, a) : new gi(c, 0);
        }
        b.alpha = function (a) {
            return co(+a);
        };
        return b;
    })(0.5);
    xl.prototype = {
        areaStart: dd,
        areaEnd: dd,
        lineStart: function () {
            this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
            this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
        },
        lineEnd: function () {
            switch (this._point) {
                case 1:
                    this._context.moveTo(this._x3, this._y3);
                    this._context.closePath();
                    break;
                case 2:
                    this._context.lineTo(this._x3, this._y3);
                    this._context.closePath();
                    break;
                case 3:
                    this.point(this._x3, this._y3), this.point(this._x4, this._y4), this.point(this._x5, this._y5);
            }
        },
        point: function (a, b) {
            a = +a;
            b = +b;
            if (this._point) {
                var c = this._x2 - a,
                    d = this._y2 - b;
                this._l23_a = Math.sqrt((this._l23_2a = Math.pow(c * c + d * d, this._alpha)));
            }
            switch (this._point) {
                case 0:
                    this._point = 1;
                    this._x3 = a;
                    this._y3 = b;
                    break;
                case 1:
                    this._point = 2;
                    this._context.moveTo((this._x4 = a), (this._y4 = b));
                    break;
                case 2:
                    this._point = 3;
                    this._x5 = a;
                    this._y5 = b;
                    break;
                default:
                    ji(this, a, b);
            }
            this._l01_a = this._l12_a;
            this._l12_a = this._l23_a;
            this._l01_2a = this._l12_2a;
            this._l12_2a = this._l23_2a;
            this._x0 = this._x1;
            this._x1 = this._x2;
            this._x2 = a;
            this._y0 = this._y1;
            this._y1 = this._y2;
            this._y2 = b;
        },
    };
    var Fs = (function eo(a) {
        function b(c) {
            return a ? new xl(c, a) : new hi(c, 0);
        }
        b.alpha = function (a) {
            return eo(+a);
        };
        return b;
    })(0.5);
    yl.prototype = {
        areaStart: function () {
            this._line = 0;
        },
        areaEnd: function () {
            this._line = NaN;
        },
        lineStart: function () {
            this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
            this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
        },
        lineEnd: function () {
            (this._line || (0 !== this._line && 3 === this._point)) && this._context.closePath();
            this._line = 1 - this._line;
        },
        point: function (a, b) {
            a = +a;
            b = +b;
            if (this._point) {
                var c = this._x2 - a,
                    d = this._y2 - b;
                this._l23_a = Math.sqrt((this._l23_2a = Math.pow(c * c + d * d, this._alpha)));
            }
            switch (this._point) {
                case 0:
                    this._point = 1;
                    break;
                case 1:
                    this._point = 2;
                    break;
                case 2:
                    this._point = 3;
                    this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
                    break;
                case 3:
                    this._point = 4;
                default:
                    ji(this, a, b);
            }
            this._l01_a = this._l12_a;
            this._l12_a = this._l23_a;
            this._l01_2a = this._l12_2a;
            this._l12_2a = this._l23_2a;
            this._x0 = this._x1;
            this._x1 = this._x2;
            this._x2 = a;
            this._y0 = this._y1;
            this._y1 = this._y2;
            this._y2 = b;
        },
    };
    var Gs = (function K(a) {
        function b(c) {
            return a ? new yl(c, a) : new ii(c, 0);
        }
        b.alpha = function (a) {
            return K(+a);
        };
        return b;
    })(0.5);
    zl.prototype = {
        areaStart: dd,
        areaEnd: dd,
        lineStart: function () {
            this._point = 0;
        },
        lineEnd: function () {
            this._point && this._context.closePath();
        },
        point: function (a, b) {
            a = +a;
            b = +b;
            this._point ? this._context.lineTo(a, b) : ((this._point = 1), this._context.moveTo(a, b));
        },
    };
    vg.prototype = {
        areaStart: function () {
            this._line = 0;
        },
        areaEnd: function () {
            this._line = NaN;
        },
        lineStart: function () {
            this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
            this._point = 0;
        },
        lineEnd: function () {
            switch (this._point) {
                case 2:
                    this._context.lineTo(this._x1, this._y1);
                    break;
                case 3:
                    ki(this, this._t0, Bl(this, this._t0));
            }
            (this._line || (0 !== this._line && 1 === this._point)) && this._context.closePath();
            this._line = 1 - this._line;
        },
        point: function (a, b) {
            var c = NaN;
            a = +a;
            b = +b;
            if (a !== this._x1 || b !== this._y1) {
                switch (this._point) {
                    case 0:
                        this._point = 1;
                        this._line ? this._context.lineTo(a, b) : this._context.moveTo(a, b);
                        break;
                    case 1:
                        this._point = 2;
                        break;
                    case 2:
                        this._point = 3;
                        ki(this, Bl(this, (c = Al(this, a, b))), c);
                        break;
                    default:
                        ki(this, this._t0, (c = Al(this, a, b)));
                }
                this._x0 = this._x1;
                this._x1 = a;
                this._y0 = this._y1;
                this._y1 = b;
                this._t0 = c;
            }
        },
    };
    (Cl.prototype = Object.create(vg.prototype)).point = function (a, b) {
        vg.prototype.point.call(this, b, a);
    };
    Dl.prototype = {
        moveTo: function (a, b) {
            this._context.moveTo(b, a);
        },
        closePath: function () {
            this._context.closePath();
        },
        lineTo: function (a, b) {
            this._context.lineTo(b, a);
        },
        bezierCurveTo: function (a, b, c, d, e, f) {
            this._context.bezierCurveTo(b, a, d, c, f, e);
        },
    };
    El.prototype = {
        areaStart: function () {
            this._line = 0;
        },
        areaEnd: function () {
            this._line = NaN;
        },
        lineStart: function () {
            this._x = [];
            this._y = [];
        },
        lineEnd: function () {
            var a = this._x,
                b = this._y,
                c = a.length;
            if (c)
                if ((this._line ? this._context.lineTo(a[0], b[0]) : this._context.moveTo(a[0], b[0]), 2 === c)) this._context.lineTo(a[1], b[1]);
                else for (var d = Fl(a), e = Fl(b), f = 0, g = 1; g < c; ++f, ++g) this._context.bezierCurveTo(d[0][f], e[0][f], d[1][f], e[1][f], a[g], b[g]);
            (this._line || (0 !== this._line && 1 === c)) && this._context.closePath();
            this._line = 1 - this._line;
            this._x = this._y = null;
        },
        point: function (a, b) {
            this._x.push(+a);
            this._y.push(+b);
        },
    };
    wg.prototype = {
        areaStart: function () {
            this._line = 0;
        },
        areaEnd: function () {
            this._line = NaN;
        },
        lineStart: function () {
            this._x = this._y = NaN;
            this._point = 0;
        },
        lineEnd: function () {
            0 < this._t && 1 > this._t && 2 === this._point && this._context.lineTo(this._x, this._y);
            (this._line || (0 !== this._line && 1 === this._point)) && this._context.closePath();
            0 <= this._line && ((this._t = 1 - this._t), (this._line = 1 - this._line));
        },
        point: function (a, b) {
            a = +a;
            b = +b;
            switch (this._point) {
                case 0:
                    this._point = 1;
                    this._line ? this._context.lineTo(a, b) : this._context.moveTo(a, b);
                    break;
                case 1:
                    this._point = 2;
                default:
                    if (0 >= this._t) this._context.lineTo(this._x, b), this._context.lineTo(a, b);
                    else {
                        var c = this._x * (1 - this._t) + a * this._t;
                        this._context.lineTo(c, this._y);
                        this._context.lineTo(c, b);
                    }
            }
            this._x = a;
            this._y = b;
        },
    };
    var xe = function (a, b) {
            if (1 < (g = a.length)) for (var c = 1, d, e, f = a[b[0]], g, h = f.length; c < g; ++c) for (e = f, f = a[b[c]], d = 0; d < h; ++d) f[d][1] += f[d][0] = isNaN(e[d][1]) ? e[d][0] : e[d][1];
        },
        ye = function (a) {
            a = a.length;
            for (var b = Array(a); 0 <= --a; ) b[a] = a;
            return b;
        },
        nn = function (a) {
            var b = a.map(Gl);
            return ye(a).sort(function (a, c) {
                return b[a] - b[c];
            });
        },
        on = function (a) {
            return function () {
                return a;
            };
        };
    xg.prototype = {
        constructor: xg,
        insert: function (a, b) {
            var c, d, e;
            if (a) {
                b.P = a;
                if ((b.N = a.N)) a.N.P = b;
                a.N = b;
                if (a.R) {
                    for (a = a.R; a.L; ) a = a.L;
                    a.L = b;
                } else a.R = b;
                c = a;
            } else this._ ? ((a = Hl(this._)), (b.P = null), (b.N = a), (a.P = a.L = b), (c = a)) : ((b.P = b.N = null), (this._ = b), (c = null));
            b.L = b.R = null;
            b.U = c;
            b.C = !0;
            for (a = b; c && c.C; )
                (d = c.U),
                    c === d.L
                        ? (e = d.R) && e.C
                            ? ((c.C = e.C = !1), (d.C = !0), (a = d))
                            : (a === c.R && (gf(this, c), (a = c), (c = a.U)), (c.C = !1), (d.C = !0), hf(this, d))
                        : (e = d.L) && e.C
                        ? ((c.C = e.C = !1), (d.C = !0), (a = d))
                        : (a === c.L && (hf(this, c), (a = c), (c = a.U)), (c.C = !1), (d.C = !0), gf(this, d)),
                    (c = a.U);
            this._.C = !1;
        },
        remove: function (a) {
            a.N && (a.N.P = a.P);
            a.P && (a.P.N = a.N);
            a.N = a.P = null;
            var b = a.U,
                c = a.L,
                d = a.R,
                e,
                f;
            e = c ? (d ? Hl(d) : c) : d;
            b ? (b.L === a ? (b.L = e) : (b.R = e)) : (this._ = e);
            c && d ? ((f = e.C), (e.C = a.C), (e.L = c), (c.U = e), e !== d ? ((b = e.U), (e.U = a.U), (a = e.R), (b.L = a), (e.R = d), (d.U = e)) : ((e.U = b), (b = e), (a = e.R))) : ((f = a.C), (a = e));
            a && (a.U = b);
            if (!f)
                if (a && a.C) a.C = !1;
                else {
                    do {
                        if (a === this._) break;
                        if (a === b.L) {
                            if (((a = b.R), a.C && ((a.C = !1), (b.C = !0), gf(this, b), (a = b.R)), (a.L && a.L.C) || (a.R && a.R.C))) {
                                (a.R && a.R.C) || ((a.L.C = !1), (a.C = !0), hf(this, a), (a = b.R));
                                a.C = b.C;
                                b.C = a.R.C = !1;
                                gf(this, b);
                                a = this._;
                                break;
                            }
                        } else if (((a = b.L), a.C && ((a.C = !1), (b.C = !0), hf(this, b), (a = b.L)), (a.L && a.L.C) || (a.R && a.R.C))) {
                            (a.L && a.L.C) || ((a.R.C = !1), (a.C = !0), gf(this, a), (a = b.L));
                            a.C = b.C;
                            b.C = a.L.C = !1;
                            hf(this, b);
                            a = this._;
                            break;
                        }
                        a.C = !0;
                        a = b;
                        b = b.U;
                    } while (!a.C);
                    a && (a.C = !1);
                }
        },
    };
    var Jl = [],
        li,
        Ll = [],
        Fa = 1e-6,
        Jq = 1e-12,
        ne,
        Sb,
        lf,
        sb;
    ni.prototype = {
        constructor: ni,
        polygons: function () {
            var a = this.edges;
            return this.cells.map(function (b) {
                var c = b.halfedges.map(function (c) {
                    return Il(b, a[c]);
                });
                c.data = b.site.data;
                return c;
            });
        },
        triangles: function () {
            var a = [],
                b = this.edges;
            this.cells.forEach(function (c, d) {
                if ((h = (f = c.halfedges).length))
                    for (var e = c.site, f, g = -1, h, k, l = b[f[h - 1]], l = l.left === e ? l.right : l.left; ++g < h; )
                        (k = l), (l = b[f[g]]), (l = l.left === e ? l.right : l.left), k && l && d < k.index && d < l.index && 0 > (e[0] - l[0]) * (k[1] - e[1]) - (e[0] - k[0]) * (l[1] - e[1]) && a.push([e.data, k.data, l.data]);
            });
            return a;
        },
        links: function () {
            return this.edges
                .filter(function (a) {
                    return a.right;
                })
                .map(function (a) {
                    return { source: a.left.data, target: a.right.data };
                });
        },
        find: function (a, b, c) {
            var d = this,
                e,
                f = d._found || 0;
            e = d.cells.length;
            for (var g; !(g = d.cells[f]); ) if (++f >= e) return null;
            e = a - g.site[0];
            var h = b - g.site[1],
                k = e * e + h * h;
            do
                (g = d.cells[(e = f)]),
                    (f = null),
                    g.halfedges.forEach(function (c) {
                        var e = d.edges[c];
                        c = e.left;
                        if ((c !== g.site && c) || (c = e.right)) {
                            var e = a - c[0],
                                h = b - c[1],
                                e = e * e + h * h;
                            e < k && ((k = e), (f = c.index));
                        }
                    });
            while (null !== f);
            d._found = e;
            return null == c || k <= c * c ? g.site : null;
        },
    };
    var pn = function (a) {
        return function () {
            return a;
        };
    };
    Ic.prototype = {
        constructor: Ic,
        scale: function (a) {
            return 1 === a ? this : new Ic(this.k * a, this.x, this.y);
        },
        translate: function (a, b) {
            return (0 === a) & (0 === b) ? this : new Ic(this.k, this.x + this.k * a, this.y + this.k * b);
        },
        apply: function (a) {
            return [a[0] * this.k + this.x, a[1] * this.k + this.y];
        },
        applyX: function (a) {
            return a * this.k + this.x;
        },
        applyY: function (a) {
            return a * this.k + this.y;
        },
        invert: function (a) {
            return [(a[0] - this.x) / this.k, (a[1] - this.y) / this.k];
        },
        invertX: function (a) {
            return (a - this.x) / this.k;
        },
        invertY: function (a) {
            return (a - this.y) / this.k;
        },
        rescaleX: function (a) {
            return a.copy().domain(a.range().map(this.invertX, this).map(a.invert, a));
        },
        rescaleY: function (a) {
            return a.copy().domain(a.range().map(this.invertY, this).map(a.invert, a));
        },
        toString: function () {
            return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
        },
    };
    var oi = new Ic(1, 0, 0);
    Nl.prototype = Ic.prototype;
    var tf = function () {
        b.event.preventDefault();
        b.event.stopImmediatePropagation();
    };
    b.version = "4.9.1";
    b.bisect = Ad;
    b.bisectRight = Ad;
    b.bisectLeft = Pq;
    b.ascending = td;
    b.bisector = ai;
    b.cross = function (a, b, d) {
        var e = a.length,
            f = b.length,
            g = Array(e * f),
            h,
            k,
            l,
            m;
        null == d && (d = c);
        for (h = l = 0; h < e; ++h) for (m = a[h], k = 0; k < f; ++k, ++l) g[l] = d(m, b[k]);
        return g;
    };
    b.descending = function (a, b) {
        return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
    };
    b.deviation = Rl;
    b.extent = Sl;
    b.histogram = function () {
        function a(f) {
            var g,
                h = f.length,
                k,
                l = Array(h);
            for (g = 0; g < h; ++g) l[g] = b(f[g], g, f);
            g = c(l);
            var m = g[0],
                n = g[1],
                p = d(l, m, n);
            Array.isArray(p) || ((p = e(m, n, p)), (p = kc(Math.ceil(m / p) * p, Math.floor(n / p) * p, p)));
            for (var q = p.length; p[0] <= m; ) p.shift(), --q;
            for (; p[q - 1] > n; ) p.pop(), --q;
            var K = Array(q + 1);
            for (g = 0; g <= q; ++g) (k = K[g] = []), (k.x0 = 0 < g ? p[g - 1] : m), (k.x1 = g < q ? p[g] : n);
            for (g = 0; g < h; ++g) (k = l[g]), m <= k && k <= n && K[Ad(p, k, 0, q)].push(f[g]);
            return K;
        }
        var b = Sq,
            c = Sl,
            d = Ul;
        a.value = function (c) {
            return arguments.length ? ((b = "function" === typeof c ? c : Ag(c)), a) : b;
        };
        a.domain = function (b) {
            return arguments.length ? ((c = "function" === typeof b ? b : Ag([b[0], b[1]])), a) : c;
        };
        a.thresholds = function (b) {
            return arguments.length ? ((d = "function" === typeof b ? b : Array.isArray(b) ? Ag(Qq.call(b)) : Ag(b)), a) : d;
        };
        return a;
    };
    b.thresholdFreedmanDiaconis = function (a, b, c) {
        a = Rq.call(a, Zc).sort(td);
        return Math.ceil((c - b) / (2 * (af(a, 0.75) - af(a, 0.25)) * Math.pow(a.length, -1 / 3)));
    };
    b.thresholdScott = function (a, b, c) {
        return Math.ceil((c - b) / (3.5 * Rl(a) * Math.pow(a.length, -1 / 3)));
    };
    b.thresholdSturges = Ul;
    b.max = function (a, b) {
        var c = a.length,
            d = -1,
            e,
            f;
        if (null == b)
            for (; ++d < c; ) {
                if (null != (e = a[d]) && e >= e) for (f = e; ++d < c; ) null != (e = a[d]) && e > f && (f = e);
            }
        else for (; ++d < c; ) if (null != (e = b(a[d], d, a)) && e >= e) for (f = e; ++d < c; ) null != (e = b(a[d], d, a)) && e > f && (f = e);
        return f;
    };
    b.mean = function (a, b) {
        var c = a.length,
            d = c,
            e = -1,
            f,
            g = 0;
        if (null == b) for (; ++e < c; ) isNaN((f = Zc(a[e]))) ? --d : (g += f);
        else for (; ++e < c; ) isNaN((f = Zc(b(a[e], e, a)))) ? --d : (g += f);
        if (d) return g / d;
    };
    b.median = function (a, b) {
        var c = a.length,
            d = -1,
            e,
            f = [];
        if (null == b) for (; ++d < c; ) isNaN((e = Zc(a[d]))) || f.push(e);
        else for (; ++d < c; ) isNaN((e = Zc(b(a[d], d, a)))) || f.push(e);
        return af(f.sort(td), 0.5);
    };
    b.merge = rh;
    b.min = Vl;
    b.pairs = function (a, b) {
        null == b && (b = c);
        for (var d = 0, e = a.length - 1, f = a[0], g = Array(0 > e ? 0 : e); d < e; ) g[d] = b(f, (f = a[++d]));
        return g;
    };
    b.permute = function (a, b) {
        for (var c = b.length, d = Array(c); c--; ) d[c] = a[b[c]];
        return d;
    };
    b.quantile = af;
    b.range = kc;
    b.scan = function (a, b) {
        if ((c = a.length)) {
            var c,
                d = 0,
                e = 0,
                f,
                g = a[e];
            for (null == b && (b = td); ++d < c; ) if (0 > b((f = a[d]), g) || 0 !== b(g, g)) (g = f), (e = d);
            if (0 === b(g, g)) return e;
        }
    };
    b.shuffle = function (a, b, c) {
        c = (null == c ? a.length : c) - (b = null == b ? 0 : +b);
        for (var d, e; c; ) (e = (Math.random() * c--) | 0), (d = a[c + b]), (a[c + b] = a[e + b]), (a[e + b] = d);
        return a;
    };
    b.sum = function (a, b) {
        var c = a.length,
            d = -1,
            e,
            f = 0;
        if (null == b)
            for (; ++d < c; ) {
                if ((e = +a[d])) f += e;
            }
        else for (; ++d < c; ) if ((e = +b(a[d], d, a))) f += e;
        return f;
    };
    b.ticks = Sh;
    b.tickIncrement = d;
    b.tickStep = e;
    b.transpose = Wl;
    b.variance = Ql;
    b.zip = function () {
        return Wl(arguments);
    };
    b.axisTop = function (a) {
        return n(1, a);
    };
    b.axisRight = function (a) {
        return n(2, a);
    };
    b.axisBottom = function (a) {
        return n(3, a);
    };
    b.axisLeft = function (a) {
        return n(4, a);
    };
    b.brush = function () {
        return Ug(lr);
    };
    b.brushX = function () {
        return Ug(Lf);
    };
    b.brushY = function () {
        return Ug(Kf);
    };
    b.brushSelection = function (a) {
        return (a = a.__brush) ? a.dim.output(a.selection) : null;
    };
    b.chord = function () {
        function a(f) {
            var g = f.length,
                h = [],
                k = kc(g),
                l = [],
                m = [],
                n = (m.groups = Array(g)),
                p = Array(g * g),
                q,
                K,
                t,
                r,
                w,
                u;
            q = 0;
            for (w = -1; ++w < g; ) {
                K = 0;
                for (u = -1; ++u < g; ) K += f[w][u];
                h.push(K);
                l.push(kc(g));
                q += K;
            }
            c &&
                k.sort(function (a, b) {
                    return c(h[a], h[b]);
                });
            d &&
                l.forEach(function (a, b) {
                    a.sort(function (a, c) {
                        return d(f[b][a], f[b][c]);
                    });
                });
            r = (q = tm(0, sm - b * g) / q) ? b : sm / g;
            K = 0;
            for (w = -1; ++w < g; ) {
                t = K;
                for (u = -1; ++u < g; ) {
                    var v = k[w],
                        y = l[v][u],
                        x = f[v][y],
                        z = K,
                        C = (K += x * q);
                    p[y * g + v] = { index: v, subindex: y, startAngle: z, endAngle: C, value: x };
                }
                n[v] = { index: v, startAngle: t, endAngle: K, value: h[v] };
                K += r;
            }
            for (w = -1; ++w < g; ) for (u = w - 1; ++u < g; ) (k = p[u * g + w]), (l = p[w * g + u]), (k.value || l.value) && m.push(k.value < l.value ? { source: l, target: k } : { source: k, target: l });
            return e ? m.sort(e) : m;
        }
        var b = 0,
            c = null,
            d = null,
            e = null;
        a.padAngle = function (c) {
            return arguments.length ? ((b = tm(0, c)), a) : b;
        };
        a.sortGroups = function (b) {
            return arguments.length ? ((c = b), a) : c;
        };
        a.sortSubgroups = function (b) {
            return arguments.length ? ((d = b), a) : d;
        };
        a.sortChords = function (b) {
            return arguments.length ? (null == b ? (e = null) : ((e = sn(b))._ = b), a) : e && e._;
        };
        return a;
    };
    b.ribbon = function () {
        function a() {
            var h,
                k = mr.call(arguments),
                l = b.apply(this, k),
                m = c.apply(this, k),
                l = +d.apply(this, ((k[0] = l), k)),
                n = e.apply(this, k) - Gg,
                p = f.apply(this, k) - Gg,
                q = l * pm(n),
                K = l * qm(n),
                m = +d.apply(this, ((k[0] = m), k)),
                t = e.apply(this, k) - Gg,
                k = f.apply(this, k) - Gg;
            g || (g = h = Nc());
            g.moveTo(q, K);
            g.arc(0, 0, l, n, p);
            if (n !== t || p !== k) g.quadraticCurveTo(0, 0, m * pm(t), m * qm(t)), g.arc(0, 0, m, t, k);
            g.quadraticCurveTo(0, 0, q, K);
            g.closePath();
            if (h) return (g = null), h + "" || null;
        }
        var b = Jn,
            c = Kn,
            d = Ln,
            e = Mn,
            f = Bn,
            g = null;
        a.radius = function (b) {
            return arguments.length ? ((d = "function" === typeof b ? b : Ci(+b)), a) : d;
        };
        a.startAngle = function (b) {
            return arguments.length ? ((e = "function" === typeof b ? b : Ci(+b)), a) : e;
        };
        a.endAngle = function (b) {
            return arguments.length ? ((f = "function" === typeof b ? b : Ci(+b)), a) : f;
        };
        a.source = function (c) {
            return arguments.length ? ((b = c), a) : b;
        };
        a.target = function (b) {
            return arguments.length ? ((c = b), a) : c;
        };
        a.context = function (b) {
            return arguments.length ? ((g = null == b ? null : b), a) : g;
        };
        return a;
    };
    b.nest = function () {
        function a(b, d, g, h) {
            if (d >= c.length) return null != f ? f(b) : null != e ? b.sort(e) : b;
            for (var k = -1, l = b.length, m = c[d++], n, p, q = oc(), t, r = g(); ++k < l; ) (t = q.get((n = m((p = b[k])) + ""))) ? t.push(p) : q.set(n, [p]);
            q.each(function (b, c) {
                h(r, c, a(b, d, g, h));
            });
            return r;
        }
        function b(a, e) {
            if (++e > c.length) return a;
            var g,
                h = d[e - 1];
            null != f && e >= c.length
                ? (g = a.entries())
                : ((g = []),
                  a.each(function (a, c) {
                      g.push({ key: c, values: b(a, e) });
                  }));
            return null != h
                ? g.sort(function (a, b) {
                      return h(a.key, b.key);
                  })
                : g;
        }
        var c = [],
            d = [],
            e,
            f,
            g;
        return (g = {
            object: function (b) {
                return a(b, 0, Nn, En);
            },
            map: function (b) {
                return a(b, 0, nj, ej);
            },
            entries: function (c) {
                return b(a(c, 0, nj, ej), 0);
            },
            key: function (a) {
                c.push(a);
                return g;
            },
            sortKeys: function (a) {
                d[c.length - 1] = a;
                return g;
            },
            sortValues: function (a) {
                e = a;
                return g;
            },
            rollup: function (a) {
                f = a;
                return g;
            },
        });
    };
    b.set = oj;
    b.map = oc;
    b.keys = function (a) {
        var b = [],
            c;
        for (c in a) b.push(c);
        return b;
    };
    b.values = function (a) {
        var b = [],
            c;
        for (c in a) b.push(a[c]);
        return b;
    };
    b.entries = function (a) {
        var b = [],
            c;
        for (c in a) b.push({ key: c, value: a[c] });
        return b;
    };
    b.color = jb;
    b.rgb = qc;
    b.hsl = U;
    b.lab = Vb;
    b.hcl = gc;
    b.cubehelix = fa;
    b.dispatch = q;
    b.drag = function () {
        function a(b) {
            b.on("mousedown.drag", c).on("touchstart.drag", f).on("touchmove.drag", g).on("touchend.drag touchcancel.drag", h).style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
        }
        function c() {
            if (!y && l.apply(this, arguments)) {
                var a = k("mouse", m.apply(this, arguments), Uc, this, arguments);
                a && (Pb(b.event.view).on("mousemove.drag", d, !0).on("mouseup.drag", e, !0), Mf(b.event.view), b.event.stopImmediatePropagation(), (v = !1), (w = b.event.clientX), (u = b.event.clientY), a("start"));
            }
        }
        function d() {
            Od();
            if (!v) {
                var a = b.event.clientX - w,
                    c = b.event.clientY - u;
                v = a * a + c * c > x;
            }
            p.mouse("drag");
        }
        function e() {
            Pb(b.event.view).on("mousemove.drag mouseup.drag", null);
            Aa(b.event.view, v);
            Od();
            p.mouse("end");
        }
        function f() {
            if (l.apply(this, arguments)) {
                var a = b.event.changedTouches,
                    c = m.apply(this, arguments),
                    d = a.length,
                    e,
                    g;
                for (e = 0; e < d; ++e) if ((g = k(a[e].identifier, c, Cg, this, arguments))) b.event.stopImmediatePropagation(), g("start");
            }
        }
        function g() {
            var a = b.event.changedTouches,
                c = a.length,
                d,
                e;
            for (d = 0; d < c; ++d) if ((e = p[a[d].identifier])) Od(), e("drag");
        }
        function h() {
            var a = b.event.changedTouches,
                c = a.length,
                d,
                e;
            y && clearTimeout(y);
            y = setTimeout(function () {
                y = null;
            }, 500);
            for (d = 0; d < c; ++d) if ((e = p[a[d].identifier])) b.event.stopImmediatePropagation(), e("end");
        }
        function k(c, d, e, f, g) {
            var h = e(d, c),
                l,
                m,
                q,
                w = t.copy();
            if (
                H(new xb(a, "beforestart", l, c, r, h[0], h[1], 0, 0, w), function () {
                    if (null == (b.event.subject = l = n.apply(f, g))) return !1;
                    m = l.x - h[0] || 0;
                    q = l.y - h[1] || 0;
                    return !0;
                })
            )
                return function Hs(b) {
                    var k = h,
                        n;
                    switch (b) {
                        case "start":
                            p[c] = Hs;
                            n = r++;
                            break;
                        case "end":
                            delete p[c], --r;
                        case "drag":
                            (h = e(d, c)), (n = r);
                    }
                    H(new xb(a, b, l, c, n, h[0] + m, h[1] + q, h[0] - k[0], h[1] - k[1], w), w.apply, w, [b, f, g]);
                };
        }
        var l = bb,
            m = cb,
            n = pc,
            p = {},
            t = q("start", "drag", "end"),
            r = 0,
            w,
            u,
            v,
            y,
            x = 0;
        a.filter = function (b) {
            return arguments.length ? ((l = "function" === typeof b ? b : vi(!!b)), a) : l;
        };
        a.container = function (b) {
            return arguments.length ? ((m = "function" === typeof b ? b : vi(b)), a) : m;
        };
        a.subject = function (b) {
            return arguments.length ? ((n = "function" === typeof b ? b : vi(b)), a) : n;
        };
        a.on = function () {
            var b = t.on.apply(t, arguments);
            return b === t ? a : b;
        };
        a.clickDistance = function (b) {
            return arguments.length ? ((x = (b = +b) * b), a) : Math.sqrt(x);
        };
        return a;
    };
    b.dragDisable = Mf;
    b.dragEnable = Aa;
    b.dsvFormat = Fi;
    b.csvParse = um;
    b.csvParseRows = or;
    b.csvFormat = pr;
    b.csvFormatRows = qr;
    b.tsvParse = vm;
    b.tsvParseRows = rr;
    b.tsvFormat = sr;
    b.tsvFormatRows = tr;
    b.easeLinear = function (a) {
        return +a;
    };
    b.easeQuad = O;
    b.easeQuadIn = function (a) {
        return a * a;
    };
    b.easeQuadOut = function (a) {
        return a * (2 - a);
    };
    b.easeQuadInOut = O;
    b.easeCubic = Z;
    b.easeCubicIn = function (a) {
        return a * a * a;
    };
    b.easeCubicOut = function (a) {
        return --a * a * a + 1;
    };
    b.easeCubicInOut = Z;
    b.easePoly = lm;
    b.easePolyIn = er;
    b.easePolyOut = fr;
    b.easePolyInOut = lm;
    b.easeSin = Qa;
    b.easeSinIn = function (a) {
        return 1 - Math.cos(a * mm);
    };
    b.easeSinOut = function (a) {
        return Math.sin(a * mm);
    };
    b.easeSinInOut = Qa;
    b.easeExp = Mb;
    b.easeExpIn = function (a) {
        return Math.pow(2, 10 * a - 10);
    };
    b.easeExpOut = function (a) {
        return 1 - Math.pow(2, -10 * a);
    };
    b.easeExpInOut = Mb;
    b.easeCircle = da;
    b.easeCircleIn = function (a) {
        return 1 - Math.sqrt(1 - a * a);
    };
    b.easeCircleOut = function (a) {
        return Math.sqrt(1 - --a * a);
    };
    b.easeCircleInOut = da;
    b.easeBounce = ze;
    b.easeBounceIn = function (a) {
        return 1 - ze(1 - a);
    };
    b.easeBounceOut = ze;
    b.easeBounceInOut = function (a) {
        return (1 >= (a *= 2) ? 1 - ze(1 - a) : ze(a - 1) + 1) / 2;
    };
    b.easeBack = nm;
    b.easeBackIn = gr;
    b.easeBackOut = hr;
    b.easeBackInOut = nm;
    b.easeElastic = om;
    b.easeElasticIn = ir;
    b.easeElasticOut = om;
    b.easeElasticInOut = jr;
    b.forceCenter = function (a, b) {
        function c() {
            var e,
                f = d.length,
                g,
                h = 0,
                k = 0;
            for (e = 0; e < f; ++e) (g = d[e]), (h += g.x), (k += g.y);
            h = h / f - a;
            k = k / f - b;
            for (e = 0; e < f; ++e) (g = d[e]), (g.x -= h), (g.y -= k);
        }
        var d;
        null == a && (a = 0);
        null == b && (b = 0);
        c.initialize = function (a) {
            d = a;
        };
        c.x = function (b) {
            return arguments.length ? ((a = +b), c) : a;
        };
        c.y = function (a) {
            return arguments.length ? ((b = +a), c) : b;
        };
        return c;
    };
    b.forceCollide = function (a) {
        function b() {
            function a(b, c, d, e, f) {
                var h = b.data;
                b = b.r;
                var k = q + b;
                if (h)
                    h.index > m.index &&
                        ((c = n - h.x - h.vx),
                        (d = p - h.y - h.vy),
                        (e = c * c + d * d),
                        e < k * k &&
                            (0 === c && ((c = $c()), (e += c * c)),
                            0 === d && ((d = $c()), (e += d * d)),
                            (e = ((k - (e = Math.sqrt(e))) / e) * g),
                            (m.vx += (c *= e) * (k = (b *= b) / (t + b))),
                            (m.vy += (d *= e) * k),
                            (h.vx -= c * (k = 1 - k)),
                            (h.vy -= d * k)));
                else return c > n + k || e < n - k || d > p + k || f < p - k;
            }
            for (var d, k = e.length, l, m, n, p, q, t, r = 0; r < h; ++r) for (l = yf(e, Dn, xn).visitAfter(c), d = 0; d < k; ++d) (m = e[d]), (q = f[m.index]), (t = q * q), (n = m.x + m.vx), (p = m.y + m.vy), l.visit(a);
        }
        function c(a) {
            if (a.data) return (a.r = f[a.data.index]);
            for (var b = (a.r = 0); 4 > b; ++b) a[b] && a[b].r > a.r && (a.r = a[b].r);
        }
        function d() {
            if (e) {
                var b,
                    c = e.length,
                    g;
                f = Array(c);
                for (b = 0; b < c; ++b) (g = e[b]), (f[g.index] = +a(g, b, e));
            }
        }
        var e,
            f,
            g = 1,
            h = 1;
        "function" !== typeof a && (a = Db(null == a ? 1 : +a));
        b.initialize = function (a) {
            e = a;
            d();
        };
        b.iterations = function (a) {
            return arguments.length ? ((h = +a), b) : h;
        };
        b.strength = function (a) {
            return arguments.length ? ((g = +a), b) : g;
        };
        b.radius = function (c) {
            return arguments.length ? ((a = "function" === typeof c ? c : Db(+c)), d(), b) : a;
        };
        return b;
    };
    b.forceLink = function (a) {
        function b(c) {
            for (var d = 0, e = a.length; d < q; ++d)
                for (var f = 0, g, k, m, n, t; f < e; ++f)
                    (g = a[f]),
                        (k = g.source),
                        (g = g.target),
                        (m = g.x + g.vx - k.x - k.vx || $c()),
                        (n = g.y + g.vy - k.y - k.vy || $c()),
                        (t = Math.sqrt(m * m + n * n)),
                        (t = ((t - l[f]) / t) * c * h[f]),
                        (m *= t),
                        (n *= t),
                        (g.vx -= m * (t = p[f])),
                        (g.vy -= n * t),
                        (k.vx += m * (t = 1 - t)),
                        (k.vy += n * t);
        }
        function c() {
            if (m) {
                var b,
                    g = m.length,
                    k = a.length,
                    q = oc(m, f);
                b = 0;
                for (n = Array(g); b < k; ++b)
                    (g = a[b]),
                        (g.index = b),
                        "object" !== typeof g.source && (g.source = gj(q, g.source)),
                        "object" !== typeof g.target && (g.target = gj(q, g.target)),
                        (n[g.source.index] = (n[g.source.index] || 0) + 1),
                        (n[g.target.index] = (n[g.target.index] || 0) + 1);
                b = 0;
                for (p = Array(k); b < k; ++b) (g = a[b]), (p[b] = n[g.source.index] / (n[g.source.index] + n[g.target.index]));
                h = Array(k);
                d();
                l = Array(k);
                e();
            }
        }
        function d() {
            if (m) for (var b = 0, c = a.length; b < c; ++b) h[b] = +g(a[b], b, a);
        }
        function e() {
            if (m) for (var b = 0, c = a.length; b < c; ++b) l[b] = +k(a[b], b, a);
        }
        var f = In,
            g = function (a) {
                return 1 / Math.min(n[a.source.index], n[a.target.index]);
            },
            h,
            k = Db(30),
            l,
            m,
            n,
            p,
            q = 1;
        null == a && (a = []);
        b.initialize = function (a) {
            m = a;
            c();
        };
        b.links = function (d) {
            return arguments.length ? ((a = d), c(), b) : a;
        };
        b.id = function (a) {
            return arguments.length ? ((f = a), b) : f;
        };
        b.iterations = function (a) {
            return arguments.length ? ((q = +a), b) : q;
        };
        b.strength = function (a) {
            return arguments.length ? ((g = "function" === typeof a ? a : Db(+a)), d(), b) : g;
        };
        b.distance = function (a) {
            return arguments.length ? ((k = "function" === typeof a ? a : Db(+a)), e(), b) : k;
        };
        return b;
    };
    b.forceManyBody = function () {
        function a(b) {
            var h = e.length,
                k = yf(e, On, Pn).visitAfter(c);
            g = b;
            for (b = 0; b < h; ++b) (f = e[b]), k.visit(d);
        }
        function b() {
            if (e) {
                var a,
                    c = e.length,
                    d;
                k = Array(c);
                for (a = 0; a < c; ++a) (d = e[a]), (k[d.index] = +h(d, a, e));
            }
        }
        function c(a) {
            var b = 0,
                d,
                e,
                f,
                g,
                h;
            if (a.length) {
                for (f = g = h = 0; 4 > h; ++h) (d = a[h]) && (e = d.value) && ((b += e), (f += e * d.x), (g += e * d.y));
                a.x = f / b;
                a.y = g / b;
            } else {
                d = a;
                d.x = d.data.x;
                d.y = d.data.y;
                do b += k[d.data.index];
                while ((d = d.next));
            }
            a.value = b;
        }
        function d(a, b, c, e) {
            if (!a.value) return !0;
            c = a.x - f.x;
            var h = a.y - f.y;
            b = e - b;
            e = c * c + h * h;
            if ((b * b) / n < e) return e < m && (0 === c && ((c = $c()), (e += c * c)), 0 === h && ((h = $c()), (e += h * h)), e < l && (e = Math.sqrt(l * e)), (f.vx += (c * a.value * g) / e), (f.vy += (h * a.value * g) / e)), !0;
            if (!(a.length || e >= m)) {
                if (a.data !== f || a.next) 0 === c && ((c = $c()), (e += c * c)), 0 === h && ((h = $c()), (e += h * h)), e < l && (e = Math.sqrt(l * e));
                do a.data !== f && ((b = (k[a.data.index] * g) / e), (f.vx += c * b), (f.vy += h * b));
                while ((a = a.next));
            }
        }
        var e,
            f,
            g,
            h = Db(-30),
            k,
            l = 1,
            m = Infinity,
            n = 0.81;
        a.initialize = function (a) {
            e = a;
            b();
        };
        a.strength = function (c) {
            return arguments.length ? ((h = "function" === typeof c ? c : Db(+c)), b(), a) : h;
        };
        a.distanceMin = function (b) {
            return arguments.length ? ((l = b * b), a) : Math.sqrt(l);
        };
        a.distanceMax = function (b) {
            return arguments.length ? ((m = b * b), a) : Math.sqrt(m);
        };
        a.theta = function (b) {
            return arguments.length ? ((n = b * b), a) : Math.sqrt(n);
        };
        return a;
    };
    b.forceSimulation = function (a) {
        function b() {
            c();
            t.call("tick", f);
            g < h && (p.stop(), t.call("end", f));
        }
        function c() {
            var b,
                d = a.length,
                e;
            g += (l - g) * k;
            n.each(function (a) {
                a(g);
            });
            for (b = 0; b < d; ++b) (e = a[b]), null == e.fx ? (e.x += e.vx *= m) : ((e.x = e.fx), (e.vx = 0)), null == e.fy ? (e.y += e.vy *= m) : ((e.y = e.fy), (e.vy = 0));
        }
        function d() {
            for (var b = 0, c = a.length, e; b < c; ++b) {
                e = a[b];
                e.index = b;
                if (isNaN(e.x) || isNaN(e.y)) {
                    var f = 10 * Math.sqrt(b),
                        g = b * ur;
                    e.x = f * Math.cos(g);
                    e.y = f * Math.sin(g);
                }
                if (isNaN(e.vx) || isNaN(e.vy)) e.vx = e.vy = 0;
            }
        }
        function e(b) {
            b.initialize && b.initialize(a);
            return b;
        }
        var f,
            g = 1,
            h = 0.001,
            k = 1 - Math.pow(h, 1 / 300),
            l = 0,
            m = 0.6,
            n = oc(),
            p = ob(b),
            t = q("tick", "end");
        null == a && (a = []);
        d();
        return (f = {
            tick: c,
            restart: function () {
                return p.restart(b), f;
            },
            stop: function () {
                return p.stop(), f;
            },
            nodes: function (b) {
                return arguments.length ? ((a = b), d(), n.each(e), f) : a;
            },
            alpha: function (a) {
                return arguments.length ? ((g = +a), f) : g;
            },
            alphaMin: function (a) {
                return arguments.length ? ((h = +a), f) : h;
            },
            alphaDecay: function (a) {
                return arguments.length ? ((k = +a), f) : +k;
            },
            alphaTarget: function (a) {
                return arguments.length ? ((l = +a), f) : l;
            },
            velocityDecay: function (a) {
                return arguments.length ? ((m = 1 - a), f) : 1 - m;
            },
            force: function (a, b) {
                return 1 < arguments.length ? (null == b ? n.remove(a) : n.set(a, e(b)), f) : n.get(a);
            },
            find: function (b, c, d) {
                var e = 0,
                    f = a.length,
                    g,
                    h,
                    k,
                    l;
                d = null == d ? Infinity : d * d;
                for (e = 0; e < f; ++e) (k = a[e]), (g = b - k.x), (h = c - k.y), (g = g * g + h * h), g < d && ((l = k), (d = g));
                return l;
            },
            on: function (a, b) {
                return 1 < arguments.length ? (t.on(a, b), f) : t.on(a);
            },
        });
    };
    b.forceX = function (a) {
        function b(a) {
            for (var c = 0, d = e.length, h; c < d; ++c) (h = e[c]), (h.vx += (g[c] - h.x) * f[c] * a);
        }
        function c() {
            if (e) {
                var b,
                    h = e.length;
                f = Array(h);
                g = Array(h);
                for (b = 0; b < h; ++b) f[b] = isNaN((g[b] = +a(e[b], b, e))) ? 0 : +d(e[b], b, e);
            }
        }
        var d = Db(0.1),
            e,
            f,
            g;
        "function" !== typeof a && (a = Db(null == a ? 0 : +a));
        b.initialize = function (a) {
            e = a;
            c();
        };
        b.strength = function (a) {
            return arguments.length ? ((d = "function" === typeof a ? a : Db(+a)), c(), b) : d;
        };
        b.x = function (d) {
            return arguments.length ? ((a = "function" === typeof d ? d : Db(+d)), c(), b) : a;
        };
        return b;
    };
    b.forceY = function (a) {
        function b(a) {
            for (var c = 0, d = e.length, h; c < d; ++c) (h = e[c]), (h.vy += (g[c] - h.y) * f[c] * a);
        }
        function c() {
            if (e) {
                var b,
                    h = e.length;
                f = Array(h);
                g = Array(h);
                for (b = 0; b < h; ++b) f[b] = isNaN((g[b] = +a(e[b], b, e))) ? 0 : +d(e[b], b, e);
            }
        }
        var d = Db(0.1),
            e,
            f,
            g;
        "function" !== typeof a && (a = Db(null == a ? 0 : +a));
        b.initialize = function (a) {
            e = a;
            c();
        };
        b.strength = function (a) {
            return arguments.length ? ((d = "function" === typeof a ? a : Db(+a)), c(), b) : d;
        };
        b.y = function (d) {
            return arguments.length ? ((a = "function" === typeof d ? d : Db(+d)), c(), b) : a;
        };
        return b;
    };
    b.formatDefaultLocale = rj;
    b.formatLocale = Nj;
    b.formatSpecifier = De;
    b.precisionFixed = Xk;
    b.precisionPrefix = Vk;
    b.precisionRound = Wk;
    b.geoArea = function (a) {
        Lg.reset();
        lc(a, rc);
        return 2 * Lg;
    };
    b.geoBounds = function (a) {
        var b, c, d, e, f, g;
        Yb = $a = -(Ya = Rb = Infinity);
        Vc = [];
        lc(a, Gc);
        if ((b = Vc.length)) {
            Vc.sort(un);
            a = 1;
            c = Vc[0];
            for (e = [c]; a < b; ++a) (d = Vc[a]), Zi(c, d[0]) || Zi(c, d[1]) ? (Nb(c[0], d[1]) > Nb(c[0], c[1]) && (c[1] = d[1]), Nb(d[0], c[1]) > Nb(c[0], c[1]) && (c[0] = d[0])) : e.push((c = d));
            f = -Infinity;
            b = e.length - 1;
            a = 0;
            for (c = e[b]; a <= b; c = d, ++a) (d = e[a]), (g = Nb(c[1], d[0])) > f && ((f = g), (Ya = d[0]), ($a = c[1]));
        }
        Vc = Fc = null;
        return Infinity === Ya || Infinity === Rb
            ? [
                  [NaN, NaN],
                  [NaN, NaN],
              ]
            : [
                  [Ya, Rb],
                  [$a, Yb],
              ];
    };
    b.geoCentroid = function (a) {
        Pe = Ud = Qe = Re = Se = Vd = Wd = Xd = Qf = Rf = Sf = 0;
        lc(a, jc);
        a = Qf;
        var b = Rf,
            c = Sf,
            d = a * a + b * b + c * c;
        return 1e-12 > d && ((a = Vd), (b = Wd), (c = Xd), 1e-6 > Ud && ((a = Qe), (b = Re), (c = Se)), (d = a * a + b * b + c * c), 1e-12 > d) ? [NaN, NaN] : [zb(b, a) * Ia, Ob(c / fb(d)) * Ia];
    };
    b.geoCircle = function () {
        function a() {
            var h = b.apply(this, arguments),
                k = c.apply(this, arguments) * Y,
                l = d.apply(this, arguments) * Y;
            e = [];
            f = $g(-h[0] * Y, -h[1] * Y, 0).invert;
            lj(g, k, l, 1);
            h = { type: "Polygon", coordinates: [e] };
            e = f = null;
            return h;
        }
        var b = te([0, 0]),
            c = te(90),
            d = te(6),
            e,
            f,
            g = {
                point: function (a, b) {
                    e.push((a = f(a, b)));
                    a[0] *= Ia;
                    a[1] *= Ia;
                },
            };
        a.center = function (c) {
            return arguments.length ? ((b = "function" === typeof c ? c : te([+c[0], +c[1]])), a) : b;
        };
        a.radius = function (b) {
            return arguments.length ? ((c = "function" === typeof b ? b : te(+b)), a) : c;
        };
        a.precision = function (b) {
            return arguments.length ? ((d = "function" === typeof b ? b : te(+b)), a) : d;
        };
        return a;
    };
    b.geoClipExtent = function () {
        var a = 0,
            b = 0,
            c = 960,
            d = 500,
            e,
            f,
            g;
        return (g = {
            stream: function (g) {
                return e && f === g ? e : (e = qh(a, b, c, d)((f = g)));
            },
            extent: function (h) {
                return arguments.length
                    ? ((a = +h[0][0]), (b = +h[0][1]), (c = +h[1][0]), (d = +h[1][1]), (e = f = null), g)
                    : [
                          [a, b],
                          [c, d],
                      ];
            },
        });
    };
    b.geoContains = function (a, b) {
        return (a && Dm.hasOwnProperty(a.type) ? Dm[a.type] : Wf)(a, b);
    };
    b.geoDistance = Zd;
    b.geoGraticule = hk;
    b.geoGraticule10 = function () {
        return hk()();
    };
    b.geoInterpolate = function (a, b) {
        var c = a[0] * Y,
            d = a[1] * Y,
            e = b[0] * Y,
            f = b[1] * Y,
            g = S(d),
            h = R(d),
            k = S(f),
            l = R(f),
            m = g * S(c),
            n = g * R(c),
            p = k * S(e),
            q = k * R(e),
            t = 2 * Ob(fb(tj(f - d) + g * k * tj(e - c))),
            r = R(t),
            e = t
                ? function (a) {
                      var b = R((a *= t)) / r,
                          c = R(t - a) / r;
                      a = c * m + b * p;
                      var d = c * n + b * q,
                          b = c * h + b * l;
                      return [zb(d, a) * Ia, zb(b, fb(a * a + d * d)) * Ia];
                  }
                : function () {
                      return [c * Ia, d * Ia];
                  };
        e.distance = t;
        return e;
    };
    b.geoLength = Cm;
    b.geoPath = function (a, b) {
        function c(a) {
            a && ("function" === typeof d && f.pointRadius(+d.apply(this, arguments)), lc(a, e(f)));
            return f.result();
        }
        var d = 4.5,
            e,
            f;
        c.area = function (a) {
            lc(a, e(Hc));
            return Hc.result();
        };
        c.measure = function (a) {
            lc(a, e(Ue));
            return Ue.result();
        };
        c.bounds = function (a) {
            lc(a, e(cg));
            return cg.result();
        };
        c.centroid = function (a) {
            lc(a, e(Zb));
            return Zb.result();
        };
        c.projection = function (b) {
            return arguments.length ? ((e = null == b ? ((a = null), yd) : (a = b).stream), c) : a;
        };
        c.context = function (a) {
            if (!arguments.length) return b;
            f = null == a ? ((b = null), new uk()) : new qk((b = a));
            "function" !== typeof d && f.pointRadius(d);
            return c;
        };
        c.pointRadius = function (a) {
            if (!arguments.length) return d;
            d = "function" === typeof a ? a : (f.pointRadius(+a), +a);
            return c;
        };
        return c.projection(a).context(b);
    };
    b.geoAlbers = Fm;
    b.geoAlbersUsa = function () {
        function a(b) {
            var c = b[0];
            b = b[1];
            return (m = null), (f.point(c, b), m) || (h.point(c, b), m) || (l.point(c, b), m);
        }
        function b() {
            c = d = null;
            return a;
        }
        var c,
            d,
            e = Fm(),
            f,
            g = Pg().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]),
            h,
            k = Pg().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]),
            l,
            m,
            n = {
                point: function (a, b) {
                    m = [a, b];
                },
            };
        a.invert = function (a) {
            var b = e.scale(),
                c = e.translate(),
                d = (a[0] - c[0]) / b,
                b = (a[1] - c[1]) / b;
            return (0.12 <= b && 0.234 > b && -0.425 <= d && -0.214 > d ? g : 0.166 <= b && 0.234 > b && -0.214 <= d && -0.115 > d ? k : e).invert(a);
        };
        a.stream = function (a) {
            return c && d === a ? c : (c = Wo([e.stream((d = a)), g.stream(a), k.stream(a)]));
        };
        a.precision = function (a) {
            if (!arguments.length) return e.precision();
            e.precision(a);
            g.precision(a);
            k.precision(a);
            return b();
        };
        a.scale = function (b) {
            if (!arguments.length) return e.scale();
            e.scale(b);
            g.scale(0.35 * b);
            k.scale(b);
            return a.translate(e.translate());
        };
        a.translate = function (a) {
            if (!arguments.length) return e.translate();
            var c = e.scale(),
                d = +a[0],
                m = +a[1];
            f = e
                .translate(a)
                .clipExtent([
                    [d - 0.455 * c, m - 0.238 * c],
                    [d + 0.455 * c, m + 0.238 * c],
                ])
                .stream(n);
            h = g
                .translate([d - 0.307 * c, m + 0.201 * c])
                .clipExtent([
                    [d - 0.425 * c + 1e-6, m + 0.12 * c + 1e-6],
                    [d - 0.214 * c - 1e-6, m + 0.234 * c - 1e-6],
                ])
                .stream(n);
            l = k
                .translate([d - 0.205 * c, m + 0.212 * c])
                .clipExtent([
                    [d - 0.214 * c + 1e-6, m + 0.166 * c + 1e-6],
                    [d - 0.115 * c - 1e-6, m + 0.234 * c - 1e-6],
                ])
                .stream(n);
            return b();
        };
        a.fitExtent = function (b, c) {
            return ee(a, b, c);
        };
        a.fitSize = function (b, c) {
            return ee(a, [[0, 0], b], c);
        };
        return a.scale(1070);
    };
    b.geoAzimuthalEqualArea = function () {
        return Xc(Ki).scale(124.75).clipAngle(179.999);
    };
    b.geoAzimuthalEqualAreaRaw = Ki;
    b.geoAzimuthalEquidistant = function () {
        return Xc(Li).scale(79.4188).clipAngle(179.999);
    };
    b.geoAzimuthalEquidistantRaw = Li;
    b.geoConicConformal = function () {
        return Ah(Ck).scale(109.5).parallels([30, 30]);
    };
    b.geoConicConformalRaw = Ck;
    b.geoConicEqualArea = Pg;
    b.geoConicEqualAreaRaw = yk;
    b.geoConicEquidistant = function () {
        return Ah(Dk).scale(131.154).center([0, 13.9389]);
    };
    b.geoConicEquidistantRaw = Dk;
    b.geoEquirectangular = function () {
        return Xc(Ye).scale(152.63);
    };
    b.geoEquirectangularRaw = Ye;
    b.geoGnomonic = function () {
        return Xc(Ch).scale(144.049).clipAngle(60);
    };
    b.geoGnomonicRaw = Ch;
    b.geoIdentity = function () {
        function a() {
            p = q = null;
            return t;
        }
        var b = 1,
            c = 0,
            d = 0,
            e = 1,
            f = 1,
            g = yd,
            h = null,
            k,
            l,
            m,
            n = yd,
            p,
            q,
            t;
        return (t = {
            stream: function (a) {
                return p && q === a ? p : (p = g(n((q = a))));
            },
            clipExtent: function (b) {
                return arguments.length
                    ? ((n = null == b ? ((h = k = l = m = null), yd) : qh((h = +b[0][0]), (k = +b[0][1]), (l = +b[1][0]), (m = +b[1][1]))), a())
                    : null == h
                    ? null
                    : [
                          [h, k],
                          [l, m],
                      ];
            },
            scale: function (h) {
                return arguments.length ? ((g = eg((b = +h) * e, b * f, c, d)), a()) : b;
            },
            translate: function (h) {
                return arguments.length ? ((g = eg(b * e, b * f, (c = +h[0]), (d = +h[1]))), a()) : [c, d];
            },
            reflectX: function (h) {
                return arguments.length ? ((g = eg(b * (e = h ? -1 : 1), b * f, c, d)), a()) : 0 > e;
            },
            reflectY: function (h) {
                return arguments.length ? ((g = eg(b * e, b * (f = h ? -1 : 1), c, d)), a()) : 0 > f;
            },
            fitExtent: function (a, b) {
                return ee(t, a, b);
            },
            fitSize: function (a, b) {
                return ee(t, [[0, 0], a], b);
            },
        });
    };
    b.geoProjection = Xc;
    b.geoProjectionMutator = zh;
    b.geoMercator = function () {
        return Ak(Xe).scale(961 / Lb);
    };
    b.geoMercatorRaw = Xe;
    b.geoOrthographic = function () {
        return Xc(Dh).scale(249.5).clipAngle(90.000001);
    };
    b.geoOrthographicRaw = Dh;
    b.geoStereographic = function () {
        return Xc(Eh).scale(250).clipAngle(142);
    };
    b.geoStereographicRaw = Eh;
    b.geoTransverseMercator = function () {
        var a = Ak(Fh),
            b = a.center,
            c = a.rotate;
        a.center = function (a) {
            return arguments.length ? b([-a[1], a[0]]) : ((a = b()), [a[1], -a[0]]);
        };
        a.rotate = function (a) {
            return arguments.length ? c([a[0], a[1], 2 < a.length ? a[2] + 90 : 90]) : ((a = c()), [a[0], a[1], a[2] - 90]);
        };
        return c([0, 0, 90]).scale(159.155);
    };
    b.geoTransverseMercatorRaw = Fh;
    b.geoRotation = Bk;
    b.geoStream = lc;
    b.geoTransform = function (a) {
        return { stream: bg(a) };
    };
    b.cluster = function () {
        function a(f) {
            var g,
                h = 0;
            f.eachAfter(function (a) {
                var c = a.children;
                if (c) {
                    var d;
                    d = c.reduce(Yo, 0) / c.length;
                    a.x = d;
                    a.y = 1 + c.reduce(Zo, 0);
                } else (a.x = g ? (h += b(a, g)) : 0), (a.y = 0), (g = a);
            });
            var k = $o(f),
                l = ap(f),
                m = k.x - b(k, l) / 2,
                n = l.x + b(l, k) / 2;
            return f.eachAfter(
                e
                    ? function (a) {
                          a.x = (a.x - f.x) * c;
                          a.y = (f.y - a.y) * d;
                      }
                    : function (a) {
                          a.x = ((a.x - m) / (n - m)) * c;
                          a.y = (1 - (f.y ? a.y / f.y : 1)) * d;
                      }
            );
        }
        var b = Xo,
            c = 1,
            d = 1,
            e = !1;
        a.separation = function (c) {
            return arguments.length ? ((b = c), a) : b;
        };
        a.size = function (b) {
            return arguments.length ? ((e = !1), (c = +b[0]), (d = +b[1]), a) : e ? null : [c, d];
        };
        a.nodeSize = function (b) {
            return arguments.length ? ((e = !0), (c = +b[0]), (d = +b[1]), a) : e ? [c, d] : null;
        };
        return a;
    };
    b.hierarchy = Gh;
    b.pack = function () {
        function a(f) {
            f.x = c / 2;
            f.y = d / 2;
            b
                ? f.eachBefore(Lk(b)).eachAfter(Hh(e, 0.5)).eachBefore(Mk(1))
                : f
                      .eachBefore(Lk(fp))
                      .eachAfter(Hh(zd, 1))
                      .eachAfter(Hh(e, f.r / Math.min(c, d)))
                      .eachBefore(Mk(Math.min(c, d) / (2 * f.r)));
            return f;
        }
        var b = null,
            c = 1,
            d = 1,
            e = zd;
        a.radius = function (c) {
            return arguments.length ? ((b = null == c ? null : gg(c)), a) : b;
        };
        a.size = function (b) {
            return arguments.length ? ((c = +b[0]), (d = +b[1]), a) : [c, d];
        };
        a.padding = function (b) {
            return arguments.length ? ((e = "function" === typeof b ? b : ve(+b)), a) : e;
        };
        return a;
    };
    b.packSiblings = function (a) {
        Jk(a);
        return a;
    };
    b.packEnclose = Kk;
    b.partition = function () {
        function a(g) {
            var h = g.height + 1;
            g.x0 = g.y0 = e;
            g.x1 = c;
            g.y1 = d / h;
            g.eachBefore(b(d, h));
            f && g.eachBefore(Gm);
            return g;
        }
        function b(a, c) {
            return function (b) {
                b.children && Ze(b, b.x0, (a * (b.depth + 1)) / c, b.x1, (a * (b.depth + 2)) / c);
                var d = b.x0,
                    f = b.y0,
                    g = b.x1 - e,
                    h = b.y1 - e;
                g < d && (d = g = (d + g) / 2);
                h < f && (f = h = (f + h) / 2);
                b.x0 = d;
                b.y0 = f;
                b.x1 = g;
                b.y1 = h;
            };
        }
        var c = 1,
            d = 1,
            e = 0,
            f = !1;
        a.round = function (b) {
            return arguments.length ? ((f = !!b), a) : f;
        };
        a.size = function (b) {
            return arguments.length ? ((c = +b[0]), (d = +b[1]), a) : [c, d];
        };
        a.padding = function (b) {
            return arguments.length ? ((e = +b), a) : e;
        };
        return a;
    };
    b.stratify = function () {
        function a(d) {
            var e,
                f,
                g = d.length,
                h,
                k,
                l = Array(g),
                m,
                n = {};
            for (f = 0; f < g; ++f) (e = d[f]), (k = l[f] = new he(e)), null != (m = b(e, f, d)) && (m += "") && ((e = "$" + (k.id = m)), (n[e] = e in n ? Hm : k));
            for (f = 0; f < g; ++f)
                if (((k = l[f]), (m = c(d[f], f, d)), null != m && (m += ""))) {
                    e = n["$" + m];
                    if (!e) throw Error("missing: " + m);
                    if (e === Hm) throw Error("ambiguous: " + m);
                    e.children ? e.children.push(k) : (e.children = [k]);
                    k.parent = e;
                } else {
                    if (h) throw Error("multiple roots");
                    h = k;
                }
            if (!h) throw Error("no root");
            h.parent = yr;
            h.eachBefore(function (a) {
                a.depth = a.parent.depth + 1;
                --g;
            }).eachBefore(Ek);
            h.parent = null;
            if (0 < g) throw Error("cycle");
            return h;
        }
        var b = gp,
            c = hp;
        a.id = function (c) {
            return arguments.length ? ((b = gg(c)), a) : b;
        };
        a.parentId = function (b) {
            return arguments.length ? ((c = gg(b)), a) : c;
        };
        return a;
    };
    b.tree = function () {
        function a(k) {
            var l = jp(k);
            l.eachAfter(b);
            l.parent.m = -l.z;
            l.eachBefore(c);
            if (h) k.eachBefore(d);
            else {
                var m = k,
                    n = k,
                    p = k;
                k.eachBefore(function (a) {
                    a.x < m.x && (m = a);
                    a.x > n.x && (n = a);
                    a.depth > p.depth && (p = a);
                });
                var l = m === n ? 1 : e(m, n) / 2,
                    q = l - m.x,
                    t = f / (n.x + l + q),
                    r = g / (p.depth || 1);
                k.eachBefore(function (a) {
                    a.x = (a.x + q) * t;
                    a.y = a.depth * r;
                });
            }
            return k;
        }
        function b(a) {
            var c = a.children,
                d = a.parent.children,
                f = a.i ? d[a.i - 1] : null;
            if (c) {
                for (var g = 0, h = 0, k = a.children, l = k.length, m; 0 <= --l; ) (m = k[l]), (m.z += g), (m.m += g), (g += m.s + (h += m.c));
                c = (c[0].z + c[c.length - 1].z) / 2;
                f ? ((a.z = f.z + e(a._, f._)), (a.m = a.z - c)) : (a.z = c);
            } else f && (a.z = f.z + e(a._, f._));
            c = a.parent;
            d = a.parent.A || d[0];
            if (f) {
                h = g = a;
                k = g.parent.children[0];
                l = g.m;
                m = h.m;
                for (var n = f.m, p = k.m, q; (f = Jh(f)), (g = Ih(g)), f && g; ) {
                    k = Ih(k);
                    h = Jh(h);
                    h.a = a;
                    q = f.z + n - g.z - l + e(f._, g._);
                    if (0 < q) {
                        var t = f.a.parent === a.parent ? f.a : d,
                            r = a,
                            w = q,
                            u = w / (r.i - t.i);
                        r.c -= u;
                        r.s += w;
                        t.c += u;
                        r.z += w;
                        r.m += w;
                        l += q;
                        m += q;
                    }
                    n += f.m;
                    l += g.m;
                    p += k.m;
                    m += h.m;
                }
                f && !Jh(h) && ((h.t = f), (h.m += n - m));
                g && !Ih(k) && ((k.t = g), (k.m += l - p), (d = a));
            }
            c.A = d;
        }
        function c(a) {
            a._.x = a.z + a.parent.m;
            a.m += a.parent.m;
        }
        function d(a) {
            a.x *= f;
            a.y = a.depth * g;
        }
        var e = ip,
            f = 1,
            g = 1,
            h = null;
        a.separation = function (b) {
            return arguments.length ? ((e = b), a) : e;
        };
        a.size = function (b) {
            return arguments.length ? ((h = !1), (f = +b[0]), (g = +b[1]), a) : h ? null : [f, g];
        };
        a.nodeSize = function (b) {
            return arguments.length ? ((h = !0), (f = +b[0]), (g = +b[1]), a) : h ? [f, g] : null;
        };
        return a;
    };
    b.treemap = function () {
        function a(c) {
            c.x0 = c.y0 = 0;
            c.x1 = e;
            c.y1 = f;
            c.eachBefore(b);
            g = [0];
            d && c.eachBefore(Gm);
            return c;
        }
        function b(a) {
            var d = g[a.depth],
                e = a.x0 + d,
                f = a.y0 + d,
                p = a.x1 - d,
                q = a.y1 - d;
            p < e && (e = p = (e + p) / 2);
            q < f && (f = q = (f + q) / 2);
            a.x0 = e;
            a.y0 = f;
            a.x1 = p;
            a.y1 = q;
            a.children && ((d = g[a.depth + 1] = h(a) / 2), (e += n(a) - d), (f += k(a) - d), (p -= l(a) - d), (q -= m(a) - d), p < e && (e = p = (e + p) / 2), q < f && (f = q = (f + q) / 2), c(a, e, f, p, q));
        }
        var c = Jm,
            d = !1,
            e = 1,
            f = 1,
            g = [0],
            h = zd,
            k = zd,
            l = zd,
            m = zd,
            n = zd;
        a.round = function (b) {
            return arguments.length ? ((d = !!b), a) : d;
        };
        a.size = function (b) {
            return arguments.length ? ((e = +b[0]), (f = +b[1]), a) : [e, f];
        };
        a.tile = function (b) {
            return arguments.length ? ((c = gg(b)), a) : c;
        };
        a.padding = function (b) {
            return arguments.length ? a.paddingInner(b).paddingOuter(b) : a.paddingInner();
        };
        a.paddingInner = function (b) {
            return arguments.length ? ((h = "function" === typeof b ? b : ve(+b)), a) : h;
        };
        a.paddingOuter = function (b) {
            return arguments.length ? a.paddingTop(b).paddingRight(b).paddingBottom(b).paddingLeft(b) : a.paddingTop();
        };
        a.paddingTop = function (b) {
            return arguments.length ? ((k = "function" === typeof b ? b : ve(+b)), a) : k;
        };
        a.paddingRight = function (b) {
            return arguments.length ? ((l = "function" === typeof b ? b : ve(+b)), a) : l;
        };
        a.paddingBottom = function (b) {
            return arguments.length ? ((m = "function" === typeof b ? b : ve(+b)), a) : m;
        };
        a.paddingLeft = function (b) {
            return arguments.length ? ((n = "function" === typeof b ? b : ve(+b)), a) : n;
        };
        return a;
    };
    b.treemapBinary = function (a, b, c, d, e) {
        function f(a, b, c, d, e, h, k) {
            if (a >= b - 1) (a = g[a]), (a.x0 = d), (a.y0 = e), (a.x1 = h), (a.y1 = k);
            else {
                for (var l = m[a], n = c / 2 + l, p = a + 1, q = b - 1; p < q; ) {
                    var t = (p + q) >>> 1;
                    m[t] < n ? (p = t + 1) : (q = t);
                }
                n - m[p - 1] < m[p] - n && a + 1 < p && --p;
                l = m[p] - l;
                n = c - l;
                h - d > k - e ? ((c = (d * n + h * l) / c), f(a, p, l, d, e, c, k), f(p, b, n, c, e, h, k)) : ((c = (e * n + k * l) / c), f(a, p, l, d, e, h, c), f(p, b, n, d, c, h, k));
            }
        }
        var g = a.children,
            h,
            k = g.length,
            l,
            m = Array(k + 1);
        for (m[0] = l = h = 0; h < k; ++h) m[h + 1] = l += g[h].value;
        f(0, k, a.value, b, c, d, e);
    };
    b.treemapDice = Ze;
    b.treemapSlice = ig;
    b.treemapSliceDice = function (a, b, c, d, e) {
        (a.depth & 1 ? ig : Ze)(a, b, c, d, e);
    };
    b.treemapSquarify = Jm;
    b.treemapResquarify = zr;
    b.interpolate = Ne;
    b.interpolateArray = am;
    b.interpolateBasis = Zl;
    b.interpolateBasisClosed = $l;
    b.interpolateDate = bm;
    b.interpolateNumber = Qb;
    b.interpolateObject = cm;
    b.interpolateRound = Uk;
    b.interpolateString = yi;
    b.interpolateTransformCss = gm;
    b.interpolateTransformSvg = hm;
    b.interpolateZoom = im;
    b.interpolateRgb = of;
    b.interpolateRgbBasis = Vq;
    b.interpolateRgbBasisClosed = Wq;
    b.interpolateHsl = Xq;
    b.interpolateHslLong = Yq;
    b.interpolateLab = function (a, b) {
        var c = E((a = Vb(a)).l, (b = Vb(b)).l),
            d = E(a.a, b.a),
            e = E(a.b, b.b),
            f = E(a.opacity, b.opacity);
        return function (b) {
            a.l = c(b);
            a.a = d(b);
            a.b = e(b);
            a.opacity = f(b);
            return a + "";
        };
    };
    b.interpolateHcl = Zq;
    b.interpolateHclLong = $q;
    b.interpolateCubehelix = ar;
    b.interpolateCubehelixLong = Eg;
    b.quantize = function (a, b) {
        for (var c = Array(b), d = 0; d < b; ++d) c[d] = a(d / (b - 1));
        return c;
    };
    b.path = Nc;
    b.polygonArea = function (a) {
        for (var b = -1, c = a.length, d, e = a[c - 1], f = 0; ++b < c; ) (d = e), (e = a[b]), (f += d[1] * e[0] - d[0] * e[1]);
        return f / 2;
    };
    b.polygonCentroid = function (a) {
        for (var b = -1, c = a.length, d = 0, e = 0, f, g = a[c - 1], h, k = 0; ++b < c; ) (f = g), (g = a[b]), (k += h = f[0] * g[1] - g[0] * f[1]), (d += (f[0] + g[0]) * h), (e += (f[1] + g[1]) * h);
        return (k *= 3), [d / k, e / k];
    };
    b.polygonHull = function (a) {
        if (3 > (c = a.length)) return null;
        var b,
            c,
            d = Array(c),
            e = Array(c);
        for (b = 0; b < c; ++b) d[b] = [+a[b][0], +a[b][1], b];
        d.sort(kp);
        for (b = 0; b < c; ++b) e[b] = [d[b][0], -d[b][1]];
        c = Ok(d);
        var e = Ok(e),
            f = e[0] === c[0],
            g = e[e.length - 1] === c[c.length - 1],
            h = [];
        for (b = c.length - 1; 0 <= b; --b) h.push(a[d[c[b]][2]]);
        for (b = +f; b < e.length - g; ++b) h.push(a[d[e[b]][2]]);
        return h;
    };
    b.polygonContains = function (a, b) {
        for (var c = a.length, d = a[c - 1], e = b[0], f = b[1], g = d[0], h = d[1], k, l = !1, m = 0; m < c; ++m) (d = a[m]), (k = d[0]), (d = d[1]), d > f !== h > f && e < ((g - k) * (f - d)) / (h - d) + k && (l = !l), (g = k), (h = d);
        return l;
    };
    b.polygonLength = function (a) {
        for (var b = -1, c = a.length, d = a[c - 1], e, f, g = d[0], d = d[1], h = 0; ++b < c; ) (e = g), (f = d), (d = a[b]), (g = d[0]), (d = d[1]), (e -= g), (f -= d), (h += Math.sqrt(e * e + f * f));
        return h;
    };
    b.quadtree = yf;
    b.queue = Qk;
    b.randomUniform = Br;
    b.randomNormal = Km;
    b.randomLogNormal = Cr;
    b.randomBates = Dr;
    b.randomIrwinHall = Lm;
    b.randomExponential = Er;
    b.request = Mi;
    b.html = Fr;
    b.json = Gr;
    b.text = Hr;
    b.xml = Ir;
    b.csv = Jr;
    b.tsv = Kr;
    b.scaleBand = Oh;
    b.scalePoint = function () {
        return Rk(Oh().paddingInner(1));
    };
    b.scaleIdentity = Zk;
    b.scaleLinear = Yk;
    b.scaleLog = cl;
    b.scaleOrdinal = Mh;
    b.scaleImplicit = Nh;
    b.scalePow = Th;
    b.scaleSqrt = function () {
        return Th().exponent(0.5);
    };
    b.scaleQuantile = el;
    b.scaleQuantize = fl;
    b.scaleThreshold = gl;
    b.scaleTime = function () {
        return $h(Dd, Pi, df, mg, Oi, Ni, sf, Gd, b.timeFormat).domain([new Date(2e3, 0, 1), new Date(2e3, 0, 2)]);
    };
    b.scaleUtc = function () {
        return $h(Ed, Si, ef, ng, Ri, Qi, sf, Gd, b.utcFormat).domain([Date.UTC(2e3, 0, 1), Date.UTC(2e3, 0, 2)]);
    };
    b.schemeCategory10 = is;
    b.schemeCategory20b = js;
    b.schemeCategory20c = ks;
    b.schemeCategory20 = ls;
    b.interpolateCubehelixDefault = ms;
    b.interpolateRainbow = function (a) {
        if (0 > a || 1 < a) a -= Math.floor(a);
        var b = Math.abs(a - 0.5);
        Rg.h = 360 * a - 100;
        Rg.s = 1.5 - 1.5 * b;
        Rg.l = 0.8 - 0.9 * b;
        return Rg + "";
    };
    b.interpolateWarm = ns;
    b.interpolateCool = os;
    b.interpolateViridis = ps;
    b.interpolateMagma = qs;
    b.interpolateInferno = rs;
    b.interpolatePlasma = ss;
    b.scaleSequential = pl;
    b.creator = qi;
    b.local = p;
    b.matcher = ri;
    b.mouse = Uc;
    b.namespace = mf;
    b.namespaces = pi;
    b.select = Pb;
    b.selectAll = function (a) {
        return "string" === typeof a ? new N([document.querySelectorAll(a)], [document.documentElement]) : new N([null == a ? [] : a], ih);
    };
    b.selection = wb;
    b.selector = Bg;
    b.selectorAll = ui;
    b.style = M;
    b.touch = Cg;
    b.touches = function (a, b) {
        null == b && (b = si().touches);
        for (var c = 0, d = b ? b.length : 0, e = Array(d); c < d; ++c) e[c] = ti(a, b[c]);
        return e;
    };
    b.window = hh;
    b.customEvent = H;
    b.arc = function () {
        function a() {
            var l,
                m,
                n = +b.apply(this, arguments),
                p = +c.apply(this, arguments),
                q = f.apply(this, arguments) - pg,
                t = g.apply(this, arguments) - pg,
                r = bn(t - q),
                w = t > q;
            k || (k = l = Nc());
            p < n && ((m = p), (p = n), (n = m));
            if (1e-12 < p)
                if (r > cd - 1e-12) k.moveTo(p * Hd(q), p * uc(q)), k.arc(0, 0, p, q, t, !w), 1e-12 < n && (k.moveTo(n * Hd(t), n * uc(t)), k.arc(0, 0, n, t, q, w));
                else {
                    var u = q,
                        v = t;
                    m = q;
                    var y = t,
                        x = r,
                        z = r,
                        K = h.apply(this, arguments) / 2,
                        C = 1e-12 < K && (e ? +e.apply(this, arguments) : ke(n * n + p * p)),
                        B = Ti(bn(p - n) / 2, +d.apply(this, arguments)),
                        A = B,
                        G = B;
                    if (1e-12 < C) {
                        var H = ql((C / n) * uc(K)),
                            K = ql((C / p) * uc(K));
                        1e-12 < (x -= 2 * H) ? ((H *= w ? 1 : -1), (m += H), (y -= H)) : ((x = 0), (m = y = (q + t) / 2));
                        1e-12 < (z -= 2 * K) ? ((K *= w ? 1 : -1), (u += K), (v -= K)) : ((z = 0), (u = v = (q + t) / 2));
                    }
                    q = p * Hd(u);
                    t = p * uc(u);
                    H = n * Hd(y);
                    K = n * uc(y);
                    if (1e-12 < B) {
                        var D = p * Hd(v),
                            uf = p * uc(v),
                            J = n * Hd(m),
                            E = n * uc(m);
                        if (r < bd) {
                            1e-12 < x ? ((A = J - q), (G = E - t), (r = H - D), (C = K - uf), (r = (r * (t - uf) - C * (q - D)) / (C * A - r * G)), (A = [q + r * A, t + r * G])) : (A = [H, K]);
                            var G = q - A[0],
                                r = t - A[1],
                                C = D - A[0],
                                I = uf - A[1],
                                G = (G * C + r * I) / (ke(G * G + r * r) * ke(C * C + I * I)),
                                G = 1 / uc((1 < G ? 0 : -1 > G ? bd : Math.acos(G)) / 2),
                                r = ke(A[0] * A[0] + A[1] * A[1]),
                                A = Ti(B, (n - r) / (G - 1)),
                                G = Ti(B, (p - r) / (G + 1));
                        }
                    }
                    1e-12 < z
                        ? 1e-12 < G
                            ? ((u = qg(J, E, q, t, p, G, w)),
                              (v = qg(D, uf, H, K, p, G, w)),
                              k.moveTo(u.cx + u.x01, u.cy + u.y01),
                              G < B
                                  ? k.arc(u.cx, u.cy, G, tb(u.y01, u.x01), tb(v.y01, v.x01), !w)
                                  : (k.arc(u.cx, u.cy, G, tb(u.y01, u.x01), tb(u.y11, u.x11), !w),
                                    k.arc(0, 0, p, tb(u.cy + u.y11, u.cx + u.x11), tb(v.cy + v.y11, v.cx + v.x11), !w),
                                    k.arc(v.cx, v.cy, G, tb(v.y11, v.x11), tb(v.y01, v.x01), !w)))
                            : (k.moveTo(q, t), k.arc(0, 0, p, u, v, !w))
                        : k.moveTo(q, t);
                    1e-12 < n && 1e-12 < x
                        ? 1e-12 < A
                            ? ((u = qg(H, K, D, uf, n, -A, w)),
                              (v = qg(q, t, J, E, n, -A, w)),
                              k.lineTo(u.cx + u.x01, u.cy + u.y01),
                              A < B
                                  ? k.arc(u.cx, u.cy, A, tb(u.y01, u.x01), tb(v.y01, v.x01), !w)
                                  : (k.arc(u.cx, u.cy, A, tb(u.y01, u.x01), tb(u.y11, u.x11), !w),
                                    k.arc(0, 0, n, tb(u.cy + u.y11, u.cx + u.x11), tb(v.cy + v.y11, v.cx + v.x11), w),
                                    k.arc(v.cx, v.cy, A, tb(v.y11, v.x11), tb(v.y01, v.x01), !w)))
                            : k.arc(0, 0, n, y, m, w)
                        : k.lineTo(H, K);
                }
            else k.moveTo(0, 0);
            k.closePath();
            if (l) return (k = null), l + "" || null;
        }
        var b = qq,
            c = rq,
            d = ka(0),
            e = null,
            f = sq,
            g = tq,
            h = uq,
            k = null;
        a.centroid = function () {
            var a = (+b.apply(this, arguments) + +c.apply(this, arguments)) / 2,
                d = (+f.apply(this, arguments) + +g.apply(this, arguments)) / 2 - bd / 2;
            return [Hd(d) * a, uc(d) * a];
        };
        a.innerRadius = function (c) {
            return arguments.length ? ((b = "function" === typeof c ? c : ka(+c)), a) : b;
        };
        a.outerRadius = function (b) {
            return arguments.length ? ((c = "function" === typeof b ? b : ka(+b)), a) : c;
        };
        a.cornerRadius = function (b) {
            return arguments.length ? ((d = "function" === typeof b ? b : ka(+b)), a) : d;
        };
        a.padRadius = function (b) {
            return arguments.length ? ((e = null == b ? null : "function" === typeof b ? b : ka(+b)), a) : e;
        };
        a.startAngle = function (b) {
            return arguments.length ? ((f = "function" === typeof b ? b : ka(+b)), a) : f;
        };
        a.endAngle = function (b) {
            return arguments.length ? ((g = "function" === typeof b ? b : ka(+b)), a) : g;
        };
        a.padAngle = function (b) {
            return arguments.length ? ((h = "function" === typeof b ? b : ka(+b)), a) : h;
        };
        a.context = function (b) {
            return arguments.length ? ((k = null == b ? null : b), a) : k;
        };
        return a;
    };
    b.area = cn;
    b.line = Ui;
    b.pie = function () {
        function a(h) {
            var k,
                l = h.length,
                m,
                n;
            m = 0;
            var p = Array(l),
                q = Array(l),
                t = +e.apply(this, arguments);
            n = Math.min(cd, Math.max(-cd, f.apply(this, arguments) - t));
            var r,
                w = Math.min(Math.abs(n) / l, g.apply(this, arguments)),
                u = w * (0 > n ? -1 : 1),
                v;
            for (k = 0; k < l; ++k) 0 < (v = q[(p[k] = k)] = +b(h[k], k, h)) && (m += v);
            null != c
                ? p.sort(function (a, b) {
                      return c(q[a], q[b]);
                  })
                : null != d &&
                  p.sort(function (a, b) {
                      return d(h[a], h[b]);
                  });
            k = 0;
            for (n = m ? (n - l * u) / m : 0; k < l; ++k, t = r) (m = p[k]), (v = q[m]), (r = t + (0 < v ? v * n : 0) + u), (q[m] = { data: h[m], index: k, value: v, startAngle: t, endAngle: r, padAngle: w });
            return q;
        }
        var b = us,
            c = ts,
            d = null,
            e = ka(0),
            f = ka(cd),
            g = ka(0);
        a.value = function (c) {
            return arguments.length ? ((b = "function" === typeof c ? c : ka(+c)), a) : b;
        };
        a.sortValues = function (b) {
            return arguments.length ? ((c = b), (d = null), a) : c;
        };
        a.sort = function (b) {
            return arguments.length ? ((d = b), (c = null), a) : d;
        };
        a.startAngle = function (b) {
            return arguments.length ? ((e = "function" === typeof b ? b : ka(+b)), a) : e;
        };
        a.endAngle = function (b) {
            return arguments.length ? ((f = "function" === typeof b ? b : ka(+b)), a) : f;
        };
        a.padAngle = function (b) {
            return arguments.length ? ((g = "function" === typeof b ? b : ka(+b)), a) : g;
        };
        return a;
    };
    b.radialArea = function () {
        var a = cn().curve(dn),
            b = a.curve,
            c = a.lineX0,
            d = a.lineX1,
            e = a.lineY0,
            f = a.lineY1;
        a.angle = a.x;
        delete a.x;
        a.startAngle = a.x0;
        delete a.x0;
        a.endAngle = a.x1;
        delete a.x1;
        a.radius = a.y;
        delete a.y;
        a.innerRadius = a.y0;
        delete a.y0;
        a.outerRadius = a.y1;
        delete a.y1;
        a.lineStartAngle = function () {
            return ff(c());
        };
        delete a.lineX0;
        a.lineEndAngle = function () {
            return ff(d());
        };
        delete a.lineX1;
        a.lineInnerRadius = function () {
            return ff(e());
        };
        delete a.lineY0;
        a.lineOuterRadius = function () {
            return ff(f());
        };
        delete a.lineY1;
        a.curve = function (a) {
            return arguments.length ? b(di(a)) : b()._curve;
        };
        return a;
    };
    b.radialLine = function () {
        return ff(Ui().curve(dn));
    };
    b.linkHorizontal = function () {
        return ei(yq);
    };
    b.linkVertical = function () {
        return ei(zq);
    };
    b.linkRadial = function () {
        var a = ei(Aq);
        a.angle = a.x;
        delete a.x;
        a.radius = a.y;
        delete a.y;
        return a;
    };
    b.symbol = function () {
        function a() {
            var e;
            d || (d = e = Nc());
            b.apply(this, arguments).draw(d, +c.apply(this, arguments));
            if (e) return (d = null), e + "" || null;
        }
        var b = ka(Vi),
            c = ka(64),
            d = null;
        a.type = function (c) {
            return arguments.length ? ((b = "function" === typeof c ? c : ka(c)), a) : b;
        };
        a.size = function (b) {
            return arguments.length ? ((c = "function" === typeof b ? b : ka(+b)), a) : c;
        };
        a.context = function (b) {
            return arguments.length ? ((d = null == b ? null : b), a) : d;
        };
        return a;
    };
    b.symbols = zs;
    b.symbolCircle = Vi;
    b.symbolCross = en;
    b.symbolDiamond = gn;
    b.symbolSquare = kn;
    b.symbolStar = jn;
    b.symbolTriangle = ln;
    b.symbolWye = mn;
    b.curveBasisClosed = function (a) {
        return new tl(a);
    };
    b.curveBasisOpen = function (a) {
        return new ul(a);
    };
    b.curveBasis = function (a) {
        return new tg(a);
    };
    b.curveBundle = As;
    b.curveCardinalClosed = Cs;
    b.curveCardinalOpen = Ds;
    b.curveCardinal = Bs;
    b.curveCatmullRomClosed = Fs;
    b.curveCatmullRomOpen = Gs;
    b.curveCatmullRom = Es;
    b.curveLinearClosed = function (a) {
        return new zl(a);
    };
    b.curveLinear = Sg;
    b.curveMonotoneX = function (a) {
        return new vg(a);
    };
    b.curveMonotoneY = function (a) {
        return new Cl(a);
    };
    b.curveNatural = function (a) {
        return new El(a);
    };
    b.curveStep = function (a) {
        return new wg(a, 0.5);
    };
    b.curveStepAfter = function (a) {
        return new wg(a, 1);
    };
    b.curveStepBefore = function (a) {
        return new wg(a, 0);
    };
    b.stack = function () {
        function a(f) {
            var g = b.apply(this, arguments),
                h,
                k = f.length,
                l = g.length,
                m = Array(l);
            for (h = 0; h < l; ++h) {
                for (var n = g[h], p = (m[h] = Array(k)), q = 0, t; q < k; ++q) (p[q] = t = [0, +e(f[q], n, q, f)]), (t.data = f[q]);
                p.key = n;
            }
            h = 0;
            for (g = c(m); h < l; ++h) m[g[h]].index = h;
            d(m, g);
            return m;
        }
        var b = ka([]),
            c = ye,
            d = xe,
            e = Bq;
        a.keys = function (c) {
            return arguments.length ? ((b = "function" === typeof c ? c : ka(fi.call(c))), a) : b;
        };
        a.value = function (b) {
            return arguments.length ? ((e = "function" === typeof b ? b : ka(+b)), a) : e;
        };
        a.order = function (b) {
            return arguments.length ? ((c = null == b ? ye : "function" === typeof b ? b : ka(fi.call(b))), a) : c;
        };
        a.offset = function (b) {
            return arguments.length ? ((d = null == b ? xe : b), a) : d;
        };
        return a;
    };
    b.stackOffsetExpand = function (a, b) {
        if (0 < (d = a.length)) {
            for (var c, d, e = 0, f = a[0].length, g; e < f; ++e) {
                for (g = c = 0; c < d; ++c) g += a[c][e][1] || 0;
                if (g) for (c = 0; c < d; ++c) a[c][e][1] /= g;
            }
            xe(a, b);
        }
    };
    b.stackOffsetDiverging = function (a, b) {
        if (1 < (k = a.length))
            for (var c, d = 0, e, f, g, h, k, l = a[b[0]].length; d < l; ++d) for (c = g = h = 0; c < k; ++c) 0 <= (f = (e = a[b[c]][d])[1] - e[0]) ? ((e[0] = g), (e[1] = g += f)) : 0 > f ? ((e[1] = h), (e[0] = h += f)) : (e[0] = g);
    };
    b.stackOffsetNone = xe;
    b.stackOffsetSilhouette = function (a, b) {
        if (0 < (e = a.length)) {
            for (var c = 0, d = a[b[0]], e, f = d.length; c < f; ++c) {
                for (var g = 0, h = 0; g < e; ++g) h += a[g][c][1] || 0;
                d[c][1] += d[c][0] = -h / 2;
            }
            xe(a, b);
        }
    };
    b.stackOffsetWiggle = function (a, b) {
        if (0 < (g = a.length) && 0 < (f = (e = a[b[0]]).length)) {
            for (var c = 0, d = 1, e, f, g; d < f; ++d) {
                for (var h = 0, k = 0, l = 0; h < g; ++h) {
                    for (var m = a[b[h]], n = m[d][1] || 0, m = (n - (m[d - 1][1] || 0)) / 2, p = 0; p < h; ++p) var q = a[b[p]], m = m + ((q[d][1] || 0) - (q[d - 1][1] || 0));
                    k += n;
                    l += m * n;
                }
                e[d - 1][1] += e[d - 1][0] = c;
                k && (c -= l / k);
            }
            e[d - 1][1] += e[d - 1][0] = c;
            xe(a, b);
        }
    };
    b.stackOrderAscending = nn;
    b.stackOrderDescending = function (a) {
        return nn(a).reverse();
    };
    b.stackOrderInsideOut = function (a) {
        var b = a.length,
            c,
            d = a.map(Gl),
            e = ye(a).sort(function (a, b) {
                return d[b] - d[a];
            }),
            f = 0,
            g = 0,
            h = [],
            k = [];
        for (a = 0; a < b; ++a) (c = e[a]), f < g ? ((f += d[c]), h.push(c)) : ((g += d[c]), k.push(c));
        return k.reverse().concat(h);
    };
    b.stackOrderNone = ye;
    b.stackOrderReverse = function (a) {
        return ye(a).reverse();
    };
    b.timeInterval = gb;
    b.timeMillisecond = Gd;
    b.timeMilliseconds = Om;
    b.utcMillisecond = Gd;
    b.utcMilliseconds = Om;
    b.timeSecond = sf;
    b.timeSeconds = Pm;
    b.utcSecond = sf;
    b.utcSeconds = Pm;
    b.timeMinute = Ni;
    b.timeMinutes = Lr;
    b.timeHour = Oi;
    b.timeHours = Mr;
    b.timeDay = mg;
    b.timeDays = Nr;
    b.timeWeek = df;
    b.timeWeeks = Vm;
    b.timeSunday = df;
    b.timeSundays = Vm;
    b.timeMonday = Yh;
    b.timeMondays = Or;
    b.timeTuesday = Qm;
    b.timeTuesdays = Pr;
    b.timeWednesday = Rm;
    b.timeWednesdays = Qr;
    b.timeThursday = Sm;
    b.timeThursdays = Rr;
    b.timeFriday = Tm;
    b.timeFridays = Sr;
    b.timeSaturday = Um;
    b.timeSaturdays = Tr;
    b.timeMonth = Pi;
    b.timeMonths = Ur;
    b.timeYear = Dd;
    b.timeYears = Vr;
    b.utcMinute = Qi;
    b.utcMinutes = Wr;
    b.utcHour = Ri;
    b.utcHours = Xr;
    b.utcDay = ng;
    b.utcDays = Yr;
    b.utcWeek = ef;
    b.utcWeeks = an;
    b.utcSunday = ef;
    b.utcSundays = an;
    b.utcMonday = Zh;
    b.utcMondays = Zr;
    b.utcTuesday = Wm;
    b.utcTuesdays = $r;
    b.utcWednesday = Xm;
    b.utcWednesdays = as;
    b.utcThursday = Ym;
    b.utcThursdays = bs;
    b.utcFriday = Zm;
    b.utcFridays = cs;
    b.utcSaturday = $m;
    b.utcSaturdays = ds;
    b.utcMonth = Si;
    b.utcMonths = es;
    b.utcYear = Ed;
    b.utcYears = fs;
    b.timeFormatDefaultLocale = ol;
    b.timeFormatLocale = hl;
    b.isoFormat = gs;
    b.isoParse = hs;
    b.now = hc;
    b.timer = ob;
    b.timerFlush = Lc;
    b.timeout = kh;
    b.interval = function (a, b, c) {
        var d = new Wb(),
            e = b;
        if (null == b) return d.restart(a, b, c), d;
        b = +b;
        c = null == c ? hc() : +c;
        d.restart(
            function vo(f) {
                f += e;
                d.restart(vo, (e += b), c);
                a(f);
            },
            b,
            c
        );
        return d;
    };
    b.transition = D;
    b.active = function (a, b) {
        var c = a.__transition,
            d,
            e;
        if (c) for (e in ((b = null == b ? null : b + ""), c)) if (1 < (d = c[e]).state && d.name === b) return new sa([[a]], kr, b, +e);
        return null;
    };
    b.interrupt = vd;
    b.voronoi = function () {
        function a(e) {
            return new ni(
                e.map(function (a, d) {
                    var f = [Math.round(b(a, d, e) / Fa) * Fa, Math.round(c(a, d, e) / Fa) * Fa];
                    f.index = d;
                    f.data = a;
                    return f;
                }),
                d
            );
        }
        var b = Cq,
            c = Dq,
            d = null;
        a.polygons = function (b) {
            return a(b).polygons();
        };
        a.links = function (b) {
            return a(b).links();
        };
        a.triangles = function (b) {
            return a(b).triangles();
        };
        a.x = function (c) {
            return arguments.length ? ((b = "function" === typeof c ? c : on(+c)), a) : b;
        };
        a.y = function (b) {
            return arguments.length ? ((c = "function" === typeof b ? b : on(+b)), a) : c;
        };
        a.extent = function (b) {
            return arguments.length
                ? ((d =
                      null == b
                          ? null
                          : [
                                [+b[0][0], +b[0][1]],
                                [+b[1][0], +b[1][1]],
                            ]),
                  a)
                : d && [
                      [d[0][0], d[0][1]],
                      [d[1][0], d[1][1]],
                  ];
        };
        a.size = function (b) {
            return arguments.length
                ? ((d =
                      null == b
                          ? null
                          : [
                                [0, 0],
                                [+b[0], +b[1]],
                            ]),
                  a)
                : d && [d[1][0] - d[0][0], d[1][1] - d[0][1]];
        };
        return a;
    };
    b.zoom = function () {
        function a(b) {
            b.on("wheel.zoom", l)
                .on("mousedown.zoom", m)
                .on("dblclick.zoom", n)
                .on("touchstart.zoom", p)
                .on("touchmove.zoom", t)
                .on("touchend.zoom touchcancel.zoom", r)
                .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)")
                .property("__zoom", Ol);
        }
        function c(a, b) {
            b = Math.max(v, Math.min(y, b));
            return b === a.k ? a : new Ic(b, a.x, a.y);
        }
        function d(a, b, c) {
            var e = b[0] - c[0] * a.k;
            b = b[1] - c[1] * a.k;
            return e === a.x && b === a.y ? a : new Ic(a.k, e, b);
        }
        function e(a, b) {
            var c = a.invertX(b[0][0]) - x,
                d = a.invertX(b[1][0]) - z,
                f = a.invertY(b[0][1]) - C,
                g = a.invertY(b[1][1]) - B;
            return a.translate(d > c ? (c + d) / 2 : Math.min(0, c) || Math.max(0, d), g > f ? (f + g) / 2 : Math.min(0, f) || Math.max(0, g));
        }
        function f(a) {
            return [(+a[0][0] + +a[1][0]) / 2, (+a[0][1] + +a[1][1]) / 2];
        }
        function g(a, b, c) {
            a.on("start.zoom", function () {
                h(this, arguments).start();
            })
                .on("interrupt.zoom end.zoom", function () {
                    h(this, arguments).end();
                })
                .tween("zoom", function () {
                    var a = arguments,
                        d = h(this, a),
                        e = u.apply(this, a),
                        g = c || f(e),
                        k = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),
                        e = this.__zoom,
                        l = "function" === typeof b ? b.apply(this, a) : b,
                        m = G(e.invert(g).concat(k / e.k), l.invert(g).concat(k / l.k));
                    return function (a) {
                        if (1 === a) a = l;
                        else {
                            a = m(a);
                            var b = k / a[2];
                            a = new Ic(b, g[0] - a[0] * b, g[1] - a[1] * b);
                        }
                        d.zoom(null, a);
                    };
                });
        }
        function h(a, b) {
            for (var c = 0, d = D.length, e; c < d; ++c) if ((e = D[c]).that === a) return e;
            return new k(a, b);
        }
        function k(a, b) {
            this.that = a;
            this.args = b;
            this.index = -1;
            this.active = 0;
            this.extent = u.apply(a, b);
        }
        function l() {
            function a() {
                f.wheel = null;
                f.end();
            }
            if (w.apply(this, arguments)) {
                var f = h(this, arguments),
                    g = this.__zoom,
                    k = Math.max(v, Math.min(y, g.k * Math.pow(2, (-b.event.deltaY * (b.event.deltaMode ? 120 : 1)) / 500))),
                    m = Uc(this);
                if (f.wheel) {
                    if (f.mouse[0][0] !== m[0] || f.mouse[0][1] !== m[1]) f.mouse[1] = g.invert((f.mouse[0] = m));
                    clearTimeout(f.wheel);
                } else {
                    if (g.k === k) return;
                    f.mouse = [m, g.invert(m)];
                    vd(this);
                    f.start();
                }
                tf();
                f.wheel = setTimeout(a, 150);
                f.zoom("mouse", e(d(c(g, k), f.mouse[0], f.mouse[1]), f.extent));
            }
        }
        function m() {
            function a() {
                tf();
                if (!f.moved) {
                    var c = b.event.clientX - l,
                        g = b.event.clientY - n;
                    f.moved = c * c + g * g > L;
                }
                f.zoom("mouse", e(d(f.that.__zoom, (f.mouse[0] = Uc(f.that)), f.mouse[1]), f.extent));
            }
            function c() {
                g.on("mousemove.zoom mouseup.zoom", null);
                Aa(b.event.view, f.moved);
                tf();
                f.end();
            }
            if (!I && w.apply(this, arguments)) {
                var f = h(this, arguments),
                    g = Pb(b.event.view).on("mousemove.zoom", a, !0).on("mouseup.zoom", c, !0),
                    k = Uc(this),
                    l = b.event.clientX,
                    n = b.event.clientY;
                Mf(b.event.view);
                b.event.stopImmediatePropagation();
                f.mouse = [k, this.__zoom.invert(k)];
                vd(this);
                f.start();
            }
        }
        function n() {
            if (w.apply(this, arguments)) {
                var f = this.__zoom,
                    h = Uc(this),
                    k = f.invert(h),
                    f = e(d(c(f, f.k * (b.event.shiftKey ? 0.5 : 2)), h, k), u.apply(this, arguments));
                tf();
                0 < A ? Pb(this).transition().duration(A).call(g, f, h) : Pb(this).call(a.transform, f);
            }
        }
        function p() {
            if (w.apply(this, arguments)) {
                var a = h(this, arguments),
                    c = b.event.changedTouches,
                    d,
                    e = c.length,
                    f,
                    g,
                    k;
                b.event.stopImmediatePropagation();
                for (f = 0; f < e; ++f) ((g = c[f]), (k = Cg(this, c, g.identifier)), (k = [k, this.__zoom.invert(k), g.identifier]), a.touch0) ? a.touch1 || (a.touch1 = k) : ((a.touch0 = k), (d = !0));
                if (E && ((E = clearTimeout(E)), !a.touch1)) {
                    a.end();
                    (k = Pb(this).on("dblclick.zoom")) && k.apply(this, arguments);
                    return;
                }
                d &&
                    ((E = setTimeout(function () {
                        E = null;
                    }, 500)),
                    vd(this),
                    a.start());
            }
        }
        function t() {
            var a = h(this, arguments),
                f = b.event.changedTouches,
                g = f.length,
                k,
                l,
                m,
                n;
            tf();
            E && (E = clearTimeout(E));
            for (k = 0; k < g; ++k) (l = f[k]), (m = Cg(this, f, l.identifier)), a.touch0 && a.touch0[2] === l.identifier ? (a.touch0[0] = m) : a.touch1 && a.touch1[2] === l.identifier && (a.touch1[0] = m);
            l = a.that.__zoom;
            if (a.touch1) {
                m = a.touch0[0];
                f = a.touch0[1];
                k = a.touch1[0];
                g = a.touch1[1];
                n = (n = k[0] - m[0]) * n + (n = k[1] - m[1]) * n;
                var p = (p = g[0] - f[0]) * p + (p = g[1] - f[1]) * p;
                l = c(l, Math.sqrt(n / p));
                m = [(m[0] + k[0]) / 2, (m[1] + k[1]) / 2];
                n = [(f[0] + g[0]) / 2, (f[1] + g[1]) / 2];
            } else if (a.touch0) (m = a.touch0[0]), (n = a.touch0[1]);
            else return;
            a.zoom("touch", e(d(l, m, n), a.extent));
        }
        function r() {
            var a = h(this, arguments),
                c = b.event.changedTouches,
                d = c.length,
                e,
                f;
            b.event.stopImmediatePropagation();
            I && clearTimeout(I);
            I = setTimeout(function () {
                I = null;
            }, 500);
            for (e = 0; e < d; ++e) (f = c[e]), a.touch0 && a.touch0[2] === f.identifier ? delete a.touch0 : a.touch1 && a.touch1[2] === f.identifier && delete a.touch1;
            a.touch1 && !a.touch0 && ((a.touch0 = a.touch1), delete a.touch1);
            a.touch0 ? (a.touch0[1] = this.__zoom.invert(a.touch0[0])) : a.end();
        }
        var w = Nq,
            u = Oq,
            v = 0,
            y = Infinity,
            x = -y,
            z = y,
            C = x,
            B = z,
            A = 250,
            G = im,
            D = [],
            J = q("start", "zoom", "end"),
            E,
            I,
            L = 0;
        a.transform = function (a, b) {
            var c = a.selection ? a.selection() : a;
            c.property("__zoom", Ol);
            a !== c
                ? g(a, b)
                : c.interrupt().each(function () {
                      h(this, arguments)
                          .start()
                          .zoom(null, "function" === typeof b ? b.apply(this, arguments) : b)
                          .end();
                  });
        };
        a.scaleBy = function (b, c) {
            a.scaleTo(b, function () {
                var a = this.__zoom.k,
                    b = "function" === typeof c ? c.apply(this, arguments) : c;
                return a * b;
            });
        };
        a.scaleTo = function (b, g) {
            a.transform(b, function () {
                var a = u.apply(this, arguments),
                    b = this.__zoom,
                    h = f(a),
                    k = b.invert(h),
                    l = "function" === typeof g ? g.apply(this, arguments) : g;
                return e(d(c(b, l), h, k), a);
            });
        };
        a.translateBy = function (b, c, d) {
            a.transform(b, function () {
                return e(this.__zoom.translate("function" === typeof c ? c.apply(this, arguments) : c, "function" === typeof d ? d.apply(this, arguments) : d), u.apply(this, arguments));
            });
        };
        k.prototype = {
            start: function () {
                1 === ++this.active && ((this.index = D.push(this) - 1), this.emit("start"));
                return this;
            },
            zoom: function (a, b) {
                this.mouse && "mouse" !== a && (this.mouse[1] = b.invert(this.mouse[0]));
                this.touch0 && "touch" !== a && (this.touch0[1] = b.invert(this.touch0[0]));
                this.touch1 && "touch" !== a && (this.touch1[1] = b.invert(this.touch1[0]));
                this.that.__zoom = b;
                this.emit("zoom");
                return this;
            },
            end: function () {
                0 === --this.active && (D.splice(this.index, 1), (this.index = -1), this.emit("end"));
                return this;
            },
            emit: function (b) {
                H(new Mq(a, b, this.that.__zoom), J.apply, J, [b, this.that, this.args]);
            },
        };
        a.filter = function (b) {
            return arguments.length ? ((w = "function" === typeof b ? b : pn(!!b)), a) : w;
        };
        a.extent = function (b) {
            return arguments.length
                ? ((u =
                      "function" === typeof b
                          ? b
                          : pn([
                                [+b[0][0], +b[0][1]],
                                [+b[1][0], +b[1][1]],
                            ])),
                  a)
                : u;
        };
        a.scaleExtent = function (b) {
            return arguments.length ? ((v = +b[0]), (y = +b[1]), a) : [v, y];
        };
        a.translateExtent = function (b) {
            return arguments.length
                ? ((x = +b[0][0]), (z = +b[1][0]), (C = +b[0][1]), (B = +b[1][1]), a)
                : [
                      [x, C],
                      [z, B],
                  ];
        };
        a.duration = function (b) {
            return arguments.length ? ((A = +b), a) : A;
        };
        a.interpolate = function (b) {
            return arguments.length ? ((G = b), a) : G;
        };
        a.on = function () {
            var b = J.on.apply(J, arguments);
            return b === J ? a : b;
        };
        a.clickDistance = function (b) {
            return arguments.length ? ((L = (b = +b) * b), a) : Math.sqrt(L);
        };
        return a;
    };
    b.zoomTransform = Nl;
    b.zoomIdentity = oi;
    Object.defineProperty(b, "__esModule", { value: !0 });
});
("use strict");
function transform(b, a) {
    if (b.length != a.length) throw "Mismatched lengths";
    var c = b.length;
    0 != c && (0 == (c & (c - 1)) ? transformRadix2(b, a) : transformBluestein(b, a));
}
function inverseTransform(b, a) {
    transform(a, b);
}
function transformRadix2(b, a) {
    if (b.length != a.length) throw "Mismatched lengths";
    var c = b.length;
    if (1 != c) {
        for (var d = -1, e = 0; 32 > e; e++) 1 << e == c && (d = e);
        if (-1 == d) throw "Length is not a power of 2";
        for (var g = Array(c / 2), f = Array(c / 2), e = 0; e < c / 2; e++) (g[e] = Math.cos((2 * Math.PI * e) / c)), (f[e] = Math.sin((2 * Math.PI * e) / c));
        for (e = 0; e < c; e++) {
            var k;
            k = e;
            for (var h = 0, l = 0; l < d; l++) (h = (h << 1) | (k & 1)), (k >>>= 1);
            k = h;
            k > e && ((h = b[e]), (b[e] = b[k]), (b[k] = h), (h = a[e]), (a[e] = a[k]), (a[k] = h));
        }
        for (d = 2; d <= c; d *= 2)
            for (h = d / 2, l = c / d, e = 0; e < c; e += d) {
                k = e;
                for (var n = 0; k < e + h; k++, n += l) {
                    var q = b[k + h] * g[n] + a[k + h] * f[n],
                        u = -b[k + h] * f[n] + a[k + h] * g[n];
                    b[k + h] = b[k] - q;
                    a[k + h] = a[k] - u;
                    b[k] += q;
                    a[k] += u;
                }
            }
    }
}
function transformBluestein(b, a) {
    if (b.length != a.length) throw "Mismatched lengths";
    for (var c = b.length, d = 1; d < 2 * c + 1; ) d *= 2;
    for (var e = Array(c), g = Array(c), f = 0; f < c; f++) {
        var k = (f * f) % (2 * c);
        e[f] = Math.cos((Math.PI * k) / c);
        g[f] = Math.sin((Math.PI * k) / c);
    }
    for (var k = Array(d), h = Array(d), f = 0; f < c; f++) (k[f] = b[f] * e[f] + a[f] * g[f]), (h[f] = -b[f] * g[f] + a[f] * e[f]);
    for (f = c; f < d; f++) k[f] = h[f] = 0;
    var l = Array(d),
        n = Array(d);
    l[0] = e[0];
    n[0] = g[0];
    for (f = 1; f < c; f++) (l[f] = l[d - f] = e[f]), (n[f] = n[d - f] = g[f]);
    for (f = c; f <= d - c; f++) l[f] = n[f] = 0;
    var q = Array(d),
        d = Array(d);
    convolveComplex(k, h, l, n, q, d);
    for (f = 0; f < c; f++) (b[f] = q[f] * e[f] + d[f] * g[f]), (a[f] = -q[f] * g[f] + d[f] * e[f]);
}
function convolveReal(b, a, c) {
    if (b.length != a.length || b.length != c.length) throw "Mismatched lengths";
    for (var d = Array(b.length), e = 0; e < d.length; e++) d[e] = 0;
    convolveComplex(b, d, a, d.slice(), c, d.slice());
}
function convolveComplex(b, a, c, d, e, g) {
    if (b.length != a.length || b.length != c.length || c.length != d.length || b.length != e.length || e.length != g.length) throw "Mismatched lengths";
    var f = b.length;
    b = b.slice();
    a = a.slice();
    c = c.slice();
    d = d.slice();
    transform(b, a);
    transform(c, d);
    for (var k = 0; k < f; k++) {
        var h = b[k] * c[k] - a[k] * d[k];
        a[k] = a[k] * c[k] + b[k] * d[k];
        b[k] = h;
    }
    inverseTransform(b, a);
    for (k = 0; k < f; k++) (e[k] = b[k] / f), (g[k] = a[k] / f);
}
var Tools = (function () {
    function b(a, b, d, e) {
        return null != a && void 0 != a && a.hasOwnProperty(b) ? (e ? (a[b] ? a[b].toLowerCase() : "") : a[b]) : d;
    }
    return {
        convertJoulesToWh: function (a) {
            return { value: a / 3600, units: "Wh" };
        },
        convertRssiToBars: function (a) {
            return null != a && 7 > a ? 1 : null != a && 13 > a ? 2 : null != a && 19 > a ? 3 : null != a && 25 > a ? 4 : null != a && 32 > a ? 5 : 0;
        },
        handleAjaxError: function (a, b, d, e, g) {
            if (1 == g) EnvoyBackboneApp.errorModal.model.set({ text: I18n.t("envoy_backbone.errors.error_message") }), EnvoyBackboneApp.mediator.trigger("app:networkUpdateBadRequest");
            else if (401 == b.status || 403 == b.status)
                "auth" != EnvoyBackboneApp.lastRoute &&
                    0 != EnvoyBackboneApp.lastRoute.lastIndexOf("network", 0) &&
                    (EnvoyBackboneApp.errorModal.model.set({ text: I18n.t("envoy_backbone.errors.not_authorized") }),
                    (EnvoyBackboneApp.auth_failed_count = 0),
                    EnvoyBackboneApp.router.navigate("auth", { trigger: !0 }),
                    EnvoyBackboneApp.mediator.trigger("app:dataNotAuthorized"));
            else {
                if (void 0 != b.responseText && "" != b.responseText && b.responseText.match("^{"))
                    if (((e = jQuery.parseJSON(b.responseText)), void 0 != e.reason_code && 1426 == e.reason_code)) d = "notAllowed";
                    else {
                        if (void 0 != e.message && void 0 != e.params && void 0 != EnvoyBackboneApp) {
                            EnvoyBackboneApp.errorModal.model.set({ text: I18n.t("envoy_backbone.errors.save_failed") + " " + I18n.t(e.message, e.params[0]) });
                            EnvoyBackboneApp.mediator.trigger("app:networkUpdateBadRequest");
                            return;
                        }
                        if ("Interface not DHCP" == e.error) {
                            EnvoyBackboneApp.errorModal.model.set({ text: I18n.t("envoy_backbone.errors.interface_not_dhcp") });
                            EnvoyBackboneApp.mediator.trigger("app:networkUpdateBadRequest");
                            return;
                        }
                    }
                "notAllowed" == d && void 0 != EnvoyBackboneApp
                    ? EnvoyBackboneApp.mediator.trigger("app:dataNotAllowed")
                    : "error" == d && void 0 != EnvoyBackboneApp
                    ? (EnvoyBackboneApp.bb_ajax_errors.push({ url: a, statusText: b.statusText, time: new Date(), statusCode: b.status }),
                      EnvoyBackboneApp.mediator.trigger("app:dataError"),
                      403 == b.status && 0 == EnvoyBackboneApp.isToolkit() && Tools.reloadWindow())
                    : "timeout" == d && void 0 != EnvoyBackboneApp && (EnvoyBackboneApp.bb_ajax_timeouts.push({ url: a, time: new Date() }), EnvoyBackboneApp.mediator.trigger("app:dataTimeout"));
            }
        },
        setEnvoyCookie: function (a) {
            if (void 0 != BackboneConfig.serial && "object" == typeof a) {
                var b = $.cookie("envoy_" + BackboneConfig.serial),
                    b = _.isNull(b) || _.isEmpty(b) ? {} : JSON.parse(b);
                a = _.extend(b, a);
                $.cookie("envoy_" + BackboneConfig.serial, JSON.stringify(a), { expires: 30, path: "/" });
                return !0;
            }
        },
        getEnvoyCookie: function (a) {
            return void 0 == BackboneConfig.serial || _.isNull($.cookie("envoy_" + BackboneConfig.serial)) || _.isEmpty($.cookie("envoy_" + BackboneConfig.serial)) ? void 0 : JSON.parse($.cookie("envoy_" + BackboneConfig.serial))[a];
        },
        wait: function (a) {
            for (var b = new Date().getTime(); new Date().getTime() < b + a; );
        },
        translateMeterStatus: function (a, b) {
            return "check-wiring" == a ? a : "disabled" == b ? "not-metering" : a;
        },
        getTariffRateChoices: function () {
            return [
                { choiceValue: "flat", translatedName: I18n.t("envoy_backbone.tariff.single_rate") },
                { choiceValue: "tiered", translatedName: I18n.t("envoy_backbone.tariff.tiered") },
                { choiceValue: "tou", translatedName: I18n.t("envoy_backbone.tariff.time_of_use") },
            ];
        },
        getPeakStartTimeValues: function () {
            return _.range(12, 24, 1);
        },
        getTariffRateStringFromVal: function (a) {
            if (void 0 != a || null != a) return _.contains(this.getPeakStartTimeValues(), a) ? "tou" : "flat";
        },
        getTariffRateTranslatedString: function (a) {
            var b = this.getTariffRateStringFromVal(a);
            if (void 0 != b)
                return _.find(Tools.getTariffRateChoices(), function (a) {
                    return a.choiceValue == b;
                }).translatedName;
        },
        getTariffTranslatedString: function (a) {
            if (void 0 != a && "" != a && "none" != a) {
                var b = _.find(Tools.getTariffRateChoices(), function (b) {
                    return b.choiceValue == a;
                });
                return b && b.translatedName;
            }
            return I18n.t("envoy_backbone.overview.ac_batteries.not_set");
        },
        getCurrencyFormat: function (a) {
            if (!a) {
                if (0 == I18n.locale.indexOf("en")) {
                    var b = I18n.locale.split("-");
                    b[1] && ((BackboneConfig.country = a = b[1]), (BackboneConfig.country_set = !0));
                }
                a || (a = _.first(iso.findCurrency(EnvoyBackboneApp.tariff.get("tariff.currency.code")).countries));
            }
            return iso.getCurrencyFormat(a);
        },
        tariffGetHash: function (a, b) {
            return a.hasOwnProperty(b) && !Array.isArray(a) ? a[b] : {};
        },
        tariffGetArray: function (a, b) {
            return null != a && void 0 != a && a.hasOwnProperty(b) && Array.isArray(a[b]) ? a[b] : [];
        },
        tariffGetString: b,
        tariffGetInt: function (a, b, d) {
            return null != a && void 0 != a && a.hasOwnProperty(b) ? parseInt(a[b]) : d;
        },
        tariffGetFloat: function (a, b, d) {
            return null != a && void 0 != a && a.hasOwnProperty(b) ? parseFloat(a[b]) : d;
        },
        tariffGetbool: function (a, b, d) {
            return null != a && void 0 != a && a.hasOwnProperty(b) ? "true" === a[b].toString : d;
        },
        tariffGetDays: function (a, b, d) {
            if (null != a && void 0 != a && a.hasOwnProperty(b)) {
                var e = "Sun Mon Tue Wed Thu Fri Sat".split(" ");
                a = a[b].split(",");
                return (
                    _.filter(a, function (a) {
                        return _.contains(e, a);
                    }) + ""
                );
            }
            return "all" === d ? e : d;
        },
        tariffSplitDate: function (a) {
            return { date: a, month: a.split("/")[0], day: a.split("/")[1] };
        },
        tariffValidateId: function (a, c, d) {
            a = b(a, "id", "", !0);
            d = { season: { regex: /^season_\d*$/i, fallback: c + "_" + (d + 1) }, day: { regex: /^(all_days|weekdays|weekend)$/, fallback: "all_days" }, period: { regex: /^(period_\d*|\s*|filler)$/i, fallback: c + "_" + (d + 1) } };
            return a.match(d[c].regex) ? a : d[c].fallback;
        },
        reloadWindow: function () {
            window.location.reload(!0);
        },
        getDeviceCount: function () {
            var a = parseInt(EnvoyBackboneApp.initialTargetInverterCount());
            _.isNaN(a) && (a = 0);
            var b = parseInt(EnvoyBackboneApp.initialTargetAcbCount());
            _.isNaN(b) && (b = 0);
            var d = parseInt(EnvoyBackboneApp.initialTargetEnchargeBatteriesCount());
            _.isNaN(d) && (d = 0);
            return a + b + d;
        },
        calculatePollingPeriod: function (a) {
            return 30 > a ? 6e4 : 100 > a ? 12e4 : 3e5;
        },
        baseLocale: function () {
            return I18n.locale.split("-")[0];
        },
        setValidatorMessages: function () {
            $.validator.messages = {
                required: I18n.t("envoy_backbone.jquery_validate.messages.required"),
                remote: I18n.t("envoy_backbone.jquery_validate.messages.remote"),
                email: I18n.t("envoy_backbone.jquery_validate.messages.email"),
                url: I18n.t("envoy_backbone.jquery_validate.messages.url"),
                date: I18n.t("envoy_backbone.jquery_validate.messages.date"),
                dateISO: I18n.t("envoy_backbone.jquery_validate.messages.dateISO"),
                number: I18n.t("envoy_backbone.jquery_validate.messages.number"),
                digits: I18n.t("envoy_backbone.jquery_validate.messages.digits"),
                creditcard: I18n.t("envoy_backbone.jquery_validate.messages.creditcard"),
                equalTo: I18n.t("envoy_backbone.jquery_validate.messages.equalTo"),
                maxlength: $.validator.format(I18n.t("envoy_backbone.jquery_validate.messages.maxlength")),
                minlength: $.validator.format(I18n.t("envoy_backbone.jquery_validate.messages.minlength")),
                rangelength: $.validator.format(I18n.t("envoy_backbone.jquery_validate.messages.rangelength")),
                range: $.validator.format(I18n.t("envoy_backbone.jquery_validate.messages.range")),
                max: $.validator.format(I18n.t("envoy_backbone.jquery_validate.messages.max")),
                min: $.validator.format(I18n.t("envoy_backbone.jquery_validate.messages.min")),
                ipv4: I18n.t("envoy_backbone.jquery_validate.messages.ipv4"),
                wep_key: I18n.t("envoy_backbone.jquery_validate.messages.wep_key"),
                an_number: I18n.t("envoy_backbone.jquery_validate.messages.an_number"),
                an_not_zero: I18n.t("envoy_backbone.tariff.zero_not_allowed"),
                addedTierPercent: I18n.t("envoy_backbone.jquery_validate.messages.addedTierPercent"),
            };
        },
        clamp: function (a, b, d) {
            return a < b ? b : a > d ? d : a;
        },
    };
})();
String.prototype.trim ||
    (String.prototype.trim = function () {
        return this.replace(/^\s+|\s+$/g, "");
    });
var Precision = (function () {
        function b(b, f, k) {
            if ("number" !== typeof b) {
                var h, l, n;
                for (n in b) (l = b[n]), c(l) && (void 0 == h || l < h) && (h = l);
                b = h;
            }
            if (!c(b)) return { scale: 1, units: f, precision: k };
            c(b) && ((h = d(b)), (h = null == h ? null : e[h]), (b = a(b / h, 2) * h));
            h = d(b);
            b = parseInt(h / 3);
            h = 2 - (h % 3);
            0 == b ? (f = { scale: 1, units: f, precision: Math.min(h, k) }) : ((k = 3 * b), (f = { scale: null == k ? null : e[k], precision: h, units: "kMGTPEZY".charAt(b - 1) + f }));
            return f;
        }
        function a(a, b) {
            if (null == b || 0 === b) return parseInt(a);
            var c = null == b ? null : e[b];
            return Math.round(a * c) / c;
        }
        function c(a) {
            return isFinite(a) && 0 != a;
        }
        function d(a) {
            if (null == a) return null;
            0 > a && (a = -a);
            for (var b = 0; 10 <= a; ) (b += 1), (a /= 10);
            return b;
        }
        var e = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13, 1e14, 1e15, 1e16, 1e17, 1e18, 1e19, 1e20];
        return {
            normalize: function (a, c, d, e) {
                var l;
                e || (l = b(a, c, 0));
                var n, q, u;
                for (u in a)
                    e && (l = b(a[u], c, 0)),
                        (n = a[u]),
                        "raw" == EnvoyBackboneApp.getEnergyUnits()
                            ? (_.isNumber(n) || ((n = parseFloat(n)), _.isNaN(n) && (n = 0)), (q = n), d && (q = Math.abs(n)), (a[u] = { value: n, formatted: I18n.toNumber(q, { precision: 0 }), units: c }))
                            : "raw_0" == EnvoyBackboneApp.getEnergyUnits()
                            ? (_.isNumber(n) || ((n = parseFloat(n)), _.isNaN(n) && (n = 0)), (q = n), d && (q = Math.abs(n)), (a[u] = { value: n, formatted: I18n.toNumber(q, { precision: 1 }), units: c }))
                            : ((q = n), d && (q = Math.abs(n)), (q = I18n.toNumber(q / l.scale, { precision: l.precision })), (a[u] = { value: n, formatted: q, units: l.units }));
                return a;
            },
            display_format: b,
            force_to_unit: function (a, b) {
                var c;
                if ("number" === typeof a) c = a;
                else return { display: "--", units: b, value: a };
                var d = Math.pow(1e3, "kMGTPEZY".search(b.charAt(0)) + 1);
                1 < d
                    ? ((c = parseFloat(c) / d), (c = 0.005 > c && 0 < c ? "&lt;0.01" : 10 > c ? I18n.toNumber(c, { precision: 2 }) : 100 > c ? I18n.toNumber(c, { precision: 1 }) : I18n.toNumber(c, { precision: 0 })))
                    : (c = I18n.toNumber(c, { precision: 0 }));
                return { display: c, units: b, value: a };
            },
            round_with_precision: a,
        };
    })(),
    BackboneConfig = (window.BackboneConfig = window.BackboneConfig || {
        arrays_built: !1,
        authentication_authority_url: "https://mock-authms.herokuapp.com/",
        backbone_public: !1,
        country: "US",
        country_set: !1,
        cte_mode: !1,
        decimal_separator: ".",
        e_units: "sig_fig",
        envoy_type: "NA",
        installer_home_url: "/envoy/installer/setup/home", // was  /installer/setup/home
        internal_meter: !1,
        max_errors: 12,
        max_timeouts: 12,
        polling_interval: 3e5,
        profiles: !0,
        region: "",
        serial: "991000000123",
        sim_polling_frequency: void 0,
        software_version: "D5.0.9 (e3c0f51)",
        toolkit: !0,
        fast_data: !0,
        plc_analyse: !1,
    }),
    EnvoyBackboneApp = (window.EnvoyBackboneApp = window.EnvoyBackboneApp || {
        Models: {},
        Collections: {},
        Views: {},
        Mixin: {},
        Router: {},
        Tools: {},
        wallpaper: {},
        config: { mobilesize: 640 },
        domReady: !1,
        initialize: function () {},
        hasAcknowledgedScanPrompt: !1,
        currentView: "",
        InfoBlockType: { IN_PROGRESS: 1, PROBLEM: 2, SUCCESS: 3, INFO: 4 },
        METER_WIZARD_WATT_TOLERANCE: 10,
        isPublic: function () {
            return void 0 != BackboneConfig.backbone_public && 0 == BackboneConfig.backbone_public ? !1 : !0;
        },
        envoyUIReady: function () {
            var b = EnvoyBackboneApp.isPublic() ? "home_owner" : "installer",
                b = { ready: EnvoyBackboneApp.endpointTracker.gotAllResponses(b) };
            return JSON.stringify(b);
        },
        showProfiles: function () {
            return !this.isPublic();
        },
        showInternalMeters: function () {
            return void 0 != BackboneConfig.internal_meter && 1 == BackboneConfig.internal_meter ? !0 : !1;
        },
        showNsrItems: function () {
            return "NA" != BackboneConfig.envoy_type;
        },
        protocol: function () {
            return window.location.protocol;
        },
        ip_address: function () {
            return window.location.hostname;
        },
        host: function () {
            return window.location.host;
        },
        setDecimalSeparator: function () {
            BackboneConfig.decimal_separator = iso.getDecimalSeparator();
        },
        initialTargetInverterCount: function () {
            BackboneConfig.initial_target_count = "";
            void 0 != BackboneConfig.array_gun_count && 0 <= BackboneConfig.array_gun_count
                ? (BackboneConfig.initial_target_count = BackboneConfig.array_gun_count)
                : void 0 != BackboneConfig.target_inverter_count && 0 < BackboneConfig.target_inverter_count
                ? (BackboneConfig.initial_target_count = BackboneConfig.target_inverter_count)
                : void 0 != EnvoyBackboneApp.savedTargetInverterCount()
                ? (BackboneConfig.initial_target_count = EnvoyBackboneApp.savedTargetInverterCount())
                : void 0 != BackboneConfig.discovered_inverter_count && 0 < BackboneConfig.discovered_inverter_count && (BackboneConfig.initial_target_count = BackboneConfig.discovered_inverter_count);
            return BackboneConfig.initial_target_count;
        },
        savedTargetInverterCount: function () {
            return 0 != BackboneConfig.cte_mode || void 0 == Tools.getEnvoyCookie("target_count") || _.isNaN(parseInt(Tools.getEnvoyCookie("target_count"))) ? void 0 : parseInt(Tools.getEnvoyCookie("target_count"));
        },
        initialTargetAcbCount: function () {
            BackboneConfig.initial_target_acb_count = "";
            void 0 != BackboneConfig.array_gun_acb_count && 0 <= BackboneConfig.array_gun_acb_count
                ? (BackboneConfig.initial_target_acb_count = BackboneConfig.array_gun_acb_count)
                : void 0 != BackboneConfig.target_acb_count && 0 < BackboneConfig.target_acb_count
                ? (BackboneConfig.initial_target_acb_count = BackboneConfig.target_acb_count)
                : void 0 != EnvoyBackboneApp.savedTargetAcbCount()
                ? (BackboneConfig.initial_target_acb_count = EnvoyBackboneApp.savedTargetAcbCount())
                : void 0 != BackboneConfig.discovered_acb_count && 0 < BackboneConfig.discovered_acb_count && (BackboneConfig.initial_target_acb_count = BackboneConfig.discovered_acb_count);
            return BackboneConfig.initial_target_acb_count;
        },
        savedTargetAcbCount: function () {
            return 0 != BackboneConfig.cte_mode || void 0 == Tools.getEnvoyCookie("target_acb_count") || _.isNaN(parseInt(Tools.getEnvoyCookie("target_acb_count"))) ? void 0 : parseInt(Tools.getEnvoyCookie("target_acb_count"));
        },
        initialTargetNsrCount: function () {
            BackboneConfig.initial_target_nsr_count = "";
            void 0 != BackboneConfig.array_gun_nsr_count && 0 <= BackboneConfig.array_gun_nsr_count
                ? (BackboneConfig.initial_target_nsr_count = BackboneConfig.array_gun_nsr_count)
                : void 0 != BackboneConfig.target_nsr_count && 0 < BackboneConfig.target_nsr_count
                ? (BackboneConfig.initial_target_nsr_count = BackboneConfig.target_nsr_count)
                : void 0 != EnvoyBackboneApp.savedTargetNsrCount()
                ? (BackboneConfig.initial_target_nsr_count = EnvoyBackboneApp.savedTargetNsrCount())
                : void 0 != BackboneConfig.discovered_nsr_count && 0 < BackboneConfig.discovered_nsr_count && (BackboneConfig.initial_target_nsr_count = BackboneConfig.discovered_nsr_count);
            return BackboneConfig.initial_target_nsr_count;
        },
        savedTargetNsrCount: function () {
            return 0 != BackboneConfig.cte_mode || void 0 == Tools.getEnvoyCookie("target_nsr_count") || _.isNaN(parseInt(Tools.getEnvoyCookie("target_nsr_count"))) ? void 0 : parseInt(Tools.getEnvoyCookie("target_nsr_count"));
        },
        initialTargetEnchargeBatteriesCount: function () {
            BackboneConfig.initial_target_encharge_batteries_count = "";
            void 0 != BackboneConfig.array_gun_encharge_count && 0 <= BackboneConfig.array_gun_encharge_count
                ? (BackboneConfig.initial_target_encharge_batteries_count = BackboneConfig.array_gun_encharge_count)
                : void 0 != BackboneConfig.target_encharge_batteries_count && 0 < BackboneConfig.target_encharge_batteries_count
                ? (BackboneConfig.initial_target_encharge_batteries_count = BackboneConfig.target_encharge_batteries_count)
                : void 0 != EnvoyBackboneApp.savedTargetEnchargeBatteriesCount()
                ? (BackboneConfig.initial_target_encharge_batteries_count = EnvoyBackboneApp.savedTargetEnchargeBatteriesCount())
                : void 0 != BackboneConfig.discovered_encharge_count && 0 < BackboneConfig.discovered_encharge_count && (BackboneConfig.initial_target_encharge_batteries_count = BackboneConfig.discovered_encharge_count);
            return BackboneConfig.initial_target_encharge_batteries_count;
        },
        savedTargetEnchargeBatteriesCount: function () {
            return 0 != BackboneConfig.cte_mode || void 0 == Tools.getEnvoyCookie("target_encharge_batteries_count") || _.isNaN(parseInt(Tools.getEnvoyCookie("target_encharge_batteries_count")))
                ? void 0
                : parseInt(Tools.getEnvoyCookie("target_encharge_batteries_count"));
        },
        initialTargetEnpowersCount: function () {
            BackboneConfig.initial_target_enpower_count = "";
            void 0 != BackboneConfig.array_gun_enpower_count && 0 <= BackboneConfig.array_gun_enpower_count
                ? (BackboneConfig.initial_target_enpower_count = BackboneConfig.array_gun_enpower_count)
                : void 0 != BackboneConfig.target_enpower_count && 0 < BackboneConfig.target_enpower_count
                ? (BackboneConfig.initial_target_enpower_count = BackboneConfig.target_enpower_count)
                : void 0 != EnvoyBackboneApp.savedTargetEnpowersCount()
                ? (BackboneConfig.initial_target_enpower_count = EnvoyBackboneApp.savedTargetEnpowersCount())
                : void 0 != BackboneConfig.discovered_enpower_count && 0 < BackboneConfig.discovered_enpower_count && (BackboneConfig.initial_target_enpower_count = BackboneConfig.discovered_enpower_count);
            return BackboneConfig.initial_target_enpower_count;
        },
        savedTargetEnpowersCount: function () {
            return 0 != BackboneConfig.cte_mode || void 0 == Tools.getEnvoyCookie("target_enpower_count") || _.isNaN(parseInt(Tools.getEnvoyCookie("target_enpower_count"))) ? void 0 : parseInt(Tools.getEnvoyCookie("target_enpower_count"));
        },
        showInverterCountPrompt: function () {
            var b = !0,
                a = !0,
                c = !0;
            1 != BackboneConfig.show_prompt ||
            0 != BackboneConfig.cte_mode ||
            void 0 == this.savedTargetInverterCount() ||
            (void 0 != BackboneConfig.initial_target_count && BackboneConfig.initial_target_count != this.savedTargetInverterCount())
                ? 1 == BackboneConfig.show_prompt &&
                  0 == BackboneConfig.cte_mode &&
                  void 0 != this.savedTargetInverterCount() &&
                  void 0 != BackboneConfig.initial_target_count &&
                  BackboneConfig.initial_target_count != this.savedTargetInverterCount()
                    ? (0 > BackboneConfig.initial_target_count && 0 <= this.savedTargetInverterCount() && (BackboneConfig.initial_target_count = this.savedTargetInverterCount()), (b = !0))
                    : void 0 != BackboneConfig.initial_target_count && 0 <= BackboneConfig.initial_target_count && void 0 != BackboneConfig.show_prompt && 0 == BackboneConfig.show_prompt && (b = !1)
                : void 0 != BackboneConfig.initial_target_count && 0 > BackboneConfig.initial_target_count
                ? (b = !0)
                : ((BackboneConfig.initial_target_count = this.savedTargetInverterCount()), (b = !1));
            1 != BackboneConfig.show_prompt ||
            0 != BackboneConfig.cte_mode ||
            void 0 == this.savedTargetAcbCount() ||
            (void 0 != BackboneConfig.initial_target_acb_count && BackboneConfig.initial_target_acb_count != this.savedTargetAcbCount())
                ? 1 == BackboneConfig.show_prompt &&
                  0 == BackboneConfig.cte_mode &&
                  void 0 != this.savedTargetAcbCount() &&
                  void 0 != BackboneConfig.initial_target_acb_count &&
                  BackboneConfig.initial_target_acb_count != this.savedTargetAcbCount()
                    ? (0 > BackboneConfig.initial_target_acb_count && 0 <= this.savedTargetAcbCount() && (BackboneConfig.initial_target_acb_count = this.savedTargetAcbCount()), (a = !0))
                    : void 0 != BackboneConfig.initial_target_acb_count && 0 <= BackboneConfig.initial_target_acb_count && void 0 != BackboneConfig.show_prompt && 0 == BackboneConfig.show_prompt && (a = !1)
                : void 0 != BackboneConfig.initial_target_acb_count && 0 > BackboneConfig.initial_target_acb_count
                ? (a = !0)
                : ((BackboneConfig.initial_target_acb_count = this.savedTargetAcbCount()), (a = !1));
            c = void 0 != BackboneConfig.show_prompt && 0 == BackboneConfig.show_prompt ? !1 : void 0 == EnvoyBackboneApp.agfProfiles.getSelectedProfile() ? !0 : EnvoyBackboneApp.agfProfiles.agfInfo.get("profile_auto_selected") ? !0 : !1;
            return 1 == b || 1 == a || c;
        },
        target_microinverter_count: 0,
        target_acb_count: 0,
        target_nsr_count: 0,
        target_encharge_batteries_count: 0,
        target_enpower_count: 0,
        isInitialSetup: !0,
        modalIsOpen: !1,
        updateTargetCounts: function (b, a, c) {
            b = parseInt(b) || 0;
            a = parseInt(a) || 0;
            c = parseInt(c) || 0;
            if (b != EnvoyBackboneApp.target_microinverter_count || a != EnvoyBackboneApp.target_acb_count || c != EnvoyBackboneApp.target_nsr_count || 1 == EnvoyBackboneApp.isInitialSetup)
                (EnvoyBackboneApp.target_microinverter_count = b),
                    (EnvoyBackboneApp.target_acb_count = a),
                    (EnvoyBackboneApp.target_nsr_count = c),
                    Tools.setEnvoyCookie({ target_count: b, target_acb_count: a, target_nsr_count: c }),
                    EnvoyBackboneApp.mediator.trigger("app:targetCountUpdated"),
                    EnvoyBackboneApp.mediator.trigger("app:targetAcbCountUpdated"),
                    EnvoyBackboneApp.mediator.trigger("app:targetNsrCountUpdated"),
                    1 == EnvoyBackboneApp.isInitialSetup && (EnvoyBackboneApp.mediator.trigger("app:targetCountSetFirstTime"), (EnvoyBackboneApp.isInitialSetup = !1));
        },
        updateEnsTargetCounts: function (b, a) {
            b = parseInt(b) || 0;
            a = parseInt(a) || 0;
            if (b != EnvoyBackboneApp.target_encharge_batteries_count || a != EnvoyBackboneApp.target_enpower_count || 1 == EnvoyBackboneApp.isInitialSetup)
                (EnvoyBackboneApp.target_encharge_batteries_count = b),
                    (EnvoyBackboneApp.target_enpower_count = a),
                    Tools.setEnvoyCookie({ target_encharge_batteries_count: b, target_enpower_count: a }),
                    EnvoyBackboneApp.mediator.trigger("app:targetEnchargeBatteriesCountUpdated"),
                    EnvoyBackboneApp.mediator.trigger("app:targetEnpowersCountUpdated"),
                    1 == EnvoyBackboneApp.isInitialSetup && (EnvoyBackboneApp.mediator.trigger("app:targetCountSetFirstTime"), (EnvoyBackboneApp.isInitialSetup = !1));
        },
        pollingFrequency: function () {
            if (void 0 != BackboneConfig.sim_polling_frequency && 1 <= BackboneConfig.sim_polling_frequency) return 1e3 * BackboneConfig.sim_polling_frequency;
            if (void 0 != BackboneConfig.polling_frequency && 30 <= BackboneConfig.polling_frequency) return 1e3 * BackboneConfig.polling_frequency;
            var b = Tools.getDeviceCount();
            return Tools.calculatePollingPeriod(b);
        },
        resetPollingInterval: function (b, a) {
            (void 0 == b && "" == b) || clearInterval(b);
            return setInterval(a, Tools.calculatePollingPeriod(EnvoyBackboneApp.target_microinverter_count + EnvoyBackboneApp.target_acb_count));
        },
        ajaxTimeoutLength: function () {
            if (void 0 != BackboneConfig.ajax_timeout && 30 <= BackboneConfig.ajax_timeout) return 1e3 * BackboneConfig.ajax_timeout;
            var b = Tools.getDeviceCount();
            return 30 > b ? 6e4 : 100 > b ? 9e4 : 300 > b ? 15e4 : 2e5;
        },
        lastRoute: "overview",
        maxErrorCount: function () {
            return void 0 != BackboneConfig.max_errors ? BackboneConfig.max_errors : 0;
        },
        maxTimeoutCount: function () {
            return void 0 != BackboneConfig.max_timeouts ? BackboneConfig.max_timeouts : 0;
        },
        getErrorCounts: function () {
            return JSON.stringify({ timeout_count: this.timeout_count, error_count: this.error_count });
        },
        getAjaxTimeouts: function () {
            return JSON.stringify(EnvoyBackboneApp.bb_ajax_timeouts);
        },
        getAjaxErrors: function () {
            return JSON.stringify(EnvoyBackboneApp.bb_ajax_errors);
        },
        getEnergyUnits: function () {
            return void 0 != BackboneConfig.e_units ? BackboneConfig.e_units : "sig_fig";
        },
        isToolkit: function () {
            return 0 == EnvoyBackboneApp.isPublic() && void 0 != BackboneConfig.toolkit && BackboneConfig.toolkit;
        },
        showInverterLink: function (b) {
            return "microinverters" == b && EnvoyBackboneApp.isToolkit() && BackboneConfig.arrays_built;
        },
        showHelpIcon: function () {
            return EnvoyBackboneApp.isToolkit() && BackboneConfig.help_available;
        },
        shouldSuspendPoll: function () {
            return EnvoyBackboneApp.wifiDoingScaryStuff || EnvoyBackboneApp.availableNetworksPolling;
        },
        plcAnalysIsEnabled: function () {
            return "true" === BackboneConfig.plc_analyse;
        },
        availableNetworksPolling: !1,
        country_reg_spec_fetch_count: 0,
        events_interval: "",
        inventory_comm_check_interval: "",
        CountryRegulatorySpecs_interval: "",
        agf_profile_interval: "",
        page_states: {
            communicatingMicroinvertersOpen: !1,
            notcommunicatingMicroinvertersOpen: !1,
            producingMicroinvertersOpen: !1,
            notproducingMicroinvertersOpen: !1,
            communicatingNsrsOpen: !1,
            notcommunicatingNsrsOpen: !1,
            producingNsrsOpen: !1,
            notproducingNsrsOpen: !1,
            communicatingACBatteriesOpen: !1,
            producingAcbOpen: !1,
            notcommunicatingACBatteriesOpen: !1,
            notproducingAcbOpen: !1,
            communicatingEnchargeBatteriesOpen: !1,
            producingEnchargeBatteriesOpen: !1,
            notcommunicatingEnchargeBatteriesOpen: !1,
            notproducingEnchargeBatteriesOpen: !1,
            communicatingEnpowersOpen: !1,
            producingEnpowersOpen: !1,
            notcommunicatingEnpowersOpen: !1,
            notproducingEnpowersOpen: !1,
        },
        modalOpen: !1,
        touch: {},
        error_count: 0,
        bb_ajax_errors: [],
        auth_failed_count: 0,
        timeout_count: 0,
        bb_ajax_timeouts: [],
        scanViewOpen: !1,
        scanFormOptionsExpanded: !1,
        reportMoreInfoExpanded: !1,
        configDetailsExpanded: !1,
        detectedListExpanded: !1,
        acbDetectedListExpanded: !1,
        enchargeBatteriesDetectedListExpanded: !1,
        enpowersDetectedListExpanded: !1,
        password_change_messages: [],
        getInstallerUrl: function () {
            return void 0 != BackboneConfig.installer_home_url ? BackboneConfig.installer_home_url : "/envoy/installer/setup/home"; // was  /installer/setup/home
        },
    });
EnvoyBackboneApp.Mediator = function () {
    var b = _.clone(Backbone.Events);
    $(window).on(
        "resize",
        _.debounce(function (a) {
            b.trigger("window:resize", a);
        }, 100)
    );
    $(window).on("click", function (a) {
        b.trigger("window:click", a);
    });
    $(window).on("keydown", function (a) {
        b.trigger("window:keydown", a);
    });
    $(window).on("mousemove", function (a) {
        b.trigger("window:mousemove", a);
    });
    $(window).on("mouseup", function (a) {
        b.trigger("window:mouseup", a);
    });
    return b;
};
window.console || (window.console = { log: function () {} });
$(document).ready(function () {
    1 == EnvoyBackboneApp.isPublic() ? EnvoyBackboneApp.startPublic() : EnvoyBackboneApp.startInstaller();
});
(function (b) {
    b.Tools.Touch = function (a) {
        var b = { startTime: null },
            d = "tap doubletap dragenter dragend pan panend".split(" "),
            e = null,
            g = null,
            f = !1,
            k = !1,
            h = {},
            l = {},
            n = {},
            q = null,
            u = null,
            v = 0;
        b.init = function () {
            b.enabled() && b.addjQueryEvents();
        };
        b.enabled = function () {
            null === e && (e = "ontouchstart" in window);
            return e;
        };
        b.addjQueryEvents = function () {
            $.each(d, function (a, d) {
                $.event.special[d] = {
                    setup: function (a, d, e) {
                        b.bindEvents(this);
                    },
                    teardown: function (a) {
                        b.removeEvents(this);
                    },
                };
            });
        };
        b.bindEvents = function (a) {
            a.addEventListener("touchstart", b.eventHandler, !1);
            a.addEventListener("touchmove", b.eventHandler, !1);
            a.addEventListener("touchend", b.eventHandler, !1);
        };
        b.removeEvents = function (a) {
            a.removeEventListener("touchstart", b.eventHandler, !1);
            a.removeEventListener("touchmove", b.eventHandler, !1);
            a.removeEventListener("touchend", b.eventHandler, !1);
        };
        b.eventHandler = function (a) {
            var d = $(a.target);
            if (1 < (a.touches ? a.touches.length : 1)) b.twoFingerEvent(a, d);
            else b.oneFingerEvent(a, d);
        };
        b.oneFingerEvent = function (a, d) {
            switch (a.type) {
                case "touchstart":
                    b.dragstart(a, d);
                    break;
                case "touchmove":
                    b.dragenter(a, d);
                    break;
                case "touchend":
                    b.tap(a, d), b.dragend(a, d), b.panstop();
            }
        };
        b.twoFingerEvent = function (a, d) {
            switch (a.type) {
                case "touchstart":
                    b.panstart(a);
                    break;
                case "touchmove":
                    h.x == window.scrollX && h.y == window.scrollY ? b.pan(a, d) : b.panend(a, d);
            }
        };
        b.dragstart = function (a, d) {
            k || ((b.startTime = new Date().getTime()), (l = b.getTouches(a)), b.isInTime(u, 500) || ((u = b.startTime), (v = 0)));
        };
        b.dragenter = function (a, d) {
            if (!k) {
                var e = b.touchTarget(a);
                g != e && (d.trigger($.Event("dragenter", { originalEvent: a, target: e })), (g = e));
                f = !0;
            }
        };
        b.dragend = function (a, d) {
            f && (d.trigger($.Event("dragend", { originalEvent: a, target: b.touchTarget(a) })), (f = !1));
        };
        b.touchTarget = function (a) {
            a = a.changedTouches[0];
            return document.elementFromPoint(a.clientX, a.clientY);
        };
        b.tap = function (a, d) {
            !b.isInTime(b.startTime, 500) || f || k || ((a.clientX = l.x), (a.clientY = l.y), 2 == ++v ? d.trigger($.Event("doubletap", { originalEvent: a })) : d.trigger($.Event("tap", { originalEvent: a })));
        };
        b.panstart = function (a) {
            f || ((k = !0), (l = n = b.getTouchesCenter(a)), (h = { x: window.scrollX, y: window.scrollY }), (b.startTime = new Date().getTime()));
        };
        b.pan = function (a, d) {
            var e,
                f = b.getTouchesCenter(a);
            e = n.x - f.x;
            var g = n.y - f.y;
            if (0 !== e || 0 !== g) (e = b.scrollIntent(e, g, f)), d.trigger($.Event("pan", { deltaX: e.x, deltaY: e.y, originalEvent: a }));
            n = f;
        };
        b.panstop = function () {
            k &&
                setTimeout(function () {
                    k = !1;
                    q = null;
                }, 500);
        };
        b.panend = function (a, d) {
            a.stopPropagation();
            a.preventDefault();
            b.panstop();
            d.trigger($.Event("panend", { originalEvent: a }));
        };
        b.scrollIntent = function (a, d, e) {
            e = b.getDirectionIntent(l, e);
            e = b.setScrollConstraint(e);
            return b.constrainDirection(a, d, e);
        };
        b.getDirectionIntent = function (a, b) {
            var c = (180 / Math.PI) * Math.atan2(a.x - b.x, a.y - b.y);
            absang = Math.abs(c);
            range = 22.5;
            intent = "none";
            absang < range ? (intent = "up") : absang > 180 - range ? (intent = "down") : absang > 90 - range && absang < 90 + range && (intent = 0 > c ? "right" : "left");
            return intent;
        };
        b.setScrollConstraint = function (a) {
            if (!q)
                if (b.isInTime(b.startTime, 500))
                    switch (a) {
                        case "up":
                        case "down":
                            q = "vert";
                            break;
                        case "left":
                        case "right":
                            q = "horz";
                    }
                else q = "free";
            return q;
        };
        b.constrainDirection = function (a, b, c) {
            switch (c) {
                case "horz":
                    b = 0;
                    break;
                case "vert":
                    a = 0;
            }
            return { x: a, y: b };
        };
        b.isInTime = function (a, b) {
            return new Date().getTime() - a < b;
        };
        b.getTouches = function (a) {
            var b = [];
            $.each(a.touches, function (a, c) {
                b.push({ x: c.pageX || c.clientX, y: c.pageY || c.clientY });
            });
            return 1 == b.length ? b[0] : b;
        };
        b.getTouchesCenter = function (a) {
            a = b.getTouches(a);
            return { x: (a[0].x + a[1].x) / 2, y: (a[0].y + a[1].y) / 2 };
        };
        b.init();
        return b;
    };
})(EnvoyBackboneApp);
(function (b) {
    b.ApiUrls = {
        AcbSetSleepMode: "/envoy/admin/lib/acb_config.json",
        AcbGetSleepModeData: "/envoy/admin/lib/acb_config.json",
        AcbCancelSleepMode: "/envoy/admin/lib/acb_config.json",
        AgfProfileIndex: "/envoy/installer/agf/index.json?simplified=true",
        AgfProfileDetails: "/envoy/installer/agf/details.json",
        AgfProfileInverterStatus: "/envoy/installer/agf/inverters_status.json",
        AgfProfileSetProfile: "/envoy/installer/agf/set_profile.json",
        CellularConfig: "/envoy/admin/lib/network_display.json?cellular=1",
        ClearGFIPost: "/envoy/admin/lib/admin_dcc_display.json",
        DhcpGetNewIp: "/envoy/admin/lib/network_display.json",
        DiagnosticNetworkCheck: "/envoy/admin/lib/network_display.json",
        EnchargeRelay: "/envoy/ivp/ensemble/relay",
        EnchargeSetSleepMode: "/envoy/ivp/ensemble/sleep",
        EnchargeGetSleepModeData: "/envoy/ivp/ensemble/sleep",
        EnchargeCancelSleepMode: "/envoy/ivp/ensemble/sleep",
        EnsembleAgfProfileStatus: "/envoy/ivp/ensemble/profile_status",
        EnsembleComm: "/envoy/ivp/ensemble/comm_check",
        EnsembleDelete: "/envoy/ivp/zb/provision",
        EnsemblePut: "/envoy/ivp/zb/provision",
        EnsembleInventory: "/envoy/ivp/ensemble/inventory",
        EthernetConfigGet: "/envoy/admin/lib/network_display.json",
        EthernetConfigPut: "/envoy/admin/lib/network_display.json",
        EventsGet: "/datatab/event_dt.rb",
        GetInfo: "/envoy/info.xml", // was /info.xml
        GetTimezones: "/admin/lib/date_time_display.json?tzlist=1",
        Home: "/envoy/home.json", // appended /envoy
        InternalMeterInfo: "/envoy/ivp/meters",
        InternalMeterReadings: "/envoy/ivp/meters/readings",
        InternalMeterCurrentCTSettings: "/envoy/ivp/meters/cts",
        Inventory: "/envoy/inventory.json?deleted=1",
        InverterComm: "/envoy/installer/pcu_comm_check",
        InverterProduction: "/envoy/api/v1/production/inverters",
        InverterDelete: "/prov",
        InverterPut: "/prov",
        NewScanGet: "/envoy/ivp/peb/newscan",
        NewScanPD: "/envoy/ivp/peb/newscan",
        PowerForcedModeGet: "/envoy/ivp/mod/EID/mode/power",
        PowerForcedModePut: "/envoy/ivp/mod/EID/mode/power",
        PMUGet: "/admin/lib/admin_pmu_display.json",
        PMUPost: "/admin/lib/admin_pmu_display.json",
        RedeterminePhase: "/ivp/grest/local/gs/redeterminephase",
        ReportSettingsGet: "/ivp/peb/reportsettings",
        ReportSettingsPut: "/ivp/peb/reportsettings",
        SetTimezone: "/admin/lib/date_time_display.json",
        SystemReadingStats: "/envoy/production.json?details=1",
        TariffSettingsGet: "/envoy/admin/lib/tariff.json",
        TariffSettingsPut: "/envoy/admin/lib/tariff.json",
        TunnelStateGet: "/envoy/admin/lib/dba.json",
        TunnelStatePut: "/envoy/admin/lib/dba.json",
        UpdateMeterConfig: "/envoy/ivp/meters/EID",
        UpdateMeterCurrentCTConfig: "/envoy/ivp/meters/cts/EID",
        WifiSettings: "/envoy/admin/lib/wireless_display.json",
        WifiSettingsJoin: "/envoy/admin/lib/wireless_display.json",
    };
})(EnvoyBackboneApp);
(function (b) {
    b.Wallpaper = function (a) {
        var c = {},
            d = null,
            e = null,
            g = null,
            f = b.config.mobilesize,
            k = null,
            h = null,
            l = null,
            n = null,
            q = null;
        c.init = function () {
            e = $(window);
            c.load();
        };
        c.load = function () {
            g = c.overlay();
            d = c.el();
            c.windowsize();
            e.on("resize", _.debounce(c.windowsize, 100));
            d.on("load", function () {
                c.windowsize();
                c.resize();
            });
            c.attach();
        };
        c.bindMouse = function () {
            $(window).on("mousemove", c.pan);
        };
        c.pan = function (a) {
            d.css({ top: Math.round(n - ((a.pageY - l / 2) / (l / 2)) * ((0 * l) / 2)), left: Math.round(q - ((a.pageX - h / 2) / (h / 2)) * ((0 * h) / 2)) });
        };
        c.windowsize = function () {
            newWidth = e.width();
            newHeight = window.screen.height;
            if (h != newWidth || l != newHeight) (h = newWidth), (l = newHeight), c.setsrc(), c.resize();
        };
        c.el = function () {
            return $("<img />").addClass("wallpaper");
        };
        c.overlay = function () {
            return $("<div />").css({ margin: "0", padding: "0", position: "fixed", left: "0px", top: "0px", width: "100%", height: "100%" }).addClass("wallpaper-overlay");
        };
        c.attach = function () {
            $("body").prepend([d, g]);
        };
        c.resize = function () {
            var a = d.width(),
                b = d.height() / a;
            l / h > b ? ((a = l / b), (b = l)) : ((a = h), (b *= h));
            n = (l - b) / 2 - (0 * b) / 2;
            q = (h - a) / 2 - (0 * a) / 2;
            d.css({ width: Math.round(1 * a) + "px", height: Math.round(1 * b) + "px", position: "fixed", top: Math.round(n), right: "auto", bottom: "auto", left: Math.round(q) });
        };
        c.setsrc = function () {
            var b;
            a.mobile && h <= f && !0 !== k ? ((b = a.mobile), (k = !0)) : h > f && !1 !== k && ((b = a.src), (k = !1));
            d.attr("src", b);
        };
        c.init();
        return c;
    };
})(EnvoyBackboneApp);
(function (b) {
    b.Views.DeviceList = function (a) {
        this.lastClickTime = this.click = 0;
        this.showPhase = this.showParamTable = !1;
        this.options = a;
        this.template = JST.device_list;
        this.collection_type = a.collection_type;
        this.is_comm_list = this.is_power_list = this.is_detected_list = !1;
        this.envoyModel = b.envoyModel;
        this.showDeviceLink = b.showInverterLink(this.collection_type);
        b.mediator.on("inventory:ProfileStateUpdated", this.render, this);
        Backbone.View.apply(this, [a]);
    };
    _.extend(b.Views.DeviceList.prototype, Backbone.View.prototype, {
        tagName: "div",
        events: {
            "click .clear-gfi": "clearGFITriggered",
            "click .select-phase": "showPhaseSelectModal",
            "click .accordion-toggle": "toggleDeviceExpanded",
            "click #cancel_sleep": "showCancelSleepPrompt",
            "click #wake_sleep": "showWakeSleepPrompt",
            "click #running_image": "runningImageClick",
            "click .line_help": "showLineStatusHelp",
        },
        render: function () {
            this.setupMeterInfo();
            var a = this.envoyModel.getProfile(),
                c = this.envoyModel.get("enpower_grid_status").mains_oper_state;
            this.$el.html(
                this.template({
                    collection_type: this.collection_type,
                    collection: this.collection,
                    current_profile: a,
                    is_detected_list: this.is_detected_list,
                    is_power_list: this.is_power_list,
                    is_comm_list: this.is_comm_list,
                    isGFIClearable: "EU" != BackboneConfig.envoy_type && "microinverters" == this.collection_type,
                    showDeviceLink: this.showDeviceLink,
                    showProfiles: b.showProfiles(),
                    metersEnabled: this.metersEnabled,
                    phaseCount: this.phaseCount,
                    showPhase: this.showPhase,
                    showParameterTable: this.showParamTable,
                    state_of_grid: c,
                })
            );
            return this;
        },
        setupMeterInfo: function () {
            this.metersEnabled = !1;
            this.phaseCount = 0;
            this.showPhase = !1;
            void 0 != EnvoyBackboneApp.meters &&
                void 0 != EnvoyBackboneApp.meters.findWhere({ type: "eim_production" }) &&
                void 0 != EnvoyBackboneApp.meters.findWhere({ type: "eim_consumption" }) &&
                ("three" == EnvoyBackboneApp.meters.findWhere({ type: "eim_production" }).get("phaseMode") && (this.showPhase = !0),
                (this.metersEnabled = "enabled" == EnvoyBackboneApp.meters.findWhere({ type: "eim_production" }).get("state") && "enabled" == EnvoyBackboneApp.meters.findWhere({ type: "eim_consumption" }).get("state"))) &&
                (this.phaseCount = EnvoyBackboneApp.meters.findWhere({ type: "eim_production" }).get("phaseCount"));
        },
        toggleDeviceExpanded: function (a) {
            a = $(a.target).first().closest("a");
            void 0 != a &&
                (a = b[this.collection_type].findWhere({ id: $(a).attr("data-device-id") })) &&
                (this.is_comm_list ? a.set({ isCommExpanded: !a.get("isCommExpanded") }) : this.is_power_list ? a.set({ isProducingExpanded: !a.get("isProducingExpanded") }) : a.set({ isProfileExpanded: !a.get("isProfileExpanded") }));
        },
        clearGFITriggered: function (a) {
            device = b[this.collection_type].get($(a.target).data("device-id"));
            void 0 != device &&
                ((a = ""),
                _.contains(device.get("status"), "envoy.cond_flags.pcu_chan.dcresistancelowpoweroff")
                    ? (a = I18n.t("envoy_backbone.microinverters.condition_clear.description", { condition_flag: I18n.t("envoy.cond_flags.pcu_chan.dcresistancelowpoweroff") }))
                    : _.contains(device.get("status"), "envoy.cond_flags.pcu_chan.gfitripped") && (a = I18n.t("envoy_backbone.microinverters.condition_clear.description", { condition_flag: I18n.t("envoy.cond_flags.pcu_chan.gfitripped") })),
                "" != a && (b.confirmSettingModal.updateModalType(I18n.t("envoy_backbone.microinverters.condition_clear.title"), a, "gficlear:submit", device), b.mediator.trigger("confirmSetting:show")));
        },
        showCancelSleepPrompt: function (a) {
            a = $(a.target).first().closest("#cancel_sleep");
            void 0 != a &&
                (a = b[this.collection_type].findWhere({ id: $(a).attr("data-device-id") })) &&
                (a.set({ isFlaggedForCancelSleep: !0 }), a.set({ cancelMode: "cancel" }), b.mediator.trigger("showSleepCancelModal", { collection_type: this.collection_type }));
        },
        showWakeSleepPrompt: function (a) {
            a = $(a.target).first().closest("#wake_sleep");
            void 0 != a &&
                (a = b[this.collection_type].findWhere({ id: $(a).attr("data-device-id") })) &&
                (a.set({ isFlaggedForCancelSleep: !0 }), a.set({ cancelMode: "wake" }), b.mediator.trigger("showSleepCancelModal", { collection_type: this.collection_type }));
        },
        runningImageClick: function (a) {
            a = new Date().getTime();
            this.lastClickTime + 500 > a ? ((this.click += 1), 8 <= this.click && ((this.showParamTable = !0), this.render())) : (this.click = 0);
            this.lastClickTime = a;
        },
        showLineStatusHelp: function () {
            b.infoAlertModal.setTitle(I18n.t("envoy_backbone.nsr.line_status_help_title"));
            b.infoAlertModal.setText(I18n.t("envoy_backbone.nsr.line_status_help_text"));
            b.mediator.trigger("info:showInfo");
        },
        close: function () {
            this.remove();
            this.unbind();
            b.mediator.off(null, null, this);
        },
        showPhaseSelectModal: function (a) {
            device = b[this.collection_type].get($(a.target).data("device-id"));
            b.setPhaseModal.showSelectPhaseModal(device);
        },
    });
    b.Views.DeviceList.extend = Backbone.View.extend;
})(EnvoyBackboneApp);
(function () {
    this.JST || (this.JST = {});
    this.JST.about_envoy_summary = function (b) {
        var a = [];
        with (b || {})
            a.push(""),
                1 == bOnOverview && a.push("\n   <div class='list-group-item action heading'><span class=\"descriptor\">Envoy</span></div>\n"),
                a.push("\n\n<div class='row'>\n    <div class='col-md-12'>\n        <ul class=\"list-group lg1 "),
                1 == bOnOverview && a.push("about"),
                a.push('">\n            '),
                1 == envoy.is_nonvoy && a.push('\n                <li class="list-group-item"><label>', I18n.t("envoy_backbone.more.about.is_nonvoy"), "</label>\n                </li>\n            "),
                a.push(
                    '\n            <li class="list-group-item"><label>',
                    I18n.t("envoy_backbone.more.about.serial_number"),
                    '</label>\n                <span class="descriptor">',
                    envoy.serial_number,
                    '</span>\n            </li>\n            <li class="list-group-item"><label>',
                    I18n.t("envoy_backbone.more.about.part_number"),
                    '</label>\n                <span class="descriptor">',
                    envoy.part_number,
                    '</span>\n            </li>\n            <li class="list-group-item"><label>',
                    I18n.t("envoy_backbone.more.about.sw_version"),
                    '</label>\n                <span class="descriptor">',
                    envoy.software_version,
                    '</span>\n            </li>\n            <li class="list-group-item"><label>',
                    I18n.t("envoy_backbone.more.about.sw_build_date"),
                    '</label>\n                <span class="descriptor">',
                    I18n.l("time.formats.noday_nozone_datetime_ui", envoy.software_build_epoch),
                    "</span>\n            </li>\n            "
                ),
                1 == wifi.hw_state.present &&
                    1 == wifi.hw_state.configured &&
                    (a.push("\n                "),
                    _.isEmpty(wifi.current_network.ip_address) ||
                        a.push(
                            '\n                <li class="list-group-item"><label>',
                            I18n.t("envoy_backbone.more.about.wifi_ip"),
                            '</label>\n                    <span class="descriptor">',
                            wifi.current_network.ip_address,
                            "</span>\n                </li>\n                "
                        ),
                    a.push("\n                "),
                    _.isEmpty(wifi.device_info.mac) ||
                        a.push(
                            '\n                <li class="list-group-item"><label>',
                            I18n.t("envoy_backbone.more.about.wifi_mac_address"),
                            '</label>\n                    <span class="descriptor">',
                            wifi.device_info.mac,
                            "</span>\n                </li>\n                "
                        ),
                    a.push("\n            ")),
                a.push("\n            "),
                void 0 != network.ethernet_config &&
                    a.push(
                        '\n            <li class="list-group-item"><label>',
                        I18n.t("envoy_backbone.more.about.ethernet_ip"),
                        '</label>\n                <span class="descriptor">',
                        network.ethernet_config.ip_address,
                        '</span>\n            </li>\n            <li class="list-group-item"><label>',
                        I18n.t("envoy_backbone.more.about.ethernet_mac_address"),
                        '</label>\n                <span class="descriptor">',
                        network.ethernet_config.mac_address,
                        "</span>\n            </li>\n            "
                    ),
                a.push(
                    '\n            <li class="list-group-item"><label>',
                    I18n.t("envoy_backbone.more.about.db_size"),
                    '</label>\n                <span class="descriptor">',
                    I18n.t("envoy_backbone.more.about.db_size_stats", { db_size: envoy.db_size, units: "kB", percent: envoy.db_percent_full }),
                    '</span>\n            </li>\n            <li class="list-group-item"><label>',
                    I18n.t("envoy_backbone.more.about.timezone"),
                    '</label>\n                <span class="descriptor">',
                    envoy.timezone,
                    "</span>\n            </li>\n        </ul>\n    </div>\n</div>\n"
                );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["auth/main"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                "<div class='row'>\n  <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n    <div class=\"page-header\">\n    <h2>",
                I18n.t("envoy_backbone.authentication.title"),
                '</h2>\n    </div>\n  </div>\n</div>\n<div class=\'row\'>\n    <div class=\'col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2\'>\n        <div class="list-group">\n            <form role="form" id="external_authentication" class="list-group-item">\n                <button type="button" id="authms" class="btn btn-primary btn-block">',
                I18n.t("envoy_backbone.authentication.authentication_with_authms"),
                '</button>\n            </form>\n            <form role="form" id="direct_code" class="list-group-item">\n                <div class=\'list-group-item action heading\'><span class="descriptor">',
                I18n.t("envoy_backbone.authentication.insert_token_headline"),
                '</span></div>\n                <div class="list-group-item">\n                    <div class="col-md-3">\n                        <span class="descriptor">',
                I18n.t("envoy_backbone.authentication.token_headline"),
                '</span>\n                    </div>\n                    <div class="col-md-9">\n                        <textarea id="jwtbox" rows="4" cols="50" name="jwtbox" class=\'form-control\'></textarea>\n                        <div>\n                            <span class="descriptor">',
                I18n.t("envoy_backbone.authentication.token_link", { auth_authority: auth_authority }),
                '</span>\n                        </div>\n                    </div>\n                    <button type="button" id="enterjwt" class="btn btn-primary btn-block">',
                I18n.t("envoy_backbone.authentication.token_submit"),
                '</button>\n                    <div class="row">\n                        '
            ),
                "badToken" == jwtStatus && a.push('\n                            <span class="error">', I18n.t("envoy_backbone.authentication.bad_jwt"), "</span>\n                        "),
                a.push("\n                        "),
                "tooManySessions" == jwtStatus && a.push('\n                            <span class="error">', I18n.t("envoy_backbone.authentication.too_many_sessions"), "</span>\n                        "),
                a.push("\n                        "),
                "verifyingToken" == jwtStatus &&
                    a.push(
                        '\n                            <div class="col-md-offset-4">\n                                <h3>',
                        I18n.t("envoy_backbone.authentication.verifying_jwt"),
                        '\n                                <span class="pull-left preloader preloader_sm"></span>\n                                </h3>\n                            </div>\n                        '
                    ),
                a.push(
                    "\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>\n<div class='row'>\n   <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n      <div class=\"list-group support_connection_summary\">\n      </div>\n   </div>\n</div>\n"
                ),
                showNetwork &&
                    a.push("\n<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <div class=\"list-group monitoring_summary\">\n        </div>\n    </div>\n</div>\n"),
                a.push("\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST.confirm_connect = function (b) {
        var a = [];
        with (b || {})
            a.push(
                '<div class=\'modal-dialog\'>\n  <div class="modal-content">\n    <div class="modal-header">\n      <button type="button" class="close" aria-hidden="true">&times;</button>\n      <h4 class="modal-title">',
                I18n.t("envoy_backbone.wifi.connect.confirm_connect"),
                '</h4>\n    </div>\n    <div class="modal-body">\n        <p>',
                I18n.t("envoy_backbone.wifi.connect.connect_to_site", { site_name: ssid }),
                "</p>\n        <p>",
                confirm_note,
                '</p>\n    </div>\n    <div class="modal-footer">\n      <button type="button" class="btn btn-link btn-close close" id=cancel>',
                I18n.t("envoy_backbone.buttons.cancel"),
                '</button>\n      <button type="button" class="btn btn-primary pull-right" id=connect>',
                I18n.t("envoy_backbone.buttons.connect"),
                "</button>\n    </div>\n  </div>\n</div>\n"
            );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST.confirm_setting = function (b) {
        var a = [];
        with (b || {})
            a.push(
                '<div class=\'modal-dialog\'>\n  <div class="modal-content">\n    <div class="modal-header">\n      <button type="button" class="close" aria-hidden="true">&times;</button>\n      <h4 class="modal-title">',
                title,
                '</h4>\n    </div>\n    <div class="modal-body">\n      ',
                text,
                '\n    </div>\n    <div class="modal-footer">\n      <button type="button" class="btn btn-link btn-close close" id=cancel>',
                I18n.t("envoy_backbone.buttons.cancel"),
                '</button>\n      <button type="button" class="btn btn-primary pull-right" id=confirm>',
                I18n.t("envoy_backbone.buttons.ok"),
                "</button>\n    </div>\n  </div>\n</div>\n"
            );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST.data_alert = function (b) {
        var a = [];
        with (b || {})
            a.push("<div class='navbar-fixed-top'>\n    "),
                _.each(keys, function (b) {
                    a.push('\n    <div class="alert alert-warning fade in">\n        <a href="#" id="', b, '" class="close" data-dismiss="alert" aria-label="close">&times;</a>\n        ', I18n.t(b), "\n    </div>\n    ");
                }),
                a.push("\n</div>\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST.data_error = function (b) {
        var a = [];
        with (b || {})
            a.push(
                '<div class=\'modal-dialog\'>\n  <div class="modal-content">\n    <div class="modal-header">\n      <button type="button" class="close" aria-hidden="true">&times;</button>\n      <h4 class="modal-title">',
                model.title,
                '</h4>\n    </div>\n    <div class="modal-body">\n      ',
                model.text,
                '\n    </div>\n    <div class="modal-footer">\n      <button type="button" class="btn btn-primary">',
                I18n.t("envoy_backbone.buttons.ok"),
                "</button>\n    </div>\n  </div>\n</div>\n"
            );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST.device_list = function (b) {
        var a = [];
        with (b || {})
            a.push(""),
                _.isEmpty(collection) ||
                    (a.push("\n"),
                    _.each(collection, function (b) {
                        var d = !1;
                        1 == is_comm_list ? (d = b.isCommExpanded) : 1 == is_power_list ? (d = b.isProducingExpanded) : d == b.isProfileExpanded;
                        a.push(
                            '\n<div class="panel-group">\n    <div class="panel panel-default">\n        <div class="panel-heading">\n            <a class="accordion-toggle',
                            d ? "" : " collapsed",
                            '"  data-toggle="collapse"  href="#inverter',
                            b.id,
                            '" data-device-id="',
                            b.id,
                            '">\n                <div class=\'pull-right\'><span class="glyphicons expand"></span></div>\n                <div class="inverter_status pull-left">\n                    '
                        );
                        _.isEmpty(b.status)
                            ? a.push('\n                    <span class="inverter_status_mark pending"></span>\n                    ')
                            : (a.push('\n                    <span class="inverter_status_mark\n                              '),
                              1 < b.status.length || "envoy.global.ok" != b.status[0]
                                  ? a.push("\n                                red_dot\n                              ")
                                  : a.push("\n                                green_dot\n                              "),
                              a.push('\n                              "></span>\n                    '));
                        a.push('\n                </div>\n                <div class="pull-left max320"><label>', b.id, '</label>\n                        <span class="descriptor">\n                            ');
                        1 == is_power_list
                            ? (a.push("\n                                "),
                              "ac_batteries" == collection_type || "encharge_batteries" == collection_type
                                  ? (a.push("\n                                    "),
                                    "" != b.last_interval_date && void 0 != b.last_interval_date && a.push("\n                                        ", b.op_state_string, "\n                                    "),
                                    a.push("\n                                "))
                                  : a.push("\n                                    ", I18n.t("envoy_backbone.power.last_report"), "\n                                "),
                              a.push("\n\n                                "),
                              "enpowers" == collection_type
                                  ? (a.push("\n                                    "),
                                    b.last_report_date
                                        ? a.push("\n                                        ", I18n.l("time.formats.default_date_time_no_pad", b.last_report_date), "\n                                    ")
                                        : a.push("\n                                        ", I18n.t("envoy_backbone.not_available"), "\n                                    "))
                                  : "nsrs" == collection_type
                                  ? (a.push("\n                                    "),
                                    b.last_interval_date
                                        ? a.push("\n                                        ", I18n.l("time.formats.default_date_time_no_pad", b.last_interval_date), "\n                                    ")
                                        : a.push("\n                                        ", I18n.t("envoy_backbone.not_available"), "\n                                    "))
                                  : "encharge_batteries" == collection_type
                                  ? (a.push("\n                                    "),
                                    b.last_interval_watts
                                        ? a.push(
                                              '\n                                        <span class="current_power">',
                                              b.last_interval_watts,
                                              " W</span>",
                                              I18n.l("time.formats.default_date_time_no_pad", b.last_report_date),
                                              "\n                                    "
                                          )
                                        : a.push("\n                                        ", I18n.t("envoy_backbone.not_available"), "\n                                    "))
                                  : (a.push("\n                                    "),
                                    b.last_interval_date
                                        ? a.push(
                                              '\n                                        <span class="current_power">',
                                              b.last_interval_watts,
                                              " W</span>",
                                              I18n.l("time.formats.default_date_time_no_pad", b.last_interval_date),
                                              "\n                                    "
                                          )
                                        : a.push("\n                                        ", I18n.t("envoy_backbone.not_available"), "\n                                    ")),
                              a.push("\n                                "),
                              a.push("\n                            "))
                            : 1 == is_comm_list &&
                              (a.push("\n                                ", I18n.t("envoy_backbone.devices.device_info.last_comm"), "\n                                "),
                              b.last_report_date
                                  ? a.push("\n                                    ", I18n.l("time.formats.default_date_time_no_pad", b.last_report_date), "\n                                ")
                                  : a.push("\n                                    ", I18n.t("envoy_backbone.not_available"), "\n                                "),
                              a.push("\n                            "));
                        a.push(
                            '\n                        </span>\n                </div>\n\n                <div class="clearfix"></div>\n            </a>\n        </div>\n\n        <div class="clearfix"></div>\n    </div>\n    <div id="inverter',
                            b.id,
                            '" class="panel-collapse collapse',
                            d ? " in" : "",
                            '">\n        <div class="panel-body inverter-details">\n            <ul class="list-group">\n                <li class="list-group-item micro_detail_table">\n                    '
                        );
                        1 == isGFIClearable &&
                            void 0 != b.gfi_clear_message &&
                            a.push('\n                    <div class="alert alert-info">\n                        ', b.gfi_clear_message, "\n                    </div>\n                    ");
                        a.push(
                            '\n                    <table class="micro_detail">\n                        <tbody>\n                        <tr>\n                            <th>',
                            I18n.t("envoy_backbone.devices.device_info.status"),
                            "</th>\n                            <td><strong>\n                                    "
                        );
                        _.isEmpty(b.status)
                            ? a.push("\n                                    ", I18n.t("envoy_backbone.pending"), "\n                                    ")
                            : (a.push("\n                                    "),
                              _.each(b.status, function (d) {
                                  a.push("\n                                    ");
                                  1 != isGFIClearable ||
                                      ("envoy.cond_flags.pcu_chan.dcresistancelowpoweroff" != d && "envoy.cond_flags.pcu_chan.gfitripped" != d) ||
                                      a.push(
                                          '\n                                        <div class="pull-right"><span class="',
                                          void 0 != b.gfi_clear_message ? "clear-gfi-disabled" : "clear-gfi",
                                          ' glyphicons delete " data-device-id="',
                                          b.id,
                                          '"></span></div>\n                                    '
                                      );
                                  a.push(
                                      "\n                                    \x3c!--Can't use the device.sleepsleeping state here because it is iterating through all status messages and\n                                    would add the sleeping link to all of them if we used that state indicator--\x3e\n                                    "
                                  );
                                  "envoy.cond_flags.pcu_ctrl.sleep-mode" === d
                                      ? (a.push("\n                                    "),
                                        b.sleep_enabled
                                            ? a.push(
                                                  "\n                                    ",
                                                  I18n.t(d),
                                                  '\n                                    <a class="sleep-lnk pull-right" rel="micro-detail-link"  id="wake_sleep" data-device-id="',
                                                  b.id,
                                                  '">',
                                                  I18n.t("envoy_backbone.ac_batteries.status_options.wake_sleep_label"),
                                                  "</a>\n                                    "
                                              )
                                            : a.push("\n                                    ", I18n.t("envoy_backbone.ac_batteries.status_options.waking_label"), "\n                                    "),
                                        a.push("\n                                    <br>\n                                    "))
                                      : a.push("\n                                    ", I18n.t(d), "<br>\n                                    ");
                                  a.push("\n\n                                    ");
                              }),
                              a.push("\n                                    "));
                        a.push("\n                                    ");
                        b.sleep_enabled &&
                            !b.sleeping &&
                            a.push(
                                "\n                                    ",
                                I18n.t("envoy_backbone.ac_batteries.status_options.preparing_to_sleep_text"),
                                '\n                                    <a class="sleep-lnk pull-right" rel="micro-detail-link" id="cancel_sleep" data-device-id="',
                                b.id,
                                '">',
                                I18n.t("envoy_backbone.ac_batteries.status_options.cancel_sleep_label"),
                                "</a>\n                                    "
                            );
                        a.push("\n                                </strong></td>\n                        </tr>\n                        ");
                        if ("nsrs" === collection_type) {
                            a.push(
                                "\n                        <tr>\n                            <th>",
                                I18n.t("envoy_backbone.nsr.relay_heading"),
                                "</th>\n                            <td>\n                                <span>",
                                "open" == b.relay || "closed" == b.relay ? I18n.t("envoy_backbone.overview.nsr.relay_state_" + b.relay) : I18n.t("envoy_backbone.microinverters.device_info.unknown"),
                                "</span>\n                                <span>\n                                    "
                            );
                            -1 == b.reason_code
                                ? a.push("\n                                    ", I18n.t("envoy.global.ok"), "\n                                    ")
                                : a.push("\n                                    ", I18n.t("envoy_backbone.nsr.reason_strings")[b.reason_code], "\n                                    ");
                            a.push("\n                                </span>\n                            </td>\n                        </tr>\n                        ");
                            if (1 < b.line_count) {
                                a.push("\n                        ");
                                d = !1;
                                a.push("\n                        ");
                                var e = ["line1_connected", "line2_connected", "line3_connected"];
                                a.push("\n                        ");
                                for (var g = 0; 3 > g; g++)
                                    a.push("\n                        "), !1 === b[e[g]] && (a.push("\n                        "), (d = !0), a.push("\n                        ")), a.push("\n                        ");
                                a.push("\n                        <tr class=", d ? "line_help" : "", ">\n                            <th>", I18n.t("envoy_backbone.nsr.line_status_heading"), "\n                                ");
                                d && a.push('\n                                <span class="glyphicons circle_question_mark "></span>\n                                ');
                                a.push("\n                            </th>\n                            <td>\n                                ");
                                for (g = 0; 3 > g; g++)
                                    a.push("\n                                <span>\n                                        ", I18n.t("envoy_backbone.nsr.lines", { num: g + 1 }), "\n                                    "),
                                        b[e[g]]
                                            ? a.push("\n                                    ", I18n.t("envoy.global.true"), "\n                                    ")
                                            : a.push("\n                                    ", I18n.t("envoy.global.false"), "\n                                    "),
                                        a.push("\n                                </span>\n                                ");
                                a.push("\n                            </td>\n                        </tr>\n                            ");
                            }
                            a.push("\n                        ");
                        }
                        a.push("\n                        <tr>\n                            <th>", I18n.t("envoy_backbone.devices.device_info.last_report"), "</th>\n                            <td>\n                                ");
                        b.last_report_date
                            ? "enpowers" == collection_type || "nsrs" == collection_type
                                ? a.push("\n                                    ", I18n.l("time.formats.default_date_time_no_pad", b.last_report_date), "\n                                ")
                                : a.push(
                                      '\n                                    <span class="current_power">',
                                      b.last_interval_watts,
                                      " W</span>",
                                      I18n.l("time.formats.default_date_time_no_pad", b.last_report_date),
                                      "\n                                "
                                  )
                            : a.push("\n                                    ", I18n.t("envoy_backbone.not_available"), "\n                                ");
                        a.push("\n                                ");
                        ("ac_batteries" != collection_type && "encharge_batteries" != collection_type) ||
                            a.push('\n                                    <span class = class="descriptor"> ', b.op_state_string, " </span>\n                                ");
                        a.push("\n                            </td>\n                        </tr>\n                        ");
                        if ("ac_batteries" == collection_type || "encharge_batteries" == collection_type)
                            a.push("\n                        <tr>\n                            <th>", I18n.t("envoy_backbone.ac_batteries.state_of_charge"), "</th>\n                            "),
                                void 0 != b.percentFull
                                    ? a.push("\n                            <td>\n                                ", b.percentFull, "%\n                            </td>\n                            ")
                                    : a.push("\n                            <td>", I18n.t("envoy_backbone.pending"), "</td>\n                            "),
                                a.push("\n                        </tr>\n                        <tr>\n                            <th>", I18n.t("envoy_backbone.ac_batteries.max_temp"), "</th>\n                            "),
                                void 0 != b.maxCellTemp
                                    ? a.push("\n                            <td>\n                                ", b.maxCellTemp, " \u00b0C\n                            </td>\n                            ")
                                    : a.push("\n                                <td>", I18n.t("envoy_backbone.pending"), "</td>\n                            "),
                                a.push("\n\n                        </tr>\n                        ");
                        a.push("\n                        ");
                        "enpowers" == collection_type &&
                            (a.push(
                                "\n                        <tr>\n                            <th>",
                                I18n.t("envoy_backbone.enpowers.state_of_grid.title"),
                                "</th>\n                            <td>",
                                I18n.t("envoy_backbone.enpowers.state_of_grid." + state_of_grid),
                                "</td>\n                        </tr>\n                        <tr>\n                            <th>",
                                I18n.t("envoy_backbone.enpowers.max_temp"),
                                "</th>\n                            "
                            ),
                            void 0 != b.maxCellTemp
                                ? a.push("\n                            <td>\n                                ", b.maxCellTemp, " \u00b0C\n                            </td>\n                            ")
                                : a.push("\n                                <td>", I18n.t("envoy_backbone.pending"), "</td>\n                            "),
                            a.push("\n\n                        </tr>\n                        "));
                        a.push(
                            "\n                        <tr>\n                            <th>",
                            I18n.t("envoy_backbone.devices.device_info.detected"),
                            "</th>\n                            <td>\n                                <span>",
                            I18n.l("time.formats.noday_nozone_datetime_ui", b.created_date),
                            "</span>\n                                <span>"
                        );
                        "" != b.admin_state &&
                            "" != b.created_date &&
                            a.push(
                                "\n                                    ",
                                "verified" == b.admin_state ? I18n.t("envoy_backbone.devices.device_info.provisioned") : I18n.t("envoy_backbone.devices.device_info.discovered"),
                                "\n                                    "
                            );
                        a.push("</span>\n                            </td>\n\n                        </tr>\n\n                        ");
                        "enpowers" == collection_type || "encharge_batteries" == collection_type
                            ? (a.push(
                                  "\n                            <tr>\n                                <th>",
                                  I18n.t("envoy_backbone.devices.device_info.comm_level_sub_ghz"),
                                  "</th>\n                                <td>\n                                    "
                              ),
                              void 0 != b.comm_level_sub_ghz &&
                                  a.push(
                                      '\n                                        <div class="comm-level-count" title="',
                                      b.comm_level_sub_ghz,
                                      '">\n                                            <ul class="comm-level-container glyphicon-comm-level-',
                                      b.comm_level_sub_ghz,
                                      '">\n                                                <li></li><li></li><li></li><li></li><li></li>\n                                            </ul>\n                                            <div></div>\n                                        </div>\n                                    '
                                  ),
                              a.push(
                                  "\n                                </td>\n                            </tr>\n                            <tr>\n                                <th>",
                                  I18n.t("envoy_backbone.devices.device_info.comm_level_2_4_ghz"),
                                  "</th>\n                                <td>\n                                    "
                              ),
                              void 0 != b.comm_level_2_4_ghz &&
                                  a.push(
                                      '\n                                        <div class="comm-level-count" title="',
                                      b.comm_level_2_4_ghz,
                                      '">\n                                            <ul class="comm-level-container glyphicon-comm-level-',
                                      b.comm_level_2_4_ghz,
                                      '">\n                                                <li></li><li></li><li></li><li></li><li></li>\n                                            </ul>\n                                            <div></div>\n                                        </div>\n                                    '
                                  ))
                            : (a.push("\n                            <tr>\n                                <th>", I18n.t("envoy_backbone.devices.device_info.comm_level"), "</th>\n                                <td>"),
                              void 0 != b.comm_level &&
                                  a.push(
                                      '\n                                    <div class="comm-level-count" title="',
                                      b.comm_level,
                                      '"><ul class="comm-level-container glyphicon-comm-level-',
                                      b.comm_level,
                                      '"><li></li><li></li><li></li><li></li><li></li></ul><div></div></div>\n                                    '
                                  ));
                        a.push("\n                                </td>\n                            </tr>\n                        ");
                        a.push("\n\n                        ");
                        if (1 == showProfiles) {
                            a.push("\n                        <tr>\n                            <th>", I18n.t("envoy_backbone.devices.device_info.grid_profile"), "</th>\n                            ");
                            void 0 != current_profile && void 0 != current_profile.default_profile_set
                                ? a.push("\n                            <td>", current_profile.default_profile_set, "</td>\n                            ")
                                : (a.push("\n                            <td>", I18n.t("envoy_backbone.profiles.tpm_state." + b.profile_status), "\n                                "),
                                  void 0 != current_profile && a.push("\n                                (", current_profile.translated_name, ")\n                                "),
                                  a.push("\n                            </td>\n                            "));
                            a.push("\n                        </tr>\n                        ");
                            if (showPhase) {
                                a.push(
                                    "\n                        <tr>\n                            <th>",
                                    I18n.t("envoy_backbone.devices.device_info.phase"),
                                    "</th>\n                            <td>\n                                <span>",
                                    I18n.t("envoy_backbone.microinverters.phase_labels." + b.phase),
                                    "</span>\n                                "
                                );
                                if ("ac_batteries" == collection_type || "encharge_batteries" == collection_type)
                                    a.push("\n                                    "),
                                        metersEnabled &&
                                            1 < phaseCount &&
                                            !b.phase_set_by_envoy &&
                                            (a.push("\n                                        "),
                                            "ph-unk" == b.phase
                                                ? a.push(
                                                      '\n                                            <a class="select-phase" rel="micro-detail" data-device-id="',
                                                      b.id,
                                                      '">',
                                                      I18n.t("envoy_backbone.devices.device_info.select_phase"),
                                                      "</a>\n                                        "
                                                  )
                                                : a.push(
                                                      '\n                                            <a rel="micro-detail" class="select-phase" data-device-id="',
                                                      b.id,
                                                      '">',
                                                      I18n.t("envoy_backbone.devices.device_info.change_phase"),
                                                      "</a>\n                                        "
                                                  ),
                                            a.push("\n                                    ")),
                                        a.push("\n                                ");
                                a.push("\n\n                            </td>\n                        </tr>\n                        ");
                            }
                            a.push("\n                        ");
                        }
                        a.push(
                            "\n                        <tr>\n                            <th>",
                            I18n.t("envoy_backbone.devices.device_info.part_number"),
                            "</th>\n                            <td>",
                            b.part_number,
                            '</td>\n                        </tr>\n                        <tr id="running_image">\n                            <th>',
                            I18n.t("envoy_backbone.devices.device_info.running_image"),
                            "</th>\n                            <td>\n                                "
                        );
                        !_.isEmpty(b.img_pnum_running) || 0 > b.img_pnum_running.indexOf("undetermined")
                            ? (a.push("\n                                ", b.img_pnum_running, "\n                                "),
                              0 != b.img_load_date &&
                                  a.push(
                                      "\n                                <span>",
                                      I18n.t("envoy_backbone.devices.device_info.updated") + " " + I18n.l("time.formats.default_date_time_no_pad", b.img_load_date),
                                      "</span>\n                                "
                                  ),
                              a.push("\n                                "))
                            : a.push("\n                                ", I18n.t("envoy_backbone.not_available"), "\n                                ");
                        a.push("\n                            </td>\n                        </tr>\n                        ");
                        showParameterTable &&
                            (a.push("\n                        <tr>\n                            <th>", I18n.t("envoy_backbone.devices.device_info.param_table"), "</th>\n                            <td>"),
                            void 0 == b.param_table_part_number || "" == b.param_table_part_number
                                ? a.push("\n                                ", I18n.t("envoy_backbone.not_available"), "\n                                ")
                                : a.push("\n                                ", b.param_table_part_number, "\n                                "),
                            a.push("\n                            </td>\n                        </tr>\n                        "));
                        a.push("\n                        ");
                        showDeviceLink &&
                            a.push(
                                '\n                        <tr>\n                            <th colspan="2"><a class="btn btn-primary btn-envoy btn-block" href="/toolkitarrayview/show/',
                                b.id,
                                '" target="_blank">',
                                I18n.t("envoy_backbone.devices.device_info.view_in_array"),
                                "</a></th>\n                        </tr>\n                        "
                            );
                        a.push("\n                        </tbody>\n                    </table>\n                </li>\n            </ul>\n        </div>\n\n    </div>\n</div>\n");
                    }),
                    a.push("\n")),
                a.push("\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST.get_password = function (b) {
        var a = [];
        with (b || {})
            a.push(
                '<div class=\'modal-dialog count\'>\n<div class="modal-content">\n  <div class="modal-body">\n    <div class="form-group">\n    <div class="alert alert-danger hidden">',
                error_text,
                "</div>\n    <label for=\"get_password\" class='control-label' id=password_text>",
                I18n.t("envoy_backbone.wifi.enter_password", { site_name: ssid }),
                "</label>\n    <input type='password' class='form-control' id='get_password_textfield'>\n    <p><br>",
                connect_note,
                '</p>\n    </div>\n  </div>\n  <div class="modal-footer">\n    <button type="button" class="btn btn-link btn-close close" id=cancel>',
                I18n.t("envoy_backbone.buttons.cancel"),
                '</button>\n    <input type="button" class="btn btn-primary pull-right" id=connect value="',
                I18n.t("envoy_backbone.buttons.connect"),
                '"/>\n  </div>\n</div>\n</div>\n'
            );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST.info_alert = function (b) {
        var a = [];
        with (b || {})
            a.push(
                '<div class=\'modal-dialog\'>\n  <div class="modal-content">\n    <div class="modal-header">\n      <button type="button" class="close" aria-hidden="true">&times;</button>\n      <h4 class="modal-title" id=alert_title>',
                info_title,
                '</h4>\n    </div>\n    <div class="modal-body" id=alert_text>',
                info_text,
                '\n    </div>\n    <div class="modal-footer">\n      <button type="button" class="btn btn-primary" id=ok_button>',
                I18n.t("envoy_backbone.buttons.ok"),
                "</button>\n    </div>\n  </div>\n</div>\n"
            );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST.initial_setup = function (b) {
        var a = [];
        with (b || {})
            a.push(
                '<div class="row">\n<div class="col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2">\n<form role="form" id="initial_settings">\n\n<div class="list-group">\n    <div class="list-group-item action heading">\n        <span class="descriptor">',
                I18n.t("envoy_backbone.initial_setup.system_size"),
                "</span>\n    </div>\n  <p>",
                I18n.t("envoy_backbone.initial_setup.device_prompt"),
                '</p>\n    <div class = list-group-item>\n        <label for="target_microinverter_count">',
                I18n.t("envoy_backbone.global_nav.microinverters"),
                "</label>\n        <input type='number' class='form-control target_inverter_count'  value='",
                0 < target_microinverter_count ? target_microinverter_count : initialTargetInverterCount,
                '\'  autocomplete="off" placeholder="',
                I18n.t("envoy_backbone.overview.set_expected.prompt"),
                '" id=\'target_microinverter_count\' name="target_micro_count">\n        </div>\n    <div class = list-group-item>\n        '
            ),
                showAcbInput &&
                    a.push(
                        '\n        <label for="target_acb_count">',
                        I18n.t("envoy_backbone.overview.ac_batteries.total"),
                        "</label>\n        <input type='number' class='form-control target_acb_count' value='",
                        0 < target_acb_count ? target_acb_count : initialTargetAcbCount,
                        '\' autocomplete="off" placeholder="',
                        I18n.t("envoy_backbone.overview.set_expected_acb.prompt"),
                        '" id=\'target_acb_count\' name="target_batt_count">\n        '
                    ),
                a.push("\n    </div>\n    <div class = list-group-item>\n        "),
                showNsrInput &&
                    a.push(
                        '\n        <label for="target_nsr_count">',
                        I18n.t("envoy_backbone.global_nav.nsr"),
                        "</label>\n        <input type='number' class='form-control target_nsr_count' value='",
                        0 < target_nsr_count ? target_nsr_count : initialTargetNsrCount,
                        '\' autocomplete="off" placeholder="',
                        I18n.t("envoy_backbone.overview.set_expected_nsr.prompt"),
                        '" id=\'target_nsr_count\' name="target_nsr_count">\n        '
                    ),
                a.push('\n    </div>\n    \x3c!--profile stuff--\x3e\n    <div class="list-group-item action heading">\n        <span class="descriptor">', I18n.t("envoy_backbone.profiles.title"), "</span>\n    </div>\n    "),
                1 == isLoading
                    ? a.push('\n    <div class="user-messaging clearfix"><div class="pull-left preloader"></div><div class=\'pull-left messaging single-message\'>', I18n.t("envoy_backbone.loading"), "</div></div>\n    ")
                    : (a.push("\n    "),
                      Boolean(migration_in_progress)
                          ? (a.push("\n        "),
                            Boolean(selected_profile) ? a.push("\n            <div>\n                ", selected_profile, "\n            </div>\n        ") : a.push("\n        "),
                            a.push(
                                '\n        <div class="user-messaging clearfix"><div class="pull-left preloader"></div><div class=\'pull-left messaging single-message\'>',
                                I18n.t("envoy_backbone.initial_setup.migration_in_progress_message"),
                                "</div></div>\n    "
                            ))
                          : (a.push("\n        "),
                            _.isEmpty(profiles)
                                ? (a.push("\n            "),
                                  "NA" == model.envoy_type || "NA_COM" == BackboneConfig.envoy_type
                                      ? a.push(
                                            '\n                <div class="list-group list-unstyled alerts">\n                    <div class="list-group-item alert">\n                        <span class="descriptor">\n                            <span class="glyphicons envoy-alrt envoy-alrt-info circle_info"></span>\n                            <span class="alert-text">',
                                            I18n.t("envoy_backbone.profiles.no_profiles_info"),
                                            "</span>\n                        </span>\n                    </div>\n                </div>\n            "
                                        )
                                      : a.push(
                                            '\n                <div class="list-group list-unstyled alerts">\n                    <div class="list-group-item alert">\n                        <span class="descriptor">\n                            <span class="glyphicons envoy-alrt envoy-alrt-warning warning_sign"></span>\n                            <span class="alert-text">',
                                            I18n.t("envoy_backbone.profiles.no_profiles"),
                                            "</span>\n                        </span>\n                    </div>\n                </div>\n            "
                                        ))
                                : (a.push("\n        "),
                                  "NA" == model.envoy_type || "NA_COM" == BackboneConfig.envoy_type
                                      ? a.push("\n        <p>", I18n.t("envoy_backbone.initial_setup.na_profile_prompt"), "</p>\n        ")
                                      : a.push("\n        <p>", I18n.t("envoy_backbone.initial_setup.eu_profile_prompt"), "</p>\n        ")),
                            a.push("\n        "),
                            a.push("\n        "),
                            _.isEmpty(profiles) ||
                                (a.push(
                                    '\n            <div class="form-group profile_group">\n                <div class="profile_container1">\n                    <div class="profile_container2">\n                        <select id="profile_select" class="profile_select required " name="profile">\n                            <option value="">',
                                    I18n.t("envoy_backbone.forms.select_prompt"),
                                    "</option>\n                            "
                                ),
                                _.each(profiles, function (b, d) {
                                    a.push('\n                            <optgroup label="', d, '">\n                                ');
                                    _.each(b, function (b) {
                                        a.push('\n                                    <option value="', b.profile_id, '">', b.translated_name, "</option>\n                                ");
                                    });
                                    a.push("\n                            ");
                                }),
                                a.push('\n                            <optgroup label=""></optgroup>\n                        </select>\n                    </div>\n                    '),
                                1 == b.preview_profile &&
                                    a.push(
                                        '\n                    <a href="/showprofile" target="_blank" class="btn btn-primary btn-envoy pprofile">\n                        <span class=" glyphicons circle_info "></span>\n                    </a>\n                    '
                                    ),
                                a.push('\n                </div>\n                <div id="selected_profile_name" class="grid_profile_selection"></div>\n            </div>\n\n        ')),
                            a.push("\n    ")),
                      a.push("\n")),
                a.push(
                    '\n    <div class="modal-footer">\n        <button type="button" class="btn btn-primary btn-block btn-continue">',
                    I18n.t("envoy_backbone.initial_setup.continue"),
                    "</button>\n    </div>\n</div>\n</form>\n</div></div>\n"
                );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST.loader = function (b) {
        var a = [];
        with (b || {}) a.push('<div class="loader"></div>\n');
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST.meter_wizard_trouble = function (b) {
        var a = [];
        with (b || {})
            a.push(
                '<div class=\'modal-dialog\'>\n    <div class="modal-content">\n        <div class="modal-header">\n            <h4 class="modal-title">',
                title,
                '</h4>\n        </div>\n        <div class="modal-body">\n            <p>',
                body,
                '</p>\n        </div>\n        <div class="modal-footer">\n            <button type="button" class="btn btn-link btn-close close" id="cancel">',
                neg_button,
                '</button>\n            <button type="button" class="btn btn-primary pull-right" id="exit_wizard">',
                pos_button,
                "</button>\n        </div>\n    </div>\n</div>\n"
            );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["meters/add_pmus"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                "<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <div class='subviewheader page-header'>\n            <a class=\"btn btn-primary btn-back pull-left\" href=\"#meters\">\n                <span class=\"glyphicons left_arrow\"></span>\n            </a>\n            <h2>",
                I18n.t("envoy_backbone.meters.pmu.config.title"),
                "</h2>\n        </div>\n    </div>\n</div>\n"
            ),
                1 == isLoading
                    ? a.push(
                          "\n<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <div class=\"user-messaging clearfix\">\n            <div class=\"pull-left preloader\"></div>\n            <div class='pull-left messaging single-message'>",
                          I18n.t("envoy_backbone.loading"),
                          "</div>\n        </div>\n    </div>\n</div>\n"
                      )
                    : _.isEmpty(available_pmus)
                    ? a.push(
                          "\n<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <ul class=\"list-group available_pmus\">\n            <li class=\"list-group-item user-messaging\">",
                          I18n.t("envoy_backbone.meters.pmu.config.no_meters_description"),
                          "</li>\n        </ul>\n    </div>\n</div>\n"
                      )
                    : (a.push(
                          '\n<div class=\'row\'>\n    <div class=\'col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2\'>\n        <div class="panel-group panel panel-default available_pmus">\n\n            <form id="AddPMU">\n                <div class="descriptor">',
                          I18n.t("envoy_backbone.meters.pmu.config.meters_description"),
                          "</div>\n                "
                      ),
                      _.each(available_pmus, function (b) {
                          a.push(
                              '\n                <div class="panel-heading add_pmu_header" data-pmu-id="',
                              b.id,
                              '">\n                    <a class="accordion-toggle" data-pmu-id="',
                              b.id,
                              '">\n                        <div class="pull-left checkbox">\n                            <span class="glyphicons ',
                              b.isFlaggedForAdd ? "check" : "unchecked",
                              '"></span>\n                        </div>\n                        <div class="pull-left">\n                            <label>',
                              b.ip,
                              '</label>\n                        </div>\n                        <div class="clearfix"></div>\n                    </a>\n                </div>\n                <div class="panel-collapse collapse in inverter-details">\n                    <ul class="list-group manage-group">\n                        <li class="list-group-item micro_detail_table">\n                            <table class="micro_detail">\n                                <tbody>\n                                <tr>\n                                    <th>',
                              I18n.t("envoy_backbone.meters.pmu.labels.mac_address"),
                              "</th>\n                                    <td>",
                              b.id,
                              "</td>\n                                </tr>\n                                <tr>\n                                    <th>",
                              I18n.t("envoy_backbone.meters.pmu.labels.part_number"),
                              "</th>\n                                    <td>",
                              b.part_number,
                              "</td>\n                                </tr>\n                                <tr>\n                                    <th>",
                              I18n.t("envoy_backbone.meters.pmu.labels.manufacturer"),
                              "</th>\n                                    <td>",
                              b.manufacturer,
                              "</td>\n                                </tr>\n                                <tr>\n                                    <th>",
                              I18n.t("envoy_backbone.meters.pmu.labels.fw_version"),
                              "</th>\n                                    <td>",
                              b.fw_version,
                              "</td>\n                                </tr>\n                                </tbody>\n                            </table>\n                        </li>\n                    </ul>\n                </div>\n                "
                          );
                      }),
                      a.push(
                          '<div class=" alert inline-alert">\n                    <div class="descriptor">\n                        <span class="glyphicons envoy-alrt envoy-alrt-warning circle_exclamation_mark"></span>\n                <span class="alert-text">\n                    ',
                          I18n.t("envoy_backbone.meters.pmu.config.network_warning"),
                          '\n                </span>\n                    </div>\n                </div>\n                <div><button type="submit" class="btn btn-primary btn-block submit">',
                          I18n.t("envoy_backbone.meters.pmu.config.add"),
                          "</button></div>\n            </form>\n        </div>\n    </div>\n</div>\n\n"
                      )),
                a.push("\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["meters/check_wiring"] = function (b) {
        var a = [];
        with (b || {})
            a.push(""),
                "check-wiring" == model.meteringStatus &&
                    (a.push('\n<div class="list-group list-unstyled alerts">\n    '),
                    _.each(model.statusFlags, function (b) {
                        a.push(
                            '\n    <div class="list-group-item alert">\n        <span class="descriptor">\n            <span class="glyphicons envoy-alrt envoy-alrt-warning warning_sign"></span>\n            <span class="alert-text">',
                            I18n.t("envoy_backbone.meters.meter_status.status_flags." + b),
                            "</span>\n        </span>\n    </div>\n    "
                        );
                    }),
                    a.push("\n</div>\n")),
                a.push("\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["meters/eim_overview"] = function (b) {
        var a = [];
        with (b || {})
            a.push(""),
                1 == showInternalMeters &&
                    (a.push(
                        "\n<div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n    <div class=\"list-group internal_meters\">\n        <div class='list-group-item action heading'><span class=\"descriptor\">",
                        I18n.t("envoy_backbone.meters.internal_meters"),
                        '</span></div>\n        <a href="#meters/detail/production" class="list-group-item" id="production_final_control"><span class="meter-status glyphicons meter-chk ',
                        ct_production_status_class,
                        '"></span><span class="descriptor">',
                        I18n.t("envoy_backbone.meters.production"),
                        '</span><span class="glyphicons chevron-right pull-right"></span></a>\n        <a href="#meters/detail/consumption" class="list-group-item" id="consumption_final_control"><span class="meter-status glyphicons meter-chk ',
                        ct_consumption_status_class,
                        '"></span><span class="descriptor">',
                        I18n.t("envoy_backbone.meters.consumption"),
                        '</span><span class="glyphicons chevron-right pull-right"></span></a>\n\n        <div class=\'list-group-item action btn-holder meter_wizard\'>\n            <div class="descriptor" id="not_enabled"></div>\n            <p>',
                        desc,
                        '</p>\n            <button type="button" id="get_started" class="btn btn-primary btn-block">',
                        I18n.t("envoy_backbone.meters.wizard.get_started"),
                        '</button>\n        </div>\n\n        <div class="show-manual-meters list-group-item action">\n            <a class="accordion-toggle collapsed show-reporting-more-info" data-toggle="collapse" href="#manual_settings" aria-expanded="false" aria-controls="manual_settings">\n                <span class="glyphicons expand"></span>',
                        I18n.t("envoy_backbone.meters.wizard.manual_prompt"),
                        '</a>\n            <div class="collapse" id="manual_settings">\n                <a href="#meters/detail/production" class="list-group-item" id="production_control"><span class="meter-status glyphicons meter-chk ',
                        ct_production_status_class,
                        '"></span><span class="descriptor">',
                        I18n.t("envoy_backbone.meters.production"),
                        '</span><span class="glyphicons chevron-right pull-right"></span></a>\n                <a href="#meters/detail/consumption" class="list-group-item" id="consumption_control"><span class="meter-status glyphicons meter-chk ',
                        ct_consumption_status_class,
                        '"></span><span class="descriptor">',
                        I18n.t("envoy_backbone.meters.consumption"),
                        '</span><span class="glyphicons chevron-right pull-right"></span></a>\n            </div>\n        </div>\n\n        '
                    ),
                    1 == showHighCurCt &&
                        (a.push(
                            '\n        <div class="list-group-item action">\n            <a class="show-current-ct-options show-reporting-more-info accordion-toggle',
                            prodPrimaryAmps || consPrimaryAmps ? "" : " collapsed",
                            '" data-toggle="collapse" href="#show_ct_settings">\n                <span class="pull-left preloader preloader_sm" id = \'current-ct-title\'></span>',
                            I18n.t("envoy_backbone.meters.current_ct.current_ct_settings"),
                            '</a>\n            <div id="show_ct_settings" class="inverter-toggle panel-collapse collapse',
                            prodPrimaryAmps || consPrimaryAmps ? " in" : "",
                            '">\n                        <a class="checkbox check-item production-ct list-group-item" style="text-decoration:none" data-target="#production-ct-options" id="production">\n                            <span class="glyphicons cb ',
                            productionCTIsChecked ? "check" : "unchecked",
                            '" ></span>\n                            <span class="ct-setting descriptor">',
                            I18n.t("envoy_backbone.meters.current_ct.custom_cts_installed", { meter_type: "Production" }),
                            '</span>\n                        </a>\n                        <div class="',
                            productionCTIsChecked ? "collapse in" : "collapse",
                            '" id ="production-ct-options">\n                            <div class="ct-setting row">\n                                <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4 current-ct-setting production">\n                                    ',
                            I18n.t("envoy_backbone.meters.current_ct.primary"),
                            '\n                                </div>\n                                <div class = "col-xs-4 col-sm-4 col-md-4 col-lg-4">\n                                    ',
                            I18n.t("envoy_backbone.meters.current_ct.secondary"),
                            '\n                                </div>\n                                <div class = "col-xs-4 col-sm-4 col-md-4 col-lg-4">\n                                    ',
                            I18n.t("envoy_backbone.meters.current_ct.turns"),
                            '\n                                </div>\n                            </div>\n                            <div class="ct-setting row">\n                                <div class = "col-xs-4 col-sm-4 col-md-4 col-lg-4">\n                                    <div id="production-ct-amps" class="production-ct-amps ',
                            productionCTIsChecked ? "" : "hidden",
                            '">\n                                        ',
                            prodPrimaryAmps + "A",
                            "\n                                    </div>\n\n                                    "
                        ),
                        primaryAmpOptions &&
                            (a.push(
                                '\n                                        <select id="production-ct-amps" class="production-ct-amps-options ',
                                productionCTIsChecked ? "hidden" : "",
                                ' required">\n                                            '
                            ),
                            _.each(primaryAmpOptions, function (b) {
                                a.push('\n                                                <option value="', b, '"', b == prodPrimaryAmps ? "selected" : "", " >", b + "A", "</option>\n                                            ");
                            }),
                            a.push("\n                                        </select>\n                                    ")),
                        a.push(
                            '\n\n                                </div>\n                                <div class = "col-xs-4 col-sm-4 col-md-4 col-lg-4">\n                                    ',
                            "5A",
                            '\n                                </div>\n                                <div class = "col-xs-4 col-sm-4 col-md-4 col-lg-4">\n                                    ',
                            "20",
                            '\n                                </div>\n\n                            </div>\n                            <div class="ct-setting row">\n                                <div class = "col-xs-4 col-sm-4 col-md-4 col-lg-4">\n                                    <a class="production-ct-edit ',
                            productionCTIsChecked ? "" : "hidden",
                            '" style="text-decoration:none">\n                                        Edit\n                                    </a>\n                                </div>\n                            </div>\n                        </div>\n                        <a class="checkbox check-item consumption-ct list-group-item" style="text-decoration:none" data-target="#consumption-ct-options" id="consumption">\n                            \x3c!--<a class="checkbox check-item" id="pv_on">--\x3e\n                            <span class="glyphicons cb ',
                            consumptionCTIsChecked ? "check" : "unchecked",
                            '"></span>\n                            <span class="ct-setting descriptor">',
                            I18n.t("envoy_backbone.meters.current_ct.custom_cts_installed", { meter_type: "Consumption" }),
                            '</span>\n                        </a>\n                        <div class="',
                            consumptionCTIsChecked ? "collapse in" : "collapse",
                            '" id ="consumption-ct-options">\n                            <div class="ct-setting row">\n\n                                <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4 current-ct-setting consumption">\n                                    ',
                            I18n.t("envoy_backbone.meters.current_ct.primary"),
                            '\n                                </div>\n                                <div class = "col-xs-4 col-sm-4 col-md-4 col-lg-4">\n                                    ',
                            I18n.t("envoy_backbone.meters.current_ct.secondary"),
                            '\n                                </div>\n                                <div class = "col-xs-4 col-sm-4 col-md-4 col-lg-4">\n                                    ',
                            I18n.t("envoy_backbone.meters.current_ct.turns"),
                            '\n                                </div>\n\n                            </div>\n\n                            <div class="ct-setting row">\n                                <div class = "col-xs-4 col-sm-4 col-md-4 col-lg-4">\n                                    <div id="consumption-ct-amps" class="consumption-ct-amps ',
                            consumptionCTIsChecked ? "" : "hidden",
                            '">\n                                        ',
                            consPrimaryAmps + "A",
                            "\n                                    </div>\n                                    "
                        ),
                        primaryAmpOptions &&
                            (a.push(
                                '\n                                    <select id="consumption-ct-amps" class="consumption-ct-amps-options ',
                                consumptionCTIsChecked ? "hidden" : "",
                                ' required">\n                                        '
                            ),
                            _.each(primaryAmpOptions, function (b) {
                                a.push('\n                                        <option value="', b, '"', b == consPrimaryAmps ? "selected" : "", " >", b + "A", "</option>\n                                        ");
                            }),
                            a.push("\n                                    </select>\n                                    ")),
                        a.push(
                            '\n                                </div>\n                                <div class = "col-xs-4 col-sm-4 col-md-4 col-lg-4">\n                                    ',
                            "5A",
                            '\n                                </div>\n                                <div class = "col-xs-4 col-sm-4 col-md-4 col-lg-4">\n                                    ',
                            "20",
                            '\n                                </div>\n                            </div>\n                            <div class="ct-setting row">\n                                <div class = "col-xs-4 col-sm-4 col-md-4 col-lg-4">\n                                    <a class="consumption-ct-edit ',
                            consumptionCTIsChecked ? "" : "hidden",
                            '" style="text-decoration:none">\n                                        Edit\n                                    </a>\n                                </div>\n                            </div>\n                        </div>\n                <button type="button" id="update-current-ct" class="btn btn-primary btn-block hidden">',
                            I18n.t("envoy_backbone.buttons.update"),
                            "</button>\n            </div>\n        </div>\n        </div>\n        "
                        )),
                    a.push("\n\n    </div>\n</div>\n")),
                a.push("\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["meters/external_production_meter"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                "<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <div class='subviewheader page-header'>\n            <a class=\"btn btn-primary btn-back pull-left\" href=\"#meters\"><span class=\"glyphicons left_arrow\"></span></a> <h2>",
                I18n.t("envoy_backbone.meters.type." + model.type),
                "</h2>\n        </div>\n    </div>\n</div>\n<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <ul class=\"list-group lg1\">\n            <li class=\"list-group-item\"><label>",
                I18n.t("envoy_backbone.meters.id"),
                '</label>\n                <span class="descriptor">',
                model.id,
                '</span>\n            </li>\n        </ul>\n        <ul class="list-group lg1 metering">\n            <li class="list-group-item">\n                <span class="descriptor">',
                I18n.t("envoy_backbone.meters.type." + model.type),
                "</span>\n            </li>\n        </ul>\n    </div>\n</div>\n"
            );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["meters/internal_consumption_meter"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                "<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <div class='subviewheader page-header'>\n            <a class=\"btn btn-primary btn-back pull-left\" href=\"#meters\"><span class=\"glyphicons left_arrow\"></span></a>\n            <h2>",
                I18n.t("envoy_backbone.meters.consumption"),
                "</h2>\n        </div>\n    </div>\n</div>\n"
            ),
                void 0 == model.meteringStatus
                    ? a.push(
                          "\n<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <ul class=\"list-group message-group\">\n            <li class=\"list-group-item clearfix\">\n                <div class='user-messaging'>\n                    <div class='messaging'>\n                        ",
                          I18n.t("envoy_backbone.meters.no_consumption"),
                          "\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </div>\n</div>\n"
                      )
                    : "disabled" == model.state
                    ? (a.push(
                          "\n    <div class=\"row\">\n        <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n            <div class=\"check_wiring_view\"></div>\n        </div>\n    </div>\n    <div class='row'>\n        <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n            <form id=\"update_consumption_config\">\n                "
                      ),
                      showStats &&
                          (a.push(
                              "\n                <div class='list-group'>\n                    <div class=\"list-group-item\"><label>",
                              I18n.t("envoy_backbone.meters.mode"),
                              '</label>\n                        <span class="descriptor">',
                              I18n.t("envoy_backbone.meters.meter_mode." + model.phaseMode),
                              '</span>\n                    </div>\n                    <div class="list-group-item alert inline-alert">\n                        <div class="descriptor">\n                                <span class="glyphicons envoy-alrt envoy-alrt-info circle_info"></span>\n                                <span class="alert-text">\n                                    '
                          ),
                          "three" == model.phaseMode
                              ? a.push("\n                                    ", I18n.t("envoy_backbone.meters.multi_phase_warning.consumption.post_continue"), "\n                                    ")
                              : a.push("\n                                    ", I18n.t("envoy_backbone.meters.single_phase_warning.consumption.post_continue"), "\n                                    "),
                          a.push(
                              '\n                                </span>\n                         </div>\n                    </div>\n                </div>\n                \x3c!--pre-enabled stats--\x3e\n                <div class="load_only_meter_stats_view"></div>\n                <div class="load_and_solar_meter_stats_view"></div>\n                '
                          )),
                      a.push('\n\n                <ul class="list-group lg1 metering">\n                    '),
                      showStats
                          ? a.push('\n                    <li class="list-group-item">\n                    ')
                          : (a.push(
                                '\n                    <li class="list-group-item">\n                        <label>',
                                I18n.t("envoy_backbone.meters.mode"),
                                '</label>\n                        <span class="descriptor">',
                                I18n.t("envoy_backbone.meters.meter_mode." + model.phaseMode),
                                '</span>\n                    </li>\n                    <li class="list-group-item">\n                     <div class="alert inline-alert">\n                        <div class="descriptor">\n                            <span class="glyphicons envoy-alrt envoy-alrt-info circle_info"></span>\n                            <span class="alert-text">\n                                    '
                            ),
                            "three" == model.phaseMode
                                ? (a.push("\n                                        "),
                                  1 < phaseOptions.length
                                      ? a.push("\n                                            ", I18n.t("envoy_backbone.meters.multi_phase_warning.consumption.pre_continue"), "\n                                        ")
                                      : a.push("\n                                            ", I18n.t("envoy_backbone.meters.multi_phase_warning.consumption.pre_continue_one"), "\n                                        "),
                                  a.push("\n                                    "))
                                : a.push("\n                                        ", I18n.t("envoy_backbone.meters.single_phase_warning.consumption.pre_continue"), "\n                                    "),
                            a.push("\n                            </span>\n                        </div>\n                         </div>\n                    ")),
                      a.push("\n\n\n                    "),
                      "three" == model.phaseMode &&
                          (a.push(
                              "\n                        <label>",
                              I18n.t("envoy_backbone.meters.phase_count"),
                              '</label>\n                        <div>\n                            <select class="phase-count-select required ',
                              1 < phaseOptions.length ? "" : "hidden",
                              '">\n                                '
                          ),
                          showStats || a.push('\n                                <option value="" selected >', I18n.t("envoy_backbone.forms.select_prompt"), "</option>\n                                "),
                          a.push("\n                                "),
                          _.each(phaseOptions, function (b) {
                              a.push(
                                  '\n                                <option value="',
                                  b,
                                  '" ',
                                  b == selectedPhase ? "selected" : "",
                                  " > ",
                                  I18n.t("envoy_backbone.meters.multi_phase_options.mphase_" + b),
                                  "</option>\n                                "
                              );
                          }),
                          a.push(
                              '\n                            </select>\n                            <span class="descriptor maxauto ',
                              1 < phaseOptions.length ? "hidden" : "",
                              '">',
                              I18n.t("envoy_backbone.meters.multi_phase_options.mphase_" + phaseOptions[0]),
                              '</span>\n                        </div>\n                    </li>\n                    <li class="list-group-item">\n                    '
                          )),
                      a.push(
                          "\n                        <label>",
                          I18n.t("envoy_backbone.meters.consumption_meter.measurement_type"),
                          '</label>\n\n                        <div class="user-messaging metered-circuit">\n\n                            <div class=""> <span class="descriptor maxauto">',
                          "single" == model.phaseMode ? I18n.t("envoy_backbone.meters.consumption_meter.meter_type_desc_singular") : I18n.t("envoy_backbone.meters.consumption_meter.meter_type_desc"),
                          '</span>\n                                <div><select class="measurement-type-select">\n                                        '
                      ),
                      _.each(["net-consumption", "total-consumption"], function (b) {
                          a.push(
                              '\n                                        <option value="',
                              b,
                              '" ',
                              b == selectedMeasurementType ? "selected" : "",
                              ">",
                              I18n.t("envoy_backbone.meters.meter_type_verbose." + b),
                              "</option>\n                                        "
                          );
                      }),
                      a.push(
                          '\n                                    </select></div>\n                            </div>\n\n                        </div>\n                    </li>\n                    <li class=\'list-group-item action btn-holder\'>\n                        <button type="button" id="main_button" class="btn btn-primary btn-block submit">',
                          showStats ? I18n.t("envoy_backbone.meters.enable_consumption_meter") : I18n.t("envoy_backbone.meters.view_readings"),
                          "</button>\n                    </li>\n                </ul>\n            </form>\n        </div>\n    </div>\n"
                      ))
                    : (a.push(
                          '\n<div class="row">\n    <div class=\'col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2\'>\n        <div class =" check_wiring_view"></div>\n    </div>\n</div>\n\n<div class=\'row\'>\n    <div class=\'col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2\'>\n        <div class="list-group lg1 metering">\n\n            <div class="list-group-item">\n\n                <label>',
                          I18n.t("envoy_backbone.meters.mode"),
                          '</label>\n                <span class="descriptor maxauto">\n                    ',
                          I18n.t("envoy_backbone.meters.meter_mode." + model.phaseMode),
                          ""
                      ),
                      "three" == model.phaseMode && a.push("", ": " + I18n.t("envoy_backbone.meters.multi_phase_options.mphase_" + model.phaseCount), ""),
                      a.push("\n                </span>\n                "),
                      meterDisableIsAllowed && a.push('\n                    <button class="btn-danger pull-right" id="disable">Disable</button>\n                '),
                      a.push("\n                "),
                      "three" == model.phaseMode &&
                          1 < phaseOptions.length &&
                          (a.push(
                              '\n                <a class="accordion-toggle collapsed show-more-info show-reporting-more-info"  data-toggle="collapse" href="#details">\n\n                    <span class="glyphicons expand"></span>',
                              I18n.t("envoy_backbone.buttons.edit"),
                              '\n                </a>\n                <div class="collapse" id="details">\n                    <form id="update_consumption_config">\n                        <label class="description-blck report-settings clearfix" >',
                              I18n.t("envoy_backbone.meters.phase_count"),
                              '</label>\n                        <div>\n                            <select class="phase-count-select required">\n                                '
                          ),
                          showStats || a.push('\n                                <option value="" selected >', I18n.t("envoy_backbone.forms.select_prompt"), "</option>\n                                "),
                          a.push("\n                                "),
                          _.each(phaseOptions, function (b) {
                              a.push(
                                  '\n                                <option value="',
                                  b,
                                  '" ',
                                  b == selectedPhase ? "selected" : "",
                                  " > ",
                                  I18n.t("envoy_backbone.meters.multi_phase_options.mphase_" + b),
                                  "</option>\n                                "
                              );
                          }),
                          a.push(
                              '\n                            </select>\n                        </div>\n                        <button type="button" class="btn btn-primary btn-block submit">',
                              I18n.t("envoy_backbone.meters.update_settings"),
                              "</button>\n                    </form>\n                </div>\n                "
                          )),
                      a.push(
                          '\n            </div>\n            <div class="list-group-item metered-circuit">\n                <label>\n                    ',
                          I18n.t("envoy_backbone.meters.consumption_meter.measurement_type"),
                          '\n                    \n                </label>\n                <span class="descriptor">',
                          I18n.t("envoy_backbone.meters.meter_type_verbose." + model.measurementType),
                          "</span>\n            </div>\n        </div>\n        "
                      ),
                      hasStorage &&
                          a.push(
                              '\n        <div class="list-group">\n            <div class="list-group-item alert inline-alert">\n                <div class="descriptor">\n                    <span class="glyphicons envoy-alrt envoy-alrt-info circle_info"></span>\n                        <span class="alert-text">\n                            ',
                              I18n.t("envoy_backbone.meters.load_contains_storage_message"),
                              "\n                        </span>\n                </div>\n            </div>\n        </div>\n        "
                          ),
                      a.push('\n\n        <div class="load_only_meter_stats_view"></div>\n        <div class="load_and_solar_meter_stats_view"></div>\n    </div>\n</div>\n')),
                a.push("\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["meters/internal_production_meter"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                "<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <div class='subviewheader'>\n            <a class=\"btn btn-primary btn-back pull-left\" href=\"#meters\"><span class=\"glyphicons left_arrow\"></span></a>\n            <h2>",
                I18n.t("envoy_backbone.meters.production"),
                "</h2>\n        </div>\n    </div>\n</div>\n"
            ),
                void 0 == model.meteringStatus
                    ? a.push(
                          "\n<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <ul class=\"list-group message-group\">\n            <li class=\"list-group-item clearfix\">\n                <div class='user-messaging'>\n                    <div class='messaging'>\n                        ",
                          I18n.t("envoy_backbone.meters.no_production"),
                          "\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </div>\n</div>\n"
                      )
                    : "disabled" == model.state
                    ? (a.push(
                          '\n    <div class="row">\n        <div class=\'col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2\'>\n            <div class = check_wiring_view></div>\n        </div>\n    </div>\n\n    <div class="row">\n        <div class=\'col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2\'>\n            <form id="update_production_config">\n                '
                      ),
                      showStats &&
                          (a.push(
                              '\n                \x3c!--<li class="list-group-item list-group-item-last">--\x3e\n                <div class="list-group">\n                    <div class="list-group-item"><label>',
                              I18n.t("envoy_backbone.meters.mode"),
                              '</label>\n                        <div class="descriptor">',
                              I18n.t("envoy_backbone.meters.meter_mode." + model.phaseMode),
                              '</div>\n                    </div>\n                    <div class="list-group-item alert inline-alert">\n\n                        <div class="descriptor">\n                            '
                          ),
                          wizard
                              ? a.push(
                                    '\n                                <span class="glyphicons envoy-alrt envoy-wizard-ok ok"></span>\n                                <span class="alert-text">\n                                    ',
                                    I18n.t("envoy_backbone.meters.wizard.prod_enable_desc"),
                                    "\n                                </span>\n                            "
                                )
                              : (a.push(
                                    '\n                                <span class="glyphicons envoy-alrt envoy-alrt-info circle_info"></span>\n                                <span class="alert-text">\n                                    '
                                ),
                                "three" == model.phaseMode
                                    ? a.push("\n                                    ", I18n.t("envoy_backbone.meters.multi_phase_warning.production.post_continue"), "\n                                    ")
                                    : a.push("\n                                    ", I18n.t("envoy_backbone.meters.single_phase_warning.production.post_continue"), "\n                                    "),
                                a.push("\n                                </span>\n                            ")),
                          a.push(
                              '\n                        </div>\n                    </div>\n\n                    <div class="phase_coupler_warning list-group-item alert inline-alert hidden">\n                        <div class="descriptor">\n                            <span class="glyphicons envoy-alrt envoy-alrt-info circle_info"></span>\n                            <span class="alert-text">\n                                ',
                              I18n.t("envoy_backbone.meters.pmu.phase_coupler"),
                              '\n                            </span>\n                        </div>\n                    </div>\n\n                </div>\n                \x3c!--pre-enabled stats--\x3e\n                <div class="load_only_meter_stats_view"></div>\n                '
                          )),
                      a.push('\n\n                <ul class="list-group lg1 metering">\n                    '),
                      showStats ||
                          (a.push(
                              '\n                    <li class="list-group-item">\n                        <label>',
                              I18n.t("envoy_backbone.meters.mode"),
                              '</label>\n                        <span class="descriptor">',
                              I18n.t("envoy_backbone.meters.meter_mode." + model.phaseMode),
                              '</span>\n                    </li>\n                    <li class="list-group-item alert inline-alert">\n                        <div class="descriptor">\n                            <span class="glyphicons envoy-alrt envoy-alrt-info circle_info"></span>\n                            <span class="alert-text">\n                                '
                          ),
                          "three" == model.phaseMode
                              ? a.push("\n                                ", I18n.t("envoy_backbone.meters.multi_phase_warning.production.pre_continue"), "\n                                ")
                              : a.push("\n                                ", I18n.t("envoy_backbone.meters.single_phase_warning.production.pre_continue"), "\n                                "),
                          a.push(
                              '\n                            </span>\n                        </div>\n                    </li>\n                    <div class="phase_coupler_warning list-group-item alert inline-alert hidden">\n                        <div class="descriptor">\n                            <span class="glyphicons envoy-alrt envoy-alrt-info circle_info"></span>\n                            <span class="alert-text">\n                                ',
                              I18n.t("envoy_backbone.meters.pmu.phase_coupler"),
                              "\n                            </span>\n                        </div>\n                    </div>\n                    "
                          )),
                      a.push("\n                    "),
                      wizard ||
                          "three" != model.phaseMode ||
                          (a.push(
                              '\n                    <li class="list-group-item">\n                        <label>',
                              I18n.t("envoy_backbone.meters.phase_count"),
                              '</label>\n                        <div>\n\n                            <select class="phase-count-select required ',
                              1 < phaseOptions.length ? "" : "hidden",
                              '">\n                                '
                          ),
                          showStats || a.push('\n                                <option value="" selected >', I18n.t("envoy_backbone.forms.select_prompt"), "</option>\n                                "),
                          a.push("\n                                "),
                          _.each(phaseOptions, function (b) {
                              a.push(
                                  '\n                                <option value="',
                                  b,
                                  '" ',
                                  b == selectedPhase ? "selected" : "",
                                  " > ",
                                  I18n.t("envoy_backbone.meters.multi_phase_options.mphase_" + b),
                                  "</option>\n                                "
                              );
                          }),
                          a.push(
                              '\n                            </select>\n                            <div class="descriptor maxauto ',
                              1 < phaseOptions.length ? "hidden" : "",
                              '">',
                              I18n.t("envoy_backbone.meters.multi_phase_options.mphase_" + phaseOptions[0]),
                              "</div>\n                        </div>\n                    </li>\n                    "
                          )),
                      a.push(
                          '\n                    <li class=\'list-group-item action btn-holder\'>\n                        <button type="button" id="main_button" class="btn btn-primary btn-block submit">',
                          showStats ? I18n.t("envoy_backbone.meters.enable_production_meter") : I18n.t("envoy_backbone.meters.view_readings"),
                          "</button>\n                    </li>\n\n                </ul>\n\n            </form>\n        </div>\n    </div>\n\n\n"
                      ))
                    : (a.push(
                          "\n<div class=\"row\">\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <div class = check_wiring_view></div>\n    </div>\n</div>\n\n\n<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <ul class=\"list-group lg1 metering\">\n            <li class=\"list-group-item\">\n                <label>",
                          I18n.t("envoy_backbone.meters.mode"),
                          '</label>\n                <span class="descriptor maxauto">\n                    ',
                          I18n.t("envoy_backbone.meters.meter_mode." + model.phaseMode),
                          ""
                      ),
                      "three" == model.phaseMode && a.push("", ": " + I18n.t("envoy_backbone.meters.multi_phase_options.mphase_" + model.phaseCount), ""),
                      a.push("\n                </span>\n                "),
                      meterDisableIsAllowed && a.push('\n                    <button class="btn-danger pull-right" id="disable">Disable</button>\n                '),
                      a.push("\n                "),
                      "three" == model.phaseMode &&
                          1 < phaseOptions.length &&
                          (a.push(
                              '\n                <a class="accordion-toggle collapsed show-more-info show-reporting-more-info"  data-toggle="collapse" href="#details">\n                    <span class="glyphicons expand"></span>',
                              I18n.t("envoy_backbone.buttons.edit"),
                              '</a>\n                <div class="collapse" id="details">\n                    <form id="update_production_config">\n                        <label class="description-blck report-settings clearfix" >',
                              I18n.t("envoy_backbone.meters.phase_count"),
                              '</label>\n                        <div>\n                            <select class="phase-count-select required">\n                                '
                          ),
                          showStats || a.push('\n                                <option value="" selected >', I18n.t("envoy_backbone.forms.select_prompt"), "</option>\n                                "),
                          a.push("\n                                "),
                          _.each(phaseOptions, function (b) {
                              a.push(
                                  '\n                                <option value="',
                                  b,
                                  '" ',
                                  b == selectedPhase ? "selected" : "",
                                  " > ",
                                  I18n.t("envoy_backbone.meters.multi_phase_options.mphase_" + b),
                                  "</option>\n                                "
                              );
                          }),
                          a.push(
                              '\n                            </select>\n                        </div>\n                        <button type="button" class="btn btn-primary btn-block submit">',
                              I18n.t("envoy_backbone.meters.update_settings"),
                              "</button>\n                    </form>\n                </div>\n                "
                          )),
                      a.push('\n            </li>\n        </ul>\n        <div class="load_only_meter_stats_view"></div>\n    </div>\n\n</div>\n\n')),
                a.push("\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["meters/main"] = function (b) {
        var a = [];
        with (b || {})
            a.push("<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <div class=\"page-header\">\n            "),
                meters_enabled &&
                    a.push(
                        '\n            <div class="pull-right header_button">\n                <button type="button" id="check_meters" class="btn btn-envoy btn-primary btn-scan pull-right">\n                    <span class="device_scan_button_title pull-left">',
                        I18n.t("envoy_backbone.meters.wizard.check_meters"),
                        '</span>\n                    <span class="glyphicons-icon meter-wizard"></span>\n                </button>\n            </div>\n            '
                    ),
                a.push(
                    "\n            <h2>",
                    I18n.t("envoy_backbone.meters.title"),
                    "</h2>\n        </div>\n    </div>\n</div>\n<div class='row internal_meters'>\n</div>\n<div class=\"rpw rgm_list\">\n</div>\n<div class='row pmu_list'>\n</div>\n"
                );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["meters/meter_stats_view"] = function (b) {
        var a = [];
        with (b || {})
            a.push(""),
                1 == isLoading
                    ? a.push(
                          "\n    <div class='row'>\n        <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n            <div class=\"user-messaging clearfix\">\n                <div class=\"pull-left preloader\"></div>\n                <div class='pull-left messaging single-message'>",
                          I18n.t("envoy_backbone.loading"),
                          "</div>\n            </div>\n        </div>\n    </div>\n"
                      )
                    : (a.push('\n    <div class="list-group lg1 metering">\n        <div class="list-group-item">\n            <h4 class="clearfix">', name, "</h4>\n            <label>", description, "</label>\n        </div>\n        "),
                      showValues
                          ? (a.push('\n        <div class="list-group-item">\n            '),
                            "enabled" == model.state &&
                                a.push(
                                    '\n            <div class="panel-group">\n                <div class="panel panel-default">\n                    <div class="panel-heading">\n                        <a class="accordion-toggle ',
                                    panelsExpanded["#" + measurementType + "-power-details"] ? "" : "collapsed",
                                    '" data-toggle="collapse" href="#',
                                    measurementType,
                                    '-power-details">\n                            <div class=\'pull-right\'>\n                                <span class="glyphicons expand"></span>\n                            </div>\n            '
                                ),
                            a.push(
                                "\n                <div class=\"phase_details\">\n                    <label class=''>",
                                I18n.l(fastData ? "time.formats.noday_nozone_datetime_secs_ui" : "time.formats.noday_nozone_datetime_ui", meterStats.time),
                                '</label>\n                    <span class="value">',
                                activePowerValue,
                                '</span>\n                    <span class="units">',
                                activePowerUnits,
                                '</span>\n                    <span class="descriptor">',
                                I18n.t("envoy_backbone.meters.active_power"),
                                '</span>\n                    <span class="descriptor exim">',
                                activePowerDirection,
                                "</span>\n                </div>\n            "
                            ),
                            "enabled" == model.state && a.push('\n            </a>\n                        <div class="clearfix"></div>\n                    </div>\n                </div>\n            </div>\n            '),
                            a.push('\n            <div class="collapse ', panelsExpanded["#" + measurementType + "-power-details"] ? "in" : "", '" id="', measurementType, '-power-details">\n                '),
                            "enabled" == model.state &&
                                a.push(
                                    '\n                <div class="phase_details">\n                    <span class="value">',
                                    apparentPowerValue,
                                    '</span>\n                    <span class="units">',
                                    apparentPowerUnits,
                                    '</span>\n                    <span class="descriptor">',
                                    I18n.t("envoy_backbone.meters.apparent_power"),
                                    "</span>\n                </div>\n                "
                                ),
                            a.push('\n                <ul class="list-group phase-default">\n                    <li class="list-group-item phase_detail_table">\n                        '),
                            _.each(meterStats.lines, function (b, d) {
                                a.push(
                                    '\n                        <table class="phase_detail">\n                            <caption>\n                                ',
                                    I18n.t("envoy_backbone.meters.phase_labels.phase_" + (d + 1)),
                                    "\n                                "
                                );
                                "" != activePowerDirection &&
                                    a.push(
                                        '\n                                <span class="units">',
                                        I18n.t("envoy_backbone.overview." + (0 > b.wNow.value ? "power_exporting" : "power_importing")),
                                        "</span>\n                                "
                                    );
                                a.push('\n                            </caption>\n                            <tbody>\n                                <tr class="phase-row">\n                                    ');
                                _.each(lineEimStatsPower.headers, function (d) {
                                    a.push("\n                                    ");
                                    if ("enabled" == model.state || d.showBeforeEnabled)
                                        a.push("\n                                    <td>\n                                        "),
                                            b.hasOwnProperty(d.endpoint_stat)
                                                ? a.push(
                                                      '\n                                        <span class="value">',
                                                      b[d.endpoint_stat].formatted,
                                                      '</span>\n                                        <span class="units">',
                                                      b[d.endpoint_stat].units,
                                                      "</span>\n                                        "
                                                  )
                                                : a.push('\n                                        <span class="value">', I18n.t("envoy_backbone.meters.unavailable"), "</span>\n                                        "),
                                            a.push("\n                                    </td>\n                                    ");
                                    a.push("\n                                    ");
                                });
                                a.push("\n                                </tr>\n                            </tbody>\n                        </table>\n                        ");
                            }),
                            a.push("\n                    </li>\n                </ul>\n            </div>\n        </div>\n        "),
                            showLifetime &&
                                (a.push(
                                    '\n        <div class="list-group-item">\n            <div class="panel-group">\n                <div class="panel panel-default">\n                    <div class="panel-heading">\n                        <a class="accordion-toggle ',
                                    panelsExpanded["#" + measurementType + "-energy-details"] ? "" : "collapsed",
                                    '" data-toggle="collapse" href="#',
                                    measurementType,
                                    '-energy-details">\n                            <div class=\'pull-right\'>\n                                <span class="glyphicons expand"></span>\n                            </div>\n                            <div class="phase_details">\n                                <label class=\'\'>Lifetime</label>\n                                <span class="value">',
                                    activeEnergyValue,
                                    '</span>\n                                <span class="units">',
                                    activeEnergyUnits,
                                    '</span>\n                                <span class="descriptor">',
                                    I18n.t("envoy_backbone.meters.active_energy"),
                                    '</span>\n                            </div>\n                        </a>\n                        <div class="clearfix"></div>\n                    </div>\n                </div>\n            </div>\n            <div class="collapse ',
                                    panelsExpanded["#" + measurementType + "-energy-details"] ? "in" : "",
                                    '" id="',
                                    measurementType,
                                    '-energy-details">\n                <div class="phase_details">\n                    <span class="value in">',
                                    apparentEnergyValue,
                                    '</span>\n                    <span class="units">',
                                    apparentEnergyUnits,
                                    '</span>\n                    <span class="descriptor">',
                                    I18n.t("envoy_backbone.meters.apparent_energy"),
                                    '</span>\n                </div>\n                <ul class="list-group phase-default">\n                    <li class="list-group-item phase_detail_table">\n                        '
                                ),
                                _.each(meterStats.lines, function (b, d) {
                                    a.push(
                                        '\n                        <table class="phase_detail">\n                            <caption>\n                                ',
                                        I18n.t("envoy_backbone.meters.phase_labels.phase_" + (d + 1)),
                                        '\n                            </caption>\n\n                            <tbody>\n                            <tr class="phase-row">\n                                '
                                    );
                                    _.each(lineEimStatsEnergy.headers, function (d) {
                                        a.push("\n                                ");
                                        if ("enabled" == model.state || d.showBeforeEnabled)
                                            a.push("\n                                <td>\n                                    "),
                                                b.hasOwnProperty(d.endpoint_stat)
                                                    ? a.push(
                                                          '\n                                    <span class="value">',
                                                          b[d.endpoint_stat].formatted,
                                                          '</span>\n                                    <span class="units">',
                                                          b[d.endpoint_stat].units,
                                                          "</span>\n                                    "
                                                      )
                                                    : a.push('\n                                    <span class="value">', I18n.t("envoy_backbone.meters.unavailable"), "</span>\n                                    "),
                                                a.push("\n                                </td>\n                                ");
                                        a.push("\n                                ");
                                    });
                                    a.push("\n                            </tr>\n                            </tbody>\n                        </table>\n                        ");
                                }),
                                a.push("\n                    </li>\n                </ul>\n            </div>\n        </div>\n        ")),
                            a.push("\n        "))
                          : a.push(
                                '\n        <div class="list-group-item alert inline-alert">\n            <div class="descriptor">\n                <span class="glyphicons envoy-alrt envoy-alrt-warning warning_sign"></span>\n                <span class="alert-text">\n                    ',
                                I18n.t("envoy_backbone.meters.enable_production_prompt"),
                                "\n                </span>\n            </div>\n        </div>\n        "
                            ),
                      a.push("\n    </div>\n")),
                a.push("\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["meters/meter_wizard"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                '<div class=\'row\'>\n    <div class=\'col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2\'>\n        \x3c!--meter_wizard.jst.ejs--\x3e\n        <div class="page-header">\n                <button type="button" id="global_exit_wizard" class="btn btn-envoy btn-primary btn-scan pull-right">\n                    <span>',
                I18n.t("envoy_backbone.meters.wizard.exit_wizard"),
                "</span>\n                </button>\n            <h2>",
                I18n.t("envoy_backbone.meters.title"),
                '</h2>\n        </div>\n    </div>\n</div>\n<div class="wizard_view"></div>\n\n\n'
            );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["meters/meter_wizard_1"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                "<div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n    <div class=\"list-group meter_wizard\">\n        <div class='list-group-item heading'>\n            <span class=\"descriptor\">",
                displayOptions.title,
                '</span>\n        </div>\n        <div class="meter-info-block"></div>\n        <div class="meter-info-block2"></div>\n        <p>\n            '
            ),
                _.each(displayOptions.bullets, function (b) {
                    a.push(
                        '\n                <a class="checkbox check-item" id="meter_wizard_check_box" href="javascript:;">\n                    <span class="glyphicons cb unchecked"></span>\n                    <span>',
                        b,
                        "</span>\n                </a>\n            "
                    );
                }),
                a.push("\n        </p>\n        "),
                displayOptions.timer &&
                    a.push(
                        '\n        <div class="timer-val">\n            <span class="timer-val" id="timer-val">',
                        displayOptions.timerCount,
                        ' </span>\n        </div>\n        <div class="timer-buttons">\n            <span><button class="meter-wizard-timer timer-cntrl btn btn-success" id="timer-control">',
                        I18n.t("envoy_backbone.meters.wizard.start_timer"),
                        '</button></span>\n            <span><button class="meter-wizard-timer timer-reset btn" id="timer-reset" disabled>',
                        I18n.t("envoy_backbone.meters.wizard.reset_timer"),
                        " </button></span>\n        </div>\n        "
                    ),
                a.push(
                    '\n        <div class=\'action btn-holder\'>\n            <button type="button" id="btn_next"\n                    class="btn btn-primary btn-block" ',
                    displayOptions.button.state,
                    ">",
                    displayOptions.button.text,
                    "</button>\n        </div>\n    </div>\n</div>\n"
                );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["meters/meter_wizard_c4"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                "\x3c!-- Meter Wizard c4 --\x3e\n<div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n    <div class=\"list-group meter_wizard\">\n        <div class='list-group-item heading'>\n            <span class=\"descriptor\">",
                displayOptions.title,
                '</span>\n        </div>\n        <div class="meter-info-block"></div>\n        <p>',
                displayOptions.question,
                '</p>\n        <div class="col-xs-6 col-sm-6 col-md-6">\n            <a class="checkbox phase-type" id="net-consumption" href="javascript:;">\n                <span class="glyphicons cb unchecked"></span>\n                <span class="descriptor">',
                I18n.t("envoy_backbone.meters.wizard.positive"),
                "</span>\n                <p>",
                I18n.t("envoy_backbone.meters.meter_type_verbose.net-consumption"),
                '</p>\n                <p class="truncate">',
                I18n.t("envoy_backbone.meters.wizard.most_common"),
                "</p>\n                \x3c!--<p>",
                displayOptions.net_desc,
                '</p>--\x3e\n                <img src="/backbone/images/meters/net_consumption.svg"/>\n            </a>\n        </div>\n        <div class="col-xs-6 col-sm-6 col-md-6">\n            <a class="checkbox phase-type" id="total-consumption" href="javascript:;">\n                <span class="glyphicons cb unchecked"></span>\n                <span class="descriptor">',
                I18n.t("envoy_backbone.meters.wizard.negative"),
                "</span>\n                <p>",
                I18n.t("envoy_backbone.meters.meter_type_verbose.total-consumption"),
                "</p>\n                \x3c!--<p>",
                displayOptions.total_desc,
                '</p>--\x3e\n                <img src="/backbone/images/meters/total_consumption.svg"/>\n            </a>\n        </div>\n        <div class=\'action btn-holder\'>\n            <button type="button" id="btn_next" class="btn btn-primary btn-block" ',
                displayOptions.button.state,
                ">\n                ",
                displayOptions.button.text,
                "\n            </button>\n        </div>\n    </div>\n</div>\n"
            );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["meters/meter_wizard_choice"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                "<div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n    <div class=\"list-group meter_wizard\">\n        <div class='list-group-item heading'>\n            <span class=\"descriptor\">",
                displayOptions.title,
                '</span>\n        </div>\n        <div class="meter-info-block"></div>\n        <ul>\n            <li>\n                ',
                displayOptions.question,
                '\n                <div class="buttons">\n                    <button id="btn_yes" class="btn btn-default wiz-choice">',
                I18n.t("envoy_backbone.profiles.ac_batteries.true"),
                '</button>\n                    <button id="btn_no"  class="btn btn-default wiz-choice">',
                I18n.t("envoy_backbone.profiles.ac_batteries.false"),
                "</button>\n                </div>\n            </li>\n            "
            ),
                displayOptions.note &&
                    a.push(
                        "\n            <li>",
                        displayOptions.note,
                        '\n                <div class="buttons">\n                    <button id="trouble" class="btn btn-default wiz-choice">',
                        I18n.t("envoy_backbone.initial_setup.continue"),
                        "</button>\n                </div>\n            </li>\n            "
                    ),
                a.push("\n        </ul>\n\n    </div>\n</div>\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["meters/meter_wizard_enable"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                "<div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n    <div class=\"list-group meter_wizard\">\n        <div class='list-group-item heading'><span\n                    class=\"descriptor\">",
                displayOptions.title,
                '</span>\n        </div>\n        <div class="meter-info-block"></div>\n        <div class=\'action btn-holder\'>\n            <button type="button" id="btn_enable"\n                    class="btn btn-primary btn-block">',
                displayOptions.button.text,
                "</button>\n        </div>\n    </div>\n</div>\n"
            );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["meters/meter_wizard_info_block"] = function (b) {
        var a = [];
        with (b || {}) {
            a.push('<div class="alert inline-alert">\n    <div class="descriptor">\n        <span class="', displayOptions.icon_type, '" id="icon"></span>\n        <div class="wrapper">\n            ');
            displayOptions.infoTitle &&
                (a.push('\n                <div class="info-title">', displayOptions.infoTitle, "</div>\n                "),
                meterStats.time && a.push("\n                    <label class=''>", I18n.l("time.formats.noday_nozone_datetime_secs_ui", meterStats.time), "</label>\n                "),
                a.push("\n            "));
            a.push("\n            ");
            if (0 < _.size(meterStats)) {
                a.push(
                    '\n                <div class="meter-stat meter-wizard-curr-power ',
                    meterStats.wNow.naughtyPower ? "meter-highlight-stat" : "",
                    '" >\n                    <span class="value">',
                    meterStats.wNow.formatted,
                    '</span>\n                    <span class="units">',
                    meterStats.wNow.units,
                    '</span>\n                    <span class="alert-text">',
                    meterStats.wNow.dirStr,
                    "</span>\n                </div>\n\n                "
                );
                if ((phaseCount && 1 < phaseCount) || displayOptions.showAllPhases)
                    a.push('\n                    <table class="phase_detail">\n                        <tr>\n                            '),
                        _.each(meterStats.lines, function (b, d) {
                            a.push(
                                "\n                            <td id=",
                                "td" + d,
                                " class=",
                                b.naughtyPower ? "meter-highlight-stat" : "",
                                '>\n                                <span class="description">',
                                I18n.t("envoy_backbone.meters.phase_labels.phase_" + (d + 1)),
                                '</span>\n                                <span class="value">',
                                b.wNow.formatted,
                                '</span>\n                                <span class="units">',
                                b.wNow.units,
                                '</span>\n                                <div class="dir-word">',
                                b.wNow.dirStr,
                                "</div>\n                            </td>\n                            "
                            );
                        }),
                        a.push("\n                        </tr>\n                    </table>\n                ");
                a.push("\n            ");
            } else
                displayOptions.showLoader &&
                    a.push(
                        "\n            \x3c!-- This in not currently enabled. If desired to see a loader then pass in this var--\x3e\n            <div class='row'>\n                <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n                    <div class=\"user-messaging\">\n                        <div class=\"pull-left preloader\"></div>\n                        <div class='pull-left messaging single-message'>",
                        I18n.t("envoy_backbone.loading"),
                        "</div>\n                    </div>\n                </div>\n            </div>\n            "
                    );
            a.push("\n        </div>\n        ");
            displayOptions.alert_text && a.push('\n        <div class="alert-text">', displayOptions.alert_text, "</div>\n        ");
            a.push("\n    </div>\n</div>\n");
        }
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["meters/meter_wizard_loading"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                "<div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n    <div class=\"list-group meter_wizard\">\n        <div class='list-group-item heading'><span\n                    class=\"descriptor\">",
                displayOptions.title,
                "</span>\n        </div>\n        <div class='row'>\n            <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n                <div class=\"user-messaging\">\n                    <div class=\"pull-left preloader\"></div>\n                    <div class='pull-left messaging single-message'>",
                I18n.t("envoy_backbone.loading"),
                "</div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n"
            );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["meters/meter_wizard_phase_sel"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                "<div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n    \x3c!--meter_wizard_phase_sel--\x3e\n    <div class=\"list-group meter_wizard\">\n        <div class='list-group-item action heading'>\n            <span class=\"descriptor\">",
                I18n.t("envoy_backbone.meters.wizard.setup_title", { meter_type: I18n.t("envoy_backbone.overview." + model.type.split("_")[1] + "_meter_label") }),
                '</span>\n        </div>\n        <div class="phase_coupler_warning list-group-item alert inline-alert hidden">\n            <div class="descriptor">\n                <span class="glyphicons envoy-alrt envoy-alrt-info circle_info"></span>\n                <span class="alert-text"> ',
                I18n.t("envoy_backbone.meters.pmu.phase_coupler"),
                " </span>\n            </div>\n        </div>\n            <p>",
                I18n.t("envoy_backbone.meters.wizard.phase_select_prompt"),
                '</p>\n            <p>\n                <select class="phase-count-select required ',
                1 < phaseOptions.length ? "" : "hidden",
                '">\n                    '
            ),
                selectedPhase || a.push('\n                    <option value="" selected >', I18n.t("envoy_backbone.forms.select_prompt"), "</option>\n                    "),
                a.push("\n                    "),
                _.each(phaseOptions, function (b) {
                    a.push('\n                    <option value="', b, '" ', b == selectedPhase ? "selected" : "", " > ", I18n.t("envoy_backbone.meters.multi_phase_options.mphase_" + b), "</option>\n                    ");
                }),
                a.push(
                    '\n                </select>\n                <span class="descriptor maxauto ',
                    1 < phaseOptions.length ? "hidden" : "",
                    '">',
                    I18n.t("envoy_backbone.meters.multi_phase_options.mphase_" + phaseOptions[0]),
                    '</span>\n            </p>\n            <div class=\'list-group-item action btn-holder\'>\n                <button type="button" id="btn_next" class="btn btn-primary btn-block">',
                    I18n.t("envoy_backbone.meters.wizard.btn_next"),
                    "</button>\n            </div>\n    </div>\n</div>\n"
                );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["meters/meter_wizard_phase_sel_sub_view"] = function (b) {
        var a = [];
        with (b || {})
            a.push('<div>\n    <select class="phase-count-select required ', 1 < phaseOptions.length ? "" : "hidden", '">\n        '),
                _.each(phaseOptions, function (b) {
                    a.push('\n        <option value="', b, '" ', b == selectedPhase ? "selected" : "", " > \n            ", I18n.t("envoy_backbone.meters.multi_phase_options.mphase_" + b), "    \n        </option>\n        ");
                }),
                a.push(
                    '\n    </select>\n    <div class="descriptor maxauto ',
                    1 < phaseOptions.length ? "hidden" : "",
                    '">\n        ',
                    I18n.t("envoy_backbone.meters.multi_phase_options.mphase_" + phaseOptions[0]),
                    "\n    </div>\n</div>\n"
                );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["meters/meter_wizard_ts1"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                "<div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n    <div class=\"list-group meter_wizard\">\n        <div class='list-group-item heading'><span\n                    class=\"descriptor\">",
                displayOptions.title,
                ' </span>\n        </div>\n        <div class="meter-info-block"></div>\n        <ul>\n            '
            ),
                _.each(displayOptions.bullets, function (b) {
                    a.push("\n               <li>", b, "</li>\n            ");
                }),
                a.push(
                    '\n        </ul>\n        <div class=\'action btn-holder\'>\n            <button type="button" id="btn_try_again"\n                    class="btn btn-primary btn-block" ',
                    displayOptions.button.state,
                    ">",
                    displayOptions.button.text,
                    '</button>\n        </div>\n        <p class="note">\n            <a id="trouble" href="javascript:;"> ',
                    displayOptions.troublePrompt,
                    "</a>\n        </p>\n    </div>\n</div>\n"
                );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["meters/meter_wizard_ts_gen"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                "<div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n    <div class=\"list-group meter_wizard\">\n        <div class='list-group-item heading'><span\n                    class=\"descriptor\">",
                I18n.t("envoy_backbone.meters.wizard.setup_title", { meter_type: meterTranslatedName }),
                ' </span>\n        </div>\n        <div class="meter-info-block"></div>\n        <ul>\n            '
            ),
                _.each(displayOptions.bullets, function (b) {
                    a.push("\n                <li>", b, "</li>\n            ");
                }),
                a.push(
                    '\n        </ul>\n\n        <div class=\'action btn-holder\'>\n            <button type="button" id="btn_try_again"\n                    class="btn btn-primary btn-block">',
                    displayOptions.button.text,
                    '</button>\n        </div>\n        <p class="note">\n            <a id="trouble" href="javascript:;"> ',
                    displayOptions.troublePrompt,
                    "</a>\n        </p>\n    </div>\n</div>\n"
                );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["meters/meter_wizard_ts_p0_5"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                "\x3c!--meter_wizard_ts_p0_5--\x3e\n<div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n    <div class=\"list-group meter_wizard\">\n        <div class='list-group-item heading'>\n            <span class=\"descriptor\">",
                displayOptions.title,
                '</span>\n        </div>\n        <div class="meter-info-block"></div>\n        <ul>\n            <li>\n                ',
                I18n.t("envoy_backbone.meters.wizard.trouble_p0_5.ts1"),
                '\n                <div class="buttons">\n                    <button id="btn_yes" class="btn btn-default">',
                I18n.t("envoy_backbone.profiles.ac_batteries.true"),
                '</button>\n                    <button id="btn_no"  class="btn btn-default">',
                I18n.t("envoy_backbone.profiles.ac_batteries.false"),
                "</button>\n                </div>\n            </li>\n        </ul>\n        "
            ),
                button_pressed &&
                    (a.push("\n            <ul>\n                "),
                    _.each(displayOptions.bullets, function (b) {
                        a.push("\n                <li>", b, "</li>\n                ");
                    }),
                    a.push("\n                "),
                    "btn_yes" === button_pressed && a.push('\n                    <div class="phase-sel-subview"></div>\n                '),
                    a.push(
                        '\n        </ul>\n        <div class=\'action btn-holder\'>\n            <button type="button" id="btn_try_again" class="btn btn-primary btn-block">\n                ',
                        I18n.t("envoy_backbone.meters.wizard.btn_try_again"),
                        '\n            </button>\n        </div>\n        <p class="note">\n            <a id="trouble" href="javascript:;">',
                        displayOptions.troublePrompt,
                        "</a>\n        </p>\n        "
                    )),
                a.push("\n\n    </div>\n</div>\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["meters/pmu_detail"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                "<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <div class='subviewheader page-header'>\n            <a class=\"btn btn-primary btn-back pull-left\" href=\"#meters\">\n                <span class=\"glyphicons left_arrow\"></span>\n            </a>\n            <h2>",
                I18n.t("envoy_backbone.meters.pmu.config.title"),
                "</h2>\n        </div>\n    </div>\n</div>\n"
            ),
                1 == isLoading
                    ? a.push(
                          "\n<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <div class=\"user-messaging clearfix\">\n            <div class=\"pull-left preloader\"></div>\n            <div class='pull-left messaging single-message'>",
                          I18n.t("envoy_backbone.loading"),
                          "</div>\n        </div>\n    </div>\n</div>\n"
                      )
                    : (a.push(
                          "\n<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <ul class=\"list-group lg1 pmu_detail\">\n            <li class=\"list-group-item\"><label>",
                          I18n.t("envoy_backbone.meters.pmu.labels.ip"),
                          '</label>\n                <span class="descriptor"><a href="',
                          location.protocol,
                          "//",
                          model.ip,
                          '?onw=1" class="btn btn-primary btn-envoy" target="_blank">',
                          model.ip,
                          ' <span class="glyphicons new_window"></span></a></span>\n            </li>\n            <li class="list-group-item"><label>',
                          I18n.t("envoy_backbone.meters.pmu.labels.production"),
                          '</label>\n                <div><span class="value">',
                          model.lifetime_energy.formatted,
                          '</span> <span class="units">',
                          model.lifetime_energy.units,
                          "</span><label class='description time'>",
                          I18n.l("time.formats.noday_nozone_datetime_ui", model.last_report_date),
                          '</label>\n            </li>\n            <li class="list-group-item"><label>',
                          I18n.t("envoy_backbone.meters.pmu.labels.status"),
                          '</label>\n                <span class="descriptor">'
                      ),
                      _.each(model.status, function (b) {
                          a.push("\n                    <div>", I18n.t(b), "</div>\n                ");
                      }),
                      a.push(
                          '</span>\n            </li>\n            <li class="list-group-item"><label>',
                          I18n.t("envoy_backbone.meters.pmu.labels.mac_address"),
                          '</label>\n                <span class="descriptor">',
                          model.id,
                          "</span>\n            </li>\n            "
                      ),
                      void 0 != model.serial_number &&
                          a.push(
                              '\n            <li class="list-group-item"><label>',
                              I18n.t("envoy_backbone.meters.pmu.labels.serial_number"),
                              '</label>\n                <span class="descriptor">',
                              model.serial_number,
                              "</span>\n            </li>\n            "
                          ),
                      a.push(
                          '\n            <li class="list-group-item"><label>',
                          I18n.t("envoy_backbone.meters.pmu.labels.part_number"),
                          '</label>\n                <span class="descriptor">',
                          model.part_number,
                          '</span>\n            </li>\n            <li class="list-group-item"><label>',
                          I18n.t("envoy_backbone.meters.pmu.labels.manufacturer"),
                          '</label>\n                <span class="descriptor">',
                          model.manufacturer,
                          '</span>\n            </li>\n            <li class="list-group-item"><label>',
                          I18n.t("envoy_backbone.meters.pmu.labels.fw_version"),
                          '</label>\n                <span class="descriptor">',
                          model.fw_version,
                          '</span>\n            </li>\n            <li class="list-group-item">\n                <button type="submit" class="btn btn-danger btn-block submit">',
                          I18n.t("envoy_backbone.meters.pmu.config.remove"),
                          "</button>\n            </li>\n        </ul>\n    </div>\n</div>\n"
                      )),
                a.push("\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["meters/pmu_overview"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                "<div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n    <div class=\"list-group\">\n        <div class='list-group-item action heading'><span class=\"descriptor\">",
                I18n.t("envoy_backbone.meters.type.pmu"),
                "</span></div>\n        "
            ),
                _.each(associated_pmus, function (b) {
                    a.push('\n        <a href="#meters/pmu_detail/', b.id, '" class="list-group-item"><span class="descriptor">', b.ip, '</span><span class="glyphicons chevron-right pull-right"></span></a>\n        ');
                }),
                a.push("\n        "),
                a.push(
                    '\n        <a href="#meters/add_pmu" class="list-group-item"><span class="descriptor">',
                    0 == associated_pmus.length ? I18n.t("envoy_backbone.meters.pmu.add_meter") : I18n.t("envoy_backbone.meters.pmu.add_another"),
                    '</span><span class="glyphicons chevron-right pull-right"></span></a>\n    </div>\n</div>\n'
                );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["microinverters/device_scan_state"] = function (b) {
        var a = [];
        with (b || {}) {
            a.push("\n    ");
            if (model.inhibited)
                a.push(
                    "\n        <div class=' user-messaging'>\n            <p class=\"small\">",
                    I18n.t("envoy_backbone.microinverters.scan_inhibited"),
                    '</p>\n        </div>\n       <div class=\'user-action\'>\n         <div class="row">\n               <div class="col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2">\n                   <button type="button" data-toggle="collapse" data-target="#device_scan" class="btn btn-block btn-default closeBtn">',
                    I18n.t("envoy_backbone.microinverters.scan_close"),
                    "</button>\n               </div>\n           </div>\n        </div>\n\n    "
                );
            else if (model.suspended)
                a.push(
                    "\n       <div class=' user-messaging'>\n            <p class=\"small\">",
                    I18n.t("envoy_backbone.microinverters.scan_suspended"),
                    '</p>\n       </div>\n        <div class=\'user-action\'>\n            <div class="row">\n              <div class="col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2">\n                  <button type="button" data-toggle="collapse" data-target="#device_scan" class="btn btn-block btn-default closeBtn">',
                    I18n.t("envoy_backbone.microinverters.scan_close"),
                    "</button>\n              </div>\n            </div>\n        </div>\n\n    "
                );
            else if (model.active && model.disabled)
                a.push(
                    "\n         <div class=' user-messaging'>\n            <p class=\"small\">",
                    I18n.t("envoy_backbone.microinverters.scan_disabled"),
                    '</p>\n         </div>\n         <div class=\'user-action\'>\n            <div class="row">\n                  <div class="col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2">\n                      <button type="button" data-toggle="collapse" data-target="#device_scan" class="btn btn-block btn-default closeBtn">',
                    I18n.t("envoy_backbone.microinverters.scan_close"),
                    "</button>\n                  </div>\n              </div>\n         </div>\n\n    "
                );
            else if (model.active) {
                a.push(
                    '\n\n      <div class=\' user-messaging user-flex\'>\n\n        <div class=" preloader" id="device_scan_active_spinner"></div>\n        <div class="messaging">\n            <span class="scan_state">',
                    I18n.t("envoy_backbone.detected.scan_inprogress"),
                    "</span>\n            <div class='remaining'>\n            "
                );
                b = Math.floor(model.remaining_minutes / 60);
                var c = model.remaining_minutes % 60;
                a.push("\n                <div>", I18n.t("envoy_backbone.detected.remaining_duration", { count: b, minutes: c }), "</div>\n            ");
                0 < model.priority_remaining_minutes &&
                    ((b = Math.floor(model.priority_remaining_minutes / 60)),
                    (c = model.priority_remaining_minutes % 60),
                    a.push("\n                <div>", I18n.t("envoy_backbone.detected.remaining_priority", { count: b, minutes: c }), "</div>\n            "));
                a.push(
                    "\n                <div>",
                    I18n.t("envoy_backbone.detected.device_target_title"),
                    '\n                    <dl class="">\n                        <dd class="description">',
                    0 < model.pcu_target ? I18n.t("envoy_backbone.detected.micro_target_seperate", { count: model.pcu_target }) : "",
                    '</dd>\n                        <dd class="description">',
                    0 < model.acb_target ? I18n.t("envoy_backbone.detected.battery_target_seperate", { count: model.acb_target }) : "",
                    '</dd>\n                        <dd class="description">',
                    0 < model.nsr_target ? I18n.t("envoy_backbone.detected.nsr_target_separate", { count: model.nsr_target }) : "",
                    '</dd>\n                    </dl>\n            </div>\n            </div>\n        </div>\n      </div>\n      <div class=\'user-action\'>\n          <div class="row">\n                <div class="col-xs-6">\n                    <button type="button" data-toggle="collapse" data-target="#device_scan" class="btn btn-block btn-default closeBtn">',
                    I18n.t("envoy_backbone.microinverters.scan_close"),
                    '</button>\n                </div>\n                <div class="col-xs-6">\n                    <button type="button" class="btn btn-block btn-danger stop">',
                    I18n.t("envoy_backbone.detected.scan_stop"),
                    "</button>\n                </div>\n            </div>\n      </div>\n    "
                );
            } else
                a.push(
                    '\n       <form class="form-horizontal device_scan_form" role="form">\n           <div class="form-group">\n               <div class="row">\n                   <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">\n                        <label>',
                    I18n.t("envoy_backbone.microinverters.scan_settings.scan_duration"),
                    '</label>\n                   </div>\n                   <div class="col-xs-6">\n                        <select id="scan_duration_total" name="scan_duration_total" class="pull-right">\n                            '
                ),
                    _.each(device_scan_options, function (b) {
                        a.push('\n                            <option value="', b.option_value, '" ', b.hasOwnProperty("isDefault") ? "selected" : "", ">", b.option_text, "</option>\n                            ");
                    }),
                    a.push(
                        '\n                        </select>\n\n                    </div>\n               </div>\n           </div>\n           <div class="row">\n               <div class="col-xs-12"><a class="show-advanced-options accordion-toggle',
                        scanFormOptionsExpanded ? "" : " collapsed",
                        '"  data-toggle="collapse"  href="#advanced_options"><span class="glyphicons expand"></span>\n                       ',
                        scanFormOptionsExpanded ? I18n.t("envoy_backbone.microinverters.scan_settings.less_options") : I18n.t("envoy_backbone.microinverters.scan_settings.advanced_options"),
                        '</a></div>\n           </div>\n           <div id="advanced_options" class="panel-collapse collapse',
                        scanFormOptionsExpanded ? " in" : "",
                        '">\n               <div class="form-group">\n                    <div class="row">\n                       <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">\n                           <label>',
                        I18n.t("envoy_backbone.microinverters.scan_settings.priority_duration"),
                        '\n                                <div class="small optional">',
                        I18n.t("envoy_backbone.microinverters.scan_settings.optional"),
                        '</div>\n                           </label>\n                       </div>\n\n                        <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">\n                           <select id="priority_duration_total" name="priority_duration_total" class="pull-right">\n                               <option value=""></option>\n                               '
                    ),
                    _.each(device_scan_options, function (b) {
                        30 >= b.option_value && a.push('\n                                    <option value="', b.option_value, '">', b.option_text, "</option>\n                               ");
                    }),
                    a.push(
                        '\n                           </select>\n                       </div>\n                    </div>\n                    <div class="small">',
                        I18n.t("envoy_backbone.microinverters.scan_settings.priority_duration_description"),
                        '</div>\n               </div>\n           </div>\n           <div class="user-action">\n            <div class="row">\n                <div class="col-xs-6">\n                    <button type="button" data-toggle="collapse" data-target="#device_scan" class="btn btn-block btn-default closeBtn">',
                        I18n.t("envoy_backbone.microinverters.scan_close"),
                        '</button>\n                </div>\n                <div class="col-xs-6">\n                    <button type="button" class="btn btn-block btn-primary start">',
                        I18n.t("envoy_backbone.microinverters.scan_start"),
                        "</button>\n                </div>\n            </div>\n        </div>\n       </form>\n\n    "
                    );
            a.push("\n");
        }
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["microinverters/freq_analysis"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                '<div class=\'col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2\'>\n    <div class="list-group">\n        <div class="list-group-item action heading device_scan_header" >\n            <span class="descriptor panel-title device_scan_title"></span>\n            <button class="btn btn-envoy btn-primary pull-right" id="freq_data_toggle">',
                I18n.t("envoy_backbone.meters.freq_analysis.btn_change_data_type"),
                '</button>\n        </div>\n        <div id="device_scan_panel" class="">\n            <div class="device_scan_details">\n                <div class="freq_chart">\n\n                    \x3c!--container for graph--\x3e\n                    <svg></svg>\n                </div>\n            </div>\n        </div>\n\n    </div>\n</div>\n'
            );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["monitoring/monitoring_summary"] = function (b) {
        var a = [];
        with (b || {})
            a.push("<div class='list-group-item action heading'><span class=\"descriptor\">", I18n.t("envoy_backbone.monitoring.title"), '</span></div>\n<ul class="list-group list-unstyled monitoring">\n    '),
                1 != model.isPlusWeb || (void 0 == model.primary_network && "" == model.primary_network)
                    ? (a.push(
                          '\n    <li class="list-group-item ',
                          0 == isPublic && 1 == bOnOverview ? "monitoring-not-connected" : "",
                          '"><span class=\'glyphicons envoy-chk warning_sign\'></span><span class="descriptor">',
                          I18n.t("envoy_backbone.monitoring.not_connected"),
                          "<br/>\n            "
                      ),
                      void 0 != model.lastReportDate &&
                          a.push(
                              "\n            <label class='description time'>",
                              I18n.t("envoy_backbone.monitoring.last_report"),
                              " ",
                              null == model.lastReportDate ? I18n.t("envoy_backbone.monitoring.no_report") : I18n.l("time.formats.noday_nozone_datetime_ui", model.lastReportDate),
                              "</label>\n            "
                          ),
                      a.push("\n        </span>\n        "),
                      0 == isPublic && 1 == bOnOverview && a.push('\n        <span class="glyphicons chevron-right pull-right"></span>\n        '))
                    : (a.push('\n    <li class="list-group-item"><span class=\'glyphicons envoy-chk ok_2\'></span><span class="descriptor">', I18n.t("envoy_backbone.monitoring.connected"), "<br/>\n            "),
                      void 0 != model.lastReportDate &&
                          a.push(
                              "\n            <label class='description time'>",
                              I18n.t("envoy_backbone.monitoring.last_report"),
                              " ",
                              null == model.lastReportDate ? I18n.t("envoy_backbone.monitoring.no_report") : I18n.l("time.formats.noday_nozone_datetime_ui", model.lastReportDate),
                              "</label>\n            "
                          ),
                      a.push("\n        </span>\n        "),
                      "" == icon ||
                          (void 0 == model.primary_network && "" == model.primary_network) ||
                          a.push(
                              '\n        <a href="',
                              networkLink,
                              '" class="btn-primary btn btn-envoy pull-right btn-monitoring">\n            <span class="glyphicons-icon ',
                              model.primary_network,
                              "_",
                              icon,
                              '"></span>\n        </a>\n        '
                          )),
                a.push("\n    </li>\n    "),
                a.push("\n    "),
                1 == bShowReportSettings &&
                    (a.push(
                        '\n    <li class="list-group-item report-settings">\n        <span class="descriptor pull-left">',
                        I18n.t("envoy_backbone.monitoring.report_setting"),
                        "</span>\n        <div class='pull-right tertiary'>",
                        0 == bShowReportSettingLoading && void 0 != model.report_setting ? I18n.t("envoy_backbone.monitoring." + model.report_setting + "_bandwidth") : "",
                        '</div>\n        <div class="clearfix"></div>\n        <div><a class="show-reporting-more-info accordion-toggle',
                        reportMoreInfoExpanded ? "" : " collapsed",
                        '"  data-toggle="collapse"  href="#reporting_more_info"><span class="glyphicons expand"></span> ',
                        I18n.t("envoy_backbone.monitoring.more_info"),
                        '</a></div>\n        <div id="reporting_more_info" class="panel-collapse collapse',
                        reportMoreInfoExpanded ? " in" : "",
                        '">\n            '
                    ),
                    1 == bShowReportSettingLoading
                        ? a.push('\n            <div class="user-messaging clearfix"><div class="pull-left preloader"></div><div class=\'pull-left messaging single-message\'>', I18n.t("envoy_backbone.loading"), "</div></div>\n            ")
                        : (a.push("\n            "),
                          "cellular" == model.primary_network
                              ? a.push('\n            <label class="description-blck report-settings clearfix">', I18n.t("envoy_backbone.monitoring.report_setting_cellular_desc"), "</label>\n            ")
                              : a.push(
                                    '\n\n            <label class="description-blck report-settings clearfix">',
                                    I18n.t("envoy_backbone.monitoring.report_setting_" + model.report_setting + "_desc"),
                                    '</label>\n            <div class=\'action btn-holder\' data-toggle="collapse" data-target="#edit_report_setting">\n                <a class="toggle-report-setting btn btn-primary  btn-block">',
                                    "high" == model.report_setting ? I18n.t("envoy_backbone.monitoring.report_setting_options.low") : I18n.t("envoy_backbone.monitoring.report_setting_options.high"),
                                    "</a>\n            </div>\n            "
                                ),
                          a.push("\n            "),
                          "cellular" != model.primary_network || (void 0 != model.diagnostic_remaining_minutes && 0 != model.diagnostic_remaining_minutes)
                              ? void 0 != model.diagnostic_remaining_minutes &&
                                0 < model.diagnostic_remaining_minutes &&
                                a.push('\n            <label class="description-blck remaining">', I18n.t("envoy_backbone.monitoring.report_setting_diagnostic", { minutes: model.diagnostic_remaining_minutes }), "</label>\n            ")
                              : a.push(
                                    '\n            <label class="description-blck report-settings clearfix">',
                                    I18n.t("envoy_backbone.monitoring.report_setting_enable_diagnostic"),
                                    '</label>\n            <div class=\'action btn-holder\' data-toggle="collapse" data-target="#edit_report_setting">\n                <a class="toggle-report-setting btn btn-primary  btn-block">',
                                    I18n.t("envoy_backbone.monitoring.report_setting_options.diagnostic"),
                                    "</a>\n            </div>\n            "
                                ),
                          a.push("\n            ")),
                    a.push("\n        </div>\n    </li>\n    ")),
                a.push("\n</ul>\n"),
                1 == isPublic &&
                    a.push(
                        '\n<div class="network_config"></div>\n<div class="diagnostic_tools">\n    <a href="#network/diagnostic_tools" class="list-group-item"><span class="descriptor">',
                        I18n.t("envoy_backbone.network.diagnostic_tools.title"),
                        '</span><span class="glyphicons chevron-right pull-right"></span></a>\n</div>\n'
                    ),
                a.push("\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["more/about_packages"] = function (b) {
        var a = [];
        with (b || {})
            a.push("<div class='row'>\n    <div class='col-md-12'>\n        <ul class=\"list-group lg1\">\n            "),
                _.each(sw_packages, function (b) {
                    a.push("\n\n            ");
                    b.hasOwnProperty("name")
                        ? a.push(
                              '\n                <li class="list-group-item"><label>',
                              b.name,
                              " ",
                              b.part_number,
                              '</label>\n                    <span class="descriptor">',
                              b.version,
                              " (",
                              b.build,
                              ")</span>\n                </li>\n            "
                          )
                        : a.push(
                              '\n                <li class="list-group-item"><label>build id: ',
                              b.build_id,
                              '</label>\n                <span class="descriptor">build time (',
                              b.build_time_gmt,
                              ")</span>\n                </li>\n            "
                          );
                    a.push("\n            ");
                }),
                a.push("\n\n\n        </ul>\n    </div>\n</div>\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["more/about_page"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                "<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <div class='subviewheader page-header'>\n        <a class=\"btn btn-primary pull-left btn-back\" href=\"#overview\"><span class=\"glyphicons left_arrow\"></span></a> <h2>",
                I18n.t("envoy_backbone.more.about.title"),
                "</h2>\n        </div>\n    </div>\n</div>\n<div class='row'>\n    <div class=\"col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2 about_envoy_summary\">\n    </div>\n</div>\n<div class='row'>\n    <div class=\"col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2 about_packages\">\n    </div>\n</div>\n"
            );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["more/datetime_page"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                "<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <div class='subviewheader page-header'>\n        <a class=\"btn btn-primary pull-left btn-back\" href=\"#overview\"><span class=\"glyphicons left_arrow\"></span></a> <h2>",
                I18n.t("envoy_backbone.more.datetime.title"),
                "</h2>\n        </div>\n    </div>\n</div>\n<div class='row'>\n    <div class=\"col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2 datetime_settings\">\n    </div>\n</div>\n<div class='row'>\n    <div class=\"col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2 timezone_settings\">\n    </div>\n</div>\n"
            );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["more/datetime_settings"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                '<ul class="list-group lg1">\n    <li class="list-group-item"><label>',
                I18n.t("envoy_backbone.more.datetime.date"),
                '</label>\n        <span class="descriptor">',
                void 0 != model.date ? I18n.l("time.formats.short_date", model.date) : "",
                '</span>\n    </li>\n    <li class="list-group-item"><label>',
                I18n.t("envoy_backbone.more.datetime.time"),
                '</label>\n        <span class="descriptor">',
                model.time,
                " (",
                model.timezone,
                ")</span>\n    </li>\n</ul>\n"
            );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["more/events_page"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                "<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <div class='subviewheader'>\n            <a class=\"btn btn-primary btn-back pull-left\" href=\"#overview\"><span class=\"glyphicons left_arrow\"></span></a> <h2>",
                I18n.t("envoy_backbone.more.events.title"),
                '</h2>\n        </div>\n    </div>\n</div>\n\n\n<div class="row">\n    <div class="col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2">\n        <div class="panel">\n\n            <div class=\'wrapper\'>\n                <table id="eventsTable" class="display" cellspacing="0" width="100%">\n                    <thead>\n                    <tr>\n                        <th>',
                I18n.t("lwui.home.event_tbl_col_hdr.eventId"),
                "</th>\n                        <th>",
                I18n.t("lwui.home.event_tbl_col_hdr.event"),
                "</th>\n                        <th>",
                I18n.t("envoy_backbone.more.about.serial_number"),
                "</th>\n                        <th>",
                I18n.t("lwui.home.event_tbl_col_hdr.device"),
                "</th>\n                        <th>",
                I18n.t("lwui.home.event_tbl_col_hdr.date"),
                "</th>\n                    </tr>\n                    </thead>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n\n"
            );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["more/main"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                '\n<a href="#more/about" class="list-group-item"><span class="descriptor">',
                I18n.t("envoy_backbone.more.about.title"),
                '</span><span class="glyphicons chevron-right pull-right"></span></a>\n<a href="#more/datetime" class="list-group-item"><span class="descriptor">',
                I18n.t("envoy_backbone.more.datetime.title"),
                '</span><span class="glyphicons chevron-right pull-right"></span></a>\n<a href="#more/events" class="list-group-item"><span class="descriptor">',
                I18n.t("envoy_backbone.more.events.title"),
                '</span><span class="glyphicons chevron-right pull-right"></span></a>\n'
            );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["more/support_connection"] = function (b) {
        var a = [];
        with (b || {})
            a.push("<div class=''>\n    <div class='list-group-item action heading'>\n        <span class=\"descriptor\">", I18n.t("envoy_backbone.more.support_connection.title"), "</span>\n    </div>\n    "),
                1 == isLoading
                    ? a.push('\n      <div class="user-messaging clearfix"><div class="pull-left preloader"></div><div class=\'pull-left messaging single-message\'>', I18n.t("envoy_backbone.loading"), "</div></div>\n    ")
                    : a.push(
                          "\n      <p>",
                          I18n.t("envoy_backbone.more.support_connection.description_" + newState),
                          '</p>\n      <div class=\'list-group-item action btn-holder\'>\n      <button type="button" class="btn btn-primary btn-block ',
                          newState,
                          '_connection">',
                          I18n.t("envoy_backbone.more.support_connection." + newState),
                          "</button>\n      </div>\n    "
                      ),
                a.push("\n</div>\n\n\n\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["more/timezone_settings"] = function (b) {
        var a = [];
        with (b || {})
            a.push("<div class='list-group'>\n    <div class='list-group-item action heading'>\n        <span class=\"descriptor\">", I18n.t("envoy_backbone.more.datetime.timezone"), "</span>\n    </div>\n    "),
                1 == isLoading
                    ? a.push('\n    <div class="user-messaging clearfix"><div class="pull-left preloader"></div><div class=\'pull-left messaging single-message\'>', I18n.t("envoy_backbone.loading"), "</div></div>\n    ")
                    : (a.push('\n    <form id="timezone_selection">\n        <select class="timezone-select">\n            '),
                      _.each(timezones, function (b) {
                          a.push('\n                <option value="', b.key, '" ', b.key == model.timezone ? "selected" : "", ">", b.value, "</option>\n            ");
                      }),
                      a.push(
                          '\n        </select>\n        <div class=\'list-group-item action btn-holder\'>\n            <button type="button" class="btn btn-primary btn-block">',
                          I18n.t("envoy_backbone.more.datetime.update_timezone"),
                          "</button>\n        </div>\n    </form>\n    "
                      )),
                a.push("\n</div>\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST.nav_bar = function (b) {
        var a = [];
        with (b || {})
            a.push(
                '<div class="navbar-inner ">\n<ul class="nav nav-pills nav-justified">\n    <li class="overview active"><a href="#overview"><img class="ico" src="',
                location.protocol,
                "//",
                location.host,
                '/backbone/images/navbar/overview2.png" alt="',
                I18n.t("envoy_backbone.global_nav.overview"),
                '" />',
                I18n.t("envoy_backbone.global_nav.overview"),
                '</a></li>\n    <li class="microinverters"><a href="#microinverters/all"><img class="ico" src="',
                location.protocol,
                "//",
                location.host,
                '/backbone/images/navbar/microinverters.png" alt="',
                I18n.t("envoy_backbone.global_nav.microinverters"),
                '" />',
                I18n.t("envoy_backbone.global_nav.microinverters_short"),
                '</a></li>\n    <li class="acb"><a href="#acb"><img class="ico" src="',
                location.protocol,
                "//",
                location.host,
                '/backbone/images/navbar/storage.png" alt="',
                I18n.t("envoy_backbone.global_nav.acb"),
                '" />',
                I18n.t("envoy_backbone.global_nav.acb"),
                '</a></li>\n    <li class="enpower">\n      <a href="#enpower">\n        <img class="ico" src="',
                location.protocol,
                "//",
                location.host,
                '/backbone/images/navbar/microinverters.png" alt="',
                I18n.t("envoy_backbone.global_nav.enpower"),
                '" />\n        ',
                I18n.t("envoy_backbone.global_nav.enpower"),
                '\n      </a>\n    </li>\n    <li class="encharge">\n      <a href="#encharge">\n        <img class="ico" src="',
                location.protocol,
                "//",
                location.host,
                '/backbone/images/navbar/storage.png" alt="',
                I18n.t("envoy_backbone.global_nav.encharge_batteries"),
                '" />\n        ',
                I18n.t("envoy_backbone.global_nav.encharge_batteries"),
                '\n      </a>\n    </li>\n    <li class="hidden-xs meters"><a href="#meters"><img class="ico" src="',
                location.protocol,
                "//",
                location.host,
                '/backbone/images/navbar/meters2.png" alt="',
                I18n.t("envoy_backbone.global_nav.meters"),
                '" />',
                I18n.t("envoy_backbone.global_nav.meters"),
                '</a></li>\n    <li class="visible-xs meters"><a href="#meters"><img class="ico" src="',
                location.protocol,
                "//",
                location.host,
                '/backbone/images/navbar/meters2.png" alt="',
                I18n.t("envoy_backbone.global_nav.meters_small"),
                '" />',
                I18n.t("envoy_backbone.global_nav.meters_small"),
                '</a></li>\n\x3c!-- en.envoy_backbone.global_nav.nsr\n    <li class="nsr"><a href="#nsr/all"><img class="ico" src="',
                location.protocol,
                "//",
                location.host,
                '/backbone/images/navbar/microinverters.png" alt="',
                I18n.t("envoy_backbone.global_nav.nsr"),
                '" />',
                I18n.t("envoy_backbone.global_nav.nsr"),
                '</a></li>\n--\x3e\n    <li class="network"><a href="#network"><img class="ico" src="',
                location.protocol,
                "//",
                location.host,
                '/backbone/images/navbar/networkcloud.png" alt="',
                I18n.t("envoy_backbone.global_nav.network"),
                '" />',
                I18n.t("envoy_backbone.global_nav.network"),
                "</a></li>\n</ul>\n</div>\n"
            );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["network/cellular"] = function (b) {
        var a = [];
        with (b || {})
            a.push(""),
                1 == isLoading
                    ? a.push(
                          "\n<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <div class=\"user-messaging clearfix\"><div class=\"pull-left preloader\"></div><div class='pull-left messaging single-message'>",
                          I18n.t("envoy_backbone.loading"),
                          "</div></div>\n    </div>\n</div>\n"
                      )
                    : (a.push("\n"),
                      void 0 != model.cellular_config
                          ? (a.push("\n<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <ul class=\"list-group lg1\">\n            "),
                            1 == model.cellular_config.connected
                                ? a.push(
                                      '\n            <li class="list-group-item">\n\n                <label>',
                                      I18n.t("envoy_backbone.cellular.connection_status"),
                                      "</label>\n                <span class=\"descriptor\"><span class='glyphicons envoy-chk ok_2'></span> ",
                                      I18n.t("envoy_backbone.cellular.connected"),
                                      "</span>\n                <span class='pull-right img-text'>\n                    <span class=\"descriptor\">",
                                      model.cellular_config.gen,
                                      '</span>\n                    <img height="22px" src="',
                                      location.protocol,
                                      "//",
                                      location.host,
                                      "/backbone/images/cellular/cellular_signal_",
                                      model.cellular_config.bars,
                                      '.png" alt="',
                                      model.cellular_config.bars,
                                      '" title="',
                                      model.cellular_config.bars,
                                      '"/>\n                </span>\n            </li>\n            '
                                  )
                                : a.push(
                                      '\n            <li class="list-group-item"><label>',
                                      I18n.t("envoy_backbone.cellular.connection_status"),
                                      "</label>\n                <span class=\"descriptor\"><span class='glyphicons envoy-chk'></span> ",
                                      I18n.t("envoy_backbone.cellular.not_connected"),
                                      "</span>\n                <span class='pull-right glyphicons warning_sign'></span>\n            </li>\n            "
                                  ),
                            a.push(
                                '\n            <li class="list-group-item"><label>',
                                I18n.t("envoy_backbone.cellular.carrier"),
                                '</label>\n                <span class="descriptor">',
                                model.cellular_config.carrier,
                                '</span>\n            </li>\n            <li class="list-group-item"><label>',
                                I18n.t("envoy_backbone.cellular.iccid"),
                                '</label>\n                <span class="descriptor">',
                                model.cellular_config.iccid,
                                '</span>\n            </li>\n            <li class="list-group-item"><label>',
                                I18n.t("envoy_backbone.cellular.imsi"),
                                '</label>\n                <span class="descriptor">',
                                model.cellular_config.imsi,
                                '</span>\n            </li>\n            <li class="list-group-item"><label>',
                                I18n.t("envoy_backbone.cellular.mei"),
                                '</label>\n                <span class="descriptor">',
                                model.cellular_config.mei,
                                "</span>\n            </li>\n        </ul>\n    </div>\n</div>\n"
                            ))
                          : a.push(
                                "\n<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2 ping'>\n        <ul class=\"list-group \">\n            <li class=\"list-group-item user-messaging\">",
                                I18n.t("envoy_backbone.cellular.no_modem"),
                                "</li>\n        </ul>\n    </div>\n</div>\n"
                            ),
                      a.push("\n")),
                a.push("\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["network/diagnostic_network_info"] = function (b) {
        var a = [];
        with (b || {})
            a.push(""),
                "cellular" == model.primary_network
                    ? (a.push('\n    <ul class="list-group lg1 ">\n    '),
                      void 0 != model.cellular_config
                          ? (a.push("\n        "),
                            1 == model.cellular_config.connected
                                ? a.push(
                                      '\n            <li class="list-group-item">\n            <label>',
                                      I18n.t("envoy_backbone.cellular.connection_status"),
                                      "</label>\n            <span class=\"descriptor\"><span class='glyphicons envoy-chk ok_2'></span> ",
                                      I18n.t("envoy_backbone.cellular.connected"),
                                      '</span>\n            <span class=\'pull-right\'><img height="22px" src="',
                                      location.protocol,
                                      "//",
                                      location.host,
                                      "/backbone/images/cellular/cellular_signal_",
                                      model.cellular_config.bars,
                                      '.png" alt="',
                                      model.cellular_config.bars,
                                      '" title="',
                                      model.cellular_config.bars,
                                      '"/></span>\n            </li>\n        '
                                  )
                                : a.push(
                                      '\n            <li class="list-group-item"><label>',
                                      I18n.t("envoy_backbone.cellular.connection_status"),
                                      "</label>\n                <span class=\"descriptor\"><span class='glyphicons envoy-chk'></span> ",
                                      I18n.t("envoy_backbone.cellular.not_connected"),
                                      "</span>\n                <span class='pull-right glyphicons warning_sign'></span>\n            </li>\n        "
                                  ),
                            a.push(
                                '\n        <li class="list-group-item"><label>',
                                I18n.t("envoy_backbone.cellular.carrier"),
                                '</label>\n            <span class="descriptor">',
                                model.cellular_config.carrier,
                                '</span>\n        </li>\n        <li class="list-group-item"><label>',
                                I18n.t("envoy_backbone.cellular.iccid"),
                                '</label>\n            <span class="descriptor">',
                                model.cellular_config.iccid,
                                '</span>\n        </li>\n        <li class="list-group-item"><label>',
                                I18n.t("envoy_backbone.cellular.mei"),
                                '</label>\n            <span class="descriptor">',
                                model.cellular_config.mei,
                                "</span>\n        </li>\n    "
                            ))
                          : a.push('\n        <li class="list-group-item user-messaging">', I18n.t("envoy_backbone.cellular.no_modem"), "</li>\n    "),
                      a.push("\n    </ul>\n"))
                    : "wifi" == model.primary_network
                    ? a.push(
                          '\n    <ul class="list-group lg1 ">\n        <li class="list-group-item"><label>',
                          I18n.t("envoy_backbone.network.diagnostic_tools.ip_address"),
                          '</label>\n            <span class="descriptor">',
                          wifi.current_network.ip_address,
                          '</span><span class="pull-right glyphicons-icon small-icon ',
                          icon,
                          '"></span>\n        </li>\n        <li class="list-group-item"><label>',
                          I18n.t("envoy_backbone.network.diagnostic_tools.mac_address"),
                          '</label>\n            <span class="descriptor">',
                          wifi.device_info.mac,
                          '</span>\n        </li>\n        <li class="list-group-item"><label>',
                          I18n.t("envoy_backbone.network.diagnostic_tools.gateway_ip"),
                          '</label>\n            <span class="descriptor">',
                          wifi.current_network.gateway_ip,
                          "</span>\n        </li>\n    </ul>\n"
                      )
                    : (void 0 != model.ethernet_config
                          ? (a.push("\n        "),
                            0 == model.ethernet_config.network &&
                                a.push(
                                    '\n        <ul class="list-group lg1">\n            <li class="list-group-item warning"><span class="glyphicons warning_sign"></span><span class="descriptor">',
                                    I18n.t("envoy_backbone.ethernet.no_config"),
                                    "</span></li>\n        </ul>\n        "
                                ),
                            a.push(
                                '\n        <ul class="list-group lg1 ">\n            <li class="list-group-item"><label>',
                                I18n.t("envoy_backbone.network.diagnostic_tools.ip_address"),
                                '</label>\n                <span class="descriptor">',
                                model.ethernet_config.ip_address,
                                " (",
                                1 == model.ethernet_config.dhcp ? I18n.t("envoy_backbone.ethernet.type.dhcp") : I18n.t("envoy_backbone.ethernet.type.static"),
                                ')</span><span class="pull-right glyphicons-icon small-icon ',
                                icon,
                                '"></span>\n            </li>\n            <li class="list-group-item"><label>',
                                I18n.t("envoy_backbone.network.diagnostic_tools.netmask"),
                                '</label>\n                <span class="descriptor">',
                                model.ethernet_config.netmask,
                                '</span>\n            </li>\n            <li class="list-group-item"><label>',
                                I18n.t("envoy_backbone.network.diagnostic_tools.mac_address"),
                                '</label>\n                <span class="descriptor">',
                                model.ethernet_config.mac_address,
                                '</span>\n            </li>\n            <li class="list-group-item"><label>',
                                I18n.t("envoy_backbone.network.diagnostic_tools.gateway_ip"),
                                '</label>\n                <span class="descriptor">',
                                model.ethernet_config.gateway_ip,
                                '</span>\n            </li>\n            <li class="list-group-item"><label>',
                                I18n.t("envoy_backbone.network.diagnostic_tools.primary_dns"),
                                '</label>\n                <span class="descriptor">',
                                model.ethernet_config.primary_dns,
                                '</span>\n            </li>\n            <li class="list-group-item"><label>',
                                I18n.t("envoy_backbone.network.diagnostic_tools.secondary_dns"),
                                '</label>\n                <span class="descriptor">',
                                model.ethernet_config.secondary_dns,
                                "</span>\n            </li>\n        </ul>\n    "
                            ))
                          : a.push('\n        <ul class="list-group lg1 ">\n            <li class="list-group-item user-messaging">', I18n.t("envoy_backbone.ethernet.no_config"), "</li>\n        </ul>\n    "),
                      a.push("\n")),
                a.push("\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["network/diagnostic_tools"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                "<div class='row ",
                1 == isLoading ? "" : "hidden",
                "'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <div class=\"user-messaging clearfix\"><div class=\"pull-left preloader\"></div><div class='pull-left messaging single-message'>",
                I18n.t("envoy_backbone.loading"),
                "</div></div>\n    </div>\n</div>\n<div class='row ",
                0 == isLoading ? "" : "hidden",
                "'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2 diagnostic_network_info'>\n    </div>\n</div>\n<div class='row ",
                0 == isLoading ? "" : "hidden",
                "'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <div class=\"list-group network_ping\">\n        </div>\n    </div>\n\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <div class=\"list-group network_connectivity\">\n        </div>\n    </div>\n\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <div class=\"list-group network_route\">\n        </div>\n    </div>\n</div>\n"
            );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["network/ethernet"] = function (b) {
        var a = [];
        with (b || {})
            a.push(""),
                1 == isLoading
                    ? a.push(
                          "\n<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n    <div class=\"user-messaging clearfix\"><div class=\"pull-left preloader\"></div><div class='pull-left messaging single-message'>",
                          I18n.t("envoy_backbone.loading"),
                          "</div></div>\n    </div>\n</div>\n"
                      )
                    : void 0 == model.ethernet_config
                    ? a.push(
                          "\n<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <ul class=\"list-group \">\n            <li class=\"list-group-item user-messaging\">",
                          I18n.t("envoy_backbone.ethernet.no_config"),
                          "</li>\n        </ul>\n    </div>\n</div>\n"
                      )
                    : ((b = 1 == model.ethernet_config.dhcp ? "static" : "dhcp"),
                      a.push("\n"),
                      0 == model.ethernet_config.network &&
                          a.push(
                              '\n<div class=\'row\'>\n    <div class=\'col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2\'>\n        <ul class="list-group lg1">\n            <li class="list-group-item warning"><span class="glyphicons warning_sign"></span><span class="descriptor">',
                              I18n.t("envoy_backbone.ethernet.no_config"),
                              "</span></li>\n        </ul>\n    </div>\n</div>\n"
                          ),
                      a.push(
                          '\n<div class=\'row\'>\n    <div class=\'col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2\'>\n        <ul class="list-group lg1">\n            <li class="list-group-item">\n                <div class="pull-right"><button class="btn btn-primary switch-setting" data-value="',
                          b,
                          '">',
                          I18n.t("envoy_backbone.ethernet.buttons." + b),
                          "</button></div>\n                <label>",
                          I18n.t("envoy_backbone.ethernet.ip_setting"),
                          '</label>\n                <span class="descriptor">',
                          1 == model.ethernet_config.dhcp ? I18n.t("envoy_backbone.ethernet.type.dhcp") : I18n.t("envoy_backbone.ethernet.type.static"),
                          "</span>\n            </li>\n            "
                      ),
                      1 == model.ethernet_config.dhcp
                          ? a.push(
                                '\n                <li class="list-group-item">\n                    <label>',
                                I18n.t("envoy_backbone.ethernet.ip_address"),
                                '</label>\n                    <span class="descriptor">',
                                model.ethernet_config.ip_address,
                                '</span>\n                    <div class="list-group-item action btn-holder btn-top-5">\n                    <button type="button" class="btn btn-primary btn-block get-new-ip">',
                                I18n.t("envoy_backbone.ethernet.buttons.new_ip"),
                                "</button></div>\n                </li>\n            "
                            )
                          : a.push(
                                '\n                <li class="list-group-item">\n                    <form id="update_ethernet_config">\n                        <div class="form-group ip_address_group">\n                            <label class="control-label" for=\'ip_address\'>\n                                ',
                                I18n.t("envoy_backbone.ethernet.ip_address"),
                                '\n                            </label>\n                            <input type="text" class="form-control ipv4_required" id="ip_address" name="ip_address" value="',
                                model.ethernet_config.ip_address,
                                '">\n                        </div>\n                        <div class="form-group netmask_group">\n                            <label class="control-label" for=\'netmask\'>\n                                ',
                                I18n.t("envoy_backbone.ethernet.netmask"),
                                '\n                            </label>\n                            <input type="text" class="form-control ipv4_required" id="netmask" name="netmask" value="',
                                model.ethernet_config.netmask,
                                '">\n                        </div>\n                        <div class="form-group gateway_ip_group">\n                            <label class="control-label" for=\'gateway_ip\'>\n                                ',
                                I18n.t("envoy_backbone.ethernet.gateway_ip"),
                                '\n                            </label>\n                            <input type="text" class="form-control ipv4_required" id="gateway_ip" name="gateway_ip" value="',
                                model.ethernet_config.gateway_ip,
                                '">\n                        </div>\n                        <div class="form-group primary_dns_group">\n                            <label class="control-label" for=\'primary_dns\'>\n                                ',
                                I18n.t("envoy_backbone.ethernet.primary_dns"),
                                '\n                            </label>\n                            <input type="text" class="form-control ipv4_required" id="primary_dns" name="primary_dns" value="',
                                model.ethernet_config.primary_dns,
                                '">\n                        </div>\n                        <div class="form-group secondary_dns_group">\n                            <label class="control-label" for=\'secondary_dns\'>\n                                ',
                                I18n.t("envoy_backbone.ethernet.secondary_dns"),
                                '\n                            </label>\n                            <input type="text" class="form-control ipv4_required" id="secondary_dns" name="secondary_dns" value="',
                                model.ethernet_config.secondary_dns,
                                '">\n                        </div>\n                        <button type="submit" class="btn btn-primary btn-block submit">',
                                I18n.t("envoy_backbone.buttons.update"),
                                "</button>\n                    </form>\n                </li>\n            "
                            ),
                      a.push("\n        </ul>\n    </div>\n</div>\n")),
                a.push("\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["network/main"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                "<div class='row'>\n  <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n    <div class=\"page-header\">\n    <h2>",
                I18n.t("envoy_backbone.network.title"),
                "</h2>\n    </div>\n  </div>\n</div>\n<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <div class=\"list-group monitoring_summary\">\n        </div>\n    </div>\n</div>\n<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <div class=\"list-group network_config\">\n\n        </div>\n    </div>\n</div>\n<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <div class=\"list-group diagnostic_tools\">\n        <a href=\"#network/diagnostic_tools\" class=\"list-group-item\"><span class=\"descriptor\">",
                I18n.t("envoy_backbone.network.diagnostic_tools.title"),
                '</span><span class="glyphicons chevron-right pull-right"></span></a>\n        </div>\n    </div>\n</div>\n'
            ),
                plcAnalysIsEnabled &&
                    a.push(
                        '\n    <div class=\'row\'>\n        <div class=\'col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2\'>\n            <div class="list-group diagnostic_tools">\n                <a href="#network/freq_analysis" class="list-group-item"><span class="descriptor">',
                        I18n.t("envoy_backbone.meters.freq_analysis.power_line_analy"),
                        '</span><span class="glyphicons chevron-right pull-right"></span></a>\n            </div>\n        </div>\n    </div>\n'
                    ),
                a.push("\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["network/network_config_links"] = function (b) {
        var a = [];
        with (b || {})
            a.push(""),
                1 == bShowHeader &&
                    (a.push("\n<div class='list-group-item action heading'><span class=\"descriptor\">", I18n.t("envoy_backbone.network.network_configuration.title"), ""),
                    showHelpIcon && a.push('<a class="help_mark" href="/help/network_config" target="_blank"><span class="glyphicons circle_question_mark "></span></a>'),
                    a.push("</span></div>\n")),
                a.push(
                    '\n<a href="#network/cellular" class="list-group-item"><span class="descriptor">',
                    I18n.t("envoy_backbone.network.network_configuration.types.cellular"),
                    '</span>\n<span class="glyphicons pull-right chevron-right"></span><span class="pull-right tertiary">',
                    "cellular" == model.primary_network ? I18n.t("envoy_backbone.network.network_configuration.active_network") : "",
                    '</span></a>\n<a href="#network/ethernet" class="list-group-item"><span class="descriptor">',
                    I18n.t("envoy_backbone.network.network_configuration.types.ethernet"),
                    '</span><span class="glyphicons chevron-right pull-right"></span><span class="pull-right tertiary">',
                    "ethernet" == model.primary_network ? I18n.t("envoy_backbone.network.network_configuration.active_network") : "",
                    '</span></a>\n<a href="#network/wifi" class="list-group-item"><span class="descriptor">',
                    I18n.t("envoy_backbone.network.network_configuration.types.wifi"),
                    '</span><span class="glyphicons pull-right chevron-right"></span><span class="pull-right tertiary">',
                    "wifi" == model.primary_network ? I18n.t("envoy_backbone.network.network_configuration.active_network") : "",
                    "</span></a>\n"
                );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["network/network_connectivity"] = function (b) {
        var a = [];
        with (b || {})
            a.push("<div class='list-group-item action heading'><span class=\"descriptor\">", I18n.t("envoy_backbone.network.diagnostic_tools.network_connectivity"), "</span></div>\n"),
                1 == isLoading
                    ? a.push('\n    <div class="user-messaging clearfix"><div class="pull-left preloader"></div><div class=\'pull-left messaging single-message\'>', I18n.t("envoy_backbone.loading"), "</div></div>\n")
                    : (a.push(
                          "\n    <p>",
                          I18n.t("envoy_backbone.network.diagnostic_tools.network_connectivity_desc"),
                          '</p>\n    <div class=\'list-group-item action btn-holder\'>\n        <button type="button" class="btn btn-primary btn-block">',
                          I18n.t("envoy_backbone.network.diagnostic_tools.check_connectivity"),
                          "</button>\n    </div>\n    "
                      ),
                      void 0 != model.primary_network &&
                          a.push(
                              '\n    <ul class="list-group result">\n        <li class="list-group-item micro_detail_table">\n            <table class="micro_detail">\n                <caption>',
                              I18n.t("envoy_backbone.network.network_connectivity_check.title"),
                              "</caption>\n                <tbody>\n                <tr>\n                    <th>",
                              I18n.t("envoy_backbone.network.network_connectivity_check.timestamp"),
                              "</th>\n                    <td>",
                              I18n.l("time.formats.noday_nozone_datetime_ui", model.timestamp),
                              "</td>\n                </tr>\n                <tr>\n                    <th>",
                              I18n.t("envoy_backbone.network.network_connectivity_check.primary_interface"),
                              "</th>\n                    <td>",
                              I18n.t("envoy_backbone.network.network_configuration.types." + model.primary_network),
                              "</td>\n                </tr>\n                <tr>\n                    <th>",
                              I18n.t("envoy_backbone.network.network_connectivity_check.connectivity_enlighten"),
                              "</th>\n                    <td>",
                              I18n.t("envoy_backbone.network.network_connectivity_check.result." + model.connectivity_enlighten),
                              "</td>\n                </tr>\n                <tr>\n                    <th>",
                              I18n.t("envoy_backbone.network.network_connectivity_check.connectivity_enphase"),
                              "</th>\n                    <td>",
                              I18n.t("envoy_backbone.network.network_connectivity_check.result." + model.connectivity_enphase),
                              "</td>\n                </tr>\n                <tr>\n                    <th>",
                              I18n.t("envoy_backbone.network.network_connectivity_check.enlighten_dns_lookup"),
                              "</th>\n                    <td>",
                              I18n.t("envoy_backbone.network.network_connectivity_check.result." + model.enlighten_dns_lookup),
                              "</td>\n                </tr>\n                <tr>\n                    <th>",
                              I18n.t("envoy_backbone.network.network_connectivity_check.enphase_dns_lookup"),
                              "</th>\n                    <td>",
                              I18n.t("envoy_backbone.network.network_connectivity_check.result." + model.enphase_dns_lookup),
                              "</td>\n                </tr>\n                <tr>\n                    <th>",
                              I18n.t("envoy_backbone.network.network_connectivity_check.google_dns_lookup"),
                              "</th>\n                    <td>",
                              I18n.t("envoy_backbone.network.network_connectivity_check.result." + model.google_dns_lookup),
                              "</td>\n                </tr>\n                <tr>\n                    <th>",
                              I18n.t("envoy_backbone.network.network_connectivity_check.gateway_ping"),
                              "</th>\n                    <td>",
                              model.gateway_ping,
                              "</td>\n                </tr>\n                <tr>\n                    <th>",
                              I18n.t("envoy_backbone.network.network_connectivity_check.primary_dns_ping"),
                              "</th>\n                    <td>",
                              model.primary_dns_ping,
                              "</td>\n                </tr>\n                <tr>\n                    <th>",
                              I18n.t("envoy_backbone.network.network_connectivity_check.secondary_dns_ping"),
                              "</th>\n                    <td>",
                              model.secondary_dns_ping,
                              "</td>\n                </tr>\n                <tr>\n                    <th>",
                              I18n.t("envoy_backbone.network.network_connectivity_check.google_ping"),
                              "</th>\n                    <td>",
                              model.google_ping,
                              "</td>\n                </tr>\n\n                </tbody>\n            </table>\n        </li>\n    </ul>\n    "
                          ),
                      a.push("\n")),
                a.push("\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["network/network_ping"] = function (b) {
        var a = [];
        with (b || {})
            a.push("<div class='list-group-item action heading'><span class=\"descriptor\">", I18n.t("envoy_backbone.network.diagnostic_tools.ping"), "</span></div>\n"),
                1 == isLoading
                    ? a.push('\n<div class="user-messaging clearfix"><div class="pull-left preloader"></div><div class=\'pull-left messaging single-message\'>', I18n.t("envoy_backbone.loading"), "</div></div>\n")
                    : (a.push(
                          '\n<form id="network_ping_form">\n<div class="form-group pingip_group ">\n    <p>\n        ',
                          I18n.t("envoy_backbone.network.diagnostic_tools.ping_desc"),
                          '\n    </p>\n    <input type="text" class="form-control" id="pingip" name="pingip" value="',
                          model.pingip,
                          '">\n</div>\n<div class="list-group-item action btn-holder">\n    <button type="button" class="btn btn-primary btn-block submit">',
                          I18n.t("envoy_backbone.network.diagnostic_tools.ping"),
                          "</button>\n</div>\n</form>\n"
                      ),
                      void 0 != model.results &&
                          (a.push(
                              '\n<ul class="list-group result">\n    <li class="list-group-item micro_detail_table">\n        <table class="micro_detail">\n            <caption>',
                              I18n.t("envoy_backbone.network.diagnostic_tools.results_title"),
                              "</caption>\n            <tbody>\n                <tr>\n                    <th>",
                              I18n.t("envoy_backbone.network.diagnostic_tools.timestamp"),
                              "</th>\n                    <td>",
                              I18n.l("time.formats.noday_nozone_datetime_ui", model.timestamp),
                              "</td>\n                </tr>\n                <tr>\n                    <th>",
                              I18n.t("envoy_backbone.network.diagnostic_tools.ping_ip"),
                              "</th>\n                    <td>",
                              model.pingip,
                              '</td>\n                </tr>\n                <tr>\n                    <td colspan="2">\n                        <span class="network-results">\n                        '
                          ),
                          _.each(model.results, function (b) {
                              a.push("\n                        ", b, "<br>\n                        ");
                          }),
                          a.push("\n                        </span>\n                    </td>\n                </tr>\n\n            </tbody>\n        </table>\n    </li>\n</ul>\n")),
                      a.push("\n")),
                a.push("\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["network/network_route"] = function (b) {
        var a = [];
        with (b || {})
            a.push("<div class='list-group-item action heading'><span class=\"descriptor\">", I18n.t("envoy_backbone.network.diagnostic_tools.network_route"), "</span></div>\n"),
                1 == isLoading
                    ? a.push('\n<div class="user-messaging clearfix"><div class="pull-left preloader"></div><div class=\'pull-left messaging single-message\'>', I18n.t("envoy_backbone.loading"), "</div></div>\n")
                    : (a.push(
                          "\n<p>",
                          I18n.t("envoy_backbone.network.diagnostic_tools.network_route_desc"),
                          '</p>\n<div class="list-group-item action btn-holder">\n    <button type="button" class="btn btn-primary btn-block">',
                          I18n.t("envoy_backbone.network.diagnostic_tools.check_network_route"),
                          "</button>\n</div>\n"
                      ),
                      void 0 != model.results &&
                          (a.push(
                              '\n<ul class="list-group result">\n    <li class="list-group-item micro_detail_table">\n        <table class="micro_detail">\n            <caption>',
                              I18n.t("envoy_backbone.network.network_route_check.results_title"),
                              "</caption>\n            <tbody>\n            <tr>\n                <th>",
                              I18n.t("envoy_backbone.network.network_route_check.timestamp"),
                              "</th>\n                <td>",
                              I18n.l("time.formats.noday_nozone_datetime_ui", model.timestamp),
                              "</td>\n            </tr>\n            "
                          ),
                          _.each(model.results, function (b) {
                              a.push(
                                  "\n            <tr>\n                <th>",
                                  I18n.t("envoy_backbone.network.network_route_check.network"),
                                  "</th>\n                <td>",
                                  b.network,
                                  "</td>\n            </tr>\n            <tr>\n                <th>",
                                  I18n.t("envoy_backbone.network.network_route_check.destination"),
                                  "</th>\n                <td>",
                                  b.destination,
                                  "</td>\n            </tr>\n            <tr>\n                <th>",
                                  I18n.t("envoy_backbone.network.network_route_check.gateway"),
                                  "</th>\n                <td>",
                                  b.gateway,
                                  "</td>\n            </tr>\n            <tr>\n                <th>",
                                  I18n.t("envoy_backbone.network.network_route_check.genmask"),
                                  "</th>\n                <td>",
                                  b.genmask,
                                  "</td>\n            </tr>\n            <tr>\n                <th>",
                                  I18n.t("envoy_backbone.network.network_route_check.flags"),
                                  "</th>\n                <td>",
                                  b.flags,
                                  "</td>\n            </tr>\n            <tr>\n                <th>",
                                  I18n.t("envoy_backbone.network.network_route_check.metric"),
                                  "</th>\n                <td>",
                                  b.metric,
                                  "</td>\n            </tr>\n            <tr>\n                <th>",
                                  I18n.t("envoy_backbone.network.network_route_check.ref"),
                                  "</th>\n                <td>",
                                  b.ref,
                                  "</td>\n            </tr>\n            <tr>\n                <th>",
                                  I18n.t("envoy_backbone.network.network_route_check.use"),
                                  "</th>\n                <td>",
                                  b.use,
                                  "</td>\n            </tr>\n            "
                              );
                          }),
                          a.push("\n            </tbody>\n        </table>\n    </li>\n</ul>\n")),
                      a.push("\n")),
                a.push("\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["network/sub_page"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                "<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <div class='subviewheader page-header'>\n            <a class=\"btn btn-primary pull-left btn-back\" href=\"",
                backLink,
                '">\n                <span class="glyphicons glyphicons left_arrow"></span>\n            </a>\n            <h2>',
                pageTitle,
                "</h2>\n        </div>\n    </div>\n</div>\n<div class='subview'></div>\n"
            );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["overview/comm_levels"] = function (b) {
        var a = [];
        with (b || {}) a.push('    <ul class="comm-level-container glyphicon-comm-level-', comm_level, '"><li></li><li></li><li></li><li></li><li></li></ul><div></div>\n');
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["overview/devices_summary"] = function (b) {
        var a = [];
        with (b || {}) {
            a.push(
                "<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <div class=\"list-group\">\n            <div class='list-group-item action total heading'>\n                "
            );
            ("ac_batteries" != collection_type && "microinverters" != collection_type) ||
                a.push(
                    "\n                    <div class='pull-right edit btn btn-primary btn-envoy'>\n                        <span class='glyphicons pencil' title='",
                    I18n.t("envoy_backbone.buttons.edit"),
                    "'></span>\n                    </div>\n                "
                );
            a.push("\n                <span class='value'>", target_count, "</span>\n                <span class='descriptor'>", I18n.t(text_title, { count: target_count }), "</span>\n            </div>\n            ");
            if (0 < target_count || 0 < detected_count)
                a.push(
                    '\n                <a href="#',
                    collection_type_alias,
                    '/all" class="list-group-item">\n                    <span class=\'glyphicons envoy-chk ',
                    0 < target_count && detected_count >= target_count ? "ok_2" : "",
                    "'></span>\n                    <span class='value'>",
                    detected_count,
                    "</span>\n                    <span class='descriptor'>",
                    I18n.t("envoy_backbone.overview.new_microinverter_counts.detected.counting_" + collection_type_alias, { count: detected_count }),
                    '</span>\n                    <span class="glyphicons chevron-right pull-right"></span>\n                    '
                ),
                    hasScan &&
                        (a.push("\n                        <div class='pull-right tertiary'>\n                            "),
                        1 == scanModel.inhibited
                            ? a.push("\n                                ", I18n.t("envoy_backbone.overview.scan_state.scan_inhibited"), "\n                            ")
                            : 1 == scanModel.active
                            ? a.push("\n                                ", I18n.t("envoy_backbone.overview.scan_state.active"), "\n                            ")
                            : a.push("\n                                ", I18n.t("envoy_backbone.overview.scan_state.inactive"), "\n                            "),
                        a.push("\n                        </div>\n                        "),
                        1 == scanModel.active && a.push('\n                            <div class="preloader preloader_micro pull-right"></div>\n                        '),
                        a.push("\n                    ")),
                    a.push(
                        '\n                </a>\n                <a href="#',
                        collection_type_alias,
                        '/status/comm" class="list-group-item">\n                    <span class=\'glyphicons envoy-chk ',
                        0 < target_count && communicating_count >= target_count ? "ok_2" : "",
                        "'></span>\n                    <span class='value'>",
                        communicating_count,
                        "</span>\n                    <span class='descriptor'>",
                        I18n.t("envoy_backbone.overview.new_microinverter_counts.communicating.counting_" + collection_type_alias, { count: communicating_count }),
                        "</span>\n                    <span class=\"glyphicons chevron-right pull-right\"></span>\n                    <div class='pull-right tertiary comm-level-count'></div>\n                </a>\n\n                "
                    ),
                    1 == showProfiles &&
                        (a.push("\n                    "),
                        "microinverters" == collection_type
                            ? (a.push("\n                        "),
                              void 0 == current_profile || void 0 == current_profile.default_profile_set || ("NA" != model.envoy_type && "NA_COM" != model.envoy_type)
                                  ? void 0 != current_profile && void 0 == current_profile.default_profile_set
                                      ? (a.push(
                                            '\n                            <a href="#',
                                            collection_type_alias,
                                            '/status/profile" class="list-group-item">\n                                <span class=\'glyphicons envoy-chk ',
                                            0 < target_count && profile_count >= target_count ? "ok_2" : "",
                                            "'></span>\n                                <span class='value'>",
                                            profile_count,
                                            '</span> <span class="descriptor profile_desc">',
                                            I18n.t(text_profile_set, { count: profile_count }),
                                            '<label class="description profile_desc profile_name">',
                                            text_profile,
                                            "</label>"
                                        ),
                                        "" != text_rate_structure && a.push('<label class="description profile_desc">', text_rate_structure, "</label>"),
                                        a.push('</span>\n                                <span class="glyphicons chevron-right pull-right"></span>\n                            </a>\n                        '))
                                      : a.push(
                                            '\n                            <a href="#',
                                            collection_type_alias,
                                            '/status/profile" class="list-group-item"><span class=\'glyphicons envoy-chk\'></span>\n                                <span class="glyphicons chevron-right pull-right"></span>\n                                <span class="descriptor">',
                                            I18n.t("envoy_backbone.profiles.eu_no_profile_label"),
                                            "</span>\n                            </a>\n                        "
                                        )
                                  : a.push(
                                        '\n                            <a href="#',
                                        collection_type_alias,
                                        '/status/profile" class="list-group-item">\n                                <span class=\'glyphicons envoy-chk ok_2\'></span>\n                                <span class="glyphicons chevron-right pull-right"></span>\n                                <span class="descriptor">',
                                        current_profile.default_profile_set,
                                        "</span>\n                            </a>\n                        "
                                    ))
                            : "nsrs" == collection_type
                            ? (a.push("\n                        "),
                              void 0 == current_profile || void 0 == current_profile.default_profile_set || ("NA" != model.envoy_type && "NA_COM" != model.envoy_type)
                                  ? void 0 != current_profile && void 0 == current_profile.default_profile_set
                                      ? (a.push(
                                            '\n                            <a href="#',
                                            collection_type_alias,
                                            '/status/profile" class="list-group-item">\n                                <span class=\'glyphicons envoy-chk ',
                                            0 < target_count && profile_count >= target_count ? "ok_2" : "",
                                            "'></span>\n                                <span class='value'>",
                                            profile_count,
                                            '</span>\n                                <span class="descriptor profile_desc">',
                                            I18n.t(text_profile_set, { count: profile_count }),
                                            '\n                                    <label class="description profile_desc profile_name">',
                                            text_profile,
                                            "</label>\n                                    "
                                        ),
                                        "" != text_rate_structure && a.push('\n                                        <label class="description profile_desc">', text_rate_structure, "</label>\n                                    "),
                                        a.push(
                                            '\n                                </span>\n                                <span class="glyphicons chevron-right pull-right"></span>\n                            </a>\n                        '
                                        ))
                                      : a.push(
                                            '\n                            <a href="#',
                                            collection_type_alias,
                                            '/status/profile" class="list-group-item">\n                                <span class=\'glyphicons envoy-chk\'></span>\n                                <span class="glyphicons chevron-right pull-right"></span>\n                                <span class="descriptor">',
                                            I18n.t("envoy_backbone.profiles.eu_no_profile_label"),
                                            "</span>\n                            </a>\n                        "
                                        )
                                  : a.push(
                                        '\n                            <a href="#',
                                        collection_type_alias,
                                        '/status/profile" class="list-group-item">\n                                <span class=\'glyphicons envoy-chk ok_2\'></span><span class="glyphicons chevron-right pull-right"></span>\n                                <span class="descriptor">',
                                        current_profile.default_profile_set,
                                        "</span>\n                            </a>\n                        "
                                    ))
                            : (a.push("\n                        "),
                              void 0 != current_profile && void 0 == current_profile.default_profile_set
                                  ? a.push(
                                        '\n                            <a href="#',
                                        collection_type_alias,
                                        '/status/profile" class="list-group-item">\n                                <span class=\'glyphicons envoy-chk ',
                                        0 < target_count && profile_count >= target_count ? "ok_2" : "",
                                        "'></span>\n                                <span class='value'>",
                                        profile_count,
                                        '</span>\n                                <span class="descriptor profile_desc">\n                                    ',
                                        I18n.t(text_profile_set, { count: profile_count }),
                                        '\n                                    <label class="description profile_desc profile_name">',
                                        text_profile,
                                        "</label>\n                                    "
                                    )
                                  : (a.push('\n                            <a href="#', collection_type_alias, '/status/profile" class="list-group-item">\n                                '),
                                    "NA" == model.envoy_type || "NA_COM" == model.envoy_type
                                        ? a.push("\n                                    <span class='glyphicons envoy-chk ok_2'></span>\n                                ")
                                        : a.push("\n                                    <span class='glyphicons envoy-chk'></span>\n                                "),
                                    a.push(
                                        '\n                                <span class="descriptor profile_desc">\n                                    ',
                                        I18n.t("envoy_backbone.overview.ac_batteries.factory_installed_config"),
                                        '\n                                    <label class="description profile_desc profile_name">',
                                        text_profile,
                                        "</label>\n                                    "
                                    )),
                              "" != text_rate_structure && a.push('\n                                        <label class="description profile_desc">', text_rate_structure, "</label>\n                                    "),
                              a.push('\n                                </span>\n                                <span class="glyphicons chevron-right pull-right"></span>\n                            </a>\n                        ')),
                        a.push("\n                    "),
                        a.push("\n                ")),
                    a.push(
                        '\n\n                <a href="#',
                        collection_type_alias,
                        '/status/power" class="list-group-item">\n                    <span class=\'glyphicons envoy-chk ',
                        0 < target_count && producing_count >= target_count ? "ok_2" : "",
                        "'></span>\n                    <span class='value'>",
                        producing_count,
                        "</span>\n                    <span class='descriptor'>",
                        I18n.t(text_producing, { count: producing_count }),
                        '</span>\n                    <span class="glyphicons chevron-right pull-right"></span>\n                </a>\n            '
                    );
            a.push("\n        </div>\n    </div>\n</div>\n");
        }
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["overview/enpowers_summary"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                "<div class='list-group-item action heading'>\n  <span class=\"descriptor\">\n      ",
                I18n.t("envoy_backbone.overview.enpowers_summary.title"),
                '\n  </span>\n</div>\n\n<ul class="list-group list-unstyled enpowers_connection">\n  <li class="',
                "list-group-item list-unstyled" + (connected ? " connected" : " not-connected"),
                '</li>">\n      <span class="',
                "glyphicons envoy-chk" + (connected ? " ok_2" : " warning_sign"),
                '"></span>\n      <span class="descriptor">\n          ',
                I18n.t("envoy_backbone.overview.enpowers_summary.connected." + connected),
                '\n      </span>\n  </li>\n  <li class="',
                "list-group-item list-unstyled grid-status" + (grid_status ? " connected" : " not-connected"),
                '</li>">\n      <span class="descriptor-title">\n        ',
                I18n.t("envoy_backbone.overview.enpowers_summary.grid_status.title"),
                '\n      </span>\n      <span class="descriptor">\n          ',
                I18n.t("envoy_backbone.overview.enpowers_summary.grid_status." + grid_status),
                "\n      </span>\n      "
            ),
                is_grid_switch_visible &&
                    a.push(
                        '\n        <label class="',
                        "switch" + (is_grid_switch_disabled ? " disabled" : ""),
                        '">\n            <input type="checkbox" ',
                        grid_status ? "checked" : "",
                        ' />\n            <span class="slider round"></span>\n        </label>\n      '
                    ),
                a.push("\n  </li>\n</ul>\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["overview/ext_meter_summary"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                '<div class="list-group">\n    <div class=\'list-group-item action heading\'><span\n                class="descriptor">',
                I18n.t("envoy_backbone.overview.metering"),
                '</span></div>\n    <div class="list-group list-unstyled">\n        '
            ),
                void 0 != productionInfo &&
                    (a.push('\n        <div class="list-group-item">\n            <label>\n                ', I18n.t("envoy_backbone.overview.production_meter_label"), "\n            </label>\n            "),
                    void 0 != productionInfo.wNow &&
                        a.push(
                            '\n            <div>\n                <span class="value">',
                            productionInfo.wNow.formatted,
                            '</span>\n                <span class="units">',
                            productionInfo.wNow.units,
                            "</span>\n                <label class='description overview time'>",
                            I18n.l("time.formats.noday_nozone_datetime_ui", productionInfo.time),
                            "</label>\n            </div>\n            "
                        ),
                    a.push("\n            "),
                    void 0 != productionInfo.whLifetime &&
                        (a.push("\n            "),
                        void 0 != productionInfo.wNow ? a.push("\n            <label>\n                ") : a.push("\n                <div>\n                    "),
                        a.push(
                            '\n                    <span class="value">',
                            productionInfo.whLifetime.formatted,
                            '</span>\n                    <span class="units">',
                            productionInfo.whLifetime.units,
                            "</span>\n                    <label class='description overview'>",
                            I18n.t("envoy_backbone.overview.lifetime"),
                            "</label>\n                    "
                        ),
                        void 0 != productionInfo.wNow ? a.push("\n            </label>\n            ") : a.push("\n        </div>\n        "),
                        a.push("\n        ")),
                    a.push("\n        "),
                    isPublic ? a.push("\n    </div>\n    ") : a.push("\n        "),
                    a.push("\n    ")),
                a.push("\n</div>\n</div>\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["overview/main"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                '<div class=\'system_alerts\'>\n</div>\n\x3c!--<div style="display:inline-block;vertical-align:top;position:absolute;z-index:1000" class="alert alert-warning fade in">--\x3e\n\x3c!--<div style="margin-right:10px;margin-top:10px;position: fixed;z-index:1000">--\x3e\n\x3c!--<div class="alert alert-warning fade in">--\x3e\n    \x3c!--<a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>--\x3e\n    \x3c!--<strong>Warning!</strong> This alert box could indicate a warning that might need attention.--\x3e\n\x3c!--</div>--\x3e\n\x3c!--</div>--\x3e\n\x3c!--<div id="message">--\x3e\n    \x3c!--<div style="padding: 5px;">--\x3e\n        \x3c!--<div id="inner-message" class="alert alert-error">--\x3e\n            \x3c!--<button type="button" class="close" data-dismiss="alert">&times;</button>--\x3e\n            \x3c!--test error message--\x3e\n        \x3c!--</div>--\x3e\n    \x3c!--</div>--\x3e\n\x3c!--</div>--\x3e\n<div id=\'data_alert\'></div>\n<div class=\'row\'>\n    <div class=\'col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2 power_energy_summary\'>\n    </div>\n</div>\n<div class=\'row\'>\n    <div class=\'col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2 storage_summary\'>\n    </div>\n</div>\n<div class=\'row\'>\n    <div class=\'col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2\'>\n        <div class="list-group monitoring_summary">\n        </div>\n    </div>\n</div>\n<div class=\'row\'>\n    <div class=\'col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2\'>\n        <div class="list-group wireless_connection_summary">\n        </div>\n    </div>\n</div>\n<div class="microinverters_summary">\n</div>\n<div class=\'row\'>\n    <div class=\'col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2\'>\n        <div class="list-group enpowers_summary">\n        </div>\n    </div>\n</div>\n<div class="ac_batteries_summary">\n</div>\n<div class="encharge_batteries_summary">\n</div>\n<div class="nsr_summary"></div>\n<div class=\'row\'>\n    <div class=\'col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2\'>\n        <div class="list-group more_items"></div>\n    </div>\n</div>\n<div class=\'row\'>\n    <div class=\'col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2\'>\n        <div class="system">\n        </div>\n    </div>\n</div>\n'
            ),
                showAboutEnvoyView &&
                    a.push("\n<div class='row'>\n   <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n      <div class=\"list-group about_envoy_summary\">\n      </div>\n   </div>\n</div>\n"),
                a.push("\n<div class='row'>\n   <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n      <div class=\"list-group support_connection_summary\">\n      </div>\n   </div>\n</div>\n\n\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["overview/meter_summary"] = function (b) {
        var a = [];
        with (b || {})
            a.push('<div class="list-group">\n    <div class=\'list-group-item action heading\'><span class="descriptor">', I18n.t("envoy_backbone.overview.metering"), '</span></div>\n    <div class="list-group list-unstyled">\n        '),
                void 0 != production_meter && "disabled" === production_meter.state && void 0 != consumption_meter && "disabled" === consumption_meter.state
                    ? (a.push("\n        "),
                      isPublic
                          ? a.push('\n        <div class="list-group-item warning">\n        ')
                          : a.push('\n        <a href="#meters/wizard_select/production" class="list-group-item warning">\n            <span class="glyphicons chevron-right pull-right"></span>\n        '),
                      a.push(
                          '\n            <span class="glyphicons warning_sign pull-left"></span>\n            <div class="descriptor">\n                <span>',
                          I18n.t("envoy_backbone.meters.meter_status.meters_not_enabled"),
                          '</span>\n                <label class="profile_desc">',
                          I18n.t("envoy_backbone.meters.meter_status.meter_setup"),
                          "</label>\n            </div>\n        "
                      ),
                      isPublic ? a.push("\n        </div>\n        ") : a.push("\n        </a>\n        "),
                      a.push("\n\n    "))
                    : (a.push("\n       "),
                      void 0 != production_meter && "disabled" != production_meter.state && void 0 != productionInfo
                          ? (a.push("\n            "),
                            isPublic ? a.push('\n            <div class="list-group-item">\n            ') : a.push('\n            <a href="#meters/detail/production" class="list-group-item">\n            '),
                            a.push("\n                <label>\n                    ", I18n.t("envoy_backbone.overview.production_meter_label"), "\n                </label>\n                "),
                            isPublic || a.push('\n                <span class="glyphicons chevron-right pull-right"></span>\n                '),
                            a.push("\n                "),
                            void 0 != productionInfo.wNow &&
                                a.push(
                                    '\n                <div>\n                    <span class="value">',
                                    productionInfo.wNow.formatted,
                                    '</span>\n                    <span class="units">',
                                    productionInfo.wNow.units,
                                    "</span>\n                    <label class='description overview time'>",
                                    I18n.l("time.formats.noday_nozone_datetime_ui", productionInfo.time),
                                    "</label>\n                </div>\n                "
                                ),
                            a.push("\n                "),
                            void 0 != productionInfo.whLifetime &&
                                a.push(
                                    '\n                <label>\n                    <span class="value">',
                                    productionInfo.whLifetime.formatted,
                                    '</span>\n                    <span class="units">',
                                    productionInfo.whLifetime.units,
                                    "</span>\n                    <label  class='description overview'>",
                                    I18n.t("envoy_backbone.overview.lifetime"),
                                    "</label>\n                </label>\n                "
                                ),
                            a.push("\n            "),
                            isPublic ? a.push("\n            </div>\n            ") : a.push("\n            </a>\n            "),
                            a.push("\n\n    "))
                          : (a.push("\n        "),
                            isPublic ? a.push('\n            <div class="list-group-item warning">\n        ') : a.push('\n            <a href="#meters/wizard_select/production" class="list-group-item warning">\n        '),
                            a.push(
                                "\n            <label>",
                                I18n.t("envoy_backbone.overview.production_meter_label"),
                                "</label>\n            <span class='glyphicons warning_sign'></span>\n            <span class=\"descriptor\">",
                                I18n.t("envoy_backbone.meters.meter_status.not-metering"),
                                "</span>\n        "
                            ),
                            isPublic ? a.push("\n            </div>\n        ") : a.push('\n            <span class="glyphicons chevron-right pull-right"></span>\n            </a>\n        '),
                            a.push("\n    ")),
                      a.push("\n    "),
                      void 0 != consumption_meter && "disabled" != consumption_meter.state && "net-consumption" == consumption_meter.measurementType && void 0 != production_meter && "disabled" == production_meter.state
                          ? a.push(
                                '\n        <div class="list-group-item warning">\n        <label>',
                                I18n.t("envoy_backbone.overview.consumption_meter_label"),
                                "</label>\n        <span class='glyphicons warning_sign'></span>\n        <span class=\"descriptor\">",
                                I18n.t("envoy_backbone.meters.total_consumption_na"),
                                "</span>\n       </div>\n    "
                            )
                          : (void 0 != consumption_meter && "disabled" != consumption_meter.state && void 0 != totalConsumptionInfo
                                ? (a.push("\n        "),
                                  isPublic ? a.push('\n            <div class="list-group-item">\n        ') : a.push('\n            <a href="#meters/detail/consumption" class="list-group-item">\n        '),
                                  a.push("\n        <label>", I18n.t("envoy_backbone.overview.consumption_meter_label"), ""),
                                  hasStorage && a.push(" ", I18n.t("envoy_backbone.overview.includes_storage_label"), ""),
                                  a.push("</label>\n        "),
                                  isPublic || a.push('\n        <span class="glyphicons chevron-right pull-right"></span>\n        '),
                                  a.push("\n        "),
                                  void 0 != totalConsumptionInfo.wNow &&
                                      a.push(
                                          '\n        <div>\n            <span class="value">',
                                          totalConsumptionInfo.wNow.formatted,
                                          '</span>\n            <span class="units">',
                                          totalConsumptionInfo.wNow.units,
                                          "</span>\n            <label class='description overview time'>",
                                          I18n.l("time.formats.noday_nozone_datetime_ui", totalConsumptionInfo.time),
                                          "</label>\n        </div>\n        "
                                      ),
                                  a.push("\n        "),
                                  void 0 != totalConsumptionInfo &&
                                      void 0 != totalConsumptionInfo.whLifetime &&
                                      a.push(
                                          '\n            <label>\n                <span class="value">',
                                          totalConsumptionInfo.whLifetime.formatted,
                                          '</span>\n                <span class="units">',
                                          totalConsumptionInfo.whLifetime.units,
                                          "</span>\n                <label class='description overview'>",
                                          I18n.t("envoy_backbone.overview.lifetime"),
                                          "</label>\n            </label>\n        "
                                      ),
                                  a.push("\n        "),
                                  isPublic ? a.push("\n            </div>\n        ") : a.push("\n            </a>\n        "))
                                : (a.push("\n        "),
                                  isPublic ? a.push('\n            <div class="list-group-item warning">\n        ') : a.push('\n            <a href="#meters/wizard_select/consumption" class="list-group-item warning">\n        '),
                                  a.push(
                                      "\n        <label>",
                                      I18n.t("envoy_backbone.overview.consumption_meter_label"),
                                      "</label>\n        <span class='glyphicons warning_sign'></span>\n        <span class=\"descriptor\">",
                                      I18n.t("envoy_backbone.meters.meter_status.not-metering"),
                                      "</span>\n        "
                                  ),
                                  isPublic ? a.push("\n            </div>\n        ") : a.push('\n            <span class="glyphicons chevron-right pull-right"></span>\n            </a>\n        ')),
                            a.push("\n    ")),
                      a.push("\n    "),
                      void 0 != consumption_meter &&
                          "disabled" != consumption_meter.state &&
                          void 0 != production_meter &&
                          "disabled" != production_meter.state &&
                          void 0 != netConsumptionInfo &&
                          void 0 != netConsumptionInfo.wNow &&
                          a.push(
                              '\n        <div class="list-group-item">\n            <label>',
                              I18n.t("envoy_backbone.overview.net_power"),
                              '</label>\n            <div>\n                <span class="value">',
                              netConsumptionInfo.wNow.formatted.replace(/-/, ""),
                              '</span>\n                <span class="units">',
                              netConsumptionInfo.wNow.units,
                              "</span>\n                <label class='description overview time'>",
                              I18n.l("time.formats.noday_nozone_datetime_ui", netConsumptionInfo.time),
                              "</label>\n                <label>",
                              I18n.t("envoy_backbone.overview." + (0 > netConsumptionInfo.wNow.value ? "power_exporting" : "power_importing")),
                              "</label>\n            </div>\n        </div>\n    "
                          ),
                      a.push("\n")),
                a.push("\n</div>\n</div>\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["overview/power_energy_summary"] = function (b) {
        var a = [];
        with (b || {})
            a.push('<div class="list-group">\n        '),
                inverterDataAccordion
                    ? (a.push(
                          '\n            <div><a class="show-production-options accordion-toggle',
                          inverterProductionExpanded ? "" : " collapsed",
                          '"\n                    data-toggle="collapse" href="#show_inverter_production"><span\n                            class="glyphicons expand"></span> ',
                          I18n.t("envoy_backbone.overview.inverter_production"),
                          '\n                </a></div>\n            <div id="show_inverter_production" class="panel-collapse collapse',
                          inverterProductionExpanded ? " in" : "",
                          '">\n                <div class="list-group-item">\n                '
                      ),
                      void 0 != inverterData &&
                          void 0 != inverterData.wNow &&
                          a.push(
                              '\n\n                    <div class="list-group-stack">\n                        <span class="value">',
                              inverterData.wNow.formatted,
                              '</span> <span class="units">',
                              inverterData.wNow.units,
                              "</span><label\n                                class='description overview time'>",
                              0 != inverterData.time.valueOf() ? I18n.l("time.formats.noday_nozone_datetime_ui", inverterData.time) : "",
                              "</label>\n                    </div>\n                "
                          ),
                      a.push("\n                "),
                      void 0 != inverterData &&
                          void 0 != inverterData.whLifetime &&
                          a.push(
                              '\n                <div class="list-group-stack"><span class="value">',
                              inverterData.whLifetime.formatted,
                              '</span> <span\n                            class="units">',
                              inverterData.whLifetime.units,
                              "</span><label\n                            class='description overview lifetime'>",
                              I18n.t("envoy_backbone.overview.lifetime"),
                              "</label>\n                </div>\n                "
                          ),
                      a.push("\n                    </div>\n            </div>\n        "))
                    : (a.push('\n\n        <div id="show_inverter_production" class="list-group-item">\n            <label>\n                ', I18n.t("envoy_backbone.overview.inverter_production"), "\n            </label>\n            "),
                      void 0 != inverterData &&
                          void 0 != inverterData.wNow &&
                          a.push(
                              '\n            <div><span class="value">',
                              inverterData.wNow.formatted,
                              '</span> <span\n                        class="units">',
                              inverterData.wNow.units,
                              "</span><label\n                        class='description overview time'>",
                              0 != inverterData.time.valueOf() ? I18n.l("time.formats.noday_nozone_datetime_ui", inverterData.time) : "",
                              "</label>\n            </div>\n            "
                          ),
                      a.push("\n            "),
                      void 0 != inverterData &&
                          void 0 != inverterData.whLifetime &&
                          a.push(
                              '\n            <div><span class="value">',
                              inverterData.whLifetime.formatted,
                              '</span> <span\n                        class="units">',
                              inverterData.whLifetime.units,
                              "</span><label\n                        class='description overview lifetime'>",
                              I18n.t("envoy_backbone.overview.lifetime"),
                              "</label>\n            </div>\n            "
                          ),
                      a.push("\n        </div>\n        ")),
                a.push("\n</div>\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["overview/public_devices_summary"] = function (b) {
        var a = [];
        with (b || {}) {
            a.push("");
            if (0 < target_count || 0 < detected_count)
                a.push(
                    "\n    <div class='row'>\n        <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n            <div class=\"list-group\">\n                <div class='list-group-item action total heading'><span class=\"descriptor\">",
                    I18n.t(text_title, { count: "none" }),
                    '</span></div>\n                    <div class="row">\n                    <div class="col-md-12">\n                        <ul class="list-group lg1 about">\n                            '
                ),
                    "ac_batteries" == collection_type || "encharge_batteries" == collection_type
                        ? a.push(
                              '\n                                <li class="list-group-item">\n                                    <a href="#',
                              collection_type_alias,
                              '/manage" class="about-link">\n                                        <span class="value ',
                              _.isNumber(detected_count) ? "" : "initial",
                              '">',
                              detected_count,
                              '</span>\n                                        <span class="descriptor">',
                              I18n.t("envoy_backbone.overview.microinverters.detected"),
                              '</span>\n                                        <span class="glyphicons pull-right chevron-right"></span>\n                                    </a>\n                                </li>\n                            '
                          )
                        : a.push(
                              '\n                                <li class="list-group-item">\n                                    <span class="value ',
                              _.isNumber(detected_count) ? "" : "initial",
                              '">',
                              detected_count,
                              '</span>\n                                    <span class="descriptor">',
                              I18n.t("envoy_backbone.overview.microinverters.detected"),
                              "</span>\n                                </li>\n                            "
                          ),
                    a.push(
                        '\n                            <li class="list-group-item"><span class="value ',
                        _.isNumber(communicating_count) ? "" : "initial",
                        '">',
                        communicating_count,
                        '</span>\n                                <span class="descriptor">',
                        I18n.t("envoy_backbone.overview.microinverters.communicating"),
                        "</span>\n                                <div class='pull-right tertiary comm-level-count'></div>\n                            </li>\n\n                            "
                    ),
                    "ac_batteries" == collection_type &&
                        (a.push(
                            '\n                                <li class="list-group-item">\n                                    <a href="#acb/status/profile" class="about-link">\n                                        <span class="glyphicons chevron-right pull-right"></span>\n                                        <span class="value ',
                            _.isNumber(detected_count) ? "" : "initial",
                            '">',
                            detected_count,
                            '</span>\n                                        <span class="descriptor">',
                            I18n.t("envoy_backbone.overview.ac_batteries.profile_set"),
                            "\n                                            "
                        ),
                        "" != text_rate_structure && a.push('\n                                                <label class="description profile_desc">', text_rate_structure, "</label>\n                                            "),
                        a.push("\n                                        </span>\n                                    </a>\n                                </li>\n                            ")),
                    a.push("\n                            "),
                    "encharge_batteries" == collection_type &&
                        (a.push(
                            '\n                                <li class="list-group-item">\n                                    <a href="#encharge/status/profile" class="about-link">\n                                        <span class="glyphicons chevron-right pull-right"></span>\n                                        <span class="value ',
                            _.isNumber(detected_count) ? "" : "initial",
                            '">',
                            detected_count,
                            '</span>\n                                        <span class="descriptor">',
                            I18n.t("envoy_backbone.overview.encharge_batteries.profile_set"),
                            "\n                                            "
                        ),
                        "" != text_rate_structure && a.push('\n                                                <label class="description profile_desc">', text_rate_structure, "</label>\n                                            "),
                        a.push("\n                                        </span>\n                                    </a>\n                                </li>\n                            ")),
                    a.push(
                        '\n\n                            <li class="list-group-item">\n                                <span class="value ',
                        _.isNumber(producing_count) ? "" : "initial",
                        '">',
                        producing_count,
                        '</span>\n                                <span class="descriptor">',
                        I18n.t(text_producing, { count: producing_count }),
                        "</span>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n"
                    );
            a.push("\n");
        }
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["overview/storage_summary"] = function (b) {
        var a = [];
        with (b || {})
            a.push(""),
                1 == hasBatteries &&
                    void 0 != storageData &&
                    (a.push(
                        '\n<div class="list-group">\n<div class=\'list-group-item action heading\'><span class="descriptor">',
                        I18n.t("envoy_backbone.overview.storage"),
                        '</span></div>\n<div class="list-group list-unstyled">\n        '
                    ),
                    isPublic
                        ? a.push('\n                <div id = "acb_data" class="list-group-item">\n        ')
                        : a.push('\n            <a href="#acb" id = "acb_data" class="list-group-item">\n            <span class="glyphicons chevron-right pull-right"></span>\n        '),
                    a.push('\n\n            <span class="descriptor overview maxauto">'),
                    storageData.opState && a.push("", I18n.t("envoy_backbone.overview.ac_battery_state.soc_state", { operating_state: storageData.opState }), " "),
                    a.push('<label class="description time">'),
                    storageData.percentFull && a.push("", I18n.t("envoy_backbone.overview.ac_battery_state.soc_percent", { percent: storageData.percentFull }), ""),
                    a.push(
                        "</label><br/><label class='description overview time'><span class=\"value\">",
                        storageData.whNow.formatted,
                        '</span> <span class="value">',
                        storageData.whNow.units,
                        "</span> ",
                        0 != storageData.time.valueOf() ? I18n.l("time.formats.noday_nozone_datetime_ui", storageData.time) : "",
                        " </label></span>\n\n        "
                    ),
                    isPublic ? a.push("\n            </div>\n        ") : a.push("\n            </a>\n        "),
                    a.push("\n</div>\n</div>\n")),
                a.push("\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["overview/system"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                "<div class='list-group-item action heading'><span class=\"descriptor\">",
                I18n.t("envoy_backbone.more.system.title"),
                '</span></div>\n<div class="list-group list-unstyled monitoring">\n    <a class="list-group-item">\n        <span class="descriptor" id="power_text">',
                model.powerForcedOff ? I18n.t("envoy_backbone.system.power_control.disabled_desc") : I18n.t("envoy_backbone.system.power_control.enabled_desc"),
                '</span>\n        <span class="',
                model.powerForcedOff ? "power-off" : "power-on",
                ' glyphicons power pull-left"></span>\n        \x3c!-- Rounded switch --\x3e\n        <label class="switch pull-right">\n            <input type="checkbox" ',
                model.powerForcedOff ? "" : "checked",
                '>\n            <span class="slider round"></span>\n        </label>\n    </a>\n</div>\n'
            );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["overview/system_alerts"] = function (b) {
        var a = [];
        with (b || {}) {
            a.push("");
            if ("in-progress" == inverters_update_status || (void 0 != alerts && 0 < alerts.length))
                a.push("\n<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <div class=\"list-group list-unstyled alerts\">\n            "),
                    "in-progress" == inverters_update_status &&
                        a.push(
                            '\n            <div class="list-group-item alert">\n                <span class="descriptor">\n                    <span class="glyphicons envoy-alrt envoy-alrt-info circle_info"></span>\n                    <span class="alert-text">',
                            I18n.t("envoy_backbone.overview.inverters_update_status." + inverters_update_status),
                            "</span>\n                </span>\n            </div>\n            "
                        ),
                    a.push("\n            "),
                    alerts.each(function (b) {
                        a.push("\n                ");
                        1 == b.get("acknowledged") &&
                            a.push(
                                '\n                    <div   class="list-group-item alert">\n                        <span class="descriptor">\n                            <span class="glyphicons envoy-alrt envoy-alrt-warning warning_sign"></span>\n                            <span class="alert-text">',
                                I18n.t(b.get("key")),
                                "</span>\n                        </span>\n                    </div>\n                "
                            );
                        a.push("\n            ");
                    }),
                    a.push('\n            <div id="sticky-anchor"></div>\n            <div id="fixed" style="opacity:1;">\n                '),
                    alerts.each(function (b) {
                        a.push("\n                ");
                        0 == b.get("acknowledged") &&
                            a.push(
                                '\n                <div id="',
                                b.get("key"),
                                '" class="list-group-item alert" aria-label="close">\n                        <span class="descriptor">\n                            <span class="glyphicons envoy-alrt envoy-alrt-warning warning_sign"></span>\n                            <span class="alert-text">',
                                I18n.t(b.get("key")),
                                '</span>\n                            <span id="circle_icon" class="glyphicons"></span>\n                        </span>\n                </div>\n                '
                            );
                        a.push("\n                ");
                    }),
                    a.push('\n            </div>\n            <div id="sticky" style="opacity:0" class="stick">\n            '),
                    alerts.each(function (b) {
                        a.push("\n                ");
                        0 == b.get("acknowledged") &&
                            a.push(
                                '\n                    <div id="',
                                b.get("key"),
                                '" class="list-group-item alert" aria-label="close">\n                        <span class="descriptor">\n                            <span class="glyphicons envoy-alrt envoy-alrt-warning warning_sign"></span>\n                            <span class="alert-text">',
                                I18n.t(b.get("key")),
                                '</span>\n                            <span id="circle_icon" class="glyphicons"></span>\n                        </span>\n                    </div>\n                '
                            );
                        a.push("\n            ");
                    }),
                    a.push("\n            </div>\n\n\n\n\n\n\n\n\n\n\n        </div>\n\n    </div>\n</div>\n");
            a.push("\n");
        }
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["overview/wireless_connection_summary"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                "<div class='list-group-item action heading'>\n    <span class=\"descriptor\">\n        ",
                I18n.t("envoy_backbone.wireless_connection.title"),
                "\n    </span>\n</div>\n\n<div class=\"list-group-item\">\n    <span class='value'>",
                device_count,
                "</span>\n    <span class='descriptor'>Devices</span>\n    <div class='pull-right tertiary comm-level-count'>\n        <ul class=\"comm-level-container glyphicon-comm-level-",
                comm_level,
                '">\n            <li></li><li></li><li></li><li></li><li></li>\n        </ul>\n        <div></div>\n    </div>\n</div>\n'
            );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST.please_wait = function (b) {
        var a = [];
        with (b || {})
            a.push(
                '<div class=\'modal-dialog\'>\n  <div class="modal-content">\n    <div class="modal-header">\n      <h4 class="modal-title" id=wait_title>',
                I18n.t("envoy_backbone.wifi.please_wait"),
                '</h4>\n    </div>\n    <div class="modal-body">\n        <div class="pull-left preloader modal-preloader modal-preloader-bb"></div>\n        <div class="messaging">\n            <p id="wait_text">',
                wait_text,
                '</p>\n            <p class="wait_text">',
                I18n.t("envoy_backbone.wifi.wifi_waiting_note"),
                '</p>\n        </div>\n\n    </div>\n    <div class="modal-footer"></div>\n  </div>\n</div>\n'
            );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["profiles/agf_profile"] = function (b) {
        var a = [];
        with (b || {}) {
            a.push(
                "<div id='grid_profile_form' class='hidden'>\n    <div class=\"page-header in-page-header\">\n        <h4>",
                I18n.t("envoy_backbone.profiles.ac_batteries.configuration_label"),
                '</h4>\n        <form role="form" id="profile_set">\n            <div class="form-group profile_group">\n        <label class="control-label">',
                I18n.t("envoy_backbone.profiles.title"),
                "</label>\n        "
            );
            if (_.isEmpty(profiles))
                a.push("\n            "),
                    "NA" == model.envoy_type || "NA_COM" == BackboneConfig.envoy_type
                        ? a.push(
                              '\n                <div class="list-group list-unstyled alerts">\n                    <div class="list-group-item alert">\n                        <span class="descriptor">\n                            <span class="glyphicons envoy-alrt envoy-alrt-info circle_info"></span>\n                            <span class="alert-text">',
                              I18n.t("envoy_backbone.profiles.no_profiles_info"),
                              "</span>\n                        </span>\n                    </div>\n                </div>\n            "
                          )
                        : a.push(
                              '\n                <div class="list-group list-unstyled alerts">\n                <div class="list-group-item alert">\n                        <span class="descriptor">\n                            <span class="glyphicons envoy-alrt envoy-alrt-warning warning_sign"></span>\n                            <span class="alert-text">',
                              I18n.t("envoy_backbone.profiles.no_profiles"),
                              "</span>\n                        </span>\n                </div>\n                </div>\n            "
                          ),
                    a.push("\n        ");
            else if (_.isEmpty(current_profile) || !current_profile.hasOwnProperty("profile_id") || "" == current_profile.profile_id)
                a.push("\n          "),
                    "NA" == model.envoy_type || "NA_COM" == BackboneConfig.envoy_type
                        ? a.push('\n              <div class="descriptor">', I18n.t("envoy_backbone.profiles.na_no_profile_description"), "</div>\n          ")
                        : a.push('\n              <div class="descriptor">', I18n.t("envoy_backbone.profiles.eu_no_profile_vogel_description"), "</div>\n          "),
                    a.push("\n        ");
            a.push("\n        ");
            _.isEmpty(profiles) ||
                (a.push(
                    '\n\n\n       <div class="profile_container1">\n           <div id="migration_in_progress_div" class="user-messaging clearfix ',
                    migration_in_progress ? "" : "hidden",
                    '"><div class="pull-left preloader"></div><div class=\'pull-left messaging single-message\'>',
                    I18n.t("envoy_backbone.initial_setup.migration_in_progress_message"),
                    '</div></div>\n\n           <div id="profile_select_div" class="profile_container2 ',
                    migration_in_progress ? "hidden" : "",
                    '">\n\n\n                <select id="profile_select" class="profile_select '
                ),
                "NA" != model.envoy_type ? "required" : "",
                a.push(' " name="profile">\n                    <option value=""></option>\n                    '),
                _.each(profiles, function (b, d) {
                    a.push('\n                    <optgroup label="', d, '">\n                        ');
                    _.each(b, function (b) {
                        a.push('\n                        <option value="', b.profile_id, '" ', form_selected_profile == b.profile_id ? "selected" : "", ">", b.translated_name, "</option>\n                        ");
                    });
                    a.push("\n                    </optgroup>\n                    ");
                }),
                a.push('\n                    <optgroup label=""></optgroup>\n                </select>\n\n        </div>\n            '),
                1 == b.preview_profile &&
                    a.push('\n            <a href="/showprofile" target="_blank" class="btn btn-primary btn-envoy pprofile">\n                <span class=" glyphicons circle_info "></span>\n            </a>\n            '),
                a.push('\n        </div>\n        <div id="selected_profile_name" class="grid_profile_selection"></div>\n        '),
                showGridAlert &&
                    a.push(
                        '\n            <div class="alert inline-alert">\n                <div class="descriptor">\n                    <span class="glyphicons envoy-alrt envoy-alrt-info circle_info"></span>\n                        <span class="alert-text">\n                            ',
                        I18n.t("envoy_backbone.profiles." + collection_type + ".no_profile_warning"),
                        "\n                        </span>\n                </div>\n            </div>\n        "
                    ),
                a.push('\n        </div>\n\n        \x3c!--Tariff View Inserted here--\x3e\n        <div class="tariff_rate form-group"></div>\n            <div class="form-group profile-buttons">\n                '),
                "microinverters" == collection_type || "enpowers" == collection_type
                    ? a.push(
                          '\n                    <button id="submit_button" type="submit" class="btn btn-primary btn-block submit ',
                          migration_in_progress ? "hidden" : "",
                          '">',
                          I18n.t("envoy_backbone.profiles.apply"),
                          "</button>\n                "
                      )
                    : a.push(
                          '\n                    <button id="submit_button" type="submit" class="btn btn-primary btn-block submit ',
                          migration_in_progress ? "hidden" : "",
                          '">',
                          I18n.t("envoy_backbone.profiles.config_batteries"),
                          "</button>\n                "
                      ),
                a.push("\n            </div>\n        "),
                isCancelAllowed && a.push('\n        <div class="form-group">\n            <button type="button" class="btn btn-default btn-block cancel">', I18n.t("envoy_backbone.buttons.cancel"), "</button>\n        </div>\n        "),
                a.push("\n        </form>\n        "));
            a.push(
                "\n    </div>\n    </div>\n    <div id='grid_profile_set' class='hidden'>\n      <div class=\"profile_set\">\n          <div id='prof_edit' class='pull-right edit btn btn-primary btn-envoy'><span class='glyphicons pencil' title='",
                I18n.t("envoy_backbone.buttons.edit"),
                '\'></span></div></div>\n        <div class="">\n          <dl>\n              <dt>',
                I18n.t("envoy_backbone.profiles.title"),
                "</dt>\n              "
            );
            void 0 != current_profile && a.push("\n                  <dd>", current_profile.translated_name, "</dd>\n              ");
            a.push('\n          </dl>\n            <div class="tariff_rate"></div>\n\n        </div>\n      </div>\n    </div>\n');
        }
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["profiles/agf_profile_select"] = function (b) {
        var a = [];
        with (b || {})
            a.push(""),
                _.isEmpty(profiles) ||
                    (a.push('\n<select id="profile_select" class=" profile_select">\n    <select id="profile_select" class="profile_select">\n        <option>', I18n.t("envoy_backbone.forms.select_prompt"), "</option>\n        "),
                    _.each(profiles, function (b, d) {
                        a.push('\n        <optgroup label="', d, '">\n            ');
                        _.each(b, function (b) {
                            a.push('\n            <option value="', b.profile_id, '" ', form_selected_profile == b.profile_id ? "selected" : "", ">", b.translated_name, "</option>\n            ");
                        });
                        a.push("\n        ");
                    }),
                    a.push('\n        <optgroup label=""></optgroup>\n    </select>\n</select>\n')),
                a.push("\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["profiles/details"] = function (b) {
        var a = [];
        with (b || {})
            a.push(""),
                _.isEmpty(collection) ||
                    a.push(
                        '\n<div class="panel-group">\n  <div class="panel panel-default">\n    <div class="panel-heading set_list_header" >\n      <h4 class="panel-title">\n        <a class="accordion-toggle collapsed"  data-toggle="collapse"  href="#set_panel_',
                        profile_status,
                        '">\n          <div class=\'pull-right inverter_counts\'>\n            <span class="counts">',
                        collection.length,
                        '</span>\n            <span class="glyphicons expand"></span>\n          </div>\n          <span class=\'glyphicons envoy-chk ',
                        2 == profile_status && 0 < target_device_count && collection.length >= target_device_count ? "ok_2" : "",
                        "' ",
                        2 == profile_status ? "id='target_glyphicon'" : "",
                        ">\n          </span>\n          ",
                        I18n.t("envoy_backbone.profiles.tpm_state." + profile_status),
                        '\n        </a>\n      </h4>\n    </div>\n    <div id="set_panel_',
                        profile_status,
                        '" class="panel-collapse collapse">\n      <div class="panel-body set-list">\n\n      </div>\n    </div>\n  </div>\n</div>\n'
                    ),
                a.push("\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["profiles/propagation_status"] = function (b) {
        var a = [];
        with (b || {})
            a.push(""),
                "propagating" == state
                    ? a.push(
                          '\n    <ul class="list-group ">\n      <li class="list-group-item clearfix">\n        <div class="user-messaging"><div class="pull-left preloader"></div><div class=\'pull-left messaging\'>',
                          I18n.t("envoy_backbone.profiles." + collection_type + ".profile_propagating"),
                          "</div></div>\n      </li>\n    </ul>\n"
                      )
                    : "complete" == state
                    ? a.push(
                          '\n    <ul class="list-group ">\n      <li class="list-group-item clearfix">\n        <div class="user-messaging"><div class="messaging"><span class="glyphicons ok"></span>',
                          I18n.t("envoy_backbone.profiles." + collection_type + ".profile_complete"),
                          "</div></div>\n      </li>\n    </ul>\n"
                      )
                    : a.push(
                          '\n    <ul class="list-group ">\n      <li class="list-group-item clearfix">\n        <div class="user-messaging"><div class="messaging"><span class="glyphicons warning_sign"></span>',
                          I18n.t("envoy_backbone.profiles." + collection_type + ".profile_incomplete"),
                          "  </div></div>\n      </li>\n    </ul>\n"
                      ),
                a.push("\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST.public_footer_nav_bar = function (b) {
        var a = [];
        with (b || {})
            a.push(
                '<div class="container container-fluid">\n    <ul class="navbar-footer nav navbar-nav col-xs-12">\n        <li class="navbar-text">',
                I18n.t("envoy_backbone.public_nav.copyright_html", { current_year: current_year }),
                '</li>\n        <li><a href="http://enphase.com/',
                "en" == I18n.locale ? "" : I18n.locale + "/",
                'privacy" target="_blank">',
                I18n.t("envoy_backbone.public_nav.privacy"),
                '</a></li>\n        <li><a href="http://enphase.com/',
                "en" == I18n.locale ? "" : I18n.locale + "/",
                'terms" target="_blank">',
                I18n.t("envoy_backbone.public_nav.terms"),
                "</a></li>\n        "
            ),
                installer_login_link && a.push('\n        <li><a href="', installer_login_link, '">', I18n.t("envoy_backbone.public_nav.installer_login"), "</a></li>\n        "),
                a.push("\n    </ul>\n</div>\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST.public_header_nav_bar = function (b) {
        var a = [];
        with (b || {})
            a.push(
                '<div class="container container-fluid">\n    <a class="navbar-brand" href="#overview"><img src="',
                location.protocol,
                "//",
                location.host,
                '/envoy/backbone/images/navbar/enphase_logo_wht.png" title="',
                I18n.t("envoy_backbone.public_nav.enphase"),
                '"/></a>\n    <ul class="nav pull-right nav-collapse">\n       <li class="dropdown">\n           <a href="#" class="dropdown-toggle" data-toggle="dropdown">',
                I18n.t("envoy_backbone.public_nav.settings"),
                ' <span class="caret"></span></a>\n           <ul class="dropdown-menu" role="menu">\n               <li role="presentation" class="dropdown-header">',
                I18n.t("envoy_backbone.public_nav.language"),
                "</li>\n             "
            ),
                _.each(language_options, function (b) {
                    var d = window.location.pathname,
                        e = _.isEmpty(window.location.search)
                            ? "?locale=" + b.locale
                            : 0 < window.location.search.indexOf("locale=")
                            ? window.location.search.replace("locale=" + I18n.locale, "locale=" + b.locale)
                            : window.location.search + "&locale=" + b.locale;
                    a.push('\n               <li  role="presentation"', b.locale == I18n.locale ? "class='active'" : "", '><a href="', d + e + window.location.hash, '">', b.name, "</a></li>\n             ");
                }),
                a.push("\n           </ul>\n       </li>\n    </ul>\n</div>\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST.set_current_ct_modal = function (b) {
        var a = [];
        with (b || {})
            a.push(
                '<div class=\'modal-dialog remove-current-settings-prompt\'>\n    <div class="modal-content">\n        <div class="modal-header">\n            <button type="button" class="close" aria-hidden="true">&times;</button>\n            <h4 class="modal-title">',
                I18n.t("envoy_backbone.meters.current_ct.remove_settings"),
                '</h4>\n        </div>\n\n        <div class="modal-body">\n                <div>',
                I18n.t("envoy_backbone.meters.current_ct.remove_desc", { meter_type: currentSettingType }),
                '</div>\n            </div>\n        <div class="modal-footer">\n            <button type="button" class="btn btn-link btn-close close" id=cancel>',
                I18n.t("envoy_backbone.buttons.cancel"),
                '</button>\n            <input type="button" class="btn btn-primary pull-right" id=remove-current-settings value="',
                I18n.t("envoy_backbone.buttons.ok"),
                '"/>\n        </div>\n    </div>\n</div>\n'
            );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST.set_microinverter_count = function (b) {
        var a = [];
        with (b || {})
            a.push(
                '<div class=\'modal-dialog count\'>\n    <form role="form">\n        <div class="modal-content">\n            <div class="modal-body">\n                <div class="form-group">\n                    <label for="target_microinverter_count">',
                I18n.t("envoy_backbone.overview.set_expected.label"),
                "</label>\n                    <input type='number' class='form-control target_inverter_count' value='",
                target_microinverter_count,
                '\' autocomplete="off" placeholder="',
                I18n.t("envoy_backbone.overview.set_expected.prompt"),
                '" id=\'target_microinverter_count\' name="target_micro_count">\n                    '
            ),
                showAcbInput &&
                    a.push(
                        '\n                        <label for="target_acb_count">',
                        I18n.t("envoy_backbone.overview.set_expected_acb.label"),
                        "</label>\n                        <input type='number' class='form-control target_acb_count' value='",
                        target_acb_count,
                        '\' autocomplete="off" placeholder="',
                        I18n.t("envoy_backbone.overview.set_expected_acb.prompt"),
                        '" id=\'target_acb_count\' name="target_batt_count">\n                    '
                    ),
                a.push("\n                    "),
                showNsrInput &&
                    a.push(
                        '\n                    <label for="target_nsr_count">',
                        I18n.t("envoy_backbone.overview.set_expected_nsr.label"),
                        "</label>\n                    <input type='number' class='form-control target_nsr_count' value='",
                        target_nsr_count,
                        '\' autocomplete="off" placeholder="',
                        I18n.t("envoy_backbone.overview.set_expected_nsr.prompt"),
                        '" id=\'target_nsr_count\' name="target_nsr_count">\n                    '
                    ),
                a.push(
                    '\n                </div>\n            </div>\n            <div class="modal-footer">\n                <button type="button" class="btn btn-primary btn-block">',
                    I18n.t("envoy_backbone.buttons.ok"),
                    "</button>\n            </div>\n        </div>\n    </form>\n</div>\n"
                );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST.set_phase = function (b) {
        var a = [];
        with (b || {})
            a.push(
                '<div class=\'modal-dialog count\'>\n    <form role="form">\n        <div class="modal-content">\n            <div class="modal-body">\n                <div class="form-group">\n                    <label for="target_microinverter_count">',
                I18n.t("envoy_backbone.microinverters.phase_prompt_label", { serial_num: id }),
                '</label>\n                    <div>\n                        <select class="set-phase-select required">\n                            <option value>',
                I18n.t("envoy_backbone.microinverters.phase_labels.select_one"),
                '</option>\n                            <option value="ph-a">',
                I18n.t("envoy_backbone.microinverters.phase_labels.ph-a"),
                "</option>\n                            "
            ),
                2 <= phaseCount && a.push('\n                            <option value="ph-b">', I18n.t("envoy_backbone.microinverters.phase_labels.ph-b"), "</option>\n                            "),
                a.push("\n                            "),
                3 <= phaseCount && a.push('\n                            <option value="ph-c">', I18n.t("envoy_backbone.microinverters.phase_labels.ph-c"), "</option>\n                            "),
                a.push(
                    '\n                        </select>\n                    </div>\n                </div>\n            </div>\n            <div class="modal-footer">\n                <button type="button" class="btn btn-primary btn-block">',
                    I18n.t("envoy_backbone.buttons.ok"),
                    '</button>\n                <button type="button" class="btn btn-default btn-block">',
                    I18n.t("envoy_backbone.buttons.cancel"),
                    "</button>\n            </div>\n        </div>\n    </form>\n</div>\n"
                );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["shared/comms_main"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                '<div id="status_navbar" class="status_navbar"></div>\n<div class="panel-group">\n    <div class="panel panel-default">\n        <div class="panel-heading communicating_list_header"><h4 class="panel-title">\n                <a class="accordion-toggle',
                communicatingOpen ? "" : " collapsed",
                '"  data-toggle="collapse" data-page-state-element="communicating"  href="#communicating_panel">\n                    <div class=\'pull-right inverter_counts\'><span class="counts">',
                communicating_count,
                '</span><span class="glyphicons expand"></span></div>\n                    <span class=\'glyphicons envoy-chk ',
                0 < target_count && communicating_count >= target_count ? "ok_2" : "",
                '\' id="target_glyphicon"></span>',
                I18n.t("envoy_backbone.comms.communicating"),
                '</a></h4>\n        </div>\n        <div id="communicating_panel" class="panel-collapse collapse',
                communicatingOpen ? " in" : "",
                '">\n            <div class="panel-body communicating-list"></div>\n        </div>\n    </div>\n</div>\n<div class="panel-group">\n    <div class="panel panel-default last">\n        <div class="panel-heading not_communicating_list_header"><h4 class="panel-title">\n                <a class="accordion-toggle ',
                notcommunicatingOpen ? "" : " collapsed",
                '"  data-toggle="collapse" data-page-state-element="notcommunicating"  href="#not_communicating_panel">\n                    <div class=\'pull-right inverter_counts\'><span class="counts">',
                not_communicating_count,
                "</span><span class=\"glyphicons expand\"></span></div>\n                    <span class='glyphicons envoy-chk envoy-blnk'></span>",
                I18n.t("envoy_backbone.comms.not_communicating"),
                '</a></h4>\n        </div>\n        <div id="not_communicating_panel" class="panel-collapse collapse',
                notcommunicatingOpen ? " in" : "",
                '">\n            <div class="panel-body not-communicating-list"></div>\n        </div>\n    </div>\n</div>\n'
            );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["shared/detected_main"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                '<div class="row search-row">\n    <div class="col-xs-12 ">\n        <a href="javascript:;" id="toggle-list-state" class="btn-primary btn btn-envoy pull-right btn-expand-all ">\n            <span class="glyphicons expand-all"></span>\n        </a>\n    </div>\n    <div class="col-xs-10">\n        <form id="filterDevices">\n            <div class="form-group form-group-search input-group">\n                <label class="sr-only" for="searchDetectedDevices">',
                I18n.t("envoy_backbone.forms.search"),
                '</label>\n                <input class="form-control" type="search" results=5 id="searchDetectedDevices" placeholder="',
                I18n.t("envoy_backbone.forms.search_prompt"),
                '" value="',
                searchTerm,
                '">\n                '
            ),
                "" != searchTerm &&
                    a.push(
                        '\n                <span class="input-group-btn remove">\n                    <button class="btn btn-default" type="button"><span class="glyphicons remove"></span></button>\n                </span>\n                '
                    ),
                a.push("\n            </div>\n        </form>\n    </div>\n</div>\n"),
                _.isEmpty(devices)
                    ? "" != searchTerm
                        ? a.push(
                              '\n<div class="user-messaging search-result clearfix">\n    <div class="messaging single-message ">\n        ',
                              I18n.t("envoy_backbone." + collection_type + ".no_inverters_search", { search_term: searchTerm }),
                              "\n    </div>\n</div>\n"
                          )
                        : a.push('\n<div class="user-messaging search-result clearfix">\n    <div class="messaging single-message ">\n        ', I18n.t("envoy_backbone." + collection_type + ".no_inverters"), "\n    </div>\n</div>\n")
                    : (a.push("\n"),
                      _.each(devices, function (b) {
                          a.push(
                              '\n<div class="panel-group">\n    <div class="panel panel-default">\n        <div class="panel-heading detected_device_header">\n            <a class="accordion-toggle',
                              b.isExpanded ? "" : " collapsed",
                              '"  data-toggle="collapse"  href="#inverter',
                              b.id,
                              '" data-device-id="',
                              b.id,
                              '">\n                <div class="inverter_status pull-left">\n                    '
                          );
                          _.isEmpty(b.status)
                              ? a.push('\n                    <span class="inverter_status_mark pending"></span>\n                    ')
                              : (a.push('\n                    <span class="inverter_status_mark\n                              '),
                                1 < b.status.length || "envoy.global.ok" != b.status[0]
                                    ? a.push("\n                                red_dot\n                              ")
                                    : a.push("\n                                green_dot\n                              "),
                                a.push('\n                              "></span>\n                    '));
                          a.push(
                              '\n                </div>\n                <div class="pull-left max320"><label>',
                              b.id,
                              '</label>\n                    <span class="descriptor">',
                              I18n.t("envoy_backbone.detected.installed"),
                              " ",
                              I18n.l("time.formats.noday_nozone_datetime_ui", b.created_date),
                              '</span>\n\n                </div>\n                <div class=\'pull-right\'><span class="glyphicons expand"></span></div>\n                <div class="clearfix"></div>\n            </a>\n        </div>\n        <div class="clearfix"></div>\n    </div>\n    <div id="inverter',
                              b.id,
                              '" class="panel-collapse collapse',
                              b.isExpanded ? " in" : "",
                              '">\n        <div class="panel-body inverter-details">\n            <ul class="list-group">\n                <li class="list-group-item micro_detail_table">\n                    '
                          );
                          1 == isGFIClearable &&
                              void 0 != b.gfi_clear_message &&
                              a.push('\n                    <div class="alert alert-info">\n                        ', b.gfi_clear_message, "\n                    </div>\n                    ");
                          a.push(
                              '\n                    <table class="micro_detail">\n                        <tbody>\n                        <tr>\n                            <th>',
                              I18n.t("envoy_backbone.devices.device_info.status"),
                              "</th>\n                            <td><strong>\n                                    "
                          );
                          _.isEmpty(b.status)
                              ? a.push("\n                                    ", I18n.t("envoy_backbone.pending"), "\n                                    ")
                              : (a.push("\n                                    "),
                                _.each(b.status, function (d) {
                                    a.push("\n                                    ");
                                    1 != isGFIClearable ||
                                        ("envoy.cond_flags.pcu_chan.dcresistancelowpoweroff" != d && "envoy.cond_flags.pcu_chan.gfitripped" != d) ||
                                        a.push(
                                            '\n                                        <div class="pull-right"><span class="',
                                            void 0 != b.gfi_clear_message ? "clear-gfi-disabled" : "clear-gfi",
                                            ' glyphicons delete " data-device-id="',
                                            b.id,
                                            '"></span></div>\n                                    '
                                        );
                                    a.push(
                                        "\n                                    \x3c!--Can't use the device.sleepsleeping state here because it is iterating through all status messages and\n                                    would add the sleeping link to all of them if we used that state indicator--\x3e\n                                    "
                                    );
                                    "envoy.cond_flags.pcu_ctrl.sleep-mode" === d
                                        ? (a.push("\n                                    "),
                                          b.sleep_enabled
                                              ? a.push(
                                                    "\n                                    ",
                                                    I18n.t(d),
                                                    '\n                                    <a class="sleep-lnk pull-right" rel="micro-detail-link"  id="wake_sleep" data-device-id="',
                                                    b.id,
                                                    '">',
                                                    I18n.t("envoy_backbone.ac_batteries.status_options.wake_sleep_label"),
                                                    "</a>\n                                    "
                                                )
                                              : a.push("\n                                    ", I18n.t("envoy_backbone.ac_batteries.status_options.waking_label"), "\n                                    "),
                                          a.push("\n                                    <br>\n                                    "))
                                        : a.push("\n                                    ", I18n.t(d), "<br>\n                                    ");
                                    a.push("\n\n                                    ");
                                }),
                                a.push("\n                                    "));
                          a.push("\n                                    ");
                          b.sleep_enabled &&
                              !b.sleeping &&
                              a.push(
                                  "\n                                    ",
                                  I18n.t("envoy_backbone.ac_batteries.status_options.preparing_to_sleep_text"),
                                  '\n                                    <a class="sleep-lnk pull-right" rel="micro-detail-link" id="cancel_sleep" data-device-id="',
                                  b.id,
                                  '">',
                                  I18n.t("envoy_backbone.ac_batteries.status_options.cancel_sleep_label"),
                                  "</a>\n                                    "
                              );
                          a.push("\n                                </strong></td>\n                        </tr>\n                        ");
                          if ("nsrs" === collection_type) {
                              a.push(
                                  "\n                            <tr>\n                                <th>",
                                  I18n.t("envoy_backbone.nsr.relay_heading"),
                                  "</th>\n                                <td>\n                                    <span>",
                                  "open" == b.relay || "closed" == b.relay ? I18n.t("envoy_backbone.overview.nsr.relay_state_" + b.relay) : I18n.t("envoy_backbone.microinverters.device_info.unknown"),
                                  "</span>\n                                    <span>\n                                        "
                              );
                              -1 == b.reason_code
                                  ? a.push("\n                                            ", I18n.t("envoy.global.ok"), "\n                                        ")
                                  : a.push("\n                                            ", I18n.t("envoy_backbone.nsr.reason_strings")[b.reason_code], "\n                                        ");
                              a.push("\n                                    </span>\n                                </td>\n                            </tr>\n                            ");
                              if (1 < b.line_count) {
                                  a.push("\n                                ");
                                  var d = !1;
                                  a.push("\n                                ");
                                  var e = ["line1_connected", "line2_connected", "line3_connected"];
                                  a.push("\n                                ");
                                  for (var g = 0; 3 > g; g++)
                                      a.push("\n                                    "),
                                          !1 === b[e[g]] && (a.push("\n                                        "), (d = !0), a.push("\n                                    ")),
                                          a.push("\n                                ");
                                  a.push(
                                      "\n                                <tr class=",
                                      d ? "line_help" : "",
                                      ">\n                                    <th>",
                                      I18n.t("envoy_backbone.nsr.line_status_heading"),
                                      "\n                                        "
                                  );
                                  d && a.push('\n                                            <span class="glyphicons circle_question_mark "></span>\n                                        ');
                                  a.push("\n                                    </th>\n                                    <td>\n                                        ");
                                  for (g = 0; 3 > g; g++)
                                      a.push(
                                          "\n                                        <span>\n                                            ",
                                          I18n.t("envoy_backbone.nsr.lines", { num: g + 1 }),
                                          "\n                                            "
                                      ),
                                          b[e[g]]
                                              ? a.push("\n                                                ", I18n.t("envoy.global.true"), "\n                                            ")
                                              : a.push("\n                                                ", I18n.t("envoy.global.false"), "\n                                            "),
                                          a.push("\n                                        </span>\n                                        ");
                                  a.push("\n                                    </td>\n                                </tr>\n                            ");
                              }
                              a.push("\n                        ");
                          }
                          a.push("\n                        <tr>\n                            <th>", I18n.t("envoy_backbone.devices.device_info.last_report"), "</th>\n                            <td>\n                                ");
                          b.last_report_date
                              ? "enpowers" == collection_type || "nsrs" == collection_type
                                  ? a.push("\n                                    ", I18n.l("time.formats.default_date_time_no_pad", b.last_report_date), "\n                                ")
                                  : a.push(
                                        '\n                                    <span class="current_power">',
                                        b.last_interval_watts,
                                        " W</span>",
                                        I18n.l("time.formats.default_date_time_no_pad", b.last_report_date),
                                        "\n                                "
                                    )
                              : a.push("\n                                    ", I18n.t("envoy_backbone.not_available"), "\n                                ");
                          a.push("\n                                ");
                          ("ac_batteries" != collection_type && "encharge_batteries" != collection_type) ||
                              a.push('\n                                    <span class = class="descriptor"> ', b.op_state_string, " </span>\n                                ");
                          a.push("\n                            </td>\n                        </tr>\n                        ");
                          if ("ac_batteries" == collection_type || "encharge_batteries" == collection_type)
                              a.push("\n                        <tr>\n                            <th>", I18n.t("envoy_backbone.ac_batteries.state_of_charge"), "</th>\n                            "),
                                  void 0 != b.percentFull
                                      ? a.push("\n                                <td>\n                                    ", b.percentFull, "%\n                                </td>\n                            ")
                                      : a.push("\n                                <td>", I18n.t("envoy_backbone.pending"), "</td>\n                            "),
                                  a.push("\n\n                        </tr>\n                        <tr>\n                            <th>", I18n.t("envoy_backbone.ac_batteries.max_temp"), "</th>\n                            "),
                                  void 0 != b.maxCellTemp
                                      ? a.push("\n                            <td>\n                                ", b.maxCellTemp, " \u00b0C\n                            </td>\n                            ")
                                      : a.push("\n                                <td>", I18n.t("envoy_backbone.pending"), "</td>\n                            "),
                                  a.push("\n\n                        </tr>\n                        ");
                          a.push("\n                        ");
                          "enpowers" == collection_type &&
                              (a.push(
                                  "\n                        <tr>\n                            <th>",
                                  I18n.t("envoy_backbone.enpowers.state_of_grid.title"),
                                  "</th>\n                            <td>",
                                  I18n.t("envoy_backbone.enpowers.state_of_grid." + state_of_grid),
                                  "</td>\n                        </tr>\n                        <tr>\n                            <th>",
                                  I18n.t("envoy_backbone.enpowers.max_temp"),
                                  "</th>\n                            "
                              ),
                              void 0 != b.maxCellTemp
                                  ? a.push("\n                            <td>\n                                ", b.maxCellTemp, " \u00b0C\n                            </td>\n                            ")
                                  : a.push("\n                                <td>", I18n.t("envoy_backbone.pending"), "</td>\n                            "),
                              a.push("\n\n                        </tr>\n                        "));
                          a.push(
                              "\n                        <tr>\n                            <th>",
                              I18n.t("envoy_backbone.devices.device_info.detected"),
                              "</th>\n                            <td>\n                                <span>",
                              I18n.l("time.formats.noday_nozone_datetime_ui", b.created_date),
                              "</span>\n                                <span>"
                          );
                          "" != b.admin_state &&
                              "" != b.created_date &&
                              a.push(
                                  "\n                                    ",
                                  "verified" == b.admin_state ? I18n.t("envoy_backbone.devices.device_info.provisioned") : I18n.t("envoy_backbone.devices.device_info.discovered"),
                                  "\n                                    "
                              );
                          a.push("</span>\n                            </td>\n\n                        </tr>\n\n                        ");
                          "enpowers" == collection_type || "encharge_batteries" == collection_type
                              ? (a.push(
                                    "\n                            <tr>\n                                <th>",
                                    I18n.t("envoy_backbone.devices.device_info.comm_level_sub_ghz"),
                                    "</th>\n                                <td>\n                                    "
                                ),
                                void 0 != b.comm_level_sub_ghz &&
                                    a.push(
                                        '\n                                        <div class="comm-level-count" title="',
                                        b.comm_level_sub_ghz,
                                        '">\n                                            <ul class="comm-level-container glyphicon-comm-level-',
                                        b.comm_level_sub_ghz,
                                        '">\n                                                <li></li><li></li><li></li><li></li><li></li>\n                                            </ul>\n                                            <div></div>\n                                        </div>\n                                    '
                                    ),
                                a.push(
                                    "\n                                </td>\n                            </tr>\n                            <tr>\n                                <th>",
                                    I18n.t("envoy_backbone.devices.device_info.comm_level_2_4_ghz"),
                                    "</th>\n                                <td>\n                                    "
                                ),
                                void 0 != b.comm_level_2_4_ghz &&
                                    a.push(
                                        '\n                                        <div class="comm-level-count" title="',
                                        b.comm_level_2_4_ghz,
                                        '">\n                                            <ul class="comm-level-container glyphicon-comm-level-',
                                        b.comm_level_2_4_ghz,
                                        '">\n                                                <li></li><li></li><li></li><li></li><li></li>\n                                            </ul>\n                                            <div></div>\n                                        </div>\n                                    '
                                    ))
                              : (a.push("\n                            <tr>\n                                <th>", I18n.t("envoy_backbone.devices.device_info.comm_level"), "</th>\n                                <td>"),
                                void 0 != b.comm_level &&
                                    a.push(
                                        '\n                                    <div class="comm-level-count" title="',
                                        b.comm_level,
                                        '"><ul class="comm-level-container glyphicon-comm-level-',
                                        b.comm_level,
                                        '"><li></li><li></li><li></li><li></li><li></li></ul><div></div></div>\n                                    '
                                    ));
                          a.push("\n                                </td>\n                            </tr>\n                        ");
                          a.push("\n                        ");
                          if (1 == showProfiles) {
                              a.push("\n                        <tr>\n                            <th>", I18n.t("envoy_backbone.devices.device_info.grid_profile"), "</th>\n                            ");
                              void 0 != current_profile && void 0 != current_profile.default_profile_set
                                  ? a.push("\n                            <td>", current_profile.default_profile_set, "</td>\n                            ")
                                  : (a.push("\n                            <td>", I18n.t("envoy_backbone.profiles.tpm_state." + b.profile_status), "\n                                "),
                                    void 0 != current_profile && a.push("\n                                (", current_profile.translated_name, ")\n                                "),
                                    a.push("\n                            </td>\n                            "));
                              a.push("\n                        </tr>\n                        ");
                              if (showPhase) {
                                  a.push(
                                      "\n                        <tr>\n                            <th>",
                                      I18n.t("envoy_backbone.devices.device_info.phase"),
                                      "</th>\n                            <td>\n                                <span>",
                                      I18n.t("envoy_backbone.microinverters.phase_labels." + b.phase),
                                      "</span>\n                                "
                                  );
                                  if ("ac_batteries" == collection_type || "encharge_batteries" == collection_type)
                                      a.push("\n                                    "),
                                          metersEnabled &&
                                              1 < phaseCount &&
                                              !b.phase_set_by_envoy &&
                                              (a.push("\n                                        "),
                                              "ph-unk" == b.phase
                                                  ? a.push(
                                                        '\n                                            <a class="select-phase" rel="micro-detail" data-device-id="',
                                                        b.id,
                                                        '">',
                                                        I18n.t("envoy_backbone.devices.device_info.select_phase"),
                                                        "</a>\n                                        "
                                                    )
                                                  : a.push(
                                                        '\n                                            <a class="select-phase" rel="micro-detail" data-device-id="',
                                                        b.id,
                                                        '">',
                                                        I18n.t("envoy_backbone.devices.device_info.change_phase"),
                                                        "</a>\n                                        "
                                                    ),
                                              a.push("\n                                    ")),
                                          a.push("\n                                ");
                                  a.push("\n\n                            </td>\n                        </tr>\n                        ");
                              }
                              a.push("\n                        ");
                          }
                          a.push(
                              "\n                        <tr>\n                            <th>",
                              I18n.t("envoy_backbone.devices.device_info.part_number"),
                              "</th>\n                            <td>",
                              b.part_number,
                              '</td>\n                        </tr>\n                        <tr id="running_image">\n                            <th>',
                              I18n.t("envoy_backbone.devices.device_info.running_image"),
                              "</th>\n                            <td>\n                                "
                          );
                          !_.isEmpty(b.img_pnum_running) || 0 > b.img_pnum_running.indexOf("undetermined")
                              ? (a.push("\n                                ", b.img_pnum_running, "\n                                "),
                                0 != b.img_load_date &&
                                    a.push(
                                        "\n                                <span>",
                                        I18n.t("envoy_backbone.devices.device_info.updated") + " " + I18n.l("time.formats.default_date_time_no_pad", b.img_load_date),
                                        "</span>\n                                "
                                    ),
                                a.push("\n                                "))
                              : a.push("\n                                ", I18n.t("envoy_backbone.not_available"), "\n                                ");
                          a.push("\n                            </td>\n                        </tr>\n                        ");
                          showParameterTable &&
                              (a.push("\n                        <tr>\n                            <th>", I18n.t("envoy_backbone.devices.device_info.param_table"), "</th>\n                            <td>"),
                              void 0 == b.param_table_part_number || "" == b.param_table_part_number
                                  ? a.push("\n                                ", I18n.t("envoy_backbone.not_available"), "\n                                ")
                                  : a.push("\n                                ", b.param_table_part_number, "\n                                "),
                              a.push("\n                            </td>\n                        </tr>\n                        "));
                          a.push("\n                        ");
                          showDeviceLink &&
                              a.push(
                                  '\n                        <tr>\n                            <th colspan="2"><a class="btn btn-primary btn-envoy btn-block" href="/toolkitarrayview/show/',
                                  b.id,
                                  '" target="_blank">',
                                  I18n.t("envoy_backbone.devices.device_info.view_in_array"),
                                  "</a></th>\n                        </tr>\n                        "
                              );
                          a.push("\n                        </tbody>\n                    </table>\n                </li>\n            </ul>\n        </div>\n    </div>\n</div>\n");
                      }),
                      a.push("\n")),
                a.push("\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["shared/device_collection_main"] = function (b) {
        var a = [];
        with (b || {})
            a.push("<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <div class=\"page-header\">\n            "),
                hasScan &&
                    a.push(
                        '\n                <div class="pull-right device_scan_button">\n                    <button type="button" data-toggle="collapse" data-target="#device_scan" class="btn btn-envoy btn-primary btn-scan pull-right">\n                    <span class="device_scan_button_title pull-left"></span>\n                        <span class="glyphicons-icon device_scan"></span>\n                    </button>\n                </div>\n            '
                    ),
                a.push(
                    "\n\n            <h2>",
                    I18n.t("envoy_backbone.global_nav." + collection_alias),
                    '</h2>\n            <div class="micro_count">\n                <span class="value">',
                    I18n.t("envoy_backbone.devices.detected_total_count", { detected_count: actual_count, total_count: total_count }),
                    "</span>\n                ",
                    I18n.t("envoy_backbone.overview.devices.detected"),
                    "\n            </div>\n        </div>\n    </div>\n\n    "
                ),
                hasScan &&
                    a.push(
                        "\n      <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n          <div class=\"list-group device_scan collapse",
                        1 == scanViewOpen ? " in" : "",
                        '" id="device_scan">\n              <div class="list-group-item action heading device_scan_header">\n                  <span class="descriptor panel-title device_scan_title">\n                  </span>\n              </div>\n              <div id="device_scan_panel" class="">\n                  <div class="device_scan_details">\n                  </div>\n              </div>\n          </div>\n      </div>\n    '
                    ),
                a.push("\n\n    "),
                hasPowerSummary && a.push("\n      <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2 power_energy_summary'></div>\n    "),
                a.push("\n\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <div class=\"panel panel-default secondary_nav\">\n            "),
                _.isEmpty(primary_nav_options) ||
                    (a.push('\n                <ul class="nav nav-tabs" id="device_tab_nav">\n                    '),
                    _.each(primary_nav_options, function (b) {
                        a.push(
                            "\n                        <li ",
                            b == primary_tab ? "class='active'" : "",
                            '>\n                            <a href="#',
                            collection_alias,
                            "/",
                            b,
                            '">\n                                ',
                            I18n.t("envoy_backbone." + collection_type + ".nav." + b),
                            "\n                            </a>\n                        </li>\n                    "
                        );
                    }),
                    a.push("\n                </ul>\n            ")),
                a.push('\n            <div class="tab-content">\n            </div>\n        </div>\n    </div>\n</div>\n\n\n');
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["shared/device_sub_nav_bar"] = function (b) {
        var a = [];
        with (b || {})
            a.push(""),
                _.isEmpty(nav_options) ||
                    (a.push('\n  <div class="btn-group btn-group-justified" id="status_nav">\n\n      '),
                    _.each(nav_options, function (b) {
                        var d = 0,
                            e = "";
                        "profile" == b
                            ? ((d = profile_count), (e = "profile_nocount"))
                            : "power" == b
                            ? ((d = producing_count), (e = "power_nocount"))
                            : "comm" == b
                            ? ((d = communicating_count), (e = "comm_nocount"))
                            : "active" == b
                            ? ((d = detected_count), (e = "active"))
                            : "deleted" == b && ((d = deleted_count), (e = "deleted"));
                        "manage" == sub_name
                            ? a.push(
                                  '\n          <a\n            href="#',
                                  collection_route,
                                  "/",
                                  sub_name,
                                  "/",
                                  b,
                                  '"\n            class="btn ',
                                  b,
                                  " ",
                                  b == active_nav ? "btn-primary" : "btn-default",
                                  '"\n            role="button"\n          >\n            ',
                                  I18n.t("envoy_backbone." + collection_type + "." + sub_name + "_options." + e + "_count.counting", { count: d }),
                                  "\n          </a>\n        "
                              )
                            : a.push(
                                  '\n          <a\n            href="#',
                                  collection_route,
                                  "/",
                                  sub_name,
                                  "/",
                                  b,
                                  '"\n            class="btn ',
                                  b,
                                  " ",
                                  b == active_nav ? "btn-primary" : "btn-default",
                                  '"\n            role="button"\n          >\n            ',
                                  I18n.t("envoy_backbone." + collection_type + "." + sub_name + "_options." + e, { count: d }),
                                  "\n          </a>\n        "
                              );
                        a.push("\n      ");
                    }),
                    a.push("\n    </div>\n  ")),
                a.push("\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["shared/manage_device_list"] = function (b) {
        var a = [];
        with (b || {})
            a.push(""),
                1 == isLoading
                    ? a.push(
                          "\n    <div class='row'>\n        <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n            <div class=\"user-messaging clearfix\"><div class=\"pull-left preloader\"></div><div class='pull-left messaging single-message'>",
                          I18n.t("envoy_backbone.loading"),
                          "</div></div>\n        </div>\n    </div>\n"
                      )
                    : (a.push(
                          '\n    <div class="row search-row manage-row">\n        <div class="col-xs-12">\n            <form id="filterDevices">\n                <div class="form-group form-group-search input-group">\n                    <label class="sr-only" for="searchDevices">',
                          I18n.t("envoy_backbone.forms.search"),
                          '</label>\n                    <input class="form-control" type="search" results=5 id="searchDevices" placeholder="',
                          I18n.t("envoy_backbone.forms.search_prompt"),
                          '" value="',
                          searchTerm,
                          '">\n                    '
                      ),
                      "" != searchTerm &&
                          a.push(
                              '\n                    <span class="input-group-btn remove">\n                        <button class="btn btn-default" type="button"><span class="glyphicons remove"></span></button>\n                    </span>\n                    '
                          ),
                      a.push('\n                </div>\n            </form>\n        </div>\n    </div>\n    <div class="row search-row manage-row">\n        '),
                      "ac_batteries" == collection_type || "encharge_batteries" == collection_type
                          ? (a.push("\n            "),
                            is_active_list &&
                                a.push(
                                    '\n                <div class="col-xs-6 col-sm-6 col-md-4 col-md-offset-4 col-lg-4 col-lg-offset-4"><button id="sleepSubmit" class="sleep_button btn btn-info btn-block">',
                                    I18n.t("envoy_backbone.ac_batteries.sleep_mode.sleep_btn"),
                                    "</button></div>\n            "
                                ),
                            a.push(
                                '\n            <div class="col-xs-6 col-sm-6 col-md-4 col-lg-4 ',
                                is_active_list ? "" : "col-xs-offset-6 col-sm-offset-6 col-md-offset-8 col-lg-offset-8 ",
                                '" ><button class="btn ',
                                is_active_list ? "btn-danger" : "btn-primary",
                                ' btn-block " id="manageSubmit">',
                                is_active_list ? I18n.t("envoy_backbone.microinverters.manage_options.delete_btn") : I18n.t("envoy_backbone.microinverters.manage_options.restore_btn"),
                                "</button></div>\n        "
                            ))
                          : a.push(
                                '\n            <div class="col-xs-6 col-xs-offset-6 col-sm-6 col-sm-offset-6 col-md-4 col-md-offset-8 col-lg-4 col-lg-offset-8"><button class="btn ',
                                is_active_list ? "btn-danger" : "btn-primary",
                                ' btn-block " id="manageSubmit">',
                                is_active_list ? I18n.t("envoy_backbone.microinverters.manage_options.delete_btn") : I18n.t("envoy_backbone.microinverters.manage_options.restore_btn"),
                                '</button></div>\n            \x3c!--<div class="col-xs-4 col-xs-offset-8"><button class="btn ',
                                is_active_list ? "btn-danger" : "btn-primary",
                                ' btn-envoy btn-block " id="manageSubmit"><span class="glyphicons-icon ',
                                is_active_list ? "trash" : "untrash",
                                '"></span></button></div>--\x3e\n        '
                            ),
                      a.push("\n    </div>\n    "),
                      _.isEmpty(devices)
                          ? "" != searchTerm
                              ? a.push(
                                    '\n        <div class="panel-group">\n            <div class="user-messaging search-result clearfix">\n                <div class="messaging single-message ">\n                    ',
                                    I18n.t("envoy_backbone." + collection_type + ".no_inverters_search", { search_term: searchTerm }),
                                    "\n                </div>\n            </div>\n        </div>\n    "
                                )
                              : a.push(
                                    '\n        <div class="panel-group">\n            <div class="user-messaging search-result clearfix">\n                <div class="messaging single-message ">\n                    ',
                                    I18n.t("envoy_backbone." + collection_type + ".no_inverters"),
                                    "\n                </div>\n            </div>\n        </div>\n    "
                                )
                          : (a.push('\n        <form id="', is_active_list ? "delete" : "activate", 'Inverters">\n            <div class="panel-group">\n                '),
                            _.each(devices, function (b) {
                                a.push(
                                    '\n                    <div class="panel panel-default">\n                        <div class="panel-heading manage_device_header" data-device-id="',
                                    b.id,
                                    '">\n                            <a class="accordion-toggle" data-device-id="',
                                    b.id,
                                    '">\n                            <div class="inverter_status pull-left">\n                                '
                                );
                                _.isEmpty(b.status)
                                    ? a.push('\n                                    <span class="inverter_status_mark pending"></span>\n                                ')
                                    : (a.push('\n                                    <span class="inverter_status_mark\n                                        '),
                                      1 < b.status.length || "envoy.global.ok" != b.status[0]
                                          ? a.push("\n                                            red_dot\n                                        ")
                                          : a.push("\n                                            green_dot\n                                        "),
                                      a.push('\n                                    "></span>\n                                '));
                                a.push(
                                    '\n                            </div>\n                            <div class="pull-left">\n                                <label>',
                                    b.id,
                                    '</label>\n                            </div>\n                            <div class="pull-right checkbox">\n                                '
                                );
                                a.push(
                                    '\n                                <span class="glyphicons ',
                                    (1 == is_active_list ? b.isFlaggedForDelete : b.isFlaggedForUnDelete) ? "check" : "unchecked",
                                    '"></span>\n                            </div>\n                                <div class="clearfix"></div>\n                            </a>\n                        </div>\n                    </div>\n                    <div class="panel-collapse collapse in inverter-details">\n                        <ul class="list-group manage-group">\n                            <li class="list-group-item micro_detail_table">\n                                <table class="micro_detail">\n                                    <tbody>\n                                    <tr>\n                                        <th>',
                                    I18n.t("envoy_backbone.devices.device_info.status"),
                                    "</th>\n                                        <td><strong>\n                                                "
                                );
                                _.isEmpty(b.status)
                                    ? a.push("\n                                                    ", I18n.t("envoy_backbone.pending"), "\n                                                ")
                                    : (a.push("\n                                                    "),
                                      _.each(b.status, function (b) {
                                          a.push("\n                                                        ");
                                          "envoy.cond_flags.pcu_ctrl.sleep-mode" !== b && a.push("\n                                                            ", I18n.t(b), "<br>\n                                                        ");
                                          a.push("\n                                                    ");
                                      }),
                                      a.push("\n                                                    "),
                                      b.sleeping &&
                                          (a.push("\n                                                        "),
                                          b.sleep_enabled
                                              ? (a.push("\n                                                            ", I18n.t("envoy.cond_flags.pcu_ctrl.sleep-mode"), "\n                                                            "),
                                                is_active_list &&
                                                    a.push(
                                                        '\n                                                                <a class="sleep-lnk pull-right" rel="micro-detail-link"  id="wake_sleep" data-device-id="',
                                                        b.id,
                                                        '">',
                                                        I18n.t("envoy_backbone.ac_batteries.status_options.wake_sleep_label"),
                                                        "</a>\n                                                            "
                                                    ),
                                                a.push("\n                                                        "))
                                              : a.push(
                                                    "\n                                                            ",
                                                    I18n.t("envoy_backbone.ac_batteries.status_options.waking_label"),
                                                    "\n                                                        "
                                                ),
                                          a.push("\n                                                    ")),
                                      a.push("\n                                                "));
                                a.push("\n\n                                                ");
                                b.sleep_enabled &&
                                    !b.sleeping &&
                                    (a.push("\n                                                    ", I18n.t("envoy_backbone.ac_batteries.status_options.preparing_to_sleep_text"), "\n                                                    "),
                                    is_active_list &&
                                        a.push(
                                            '\n                                                        <a class="sleep-lnk pull-right" rel="micro-detail-link" id="cancel_sleep" data-device-id="',
                                            b.id,
                                            '">',
                                            I18n.t("envoy_backbone.ac_batteries.status_options.cancel_sleep_label"),
                                            "</a>\n                                                    "
                                        ),
                                    a.push("\n                                                "));
                                a.push("\n                                            </strong></td>\n                                    </tr>\n                                    ");
                                if ("nsrs" === collection_type) {
                                    a.push(
                                        "\n                                        <tr>\n                                            <th>",
                                        I18n.t("envoy_backbone.nsr.relay_heading"),
                                        "</th>\n                                            <td>\n                                                <span>",
                                        "open" == b.relay || "closed" == b.relay ? I18n.t("envoy_backbone.overview.nsr.relay_state_" + b.relay) : I18n.t("envoy_backbone.microinverters.device_info.unknown"),
                                        "</span>\n                                                <span>\n                                                    "
                                    );
                                    -1 == b.reason_code
                                        ? a.push("\n                                                    ", I18n.t("envoy.global.ok"), "\n                                                    ")
                                        : a.push("\n                                                    ", I18n.t("envoy_backbone.nsr.reason_strings")[b.reason_code], "\n                                                    ");
                                    a.push(
                                        "\n                                                </span>\n                                            </td>\n                                        </tr>\n                                        "
                                    );
                                    if (1 < b.line_count) {
                                        a.push("\n                                        ");
                                        var d = !1;
                                        a.push("\n                                        ");
                                        var e = ["line1_connected", "line2_connected", "line3_connected"];
                                        a.push("\n                                        ");
                                        for (var g = 0; 3 > g; g++)
                                            a.push("\n                                        "),
                                                !1 === b[e[g]] && (a.push("\n                                        "), (d = !0), a.push("\n                                        ")),
                                                a.push("\n                                        ");
                                        a.push(
                                            "\n                                        <tr class=",
                                            d ? "line_help" : "",
                                            ">\n                                            <th>",
                                            I18n.t("envoy_backbone.nsr.line_status_heading"),
                                            "\n                                                "
                                        );
                                        d && a.push('\n                                                <span class="glyphicons circle_question_mark "></span>\n                                                ');
                                        a.push("\n                                            </th>\n                                            <td>\n                                                ");
                                        for (g = 0; 3 > g; g++)
                                            a.push(
                                                "\n                                                <span>\n                                                        ",
                                                I18n.t("envoy_backbone.nsr.lines", { num: g + 1 }),
                                                "\n                                                    "
                                            ),
                                                b[e[g]]
                                                    ? a.push("\n                                                    ", I18n.t("envoy.global.true"), "\n                                                    ")
                                                    : a.push("\n                                                    ", I18n.t("envoy.global.false"), "\n                                                    "),
                                                a.push("\n                                                </span>\n                                                ");
                                        a.push("\n                                            </td>\n                                        </tr>\n                                        ");
                                    }
                                    a.push("\n                                    ");
                                }
                                a.push(
                                    "\n                                    <tr>\n                                        <th>",
                                    I18n.t("envoy_backbone.devices.device_info.last_report"),
                                    "</th>\n                                        <td>\n                                            "
                                );
                                b.last_report_date
                                    ? "enpowers" == collection_type || "nsrs" == collection_type
                                        ? a.push("\n                                                ", I18n.l("time.formats.default_date_time_no_pad", b.last_report_date), "\n                                            ")
                                        : a.push(
                                              '\n                                                <span class="current_power">',
                                              b.last_interval_watts,
                                              " W</span>",
                                              I18n.l("time.formats.default_date_time_no_pad", b.last_report_date),
                                              "\n                                            "
                                          )
                                    : a.push("\n                                                ", I18n.t("envoy_backbone.not_available"), "\n                                            ");
                                a.push("\n                                            ");
                                ("ac_batteries" != collection_type && "encharge_batteries" != collection_type) ||
                                    a.push('\n                                                <span class = class="descriptor"> ', b.op_state_string, " </span>\n                                            ");
                                a.push("\n                                        </td>\n                                    </tr>\n                                    ");
                                if ("ac_batteries" == collection_type || "encharge_batteries" == collection_type)
                                    a.push(
                                        "\n                                        <tr>\n                                            <th>",
                                        I18n.t("envoy_backbone.ac_batteries.state_of_charge"),
                                        "</th>\n                                            "
                                    ),
                                        void 0 != b.percentFull
                                            ? a.push("\n                                                <td>", b.percentFull, "%</td>\n                                            ")
                                            : a.push("\n                                                <td>", I18n.t("envoy_backbone.pending"), "</td>\n                                            "),
                                        a.push(
                                            "\n                                        </tr>\n                                        <tr>\n                                            <th>",
                                            I18n.t("envoy_backbone.ac_batteries.max_temp"),
                                            "</th>\n                                            "
                                        ),
                                        void 0 != b.maxCellTemp
                                            ? a.push("\n                                                <td>", b.maxCellTemp, " \u00b0C</td>\n                                            ")
                                            : a.push("\n                                                <td>", I18n.t("envoy_backbone.pending"), "</td>\n                                            "),
                                        a.push("\n                                        </tr>\n                                    ");
                                a.push("\n                                    ");
                                "enpowers" == collection_type &&
                                    (a.push(
                                        "\n                                        <tr>\n                                            <th>",
                                        I18n.t("envoy_backbone.enpowers.state_of_grid.title"),
                                        "</th>\n                                            <td>",
                                        I18n.t("envoy_backbone.enpowers.state_of_grid." + state_of_grid),
                                        "</td>\n                                        </tr>\n                                        <tr>\n                                            <th>",
                                        I18n.t("envoy_backbone.enpowers.max_temp"),
                                        "</th>\n                                            "
                                    ),
                                    void 0 != b.maxCellTemp
                                        ? a.push("\n                                                <td>", b.maxCellTemp, " \u00b0C</td>\n                                            ")
                                        : a.push("\n                                                <td>", I18n.t("envoy_backbone.pending"), "</td>\n                                            "),
                                    a.push("\n                                        </tr>\n                                    "));
                                a.push(
                                    "\n                                    <tr>\n                                        <th>",
                                    I18n.t("envoy_backbone.devices.device_info.detected"),
                                    "</th>\n                                        <td>\n                                            <span>",
                                    I18n.l("time.formats.noday_nozone_datetime_ui", b.created_date),
                                    "</span>\n                                            <span>\n                                                "
                                );
                                "" != b.admin_state &&
                                    "" != b.created_date &&
                                    a.push(
                                        "\n                                                    ",
                                        "verified" == b.admin_state ? I18n.t("envoy_backbone.devices.device_info.provisioned") : I18n.t("envoy_backbone.devices.device_info.discovered"),
                                        "\n                                                "
                                    );
                                a.push(
                                    "\n                                            </span>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <th>",
                                    I18n.t("envoy_backbone.devices.device_info.part_number"),
                                    "</th>\n                                        <td>",
                                    b.part_number,
                                    "</td>\n                                    </tr>\n                                    </tbody>\n                                </table>\n                            </li>\n                        </ul>\n                    </div>\n                "
                                );
                            }),
                            a.push("\n            </div>\n        </form>\n    ")),
                      a.push("\n")),
                a.push("\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["shared/manage_devices_main"] = function (b) {
        var a = [];
        with (b || {}) a.push('<div id="manage_navbar" class="status_navbar">\n</div>\n<div class="device-list"></div>\n');
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["shared/power_main"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                '<div id="status_navbar" class="status_navbar">\n</div>\n<div class="panel-group">\n    <div class="panel panel-default panel-power">\n        <div class="panel-heading producing_list_header">\n            <h4 class="panel-title">\n                <a class="accordion-toggle',
                producingOpen ? "" : " collapsed",
                '"  data-toggle="collapse" data-page-state-element="producing"  href="#producing_panel">\n                    <div class=\'pull-right inverter_counts\'><span class="counts">',
                producing_count,
                '</span><span class="glyphicons expand"></span></div><span class=\'glyphicons envoy-chk ',
                0 < target_count && producing_count >= target_count ? "ok_2" : "",
                '\' id="target_glyphicon"></span>',
                I18n.t(producing_title),
                '</a>\n            </h4>\n        </div>\n        <div id="producing_panel" class="panel-collapse collapse',
                producingOpen ? " in" : "",
                '">\n            <div class="panel-body producing-list"></div>\n        </div>\n    </div>\n</div>\n<div class="panel-group">\n    <div class="panel panel-default panel-power last">\n        <div class="panel-heading not_producing_list_header">\n          <h4 class="panel-title">\n           <a class="accordion-toggle',
                notproducingOpen ? "" : " collapsed",
                '" data-toggle="collapse" data-page-state-element="notproducing"  href="#not_producing_panel"><div class=\'pull-right inverter_counts\'><span class="counts">',
                not_producing_count,
                "</span><span class=\"glyphicons expand\"></span></div><span class='glyphicons envoy-chk envoy-blnk'></span>",
                I18n.t(not_producing_title),
                '</a>\n          </h4>\n        </div>\n        <div id="not_producing_panel" class="panel-collapse collapse',
                notproducingOpen ? " in" : "",
                '">\n            <div class="panel-body not-producing-list"></div>\n        </div>\n    </div>\n</div>\n\n<div class="panel-group">\n<div class="list-group list-unstyled alerts">\n    '
            ),
                1 == b.showMeters &&
                    (a.push("\n    "),
                    0 == b.batts_configured &&
                        a.push(
                            '\n    <a class="list-group-item alert inline-alert" href="#acb/status/profile">\n        <span class="descriptor">\n            <span class="glyphicons envoy-alrt envoy-alrt-warning warning_sign"></span>\n            <span class="alert-text">',
                            I18n.t("envoy_backbone.device_alert_messages.not_configured"),
                            '</span>\n            <span class="glyphicons envoy-alrt envoy-alrt-link chevron-right"></span>\n        </span>\n    </a>\n    '
                        ),
                    a.push("\n    "),
                    b.meters_not_enabled &&
                        a.push(
                            '\n    <a class="list-group-item alert inline-alert" href="#meters">\n        <span class="descriptor">\n            <span class="glyphicons envoy-alrt envoy-alrt-warning warning_sign"></span>\n            <span class="alert-text">',
                            I18n.t("envoy_backbone.device_alert_messages.meters_not_enabled"),
                            '</span>\n            <span class="glyphicons envoy-alrt envoy-alrt-link chevron-right"></span>\n        </span>\n    </a>\n    '
                        ),
                    a.push("\n    "),
                    b.no_phase_assignment &&
                        a.push(
                            '\n    <a class="list-group-item alert inline-alert">\n        <span class="descriptor">\n            <span class="glyphicons envoy-alrt envoy-alrt-warning warning_sign"></span>\n            <span class="alert-text">',
                            I18n.t("envoy_backbone.device_alert_messages.no_phase_assignment"),
                            "</span>\n        </span>\n    </a>\n    "
                        ),
                    a.push("\n    ")),
                a.push("\n</div>\n</div>\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["shared/profiles_main"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                "<div id=\"status_navbar\" class=\"status_navbar\"></div>\n<div class='grid_profile'>\n</div>\n<div id=\"propagation_state\" class='hidden'>\n<div id='propagation_loading' class='in'>\n    <div class=\"loader_holder\">\n        <div class='preloader'></div>\n    </div>\n</div>\n<div id='propagation_data' class='collapse'>\n    <div class=\"action profile-action\"></div>\n    <div class='details_2'></div>\n    <div class='details_1'></div>\n    <div class='details_5'></div>\n    <div class='details_4'></div>\n    <div class='details_3'></div>\n    <div class='details_6'></div>\n    <div class='details_0'></div>\n\n</div>\n</div>\n"
            );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["shared/public_manage_batteries"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                "<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <div class='subviewheader page-header'>\n            <a class=\"btn btn-primary pull-left btn-back\" href=\"#overview\">\n                <span class=\"glyphicons glyphicons left_arrow\"></span>\n            </a>\n            \x3c!--Forcing this string to be plural for now.\n            If we decide to make it use the pluralization then it is easy to change.--\x3e\n            <h2>",
                I18n.t(title_text, { count: 3 }),
                "</h2>\n        </div>\n    </div>\n</div>\n"
            ),
                1 == isLoading
                    ? a.push(
                          "\n<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <div class=\"list-group clearfix\">\n            <div class=\"user-messaging\">\n                <div class=\"pull-left preloader\"></div>\n                <div class='pull-left messaging single-message'>",
                          I18n.t("envoy_backbone.loading"),
                          "</div>\n            </div>\n        </div>\n    </div>\n</div>\n"
                      )
                    : (a.push(
                          '\n<div class=\'row\'>\n    <div class=\'col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2\'>\n        <div class="panel panel-default">\n            <div class="row search-row manage-row">\n                <div class="col-xs-4 col-xs-offset-8">\n                    <button id="sleepSubmit" class="btn btn-primary sleep_button pull-right">',
                          I18n.t("envoy_backbone.ac_batteries.sleep_mode.sleep_btn"),
                          "</button>\n                </div>\n            </div>\n            "
                      ),
                      _.isEmpty(batteries) ||
                          (a.push('\n                <div class="device-list">\n\n                        <form id="activateInverters">\n                            <div class="panel-group">\n                                '),
                          _.each(batteries, function (b) {
                              a.push(
                                  '\n                                <div class="panel panel-default">\n                                    <div class="panel-heading manage_device_header" data-device-id="',
                                  b.id,
                                  '">\n                                        <a class="accordion-toggle">\n                                            <div class="pull-left">\n                                                <label>',
                                  b.id,
                                  "</label>\n                                            </div>\n                                            "
                              );
                              b.sleep_enabled ||
                                  a.push(
                                      '\n                                            <div class="pull-right checkbox">\n                                                <span class="glyphicons ',
                                      b.isFlaggedForDelete ? "check" : "unchecked",
                                      '"></span>\n                                            </div>\n                                            '
                                  );
                              a.push(
                                  '\n                                            <div class="clearfix"></div>\n                                        </a>\n                                    </div>\n                                </div>\n                                <div class="panel-collapse collapse in inverter-details clearfix">\n                                    <ul class="list-group manage-group">\n                                        <li class="list-group-item micro_detail_table">\n                                            <table class="micro_detail">\n                                                <tbody>\n                                                <tr>\n                                                    <th>',
                                  I18n.t("envoy_backbone.devices.device_info.status"),
                                  "</th>\n                                                    <td><strong>\n                                                            "
                              );
                              _.isEmpty(b.status)
                                  ? a.push("\n                                                                ", I18n.t("envoy_backbone.pending"), "\n                                                            ")
                                  : (a.push("\n                                                                "),
                                    _.each(b.status, function (b) {
                                        a.push("\n                                                                    ");
                                        "envoy.cond_flags.pcu_ctrl.sleep-mode" === b &&
                                            a.push("\n                                                                        ", I18n.t(b), "<br>\n                                                                    ");
                                        a.push("\n                                                                ");
                                    }),
                                    a.push("\n                                                                "),
                                    b.sleeping &&
                                        (a.push("\n                                                                    "),
                                        b.sleep_enabled
                                            ? a.push(
                                                  "\n                                                                        ",
                                                  I18n.t("envoy.cond_flags.pcu_ctrl.sleep-mode"),
                                                  "\n                                                                    "
                                              )
                                            : a.push(
                                                  "\n                                                                        ",
                                                  I18n.t("envoy_backbone.ac_batteries.status_options.waking_label"),
                                                  "\n                                                                    "
                                              ),
                                        a.push("\n                                                                    <br>\n                                                                ")),
                                    a.push("\n                                                            "));
                              a.push("\n                                                            ");
                              b.sleep_enabled &&
                                  !b.sleeping &&
                                  a.push(
                                      "\n                                                                ",
                                      I18n.t("envoy_backbone.ac_batteries.status_options.preparing_to_sleep_text"),
                                      "\n                                                            "
                                  );
                              a.push(
                                  "\n                                                        </strong>\n                                                    </td>\n                                                </tr>\n                                                <tr>\n                                                    <th>",
                                  I18n.t("envoy_backbone.ac_batteries.state_of_charge"),
                                  "</th>\n                                                    "
                              );
                              void 0 != b.percentFull &&
                                  a.push(
                                      "\n                                                    <td>\n                                                        ",
                                      b.percentFull,
                                      "%\n                                                    </td>\n                                                    "
                                  );
                              a.push(
                                  "\n                                                </tr>\n                                                <tr>\n                                                    <th>",
                                  I18n.t("envoy_backbone.ac_batteries.max_temp"),
                                  "</th>\n                                                    "
                              );
                              void 0 != b.maxCellTemp
                                  ? a.push(
                                        "\n                                                    <td>\n                                                        ",
                                        b.maxCellTemp,
                                        " \u00b0C\n                                                    </td>\n                                                    "
                                    )
                                  : a.push("\n                                                        <td>", I18n.t("envoy_backbone.pending"), "</td>\n                                                    ");
                              a.push(
                                  "\n                                                </tr>\n                                                </tbody>\n                                            </table>\n                                        </li>\n                                    </ul>\n                                </div>\n                                "
                              );
                          }),
                          a.push("\n                            </div> \x3c!-- end panel-group --\x3e\n                        </form>\n\n                </div>\n\n            ")),
                      a.push("\n        </div>\n    </div>\n</div>\n")),
                a.push("\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST.sleep_cancel_prompt = function (b) {
        var a = [];
        with (b || {})
            a.push('<div class=\'modal-dialog sleep-cancel-prompt\'>\n        <div class="modal-content">\n            <div class="modal-body">\n                '),
                "cancel" == mode
                    ? a.push('\n                    <div class="sleep-cancel-title">', I18n.t("envoy_backbone.ac_batteries.sleep_mode.prompt_to_cancel.desc"), "</div>\n                ")
                    : a.push('\n                    <div class="sleep-cancel-title">', I18n.t("envoy_backbone.ac_batteries.sleep_mode.prompt_to_wake"), "</div>\n                "),
                a.push(
                    '\n            </div>\n            <div class="modal-footer">\n                <button type="button" class="btn btn-link btn-close close" id=cancel>',
                    I18n.t("envoy_backbone.buttons.cancel"),
                    "</button>\n                "
                ),
                "cancel" == mode
                    ? a.push('\n                    <input type="button" class="btn btn-primary pull-right" id=set_soc value="', I18n.t("envoy_backbone.buttons.stop"), '"/>\n                ')
                    : a.push('\n                    <input type="button" class="btn btn-primary pull-right" id=set_soc value="', I18n.t("envoy_backbone.buttons.sleep_off"), '"/>\n                '),
                a.push("\n            </div>\n        </div>\n</div>\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST.sleep_mode_prompt = function (b) {
        var a = [];
        with (b || {})
            a.push(
                '<div class=\'modal-dialog sleep-mode-prompt\'>\n    <form role="form">\n        <div class="modal-content">\n            <div class="modal-body">\n                <div class="sleep-prompt-title">',
                I18n.t("envoy_backbone.ac_batteries.sleep_mode.prompt_to_sleep_modal.desc", { min: min_target, max: max_target }),
                '</div>\n                <div class="form-group">\n                    <div><a class="show-tsoc accordion-toggle',
                tsocExpanded ? "" : " collapsed",
                '"\n                            data-toggle="collapse" href="#show_target_soc"><span\n                                    class="glyphicons expand"></span> ',
                I18n.t("envoy_backbone.ac_batteries.sleep_mode.prompt_to_sleep_modal.target_soc_link_text"),
                '\n                        </a></div>\n                    <div id="show_target_soc" class="panel-collapse collapse',
                tsocExpanded ? " in" : "",
                '">\n                        <label for="target_state_of_charge" class="panel-body">',
                I18n.t("envoy_backbone.ac_batteries.sleep_mode.prompt_to_sleep_modal.target_soc_label"),
                '</label>\n                        <select class="form-control" id="soc_select">\n                            '
            ),
                _.each(ranges, function (b) {
                    a.push('\n                            <option value="', b.min, '" ', b == selected_range ? "selected" : "", ">", b.str, "</option>\n                            ");
                }),
                a.push("\n                        </select>\n                    </div>\n                    "),
                EnvoyBackboneApp.isPublic() &&
                    a.push(
                        "\n                    <div>\n                        <br/>\n                        <strong>",
                        I18n.t("envoy_backbone.ac_batteries.sleep_mode.prompt_to_sleep_modal.warning"),
                        "</strong>\n                    </div>\n                    "
                    ),
                a.push(
                    '\n                </div>\n            </div>\n            <div class="modal-footer">\n                <button type="button" class="btn btn-link btn-close close" id=cancel>',
                    I18n.t("envoy_backbone.buttons.cancel"),
                    '</button>\n                <input type="button" class="btn btn-primary pull-right" id=set_soc value="',
                    I18n.t("envoy_backbone.buttons.sleep_on"),
                    '"/>\n            </div>\n        </div>\n    </form>\n</div>\n'
                );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST.start_device_scan_modal = function (b) {
        var a = [];
        with (b || {})
            a.push(
                '<div class=\'modal-dialog\'>\n    <div class="modal-content">\n        <div class="modal-header">\n            <button type="button" class="close" aria-hidden="true">&times;</button>\n            <h4 class="modal-title">',
                title,
                '</h4>\n        </div>\n        <div class="modal-body">\n            <p>',
                body,
                '</p>\n        </div>\n        <div class="modal-footer">\n            <button type="button" class="btn btn-link btn-close close" id="cancel">',
                I18n.t("envoy_backbone.buttons.cancel"),
                '</button>\n            <button type="button" class="btn btn-primary pull-right" id="start-scan">',
                I18n.t("envoy_backbone.buttons.start_scan"),
                "</button>\n        </div>\n    </div>\n</div>\n"
            );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["tariff/pub_tariff"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                "<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2 span8'>\n        <div class='subviewheader page-header'>\n            <a class=\"btn btn-primary pull-left btn-back\" href=\"#overview\">\n                <span class=\"glyphicons glyphicons left_arrow\"></span>\n            </a>\n            \x3c!--Forcing this string to be plural for now.\n            If we decide to make it use the pluralization then it is easy to change.--\x3e\n            <h2>",
                I18n.t(title_text, { count: 3 }),
                "</h2>\n        </div>\n    </div>\n</div>\n"
            ),
                1 == isLoading
                    ? a.push(
                          "\n<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <div class=\"list-group clearfix\">\n            <div class=\"user-messaging\">\n                <div class=\"pull-left preloader\"></div>\n                <div class='pull-left messaging single-message'>",
                          I18n.t("envoy_backbone.loading"),
                          "</div>\n            </div>\n        </div>\n    </div>\n</div>\n"
                      )
                    : (a.push(
                          "\n<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2 span6'>\n        <div class=\"panel panel-default\">\n            <div class=\"tab-content\">\n                <div class=\"grid_profile\">\n\n                    <div id='grid_profile_form'>\n                        "
                      ),
                      !tariff_set || editing
                          ? (a.push(
                                '\n                        <form role="form" id="profile_set">\n                            \x3c!--Tariff View Inserted here--\x3e\n                            <div class="tariff_rate form-group"></div>\n\n                            <div class="form-group alpha form-group-submit">\n                                <button type="submit" class="btn btn-primary btn-block submit">',
                                I18n.t("envoy_backbone.profiles.config_batteries"),
                                "</button>\n                            </div>\n                            "
                            ),
                            editing &&
                                a.push(
                                    '\n                            <div class="form-group form-group-cancel">\n                                <button type="button" class="btn btn-default btn-block cancel">',
                                    I18n.t("envoy_backbone.buttons.cancel"),
                                    "</button>\n                            </div>\n                            "
                                ),
                            a.push("\n                        </form>\n                    </div>\n                </div>\n            </div>\n\n\n"))
                          : a.push(
                                "\n    <div id='grid_profile_set'>\n      <div class=\"profile_set\">\n          <div class='pull-right edit btn btn-primary btn-envoy'><span class='glyphicons pencil' title='",
                                I18n.t("envoy_backbone.buttons.edit"),
                                '\'></span></div></div>\n            <div class="tariff_rate"></div>\n      </div>\n'
                            ),
                      a.push("\n        </div>\n    </div>\n</div>\n")),
                a.push("\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["tariff/tariff_main"] = function (b) {
        var a = [];
        with (b || {}) {
            a.push('<div class="tariff-struct-view">\n    ');
            if (!tariff_set || editing)
                a.push("\n        <label for='tariff_select' class='control-label '>", I18n.t("envoy_backbone.tariff.tariff_rate_title"), " "),
                    showHelpIcon && a.push('\n            <a class="help_mark" href="/help/tariff_rate_structure" target="_blank"><span class="glyphicons circle_question_mark "></span></a>\n            '),
                    a.push(" </label>\n    ");
            a.push("\n\n    ");
            country_set ||
                (!editing && tariff_set) ||
                (a.push('\n    <div class="countryContainer">\n        <select class="tariff-country-select">\n        '),
                selected_country || a.push('\n            <option value="">dummy text</option>'),
                a.push("\n            "),
                _.each(countries, function (b) {
                    a.push("\n            <option value= ", b.cc, " ", b.cc == selected_country ? "selected" : "", "> ", b.name, " </option>\n        ");
                }),
                a.push("\n        </select>\n    </div>\n    <br>\n    "));
            a.push("\n   ");
            if (editing || (!tariff_set && selected_country)) {
                a.push(
                    '\n    <div id=\'tariff_rate_form\' class="tariff_rate_form">\n        <div class="alert inline-alert tariff-type-warning hidden">\n            <div class="descriptor">\n                <span class="glyphicons envoy-alrt envoy-alrt-warning warning_sign"></span>\n                <span class="alert-text">\n                    ',
                    I18n.t("envoy_backbone.tariff.tariff_type_warning"),
                    '\n                </span>\n            </div>\n        </div>\n        <div class="group tariff_set">\n            <select id="tariff_select" class="tariff_select required" name="tariff_option">\n                <option value="">',
                    I18n.t("envoy_backbone.forms.select_prompt"),
                    "</option>\n                "
                );
                _.each(tariff_rate_choices, function (b) {
                    a.push('\n                <option value="', b.choiceValue, '" ', b.choiceValue == selected_tariff_type ? "selected" : "", " >", b.translatedName, "</option>\n                ");
                });
                a.push(
                    '\n            </select>\n        </div>\n        <div class="tariff_group">\n            <div class="form_group tariff_rate_type">\n                <div class="list-group-item tariff-list-group-item">\n                    <div class="checkbox">\n                        <a class="seasonal-rate"><span class="glyphicons ',
                    1 == seasonalRateIsChecked ? "check" : "unchecked",
                    '"></span> <span>',
                    I18n.t("envoy_backbone.tariff.seasonal_select_label"),
                    "</span></a>\n                    </div>\n                </div>\n                "
                );
                "tiered" != selected_tariff_type &&
                    a.push(
                        '\n                <div class="list-group-item tariff-list-group-item">\n                    <div class="checkbox">\n                        <a class="weekend-rate"><span class="glyphicons ',
                        1 == weekendRateIsChecked ? "check" : "unchecked",
                        '"></span> <span>',
                        I18n.t("envoy_backbone.tariff.weekend_select_label"),
                        "</span></a>\n                    </div>\n                </div>\n                "
                    );
                a.push("\n            </div>\n            \x3c!--Single Rate Edit Section--\x3e\n            ");
                if ("flat" == selected_tariff_type)
                    a.push('\n                <div class="form-group single_rate_edit">\n                   '),
                        0 == seasonalRateIsChecked
                            ? (a.push("\n                        "),
                              weekendRateIsChecked
                                  ? a.push(
                                        '\n                            <div class="day_title_box">\n                                <label class="">',
                                        I18n.t("envoy_backbone.tariff.weekdays_label"),
                                        "</label>\n                            </div>\n                        "
                                    )
                                  : a.push("\n                            <label class=\"\" for='base_rate'>", I18n.t("envoy_backbone.tariff.base_rate_label"), "</label>\n                        "),
                              a.push(
                                  '\n                        <div class="tariff-rate-input-group rate_highlight_box list-group">\n                            <input type="text" class="form-control tariff-rate-required tariff-not-zero tariff-rate-item tariff-rate-input-item test-base-rate" id="base_rate" name="base_rate" placeholder=\'',
                                  placeholder_text,
                                  "'   value=\"",
                                  weekendRateIsChecked ? seasons.models["0"].attributes.days["0"].periods["0"].rate : model.tariff.single_rate.rate,
                                  '">\n                            <label class="tariff-rate-input-item tariff-rate-input-label">/',
                                  I18n.t("envoy_backbone.tariff.unit_label"),
                                  "</label>\n                        </div>\n                        "
                              ),
                              weekendRateIsChecked &&
                                  a.push(
                                      '\n                            <div class="day_title_box">\n                                <label class="">\n                                    ',
                                      I18n.t("envoy_backbone.tariff.weekend_label"),
                                      '\n                                </label>\n                            </div>\n                            <div class="tariff-rate-input-group rate_highlight_box list-group">\n                                <input type="text" class="form-control tariff-rate-required tariff-rate-item tariff-rate-input-item" id="weekend_rate" name="weekend_rate" placeholder=\'',
                                      placeholder_text,
                                      "' value=\"",
                                      seasons.models["0"].attributes.days["1"].periods["0"].rate,
                                      '">\n                                <label class="tariff-rate-input-item tariff-rate-input-label">/',
                                      I18n.t("envoy_backbone.tariff.unit_label"),
                                      "</label>\n                            </div>\n                        "
                                  ),
                              a.push("\n                        "))
                            : (a.push(
                                  '\n                    \x3c!--Single Rate Season Entry--\x3e\n\n                    <div class="peak-edit-group peak-edit seasonal-peak-edit-group">\n                        <div class="tariff-list-group-item seasonal-peak-group-item">\n                            '
                              ),
                              seasons.each(function (b, c) {
                                  a.push("\n                                ");
                                  var d = b.get("start").split("/")[0];
                                  a.push("\n                                ");
                                  var e = b.get("end");
                                  a.push("\n                                ");
                                  a.push(
                                      '\n                                <div class="tariff-season-select-group">\n                                    <div class="tariff-rate-item tariff-rate-select-group-header" for=',
                                      season_names[c] + "_rate_start",
                                      ">\n                                        ",
                                      I18n.t("envoy_backbone.tariff." + season_names[c] + "_rate_label"),
                                      "\n                                    </div>\n                                    "
                                  );
                                  0 == c
                                      ? (a.push(
                                            '\n                                    <div class="tariff-rate-select-group">\n                                        <div class="tariff-rate-select-item ',
                                            season_names[c] + "-rate-start",
                                            '">\n                                            <select id=',
                                            season_names[c] + "_rate_start",
                                            " name=",
                                            season_names[c] + "_rate_start",
                                            ' class="month-select required">\n                                                <option value="">',
                                            I18n.t("envoy_backbone.forms.select_prompt"),
                                            "</option>\n                                                "
                                        ),
                                        _.each(month_names, function (b, c) {
                                            a.push("\n                                                ");
                                            null != b && a.push('\n                                                <option value="', c, '" ', c == d ? "selected" : "", " >", b, "</option>\n                                                ");
                                            a.push("\n                                                ");
                                        }),
                                        a.push(
                                            '\n                                            </select>\n                                        </div>\n                                        <label class="tariff-rate-item tariff-rate-input-label"> ',
                                            I18n.t("envoy_backbone.tariff.month_connector"),
                                            ' </label>\n                                        <div class="tariff-rate-select-item ',
                                            season_names[c] + "-rate-end",
                                            '">\n                                            <select id=',
                                            season_names[c] + "_rate_end",
                                            " name=",
                                            season_names[c] + "_rate_end",
                                            ' class="month-select required">\n                                                <option value="">',
                                            I18n.t("envoy_backbone.forms.select_prompt"),
                                            "</option>\n                                                "
                                        ),
                                        _.each(month_names, function (b, c) {
                                            a.push("\n                                                ");
                                            null != b && a.push('\n                                                <option value="', c, '" ', c == e ? "selected" : "", " >", b, "</option>\n                                                ");
                                            a.push("\n                                                ");
                                        }),
                                        a.push("\n                                            </select>\n                                        </div>\n                                    </div>\n                                    "))
                                      : a.push('\n                                        <p id="winter_month_desc">', I18n.t("envoy_backbone.tariff.winter_months_desc"), "</p>\n                                    ");
                                  a.push("\n\n                                </div>\n\n\n                                ");
                                  _.each(b.get("days"), function (b) {
                                      a.push("\n                                    ");
                                      _.each(b.periods, function (d) {
                                          a.push("\n\n                                    \x3c!-- Weekend Rate--\x3e\n                                    ");
                                          weekendRateIsChecked
                                              ? a.push(
                                                    '\n                                    <div class="day_title_box">\n                                        <label class="">',
                                                    I18n.t("envoy_backbone.tariff." + b.id + "_label"),
                                                    '</label>\n                                    </div>\n                                    <div class="tariff-rate-input-group rate_highlight_box">\n                                        <input type="text"\n                                               class="form-control tariff-rate-required peak-rate tariff-rate-item tariff-rate-input-item"\n                                               id=',
                                                    b.id + "_rate_" + season_names[c],
                                                    " name=",
                                                    b.id + "_rate_" + season_names[c],
                                                    " placeholder='",
                                                    placeholder_text,
                                                    "' value=",
                                                    d.rate ? d.rate : "",
                                                    '>\n                                        <label class="tariff-rate-item tariff-rate-input-label">/',
                                                    I18n.t("envoy_backbone.tariff.unit_label"),
                                                    "</label>\n                                    </div>\n\n                                    "
                                                )
                                              : a.push(
                                                    '\n\n                                        <div class="tariff-rate-input-group tariff-rate-input-divider rate_highlight_box">\n                                            <input type="text"\n                                                   class="form-control tariff-rate-required peak-rate tariff-rate-item tariff-rate-input-item"\n                                                   id=',
                                                    season_names[c] + "_rate",
                                                    " name=",
                                                    season_names[c] + "_rate",
                                                    " placeholder='",
                                                    placeholder_text,
                                                    "' value=",
                                                    d.rate ? d.rate : "",
                                                    '>\n                                            <label class="tariff-rate-item tariff-rate-input-label">/',
                                                    I18n.t("envoy_backbone.tariff.unit_label"),
                                                    "</label>\n                                        </div>\n                                    "
                                                );
                                          a.push("\n                                ");
                                      });
                                      a.push("\n                                ");
                                  });
                                  a.push("\n                            ");
                              }),
                              a.push(
                                  "\n\n                        </div> \x3c!-- end seasonal-peak-group-item--\x3e\n                    </div> \x3c!-- end seasonal-peak-edit-group--\x3e\n                </div>   \x3c!--end single-rate edit--\x3e\n\n            "
                              )),
                        a.push("\n            ");
                else if ("tou" == selected_tariff_type) {
                    a.push("\n\n                \x3c!--TOU Edit Section--\x3e\n                ");
                    var c = 0;
                    a.push("\n                ");
                    var d = seasons.length;
                    a.push("\n                ");
                    seasons.each(function (b, e) {
                        a.push("\n                ");
                        if (1 < d) {
                            a.push("\n                ");
                            var g = season_names[e];
                            a.push(
                                '\n\n\n                <div class="tariff-season-select-group">\n                    <div class="tariff-rate-item tariff-rate-select-group-header">',
                                I18n.t("season_1" == b.id ? "envoy_backbone.tariff.summer_rate_label" : "envoy_backbone.tariff.winter_rate_label"),
                                "</div>\n\n                    "
                            );
                            if (0 == e) {
                                a.push(
                                    '\n                    <div class="tariff-rate-select-group">\n                        <div class="tariff-rate-select-item ',
                                    season_names[e] + "-rate-start",
                                    '">\n                            <select id=',
                                    season_names[e] + "_rate_start",
                                    " name=",
                                    season_names[e] + "_rate_start",
                                    '\n                                    class="month-select season-month-select required">\n                                <option value="">',
                                    I18n.t("envoy_backbone.forms.select_prompt"),
                                    "</option>\n                                "
                                );
                                var l = I18n.t("date.month_names");
                                a.push("\n                                ");
                                _.each(l, function (b, c) {
                                    a.push("\n                                ");
                                    null != b && a.push('\n                                <option value="', c, '" ', c == selectedSeasonMonths[g].start ? "selected" : "", " >", b, "</option>\n                                ");
                                    a.push("\n                                ");
                                });
                                a.push(
                                    '\n                            </select>\n                        </div>\n                        <label class="tariff-rate-item tariff-rate-input-label">',
                                    I18n.t("envoy_backbone.tariff.month_connector"),
                                    '</label>\n                        <div class="tariff-rate-select-item ',
                                    season_names[e] + "-rate-end",
                                    '">\n                            <select id=',
                                    season_names[e] + "_rate_end",
                                    " name=",
                                    season_names[e] + "_rate_end",
                                    '\n                                    class="month-select season-month-select required">\n                                <option value="">',
                                    I18n.t("envoy_backbone.forms.select_prompt"),
                                    "</option>\n                                "
                                );
                                l = I18n.t("date.month_names");
                                a.push("\n                                ");
                                _.each(l, function (b, c) {
                                    a.push("\n                                ");
                                    null != b && a.push('\n                                <option value="', c, '" ', c == selectedSeasonMonths[g].end ? "selected" : "", " >", b, "</option>\n                                ");
                                    a.push("\n                                ");
                                });
                                a.push("\n                            </select>\n                        </div>\n                    </div>\n                    ");
                            } else a.push('\n\n                    <p id="winter_month_desc">', I18n.t("envoy_backbone.tariff.winter_months_desc"), "</p>\n\n                    ");
                            a.push("\n                </div>\n\n            ");
                        }
                        a.push('\n\n\n            <div class="tou_edit">\n                ');
                        var n = {};
                        a.push("\n                ");
                        _.each(b.get("days"), function (d, e) {
                            a.push("\n                \x3c!-- First pull out the off-peak rate (period_0) --\x3e\n                ");
                            n = _.findWhere(d.periods, { id: "period_0" }) || { id: "period_0", rate: 0, start: 0 };
                            a.push("\n                \x3c!-- filter out the off-peak period to use later to interate over the rest of the periods --\x3e\n                ");
                            var g = _.filter(d.periods, function (a) {
                                return "period_0" != a.id;
                            });
                            a.push("\n\n                ");
                            weekendRateIsChecked &&
                                a.push(
                                    '\n                <div class="day_title_box">\n                    <label class="" for="rate-',
                                    n.id + "-" + d.id + "-" + b.id,
                                    '" >\n                        ',
                                    I18n.t("weekdays" == d.id ? "envoy_backbone.tariff.weekdays_label" : "envoy_backbone.tariff.weekend_label"),
                                    "</label>\n                </div>\n                "
                                );
                            a.push(
                                '\n                <div class="rate_highlight_box peak-edit-off_peak peak-edit-',
                                e,
                                '">\n                    <label class="tariff-list-label">\n                        ',
                                I18n.t("envoy_backbone.tariff.off_peak_label"),
                                '\n                    </label>\n                    <div class="tariff-rate-input-group">\n                        <input type="text" class="form-control tariff-rate-required tariff-rate-item tariff-rate-input-item"\n                               id="peak_rate-',
                                n.id + "-" + d.id + "-" + b.id,
                                '"\n                               name="peak_rate-',
                                n.id + "-" + d.id + "-" + b.id,
                                "\" placeholder='",
                                placeholder_text,
                                "'\n                               value=",
                                n.rate || 0 == n.rate ? n.rate : "",
                                '>\n                        <label class="tariff-rate-input-item tariff-rate-input-label">/',
                                I18n.t("envoy_backbone.tariff.unit_label"),
                                "</label>\n                    </div> \x3c!-- end tariff-rate-input-group --\x3e\n                </div>\n                    "
                            );
                            1 > g.length &&
                                a.push(
                                    '\n                    <div class="list-item add_link_box clearfix">\n                        <a class="add_peak pull-right" id="add_peak-',
                                    n.id + "-" + d.id + "-" + b.id,
                                    '" href="javascript:;"><span class="glyphicons circle_plus"></span>&nbsp;',
                                    I18n.t("envoy_backbone.tariff.weekend_add_peak", { num: 1 }),
                                    "</a>\n\n                    </div> \x3c!-- end add_link_box --\x3e\n                    "
                                );
                            a.push("\n\n                ");
                            c = 0;
                            a.push("\n                ");
                            var h = "",
                                k = !1;
                            a.push("\n                ");
                            var l = _.findWhere(chargeAtNightSettings.seasons, { id: b.id });
                            a.push("\n                ");
                            l && _.findWhere(l.days, { id: d.id }) && (a.push("\n                "), (k = _.findWhere(l.days, { id: d.id }).must_charge), a.push("\n                "));
                            a.push("\n                ");
                            _.each(g, function (e, g, k) {
                                a.push("\n                ");
                                h = e.id + "-" + d.id + "-" + b.id;
                                a.push(
                                    '\n\n                    <div class="peak-edit-group peak-edit-',
                                    g,
                                    ' ">\n                        <div class=" tariff-list-group-item">\n                            <fieldset class="rate_highlight_box">\n                                <label class="tariff-list-label" for=\'peak_rate\'>\n                                    ',
                                    I18n.t("envoy_backbone.tariff.peak_label", { num: g + 1 }),
                                    "\n                                    \x3c!-- Don't put a remove button on the first peak item --\x3e\n                                    "
                                );
                                ("weekend" == d.id || 0 < g) &&
                                    a.push(
                                        '\n                                    <a class="pull-right remove_peak" rel="micro-detail-link" id="remove_peak-',
                                        h,
                                        '"\n                                       href="#acb/status/profile"><span class="glyphicons circle_remove"></span></a>\n                                    '
                                    );
                                a.push(
                                    '\n                                </label>\n                                <div class="tariff-rate-select-group tariff-rate-select-time tariff-select-group-',
                                    g,
                                    '">\n                                    <div class="tariff-rate-select-item start_time-',
                                    h,
                                    '">\n                                        <select id="start_time-',
                                    h,
                                    '" name="start_time-',
                                    h,
                                    '" class="period-timepicker required">\n                                            <option value="">',
                                    I18n.t("envoy_backbone.forms.select_prompt"),
                                    "</option>\n                                            "
                                );
                                var l = new Date();
                                a.push("\n                                            ");
                                for (i = 0; 24 > i; i++)
                                    a.push('\n                                                <option value="', i, '"  >', I18n.l("time.formats.time_only", l.setHours(i, 0, 0)), "</option>\n                                            ");
                                a.push(
                                    '\n                                        </select>\n                                    </div>\n\n                                <label class="tariff-rate-item tariff-rate-input-label">-</label> \x3c!-- This \'dash\' is the connector for the two time selectors --\x3e\n                                <div class="tariff-rate-select-item end_time-',
                                    h,
                                    '">\n                                    <select id="end_time-',
                                    h,
                                    '" name="end_time-',
                                    h,
                                    '" class="period-timepicker required" autocomplete="off">\n                                        <option value="">',
                                    I18n.t("envoy_backbone.forms.select_prompt"),
                                    "</option>\n                                        "
                                );
                                for (i = 1; 24 >= i; i++)
                                    a.push('\n                                        <option value="', i, '"  >', I18n.l("time.formats.time_only", l.setHours(i - 1, 59, 0)), "</option>\n                                        ");
                                a.push(
                                    '\n                                    </select>\n                                </div>\n                            </div>\n                            \x3c!--<label class="control-label tariff-list-label">\n                                        '
                                );
                                weekendRateIsChecked
                                    ? a.push("\n                                            ", I18n.t("envoy_backbone.tariff.weekday_peak_rate_label", { num: g + 1 }), "\n                                        ")
                                    : a.push("\n                                            ", I18n.t("envoy_backbone.tariff.peak_label", { num: g + 1 }), "\n                                        ");
                                a.push(
                                    '\n                                    </label>--\x3e\n                            <div class="tariff-rate-input-group">\n                                <input type="text"\n                                       class="form-control tariff-rate-required peak-rate tariff-rate-item tariff-rate-input-item"\n                                       id="peak_rate-',
                                    h,
                                    '" name="peak_rate-',
                                    h,
                                    "\" placeholder='",
                                    placeholder_text,
                                    "'\n                                       value=",
                                    e.rate || 0 == e.rate ? e.rate : "",
                                    '>\n                                <label class="tariff-rate-item tariff-rate-input-label">/',
                                    I18n.t("envoy_backbone.tariff.unit_label"),
                                    "</label>\n                            </div>\n                        </fieldset>\n                        "
                                );
                                c = g + 1;
                                a.push("\n                        ");
                                c == k.length &&
                                    (a.push('\n                        <div class="list-item add_link_box clearfix">\n                            '),
                                    weekendRateIsChecked
                                        ? a.push(
                                              '\n                                <a class="pull-right add_peak" id="add_peak-',
                                              h,
                                              '" href="javascript:;"><span class="glyphicons circle_plus"></span>&nbsp;',
                                              I18n.t("envoy_backbone.tariff." + ("weekend" == d.id ? "weekend_add_peak" : "weekday_add_peak"), { num: g + 2 }),
                                              "</a>\n                            "
                                          )
                                        : a.push(
                                              '\n                                <a class="pull-right add_peak" id="add_peak-',
                                              h,
                                              '" href="javascript:;"><span class="glyphicons circle_plus"></span>&nbsp;',
                                              I18n.t("envoy_backbone.tariff.add_peak", { num: g + 2 }),
                                              "</a>\n                            "
                                          ),
                                    a.push("\n                        </div>\n                        "));
                                a.push("\n                    </div>\n                </div>\n                ");
                            });
                            a.push(
                                '\n\n                <div class="list-group rate_highlight_box">\n                    <div class="list-group-item tariff-list-group-item">\n                        <div class="checkbox">\n                            <a class="chg-at-night" id="chg_at_night-',
                                d.id + "-" + b.id,
                                '">\n                                <span  class="glyphicons ',
                                1 == k ? "check" : "unchecked",
                                '"></span>\n                                <label>',
                                I18n.t("envoy_backbone.tariff.charge_at_night"),
                                '</label>\n                            </a>\n                        </div>\n                    </div>\n\n                    <div class="tariff-rate-select-group tariff-rate-select-time tariff-select-group-',
                                e,
                                ' hidden" id="nightcharge_group-',
                                d.id + "-" + b.id,
                                '">\n                        <div class="tariff-rate-select-item start-time-',
                                h,
                                '">\n                            <select id="nightcharge_start_time-',
                                d.id + "-" + b.id,
                                '" name="nightcharge_start_time-',
                                d.id + "-" + b.id,
                                '" class="charge_at_night">\n                                    '
                            );
                            g = new Date();
                            a.push("\n                                    ");
                            for (i = 0; 6 >= i; i++) a.push('\n                                        <option value="', i, '"  >', I18n.l("time.formats.time_only", g.setHours(i, 0, 0)), "</option>\n                                    ");
                            a.push(
                                '\n                            </select>\n                        </div>\n                        <label class="tariff-rate-item tariff-rate-input-label">-</label> \x3c!-- This \'dash\' is the connector for the two time selectors --\x3e\n                        <div class="tariff-rate-select-item end-time-',
                                h,
                                '">\n                            <select id="nightcharge_end_time-',
                                d.id + "-" + b.id,
                                '" name="nightcharge_end_time-',
                                d.id + "-" + b.id,
                                '" class="charge_at_night">\n                                '
                            );
                            for (i = 0; 6 >= i; i++) a.push('\n                                    <option value="', i, '"  >', I18n.l("time.formats.time_only", g.setHours(i, 0, 0)), "</option>\n                                ");
                            a.push("\n                            </select>\n                        </div>\n                    </div>\n\n                </div>\n                ");
                        });
                        a.push("\n                ");
                    });
                    a.push("\n            </div>\n        \x3c!-- Tiered Edit --\x3e\n        ");
                } else
                    "tiered" == selected_tariff_type &&
                        (a.push('\n        <div class="form-group tiered-rate-edit">\n            '),
                        (c = 0),
                        a.push("\n            "),
                        (d = seasons.length),
                        a.push("\n            "),
                        seasons.each(function (b, c) {
                            a.push("\n            ");
                            if (1 < d) {
                                a.push("\n            ");
                                var e = season_names[c];
                                a.push(
                                    '\n            <div class="tariff-season-select-group">\n                <div class="tariff-rate-item tariff-rate-select-group-header">',
                                    I18n.t("season_1" == b.id ? "envoy_backbone.tariff.summer_rate_label" : "envoy_backbone.tariff.winter_rate_label"),
                                    "</div> \x3c!--end tariff-rate-item --\x3e\n            "
                                );
                                if (0 == c) {
                                    a.push(
                                        '\n                <div class="tariff-rate-select-group">\n\n                    <div class="tariff-rate-select-item ',
                                        season_names[c] + "-rate-start",
                                        '">\n                        <select id=',
                                        season_names[c] + "_rate_start",
                                        " name=",
                                        season_names[c] + "_rate_start",
                                        '\n                                class="month-select season-month-select tiered_month_select required">\n                            <option value="">',
                                        I18n.t("envoy_backbone.forms.select_prompt"),
                                        "</option>\n                            "
                                    );
                                    var g = I18n.t("date.month_names");
                                    a.push("\n                            ");
                                    _.each(g, function (b, c) {
                                        a.push("\n                            ");
                                        null != b && a.push('\n                            <option value="', c, '" ', c == selectedSeasonMonths[e].start ? "selected" : "", " >", b, "</option>\n                            ");
                                        a.push("\n                            ");
                                    });
                                    a.push(
                                        '\n                        </select>\n                    </div> \x3c!--end tariff-rate-select-item --\x3e\n                    <label class="tariff-rate-item tariff-rate-input-label">',
                                        I18n.t("envoy_backbone.tariff.month_connector"),
                                        '</label>\n                    <div class="tariff-rate-select-item ',
                                        season_names[c] + "-rate-end",
                                        '">\n                        <select id=',
                                        season_names[c] + "_rate_end",
                                        " name=",
                                        season_names[c] + "_rate_end",
                                        '\n                                class="month-select season-month-select tiered_month_select required">\n                            <option value="">',
                                        I18n.t("envoy_backbone.forms.select_prompt"),
                                        "</option>\n                            "
                                    );
                                    g = I18n.t("date.month_names");
                                    a.push("\n                            ");
                                    _.each(g, function (b, c) {
                                        a.push("\n                            ");
                                        null != b && a.push('\n                            <option value="', c, '" ', c == selectedSeasonMonths[e].end ? "selected" : "", " >", b, "</option>\n                            ");
                                        a.push("\n                            ");
                                    });
                                    a.push("\n                        </select>\n                    </div> \x3c!--end tariff-rate-select-item --\x3e\n                </div> \x3c!--end tariff-rate-select-group --\x3e\n            ");
                                } else a.push('\n            <p id="winter_month_desc" class="tariff-rate-select-item">', winter_text, "</p>\n            ");
                                a.push("\n            </div>\n         ");
                            }
                            a.push("\n\n            ");
                            _.each(b.get("tiers"), function (c, d, e) {
                                a.push("\n\n            ");
                                1 > d
                                    ? a.push(
                                          '\n            <div class="rate_highlight_box">\n                <label class="tariff-list-label">',
                                          I18n.t("envoy_backbone.tariff.baseline"),
                                          "\n                    (",
                                          I18n.t("envoy_backbone.tariff.tier", { num: d + 1 }),
                                          ')</label>\n                <div class="tariff-rate-tier-group">\n                   <label class="tariff-rate-tier-label">',
                                          I18n.t("envoy_backbone.tariff.up_to"),
                                          ' </label>\n                    <input type="text" id="tier_limit-',
                                          c.id + "-" + b.id,
                                          '" name="tier_limit-',
                                          c.id + "-" + b.id,
                                          '" class="form-control tariff-limit-required tariff-rate-item tariff-rate-input-item" value=',
                                          c.limit || 0 === c.limit ? c.limit / 1e3 : null,
                                          '>\n                    <label class="tariff-rate-tier-label">&nbsp',
                                          I18n.t("envoy_backbone.tariff.unit_label"),
                                          "&nbsp",
                                          I18n.t("envoy_backbone.tariff.per_day"),
                                          '</label>\n                </div>\n\n\n                <div class="tariff-rate-input-group">\n                    <input type="text" class="form-control tariff-rate-required tariff-rate-item tariff-rate-input-item"\n                           id="tier_rate-',
                                          c.id + "-" + b.id,
                                          '" name="tier_rate-',
                                          c.id + "-" + b.id,
                                          "\" placeholder='",
                                          placeholder_text,
                                          "' value=",
                                          c.rate,
                                          '>\n                    <label class="tariff-rate-input-item tariff-rate-input-label">/',
                                          I18n.t("envoy_backbone.tariff.unit_label"),
                                          "</label>\n                </div>\n            </div>\n            "
                                      )
                                    : (a.push(
                                          '\n               <div class="rate_highlight_box">\n                   <label class="tariff-rate-label">',
                                          I18n.t("envoy_backbone.tariff.tier", { num: d + 1 }),
                                          "</label>\n            \x3c!-- Don't put a remove button on the first two tiers --\x3e\n            "
                                      ),
                                      1 < d &&
                                          a.push(
                                              '\n            <a class="pull-right remove_tier" rel="micro-detail-link" id="remove_tier-',
                                              c.id + "-" + b.id,
                                              '" href="javascript:;"><span class="glyphicons circle_remove"></span></a>\n            '
                                          ),
                                      a.push(
                                          '\n                <div class="tariff-rate-tier-group">\n                    <label class="tariff-rate-tier-label">',
                                          I18n.t("envoy_backbone.tariff.greater_than"),
                                          '&nbsp</label>\n\n                    <input type="text" data-m-Dec="0" data-a-sep="" id="tier_percent-',
                                          c.id + "-" + b.id,
                                          '" name="tier_percent-',
                                          c.id + "-" + b.id,
                                          '" class="tier_percent-',
                                          "tier_2" != c.id ? "additional" : c.id,
                                          ' required form-control tariff-percent-required tariff-rate-item tariff-rate-input-item" value=',
                                          c.percent,
                                          '>\n                    <label class="tariff-rate-tier-label"> ',
                                          I18n.t("envoy_backbone.tariff.percent_of_baseline"),
                                          '</label>\n                </div> \x3c!--end tariff-rate-input-group--\x3e\n\n                <div class="tariff-rate-input-group">\n                    <input type="text" class="form-control tariff-rate-required tariff-rate-item tariff-rate-input-item"\n                           id="tier_rate-',
                                          c.id + "-" + b.id,
                                          '" name="tier_rate-',
                                          c.id + "-" + b.id,
                                          "\" placeholder='",
                                          placeholder_text,
                                          "' value=",
                                          c.rate,
                                          '>\n                    <label class="tariff-rate-input-item tariff-rate-input-label">/',
                                          I18n.t("envoy_backbone.tariff.unit_label"),
                                          "</label>\n                </div> \x3c!--end tariff-rate-input-group  --\x3e</div>\n            "
                                      ));
                                a.push("\n            ");
                                e.length == d + 1 &&
                                    a.push(
                                        '\n                <div class="list-item add_link_box clearfix">\n                    <a class="pull-right add_tier" id="add_tier-',
                                        c.id + "-" + b.id,
                                        '" href="javascript:;"><span class="glyphicons circle_plus"></span>&nbsp;',
                                        I18n.t("envoy_backbone.tariff.add_tier", { num: d + 2 }),
                                        "</a>\n                 </div>\x3c!--end list-item --\x3e\n            "
                                    );
                                a.push("\n            ");
                            });
                            a.push("\n            ");
                        }),
                        a.push("\n        </div> \x3c!-- form-group tiered-rate-edit --\x3e\n\n        "));
                a.push("\n    </div>\n    </div>\n    ");
            } else if (tariff_set) {
                a.push("\n    \x3c!-- Configured View --\x3e\n    ");
                var e = I18n.t("date.month_names");
                a.push('\n        <div class="tariff_configured">\n            <dl>\n                <dt>', I18n.t("envoy_backbone.tariff.tariff_rate_title"), "</dt>\n                ");
                void 0 != selected_tariff_type && a.push("\n                <dd>", Tools.getTariffTranslatedString(selected_tariff_type), "</dd>\n                ");
                a.push(
                    '\n            </dl>\n            <div>\n               <a class="show_config_details accordion-toggle',
                    configDetailsExpanded ? "" : " collapsed",
                    '"\n                    data-toggle="collapse" href="#config_details">\n                    <span class="glyphicons expand"></span> ',
                    I18n.t("envoy_backbone.tariff.config_details"),
                    '\n                </a>\n            </div>\n            <div id="config_details" class="config_details_panel panel-collapse collapse',
                    configDetailsExpanded ? " in" : "",
                    '">\n                <div class="list-group-item micro_detail_table">\n                    <table class="micro_detail">\n                        <tbody>\n                        '
                );
                if ("flat" == selected_tariff_type)
                    a.push("\n                            "),
                        seasonalRateIsChecked
                            ? (a.push(
                                  '\n                            <tr class="season-row">\n                                <th class="section-header season-header">',
                                  I18n.t("envoy_backbone.tariff.summer_rate_label"),
                                  "</th>\n                                <td>",
                                  e[void 0 != seasons ? seasons.get("season_1").get("start").split("/")[0] : ""],
                                  " ",
                                  I18n.t("envoy_backbone.tariff.month_connector"),
                                  " ",
                                  e[void 0 != seasons ? seasons.get("season_1").get("end") : ""],
                                  "</td>\n                            </tr>\n\n\n                            "
                              ),
                              weekendRateIsChecked
                                  ? a.push(
                                        "\n                            <tr>\n                                <th>",
                                        I18n.t("envoy_backbone.tariff.weekdays_rate_label"),
                                        '</th>\n                                <td><span class="tariff-configured-rate">',
                                        seasons.models["0"].attributes.days["0"].periods["0"].rate,
                                        "</span>\n                                    /",
                                        I18n.t("envoy_backbone.tariff.unit_label"),
                                        "</td>\n                            </tr>\n                            <tr>\n                                <th>",
                                        I18n.t("envoy_backbone.tariff.weekend_label"),
                                        '</th>\n                                <td><span class="tariff-configured-rate">',
                                        seasons.models["0"].attributes.days["1"].periods["0"].rate,
                                        "</span>\n                                    /",
                                        I18n.t("envoy_backbone.tariff.unit_label"),
                                        "</td>\n                            </tr>\n                            "
                                    )
                                  : (a.push("\n                            <tr>\n                                <th>", I18n.t("envoy_backbone.tariff.base_rate_label"), "</th>\n                                "),
                                    (b = seasons.get("season_1").get("days")[0].periods[0]),
                                    a.push(
                                        '\n                                <td><span class="tariff-configured-rate">',
                                        b.rate || 0 == b.rate ? b.rate : "",
                                        "</span>\n                                    /",
                                        I18n.t("envoy_backbone.tariff.unit_label"),
                                        "</td>\n\n                            </tr>\n                            "
                                    )),
                              a.push("\n                            "),
                              (e = I18n.t("date.month_names")),
                              a.push(
                                  '\n                            <tr class="season-row">\n                                <th class="section-header season-header">',
                                  I18n.t("envoy_backbone.tariff.winter_rate_label"),
                                  "</th>\n                                <td>",
                                  e[void 0 != seasons ? seasons.get("season_2").get("start").split("/")[0] : ""],
                                  "                                 ",
                                  I18n.t("envoy_backbone.tariff.month_connector"),
                                  " ",
                                  e[void 0 != seasons ? seasons.get("season_2").get("end") : ""],
                                  "</td>\n                            </tr>\n\n\n                            "
                              ),
                              weekendRateIsChecked
                                  ? a.push(
                                        "\n                            <tr>\n                                <th>",
                                        I18n.t("envoy_backbone.tariff.weekdays_rate_label"),
                                        '</th>\n                                <td><span class="tariff-configured-rate">',
                                        seasons.models["1"].attributes.days["0"].periods["0"].rate,
                                        "</span>\n                                    /",
                                        I18n.t("envoy_backbone.tariff.unit_label"),
                                        "</td>\n                            </tr>\n                            <tr>\n                                <th>",
                                        I18n.t("envoy_backbone.tariff.weekend_label"),
                                        '</th>\n                                <td><span class="tariff-configured-rate">',
                                        seasons.models["1"].attributes.days["1"].periods["0"].rate,
                                        "</span>\n                                    /",
                                        I18n.t("envoy_backbone.tariff.unit_label"),
                                        "</td>\n                            </tr>\n                            "
                                    )
                                  : (a.push("\n                            <tr>\n                                <th>", I18n.t("envoy_backbone.tariff.base_rate_label"), "</th>\n                                "),
                                    (b = seasons.get("season_2").get("days")[0].periods[0]),
                                    a.push(
                                        '\n                                <td><span class="tariff-configured-rate">',
                                        b.rate || 0 == b.rate ? b.rate : "",
                                        "</span>\n                                    /",
                                        I18n.t("envoy_backbone.tariff.unit_label"),
                                        "</td>\n\n                            </tr>\n                            "
                                    )),
                              a.push("\n                            "))
                            : weekendRateIsChecked
                            ? a.push(
                                  "\n                            <tr>\n                                <th>",
                                  I18n.t("envoy_backbone.tariff.weekdays_rate_label"),
                                  '</th>\n                                <td ><span class="tariff-configured-rate">',
                                  seasons.models["0"].attributes.days["0"].periods["0"].rate,
                                  "</span>\n                                    /",
                                  I18n.t("envoy_backbone.tariff.unit_label"),
                                  "</td>\n                            </tr>\n                            <tr>\n                                <th>",
                                  I18n.t("envoy_backbone.tariff.weekend_label"),
                                  '</th>\n                                <td><span class="tariff-configured-rate">',
                                  seasons.models["0"].attributes.days["1"].periods["0"].rate,
                                  "</span>\n                                    /",
                                  I18n.t("envoy_backbone.tariff.unit_label"),
                                  "</td>\n                            </tr>\n                            "
                              )
                            : a.push(
                                  "\n                            <tr>\n                                <th>",
                                  I18n.t("envoy_backbone.tariff.base_rate_label"),
                                  '</th>\n                                <td><span class="tariff-configured-rate">',
                                  model.tariff.single_rate.rate,
                                  "</span>\n                                    /",
                                  I18n.t("envoy_backbone.tariff.unit_label"),
                                  "</td>\n                            </tr>\n                            "
                              ),
                        a.push("\n\n\n\n                            ");
                else if ("tou" == selected_tariff_type) {
                    a.push("\n\n                            ");
                    var g = new Date();
                    a.push("\n                            ");
                    seasons.each(function (b) {
                        a.push("\n                            ");
                        seasonalRateIsChecked &&
                            a.push(
                                '\n                            <tr class="season-row">\n                                <th class="section-header season-header">',
                                I18n.t("season_1" == b.id ? "envoy_backbone.tariff.summer_rate_label" : "envoy_backbone.tariff.winter_rate_label"),
                                "</th>\n                                <td>",
                                e[void 0 != seasons ? seasons.get(b.id).get("start").split("/")[0] : ""],
                                " ",
                                I18n.t("envoy_backbone.tariff.month_connector"),
                                " ",
                                e[void 0 != seasons ? seasons.get(b.id).get("end") : ""],
                                "</td>\n\n                            </tr>\n\n                            "
                            );
                        a.push("\n                            ");
                        _.each(b.get("days"), function (b, c, d) {
                            a.push("\n\n                            \x3c!-- First pull out the off-peak rate (period_0) --\x3e\n                            ");
                            base_period = _.findWhere(b.periods, { id: "period_0" }) || { id: "period_0", rate: 0, start: 0 };
                            a.push("\n                            \x3c!-- filter out the off-peak period and later interate over the rest of the periods --\x3e\n                            ");
                            var e = _.filter(b.periods, function (a) {
                                return "period_0" != a.id;
                            });
                            a.push("\n                            ");
                            1 < d.length &&
                                a.push(
                                    '\n                            <tr>\n                                <th colspan="2"><strong>',
                                    I18n.t("envoy_backbone.tariff.day_names")[c],
                                    "</strong></th>\n                            </tr>\n                            "
                                );
                            a.push(
                                "\n                            <tr>\n                                <th>",
                                I18n.t("envoy_backbone.tariff.off_peak_label"),
                                '</th>\n                                <td>\n                                    <span class="tariff-configured-rate">',
                                base_period.rate || 0 == base_period.rate ? base_period.rate : "",
                                "</span>\n                                    /",
                                I18n.t("envoy_backbone.tariff.unit_label"),
                                "\n                                </td>\n\n                            </tr>\n                            "
                            );
                            _.each(e, function (b, c) {
                                a.push(
                                    "\n                            <tr>\n                                <th>",
                                    I18n.t("envoy_backbone.tariff.peak_hours_label", { num: c + 1 }),
                                    "</th>\n                                <td>\n                                    "
                                );
                                g.setHours(b.start / 60, 0, 0);
                                a.push("\n                                    ", I18n.l("time.formats.time_only", g), " -\n                                    ");
                                g.setHours(b.end / 60 - 1, 59, 0);
                                a.push(
                                    "\n                                    ",
                                    I18n.l("time.formats.time_only", g),
                                    "</td>\n                            </tr>\n                            <tr>\n                               <th>",
                                    I18n.t("envoy_backbone.tariff.peak_rate_label", { num: c + 1 }),
                                    '</th>\n                                <td><span class="tariff-configured-rate">',
                                    b.rate || 0 == b.rate ? b.rate : "",
                                    "</span>\n                                    /",
                                    I18n.t("envoy_backbone.tariff.unit_label"),
                                    "</td>\n                            </tr>\n                            "
                                );
                            });
                            a.push("\n                        ");
                            a.push("\n                        ");
                            b.must_charge_duration &&
                                (a.push("\n                            <tr>\n                                <th>", I18n.t("envoy_backbone.tariff.charge_at_night"), "</th>\n\n                                "),
                                g.setHours(b.must_charge_start / 60, 0, 0),
                                a.push("\n                                <td>\n                                    ", I18n.l("time.formats.time_only", g), " -\n                                    "),
                                g.setHours((b.must_charge_start + b.must_charge_duration) / 60, 0, 0),
                                a.push("\n                                    ", I18n.l("time.formats.time_only", g), "\n                                </td>\n                            </tr>\n                        "));
                            a.push("\n                            ");
                        });
                        a.push("\n                            ");
                    });
                    a.push("\n                        ");
                } else
                    "tiered" == selected_tariff_type &&
                        (a.push("\n                            "),
                        seasons.each(function (b) {
                            a.push("\n                                ");
                            seasonalRateIsChecked &&
                                a.push(
                                    '\n                                    <tr class="season-row">\n                                        <th class="section-header season-header">',
                                    I18n.t("season_1" == b.id ? "envoy_backbone.tariff.summer_rate_label" : "envoy_backbone.tariff.winter_rate_label"),
                                    "</th>\n                                        <td>",
                                    e[void 0 != seasons ? seasons.get(b.id).get("start").split("/")[0] : ""],
                                    " ",
                                    I18n.t("envoy_backbone.tariff.month_connector"),
                                    " ",
                                    e[void 0 != seasons ? seasons.get(b.id).get("end") : ""],
                                    "</td>\n\n                                    </tr>\n                                "
                                );
                            a.push("\n                                ");
                            _.each(b.get("tiers"), function (b, c) {
                                a.push("\n\n                                        ");
                                1 > c
                                    ? a.push(
                                          '\n                                        <tr class="section-row">\n                                            <th class="section-header" colspan="2">\n                                                ',
                                          I18n.t("envoy_backbone.tariff.baseline"),
                                          "\n                                                (",
                                          I18n.t("envoy_backbone.tariff.tier", { num: c + 1 }),
                                          ")\n                                            </th>\n                                        </tr>\n                                        <tr>\n                                        <td>\n                                            ",
                                          I18n.t("envoy_backbone.tariff.up_to"),
                                          "&nbsp",
                                          b.limit / 1e3,
                                          "&nbsp",
                                          I18n.t("envoy_backbone.tariff.unit_label"),
                                          "&nbsp",
                                          I18n.t("envoy_backbone.tariff.per_day"),
                                          '\n                                        </td>\n                                         <td>\n                                            <span class="tariff-configured-rate">',
                                          b.rate,
                                          "</span>/",
                                          I18n.t("envoy_backbone.tariff.unit_label"),
                                          "\n                                        </td>\n                                        </tr>\n                                        "
                                      )
                                    : a.push(
                                          '\n                                            <tr>\n                                            <th class="section-header" colspan="2">',
                                          I18n.t("envoy_backbone.tariff.tier", { num: c + 1 }),
                                          "</th>\n                                            </tr>\n                                            <tr>\n                                                <th>\n                                                ",
                                          I18n.t("envoy_backbone.tariff.greater_than"),
                                          "&nbsp",
                                          b.percent,
                                          "\n                                                ",
                                          I18n.t("envoy_backbone.tariff.percent_of_baseline"),
                                          '\n                                                </th>\n                                                <td><span class="tariff-configured-rate">',
                                          b.rate,
                                          "</span>/",
                                          I18n.t("envoy_backbone.tariff.unit_label"),
                                          "</td>\n                                            </tr>\n                                        "
                                      );
                                a.push("\n\n                                ");
                            });
                            a.push("\n                            ");
                        }),
                        a.push("\n                        "));
                a.push(
                    "\n                        </tbody>\n                    </table>\n                </div> \x3c!--end micro_detail_table--\x3e\n            </div>   \x3c!--end config_details--\x3e\n        </div> \x3c!--end tariff_configured--\x3e\n    "
                );
            }
            a.push("\n</div>\x3c!--end tariff-struct-view--\x3e\n");
        }
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["wifi/ap_mode_config"] = function (b) {
        var a = [];
        with (b || {})
            a.push(""),
                1 == isSupported &&
                    (a.push("\n<div class=\"list-group\">\n<div class='list-group-item action heading'>\n    "),
                    1 == ap_mode_enabled
                        ? a.push('\n        <span class="descriptor">', I18n.t("envoy_backbone.wifi.ap_mode_config.title_enabled"), "</span>\n    ")
                        : a.push('\n    <span class="descriptor">', I18n.t("envoy_backbone.wifi.ap_mode_config.title_disabled"), "</span>\n    "),
                    a.push("\n</div>\n    "),
                    1 == isLoading
                        ? a.push('\n        <div class="user-messaging clearfix"><div class="pull-left preloader"></div><div class=\'pull-left messaging single-message\'>', I18n.t("envoy_backbone.loading"), "</div></div></div>\n    ")
                        : (a.push("\n        "),
                          1 == ap_mode_enabled
                              ? (a.push('\n            <div class="state_message">', I18n.t("envoy_backbone.wifi.ap_mode_config.description_enabled"), "\n            "),
                                void 0 != ap_mode_time_remaining &&
                                    (a.push("\n            <div class='remaining'>\n                "),
                                    (b = Math.ceil(ap_mode_time_remaining / 60)),
                                    a.push("\n                ", I18n.t("envoy_backbone.wifi.ap_mode_config.time_remaining", { count: Math.floor(b / 60), minutes: b % 60 }), "\n            </div>\n            ")),
                                a.push(
                                    '\n            </div>\n            <div class="list-group-item action btn-holder">\n                <button type="button" class="btn btn-primary btn-block switch-setting">',
                                    I18n.t("envoy_backbone.wifi.ap_mode_config.disable"),
                                    "</button>\n            </div>\n        "
                                ))
                              : a.push(
                                    '\n            <div class="state_message">',
                                    I18n.t("envoy_backbone.wifi.ap_mode_config.description_disabled"),
                                    '</div>\n            <div class="list-group-item action btn-holder">\n                <button type="button" class="btn btn-primary btn-block switch-setting">',
                                    I18n.t("envoy_backbone.wifi.ap_mode_config.enable"),
                                    "</button>\n            </div>\n        "
                                ),
                          a.push("\n    ")),
                    a.push("\n</div>\n")),
                a.push("\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["wifi/available_networks"] = function (b) {
        var a = [];
        with (b || {})
            a.push(""),
                show_list
                    ? a.push(
                          '\n<div class=\'row\'>\n    <div class="col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2">\n        <div class="wifi-header">\n            <div class="wifi_sites"></div>\n            <div class="other_network"></div>\n        </div>\n    </div>\n</div>\n'
                      )
                    : a.push("\n<div class='row'>\n    <div class=\"col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2\">\n    <p>", I18n.t("envoy_backbone.wifi.wifi_hardware_missing"), "</p>\n    </div>\n</div>\n"),
                a.push("\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["wifi/country_config"] = function (b) {
        var a = [];
        with (b || {})
            a.push(""),
                1 == isSupported &&
                    (a.push('\n<div class="list-group">\n    <div class=\'list-group-item action heading\'>\n        <span class="descriptor">', I18n.t("envoy_backbone.wifi.country_config.title"), "</span>\n    </div>\n    "),
                    1 == isLoading
                        ? a.push('\n        <div class="user-messaging clearfix"><div class="pull-left preloader"></div><div class=\'pull-left messaging single-message\'>', I18n.t("envoy_backbone.loading"), "</div></div></div>\n    ")
                        : (a.push("\n        <p>", I18n.t("envoy_backbone.wifi.country_config.description"), "</p>\n        "),
                          _.isEmpty(regions) ||
                              (a.push('\n        <form>\n            <div class="form-group">\n                <select id="wifi_region" class="form-control">\n                    '),
                              _.each(regions, function (b) {
                                  a.push("\n                    ");
                                  "00" == b
                                      ? a.push('\n                    <option value="', b, '" ', b == selected_region ? "selected" : "", ">", I18n.t("envoy_backbone.wifi.country_config.select_prompt"), "</option>\n                    ")
                                      : a.push('\n                    <option value="', b, '" ', b == selected_region ? "selected" : "", ">", b, "</option>\n                    ");
                                  a.push("\n                    ");
                              }),
                              a.push(
                                  '\n                </select>\n            </div>\n        </form>\n        <div class="list-group-item action btn-holder">\n            <button type="button" class="btn btn-primary btn-block submit">',
                                  I18n.t("envoy_backbone.wifi.country_config.update"),
                                  "</button>\n        </div>\n        "
                              )),
                          a.push("\n    ")),
                    a.push("\n</div>\n")),
                a.push("\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["wifi/main"] = function (b) {
        var a = [];
        with (b || {})
            a.push(""),
                1 == isLoading
                    ? a.push(
                          "\n<div class='row'>\n    <div class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n        <div class=\"user-messaging clearfix\"><div class=\"pull-left preloader\"></div><div class='pull-left messaging single-message'>",
                          I18n.t("envoy_backbone.loading"),
                          "</div></div>\n    </div>\n</div>\n"
                      )
                    : a.push(
                          "\n<div class='row'>\n    <div id='wifi_network' class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n    </div>\n    <div class=\"col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2 ap_mode_config\">\n    </div>\n    <div class=\"col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2 country_config\">\n    </div>\n</div>\n<div class='row'>\n    <div id='wifi_device_info' class='col-xs-12 col-sm-12 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2'>\n    </div>\n</div>\n"
                      ),
                a.push("\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["wifi/other_network"] = function (b) {
        var a = [];
        with (b || {})
            a.push(""),
                model.hw_state.present &&
                    (a.push(
                        '\n<div class="list-group">\n<div class="panel-heading list-group-item">\n    <a class="accordion-toggle',
                        isExpanded ? "" : " collapsed",
                        '" data-toggle="collapse" href="#other_network_panel">\n        <div><div class=\'pull-right\'><span class="glyphicons expand"></span></div>\n        <span class="ssid descriptor truncate truncate200">',
                        I18n.t("envoy_backbone.wifi.other_network.title"),
                        '</span></div>\n    </a>\n</div>\n<div id="other_network_panel" class="panel-collapse collapse',
                        isExpanded ? " in" : "",
                        '">\n    <form id="connect_other_network_form" class="form-horizontal">\n        <div class="form-group">\n            <label class="control-label" for=\'essid\'>\n                ',
                        I18n.t("envoy_backbone.wifi.other_network.name"),
                        '\n            </label>\n            <input type="text" class="form-control essid" id="essid" name="essid" value="',
                        temp_options.essid,
                        '">\n        </div>\n        <div class="form-group">\n            <label class="control-label" for=\'security_mode\'>\n                ',
                        I18n.t("envoy_backbone.wifi.other_network.security"),
                        '\n            </label>\n            <select id="security_mode" name="security_mode" class="form-control">\n                '
                    ),
                    _.each(
                        [
                            ["None", "Open/Unsecured"],
                            ["WEP", "WEP"],
                            ["WPA-PSK", "WPA Personal"],
                            ["WPA2-PSK", "WPA2 Personal"],
                        ],
                        function (b) {
                            a.push(
                                '\n                <option value="',
                                b[1],
                                '" ',
                                temp_options.security_mode == b[1] ? "selected" : "",
                                ">",
                                I18n.t("envoy_backbone.wifi.other_network.security_mode." + b[0]),
                                "</option>\n                "
                            );
                        }
                    ),
                    a.push(
                        '\n            </select>\n        </div>\n        <div class="form-group hidden encryption_group">\n            <label class="control-label" for=\'encryption\'>\n                ',
                        I18n.t("envoy_backbone.wifi.other_network.wpa_algorithm"),
                        '\n            </label>\n            <select id="encryption" name="encryption" class="form-control wpa_algorithm">\n                '
                    ),
                    _.each(
                        [
                            ["None", "NONE"],
                            ["TKIP+CCMP", "TKIP + CCMP"],
                            ["CCMP", "CCMP"],
                            ["TKIP", "TKIP"],
                        ],
                        function (b) {
                            a.push(
                                '\n                <option value="',
                                b[1],
                                '" ',
                                temp_options.encryption == b[1] ? "selected" : "",
                                ">",
                                I18n.t("envoy_backbone.wifi.other_network.wpa_algorithm_type." + b[0]),
                                "</option>\n                "
                            );
                        }
                    ),
                    a.push(
                        '\n            </select>\n        </div>\n        <div class="form-group hidden password_group">\n            <label class="control-label" for=\'password\'>\n                ',
                        I18n.t("envoy_backbone.wifi.other_network.password"),
                        '\n            </label>\n            <input type="password" class="form-control network_password" id="password" name="password" value="',
                        temp_options.password,
                        '">\n        </div>\n        <div class="list-group-item action btn-holder">\n            <input type="button" class="btn btn-primary btn-block submit" value="',
                        I18n.t("envoy_backbone.wifi.other_network.connect"),
                        '">\n        </div>\n    </form>\n</div>\n</div>\n'
                    )),
                a.push("\n\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["wifi/wifi_confirm_forget"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                '<div class=\'modal-dialog\'>\n  <div class="modal-content">\n    <div class="modal-header">\n      <button type="button" class="close" aria-hidden="true" id="close">&times;</button>\n      <h4 class="modal-title">',
                I18n.t("envoy_backbone.wifi.forget.forget_network_header", { network_name: model.current_network.ssid }),
                '</h4>\n    </div>\n    <div class="modal-body">\n      <p>',
                I18n.t("envoy_backbone.wifi.forget.ok_to_forget"),
                "</p>\n      <p>",
                forget_note,
                '</p>\n    </div>\n    <div class="modal-footer">\n      <button type="button" class="btn btn-link btn-close close" id=cancel>',
                I18n.t("envoy_backbone.buttons.cancel"),
                '</button>\n      <button type="button" class="btn btn-primary pull-right" id=forget>',
                I18n.t("envoy_backbone.buttons.forget"),
                "</button>\n    </div>\n  </div>\n</div>\n"
            );
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["wifi/wifi_current_network"] = function (b) {
        var a = [];
        with (b || {})
            a.push('<div class="list-group wifi-header">\n    <div class="list-group-item action heading">\n        <span class="descriptor">', I18n.t("envoy_backbone.wifi.title"), "</span>\n    </div>\n    "),
                1 == isLoading
                    ? a.push('\n    <div class="user-messaging clearfix"><div class="pull-left preloader"></div><div class=\'pull-left messaging single-message\'>', I18n.t("envoy_backbone.loading"), "</div></div>\n    ")
                    : (a.push("\n    <div id='current_wifi'>\n        "),
                      model.hw_state.present
                          ? model.hw_state.configured
                              ? (a.push("\n            "),
                                "connecting" == model.current_network.status || "dhcp" == model.current_network.status
                                    ? a.push(
                                          '\n            <div class="ssid"><span class="descriptor">',
                                          model.current_network.ssid,
                                          '</span></div>\n            <div class="user-messaging">\n                <div class="pull-left preloader"></div><span class="messaging">',
                                          I18n.t("envoy_backbone.wifi.connection_status.attempting_to_connect"),
                                          "</span>\n            </div>\n            "
                                      )
                                    : (a.push('\n                <div class="ssid"><span class="descriptor">', I18n.t("envoy_backbone.wifi.current_connection", { network_name: model.current_network.ssid }), "</span>\n                    "),
                                      "connected" == model.current_network.status
                                          ? a.push(
                                                '\n                    <img class="ico pull-right" id=',
                                                bars_icon,
                                                ' src="',
                                                location.protocol,
                                                "//",
                                                location.host,
                                                "/backbone/images/wifi/",
                                                bars_icon,
                                                '@2x.png" height="25px"  />\n                    '
                                            )
                                          : a.push(
                                                '\n                    <img class="ico pull-right" id=\'wifi_noconfig\' src="',
                                                location.protocol,
                                                "//",
                                                location.host,
                                                '/backbone/images/wifi/wifi_noconfig@2x.png" height="25px"  />\n                    '
                                            ),
                                      a.push("\n                    "),
                                      "" != security_icon &&
                                          a.push(
                                              '\n                    <img class="ico pull-right" id=',
                                              security_icon,
                                              ' src="',
                                              location.protocol,
                                              "//",
                                              location.host,
                                              "/backbone/images/wifi/",
                                              security_icon,
                                              '@2x.png" height="25px"  />\n                    '
                                          ),
                                      a.push("\n                </div>\n                "),
                                      "connected" != model.current_network.status && a.push("\n                <p>", I18n.t("envoy_backbone.wifi.connection_status.not_connected"), "</p>\n                "),
                                      a.push("\n            ")),
                                a.push(
                                    '\n        <div><a class="show-more-info accordion-toggle',
                                    showMoreInfo ? "" : " collapsed",
                                    '"  data-toggle="collapse"  href="#show_current_wifi_details"><span class="glyphicons expand"></span> ',
                                    I18n.t("envoy_backbone.monitoring.more_info"),
                                    '</a></div>\n        <div id="show_current_wifi_details" class="panel-collapse collapse',
                                    showMoreInfo ? " in" : "",
                                    '">\n            '
                                ),
                                "connected" == model.current_network.status &&
                                    a.push(
                                        "\n            <div class=\"network_info\" id='ip_addrs'>\n                <div><label>",
                                        I18n.t("envoy_backbone.wifi.ip_address"),
                                        "</label>",
                                        model.current_network.ip_address,
                                        "</div>\n                <div><label>",
                                        I18n.t("envoy_backbone.wifi.gateway_ip"),
                                        "</label>",
                                        model.current_network.gateway_ip,
                                        "</div>\n            </div>\n            "
                                    ),
                                a.push(
                                    '\n            <div class=\'user-action list-group-item action btn-holder\'><button type="button" class="btn btn-primary btn-block forget" id=forget_button>',
                                    I18n.t("envoy_backbone.buttons.forget_network"),
                                    '</button>\n                <a role="button" class="btn btn-primary btn-block join_network" href="#network/wifi_available_networks">',
                                    I18n.t("envoy_backbone.wifi.join_another_network.button"),
                                    "</a></div>\n        </div>\n        "
                                ))
                              : a.push(
                                    "\n        <p>",
                                    I18n.t("envoy_backbone.wifi.not_configured_prompt"),
                                    '</p>\n        <div class=\'user-action list-group-item action btn-holder\'><a role="button" class="btn btn-primary btn-block join_network" href="#network/wifi_available_networks">',
                                    I18n.t("envoy_backbone.wifi.join_network.button"),
                                    "</a></div>\n        "
                                )
                          : a.push("\n        <p>", I18n.t("envoy_backbone.wifi.wifi_hardware_missing"), "</p>\n        "),
                      a.push("\n    </div>\n    ")),
                a.push("\n</div>\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["wifi/wifi_device_info"] = function (b) {
        var a = [];
        with (b || {})
            a.push(""),
                model.device_info.haveData &&
                    (a.push(
                        '\n<div class="list-group wifi-header">\n    <div class="list-group-item action heading">\n        <span class="descriptor">',
                        I18n.t("lwui.admin.wireless_connectivity.legend_device_information"),
                        '</span>\n    </div>\n    <div class="list-group-item">\n        <label>',
                        I18n.t("lwui.admin.wireless_connectivity.device_information.vendor"),
                        '</label>\n        <span class="descriptor">',
                        model.device_info.vendor,
                        " "
                    ),
                    _.isEmpty(model.device_info.vendor_id) || a.push("(", model.device_info.vendor_id, ")"),
                    a.push(
                        '</span>\n    </div>\n    <div class="list-group-item">\n        <label>',
                        I18n.t("lwui.admin.wireless_connectivity.device_information.device"),
                        '</label>\n        <span class="descriptor">',
                        model.device_info.device,
                        " "
                    ),
                    _.isEmpty(model.device_info.device_id) || a.push("(", model.device_info.device_id, ")"),
                    a.push(
                        '</span>\n    </div>\n    <div class="list-group-item">\n        <label>',
                        I18n.t("lwui.admin.wireless_connectivity.device_information.manufacturer"),
                        '</label>\n        <span class="descriptor">',
                        model.device_info.manufacturer,
                        '</span>\n    </div>\n    <div class="list-group-item">\n        <label>',
                        I18n.t("lwui.admin.wireless_connectivity.device_information.model"),
                        '</label>\n        <span class="descriptor">',
                        model.device_info.model,
                        "</span>\n    </div>\n    "
                    ),
                    _.isEmpty(model.device_info.serial) ||
                        a.push('\n    <div class="list-group-item">\n        <label>', I18n.t("envoy_backbone.serial_number"), '</label>\n        <span class="descriptor">', model.device_info.serial, "</span>\n    </div>\n    "),
                    a.push(
                        '\n    <div class="list-group-item">\n        <label>',
                        I18n.t("lwui.admin.wireless_connectivity.device_information.mac_address"),
                        '</label>\n        <span class="descriptor">',
                        model.device_info.mac,
                        "</span>\n    </div>\n    "
                    ),
                    _.isEmpty(model.device_info.hw_version) ||
                        a.push(
                            '\n    <div class="list-group-item">\n        <label>',
                            I18n.t("lwui.admin.wireless_connectivity.device_information.hw_version"),
                            '</label>\n        <span class="descriptor">',
                            model.device_info.hw_version,
                            "</span>\n    </div>\n    "
                        ),
                    a.push("\n    "),
                    _.isEmpty(model.device_info.usb_spec) ||
                        a.push(
                            '\n    <div class="list-group-item">\n        <label>',
                            I18n.t("lwui.admin.wireless_connectivity.device_information.usb_spec_version"),
                            '</label>\n        <span class="descriptor">',
                            model.device_info.usb_spec,
                            "</span>\n    </div>\n    "
                        ),
                    a.push("\n    "),
                    _.isEmpty(model.device_info.usb_slot) ||
                        a.push(
                            '\n    <div class="list-group-item">\n        <label>',
                            I18n.t("lwui.admin.wireless_connectivity.device_information.usb_slot_num"),
                            '</label>\n        <span class="descriptor">',
                            model.device_info.usb_slot,
                            "</span>\n    </div>\n    "
                        ),
                    a.push("\n    "),
                    _.isEmpty(model.device_info.driver) ||
                        a.push(
                            '\n    <div class="list-group-item">\n        <label>',
                            I18n.t("lwui.admin.wireless_connectivity.device_information.driver_name"),
                            '</label>\n        <span class="descriptor">',
                            model.device_info.driver,
                            "</span>\n    </div>\n    "
                        ),
                    a.push("\n</div>\n")),
                a.push("\n");
        return a.join("");
    };
}.call(this));
(function () {
    this.JST || (this.JST = {});
    this.JST["wifi/wifi_sites"] = function (b) {
        var a = [];
        with (b || {})
            a.push(
                '\n  <div id=\'current_sites\' >\n    <div class="list-group">\n        <div class=\'list-group-item action heading network \'>\n            <span class="descriptor" id="available_networks">',
                I18n.t("envoy_backbone.wifi.available_networks"),
                '</span>\n        </div>\n        <div id="current_sites_list">\n        '
            ),
                list_empty
                    ? a.push('\n           <div class="user-messaging search-result clearfix">\n            ', I18n.t("envoy_backbone.wifi.no_networks_found"), "\n           </div>\n        ")
                    : (a.push("\n        "),
                      _.each(sites, function (b) {
                          a.push("\n            ");
                          b.is_current_ssid ||
                              a.push(
                                  '\n                <a class="list-group-item wifi site-row" id="site',
                                  b.site_id,
                                  '">\n                    <span class="ssid descriptor truncate truncate200">',
                                  b.ssid,
                                  '</span>\n                    <img class="ico pull-right" id=',
                                  b.bars_icon,
                                  ' src="',
                                  location.protocol,
                                  "//",
                                  location.host,
                                  "/backbone/images/wifi/",
                                  b.bars_icon,
                                  '@2x.png" height="25px"  />\n                    <img class="ico pull-right" id=',
                                  b.security_icon,
                                  ' src="',
                                  location.protocol,
                                  "//",
                                  location.host,
                                  "/backbone/images/wifi/",
                                  b.security_icon,
                                  '@2x.png" height="25px"  />\n                </a>\n            '
                              );
                          a.push("\n        ");
                      }),
                      a.push("\n        ")),
                a.push("\n        </div>\n    </div>\n  </div>\n");
        return a.join("");
    };
}.call(this));
(function (b) {
    b.Models.ACBattery = Backbone.Model.extend({
        defaults: {
            status: [],
            created_date: "",
            admin_state: "",
            last_report_date: "",
            last_interval_date: "",
            last_interval_watts: 0,
            communicating: "",
            profile_status: 0,
            phase: "ph-unk",
            phase_set_by_envoy: !1,
            device_record_type: "AGF",
            part_number: "",
            img_load_date: 0,
            img_pnum_running: "",
            updated_date: "",
            param_table_part_number: "",
            producing: !1,
            isExpanded: !1,
            isCommExpanded: !1,
            isProfileExpanded: !1,
            isProducingExpanded: !1,
            isFlaggedForDelete: !1,
            isFlaggedForUnDelete: !1,
            isFlaggedForCancelSleep: !1,
            cancelMode: "",
        },
        initialize: function () {
            this.on("change:admin_state", this.triggerAdminStateChange, this);
            this.on("gficlear:submit", this.setClearGFIFlag, this);
        },
        triggerAdminStateChange: function () {
            b.mediator.trigger("ac_battery:adminStateChange");
        },
        setClearGFIFlag: function () {
            var a = this;
            if ("EU" != b.envoyModel.get("envoy_type")) {
                var c = { fname: "gfi", doset: 1, chaneid: a.get("channel_eid") };
                $.ajax({
                    url: b.ApiUrls.ClearGFIPost,
                    type: "POST",
                    dataType: "json",
                    data: $.param(c),
                    success: function (b) {
                        a.parseSetClearGFIFlag(b);
                    },
                    error: function (a, c, g) {
                        b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, c, g);
                    },
                });
            }
        },
        parseSetClearGFIFlag: function (a) {
            1 == a.gficlearset && ((a = b.inventory.encodeGFIClearMessage(this.get("status"))), this.set({ gfi_clear_message: a }), b.mediator.trigger("inventory:InvUpdated"));
        },
        updatePhase: function (a) {
            this.attributes.phase = "ph-updating";
            b.mediator.trigger("inventory:InvUpdated");
            a = [{ serial_num: this.id, man_ph_ind: a }];
            a = JSON.stringify(a);
            $.ajax({
                url: b.ApiUrls.AgfProfileInverterStatus,
                type: "PUT",
                data: a,
                success: function (a) {
                    b.inventory.parseAgfProfileStatusData(a);
                },
                error: function (a, d, e) {
                    b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, d, e);
                },
                complete: function () {
                    b.mediator.trigger("inventory:InvUpdated");
                },
            });
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Models.AgfInfo = Backbone.Model.extend({ migration_in_progress: !1, profile_auto_selected: !1 });
})(EnvoyBackboneApp);
(function (b) {
    b.Models.AgfProfile = Backbone.Model.extend({ idAttribute: "profile_id" });
})(EnvoyBackboneApp);
(function (b) {
    b.Models.AjaxRequest = Backbone.Model.extend({});
})(EnvoyBackboneApp);
(function (b) {
    b.Models.Alert = Backbone.Model.extend({
        initialize: function (a) {
            this.set("acknowledged", !1);
            this.set("key", a.key);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Models.DeviceScan = Backbone.Model.extend({
        defaults: {
            active: !1,
            inhibited: !1,
            suspended: !1,
            disabled: !1,
            remaining_minutes: 0,
            priority_remaining_minutes: 0,
            pcu_target: 0,
            acb_target: 0,
            pcu_discovered: 0,
            acb_discovered: 0,
            hasReceivedScanData: !1,
            firstTime: !0,
            polling_interval: "",
            remaining_interval: "",
            manual_stop: !1,
        },
        initialize: function () {
            var a = setInterval(this.poll, b.pollingFrequency());
            this.set({ polling_interval: a });
            this.getData();
            this.on("destroy", this.stopPolling, this);
            this.on("change:active", this.resetPolling, this);
            b.mediator.on("app:targetCountUpdated", this.updateTargetCount, this);
            this.on("change:inhibited change:suspended change:disabled", this.triggerScanStateChange, this);
        },
        poll: function () {
            b.shouldSuspendPoll() || void 0 == b.activeRequests || b.activeRequests.findWhere({ id: "NewScanGet" }) || b.activeRequests.findWhere({ id: "NewScanPut" }) || EnvoyBackboneApp.scanModel.getData();
        },
        stopPolling: function () {
            clearInterval(this.get("polling_interval"));
            0 < this.get("remaining_interval") && clearInterval(this.get("remaining_interval"));
        },
        getData: function () {
            var a = this;
            b.activeRequests.add({ id: "NewScanGet" });
            $.ajax({
                url: b.ApiUrls.NewScanGet,
                type: "GET",
                success: function (c) {
                    b.activeRequests.findWhere({ id: "NewScanPut" }) || a.parseData(c);
                },
                error: function (a, d, e) {
                    b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, d, e);
                },
                complete: function () {
                    b.activeRequests.remove({ id: "NewScanGet" });
                },
            });
        },
        parseData: function (a) {
            if (void 0 != a.newDeviceScan) {
                var c = a.newDeviceScan["remaining-minutes"],
                    d = this.get("remaining_interval"),
                    e = !1;
                0 < d && clearInterval(this.get("remaining_interval"));
                0 < c && (d = setInterval(this.decrementRemainingMinutes, 6e4));
                1 == this.get("active") && 0 == a.newDeviceScan.active && (e = !0);
                c = {
                    active: a.newDeviceScan.active,
                    inhibited: a.newDeviceScan["inhibit-device-scan"],
                    suspended: a.newDeviceScan["is-suspended"],
                    disabled: a.newDeviceScan["xdom-disabled-scan"],
                    remaining_minutes: c,
                    priority_remaining_minutes: a.newDeviceScan["rem-minutes-exclusive"],
                    remaining_interval: d,
                };
                a.newDeviceScan.hasOwnProperty("pcu") && (_.extend(c, { pcu_target: a.newDeviceScan.pcu.expected }), _.extend(c, { pcu_discovered: a.newDeviceScan.pcu.discovered }));
                a.newDeviceScan.hasOwnProperty("acb") && (_.extend(c, { acb_target: a.newDeviceScan.acb.expected }), _.extend(c, { acb_discovered: a.newDeviceScan.acb.discovered }));
                a.newDeviceScan.hasOwnProperty("nsrb") && (_.extend(c, { nsr_target: a.newDeviceScan.nsrb.expected }), _.extend(c, { nsr_discovered: a.newDeviceScan.nsrb.discovered }), b.mediator.trigger("deviceScan:nsrUpdated"));
                this.set(c);
                1 == e && b.mediator.trigger("deviceScan:evaluateScanTimeoutModal");
            }
            this.hasReceivedScanData = !0;
            this.evaluateShowScanModal();
        },
        startScan: function (a, c) {
            var d = this;
            if ("" == a.device_total || void 0 == a.device_total) a.device_total = 0 < b.target_microinverter_count ? b.target_microinverter_count : 0;
            if ("" == a.acb_total || void 0 == a.acb_total) a.acb_total = b.target_acb_count;
            if ("" == a.nsr_total || void 0 == a.nsr_total) a.nsr_total = b.target_acb_count;
            if (a.device_total > b.envoyModel.get("detected_count") || a.acb_total > b.envoyModel.get("detected_acb_count") || a.nsr_total > b.envoyModel.get("detected_nsr_count")) {
                var e = { "duration-in-minutes": a.scan_duration_total, "devices-to-be-discovered": a.device_total, "acb-to-be-discovered": a.acb_total };
                void 0 != a.priority_duration_total && "" != a.priority_duration_total && _.extend(e, { "exclusive-minutes": a.priority_duration_total });
                e = JSON.stringify(e);
                b.activeRequests.add({ id: "NewScanPut" });
                var g = _.clone(d.attributes);
                d.set({ active: !0, manual_stop: !1, remaining_minutes: a.scan_duration_total, priority_remaining_minutes: a.priority_duration_total, pcu_target: a.device_total, acb_target: a.acb_total, nsr_target: a.nsr_total });
                $.ajax({
                    url: b.ApiUrls.NewScanPD,
                    type: "PUT",
                    data: e,
                    success: function (a, b, c) {},
                    error: function (a, c, e) {
                        d.set(g);
                        b.shouldSuspendPoll() || (403 == a.status ? (b.mediator.trigger("startscan:FailedToStart"), d.getData()) : Tools.handleAjaxError(this.url, a, c, e));
                    },
                    complete: function () {
                        setTimeout(function () {
                            b.activeRequests.remove({ id: "NewScanPut" });
                        }, 1e3);
                    },
                });
            } else
                void 0 == c
                    ? b.mediator.trigger("startscan:DeviceCountTooLowBoth")
                    : "ac_batteries" == c
                    ? b.mediator.trigger("startscan:DeviceCountTooLowBattery")
                    : "microinverters" == c
                    ? b.mediator.trigger("startscan:DeviceCountTooLowInverter")
                    : "nsrs" == page && b.mediator.trigger("startscan:DeviceCountTooLowNsr");
        },
        stopScan: function () {
            this.set({ active: !1, manual_stop: !0, remaining_minutes: 0, priority_remaining_minutes: 0 });
            $.ajax({
                url: b.ApiUrls.NewScanPD,
                type: "DELETE",
                success: function (a) {},
                error: function (a, c, d) {
                    b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, c, d);
                },
            });
        },
        decrementRemainingMinutes: function () {
            var a = EnvoyBackboneApp.scanModel;
            if (1 < a.get("remaining_minutes")) {
                var b = a.get("priority_remaining_minutes");
                1 < b && --b;
                a.set({ remaining_minutes: a.get("remaining_minutes") - 1, priority_remaining_minutes: b });
            } else 0 < a.get("remaining_interval") && (clearInterval(a.get("remaining_interval")), a.set({ remaining_interval: "" }));
        },
        resetPolling: function () {
            clearInterval(this.get("polling_interval"));
            var a = 1 == this.get("active") ? setInterval(this.poll, 6e4) : setInterval(this.poll, b.pollingFrequency());
            this.set({ polling_interval: a });
            this.triggerScanStateChange();
        },
        durationOptions: function () {
            var a = [],
                c = [15, 30, 60, 120, 240, 480],
                d = 30,
                e = (b.target_microinverter_count - b.envoyModel.get("detected_count") + b.target_acb_count - b.envoyModel.get("detected_acb_count")) / 2;
            30 < e && 241 > e
                ? (d = _.find(c, function (a) {
                      return e <= a;
                  }))
                : 240 < e && (d = 480);
            _.each(c, function (b) {
                var c = { option_value: b, option_text: I18n.t("envoy_backbone.microinverters.scan_settings.scan_options.min_" + b) };
                b == d && _.extend(c, { isDefault: !0 });
                a.push(c);
            });
            return a;
        },
        triggerScanStateChange: function () {
            b.mediator.trigger("envoy:scanStateChange");
        },
        updateTargetCount: function () {
            var a = this;
            if (b.target_microinverter_count != this.get("pcu_target") || b.target_acb_count != this.get("acb_target") || b.target_nsr_count != this.get("nsr_target") || this.get("firstTime")) {
                var c = { "devices-to-be-discovered": b.target_microinverter_count, "acb-to-be-discovered": b.target_acb_count, "nsrb-to-be-discovered": b.target_nsr_count },
                    c = JSON.stringify(c);
                $.ajax({
                    url: b.ApiUrls.NewScanPD,
                    type: "PUT",
                    data: c,
                    success: function (c) {
                        a.set({ pcu_target: b.target_microinverter_count, acb_target: b.target_acb_count, nsr_target: b.target_nsr_count });
                        a.set("firstTime", !1);
                        a.evaluateShowScanModal();
                    },
                    error: function (a, c, g) {
                        b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, c, g);
                    },
                });
            }
        },
        evaluateShowScanModal: function () {
            1 == this.hasReceivedScanData &&
                void 0 != b.scanModel &&
                0 == b.modalIsOpen &&
                0 == b.hasAcknowledgedScanPrompt &&
                0 == b.scanModel.get("active") &&
                0 == b.scanModel.get("inhibited") &&
                0 == b.scanModel.get("suspended") &&
                0 == b.scanModel.get("disabled") &&
                (0 < b.target_microinverter_count && 0 == b.scanModel.get("pcu_discovered") && 0 < b.target_acb_count && 0 == b.scanModel.get("acb_discovered")
                    ? (b.mediator.trigger("deviceScan:showStartScanModalBoth"), (b.hasAcknowledgedScanPrompt = !0))
                    : 0 < b.target_acb_count && 0 == b.scanModel.get("acb_discovered")
                    ? (b.mediator.trigger("deviceScan:showStartScanModalBattery"), (b.hasAcknowledgedScanPrompt = !0))
                    : 0 < b.target_microinverter_count && 0 == b.scanModel.get("pcu_discovered")
                    ? (b.mediator.trigger("deviceScan:showStartScanModalInverter"), (b.hasAcknowledgedScanPrompt = !0))
                    : 0 < b.target_nsr_count && 0 === b.scanModel.get("nsr_discovered") && (b.mediator.trigger("deviceScan:showStartScanModalNsr"), (b.hasAcknowledgedScanPrompt = !0)));
            0 == this.hasReceivedScanData && this.getData();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Models.EnchargeBattery = Backbone.Model.extend({
        defaults: {
            admin_state: "",
            cancelMode: "",
            communicating: "",
            created_date: "",
            img_load_date: 0,
            img_pnum_running: "",
            isCommExpanded: !1,
            isExpanded: !1,
            isFlaggedForCancelSleep: !1,
            isFlaggedForDelete: !1,
            isFlaggedForUnDelete: !1,
            isProducingExpanded: !1,
            isProfileExpanded: !1,
            last_interval_date: "",
            last_interval_watts: 0,
            last_report_date: "",
            param_table_part_number: "",
            part_number: "",
            phase_set_by_envoy: !1,
            phase: "ph-unk",
            producing: !1,
            profile_status: 0,
            status: [],
            updated_date: "",
            device_record_type: "AGF",
        },
        initialize: function () {
            this.on("change:admin_state", this.triggerAdminStateChange, this);
        },
        triggerAdminStateChange: function () {
            b.mediator.trigger("encharge_battery:adminStateChange");
        },
        updatePhase: function (a) {
            this.attributes.phase = "ph-updating";
            b.mediator.trigger("inventory:InvUpdated");
            a = [{ serial_num: this.id, man_ph_ind: a }];
            a = JSON.stringify(a);
            $.ajax({
                url: b.ApiUrls.EnsembleAgfProfileStatus,
                type: "PUT",
                data: a,
                success: function (a) {
                    b.inventory.parseAgfProfileStatusData(a);
                },
                error: function (a, d, e) {
                    b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, d, e);
                },
                complete: function () {
                    b.mediator.trigger("inventory:InvUpdated");
                },
            });
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Models.EndpointTracker = Backbone.Model.extend({
        tracker: {},
        initialize: function () {
            this.tracker = {
                info: { received: !1, requiredBy: { installer: !0, home_owner: !0, report: !0 } },
                home: { received: !1, requiredBy: { installer: !0, home_owner: !0, report: !0 } },
                index: { received: !1, requiredBy: { installer: !0, home_owner: !1, report: !0 } },
                details: { received: !1, requiredBy: { installer: !1, home_owner: !1, report: !1 } },
                meters: { received: !1, requiredBy: { installer: !0, home_owner: !0, report: !0 } },
                inventory: { received: !1, requiredBy: { installer: !0, home_owner: !0, report: !0 } },
                inverters_status: { received: !1, requiredBy: { installer: !1, home_owner: !1, report: !0 } },
                encharge_status: { received: !1, requiredBy: { installer: !1, home_owner: !1, report: !0 } },
                enpower_status: { received: !1, requiredBy: { installer: !1, home_owner: !1, report: !0 } },
                production: { received: !1, requiredBy: { installer: !0, home_owner: !0, report: !0 } },
            };
            b.showInternalMeters() ||
                (this.tracker.meters.requiredBy = _.mapObject(this.tracker.meters.requiredBy, function (a) {
                    return !1;
                }));
            b.mediator.on("software_packages:InfoLoaded", this.trackResponses, { respType: "info_xml" }, this);
            b.mediator.on("homeData:loaded", this.trackResponses, { respType: "home" }, this);
            b.mediator.on("profiles:loaded", this.trackResponses, { respType: "index" }, this);
            b.mediator.on("agfProfiles:selectedProfileUpdated", this.trackResponses, { respType: "profileUpdated" }, this);
            b.mediator.on("agfProfiles:detailsUpdated", this.trackResponses, { respType: "details" }, this);
            b.mediator.on("meters:updated", this.trackResponses, { respType: "meters" }, this);
            b.mediator.on("inventory:InvUpdated", this.trackResponses, { respType: "inventory" }, this);
            b.mediator.on("microinverters:ProfileStateLoaded", this.trackResponses, { respType: "inverterStatus" }, this);
            b.mediator.on("encharge_batteries:ProfileStateLoaded", this.trackResponses, { respType: "enchargeStatus" }, this);
            b.mediator.on("enpowers:ProfileStateLoaded", this.trackResponses, { respType: "enpowerStatus" }, this);
            b.mediator.on("inventory:ProducingUpdated", this.trackResponses, { respType: "production" }, this);
            return this;
        },
        trackResponses: function () {
            switch (this.respType) {
                case "info_xml":
                    b.endpointTracker.tracker.info.received = !0;
                    break;
                case "home":
                    b.endpointTracker.tracker.home.received = !0;
                    break;
                case "index":
                    b.endpointTracker.tracker.index.received = !0;
                    break;
                case "profileUpdated":
                    b.endpointTracker.tracker.details.received = !1;
                    b.endpointTracker.tracker.details.requiredBy.report = !0;
                    break;
                case "details":
                    b.endpointTracker.tracker.details.received = !0;
                    break;
                case "meters":
                    b.endpointTracker.tracker.meters.received = !0;
                    break;
                case "inventory":
                    b.endpointTracker.tracker.inventory.received = !0;
                    break;
                case "inverterStatus":
                    b.endpointTracker.tracker.inverters_status.received = !0;
                    break;
                case "enchargeStatus":
                    b.endpointTracker.tracker.encharge_status.received = !0;
                    break;
                case "enpowerStatus":
                    b.endpointTracker.tracker.enpower_status.received = !0;
                    break;
                case "production":
                    b.endpointTracker.tracker.production.received = !0;
            }
        },
        gotAllResponses: function (a) {
            var b = !0;
            $.each(EnvoyBackboneApp.endpointTracker.tracker, function (d, e) {
                e.requiredBy[a] && 1 != e.received && (b = !1);
            });
            return b;
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Models.Enpower = Backbone.Model.extend({
        defaults: {
            admin_state: "",
            cancelMode: "",
            communicating: "",
            created_date: "",
            device_record_type: "AGF",
            img_load_date: 0,
            img_pnum_running: "",
            isCommExpanded: !1,
            isExpanded: !1,
            isFlaggedForCancelSleep: !1,
            isFlaggedForDelete: !1,
            isFlaggedForUnDelete: !1,
            isProducingExpanded: !1,
            isProfileExpanded: !1,
            last_interval_date: "",
            last_interval_watts: 0,
            last_report_date: "",
            param_table_part_number: "",
            part_number: "",
            phase: "ph-unk",
            phase_set_by_envoy: !1,
            producing: !1,
            profile_status: 0,
            status: [],
            updated_date: "",
        },
        initialize: function () {
            this.on("change:admin_state", this.triggerAdminStateChange, this);
        },
        triggerAdminStateChange: function () {
            b.mediator.trigger("enpower:adminStateChange");
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Models.Envoy = Backbone.Model.extend({
        defaults: {
            serial_number: BackboneConfig.serial,
            envoy_type: BackboneConfig.envoy_type,
            software_version: BackboneConfig.software_version,
            software_build_epoch: "",
            db_size: "",
            db_percent_full: "",
            timezone: "",
            grid_profile: {},
            detected_count: "",
            communicating_count: "",
            profile_count: "",
            detected_acb_count: "",
            detected_nsr_count: "",
            detected_encharge_batteries_count: "",
            detected_enpower_count: "",
            communicating_acb_count: "",
            communicating_nsr_count: "",
            communicating_encharge_batteries_count: "",
            communicating_enpower_count: "",
            profile_acb_count: "",
            profile_nsr_count: "",
            profile_encharge_batteries_count: "",
            profile_enpower_count: "",
            producing_acb_count: "",
            operating_nsr_count: "",
            producing_encharge_batteries_count: "",
            bSupportConnectionOpen: void 0,
            powerForcedOff: null,
            envoyDevId: 603980032,
            enpower_grid_status: { mains_admin_state: null, mains_oper_state: null },
            encharge_batteries_comm_level: 0,
            enpower_comm_level: 0,
        },
        initialize: function () {
            this.alerts = new b.Collections.Alerts();
            this.getHomeData();
            var a = setInterval(this.poll, b.pollingFrequency());
            this.set({ polling_interval: a });
            this.on("change:timezone", this.triggerTimezoneUpdate, this);
            this.on("change:detected_count", this.triggerDetectedUpdate, this);
            this.on("change:detected_acb_count", this.triggerDetectedAcbUpdate, this);
            this.on("change:detected_encharge_batteries_count", this.triggerDetectedEnchargeBatteriesUpdate, this);
            this.on("change:detected_enpower_count", this.triggerDetectedEnpowersUpdate, this);
            if (1 == b.showProfiles()) b.mediator.on("inventory:ProfileStateUpdated", this.updateProfileCount, this);
            b.mediator.on("inventory:CommunicatingUpdated", this.updateCommunicatingCount, this);
            b.mediator.on("inventory:ProducingUpdated", this.updateProducingCount, this);
            b.mediator.on("wifi:joinAttemptFinished", this.poll(), this);
            b.mediator.on("wifi:joinAttemptFinishedIncomplete", this.poll(), this);
            b.mediator.on("app:targetCountUpdated", this.resetPollingInterval, this);
            this.set({ deleted_count: 0, deleted_acb_count: 0, deleted_nsr_count: 0, deleted_encharge_batteries_count: 0, deleted_enpower_count: 0 });
            this.on("destroy", this.stopPolling, this);
        },
        poll: function () {
            b.shouldSuspendPoll() ||
                (void 0 == b.activeRequests || b.activeRequests.findWhere({ id: "Home" }) || EnvoyBackboneApp.envoyModel.getHomeData(),
                !EnvoyBackboneApp.isPublic() && EnvoyBackboneApp.envoyModel && EnvoyBackboneApp.envoyModel.getPowerForceMode());
        },
        resetPollingInterval: function () {
            var a = b.resetPollingInterval(this.get("polling_interval"), this.poll);
            this.set({ polling_interval: a });
            this.poll();
        },
        stopPolling: function () {
            clearInterval(this.get("polling_interval"));
        },
        triggerDetectedUpdate: function () {
            b.mediator.trigger("envoy:detectCountChange");
        },
        triggerDetectedAcbUpdate: function () {
            b.mediator.trigger("envoy:detectAcbCountChange");
        },
        triggerDetectedNsrUpdate: function () {
            b.mediator.trigger("envoy:detectNsrCountChange");
        },
        triggerDetectedEnchargeBatteriesUpdate: function () {
            b.mediator.trigger("envoy:detectEnchargeBatteriesCountChange");
        },
        triggerDetectedEnpowersUpdate: function () {
            b.mediator.trigger("envoy:detectEnpowersCountChange");
        },
        triggerTimezoneUpdate: function () {
            b.mediator.trigger("envoy:TimezoneUpdate");
        },
        updateProfileCount: function () {
            this.set({ profile_count: _.where(EnvoyBackboneApp.microinverters.getActiveDevices(), { profile_status: 2 }).length });
            this.set({ profile_acb_count: _.where(EnvoyBackboneApp.ac_batteries.getActiveDevices(), { profile_status: 2 }).length });
            this.set({ profile_nsr_count: _.where(EnvoyBackboneApp.nsrs.getActiveDevices(), { provisioned: !0 }).length });
            this.set({ profile_encharge_batteries_count: _.where(EnvoyBackboneApp.encharge_batteries.getActiveDevices(), { profile_status: 2 }).length });
            this.set({ profile_enpower_count: _.where(EnvoyBackboneApp.enpowers.getActiveDevices(), { profile_status: 2 }).length });
        },
        updateCommunicatingCount: function () {
            this.set({ communicating_count: _.where(EnvoyBackboneApp.microinverters.getActiveDevices(), { communicating: !0 }).length });
            this.set({ communicating_acb_count: _.where(EnvoyBackboneApp.ac_batteries.getActiveDevices(), { communicating: !0 }).length });
            this.set({ communicating_nsr_count: _.where(EnvoyBackboneApp.nsrs.getActiveDevices(), { communicating: !0 }).length });
            this.set({ communicating_encharge_batteries_count: _.where(EnvoyBackboneApp.encharge_batteries.getActiveDevices(), { communicating: !0 }).length });
            this.set({ communicating_enpower_count: _.where(EnvoyBackboneApp.enpowers.getActiveDevices(), { communicating: !0 }).length });
        },
        updateProducingCount: function () {
            this.set({ producing_count: _.where(EnvoyBackboneApp.microinverters.getActiveDevices(), { producing: !0 }).length });
            this.set({ producing_acb_count: _.where(EnvoyBackboneApp.ac_batteries.getActiveDevices(), { producing: !0 }).length });
            this.set({ operating_nsr_count: _.where(EnvoyBackboneApp.nsrs.getActiveDevices(), { producing: !0 }).length });
            this.set({ producing_encharge_batteries_count: _.where(EnvoyBackboneApp.encharge_batteries.getActiveDevices(), { producing: !0 }).length });
        },
        getCountryRegulatorySpec: function () {
            var a;
            void 0 == b.countryRegulatorySpecs ||
                _.isEmpty(this.attributes.grid_profile) ||
                (a = b.countryRegulatorySpecs.findWhere({ country_id: this.attributes.grid_profile.country_id, regulatory_body_spec_id: this.attributes.grid_profile.regulatory_body_spec_id }));
            return a;
        },
        getProfile: function () {
            var a;
            if (1 == b.showProfiles())
                return (
                    (a = b.agfProfiles.getSelectedProfile()),
                    void 0 != a
                        ? a.attributes
                        : (a =
                              "NA" == BackboneConfig.envoy_type || "NA_COM" == BackboneConfig.envoy_type
                                  ? { translated_spec_name: "", translated_name: I18n.t("envoy_backbone.profiles.na_no_profile_label"), default_profile_set: I18n.t("envoy_backbone.overview.microinverters.default_profile_set") }
                                  : { translated_spec_name: "", translated_name: I18n.t("envoy_backbone.profiles.eu_no_profile_label"), default_profile_set: I18n.t("envoy_backbone.profiles.eu_no_profile_label") })
                );
        },
        setTPMGridProfile: function (a) {
            this.set({ grid_profile: { profile_id: a.profile_id, country_id: a.country_id, regulatory_body_spec_id: a.regulatory_body_spec_id } });
            b.mediator.trigger("data:tpmGridProfileSet");
        },
        userSettingTPMProfile: function (a, c, d) {
            this.setTPMGridProfile({ country_id: a, regulatory_body_spec_id: c, profile_id: d });
            d &&
                (this.postTpmToEnvoy(d),
                b.microinverters.forEach(function (a) {
                    a.set({ profile_status: 0 });
                }),
                b.mediator.trigger("inventory:ProfileStateUpdated"));
        },
        postTpmToEnvoy: function (a) {
            var c = this,
                d = JSON.stringify({ number_of_parameters: 0, parameters: [{}], profile: { profile_id: a.toString() } });
            $.ajax({
                url: b.ApiUrls.TpmSelect,
                type: "PUT",
                data: d,
                success: function (b) {
                    c.parseTpmToEnvoy(b, a);
                },
                error: function (a, c, d) {
                    b.unloading || b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, c, d);
                },
            });
        },
        getHomeData: function () {
            var a = this,
                c = b.ApiUrls.Home;
            b.activeRequests.add({ id: "Home" });
            $.ajax({
                url: c,
                dataType: "json",
                success: function (b) {
                    a.parseHomeData(b);
                },
                error: function (a, b, c) {
                    Tools.handleAjaxError(this.url, a, b, c);
                },
                complete: function () {
                    b.activeRequests.remove({ id: "Home" });
                },
            });
        },
        parseTpmToEnvoy: function (a, c) {
            a.profile.profile_id != c && void 0 != b.countryRegulatorySpecs && b.countryRegulatorySpecs.getData();
        },
        parseHomeData: function (a) {
            var c = new Date(0);
            c.setUTCSeconds(a.software_build_epoch);
            var d = a.db_size,
                e = a.db_percent_full,
                g = a.is_nonvoy,
                f,
                k,
                h = !1,
                l = "",
                n = 0,
                q = 0,
                u = 0,
                v = 0,
                w = 0;
            _.each(a.network.interfaces, function (c) {
                if ("ethernet" == c.type) {
                    var d = _.clone(b.network.get("ethernet_config"));
                    void 0 == d && (d = {});
                    f = _.extend(d, { ip_address: c.ip, dhcp: c.dhcp, network: c.carrier, mac_address: c.mac });
                } else if ("cellular" == c.type) {
                    d = _.clone(b.network.get("cellular_config"));
                    void 0 == d && (d = {});
                    var e = Tools.convertRssiToBars(c.signal_strength);
                    k = _.extend(d, { network: c.network, ip_address: c.ip, bars: e });
                } else if ("wifi" == c.type) {
                    h = !0;
                    d = _.clone(b.wifiModel.get("current_network"));
                    void 0 == d && (d = {});
                    d = _.extend(d, { bars: c.signal_strength, ip_address: c.ip, status: c.status });
                    e = _.clone(b.wifiModel.get("device_info"));
                    void 0 == e && (e = {});
                    var e = _.extend(e, { mac: c.mac }),
                        g = _.clone(b.wifiModel.get("hw_state"));
                    void 0 == g && (g = {});
                    g = _.extend(g, { supported: c.supported, configured: c.configured, present: c.present });
                    b.wifiModel.set({ current_network: d, device_info: e, hw_state: g });
                }
                a.network.primary_interface == c.interface && (l = c.type);
            });
            var t = a.network.web_comm;
            if (void 0 == a.network.primary_interface || "" == a.network.primary_interface || "none" == a.network.primary_interface) (l = ""), (t = !1);
            0 == h && b.wifiModel.set({ hw_state: { present: !1 } });
            if (0 < a.network.last_enlighten_report_time) {
                var y = new Date(0);
                y.setUTCSeconds(a.network.last_enlighten_report_time);
            } else y = null;
            a.hasOwnProperty("comm") &&
                (a.comm.hasOwnProperty("pcu") && (n = a.comm.pcu.level),
                a.comm.hasOwnProperty("acb") && (u = a.comm.acb.level),
                a.comm.hasOwnProperty("encharge") && (v = a.comm.encharge.level),
                a.comm.hasOwnProperty("enpower") && (w = a.comm.enpower.level),
                a.comm.hasOwnProperty("nsrb") && (q = a.comm.nsrb.level));
            var p = a.timezone,
                C = a.current_date,
                r = a.current_time,
                x = a.alerts;
            void 0 != a.tariff && b.tariff.set({ envoy_tariff_type: { none: "none", time_of_use: "tou", tiered: "tiered", single_rate: "flat" }[a.tariff] });
            _.each(x, function (a) {
                void 0 == b.envoyModel.alerts.findWhere({ key: a.msg_key }) && b.envoyModel.alerts.add({ key: a.msg_key });
            });
            this.alerts.remove(
                this.alerts.filter(function (a) {
                    return void 0 == x
                        ? !0
                        : 0 ==
                              $.grep(x, function (b) {
                                  return b.msg_key == a.get("key");
                              }).length;
                })
            );
            var z = a.enpower || {};
            b.network.set({ cellular_config: k, ethernet_config: f, primary_network: l, isPlusWeb: t, lastReportDate: y });
            b.envoyModel.set({
                date: C,
                time: r,
                software_build_epoch: c,
                db_size: d,
                db_percent_full: e,
                timezone: p,
                is_nonvoy: g,
                microinverters_comm_level: n,
                ac_batteries_comm_level: u,
                nsrs_comm_level: q,
                encharge_batteries_comm_level: v,
                enpower_comm_level: w,
                inverters_update_status: a.update_status,
                enpower_connected: z.connected,
                enpower_grid_status: { mains_oper_state: z.grid_status, mains_admin_state: this.get("enpower_grid_status").mains_admin_state },
            });
            b.mediator.trigger("homeData:loaded");
        },
        removeMeterEnableAlert: function () {
            var a = b.meters.where({ state: "enabled" });
            2 == $(a).length && EnvoyBackboneApp.envoyModel.alerts.remove(EnvoyBackboneApp.envoyModel.alerts.findWhere({ key: "lwui.home.warnings.both_meter_enabled" }));
        },
        openSupportConnection: function () {
            this.set({ bSupportConnectionOpen: void 0 });
            this.setSupportConnectionState(!0);
        },
        closeSupportConnection: function () {
            this.set({ bSupportConnectionOpen: void 0 });
            this.setSupportConnectionState(!1);
        },
        startPollingSupportConnectionState: function () {
            if (void 0 == this.get("support_connection_state_polling_interval")) {
                var a = setInterval(this.pollSupportConnectionState, b.pollingFrequency());
                this.set({ support_connection_state_polling_interval: a });
                this.getSupportConnectionState();
                this.on("destroy", this.stopPollingSupportConnectionState, this);
            }
        },
        stopPollingSupportConnectionState: function () {
            clearInterval(this.get("support_connection_state_polling_interval"));
            this.set({ support_connection_state_polling_interval: void 0 });
        },
        pollSupportConnectionState: function () {
            b.shouldSuspendPoll() || void 0 == b.activeRequests || b.activeRequests.findWhere({ id: "TunnelStateGet" }) || (EnvoyBackboneApp.envoyModel.getSupportConnectionState(), (b.wifiDoingScaryStuff = !1));
        },
        setSupportConnectionState: function (a) {
            var c = this,
                d = { fname: "tunnelclose" },
                e = 6e4;
            a && ((d = { fname: "tunnelopen" }), (e = 18e4), (b.wifiDoingScaryStuff = !0));
            $.ajax({
                url: b.ApiUrls.TunnelStatePut,
                type: "POST",
                data: d,
                dataType: "json",
                timeout: e,
                success: function (a) {
                    b.wifiDoingScaryStuff = !1;
                    c.parseConnectionState(a);
                },
                error: function (d, e, k) {
                    b.wifiDoingScaryStuff = !1;
                    a
                        ? (b.infoAlertModal.setTitle(I18n.t("envoy_backbone.errors.tunnel_failed_title")), b.infoAlertModal.setText(I18n.t("envoy_backbone.errors.tunnel_open_failed")))
                        : (b.infoAlertModal.setTitle(I18n.t("envoy_backbone.errors.tunnel_failed_title")), b.infoAlertModal.setText(I18n.t("envoy_backbone.errors.tunnel_close_failed")));
                    b.mediator.trigger("info:showInfo");
                    c.getSupportConnectionState();
                },
            });
        },
        getSupportConnectionState: function () {
            var a = this;
            b.activeRequests.add({ id: "TunnelStateGet" });
            $.ajax({
                url: b.ApiUrls.TunnelStateGet,
                type: "GET",
                dataType: "json",
                success: function (b) {
                    a.parseConnectionState(b);
                },
                error: function (a, d, e) {
                    b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, d, e);
                },
                complete: function () {
                    b.activeRequests.remove({ id: "TunnelStateGet" });
                },
            });
        },
        parseConnectionState: function (a) {
            void 0 != a.tunnel_open && this.set({ bSupportConnectionOpen: 1 == a.tunnel_open });
        },
        setTimezone: function (a) {
            var c = this;
            $.ajax({
                url: b.ApiUrls.SetTimezone,
                type: "POST",
                dataType: "json",
                data: $.param({ timezone: a }),
                success: function (a) {
                    c.parseSetTimezone(a);
                },
                error: function (a, c, g) {
                    b.shouldSuspendPoll() || (Tools.handleAjaxError(this.url, a, c, g), b.mediator.trigger("envoy:TimezoneUpdate"));
                },
            });
        },
        parseSetTimezone: function (a) {
            a.hasOwnProperty("timezone") && this.set({ timezone: a.timezone, date: a.current_date, time: a.current_time });
        },
        getPowerForceMode: function () {
            var a = this;
            b.activeRequests.add({ id: "getPowerForceMode" });
            $.ajax({
                url: b.ApiUrls.PowerForcedModeGet.replace("EID", this.get("envoyDevId")),
                type: "GET",
                dataType: "json",
                success: function (b) {
                    a.parsePowerForceMode(b);
                },
                error: function (a, d, e) {
                    b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, d, e);
                },
                complete: function () {
                    b.activeRequests.remove({ id: "getPowerForceMode" });
                },
            });
        },
        parsePowerForceMode: function (a) {
            this.set("powerForcedOff", a.powerForcedOff || !1);
        },
        setPowerForceMode: function (a) {
            var c = this,
                d = JSON.stringify({ length: 1, arr: [a ? 1 : 0] });
            $.ajax({
                url: b.ApiUrls.PowerForcedModePut.replace("EID", this.get("envoyDevId")),
                type: "PUT",
                data: d,
                success: function (b) {
                    c.set("powerForcedOff", a);
                },
                error: function (a, c, d) {
                    b.unloading || b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, c, d);
                },
            });
        },
        getEnsembleCommLevel: function () {
            return (this.attributes.encharge_batteries_comm_level + this.attributes.enpower_comm_level) / 2;
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Models.Error = Backbone.Model.extend({ defaults: { setCountOpen: !1, text: "", title: I18n.t("envoy_backbone.errors.title") } });
})(EnvoyBackboneApp);
(function (b) {
    b.Models.Events = Backbone.Model.extend({ defaults: { defaultvalue: "somedefault" } });
})(EnvoyBackboneApp);
(function (b) {
    b.Models.FreqAnalysisView = Backbone.Model.extend({
        initialize: function () {
            this.gfd = _.bind(this.getFreqData, this);
            this.cfgCb = _.bind(this.getConfig, this);
            this.cfgData = {};
        },
        startConnection: function () {
            var a = !1;
            b.plcAnalysIsEnabled() &&
                (b.ip_address() &&
                    (clearTimeout(this.connectionTimer),
                    (this.connectionTimer = null),
                    (a = b.host()),
                    b.envoyModel.get("fft_port") && "none" != b.envoyModel.get("fft_port") && (a = b.network.get("ethernet_config").ip_address + ":" + b.envoyModel.get("fft_port")),
                    this.createConnection(b.protocol() + "//" + a + "/stream/psd", 5, this.gfd, this.cfgCb),
                    (a = !0)),
                a || this.connectionTimer || (console.log("not ready, starting timer."), (this.connectionTimer = setTimeout(this.startConnection, 1e3))));
        },
        createConnection: function (a, b, d, e) {
            console.log("plc_analys connecting...");
            this.eventSource || ((this.eventSource = new EventSource(a)), console.dir(this.eventSource));
            this.eventSource.addEventListener("message", d, !1);
            console.log("done ");
            this.eventSource.addEventListener("config", e);
        },
        stopEventListener: function (a) {
            a = this.gfd;
            this.eventSource && (console.log("stopping plc_analys event listener..."), this.eventSource.close(), this.eventSource.removeEventListener("message", a), (this.eventSource = null));
            clearTimeout(this.connectionTimer);
            this.connectionTimer = null;
            clearTimeout(this.watchdog_timer);
            this.watchdog_timer = null;
        },
        doFFT: function (a, b, d) {
            var e = Math.floor(Math.min(b.length, d.length) / 2),
                g = b.length;
            a = (0.001 * (g - 1)) / a / g;
            b = b.slice(0, 2 * e);
            d = d.slice(0, 2 * e);
            transform(b, d);
            for (var g = Array(e), f = 0; f < e; f++) g[f] = { x: f * a, y: 10 * Math.log(b[f] * b[f] + d[f] * d[f]) };
            return g;
        },
        timeout: function () {
            console.log("Timed out getting plc_analys data");
        },
        getConfig: function (a) {
            a = JSON.parse(a.data);
            this.set({ centerFreq: a.plc.f, bandwidth: a.plc.bw });
        },
        getFreqData: function () {
            this.watchdog_timer = setTimeout(this.timeout, 1e4);
            try {
                var a = 0,
                    c = 0,
                    d = [],
                    e = [],
                    g = [],
                    f = Date.now();
                event.data.split(";").map(function (b) {
                    var f = b.split(",");
                    b = parseFloat(f[0]);
                    f = parseFloat(f[1]);
                    isNaN(b) || isNaN(f) || ((c = b), 0 == d.length && (a = c), g.push({ x: 1e3 * b, y: f }), d.push(1e-6 * f), e.push(0));
                });
                console.log("data processed in " + (Date.now() - f) + "ms");
                if (c > a && 1 < d.length) {
                    var f = Date.now(),
                        k = this.doFFT(c - a, d, e);
                    console.log("plc_analys completed in " + (Date.now() - f) + "ms");
                    f = Date.now();
                    console.log("processing completed in " + (Date.now() - f) + "ms");
                    b.mediator.trigger("freq_analysis:data_updated", g, k);
                }
            } catch (h) {
                console.log(h);
            }
            clearTimeout(this.watchdog_timer);
            this.watchdog_timer = setTimeout(this.timeout, 1e4);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Models.Inventory = Backbone.Model.extend({
        pcu_list_interval: null,
        profile_status_interval: null,
        showPhase: !1,
        initialize: function () {
            this.getInventoryData(!0);
            this.getEnsembleInventoryData(!0);
            this.pcu_list_interval = setInterval(this.poll, b.pollingFrequency());
            b.mediator.on("app:targetCountSetFirstTime", this.poll, this);
            b.mediator.on("agfProfiles:detailsUpdated", this.pollProfileStatus, this);
            b.mediator.on("inventory:ProfileStateUpdated", this.poll, this);
            b.mediator.on("EnsembleInventory:ProfileStateUpdated", this.enpoll, this);
            b.mediator.on("batteries:SetToSleepComplete", this.poll, this);
            b.mediator.on("batteries:CancelSleepComplete", this.poll, this);
            b.mediator.on("app:targetCountUpdated", this.resetPollingInterval, this);
            b.mediator.on("nsrs:DeleteComplete", this.poll, this);
            b.mediator.on("nsrs:UndeleteComplete", this.poll, this);
        },
        poll: function () {
            b.shouldSuspendPoll() ||
                void 0 == b.activeRequests ||
                (b.activeRequests.findWhere({ id: "Inventory" }) || b.inventory.getInventoryData(!1), b.activeRequests.findWhere({ id: "EnsembleInventory" }) || b.inventory.getEnsembleInventoryData(!1));
        },
        enpoll: function () {
            b.shouldSuspendPoll() || (void 0 != b.activeRequests && (b.activeRequests.findWhere({ id: "EnsembleInventory" }) || b.inventory.getEnsembleInventoryData(!1)));
        },
        resetPollingInterval: function () {
            this.pcu_list_interval = b.resetPollingInterval(this.pcu_list_interval, this.poll);
            "" != this.profile_status_interval && (this.profile_status_interval = b.resetPollingInterval(this.profile_status_interval, this.pollProfileStatus));
            "" != this.inverter_production_interval && (this.inverter_production_interval = b.resetPollingInterval(this.inverter_production_interval, this.pollInverterProduction));
            "" != EnvoyBackboneApp.inventory_comm_check_interval && (EnvoyBackboneApp.inventory_comm_check_interval = b.resetPollingInterval(EnvoyBackboneApp.inventory_comm_check_interval, EnvoyBackboneApp.inventory.pollCommCheck));
            this.poll();
        },
        pollProfileStatus: function () {
            b.shouldSuspendPoll() || (b.inventory.getAgfProfileStatusData(), b.inventory.getEnsembleAgfProfileStatusData());
        },
        pollInverterProduction: function () {
            b.shouldSuspendPoll() || EnvoyBackboneApp.isPublic() || void 0 == b.activeRequests || b.activeRequests.findWhere({ id: "InverterProduction" }) || EnvoyBackboneApp.inventory.getInverterProductionData();
        },
        getInventoryData: function (a) {
            var c = this;
            b.activeRequests.add({ id: "Inventory" });
            void 0 == a && (a = !1);
            $.ajax({
                url: b.ApiUrls.Inventory,
                dataType: "json",
                success: function (b) {
                    c.parseInventoryData(b, a);
                },
                error: function (a, c, g) {
                    b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, c, g);
                },
                complete: function () {
                    b.activeRequests.remove({ id: "Inventory" });
                },
            });
        },
        getEnsembleInventoryData: function (a) {
            var c = this;
            b.activeRequests.add({ id: "EnsembleInventory" });
            void 0 == a && (a = !1);
            $.ajax({
                url: b.ApiUrls.EnsembleInventory,
                dataType: "json",
                success: function (b) {
                    c.parseEnsembleInventoryData(b, a);
                },
                error: function (a, c, g) {
                    b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, c, g);
                },
                complete: function () {
                    b.activeRequests.remove({ id: "EnsembleInventory" });
                },
            });
        },
        parseInventoryData: function (a, c) {
            var d = this,
                e = [],
                g = [],
                f = [];
            _.each(a, function (a) {
                "PCU" == a.type
                    ? _.each(a.devices, function (a) {
                          var b = parseInt(a.admin_state),
                              b = d.adminStateToAdminString(b),
                              c = d.getDeviceStatus(a),
                              f = new Date(0);
                          f.setUTCSeconds(parseInt(a.last_rpt_date));
                          var g = new Date(0);
                          g.setUTCSeconds(parseInt(a.installed));
                          var h = a.ptpn;
                          if (void 0 == h || 0 <= h.indexOf("undetermined")) h = "";
                          var k = 0;
                          void 0 != a.img_load_date && "" != a.img_load_date && ((k = new Date(0)), k.setUTCSeconds(parseInt(a.img_load_date)));
                          var y = a.img_pnum_running;
                          if (_.isEmpty(y) || 0 <= y.indexOf("undetermined")) k = 0;
                          e.push({
                              admin_state: b,
                              channel_eid: a.chaneid,
                              communicating: a.communicating,
                              created_date: g,
                              gfi_clear_message: d.getGfiClearMessage(a, c),
                              id: a.serial_num,
                              img_load_date: k,
                              img_pnum_running: y,
                              last_report_date: f,
                              param_table_part_number: h,
                              part_number: a.part_num,
                              producing: a.producing,
                              status: c,
                          });
                      })
                    : "ACB" == a.type
                    ? _.each(a.devices, function (a) {
                          var b = parseInt(a.admin_state),
                              b = d.adminStateToAdminString(b),
                              c = d.getDeviceStatus(a),
                              e = new Date(0);
                          e.setUTCSeconds(parseInt(a.last_rpt_date));
                          var f = new Date(0);
                          f.setUTCSeconds(parseInt(a.installed));
                          var h = a.ptpn;
                          if (void 0 == h || 0 <= h.indexOf("undetermined")) h = "";
                          var k = 0;
                          void 0 != a.img_load_date && "" != a.img_load_date && ((k = new Date(0)), k.setUTCSeconds(parseInt(a.img_load_date)));
                          var y = a.img_pnum_running;
                          if (_.isEmpty(y) || 0 <= y.indexOf("undetermined")) k = 0;
                          var p = _.contains(c, "envoy.cond_flags.pcu_ctrl.sleep-mode"),
                              C = !!a.sleep_enabled;
                          g.push({
                              admin_state: b,
                              channel_eid: a.chaneid,
                              communicating: a.communicating,
                              created_date: f,
                              gfi_clear_message: d.getGfiClearMessage(a, c),
                              id: a.serial_num,
                              img_load_date: k,
                              img_pnum_running: y,
                              last_report_date: e,
                              maxCellTemp: a.maxCellTemp,
                              param_table_part_number: h,
                              part_number: a.part_num,
                              percentFull: a.percentFull,
                              producing: a.operating,
                              sleep_enabled: C,
                              sleeping: p,
                              status: c,
                          });
                      })
                    : "NSRB" == a.type &&
                      _.each(a.devices, function (a) {
                          var b = parseInt(a.admin_state),
                              b = d.adminStateToAdminString(b),
                              c = d.getDeviceStatus(a),
                              e = new Date(0);
                          e.setUTCSeconds(parseInt(a.last_rpt_date));
                          var g = new Date(0);
                          g.setUTCSeconds(parseInt(a.installed));
                          var h = 0;
                          void 0 != a.img_load_date && "" != a.img_load_date && ((h = new Date(0)), h.setUTCSeconds(parseInt(a.img_load_date)));
                          var k = a.ptpn;
                          if (void 0 == k || 0 <= k.indexOf("undetermined")) k = "";
                          var y = a.img_pnum_running;
                          if (_.isEmpty(y) || 0 <= y.indexOf("undetermined")) h = 0;
                          f.push({
                              id: a.serial_num,
                              status: c,
                              admin_state: b,
                              part_number: a.part_num,
                              img_load_date: h,
                              img_pnum_running: y,
                              provisioned: a.provisioned,
                              last_report_date: e,
                              created_date: g,
                              param_table_part_number: k,
                              communicating: a.communicating,
                              relay: a.relay,
                              reason: a.reason,
                              reason_code: a.reason_code,
                              producing: a.operating,
                              line1_connected: a["line1-connected"],
                              line2_connected: a["line2-connected"],
                              line3_connected: a["line3-connected"],
                              line_count: a["line-count"],
                          });
                      });
            });
            0 < f.length && (b.nsrs.set(f), b.nsrs.updateDetectedCount(), b.mediator.trigger("microinverters:NsrInvUpdated"));
            void 0 != b.microinverters && (b.microinverters.set(e), (b.microinverters.hasReceivedInventoryData = !0), b.microinverters.updateDetectedCount());
            void 0 != b.ac_batteries && (b.ac_batteries.set(g), (b.ac_batteries.hasReceivedInventoryData = !0), b.ac_batteries.updateDetectedCount(), b.mediator.trigger("inventory:BatteryInvUpdated"));
            b.mediator.trigger("inventory:InvUpdated");
            b.mediator.trigger("inventory:CommunicatingUpdated");
            b.mediator.trigger("inventory:ProducingUpdated");
            if (0 == EnvoyBackboneApp.isPublic()) {
                if ("" == d.profile_status_interval) {
                    d.getAgfProfileStatusData();
                    var k = setInterval(this.pollProfileStatus, b.pollingFrequency());
                    d.profile_status_interval = k;
                }
                "" == d.inverter_production_interval && (this.getInverterProductionData(), (k = setInterval(this.pollInverterProduction, b.pollingFrequency())), (d.inverter_production_interval = k));
                "" == EnvoyBackboneApp.inventory_comm_check_interval && (this.getCommLevelData(), (k = setInterval(this.pollInverterCommCheck, b.pollingFrequency())), (EnvoyBackboneApp.inventory_comm_check_interval = k));
            }
            1 == c && b.microinverters.updateDetectedCount();
        },
        parseEnsembleInventoryData: function (a, c) {
            var d = this,
                e = [],
                g = [];
            _.each(a, function (a) {
                "ENCHARGE" == a.type
                    ? _.each(a.devices, function (a) {
                          var b = parseInt(a.admin_state);
                          7 == b && (b = 2);
                          var b = d.adminStateToAdminString(b),
                              c = d.getDeviceStatus(a),
                              f = new Date(0);
                          f.setUTCSeconds(parseInt(a.last_rpt_date));
                          var g = new Date(0);
                          g.setUTCSeconds(parseInt(a.installed));
                          var k = a.ptpn;
                          if (void 0 == k || 0 <= k.indexOf("undetermined")) k = "";
                          var w = 0;
                          void 0 != a.img_load_date && "" != a.img_load_date && ((w = new Date(0)), w.setUTCSeconds(parseInt(a.img_load_date)));
                          var t = a.img_pnum_running;
                          if (_.isEmpty(t) || 0 <= t.indexOf("undetermined")) w = 0;
                          e.push({
                              admin_state: b,
                              communicating: a.communicating,
                              created_date: g,
                              id: a.serial_num,
                              img_load_date: w,
                              img_pnum_running: t,
                              last_report_date: f,
                              maxCellTemp: a.maxCellTemp,
                              param_table_part_number: k,
                              part_number: a.part_num,
                              percentFull: a.percentFull,
                              producing: a.operating,
                              sleep_enabled: !!a.sleep_enabled,
                              sleeping: !!a.sleep_mode,
                              status: c,
                              last_interval_watts: a.real_power_w,
                          });
                      })
                    : "ENPOWER" == a.type &&
                      _.each(a.devices, function (a) {
                          var b = parseInt(a.admin_state),
                              b = d.adminStateToAdminString(b),
                              c = d.getDeviceStatus(a),
                              e = new Date(0);
                          e.setUTCSeconds(parseInt(a.last_rpt_date));
                          var f = new Date(0);
                          f.setUTCSeconds(parseInt(a.installed));
                          var k = a.ptpn;
                          if (void 0 == k || 0 <= k.indexOf("undetermined")) k = "";
                          var w = 0;
                          void 0 != a.img_load_date && "" != a.img_load_date && ((w = new Date(0)), w.setUTCSeconds(parseInt(a.img_load_date)));
                          var t = a.img_pnum_running;
                          if (_.isEmpty(t) || 0 <= t.indexOf("undetermined")) w = 0;
                          g.push({
                              admin_state: b,
                              communicating: a.communicating,
                              created_date: f,
                              id: a.serial_num,
                              img_load_date: w,
                              img_pnum_running: t,
                              last_report_date: e,
                              maxCellTemp: a.maxCellTemp,
                              param_table_part_number: k,
                              part_number: a.part_num,
                              producing: a.operating,
                              status: c,
                          });
                      });
            });
            void 0 != b.encharge_batteries &&
                (b.encharge_batteries.set(e), (b.encharge_batteries.hasReceivedInventoryData = !0), b.encharge_batteries.updateDetectedCount(), b.encharge_batteries.updateTargetCount(), b.mediator.trigger("inventory:BatteryInvUpdated"));
            void 0 != b.enpowers && (b.enpowers.set(g), (b.enpowers.hasReceivedInventoryData = !0), b.enpowers.updateDetectedCount(), b.enpowers.updateTargetCount());
            b.mediator.trigger("inventory:InvUpdated");
            b.mediator.trigger("inventory:CommunicatingUpdated");
            b.mediator.trigger("inventory:ProducingUpdated");
            if (0 == EnvoyBackboneApp.isPublic()) {
                if ("" == d.profile_status_interval) {
                    d.getEnsembleAgfProfileStatusData();
                    var f = setInterval(this.pollProfileStatus, b.pollingFrequency());
                    d.profile_status_interval = f;
                }
                "" == EnvoyBackboneApp.inventory_comm_check_interval && (this.getEnsembleCommLevelData(), (f = setInterval(this.pollInverterCommCheck, b.pollingFrequency())), (EnvoyBackboneApp.inventory_comm_check_interval = f));
            }
        },
        pollCommCheck: function () {
            b.shouldSuspendPoll() ||
                EnvoyBackboneApp.isPublic() ||
                void 0 == b.activeRequests ||
                (b.activeRequests.findWhere({ id: "InverterComm" }) || b.inventory.getCommLevelData(), b.activeRequests.findWhere({ id: "EnsembleComm" }) || b.inventory.getEnsembleCommLevelData());
        },
        getCommLevelData: function () {
            var a = this;
            b.activeRequests.add({ id: "InverterComm" });
            $.ajax({
                url: b.ApiUrls.InverterComm,
                type: "GET",
                dataType: "json",
                success: function (b) {
                    a.parseCommData(b);
                },
                error: function (a, d, e) {
                    b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, d, e);
                },
                complete: function () {
                    b.activeRequests.remove({ id: "InverterComm" });
                },
            });
        },
        getEnsembleCommLevelData: function () {
            var a = this;
            b.activeRequests.add({ id: "EnsembleComm" });
            $.ajax({
                url: b.ApiUrls.EnsembleComm,
                type: "GET",
                dataType: "json",
                success: function (b) {
                    a.parseEnsembleCommData(b);
                },
                error: function (a, d, e) {
                    b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, d, e);
                },
                complete: function () {
                    b.activeRequests.remove({ id: "EnsembleComm" });
                },
            });
        },
        parseDeviceCommData: function (a, b) {
            var d = [];
            a.forEach(function (a) {
                var g = _.find(b, function (b, c) {
                    return c === a.id;
                });
                d.push({ id: a.id, comm_level: g });
            });
            return d;
        },
        parseCommData: function (a) {
            b.microinverters.set(this.parseDeviceCommData(b.microinverters, a));
            b.mediator.trigger("microinverters:CommLevelUpdated");
            b.ac_batteries.set(this.parseDeviceCommData(b.ac_batteries, a));
            b.mediator.trigger("ac_batteries:CommLevelUpdated");
            b.nsrs.set(this.parseDeviceCommData(b.nsrs, a));
            b.mediator.trigger("nsrs:CommLevelUpdated");
        },
        parseEnsembleCommData: function (a) {
            b.encharge_batteries.set(this.parseEnsembleDeviceCommData(b.encharge_batteries, a));
            b.mediator.trigger("encharge_batteries:CommLevelUpdated");
            b.enpowers.set(this.parseEnsembleDeviceCommData(b.enpowers, a));
            b.mediator.trigger("enpowers:CommLevelUpdated");
        },
        parseEnsembleDeviceCommData: function (a, b) {
            var d = [];
            a.forEach(function (a) {
                var g = _.find(b, function (b, c) {
                    return c === a.id;
                });
                d.push({ id: a.id, comm_level_sub_ghz: g && g.comm_level_sub_ghz, comm_level_2_4_ghz: g && g.comm_level_2_4_ghz });
            });
            return d;
        },
        getAgfProfileStatusData: function () {
            var a = this;
            b.activeRequests.add({ id: "ProfileStatus" });
            $.ajax({
                url: b.ApiUrls.AgfProfileInverterStatus,
                type: "GET",
                success: function (b) {
                    a.parseAgfProfileStatusData(b);
                },
                error: function (a, d, e) {
                    b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, d, e);
                },
                complete: function () {
                    b.activeRequests.remove({ id: "ProfileStatus" });
                },
            });
        },
        getEnsembleAgfProfileStatusData: function () {
            var a = this;
            b.activeRequests.add({ id: "EnsembleProfileStatus" });
            $.ajax({
                url: b.ApiUrls.EnsembleAgfProfileStatus,
                type: "GET",
                dataType: "json",
                success: function (b) {
                    a.parseAgfProfileStatusData(b);
                },
                error: function (a, d, e) {
                    b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, d, e);
                },
                complete: function () {
                    b.activeRequests.remove({ id: "EnsembleProfileStatus" });
                },
            });
        },
        parseAgfProfileStatusData: function (a) {
            var c = [],
                d = [],
                e = [],
                g = [],
                f = [];
            _.each(a, function (a) {
                var h = a.admin_state,
                    l = "discovered";
                switch (h) {
                    case 1:
                        l = "discovered";
                        break;
                    case 2:
                        l = "verified";
                        break;
                    default:
                        (h = 3), (l = "deleted");
                }
                if (3 > h) {
                    var h = void 0,
                        h = a.ph_ind ? a.ph_ind : "ph-unk",
                        n = !0,
                        n = null != a.gcpa_ph_ind && "ph-unk" != a.gcpa_ph_ind && a.ph_ind == a.gcpa_ph_ind ? !0 : !1,
                        l = { id: a.serial_num, profile_status: a.status, phase: h, phase_set_by_envoy: n, device_record_type: a.device_record_type, device_type: a.device_type, admin_state: l };
                    switch (a.device_type) {
                        case "ACB":
                            d.push(l);
                            break;
                        case "ENCHARGE":
                            e.push(l);
                            b.mediator.trigger("encharge_batteries:ProfileStateLoaded");
                            break;
                        case "ENPOWER":
                            g.push(l);
                            b.mediator.trigger("enpowers:ProfileStateLoaded");
                            break;
                        case "NSRB":
                            f.push(l);
                            break;
                        default:
                            c.push(l), b.mediator.trigger("microinverters:ProfileStateLoaded");
                    }
                }
            });
            void 0 != b.ac_batteries && b.ac_batteries.add(d, { merge: !0 });
            void 0 != b.encharge_batteries && b.encharge_batteries.add(e, { merge: !0 });
            void 0 != b.enpowers && b.enpowers.add(g, { merge: !0 });
            void 0 != b.microinverters && b.microinverters.add(c, { merge: !0 });
            void 0 != b.nsrs && b.nsrs.add(f, { merge: !0 });
            (b.microinverters || b.ac_batteries || b.enpowers || b.encharge_batteries || b.nsrs) && b.mediator.trigger("inventory:ProfileStateUpdated");
        },
        getInverterProductionData: function () {
            var a = this;
            b.activeRequests.add({ id: "InverterProduction" });
            $.ajax({
                url: b.ApiUrls.InverterProduction,
                type: "GET",
                dataType: "json",
                success: function (b) {
                    a.parseInverterProductionData(b);
                },
                error: function (a, d, e) {
                    b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, d, e);
                },
                complete: function () {
                    b.activeRequests.remove({ id: "InverterProduction" });
                },
            });
        },
        parseInverterProductionData: function (a) {
            var c = !1,
                d = [],
                e = [],
                g = new Date(),
                f = 3 * BackboneConfig.polling_interval;
            g.setTime(g.getTime() - f);
            var k = _.filter(a, function (a) {
                    return 1 == a.devType || 2 == a.devType;
                }),
                h = _.filter(a, function (a) {
                    return 11 == a.devType;
                });
            b.microinverters.forEach(function (a) {
                var b = _.find(k, function (b) {
                    return b.serialNumber == a.id;
                });
                if (b) {
                    var e = parseInt(b.lastReportWatts),
                        f = new Date(0),
                        f = a.get("last_report_date"),
                        g = new Date(0);
                    g.setUTCSeconds(b.lastReportDate);
                    if (11842455e5 > g.getTime()) (g = ""), (e = 0);
                    else if (void 0 == f || "" == f || g.getTime() > f.getTime()) (f = g), (c = !0);
                    d.push({ id: b.serialNumber, last_interval_date: g, last_report_date: f, last_interval_watts: e });
                }
            });
            b.microinverters.add(d, { merge: !0 });
            b.mediator.trigger("inventory:ProducingUpdated");
            c && (b.mediator.trigger("inventory:InvUpdated"), b.mediator.trigger("inventory:CommunicatingUpdated"));
            b.ac_batteries.forEach(function (a) {
                var b = _.find(h, function (b) {
                    return b.serialNumber == a.id;
                });
                if (b) {
                    var d = parseInt(b.lastReportWatts),
                        f = new Date(0),
                        f = a.get("last_report_date"),
                        g = new Date(0);
                    g.setUTCSeconds(b.lastReportDate);
                    if (11842455e5 > g.getTime()) (g = ""), (d = 0);
                    else if (void 0 == f || "" == f || g.getTime() > f.getTime()) (f = g), (c = !0);
                    var k = "",
                        k = 1 < d ? I18n.t("envoy_backbone.power.discharging") : -12 > d ? I18n.t("envoy_backbone.power.charging") : I18n.t("envoy_backbone.power.idle");
                    e.push({ id: b.serialNumber, last_interval_date: g, last_report_date: f, last_interval_watts: Math.abs(d), signed_last_interval_watts: d, op_state_string: k });
                }
            });
            b.ac_batteries.add(e, { merge: !0 });
            b.mediator.trigger("inventory:ProducingUpdated");
            c && (b.mediator.trigger("inventory:InvUpdated"), b.mediator.trigger("inventory:CommunicatingUpdated"));
        },
        deriveAcbProducingStatus: function (a) {
            var c = !1;
            void 0 != a &&
                ((c = ""),
                (c = EnvoyBackboneApp.isPublic() ? (1 == a.provisioned ? 2 : 0) : b.ac_batteries.get(a.serial_num) ? b.ac_batteries.get(a.serial_num).get("profile_status") : 0),
                (c = a.producing && 2 == c && (b.meters ? b.meters.metersAreEnabled() : !0)));
            return c;
        },
        adminStateToAdminString: function (a) {
            switch (a) {
                case 2:
                    return "verified";
                case 3:
                    return "deleted";
                default:
                    return "discovered";
            }
        },
        getDeviceStatus: function (a) {
            var b = a.device_status;
            "envoy.global.ok" != b[0] || a.communicating || (b = []);
            return b;
        },
        getGfiClearMessage: function (a, b) {
            var d = this,
                e;
            void 0 != a.device_control &&
                _.each(a.device_control, function (a) {
                    _.each(a, function (a, g) {
                        "gficlearset" == g && 1 == a && (e = d.encodeGFIClearMessage(b));
                    });
                });
            return e;
        },
        encodeGFIClearMessage: function (a) {
            var b = void 0;
            _.contains(a, "envoy.cond_flags.pcu_chan.dcresistancelowpoweroff")
                ? (b = I18n.t("envoy_backbone.devices.device_info.pending_condition_clear", { condition_flag: I18n.t("envoy.cond_flags.pcu_chan.dcresistancelowpoweroff") }))
                : _.contains(a, "envoy.cond_flags.pcu_chan.gfitripped") && (b = I18n.t("envoy_backbone.devices.device_info.pending_condition_clear", { condition_flag: I18n.t("envoy.cond_flags.pcu_chan.gfitripped") }));
            return b;
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Models.Inverter = Backbone.Model.extend({
        defaults: {
            status: [],
            created_date: "",
            admin_state: "",
            last_report_date: "",
            last_interval_date: "",
            last_interval_watts: 0,
            communicating: "",
            profile_status: 0,
            phase: "ph-unk",
            gcpa_ph_ind: "ph-unk",
            device_record_type: "NONE",
            part_number: "",
            img_load_date: 0,
            img_pnum_running: "",
            updated_date: "",
            param_table_part_number: "",
            producing: !1,
            isExpanded: !1,
            isCommExpanded: !1,
            isProfileExpanded: !1,
            isProducingExpanded: !1,
            isFlaggedForDelete: !1,
            isFlaggedForUnDelete: !1,
        },
        initialize: function () {
            this.on("change:admin_state", this.triggerAdminStateChange, this);
            this.on("gficlear:submit", this.setClearGFIFlag, this);
        },
        triggerAdminStateChange: function () {
            b.mediator.trigger("inverter:adminStateChange");
        },
        setClearGFIFlag: function () {
            var a = this;
            if ("EU" != b.envoyModel.get("envoy_type")) {
                var c = { fname: "gfi", doset: 1, chaneid: a.get("channel_eid") };
                $.ajax({
                    url: b.ApiUrls.ClearGFIPost,
                    type: "POST",
                    dataType: "json",
                    data: $.param(c),
                    success: function (b) {
                        a.parseSetClearGFIFlag(b);
                    },
                    error: function (a, c, g) {
                        b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, c, g);
                    },
                });
            }
        },
        parseSetClearGFIFlag: function (a) {
            1 == a.gficlearset && ((a = b.inventory.encodeGFIClearMessage(this.get("status"))), this.set({ gfi_clear_message: a }), b.mediator.trigger("inventory:InvUpdated"));
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Models.Meter = Backbone.Model.extend({
        initialize: function () {
            this.formEdited = !1;
            this.isLoading = !0;
            this.systemReadingStats = !1;
            this.meterStats;
            this.localFirstConfig = !1;
            this.set("firstConfig", !1);
            this.on("change:state change:phaseCount change:measurementType change:firstConfig", this.triggerPoll, this);
        },
        generateData: function (a) {
            var b = {},
                b = void 0 == a.state ? _.extend({ state: this.get("state") }, b) : _.extend({ state: a.state }, b),
                b = void 0 == a.measurementType ? _.extend({ measurementType: this.get("measurementType") }, b) : _.extend({ measurementType: a.measurementType }, b);
            "three" == this.get("phaseMode") && (b = void 0 == a.phaseCount ? _.extend({ phaseCount: parseInt(this.get("phaseCount")) }, b) : _.extend({ phaseCount: parseInt(a.phaseCount) }, b));
            return b;
        },
        getMeterData: function (a, c) {
            var d = {};
            if (BackboneConfig.fast_data) {
                var e = "rtProduction";
                if ("net-consumption" === a || "total-consumption" === a) e = "rtConsumption";
                b.systemReadingStats.get(e) &&
                    ((e = b.systemReadingStats.get(e)),
                    0 <= a.indexOf("consumption") && (e = _.findWhere(e, { measurementType: a })),
                    (d.time = e.time),
                    (d.wNow = e.wNow),
                    (d.lines = c ? e.lines : _.first(e.lines, this.get("phaseCount"))));
            } else (d = this.get("meterReadings")), c || (d.lines = _.first(d.lines, this.get("phaseCount")));
            return d;
        },
        setSubView: function (a) {
            this.get("wizardSubView") && this.get("wizardSubView").close();
            this.unset("wizardSubView");
            this.set({ wizardSubView: a });
        },
        updateConfig: function (a) {
            var c = b.ApiUrls.UpdateMeterConfig.replace("EID", this.id),
                d = this;
            a = this.generateData(a);
            $.ajax({
                url: c,
                type: "PUT",
                dataType: "json",
                timeout: 12e4,
                data: JSON.stringify(a),
                processData: !1,
                success: function (a) {
                    d.parseUpdateConfig(a);
                },
                error: function (a, c, f) {
                    d.localFirstConfig = d.get("firstConfig");
                    b.mediator.trigger("meter:updateConfigFailed");
                    Tools.handleAjaxError(this.url, a, c, f);
                },
            });
        },
        parseUpdateConfig: function (a) {
            a = { id: a.eid, state: a.state, measurementType: a.measurementType, phaseMode: a.phaseMode, meteringStatus: Tools.translateMeterStatus(a.meteringStatus, a.state), phaseCount: a.phaseCount, firstConfig: this.localFirstConfig };
            this.set(a);
            b.mediator.trigger("meter:configUpdated");
        },
        triggerPoll: function () {
            b.mediator.trigger("meter:StateChange");
        },
        toggleFormEdited: function () {
            0 == this.formEdited && (this.formEdited = !0);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Models.MeterWizard = Backbone.Model.extend({
        meterStats: function () {
            var a = {};
            return (a =
                "consumption" === this.get("meterType")
                    ? _.findWhere(b.systemReadingStats.get(this.get("meterType")), { type: "eim", measurementType: "net-consumption" })
                    : _.findWhere(b.systemReadingStats.get(this.get("meterType")), { type: "eim" }));
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Models.Network = Backbone.Model.extend({
        defaults: {
            isPlusWeb: !1,
            ip_address: b.ip_address(),
            report_setting_polling_interval: null,
            lastReportDate: void 0,
            report_setting: void 0,
            diagnostic_remaining_minutes: 0,
            cellular_config: void 0,
            ethernet_config: void 0,
            remaining_interval: "",
        },
        initialize: function () {
            this.on("change:cellular_config", this.triggerCellularConfigUpdate, this);
            this.on("change:ethernet_config", this.evaluateEthernetPolling, this);
            this.on("confirmReportSetting:show", this.stopPollingReportSettings, this);
            this.on("confirmReportSetting:hide", this.pollReportSettings, this);
        },
        pollCellularConfig: function () {
            b.shouldSuspendPoll() || void 0 == b.activeRequests || b.activeRequests.findWhere({ id: "CellularConfig" }) || EnvoyBackboneApp.network.getCellularConfig();
        },
        startPollingCellularConfig: function () {
            if (void 0 == this.get("cellular_config_polling_interval")) {
                var a = setInterval(this.pollCellularConfig, b.pollingFrequency());
                this.set({ cellular_config_polling_interval: a });
                this.getCellularConfig();
                this.on("destroy", this.stopPollingCellularConfig, this);
            }
        },
        stopPollingCellularConfig: function () {
            clearInterval(this.get("cellular_config_polling_interval"));
            this.set({ cellular_config_polling_interval: void 0 });
        },
        getCellularConfig: function () {
            var a = this;
            b.activeRequests.add({ id: "CellularConfig" });
            $.ajax({
                url: b.ApiUrls.CellularConfig,
                type: "GET",
                dataType: "json",
                success: function (c) {
                    a.parseCellularConfig(c);
                    b.mediator.trigger("cellular:ConfigLoaded");
                    b.mediator.trigger("network:DiagnosticDataLoaded");
                },
                error: function (a, d, e) {
                    b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, d, e);
                },
                complete: function () {
                    b.activeRequests.remove({ id: "CellularConfig" });
                },
            });
        },
        parseCellularConfig: function (a) {
            if (_.isEmpty(a)) b.network.set({ cellular_config: void 0 });
            else {
                var c = a.cellular.status.network,
                    d = a.cellular.config.carrier,
                    e = Tools.convertRssiToBars(a.cellular.status.rssi),
                    g = a.cellular.modem.mei,
                    f = a.cellular.modem.iccid,
                    k = a.cellular.modem.imsi;
                a = a.cellular.status.gen;
                var h = _.clone(this.get("cellular_config"));
                void 0 == h && (h = {});
                c = _.extend(h, { connected: c, carrier: d, bars: e, gen: a, mei: g, iccid: f, imsi: k });
                b.network.set({ cellular_config: c });
            }
        },
        initializeReportSettings: function () {
            this.getReportSettings();
            var a = setInterval(this.pollReportSettings, b.pollingFrequency());
            this.set({ report_setting_polling_interval: a });
            this.on("destroy", this.stopPollingReportSettings, this);
        },
        pollReportSettings: function () {
            b.shouldSuspendPoll() || void 0 == b.activeRequests || b.activeRequests.findWhere({ id: "ReportSettingsGet" }) || EnvoyBackboneApp.network.getReportSettings();
        },
        stopPollingReportSettings: function () {
            clearInterval(this.get("report_setting_polling_interval"));
            0 < this.get("remaining_interval") && clearInterval(this.get("remaining_interval"));
        },
        getReportSettings: function () {
            var a = this;
            b.activeRequests.add({ id: "ReportSettingsGet" });
            $.ajax({
                url: b.ApiUrls.ReportSettingsGet,
                type: "GET",
                success: function (b) {
                    a.parseReportSettings(b);
                },
                error: function (a, d, e) {
                    b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, d, e);
                },
                complete: function () {
                    b.activeRequests.remove({ id: "ReportSettingsGet" });
                },
            });
        },
        parseReportSettings: function (a) {
            var c = 0,
                d = a.reportsettings.diag_remaining_secs;
            0 < d && 60 > d ? (c = 1) : 60 < d && (c = Math.round(d / 60));
            d = this.get("remaining_interval");
            0 < d && clearInterval(this.get("remaining_interval"));
            0 < c && (d = setInterval(this.decrementRemainingMinutes, 6e4));
            this.set({ report_setting: a.reportsettings.bandwidth, diagnostic_remaining_minutes: c, remaining_interval: d });
            b.mediator.trigger("network:ReportSettingsUpdated");
        },
        putReportSettings: function () {
            var a = this,
                c = { reportsettings: { bandwidth: "low" == this.get("report_setting") ? "high" : "low", diag_duration_mins: 0 } };
            "cellular" == this.get("primary_network") && (c = { reportsettings: { bandwidth: "low", diag_duration_mins: 120 } });
            c = JSON.stringify(c);
            $.ajax({
                url: b.ApiUrls.ReportSettingsPut,
                type: "PUT",
                data: c,
                success: function (b) {
                    b.hasOwnProperty("reportsettings") && a.parseReportSettings(b);
                },
                error: function (a, c, g) {
                    b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, c, g);
                },
            });
        },
        getEthernetConfig: function () {
            var a = this;
            b.activeRequests.add({ id: "EthernetConfigGet" });
            $.ajax({
                url: b.ApiUrls.EthernetConfigGet,
                type: "GET",
                dataType: "json",
                success: function (c) {
                    a.parseEthernetConfig(c);
                    b.mediator.trigger("network:EthernetConfigLoaded");
                    b.mediator.trigger("network:DiagnosticDataLoaded");
                },
                error: function (a, d, e) {
                    b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, d, e);
                },
                complete: function () {
                    b.activeRequests.remove({ id: "EthernetConfigGet" });
                },
            });
        },
        parseEthernetConfig: function (a) {
            if ("eth0" == a.interface) {
                var c = _.clone(b.network.get("ethernet_config"));
                void 0 == c && (c = {});
                a = _.extend(c, { ip_address: a.ip, dhcp: a.dhcp, netmask: a.netmask, gateway_ip: a.gateway, primary_dns: a.primary_dns, secondary_dns: a.secondary_dns });
                this.set({ ethernet_config: a });
            }
        },
        evaluateEthernetPolling: function () {
            b.mediator.trigger("network:EthernetConfigChange");
            void 0 != this.get("ethernet_config") ? this.startPollingEthernetConfig(!1) : this.stopPollingEthernetConfig();
        },
        pollEthernetConfig: function () {
            b.shouldSuspendPoll() || void 0 == b.activeRequests || b.activeRequests.findWhere({ id: "EthernetConfigGet" }) || EnvoyBackboneApp.network.getEthernetConfig();
        },
        startPollingEthernetConfig: function (a) {
            void 0 == this.get("ethernet_config_polling_interval")
                ? ((a = setInterval(this.pollEthernetConfig, b.pollingFrequency())), this.set({ ethernet_config_polling_interval: a }), this.getEthernetConfig(), this.on("destroy", this.stopPollingEthernetConfig, this))
                : 1 == b.isPublic() && 1 == a && this.getEthernetConfig();
        },
        stopPollingEthernetConfig: function () {
            clearInterval(this.get("ethernet_config_polling_interval"));
            this.set({ ethernet_config_polling_interval: void 0 });
        },
        updateEthernetConfig: function (a) {
            var c = this;
            b.wifiDoingScaryStuff = !0;
            dhcp_value = "on";
            0 == a.dhcp && (dhcp_value = "off");
            a =
                (1 == this.get("ethernet_config").dhcp ? "on" : "off") == dhcp_value
                    ? { fname: "set", interface: "eth0", dhcp: dhcp_value, deviceip: a.ip_address, netmask: a.netmask, gatewayip: a.gateway_ip, primarydns: a.primary_dns, secondarydns: a.secondary_dns }
                    : { fname: "set", interface: "eth0", dhcp: dhcp_value };
            $.ajax({
                url: b.ApiUrls.EthernetConfigPut,
                type: "POST",
                dataType: "json",
                timeout: 12e4,
                data: $.param(a),
                success: function (a) {
                    c.parseUpdateEthernetConfig(a);
                    b.wifiDoingScaryStuff = !1;
                },
                error: function (a, c, g) {
                    this.getEthernetConfig();
                    b.wifiDoingScaryStuff = !1;
                    b.mediator.trigger("network:EthernetConfigChange");
                    Tools.handleAjaxError(this.url, a, c, g);
                },
            });
        },
        parseUpdateEthernetConfig: function (a) {
            var c = _.clone(b.network.get("ethernet_config"));
            void 0 == c && (c = {});
            a = _.extend(c, { dhcp: a.dhcp, ip_address: a.ip, netmask: a.netmask, gateway_ip: a.gateway, primary_dns: a.primary_dns, secondary_dns: a.secondary_dns });
            b.network.set({ ethernet_config: a });
            a == c && b.mediator.trigger("network:EthernetConfigChange");
        },
        updateIPAddress: function () {
            var a = this;
            b.wifiDoingScaryStuff = !0;
            $.ajax({
                url: b.ApiUrls.DhcpGetNewIp,
                type: "POST",
                dataType: "json",
                data: $.param({ fname: "getnewipaddr", interface: "eth0" }),
                success: function (c) {
                    a.parseUpdateIPAddress(c);
                    b.wifiDoingScaryStuff = !1;
                },
                error: function (c, d, e) {
                    b.mediator.trigger("network:EthernetConfigChange");
                    a.getEthernetConfig();
                    b.wifiDoingScaryStuff = !1;
                    Tools.handleAjaxError(this.url, c, d, e);
                },
            });
        },
        parseUpdateIPAddress: function (a) {
            var c = _.clone(b.network.get("ethernet_config"));
            void 0 == c && (c = {});
            a = _.extend(c, { ip_address: a.ip });
            b.network.set({ ethernet_config: a });
            a == c && b.mediator.trigger("network:EthernetConfigChange");
        },
        decrementRemainingMinutes: function () {
            var a = EnvoyBackboneApp.network,
                b = a.get("diagnostic_remaining_minutes");
            1 < b ? a.set({ diagnostic_remaining_minutes: b - 1 }) : 0 < a.get("diagnostic_remaining_minutes") && (clearInterval(a.get("remaining_interval")), a.set({ remaining_interval: "" }));
        },
        triggerCellularConfigUpdate: function () {
            b.mediator.trigger("network:CellularConfigChange");
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Models.NetworkConnectivity = Backbone.Model.extend({
        initialize: function () {
            b.network.on("change:primary_network", this.checkData, this);
        },
        getNetworkConnectivityData: function () {
            var a = this;
            $.ajax({
                url: b.ApiUrls.DiagnosticNetworkCheck,
                type: "POST",
                dataType: "json",
                data: $.param({ fname: "connectivitycheck" }),
                success: function (b) {
                    a.parseNetworkConnectivityData(b);
                },
                error: function (a, b, e) {
                    Tools.handleAjaxError(this.url, a, b, e);
                },
                complete: function () {
                    b.mediator.trigger("network:ConnectivityCheckUpdate");
                },
            });
        },
        parseNetworkConnectivityData: function (a) {
            if (_.isEmpty(a)) this.clear();
            else {
                var b = _.omit(a, "primary_interface"),
                    d = "ethernet";
                "wlan0" == a.primary_interface ? (d = "wifi") : "ppp0" == a.primary_interface && (d = "cellular");
                b.primary_network = d;
                b.timestamp = new Date();
                b.isLoading = !1;
                this.set(b);
            }
        },
        checkData: function () {
            b.network.get("primary_network") != this.get("primary_network") && (this.clear(), b.mediator.trigger("network:ConnectivityCheckUpdate"));
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Models.NetworkPing = Backbone.Model.extend({
        initialize: function () {
            b.network.on("change:primary_network", this.checkData, this);
        },
        getNetworkPingData: function (a) {
            var c = this;
            $.ajax({
                url: b.ApiUrls.DiagnosticNetworkCheck,
                type: "POST",
                dataType: "json",
                data: $.param({ fname: "ping", pingip: a }),
                success: function (a) {
                    c.parseNetworkPingData(a);
                },
                error: function (a, b, c) {
                    Tools.handleAjaxError(this.url, a, b, c);
                },
                complete: function () {
                    b.mediator.trigger("network:PingUpdate");
                },
            });
        },
        parseNetworkPingData: function (a) {
            if (_.isEmpty(a)) this.clear();
            else {
                var b = _.omit(a, "interface"),
                    d = "ethernet";
                "wlan0" == a["interface"] ? (d = "wifi") : "ppp0" == a["interface"] && (d = "cellular");
                b.primary_network = d;
                b.timestamp = new Date();
                b.isLoading = !1;
                this.set(b);
            }
        },
        checkData: function () {
            b.network.get("primary_network") != this.get("primary_network") && (this.clear(), b.mediator.trigger("network:PingUpdate"));
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Models.NetworkRouteCheck = Backbone.Model.extend({
        initialize: function () {
            b.network.on("change:primary_network", this.checkData, this);
        },
        getNetworkRouteData: function () {
            var a = this;
            $.ajax({
                url: b.ApiUrls.DiagnosticNetworkCheck,
                type: "POST",
                dataType: "json",
                data: $.param({ fname: "getroute" }),
                success: function (b) {
                    a.parseNetworkRouteData(b);
                },
                error: function (a, b, e) {
                    Tools.handleAjaxError(this.url, a, b, e);
                },
                complete: function () {
                    b.mediator.trigger("network:RouteCheckUpdate");
                },
            });
        },
        parseNetworkRouteData: function (a) {
            if (_.isEmpty(a)) this.clear();
            else {
                var b = {},
                    d = [];
                _.each(a, function (a) {
                    if ("0.0.0.0" == a.destination) {
                        var b = _.omit(a, "iface", "entry"),
                            c = "ethernet";
                        "wlan0" == a.iface ? (c = "wifi") : "ppp0" == a.iface && (c = "cellular");
                        b.network = c;
                        d.push(b);
                    }
                });
                b.results = d;
                b.primary_network = d[0].network;
                b.timestamp = new Date();
                b.isLoading = !1;
                this.set(b);
            }
        },
        checkData: function () {
            b.network.get("primary_network") != this.get("primary_network") && (this.clear(), b.mediator.trigger("network:RouteCheckUpdate"));
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Models.Nsr = Backbone.Model.extend({
        defaults: {
            status: [],
            created_date: "",
            admin_state: "",
            last_report_date: "",
            last_interval_date: "",
            last_interval_watts: 0,
            communicating: "",
            profile_status: 0,
            phase: "ph-unk",
            gcpa_ph_ind: "ph-unk",
            device_record_type: "NONE",
            part_number: "",
            img_load_date: 0,
            img_pnum_running: "",
            updated_date: "",
            param_table_part_number: "",
            producing: !1,
            isExpanded: !1,
            isCommExpanded: !1,
            isProfileExpanded: !1,
            isProducingExpanded: !1,
            isFlaggedForDelete: !1,
            isFlaggedForUnDelete: !1,
        },
        initialize: function () {
            this.on("change:admin_state", this.triggerAdminStateChange, this);
        },
        triggerAdminStateChange: function () {
            b.mediator.trigger("nsr:adminStateChange");
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Models.PMUMeter = Backbone.Model.extend({});
})(EnvoyBackboneApp);
(function (b) {
    b.Models.Season = Backbone.Model.extend({ id: "season_1", start: "", days: [] });
})(EnvoyBackboneApp);
(function (b) {
    b.Models.SoftwarePackage = Backbone.Model.extend({});
})(EnvoyBackboneApp);
(function (b) {
    b.Models.SystemReadingStats = Backbone.Model.extend({
        defaults: {
            production: [],
            consumption: [],
            storage: [],
            hasProductionMeters: !1,
            eimStats: [
                {
                    labelKey: "active_power",
                    showBeforeEnabled: !0,
                    headers: [
                        { endpoint_stat: "wNow", units: "W", showBeforeEnabled: !0, showReadingTime: !0, realTimeKey: "p", normalize_reading: !0, abs_value: !1, aggregate: !0 },
                        { endpoint_stat: "apprntPwr", units: "VA", showBeforeEnabled: !1, showReadingTime: !1, realTimeKey: "s", normalize_reading: !0, sub_aggregate: !0, aggregateLabelKey: "apparent_power" },
                        { endpoint_stat: "rmsCurrent", units: "A", showBeforeEnabled: !1, showReadingTime: !1, realTimeKey: "i", normalize_reading: !1, aggregate: !1 },
                        { endpoint_stat: "rmsVoltage", units: "Vrms", showBeforeEnabled: !0, showReadingTime: !1, realTimeKey: "v", normalize_reading: !1, decimal_places: 1, aggregate: !1 },
                        { endpoint_stat: "pwrFactor", units: "PF", showBeforeEnabled: !1, showReadingTime: !1, realTimeKey: "pf", normalize_reading: !1, abs_value: !1, aggregate: !1 },
                    ],
                },
                {
                    labelKey: "active_energy",
                    showBeforeEnabled: !1,
                    headers: [
                        { endpoint_stat: "whToday", units: "Wh", showBeforeEnabled: !1, showReadingTime: !1, normalize_reading: !0, aggregate: !0, descriptor_key: "today" },
                        { endpoint_stat: "vahToday", units: "VAh", showBeforeEnabled: !1, showReadingTime: !1, normalize_reading: !0, aggregateLabelKey: "apparent_energy", sub_aggregate: !0 },
                    ],
                },
                {
                    labelKey: "active_energy_lt",
                    showBeforeEnabled: !1,
                    headers: [
                        { endpoint_stat: "whLifetime", units: "Wh", showReadingTime: !1, normalize_reading: !0, aggregate: !0, descriptor_key: "lifetime" },
                        { endpoint_stat: "vahLifetime", units: "VAh", showBeforeEnabled: !1, showReadingTime: !1, normalize_reading: !0, sub_aggregate: !0, aggregateLabelKey: "apparent_energy" },
                    ],
                },
            ],
        },
        polling_interval: null,
        initialize: function () {
            var a = setInterval(this.poll, b.pollingFrequency());
            this.set({ polling_interval: a });
            this.getData();
            this.on("destroy", this.stopPolling, this);
            b.mediator.on("meter:StateChange", this.getData, this);
            b.mediator.on("meter_wizard:getMeterStats", this.getAllData, this);
            b.mediator.on("meter:getMeterData", this.getData, this);
            b.mediator.on("app:targetCountUpdated", this.resetPollingInterval, this);
            this.connectionTimer = null;
            this.debug_data = !1;
        },
        poll: function () {
            b.shouldSuspendPoll() || void 0 == b.activeRequests || b.activeRequests.findWhere({ id: "SystemReadingStats" }) || b.systemReadingStats.getData();
        },
        resetPollingInterval: function () {
            var a = b.resetPollingInterval(this.get("polling_interval"), this.poll);
            this.set({ polling_interval: a });
            this.poll();
        },
        stopPolling: function () {
            clearInterval(this.get("polling_interval"));
        },
        getAllData: function () {
            this.getData(!0);
        },
        getData: function (a) {
            var c = this;
            b.activeRequests.add({ id: "SystemReadingStats" });
            $.ajax({
                url: b.ApiUrls.SystemReadingStats,
                type: "GET",
                dataType: "json",
                success: function (b) {
                    c.parseData(b, a);
                },
                error: function (a, c, g) {
                    b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, c, g);
                },
                complete: function () {
                    b.activeRequests.remove({ id: "SystemReadingStats" });
                },
            });
        },
        parseData: function (a, c) {
            var d = this,
                e = [],
                g = !1;
            _.each(a.production, function (a) {
                var b = new Date(1e3 * a.readingTime),
                    f = { getAll: c, type: a.type, time: b, activeCount: a.activeCount };
                if ("eim" == a.type) {
                    var h = [],
                        k,
                        l;
                    g = !0;
                    _.each(d.get("eimStats"), function (b) {
                        _.each(b.headers, function (b) {
                            l = k = a[b.endpoint_stat];
                            void 0 != k &&
                                (b.normalize_reading
                                    ? (f[b.endpoint_stat] = Precision.normalize([k], b.units, b.abs_value, null)[0])
                                    : (b.hasOwnProperty("decimal_places") && (l = k.toFixed(b.decimal_places)), b.abs_value && (l = Math.abs(l)), (f[b.endpoint_stat] = { value: k, formatted: l, units: b.units })));
                            _.each(a.lines, function (c, d) {
                                void 0 == h[d] && h.push({});
                                k = a.lines[d][b.endpoint_stat];
                                void 0 != k &&
                                    ((l = k),
                                    b.normalize_reading
                                        ? (h[d][b.endpoint_stat] = Precision.normalize([k], b.units, b.abs_value, null)[0])
                                        : (b.hasOwnProperty("decimal_places") && (l = k.toFixed(b.decimal_places)), b.abs_value && (l = Math.abs(l)), (h[d][b.endpoint_stat] = { value: k, formatted: l, units: b.units })));
                            });
                        });
                    });
                    f.lines = _.clone(h);
                } else {
                    var n = Precision.normalize([a.whLifetime], "Wh", !1, null)[0];
                    if (a.hasOwnProperty("wNow")) {
                        var q = a.wNow;
                        0 > q && (q = 0);
                        q = Precision.normalize([q], "W", !0, null)[0];
                    }
                    f = { type: a.type, whLifetime: n, wNow: q, time: b, activeCount: a.activeCount };
                }
                e.push(f);
            });
            var f = [],
                k = {},
                h,
                l;
            _.each(a.consumption, function (a) {
                k = { type: a.type, measurementType: a.measurementType, time: new Date(1e3 * a.readingTime), activeCount: a.activeCount };
                if ("eim" == a.type) {
                    var b = [];
                    g = !0;
                    _.each(d.get("eimStats"), function (c) {
                        _.each(c.headers, function (c) {
                            h = a[c.endpoint_stat];
                            void 0 != h &&
                                ((l = h),
                                c.normalize_reading
                                    ? (k[c.endpoint_stat] = Precision.normalize([h], c.units, c.abs_value, null)[0])
                                    : (c.hasOwnProperty("decimal_places") && (l = h.toFixed(c.decimal_places)), c.abs_value && (l = Math.abs(l)), (k[c.endpoint_stat] = { value: h, formatted: l, units: c.units })));
                            _.each(a.lines, function (d, e) {
                                void 0 == b[e] && b.push({});
                                h = a.lines[e][c.endpoint_stat];
                                void 0 != h &&
                                    ((l = h),
                                    c.normalize_reading
                                        ? (b[e][c.endpoint_stat] = Precision.normalize([h], c.units, c.abs_value, null)[0])
                                        : (c.hasOwnProperty("decimal_places") && (l = h.toFixed(c.decimal_places)), c.abs_value && (l = Math.abs(l)), (b[e][c.endpoint_stat] = { value: h, formatted: l, units: c.units })));
                            });
                        });
                    });
                    k.lines = b;
                }
                f.push(k);
            });
            var n = [],
                q = {};
            _.each(a.storage, function (a) {
                var b = new Date(1e3 * a.readingTime),
                    c = Precision.normalize([a.whNow], "Wh", !1, null)[0],
                    d = "";
                if (a.hasOwnProperty("wNow"))
                    var e = Precision.normalize([a.wNow], "W", !0, null)[0],
                        d = a.state ? I18n.t("envoy_backbone.power." + a.state) : "";
                q = { type: a.type, whNow: c, wNow: e, time: b, activeCount: a.activeCount, opState: d, percentFull: a.percentFull };
                n.push(q);
            });
            this.set({ production: e, consumption: f, storage: n, hasProductionMeters: g });
            b.mediator.trigger("systemReadingStats:updated");
        },
        getRealTimeStats: function (a) {
            var c = { lines: [] },
                d = [],
                e = {},
                g = [],
                f = 0,
                k = { wNow: 0, apprntPwr: 0 };
            a = JSON.parse(a.data);
            var h = b.meters.findWhere({ type: "eim_production" }).get("phaseCount");
            _.each(a.production, function (a, b) {
                c = { type: "rt_eim", time: new Date(), activeCount: h, lines: [] };
                var d, u;
                _.each(EnvoyBackboneApp.systemReadingStats.get("eimStats"), function (b) {
                    _.each(b.headers, function (b) {
                        void 0 == g[f] && g.push({});
                        if (b.hasOwnProperty("realTimeKey") && ((d = a[b.realTimeKey]), void 0 != d))
                            if (((u = d), b.normalize_reading)) {
                                if (((g[f][b.endpoint_stat] = Precision.normalize([d], b.units, b.abs_value, null)[0]), "wNow" == b.endpoint_stat || "apprntPwr" == b.endpoint_stat))
                                    (k[b.endpoint_stat] += d), (e[b.endpoint_stat] = Precision.normalize([k[b.endpoint_stat]], b.units, b.abs_value, null)[0]);
                            } else b.hasOwnProperty("decimal_places") && (u = d.toFixed(b.decimal_places)), b.abs_value && (u = Math.abs(u)), (g[f][b.endpoint_stat] = { value: d, formatted: u, units: b.units });
                    });
                });
                f++;
            });
            _.extend(c, e);
            c.lines = _.clone(g);
            EnvoyBackboneApp.systemReadingStats.set({ rtProduction: _.clone(c) });
            a = _.pick(a, ["net-consumption", "total-consumption"]);
            _.each(a, function (a, b) {
                var c = { type: "rt_eim", measurementType: b, time: new Date(), activeCount: h, lines: [] };
                f = 0;
                g = [];
                k = { wNow: 0, apprntPwr: 0 };
                e = { wNow: 0, apprntPwr: 0 };
                _.each(a, function (a) {
                    _.each(EnvoyBackboneApp.systemReadingStats.get("eimStats"), function (b) {
                        _.each(b.headers, function (b) {
                            void 0 === g[f] && g.push({});
                            if (b.hasOwnProperty("realTimeKey")) {
                                var c = a[b.realTimeKey];
                                if (void 0 !== c) {
                                    var d = c;
                                    if (b.normalize_reading) {
                                        if (((g[f][b.endpoint_stat] = Precision.normalize([c], b.units, b.abs_value, null)[0]), "wNow" === b.endpoint_stat || "apprntPwr" === b.endpoint_stat))
                                            (k[b.endpoint_stat] += c), (e[b.endpoint_stat] = _.clone(Precision.normalize([k[b.endpoint_stat]], b.units, b.abs_value, null)[0]));
                                    } else b.hasOwnProperty("decimal_places") && (d = c.toFixed(b.decimal_places)), b.abs_value && (d = Math.abs(d)), (g[f][b.endpoint_stat] = { value: c, formatted: d, units: b.units });
                                }
                            }
                        });
                    });
                    f++;
                });
                _.extend(c, e);
                c.lines = _.clone(g);
                d.push(_.clone(c));
            });
            EnvoyBackboneApp.systemReadingStats.set({ rtConsumption: d });
            b.mediator.trigger("systemReadingStats:fast_data_update");
        },
        eventListener: function (a) {
            try {
                var b = JSON.parse(a.data);
                EnvoyBackboneApp.systemReadingStats.debug_data && console.log(a.data);
                callback(b);
                clearTimeout(watchdog_timer);
            } catch (d) {}
        },
        startConnection: function () {
            if (BackboneConfig.fast_data && !this.connectionDone) {
                if (b.ip_address()) {
                    clearTimeout(this.connectionTimer);
                    this.connectionTimer = null;
                    var a = b.host();
                    b.envoyModel.get("fast_data_port") && "none" != b.envoyModel.get("fast_data_port") && (a = b.network.get("ethernet_config").ip_address + ":" + b.envoyModel.get("fast_data_port"));
                    b.systemReadingStats.createConnection(b.protocol() + "//" + a + "/stream/meter", 5, b.systemReadingStats.getRealTimeStats);
                    this.connectionDone = !0;
                }
                this.connectionDone || this.connectionTimer || (console.log("not ready, starting timer."), (this.connectionTimer = setTimeout(this.startConnection, 1e3)));
            }
        },
        createConnection: function (a, b, d) {
            console.log("connecting...");
            EnvoyBackboneApp.systemReadingStats.eventSource || ((EnvoyBackboneApp.systemReadingStats.eventSource = new EventSource(a)), console.dir(EnvoyBackboneApp.systemReadingStats.eventSource));
            EnvoyBackboneApp.systemReadingStats.eventSource.addEventListener("message", d, !1);
            console.log("done ");
        },
        stopEventListener: function (a) {
            this.connectionTimer && (console.log("stopping timer..."), clearTimeout(this.connectionTimer), (this.connectionTimer = null));
            EnvoyBackboneApp.systemReadingStats.eventSource &&
                (console.log("stopping listener..."),
                EnvoyBackboneApp.systemReadingStats.eventSource.close(),
                EnvoyBackboneApp.systemReadingStats.eventSource.removeEventListener("message", a),
                (EnvoyBackboneApp.systemReadingStats.eventSource = null));
            this.connectionDone = !1;
        },
        getEimStats: function (a) {
            a = _.findWhere(a, { type: "eim" });
            return _.omit(a, "time");
        },
        productionData: function (a) {
            if (this.has("production") && !(1 > this.get("production").length))
                if ("meters" == a) {
                    a = _.findWhere(this.get("production"), { type: "eim" });
                    if (void 0 != a && 0 < a.activeCount) return a;
                    a = _.findWhere(this.get("production"), { type: "rgms" });
                    if (void 0 != a && 0 < a.activeCount) return a;
                    a = _.findWhere(this.get("production"), { type: "pmus" });
                    if (void 0 != a && 0 < a.activeCount) return a;
                } else return (a = _.findWhere(this.get("production"), { type: "inverters" }));
        },
        consumptionData: function (a) {
            if (this.has("consumption") && !(1 > this.get("consumption").length) && ((a = _.findWhere(this.get("consumption"), { type: "eim", measurementType: a })), void 0 != a && 0 < a.activeCount)) return a;
        },
        getConsumptionData: function (a) {
            if (this.has("consumption") && !(1 > this.get("consumption").length)) return _.findWhere(this.get("consumption"), { type: "eim", measurementType: a });
        },
        storageData: function () {
            var a;
            if (this.has("storage") && !(1 > this.get("storage").length) && ((a = _.findWhere(this.get("storage"), { type: "acb" })), void 0 != a && 0 < a.activeCount)) return a;
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Models.Tariff = Backbone.DeepModel.extend({
        defaults: {
            tariff_set: !1,
            tariff_struct: void 0,
            envoy_tariff_type: void 0,
            seasonal_rates: !1,
            weekend_rates: !1,
            currency_symbol: "$",
            tariff: { currency: { code: "USD" }, single_rate: { rate: null } },
            singleRateOneSeasonsCollection: {},
            singleRateTwoSeasonsCollection: {},
            touOneSeasonCollection: {},
            touOneSeasonWeekendCollection: {},
            touSeasonsCollection: {},
            touSeasonsWeekendCollection: {},
            tiersCollection: {},
            activeCollection: {},
            schedule: {},
        },
        initialize: function () {
            this.singleRateOneSeasonsCollection = new b.Collections.Seasons([], { name: "singleRateOneSeason", tariffType: "flat" });
            this.singleRateOneSeasonWeekendCollection = new b.Collections.Seasons([], { name: "singleRateOneSeasonWeekend", tariffType: "flat" });
            this.singleRateTwoSeasonsCollection = new b.Collections.Seasons([], { name: "singleRateTwoSeasons", tariffType: "flat" });
            this.singleRateTwoSeasonsWeekendCollection = new b.Collections.Seasons([], { name: "singleRateTwoSeasonsWeekends", tariffType: "flat" });
            this.addSingleRateSeason("season_1", this.singleRateOneSeasonsCollection);
            this.addSingleRateSeason("season_1", this.singleRateOneSeasonWeekendCollection);
            this.addSingleRateWeekendDays("season_1", this.singleRateOneSeasonWeekendCollection);
            this.addSingleRateSeason("season_1", this.singleRateTwoSeasonsCollection);
            this.addSingleRateSeason("season_2", this.singleRateTwoSeasonsCollection);
            this.addSingleRateSeason("season_1", this.singleRateTwoSeasonsWeekendCollection);
            this.addSingleRateWeekendDays("season_1", this.singleRateTwoSeasonsWeekendCollection);
            this.addSingleRateSeason("season_2", this.singleRateTwoSeasonsWeekendCollection);
            this.addSingleRateWeekendDays("season_2", this.singleRateTwoSeasonsWeekendCollection);
            this.touOneSeasonCollection = new b.Collections.Seasons([], { name: "touOneSeason", tariffType: "tou" });
            this.touOneSeasonWeekendCollection = new b.Collections.Seasons([], { name: "touOneSeasonWeekends", tariffType: "tou" });
            this.touSeasonsCollection = new b.Collections.Seasons([], { name: "touTwoSeasons", tariffType: "tou" });
            this.touSeasonsWeekendCollection = new b.Collections.Seasons([], { name: "touTwoSeasonsWeekends", tariffType: "tou" });
            this.activeCollection = this.singleRateOneSeasonsCollection;
            this.tiersCollection = new b.Collections.Tiers();
            this.addTouSeason("season_1", this.touOneSeasonCollection);
            this.addTouSeason("season_1", this.touOneSeasonWeekendCollection);
            this.addTouWeekendDays(this.touOneSeasonWeekendCollection, "season_1");
            this.addTouSeason("season_1", this.touSeasonsCollection);
            this.addTouSeason("season_2", this.touSeasonsCollection);
            this.addTouSeason("season_1", this.touSeasonsWeekendCollection);
            this.addTouSeason("season_2", this.touSeasonsWeekendCollection);
            this.addTouWeekendDays(this.touSeasonsWeekendCollection, "season_1");
            this.addTouWeekendDays(this.touSeasonsWeekendCollection, "season_2");
            this.tieredrOneSeasonCollection = new b.Collections.Seasons([], { name: "tieredOneSeason", tariffType: "tiered" });
            this.addTieredSeason("season_1", this.tieredrOneSeasonCollection);
            this.tieredTwoSeasonsCollection = new b.Collections.Seasons([], { name: "tieredTwoSeasons", tariffType: "tiered" });
            this.addTieredSeason("season_1", this.tieredTwoSeasonsCollection);
            this.addTieredSeason("season_2", this.tieredTwoSeasonsCollection);
        },
        poll: function () {
            b.shouldSuspendPoll() || void 0 == b.activeRequests || b.activeRequests.findWhere({ id: "TariffSettingsGet" }) || b.tariff.getTariffSettings();
        },
        resetPollingInterval: function () {
            this.polling_interval = b.resetPollingInterval(this.polling_interval, this.poll);
        },
        startPollingTariffData: function () {
            if (void 0 == this.get("polling_interval")) {
                var a = setInterval(b.tariff.poll, b.pollingFrequency());
                this.set({ polling_interval: a });
                b.tariff.getTariffSettings();
                this.on("destroy", this.stopPollingTariffData, this);
            }
        },
        stopPollingTariffData: function () {
            clearInterval(this.get("polling_interval"));
            this.set({ polling_interval: void 0 });
        },
        getTariffSettings: function () {
            void 0 == b.activeRequests ||
                b.activeRequests.findWhere({ id: "TariffSettingsGet" }) ||
                (b.activeRequests.add({ id: "TariffSettingsGet" }),
                $.ajax({
                    url: b.ApiUrls.TariffSettingsGet,
                    type: "GET",
                    success: function (a) {
                        b.tariff.parseTariffSettings(a);
                    },
                    error: function (a, b, d) {
                        Tools.handleAjaxError(this.url, a, b, d);
                    },
                    complete: function () {
                        b.activeRequests.remove({ id: "TariffSettingsGet" });
                        b.mediator.trigger("tariff:getComplete");
                    },
                }));
        },
        parseTariffSettings: function (a) {
            if (null != a) {
                var b = this;
                if (this.tariffIsSet(a)) {
                    var d = Tools.tariffGetHash(a, "tariff"),
                        e = {},
                        g = 0;
                    _.extend(e, { currency: { code: Tools.tariffGetString(d.currency, "code", "USD") } });
                    _.extend(e, { single_rate: { rate: Tools.tariffGetFloat(Tools.tariffGetHash(d, "single_rate"), "rate", null) } });
                    _.extend(e, {
                        seasons: _.map(Tools.tariffGetArray(d, "seasons"), function (a, d) {
                            return {
                                id: Tools.tariffValidateId(a, "season", d),
                                start: Tools.tariffGetString(a, "start"),
                                days: _.map(Tools.tariffGetArray(a, "days"), function (a) {
                                    return {
                                        id: Tools.tariffValidateId(a, "day", d),
                                        days: Tools.tariffGetDays(a, "days", "all"),
                                        must_charge_start: Tools.clamp(Tools.tariffGetInt(a, "must_charge_start", 180), 0, 1439),
                                        must_charge_duration: Tools.clamp(Tools.tariffGetInt(a, "must_charge_duration", 0), 0, 1439),
                                        periods: _.map(Tools.tariffGetArray(a, "periods"), function (a) {
                                            "offpeak" === a.id && (g--, (a.id = ""), (a.start = 1440));
                                            return { id: Tools.tariffValidateId(a, "period", g++), start: 10 * Math.ceil(Tools.tariffGetInt(a, "start", 0) / 10), rate: Tools.tariffGetFloat(a, "rate", null) };
                                        }),
                                    };
                                }),
                                tiers: _.map(Tools.tariffGetArray(a, "tiers"), function (a, d, e) {
                                    var f = 100;
                                    e[d - 1] && (f = b.calcPercentFromLimit(Tools.tariffGetInt(a, "limit", 0), Tools.tariffGetFloat(e[0], "limit", 0)));
                                    return { id: Tools.tariffGetString(a, "id", "", !0), limit: Tools.tariffGetFloat(a, "limit", null), percent: f, rate: Tools.tariffGetFloat(a, "rate", null) };
                                }),
                            };
                        }),
                    });
                    this.deriveTariffTypeFromData(e);
                    this.set({ tariff_set: !0, schedule: a.schedule });
                    a = BackboneConfig.country ? this.get("tariff").currency.code : e.currency.code;
                    this.set({ tariff: { currency: { code: a }, single_rate: { rate: e.single_rate.rate } } });
                    this.fixUpSeasons(e.seasons);
                    _.each(e.seasons, function (a) {
                        _.each(a.days, function (a) {
                            a.periods = _.sortBy(a.periods, "start");
                            a.periods = _.map(a.periods, function (a, b) {
                                "period_0" != a.id && (a.id = "period_" + (b + 1));
                                return a;
                            });
                        });
                        b.activeCollection.add(a, { merge: !0 });
                    });
                } else this.set({ tariff_set: !1, tariff_struct: null });
            }
        },
        tariffIsSet: function (a) {
            var b = a.tariff;
            a = "" !== Tools.tariffGetString(a.schedule, "source", "");
            return !(!_.isEmpty(b) && b.currency && "USD" === b.currency.code && b.single_rate && 0 === +b.single_rate.rate && (!b.seasons || 0 === b.seasons.length)) && a;
        },
        deriveTariffTypeFromData: function (a) {
            void 0 != a.single_rate.rate && void 0 != a.seasons && 0 == a.seasons.length
                ? (this.set({ tariff_struct: "flat" }), (this.activeCollection = this.singleRateOneSeasonsCollection), (this.activeCollection.seasonal_rates = !1), (this.activeCollection.weekend_rates = !1))
                : 1 == a.seasons.length && 2 == a.seasons[0].days.length && 1 == a.seasons[0].days[0].periods.length
                ? (this.set({ tariff_struct: "flat" }), (this.activeCollection = this.singleRateOneSeasonWeekendCollection), (this.activeCollection.seasonal_rates = !1), (this.activeCollection.weekend_rates = !0))
                : 2 == a.seasons.length && 1 == a.seasons[0].days.length && 1 == a.seasons[0].days[0].periods.length
                ? (this.set({ tariff_struct: "flat" }), (this.activeCollection = this.singleRateTwoSeasonsCollection), (this.activeCollection.seasonal_rates = !0), (this.activeCollection.weekend_rates = !1))
                : 2 == a.seasons.length && 2 == a.seasons[0].days.length && 1 == a.seasons[0].days[0].periods.length
                ? (this.set({ tariff_struct: "flat" }), (this.activeCollection = this.singleRateTwoSeasonsWeekendCollection), (this.activeCollection.seasonal_rates = !0), (this.activeCollection.weekend_rates = !0))
                : 1 == a.seasons.length && 1 == a.seasons[0].days.length && 2 <= a.seasons[0].days[0].periods.length
                ? ((this.activeCollection = this.touOneSeasonCollection), this.set({ tariff_struct: "tou" }), (this.activeCollection.seasonal_rates = !1), (this.activeCollection.weekend_rates = !1), this.set({ tou_set: !0 }))
                : 1 == a.seasons.length && 2 == a.seasons[0].days.length && 2 <= a.seasons[0].days[0].periods.length
                ? ((this.activeCollection = this.touOneSeasonWeekendCollection), this.set({ tariff_struct: "tou" }), (this.activeCollection.seasonal_rates = !1), (this.activeCollection.weekend_rates = !0), this.set({ tou_set: !0 }))
                : 2 == a.seasons.length && 1 == a.seasons[0].days.length && 2 <= a.seasons[0].days[0].periods.length
                ? ((this.activeCollection = this.touSeasonsCollection), this.set({ tariff_struct: "tou" }), (this.activeCollection.seasonal_rates = !0), (this.activeCollection.weekend_rates = !1), this.set({ tou_set: !0 }))
                : 2 == a.seasons.length && 2 == a.seasons[0].days.length && 2 <= a.seasons[0].days[0].periods.length
                ? ((this.activeCollection = this.touSeasonsWeekendCollection), this.set({ tariff_struct: "tou" }), (this.activeCollection.seasonal_rates = !0), (this.activeCollection.weekend_rates = !0), this.set({ tou_set: !0 }))
                : 1 == a.seasons.length && 1 <= a.seasons[0].tiers.length
                ? ((this.activeCollection = this.tieredrOneSeasonCollection), this.set({ tariff_struct: "tiered" }), (this.activeCollection.seasonal_rates = !1), (this.activeCollection.weekend_rates = !1))
                : 2 == a.seasons.length &&
                  1 <= a.seasons[0].tiers.length &&
                  ((this.activeCollection = this.tieredTwoSeasonsCollection), this.set({ tariff_struct: "tiered" }), (this.activeCollection.seasonal_rates = !0), (this.activeCollection.weekend_rates = !1));
            b.mediator.trigger("tariff_rate:model_update");
        },
        setTariffActiveCollection: function (a, b, d) {
            "flat" != a || b
                ? "flat" == a && b
                    ? (this.activeCollection = d ? this.singleRateTwoSeasonsWeekendCollection : this.singleRateTwoSeasonsCollection)
                    : "tou" != a || b
                    ? "tou" == a && b
                        ? ((this.activeCollection = d ? this.touSeasonsWeekendCollection : this.touSeasonsCollection), this.set({ tou_set: !0 }))
                        : "tiered" == a && (this.activeCollection = b ? this.tieredTwoSeasonsCollection : this.tieredrOneSeasonCollection)
                    : ((this.activeCollection = d ? this.touOneSeasonWeekendCollection : this.touOneSeasonCollection), this.set({ tou_set: !0 }))
                : (this.activeCollection = d ? this.singleRateOneSeasonWeekendCollection : this.singleRateOneSeasonsCollection);
            this.activeCollection.seasonal_rates = b;
            this.activeCollection.weekend_rates = d;
        },
        fixUpSeasons: function (a) {
            var c = this;
            0 < a.length &&
                _.each(a, function (a, b, g) {
                    a.end = void 0 != g[b + 1] ? (1 == g[b + 1].start.split("/")[0] ? 12 : g[b + 1].start.split("/")[0] - 1) : 1 == g[0].start.split("/")[0] ? 12 : g[0].start.split("/")[0] - 1;
                    _.each(a.days, function (a) {
                        a.periods = c.fixUpTouPeriods(a.periods);
                    });
                });
            b.mediator.trigger("tariff_rate:model_update");
        },
        fixUpTouPeriods: function (a) {
            var b = a.length;
            a = _.sortBy(a, "start");
            for (var d = !0; b--; ) {
                var e = a[b];
                void 0 != a[b - 1] && (a[b - 1].end = e.start);
                d ? ("" === e.id || "filler" === e.id ? ((e.id = "period_0"), (d = !1)) : (_.last(a).end = 0 == _.first(a).start ? 1440 : _.first(a).start)) : ("" != e.id && "filler" !== e.id) || a.splice(b, 1);
            }
            return _.sortBy(a, "id");
        },
        putTariffSettings: function (a) {
            var c = this;
            a = JSON.stringify(a);
            b.activeRequests.add({ id: "TariffSettingsPut" });
            $.ajax({
                url: b.ApiUrls.TariffSettingsPut,
                type: "PUT",
                data: a,
                success: function (a) {
                    c.parseTariffSettings(a);
                },
                error: function (a, c, g) {
                    b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, c, g);
                },
                complete: function () {
                    b.activeRequests.remove({ id: "TariffSettingsPut" });
                    b.mediator.trigger("tariff:putComplete");
                },
            });
        },
        tariffStructIsSet: function () {
            return this.get("tariff_set");
        },
        currentTariffType: function () {
            return this.get("tariff_set") ? this.get("tariff_struct") : void 0;
        },
        setCurrencyCode: function (a) {
            a && ((a = iso.findCountryByCode(a).currency), this.set({ tariff: { currency: { code: a } } }));
        },
        addSingleRateSeason: function (a, b) {
            b.add({ id: a, start: "", end: "", days: [{ id: "all_days", days: "Sun,Mon,Tue,Wed,Thu,Fri,Sat", must_charge_start: 180, must_charge_duration: 0, periods: [{ id: "period_1", start: 0, rate: null }] }] });
        },
        addSingleRateWeekendDays: function (a, b) {
            _.findWhere(b.models, { id: a }).set({
                days: [
                    { id: "weekdays", days: "Mon,Tue,Wed,Thu,Fri", must_charge_start: 180, must_charge_duration: 0, periods: [{ id: "period_1", start: 0, rate: null }] },
                    { id: "weekend", days: "Sun,Sat", must_charge_start: 180, must_charge_duration: 0, periods: [{ id: "period_1", start: 0, rate: null }] },
                ],
            });
        },
        addTouSeason: function (a, b) {
            b.add({
                id: a,
                start: "",
                end: "",
                days: [
                    {
                        id: "all_days",
                        days: "Sun,Mon,Tue,Wed,Thu,Fri,Sat",
                        must_charge_start: 180,
                        must_charge_duration: 0,
                        periods: [
                            { id: "period_0", start: null, rate: null },
                            { id: "period_1", start: null, rate: null },
                        ],
                    },
                ],
            });
        },
        addTieredSeason: function (a, b) {
            b.add({
                id: a,
                start: "",
                end: "",
                tiers: [
                    { id: "tier_1", limit: null, rate: null },
                    { id: "tier_2", limit: null, rate: null },
                ],
            });
        },
        calcPercentFromLimit: function (a, b) {
            return Math.round((a / b) * 100);
        },
        calcLimitFromPercent: function (a, b) {
            return Math.round((a * b) / 100);
        },
        addTouWeekendDays: function (a, b) {
            _.findWhere(a.models, { id: b }).set({
                days: [
                    {
                        id: "weekdays",
                        days: "Mon,Tue,Wed,Thu,Fri",
                        must_charge_start: 180,
                        must_charge_duration: 0,
                        periods: [
                            { id: "period_0", start: null, rate: null },
                            { id: "period_1", start: null, rate: null },
                        ],
                    },
                    { id: "weekend", days: "Sun,Sat", must_charge_start: 180, must_charge_duration: 0, periods: [{ id: "period_0", start: null, rate: null }] },
                ],
            });
        },
        addNewPeriod: function (a, b, d, e) {
            d = { id: d, rate: null, start: e };
            _.findWhere(this.activeCollection.get(a).get("days"), { id: b }).periods.push(d);
        },
        addNewTier: function (a) {
            var b = { id: "tier_" + (this.activeCollection.get(a).get("tiers").length + 1), limit: null, rate: null };
            this.activeCollection.get(a).get("tiers").push(b);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Models.Tier = Backbone.Model.extend({ rate: 0 });
})(EnvoyBackboneApp);
(function (b) {
    b.Models.Timezone = Backbone.Model.extend({ defaults: { key: void 0, value: "" } });
})(EnvoyBackboneApp);
(function (b) {
    b.Models.WiFi = Backbone.Model.extend({
        defaults: {
            haveData: !1,
            initialUserDeviceSsid: void 0,
            currentUserDeviceSsid: void 0,
            pendingRequest: !1,
            polling_frequency: 60,
            ap_mode_enabled: !1,
            ap_mode_time_remaining: void 0,
            wifi_updated: void 0,
            hw_state: { supported: !1, configured: !1, carrier: !1, up: !1, present: !1 },
            current_network: { bars: 0, status: "", ssid: "", ip_address: "", gateway_ip: "", security_mode: "" },
            device_info: { haveData: !1, device: "", serial: "", device_id: "", usb_spec: "", model: "", vendor: "", manufacturer: "", vendor_id: "", usb_slot: "", mac: "", driver: "", hw_version: "" },
            regions: [],
        },
        initialize: function () {
            this.on("destroy", this.stopPolling, this);
            this.on("change:current_network change:hw_state", this.triggerWifiUpdated, this);
            b.mediator.on("wifi:refreshMainData", this.restartPolling, this);
            this.restartPolling();
        },
        iconString: function () {
            var a = "",
                b = this.get("current_network"),
                d = this.get("hw_state");
            if (d.supported)
                if (d.present)
                    if (d.configured)
                        switch (b.status) {
                            case "connected":
                                a = 4 >= b.bars ? "signal_" + b.bars : "signal_4";
                                break;
                            default:
                                a = "noconfig";
                        }
                    else a = "config";
                else d.configured && (a = "noconfig");
            return a;
        },
        restartPolling: function () {
            void 0 != this.get("polling_interval") && clearInterval(this.get("polling_interval"));
            b.pollingFrequency() < this.get("polling_frequency") && this.set({ polling_frequency: b.pollingFrequency() });
            var a = setInterval(this.poll, 1e3 * this.get("polling_frequency"));
            this.set({ polling_interval: a });
            void 0 != b.wifiSites ? b.wifiSites.poll() : this.poll();
        },
        resetData: function () {
            this.set({
                haveData: !1,
                hw_state: { supported: !0, configured: !1, carrier: !1, up: !1, present: !0 },
                current_network: { bars: 0, status: "", ssid: "", ip_address: "", gateway_ip: "", security_mode: "" },
                device_info: { haveData: !1 },
            });
            b.mediator.trigger("wifi:gotdata");
        },
        poll: function () {
            void 0 == EnvoyBackboneApp.wifiModel ||
                this.pendingRequest ||
                b.shouldSuspendPoll() ||
                void 0 == b.activeRequests ||
                b.activeRequests.findWhere({ id: "WifiSettings" }) ||
                b.activeRequests.findWhere({ id: "WifiSettingsWithSites" }) ||
                EnvoyBackboneApp.wifiModel.getWifiDataNoSites();
        },
        stopPolling: function () {
            clearInterval(this.get("polling_interval"));
        },
        getWifiDataNoSites: function () {
            var a = this,
                c = b.ApiUrls.WifiSettings + "?site_info=0";
            a.pendingRequest = !0;
            b.activeRequests.add({ id: "WifiSettings" });
            $.ajax({
                url: c,
                dataType: "json",
                success: function (c) {
                    a.pendingRequest = !1;
                    1 != b.isPublic() || b.wifiSites.haveSiteData || a.getWifiDataWithSites();
                    a.parseWifiData(c);
                    b.mediator.trigger("wifi:gotdata");
                    b.mediator.trigger("network:DiagnosticDataLoaded");
                },
                error: function (b, c, g) {
                    a.pendingRequest = !1;
                    Tools.handleAjaxError(this.url, b, c, g);
                },
                complete: function () {
                    b.activeRequests.remove({ id: "WifiSettings" });
                },
            });
        },
        parseWifiData: function (a) {
            var c = {};
            void 0 != a.supported &&
                (_.extend(c, { hw_state: { supported: a.supported, configured: a.configured, carrier: a.carrier, up: a.up, present: a.present } }),
                void 0 != a.current_network &&
                    ((current = a.current_network),
                    _.extend(c, { current_network: { bars: current.bars, status: current.status, ssid: current.ssid, ip_address: current.ip_address, gateway_ip: current.gateway_ip, security_mode: current.security_mode } })),
                void 0 != a.sites && b.wifiSites.parseSiteData(a),
                void 0 != a.device_info
                    ? ((device = a.device_info),
                      device.hasOwnProperty("usb_slot")
                          ? _.extend(c, {
                                device_info: {
                                    haveData: !0,
                                    device: device.device,
                                    serial: device.serial,
                                    device_id: device.device_id,
                                    usb_spec: device.usb_spec,
                                    model: device.model,
                                    vendor: device.vendor,
                                    manufacturer: device.manufacturer,
                                    vendor_id: device.vendor_id,
                                    usb_slot: device.usb_slot,
                                    mac: device.mac,
                                    driver: device.driver,
                                    hw_version: device.hw_version,
                                },
                            })
                          : _.extend(c, { device_info: { haveData: !1 } }))
                    : _.extend(c, { device_info: { haveData: !1 } }),
                _.extend(c, { haveData: !0 }));
            void 0 != a.ap_mode && _.extend(c, { ap_mode_enabled: a.ap_mode.enabled, ap_mode_time_remaining: a.ap_mode.time_remaining });
            void 0 != a.regions && _.extend(c, { regions: a.regions });
            void 0 != a.selected_region && _.extend(c, { selected_region: a.selected_region });
            this.set(c);
        },
        testAndJoinWirelessConnection: function (a, c, d, e, g, f, k) {
            var h = this;
            b.mediator.trigger("wifi_sites:connectStarted");
            if (h.pendingRequest)
                setTimeout(function () {
                    h.testAndJoinWirelessConnection(a, c, d, e, g, f, k);
                }, 5e3);
            else {
                var l = { bssid: e, wps_pbc: g, essid: a, channel: 0, security_mode: c, wificrypto: d, password: f, fname: "backbone_manual_form", "#button_test_and_join": "doit" };
                h.pendingRequest = !0;
                b.wifiDoingScaryStuff = !0;
                $.ajax({
                    url: b.ApiUrls.WifiSettingsJoin,
                    type: "POST",
                    dataType: "json",
                    data: $.param(l),
                    timeout: 15e4,
                    success: function (a) {
                        h.pendingRequest = !1;
                        b.wifiDoingScaryStuff = !1;
                        b.mediator.trigger("wifi:joinAttemptSuccess");
                        1 == k && b.mediator.trigger("wifi:joinManualAttemptSuccess");
                    },
                    error: function (a, c, d) {
                        h.pendingRequest = !1;
                        b.wifiDoingScaryStuff = !1;
                        "timeout" == c ? b.mediator.trigger("wifi:joinAttemptTimeout") : (b.mediator.trigger("wifi:joinAttemptFailed"), 1 == k && b.mediator.trigger("wifi:joinManualAttemptFailed"));
                    },
                });
            }
        },
        forgetWirelessCurrent: function () {
            var a = this;
            a.pendingRequest
                ? setTimeout(function () {
                      a.forgetWirelessCurrent();
                  }, 5e3)
                : ((a.pendingRequest = !0),
                  (b.wifiDoingScaryStuff = !0),
                  $.ajax({
                      url: b.ApiUrls.WifiSettings,
                      type: "POST",
                      dataType: "json",
                      data: $.param({ fname: "backbone_current_form", iface: "wlan0", "#button_forget": "forget" }),
                      success: function (c) {
                          a.pendingRequest = !1;
                          b.wifiDoingScaryStuff = !1;
                          a.resetData();
                          b.mediator.trigger("wifi:refreshMainData");
                          b.mediator.trigger("wifi:forgetSuccess");
                      },
                      error: function (c, d, e) {
                          a.pendingRequest = !1;
                          b.wifiDoingScaryStuff = !1;
                          b.mediator.trigger("wifi:gotdata");
                          "timeout" == d ? b.mediator.trigger("wifi:forgetTimeout") : b.mediator.trigger("wifi:forgetFailure");
                      },
                  }));
        },
        setCountryData: function (a) {
            var c = this,
                d = { fname: "backbone_region_form", region: a };
            c.pendingRequest = !0;
            $.ajax({
                url: b.ApiUrls.WifiSettings,
                type: "POST",
                dataType: "json",
                data: $.param(d),
                success: function (b) {
                    c.pendingRequest = !1;
                    c.set({ selected_region: a });
                },
                error: function (a, d, f) {
                    c.pendingRequest = !1;
                    b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, d, f);
                },
            });
        },
        setAPMode: function (a) {
            var c = this,
                d = { fname: "backbone_ap_form", enabled: a };
            c.pendingRequest = !0;
            0 == a && (b.wifiDoingScaryStuff = !0);
            $.ajax({
                url: b.ApiUrls.WifiSettings,
                type: "POST",
                dataType: "json",
                data: $.param(d),
                success: function (a) {
                    c.set({ ap_mode_enabled: a.enabled, ap_mode_time_remaining: a.time_remaining });
                },
                error: function (a, b, c) {
                    Tools.handleAjaxError(this.url, a, b, c);
                },
                complete: function () {
                    c.pendingRequest = !1;
                    1 == b.wifiDoingScaryStuff && (b.wifiDoingScaryStuff = !1);
                },
            });
        },
        isConnected: function () {
            var a = this.get("current_network"),
                b = this.get("hw_state");
            return b.configured && b.supported && "connected" == a.status ? !0 : !1;
        },
        triggerWifiUpdated: function () {
            b.mediator.trigger("wifi:CurrentNetworkUpdated");
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Models.WifiSite = Backbone.Model.extend({
        defaults: { site_id: 0, ssid: "", is_current_ssid: !1, bars: 4, wps: !1, security_mode: "", secured: !1, mac: "", encryption_type: "", unsupported: !1, channel: "", security_icon: "", bars_icon: "" },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Collections.ACBatteries = Backbone.Collection.extend({
        model: b.Models.ACBattery,
        hasReceivedInventoryData: !1,
        attrs: {
            alias: "acb",
            appTargetCount: "target_acb_count",
            collectionPascalized: "ACBatteries",
            envoyModelCommCount: "communicating_acb_count",
            envoyModelDeletedCount: "deleted_acb_count",
            envoyModelDetectedCount: "detected_acb_count",
            envoyModelProducingCount: "producing_acb_count",
            envoyModelProfileCount: "profile_acb_count",
            eventCommLevel: "ac_batteries:CommLevelUpdated",
            hasScan: !0,
            route: "acb",
            triggersForCount: ["envoy:detectAcbCountChange", "app:targetAcbCountUpdated"],
            concernedRequests: [{ id: "Inventory" }, { id: "InverterComm" }, { id: "NewScanGet" }, { id: "ProfileStatus" }, { id: "InverterProduction" }, { id: "SystemReadingStats" }, { id: "TariffSettingsGet" }],
        },
        comparator: function (a) {
            return a.get("id");
        },
        initialize: function () {
            this.on("add", this.updateDetectedCount, this);
            this.on("remove", this.updateDetectedCount, this);
            b.mediator.on("ac_battery:adminStateChange", this.updateDetectedCount, this);
        },
        poll: function () {
            b.shouldSuspendPoll() || void 0 == b.activeRequests || b.activeRequests.findWhere({ id: "Inventory" }) || b.inventory.getInventoryData(!1);
        },
        getActiveDevices: function () {
            var a = _.filter(this.models, function (a) {
                return _.contains(["verified", "discovered"], a.get("admin_state"));
            });
            return (a = _.map(a, function (a) {
                return a.toJSON();
            }));
        },
        getDeletedDevices: function () {
            var a = _.filter(this.models, function (a) {
                return _.contains(["deleted"], a.get("admin_state"));
            });
            return (a = _.map(a, function (a) {
                return a.toJSON();
            }));
        },
        deleteDevices: function () {
            var a = this,
                c = b.ac_batteries.where({ isFlaggedForDelete: !0 });
            if (0 < c.length) {
                var d = [];
                _.each(c, function (a) {
                    d.push({ sn: a.id });
                });
                var e = { envoy_sn: b.envoyModel.get("serial_number"), dev_types: [{ dev_type: 11, part_nums: [{ part_num: c[0].get("part_number"), serial_nums: d }] }] };
                b.wifiDoingScaryStuff = !0;
                e = JSON.stringify(e);
                $.ajax({
                    url: b.ApiUrls.InverterDelete,
                    type: "DELETE",
                    data: e,
                    success: function (d) {
                        a.updateBatteriesStatus(c, "deleted");
                        b.mediator.trigger("batteries:DeleteComplete");
                        b.mediator.trigger("inventory:CommunicatingUpdated");
                        b.mediator.trigger("inventory:ProducingUpdated");
                        b.wifiDoingScaryStuff = !1;
                        a.poll();
                    },
                    error: function (a, c, d) {
                        b.shouldSuspendPoll() || (b.mediator.trigger("batteries:DeleteComplete"), Tools.handleAjaxError(this.url, a, c, d));
                    },
                });
            } else b.mediator.trigger("batteries:DeleteComplete");
        },
        undeleteDevices: function () {
            var a = this,
                c = b.ac_batteries.where({ isFlaggedForUnDelete: !0 });
            if (0 < c.length) {
                var d = [];
                _.each(c, function (a) {
                    d.push({ sn: a.id });
                });
                var e = { envoy_sn: b.envoyModel.get("serial_number"), dev_types: [{ dev_type: 11, part_nums: [{ part_num: c[0].get("part_number"), serial_nums: d }] }] },
                    e = JSON.stringify(e);
                $.ajax({
                    url: b.ApiUrls.InverterPut,
                    type: "PUT",
                    data: e,
                    success: function (d) {
                        a.updateBatteriesStatus(c, "verified");
                        b.mediator.trigger("inventory:CommunicatingUpdated");
                        b.mediator.trigger("inventory:ProducingUpdated");
                    },
                    error: function (a, c, d) {
                        b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, c, d);
                    },
                    complete: function () {
                        b.mediator.trigger("batteries:UndeleteComplete");
                    },
                });
            } else b.mediator.trigger("batteries:UndeleteComplete");
        },
        updateBatteriesStatus: function (a, b) {
            _.each(a, function (a) {
                a.set({ admin_state: b, isFlaggedForDelete: !1, isFlaggedForUnDelete: !1 });
            });
        },
        resetBatteryFlags: function (a) {
            _.each(a, function (a) {
                a.set({ isFlaggedForDelete: !1, isFlaggedForUnDelete: !1 });
            });
        },
        updateDetectedCount: function () {
            if (void 0 != b.envoyModel) {
                var a = b.ac_batteries.getActiveDevices(),
                    c = b.ac_batteries.getDeletedDevices();
                b.envoyModel.set({ detected_acb_count: a.length, deleted_acb_count: c.length });
            }
        },
        setSleepMode: function (a) {
            var c = this,
                d = b.ac_batteries.where({ isFlaggedForDelete: !0 });
            if (0 < d.length) {
                var e = [];
                _.each(d, function (b) {
                    e.push({ serial_num: b.id, sleep_min_soc: a.min, sleep_max_soc: a.max });
                });
                var g = { acb_sleep: e },
                    g = JSON.stringify(g);
                b.activeRequests.add({ id: "AcbSetSleepMode" });
                $.ajax({
                    url: b.ApiUrls.AcbSetSleepMode,
                    type: "PUT",
                    data: g,
                    success: function (a) {
                        c.resetBatteryFlags(d);
                        c.getSleepData();
                    },
                    error: function (a, d, e) {
                        b.shouldSuspendPoll() || (400 == a.status ? (EnvoyBackboneApp.mediator.trigger("acb:sleepEnableFailed"), c.getSleepData()) : Tools.handleAjaxError(this.url, a, d, e));
                    },
                    complete: function () {
                        b.activeRequests.remove({ id: "AcbSetSleepMode" });
                        b.mediator.trigger("batteries:SetToSleepComplete");
                    },
                });
            } else b.mediator.trigger("batteries:SetToSleepComplete");
        },
        getSleepData: function () {
            b.activeRequests.add({ id: "AcbGetSleepModeData" });
            $.ajax({
                url: b.ApiUrls.AcbGetSleepModeData,
                type: "GET",
                success: function (a) {
                    b.mediator.trigger("batteries:GotSleepModeData");
                },
                error: function (a, c, d) {
                    b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, c, d);
                },
                complete: function () {
                    b.activeRequests.remove({ id: "AcbGetSleepModeData" });
                },
            });
        },
        cancelSleepMode: function () {
            var a = b.ac_batteries.where({ isFlaggedForCancelSleep: !0 });
            if (0 < a.length) {
                var c = [];
                _.each(a, function (a) {
                    c.push({ serial_num: a.id });
                });
                var d = { acb_sleep: c },
                    d = JSON.stringify(d);
                b.activeRequests.add({ id: "AcbCancelSleepMode" });
                $.ajax({
                    url: b.ApiUrls.AcbCancelSleepMode,
                    type: "DELETE",
                    data: d,
                    success: function (b) {
                        _.each(a, function (a) {
                            a.set({ isFlaggedForCancelSleep: !1 });
                        });
                    },
                    error: function (a, c, d) {
                        b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, c, d);
                    },
                    complete: function () {
                        b.activeRequests.remove({ id: "AcbCancelSleepMode" });
                        b.mediator.trigger("batteries:CancelSleepComplete");
                    },
                });
            } else b.mediator.trigger("batteries:CancelSleepComplete");
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Collections.AgfProfiles = Backbone.Collection.extend({
        model: b.Models.AgfProfile,
        agfInfo: new b.Models.AgfInfo(),
        hasReceivedData: !1,
        selectedProfile: null,
        profileVersionUpdate: !1,
        polling_interval: null,
        dataFetchStatus: "NoneSelected",
        previewSelectedProfile: null,
        profileDisplay: {},
        comparator: function (a) {
            return a.get("translated_name");
        },
        initialize: function () {
            this.getIndexData();
            this.polling_interval = setInterval(this.poll, b.pollingFrequency());
            b.mediator.on("app:targetCountUpdated", this.resetPollingInterval, this);
            b.mediator.on("init:updateProfile", this.poll());
        },
        poll: function () {
            b.shouldSuspendPoll() || void 0 == b.agfProfiles || void 0 == b.activeRequests || b.activeRequests.findWhere({ id: "AgfProfileIndex" }) || b.agfProfiles.getIndexData();
        },
        resetPollingInterval: function () {
            this.polling_interval = b.resetPollingInterval(this.polling_interval, this.poll);
            this.poll();
        },
        getIndexData: function () {
            var a = this;
            b.activeRequests.add({ id: "AgfProfileIndex" });
            $.ajax({
                url: b.ApiUrls.AgfProfileIndex,
                dataType: "json",
                success: function (b) {
                    a.parseIndexData(b);
                },
                error: function (a, d, e) {
                    b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, d, e);
                },
                complete: function () {
                    b.activeRequests.remove({ id: "AgfProfileIndex" });
                    b.mediator.trigger("agfProfiles:dataFetch_success");
                },
            });
        },
        checkDomReady: function () {
            b.domReady ? b.mediator.trigger("app:initReady") : setTimeout(this.checkDomReady, 500);
        },
        parseIndexData: function (a) {
            var c = {};
            _.each(a.profile_groups, function (a, b) {
                var d = [];
                _.each(a, function (a) {
                    a.translated_name = a.profile_name;
                    d.push(a);
                });
                var e = I18n.t("envoy_backbone.countries." + b);
                -1 < e.indexOf("missing") && (e = b);
                d = _.sortBy(d, function (a) {
                    return a.translated_name.toLowerCase();
                });
                c[e] = d;
            });
            this.profileDisplay = c;
            this.agfInfo.set({ migration_in_progress: a.migration_in_progress });
            this.agfInfo.set({ profile_auto_selected: a.profile_auto_selected });
            var d = [];
            _.each(a.profiles, function (a) {
                a.translated_name = a.profile_name;
                d.push(a);
            });
            if (a.selected_profile && !_.findWhere(d, { profile_id: a.selected_profile })) {
                var e = _.clone(a.selected_profile),
                    g = e.match(/:\d+\.\d+\.\d+$/),
                    e = { profile_id: e, profile_name: e.replace(g, ""), translated_name: e.replace(g, ""), profile_description: e };
                d.push(e);
            }
            this.set(d);
            e = _.clone(this.selectedProfile);
            void 0 != a.selected_profile
                ? ((g = _.find(this.models, function (b) {
                      return b.id.match(new RegExp(a.selected_profile));
                  })),
                  g.id != a.selected_profile ? ((this.selectedProfile = g.id), (this.profileVersionUpdate = !0)) : ((this.selectedProfile = a.selected_profile), (this.profileVersionUpdate = !1)),
                  (b.endpointTracker.tracker.details.requiredBy.report = !0))
                : (this.selectedProfile = null);
            this.selectedProfile != e && (b.mediator.trigger("agfProfiles:selectedProfileUpdated"), this.getDetailData(this.selectedProfile));
            0 == this.hasReceivedData && (b.mediator.trigger("profiles:loaded"), (this.hasReceivedData = !0), setTimeout(this.checkDomReady, 500));
        },
        getSelectedProfile: function () {
            if (void 0 != this.selectedProfile || null != this.selectedProfile) return this.findWhere({ profile_id: this.selectedProfile });
        },
        setSelectedProfile: function (a) {
            this.selectedProfile = a;
        },
        getSelectedStartTime: function () {
            return void 0 != this.selectedPeakStartTime || null != this.selectedPeakStartTime ? this.selectedPeakStartTime : 0;
        },
        userSettingAgfProfile: function (a) {
            a && this.postProfileSelectToEnvoy(a);
        },
        postProfileSelectToEnvoy: function (a) {
            var c = this,
                d = JSON.stringify(a);
            $.ajax({
                url: b.ApiUrls.AgfProfileSetProfile,
                type: "PUT",
                data: d,
                success: function (d) {
                    c.selectedProfile = a.selected_profile;
                    void 0 != a.peak_start_time && (c.selectedPeakStartTime = a.peak_start_time);
                    b.microinverters.forEach(function (a) {
                        a.set({ profile_status: 0, agf_profile_id: null });
                    });
                    b.ac_batteries.forEach(function (a) {
                        a.set({ profile_status: 0, agf_profile_id: null });
                    });
                    b.encharge_batteries.forEach(function (a) {
                        a.set({ profile_status: 0, agf_profile_id: null });
                    });
                    c.getDetailData(a.selected_profile);
                },
                error: function (a, c, d) {
                    b.unloading || b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, c, d);
                },
                complete: function () {
                    b.mediator.trigger("inventory:ProfileStateUpdated");
                    b.mediator.trigger("agfProfiles:selectedProfileUpdated");
                },
            });
        },
        getDetailData: function (a, c) {
            var d = this;
            void 0 != b.activeRequests &&
                void 0 == b.activeRequests.findWhere({ id: "AgfProfileDetails" }) &&
                void 0 != b.agfProfiles &&
                (b.activeRequests.add({ id: "AgfProfileDetails" }),
                $.ajax({
                    url: b.ApiUrls.AgfProfileDetails + "?language=" + Tools.baseLocale(),
                    success: function (b) {
                        d.parseDetailData(b, a);
                        d.dataFetchStatus = "success";
                    },
                    error: function (a, g, f) {
                        (b.shouldSuspendPoll() && 1 != c) || (Tools.handleAjaxError(this.url, a, g, f, c), 1 == c && (d.dataFetchStatus = "failed"));
                    },
                    complete: function () {
                        b.activeRequests.remove({ id: "AgfProfileDetails" });
                        1 == c && (d.get(a).set({ detailStatus: d.dataFetchStatus }), b.mediator.trigger("agfProfiles:dataFetch_" + d.dataFetchStatus));
                    },
                }));
        },
        parseDetailData: function (a, c) {
            var d = Tools.baseLocale();
            a.hasOwnProperty("profile_id") && c == a.profile_id && a.hasOwnProperty(d) && ((d = a[d]), this.get(c).set({ profileData: d }), b.mediator.trigger("agfProfiles:detailsUpdated"));
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Collections.AjaxRequests = Backbone.Collection.extend({ model: b.Models.AjaxRequest });
})(EnvoyBackboneApp);
(function (b) {
    b.Collections.Alerts = Backbone.Collection.extend({ model: b.Models.Alert });
})(EnvoyBackboneApp);
(function (b) {
    b.Collections.EnchargeBatteries = Backbone.Collection.extend({
        model: b.Models.EnchargeBattery,
        hasReceivedInventoryData: !1,
        attrs: {
            alias: "encharge",
            appTargetCount: "target_encharge_batteries_count",
            collectionPascalized: "EnchargeBatteries",
            envoyModelCommCount: "communicating_encharge_batteries_count",
            envoyModelDeletedCount: "deleted_encharge_batteries_count",
            envoyModelDetectedCount: "detected_encharge_batteries_count",
            envoyModelProducingCount: "producing_encharge_batteries_count",
            envoyModelProfileCount: "profile_encharge_batteries_count",
            eventCommLevel: "encharge_batteries:CommLevelUpdated",
            route: "encharge",
            triggersForCount: ["envoy:detectEnchargeBatteriesCountChange", "app:targetEnchargeBatteriesCountUpdated"],
            concernedRequests: [{ id: "EnsembleInventory" }, { id: "EnsembleComm" }, { id: "EnsembleProfileStatus" }, { id: "InverterProduction" }, { id: "SystemReadingStats" }, { id: "TariffSettingsGet" }],
        },
        comparator: function (a) {
            return a.get("id");
        },
        initialize: function () {
            this.on("add", this.updateDetectedCount, this);
            this.on("remove", this.updateDetectedCount, this);
            b.mediator.on("encharge_battery:adminStateChange", this.updateDetectedCount, this);
        },
        poll: function () {
            b.shouldSuspendPoll() || void 0 == b.activeRequests || b.activeRequests.findWhere({ id: "EnsembleInventory" }) || b.inventory.getEnsembleInventoryData(!1);
        },
        getActiveDevices: function () {
            var a = _.filter(this.models, function (a) {
                return _.contains(["verified", "discovered"], a.get("admin_state"));
            });
            return (a = _.map(a, function (a) {
                return a.toJSON();
            }));
        },
        getDeletedDevices: function () {
            var a = _.filter(this.models, function (a) {
                return _.contains(["deleted"], a.get("admin_state"));
            });
            return (a = _.map(a, function (a) {
                return a.toJSON();
            }));
        },
        deleteDevices: function () {
            var a = this,
                c = b.encharge_batteries.where({ isFlaggedForDelete: !0 });
            0 < c.length
                ? _.each(c, function (d) {
                      d = "".concat(b.ApiUrls.EnsembleDelete, "?serial_number=", d.id);
                      b.wifiDoingScaryStuff = !0;
                      $.ajax({
                          url: d,
                          type: "DELETE",
                          success: function (d) {
                              a.updateBatteriesStatus(c, "deleted");
                              b.mediator.trigger("batteries:DeleteComplete");
                              b.mediator.trigger("inventory:CommunicatingUpdated");
                              b.mediator.trigger("inventory:ProducingUpdated");
                              b.wifiDoingScaryStuff = !1;
                              a.poll();
                          },
                          error: function (a, c, d) {
                              b.shouldSuspendPoll() || (b.mediator.trigger("batteries:DeleteComplete"), Tools.handleAjaxError(this.url, a, c, d));
                          },
                      });
                  })
                : b.mediator.trigger("batteries:DeleteComplete");
        },
        undeleteDevices: function () {
            var a = this,
                c = b.encharge_batteries.where({ isFlaggedForUnDelete: !0 });
            if (0 < c.length) {
                var d = [];
                _.each(c, function (a) {
                    d.push({ sn: a.id });
                });
                var e = { envoy_sn: b.envoyModel.get("serial_number"), dev_types: [{ dev_type: 13, part_nums: [{ part_num: c[0].get("part_number"), serial_nums: d }] }] },
                    e = JSON.stringify(e);
                $.ajax({
                    url: b.ApiUrls.EnsemblePut,
                    type: "PUT",
                    data: e,
                    success: function (d) {
                        a.updateBatteriesStatus(c, "verified");
                        b.mediator.trigger("inventory:CommunicatingUpdated");
                        b.mediator.trigger("inventory:ProducingUpdated");
                    },
                    error: function (a, c, d) {
                        b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, c, d);
                    },
                    complete: function () {
                        b.mediator.trigger("batteries:UndeleteComplete");
                    },
                });
            } else b.mediator.trigger("batteries:UndeleteComplete");
        },
        updateBatteriesStatus: function (a, b) {
            _.each(a, function (a) {
                a.set({ admin_state: b, isFlaggedForDelete: !1, isFlaggedForUnDelete: !1 });
            });
        },
        resetBatteryFlags: function (a) {
            _.each(a, function (a) {
                a.set({ isFlaggedForDelete: !1, isFlaggedForUnDelete: !1 });
            });
        },
        updateDetectedCount: function () {
            if (void 0 != b.envoyModel) {
                var a = b.encharge_batteries.getActiveDevices(),
                    c = b.encharge_batteries.getDeletedDevices();
                b.envoyModel.set({ detected_encharge_batteries_count: a.length, deleted_encharge_batteries_count: c.length });
            }
        },
        updateTargetCount: function () {
            if (void 0 != b.envoyModel) {
                var a = b.encharge_batteries.getActiveDevices(),
                    c = b.initialTargetEnpowersCount();
                b.updateEnsTargetCounts(a.length, c);
            }
        },
        setSleepMode: function (a) {
            var c = this,
                d = b.encharge_batteries.where({ isFlaggedForDelete: !0 });
            if (0 < d.length) {
                var e = [];
                _.each(d, function (b) {
                    e.push({ serial_num: b.id, sleep_min_soc: a.min, sleep_max_soc: a.max });
                });
                var g = { encharge_sleep: e },
                    g = JSON.stringify(g);
                b.activeRequests.add({ id: "EnchargeSetSleepMode" });
                $.ajax({
                    url: b.ApiUrls.EnchargeSetSleepMode,
                    type: "POST",
                    data: g,
                    success: function (a) {
                        c.resetBatteryFlags(d);
                        c.getSleepData();
                    },
                    error: function (a, d, e) {
                        b.shouldSuspendPoll() || (400 == a.status ? (EnvoyBackboneApp.mediator.trigger("encharge_batteries:sleepEnableFailed"), c.getSleepData()) : Tools.handleAjaxError(this.url, a, d, e));
                    },
                    complete: function () {
                        b.activeRequests.remove({ id: "EnchargeSetSleepMode" });
                        b.mediator.trigger("batteries:SetToSleepComplete");
                    },
                });
            } else b.mediator.trigger("batteries:SetToSleepComplete");
        },
        getSleepData: function () {
            b.activeRequests.add({ id: "EnchargeGetSleepModeData" });
            $.ajax({
                url: b.ApiUrls.EnchargeGetSleepModeData,
                type: "GET",
                success: function (a) {
                    b.mediator.trigger("batteries:GotSleepModeData");
                },
                error: function (a, c, d) {
                    b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, c, d);
                },
                complete: function () {
                    b.activeRequests.remove({ id: "EnchargeGetSleepModeData" });
                },
            });
        },
        cancelSleepMode: function () {
            var a = b.encharge_batteries.where({ isFlaggedForCancelSleep: !0 });
            0 < a.length
                ? _.each(a, function (c) {
                      $.ajax({
                          url: b.ApiUrls.EnchargeCancelSleepMode + "?serial_num=" + c.id,
                          type: "DELETE",
                          success: function (b) {
                              _.each(a, function (a) {
                                  a.set({ isFlaggedForCancelSleep: !1 });
                              });
                          },
                          error: function (a, c, g) {
                              b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, c, g);
                          },
                          complete: function () {
                              b.mediator.trigger("batteries:CancelSleepComplete");
                          },
                      });
                  })
                : b.mediator.trigger("batteries:CancelSleepComplete");
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Collections.Enpowers = Backbone.Collection.extend({
        model: b.Models.Enpower,
        hasReceivedInventoryData: !1,
        attrs: {
            alias: "enpower",
            appTargetCount: "target_enpower_count",
            collectionPascalized: "Enpowers",
            envoyModelDeletedCount: "deleted_enpower_count",
            envoyModelDetectedCount: "detected_enpower_count",
            envoyModelCommCount: "communicating_enpower_count",
            envoyModelProfileCount: "profile_enpower_count",
            eventCommLevel: "enpowers:CommLevelUpdated",
            route: "enpower",
            triggersForCount: ["envoy:detectEnpowersCountChange", "app:targetEnpowersCountUpdated"],
            concernedRequests: [{ id: "EnsembleInventory" }, { id: "EnsembleComm" }, { id: "EnsembleProfileStatus" }, { id: "InverterProduction" }, { id: "SystemReadingStats" }],
        },
        comparator: function (a) {
            return a.get("id");
        },
        initialize: function () {
            this.on("add", this.updateDetectedCount, this);
            this.on("remove", this.updateDetectedCount, this);
            b.mediator.on("enpower:adminStateChange", this.updateDetectedCount, this);
        },
        poll: function () {
            b.shouldSuspendPoll() || void 0 == b.activeRequests || b.activeRequests.findWhere({ id: "EnsembleInventory" }) || b.inventory.getEnsembleInventoryData(!1);
        },
        getActiveDevices: function () {
            var a = _.filter(this.models, function (a) {
                return _.contains(["verified", "discovered"], a.get("admin_state"));
            });
            return (a = _.map(a, function (a) {
                return a.toJSON();
            }));
        },
        getDeletedDevices: function () {
            var a = _.filter(this.models, function (a) {
                return _.contains(["deleted"], a.get("admin_state"));
            });
            return (a = _.map(a, function (a) {
                return a.toJSON();
            }));
        },
        deleteDevices: function () {
            var a = this,
                c = b.enpowers.where({ isFlaggedForDelete: !0 });
            0 < c.length
                ? _.each(c, function (d) {
                      d = "".concat(b.ApiUrls.EnsembleDelete, "?serial_number=", d.id);
                      b.wifiDoingScaryStuff = !0;
                      $.ajax({
                          url: d,
                          type: "DELETE",
                          success: function () {
                              a.updateDevicesStatus(c, "deleted");
                              b.mediator.trigger("enpowers:DeleteComplete");
                              b.mediator.trigger("inventory:CommunicatingUpdated");
                              b.mediator.trigger("inventory:ProducingUpdated");
                              b.wifiDoingScaryStuff = !1;
                              a.poll();
                          },
                          error: function (a, c, d) {
                              b.shouldSuspendPoll() || (b.mediator.trigger("enpowers:DeleteComplete"), Tools.handleAjaxError(this.url, a, c, d));
                          },
                      });
                  })
                : b.mediator.trigger("enpowers:DeleteComplete");
        },
        undeleteDevices: function () {
            var a = this,
                c = b.enpowers.where({ isFlaggedForUnDelete: !0 });
            if (0 < c.length) {
                var d = [];
                _.each(c, function (a) {
                    d.push({ sn: a.id });
                });
                var e = { envoy_sn: b.envoyModel.get("serial_number"), dev_types: [{ dev_type: 17, part_nums: [{ part_num: c[0].get("part_number"), serial_nums: d }] }] },
                    e = JSON.stringify(e);
                $.ajax({
                    url: b.ApiUrls.EnsemblePut,
                    type: "PUT",
                    data: e,
                    success: function (d) {
                        a.updateDevicesStatus(c, "verified");
                        b.mediator.trigger("inventory:CommunicatingUpdated");
                        b.mediator.trigger("inventory:ProducingUpdated");
                    },
                    error: function (a, c, d) {
                        b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, c, d);
                    },
                    complete: function () {
                        b.mediator.trigger("enpowers:UndeleteComplete");
                    },
                });
            } else b.mediator.trigger("enpowers:UndeleteComplete");
        },
        updateDevicesStatus: function (a, b) {
            _.each(a, function (a) {
                a.set({ admin_state: b, isFlaggedForDelete: !1, isFlaggedForUnDelete: !1 });
            });
        },
        resetDevicesFlags: function (a) {
            _.each(a, function (a) {
                a.set({ isFlaggedForDelete: !1, isFlaggedForUnDelete: !1 });
            });
        },
        updateDetectedCount: function () {
            if (void 0 != b.envoyModel) {
                var a = b.enpowers.getActiveDevices(),
                    c = b.enpowers.getDeletedDevices();
                b.envoyModel.set({ detected_enpower_count: a.length, deleted_enpower_count: c.length });
            }
        },
        updateTargetCount: function () {
            if (void 0 != b.envoyModel) {
                var a = b.enpowers.getActiveDevices(),
                    c = b.initialTargetEnchargeBatteriesCount();
                b.updateEnsTargetCounts(c, a.length);
            }
        },
        updateMainsAdminState: function (a) {
            if (b.activeRequests && !b.activeRequests.findWhere({ id: "EnchargeRelaySet" }) && !b.activeRequests.findWhere({ id: "EnchargeRelayGet" })) {
                var c = this;
                a = { mains_admin_state: a };
                b.activeRequests.add({ id: "EnchargeRelaySet" });
                b.mediator.trigger("enpower:grid_status_action");
                $.ajax({
                    url: b.ApiUrls.EnchargeRelay,
                    type: "POST",
                    data: a,
                    success: function () {
                        c.fetchMainsStates();
                    },
                    error: function (a, c, g) {
                        b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, c, g);
                    },
                    complete: function () {
                        b.activeRequests.remove({ id: "EnchargeRelaySet" });
                        b.mediator.trigger("enpower:grid_status_action");
                    },
                });
            }
        },
        fetchMainsStates: function () {
            b.activeRequests &&
                !b.activeRequests.findWhere({ id: "EnchargeRelayGet" }) &&
                (b.activeRequests.add({ id: "EnchargeRelayGet" }),
                $.ajax({
                    url: b.ApiUrls.EnchargeRelay,
                    type: "GET",
                    success: function (a) {
                        b.envoyModel.set({ enpower_grid_status: { mains_admin_state: a.mains_admin_state, mains_oper_state: a.mains_oper_state } });
                    },
                    error: function (a, c, d) {
                        b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, c, d);
                    },
                    complete: function () {
                        b.activeRequests.remove({ id: "EnchargeRelayGet" });
                        b.mediator.trigger("enpower:grid_status_action");
                    },
                }));
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Collections.Inverters = Backbone.Collection.extend({
        model: b.Models.Inverter,
        hasReceivedInventoryData: !1,
        attrs: {
            alias: "microinverters",
            appTargetCount: "target_microinverter_count",
            collectionPascalized: "Microinverters",
            envoyModelCommCount: "communicating_count",
            envoyModelDeletedCount: "deleted_count",
            envoyModelDetectedCount: "detected_count",
            envoyModelProducingCount: "producing_count",
            envoyModelProfileCount: "profile_count",
            eventCommLevel: "microinverters:CommLevelUpdated",
            hasScan: !0,
            route: "microinverters",
            triggersForCount: ["envoy:detectCountChange", "app:targetCountUpdated"],
            concernedRequests: [{ id: "Inventory" }, { id: "InverterComm" }, { id: "NewScanGet" }, { id: "ProfileStatus" }, { id: "InverterProduction" }, { id: "SystemReadingStats" }],
        },
        comparator: function (a) {
            return a.get("id");
        },
        initialize: function () {
            this.on("add", this.updateDetectedCount, this);
            this.on("remove", this.updateDetectedCount, this);
            b.mediator.on("inverter:adminStateChange", this.updateDetectedCount, this);
        },
        poll: function () {
            b.shouldSuspendPoll() || void 0 == b.activeRequests || b.activeRequests.findWhere({ id: "Inventory" }) || b.inventory.getInventoryData(!1);
        },
        getActiveDevices: function () {
            var a = _.filter(this.models, function (a) {
                return _.contains(["verified", "discovered"], a.get("admin_state"));
            });
            return (a = _.map(a, function (a) {
                return a.toJSON();
            }));
        },
        getDeletedDevices: function () {
            var a = _.filter(this.models, function (a) {
                return _.contains(["deleted"], a.get("admin_state"));
            });
            return (a = _.map(a, function (a) {
                return a.toJSON();
            }));
        },
        deleteDevices: function () {
            var a = this,
                c = b.microinverters.where({ isFlaggedForDelete: !0 });
            if (0 < c.length) {
                var d = [];
                _.each(c, function (a) {
                    d.push({ sn: a.id });
                });
                var e = { envoy_sn: b.envoyModel.get("serial_number"), dev_types: [{ dev_type: 1, part_nums: [{ part_num: c[0].get("part_number"), serial_nums: d }] }] };
                b.wifiDoingScaryStuff = !0;
                e = JSON.stringify(e);
                $.ajax({
                    url: b.ApiUrls.InverterDelete,
                    type: "DELETE",
                    data: e,
                    success: function (d) {
                        a.resetInverterFlags(c, "deleted");
                        b.mediator.trigger("microinverters:DeleteComplete");
                        b.mediator.trigger("inventory:CommunicatingUpdated");
                        b.mediator.trigger("inventory:ProducingUpdated");
                        b.wifiDoingScaryStuff = !1;
                        a.poll();
                    },
                    error: function (a, c, d) {
                        b.shouldSuspendPoll() || (b.mediator.trigger("microinverters:DeleteComplete"), Tools.handleAjaxError(this.url, a, c, d));
                    },
                });
            } else b.mediator.trigger("microinverters:DeleteComplete");
        },
        undeleteDevices: function () {
            var a = this,
                c = b.microinverters.where({ isFlaggedForUnDelete: !0 });
            if (0 < c.length) {
                var d = [];
                _.each(c, function (a) {
                    d.push({ sn: a.id });
                });
                var e = { envoy_sn: b.envoyModel.get("serial_number"), dev_types: [{ dev_type: 1, part_nums: [{ part_num: c[0].get("part_number"), serial_nums: d }] }] },
                    e = JSON.stringify(e);
                $.ajax({
                    url: b.ApiUrls.InverterPut,
                    type: "PUT",
                    data: e,
                    success: function (d) {
                        a.resetInverterFlags(c, "verified");
                        b.mediator.trigger("inventory:CommunicatingUpdated");
                        b.mediator.trigger("inventory:ProducingUpdated");
                    },
                    error: function (a, c, d) {
                        b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, c, d);
                    },
                    complete: function () {
                        b.mediator.trigger("microinverters:UndeleteComplete");
                    },
                });
            } else b.mediator.trigger("microinverters:UndeleteComplete");
        },
        resetInverterFlags: function (a, b) {
            _.each(a, function (a) {
                a.set({ admin_state: b, isFlaggedForDelete: !1, isFlaggedForUnDelete: !1 });
            });
        },
        updateDetectedCount: function () {
            if (void 0 != b.envoyModel) {
                var a = b.microinverters.getActiveDevices(),
                    c = b.microinverters.getDeletedDevices();
                b.envoyModel.set({ detected_count: a.length, deleted_count: c.length });
            }
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Collections.MeterWizard = Backbone.Collection.extend({
        model: b.Models.MeterWizard,
        initialize: function () {
            this.add(new b.Models.MeterWizard({ meterType: "production" }));
            this.add(new b.Models.MeterWizard({ meterType: "consumption" }));
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Collections.Meters = Backbone.Collection.extend({
        model: b.Models.Meter,
        polling_interval: null,
        initialize: function () {
            1 == b.showInternalMeters() &&
                (this.getInternalMeterData(),
                (this.polling_interval = setInterval(this.poll, b.pollingFrequency())),
                b.mediator.on("app:targetCountUpdated", this.resetPollingInterval, this),
                b.mediator.on("app:targetAcbCountUpdated", this.resetPollingInterval, this),
                b.mediator.on("app:targetEnchargeBatteriesCountUpdated", this.resetPollingInterval, this),
                b.mediator.on("meter_wizard:getMeterReadings", this.getInternalMeterReadings, this),
                b.mediator.on("meters:getCurrentCT", this.getInternalMeterCurrentCTSettings, this),
                b.mediator.on("meter_wizard:getMeterData", this.wizardTriggerGetData, this),
                this.on("change:state", b.envoyModel.removeMeterEnableAlert, this));
        },
        poll: function () {
            b.shouldSuspendPoll() || void 0 == b.activeRequests || b.activeRequests.findWhere({ id: "InternalMeterInfo" }) || EnvoyBackboneApp.meters.getInternalMeterData();
        },
        resetPollingInterval: function () {
            this.polling_interval = b.resetPollingInterval(this.polling_interval, this.poll);
            this.poll();
        },
        updateConfig: function (a, c) {
            var d = this,
                e = this.findWhere({ type: "eim_production" }),
                g = e.generateData(a),
                g = _.extend({ eid: e.get("id") }, g),
                e = this.findWhere({ type: "eim_consumption" }),
                f = e.generateData(c),
                f = _.extend({ eid: e.get("id") }, f),
                e = [g, f];
            b.activeRequests.add({ id: "METERS_UPDATE_CONFIG" });
            $.ajax({
                url: b.ApiUrls.InternalMeterInfo,
                type: "PUT",
                dataType: "json",
                timeout: 12e4,
                data: JSON.stringify(e),
                processData: !1,
                success: function (a) {
                    d.parseInternalMeterData(a);
                    "enabled" == g.state && g.phaseCount && 1 < g.phaseCount && d.redeterminePhase();
                },
                error: function (a, c, d) {
                    b.mediator.trigger("meter:updateConfigFailed");
                    Tools.handleAjaxError(this.url, a, c, d);
                },
                complete: function () {
                    b.activeRequests.remove({ id: "METERS_UPDATE_CONFIG" });
                    b.mediator.trigger("meters:updateConfigDone");
                },
            });
        },
        redeterminePhase: function () {
            $.ajax({
                url: b.ApiUrls.RedeterminePhase,
                type: "POST",
                dataType: "json",
                data: JSON.stringify({}),
                contentType: "application/json",
                success: function (a) {},
                error: function (a, c, d) {
                    b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, c, d);
                },
            });
        },
        wizardTriggerGetData: function () {
            b.activeRequests.findWhere({ id: "METERS_UPDATE_CONFIG" }) || this.getInternalMeterData(!0);
        },
        getInternalMeterData: function (a) {
            var c = this;
            b.activeRequests.add({ id: "InternalMeterInfo" });
            $.ajax({
                url: b.ApiUrls.InternalMeterInfo,
                dataType: "json",
                success: function (a) {
                    c.parseInternalMeterData(a);
                },
                error: function (a, c, g) {
                    b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, c, g);
                },
                complete: function () {
                    b.activeRequests.remove({ id: "InternalMeterInfo" });
                },
            });
        },
        parseInternalMeterData: function (a) {
            var c = this,
                d = this.findWhere({ type: "eim_production" }),
                e = this.findWhere({ type: "eim_consumption" });
            _.each(a, function (a) {
                var b = "eim_consumption";
                "production" == a.measurementType && (b = "eim_production");
                1 != EnvoyBackboneApp.microinverters.showPhase && "three" == a.phaseMode && (EnvoyBackboneApp.microinverters.showPhase = !0);
                var k = Tools.translateMeterStatus(a.meteringStatus, a.state);
                (void 0 == d && "production" == b) || (void 0 == e && "consumption" == b)
                    ? c.push({ id: a.eid, type: b, state: a.state, measurementType: a.measurementType, phaseMode: a.phaseMode, meteringStatus: k, statusFlags: a.statusFlags, phaseCount: a.phaseCount })
                    : c.set({ id: a.eid, type: b, state: a.state, measurementType: a.measurementType, phaseMode: a.phaseMode, meteringStatus: k, statusFlags: a.statusFlags, phaseCount: a.phaseCount }, { remove: !1 });
            });
            b.mediator.trigger("meters:updated");
        },
        getInternalMeterReadings: function () {
            var a = this;
            b.activeRequests.add({ id: "InternalMeterReadings" });
            $.ajax({
                url: b.ApiUrls.InternalMeterReadings,
                dataType: "json",
                success: function (b) {
                    a.parseInternalMeterReadings(b);
                },
                error: function (a, d, e) {
                    b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, d, e);
                },
                complete: function () {
                    b.activeRequests.remove({ id: "InternalMeterReadings" });
                },
            });
        },
        parseInternalMeterReadings: function (a) {
            var c = this,
                d = [];
            _.each(a, function (a) {
                _.each(a.channels, function (a, b) {
                    d[b] = { wNow: Precision.normalize([a.instantaneousDemand], "W", !1, null)[0] };
                });
                c.set({ id: a.eid, meterReadings: { wNow: Precision.normalize([a.instantaneousDemand], "W", !1, null)[0], lines: _.clone(d) } }, { remove: !1 });
            });
            b.mediator.trigger("meters:readingsUpdated");
        },
        getConsumptionType: function () {
            if (void 0 == a && void 0 != this.findWhere({ type: "eim_consumption" }))
                var a = this.findWhere({ type: "eim_consumption" }),
                    b = a.get("measurementType");
            return b;
        },
        metersAreEnabled: function () {
            var a = b.meters.findWhere({ type: "eim_production" }).get("state"),
                c = b.meters.findWhere({ type: "eim_consumption" }).get("state");
            return "enabled" == a && "enabled" == c;
        },
        setMeterDisable: function () {
            this.disableAllowed = !0;
        },
        clearMeterDisable: function () {
            this.disableAllowed = !1;
        },
        meterDisableIsAllowed: function () {
            return !!this.disableAllowed;
        },
        getInternalMeterCurrentCTSettings: function () {
            var a = this;
            b.activeRequests.add({ id: "InternalMeterCurrentCTSettings" });
            $.ajax({
                url: b.ApiUrls.InternalMeterCurrentCTSettings,
                dataType: "json",
                success: function (b) {
                    a.parseInternalMeterCurrentCTSettings(b);
                },
                error: function (a, d, e) {
                    b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, d, e);
                },
                complete: function () {
                    b.activeRequests.remove({ id: "InternalMeterCurrentCTSettings" });
                },
            });
        },
        parseInternalMeterCurrentCTSettings: function (a, c) {
            var d = this;
            void 0 == c
                ? _.each(a, function (a, b) {
                      d.upDateModel(a, b);
                  })
                : d.upDateModel(a, c);
            b.mediator.trigger("meters:ctSettingsUpdated");
        },
        upDateModel: function (a, b) {
            this.set({ id: b, attachType: a.attachType, primaryAmps: a.primaryAmps, secondaryAmps: a.secondaryAmps, resistorOhms: a.resistorOhms, turns: a.turns }, { remove: !1 });
        },
        updateCurrentConfig: function (a, c, d) {
            var e = this,
                g = this.findWhere({ type: a }).get("id");
            a = b.ApiUrls.UpdateMeterCurrentCTConfig.replace("EID", g);
            c = JSON.stringify({ attachType: c, primaryAmps: d, secondaryAmps: 5, resistorOhms: 0, turns: 20 });
            d = RegExp(/((?:primary|secondary)Amps|resistorOhms)":(\d+),?/g);
            for (var f = d.exec(c), k = c; null != f; ) (k = k.replace(f[0], f[1] + '":' + f[2] + ".0,")), (f = d.exec(c));
            $.ajax({
                url: a,
                type: "PUT",
                dataType: "json",
                data: k,
                contentType: "application/json",
                success: function (a) {
                    e.parseInternalMeterCurrentCTSettings(a, g);
                },
                error: function (a, c, d) {
                    b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, c, d);
                },
            });
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Collections.Nsrs = Backbone.Collection.extend({
        model: b.Models.Nsr,
        polling_interval: null,
        attrs: {
            alias: "nsr",
            appTargetCount: "target_nsr_count",
            collectionPascalized: "Nsrs",
            envoyModelCommCount: "communicating_nsr_count",
            envoyModelDeletedCount: "deleted_nsr_count",
            envoyModelDetectedCount: "detected_nsr_count",
            envoyModelProducingCount: "operating_nsr_count",
            envoyModelProfileCount: "profile_nsr_count",
            eventCommLevel: "nsrs:CommLevelUpdated",
            hasScan: !0,
            route: "nsr",
            triggersForCount: ["envoy:detectNsrCountChange", "app:targetNsrCountUpdated"],
            concernedRequests: [{ id: "Inventory" }, { id: "InverterComm" }, { id: "NewScanGet" }, { id: "ProfileStatus" }, { id: "InverterProduction" }, { id: "SystemReadingStats" }],
        },
        initialize: function () {
            this.on("add", this.updateDetectedCount, this);
            this.on("remove", this.updateDetectedCount, this);
            b.mediator.on("nsr:adminStateChange", this.updateDetectedCount, this);
        },
        poll: function () {},
        resetPollingInterval: function () {},
        getActiveDevices: function () {
            var a = _.filter(this.models, function (a) {
                return _.contains(["verified", "discovered"], a.get("admin_state"));
            });
            return (a = _.map(a, function (a) {
                return a.toJSON();
            }));
        },
        getDeletedDevices: function () {
            var a = _.filter(this.models, function (a) {
                return _.contains(["deleted"], a.get("admin_state"));
            });
            return (a = _.map(a, function (a) {
                return a.toJSON();
            }));
        },
        deleteDevices: function () {
            var a = this,
                c = b.nsrs.where({ isFlaggedForDelete: !0 });
            if (0 < c.length) {
                var d = [];
                _.each(c, function (a) {
                    d.push({ sn: a.id });
                });
                var e = { envoy_sn: b.envoyModel.get("serial_number"), dev_types: [{ dev_type: 12, part_nums: [{ part_num: c[0].get("part_number"), serial_nums: d }] }] };
                b.wifiDoingScaryStuff = !0;
                e = JSON.stringify(e);
                $.ajax({
                    url: b.ApiUrls.InverterDelete,
                    type: "DELETE",
                    data: e,
                    success: function (d) {
                        a.updateDevStatus(c, "deleted");
                        b.wifiDoingScaryStuff = !1;
                        b.mediator.trigger("nsrs:DeleteComplete");
                        a.poll();
                    },
                    error: function (a, c, d) {
                        b.shouldSuspendPoll() || (b.mediator.trigger("nsrs:DeleteComplete"), Tools.handleAjaxError(this.url, a, c, d));
                    },
                });
            } else b.mediator.trigger("nsrs:DeleteComplete");
        },
        undeleteDevices: function () {
            var a = this,
                c = b.nsrs.where({ isFlaggedForUnDelete: !0 });
            if (0 < c.length) {
                var d = [];
                _.each(c, function (a) {
                    d.push({ sn: a.id });
                });
                var e = { envoy_sn: b.envoyModel.get("serial_number"), dev_types: [{ dev_type: 12, part_nums: [{ part_num: c[0].get("part_number"), serial_nums: d }] }] },
                    e = JSON.stringify(e);
                $.ajax({
                    url: b.ApiUrls.InverterPut,
                    type: "PUT",
                    data: e,
                    success: function (b) {
                        a.updateDevStatus(c, "verified");
                    },
                    error: function (a, c, d) {
                        b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, c, d);
                    },
                    complete: function () {
                        b.mediator.trigger("nsrs:UndeleteComplete");
                    },
                });
            } else b.mediator.trigger("nsrs:UndeleteComplete");
        },
        updateDevStatus: function (a, b) {
            _.each(a, function (a) {
                a.set({ admin_state: b, isFlaggedForDelete: !1, isFlaggedForUnDelete: !1 });
            });
        },
        updateDetectedCount: function () {
            if (void 0 != b.envoyModel) {
                var a = b.nsrs.getActiveDevices(),
                    c = b.nsrs.getDeletedDevices();
                b.envoyModel.set({ detected_nsr_count: a.length, deleted_nsr_count: c.length });
            }
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Collections.PMUMeters = Backbone.Collection.extend({
        model: b.Models.PMUMeter,
        polling_interval: null,
        initialize: function () {
            this.getPMUData();
            this.polling_interval = setInterval(this.poll, b.pollingFrequency());
            b.mediator.on("app:targetCountUpdated", this.resetPollingInterval, this);
        },
        poll: function () {
            b.shouldSuspendPoll() || void 0 == b.activeRequests || b.activeRequests.findWhere({ id: "PMUGet" }) || EnvoyBackboneApp.pmus.getPMUData();
        },
        resetPollingInterval: function () {
            this.polling_interval = b.resetPollingInterval(this.polling_interval, this.poll);
            this.poll();
        },
        getPMUData: function () {
            var a = this;
            b.activeRequests.add({ id: "PMUGet" });
            $.ajax({
                url: b.ApiUrls.PMUGet,
                dataType: "json",
                success: function (b) {
                    a.parsePMUData(b, !1);
                },
                error: function (a, d, e) {
                    b.shouldSuspendPoll() || Tools.handleAjaxError(this.url, a, d, e);
                },
                complete: function () {
                    b.activeRequests.remove({ id: "PMUGet" });
                },
            });
        },
        parsePMUData: function (a, c) {
            var d = [];
            a.hasOwnProperty("available_pmus") &&
                _.each(a.available_pmus, function (a) {
                    a = _.extend(_.omit(a, "mac_address"), { state: "available", id: a.mac_address });
                    1 == c && (a = _.extend(a, { isFlaggedForAdd: !1 }));
                    d.push(a);
                });
            a.hasOwnProperty("associated_pmus") &&
                _.each(a.associated_pmus, function (a) {
                    var b = new Date(0);
                    b.setUTCSeconds(a.last_report);
                    var f = Precision.normalize([1e3 * a.total_kWh], "Wh", !1, null)[0];
                    a = _.extend(_.omit(a, "mac_address"), { state: "associated", id: a.mac_address, last_report_date: b, lifetime_energy: f });
                    1 == c && (a = _.extend(a, { isFlaggedForAdd: !1 }));
                    d.push(a);
                });
            this.set(d);
            1 == c && b.mediator.trigger("meters:PMUUpdateComplete");
        },
        updatePMUs: function (a, c) {
            var d = this;
            $.ajax({
                url: b.ApiUrls.PMUPost,
                type: "POST",
                dataType: "json",
                data: $.param({ fname: a, ip_addresses: c.toString() }),
                success: function (a) {
                    d.parsePMUData(a, !0);
                },
                error: function (c, d, f) {
                    b.shouldSuspendPoll() || (Tools.handleAjaxError(this.url, c, d, f), b.mediator.trigger("meters:PMU" + a + "Failed"));
                },
            });
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Collections.Seasons = Backbone.Collection.extend({
        model: b.Models.Season,
        initialize: function (a, b) {
            this.collectionName = b.name;
            this.tariffType = b.tariffType;
            this.weekend_rates = this.seasonal_rates = !1;
            this.allTimeSlots = this.initializeTimeSlots();
        },
        initializeTimeSlots: function () {
            var a = {
                seasons: [
                    {
                        id: "season_1",
                        days: [
                            { id: "all_days", periods: [] },
                            { id: "weekdays", periods: [] },
                            { id: "weekend", periods: [] },
                        ],
                    },
                    {
                        id: "season_2",
                        days: [
                            { id: "all_days", periods: [] },
                            { id: "weekdays", periods: [] },
                            { id: "weekend", periods: [] },
                        ],
                    },
                ],
            };
            _.each(a.seasons, function (a) {
                _.each(a.days, function (a) {
                    for (var b = 0; 24 >= b; b++) a.periods.push({ hour: b });
                });
            });
            return a;
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Collections.SoftwarePackages = Backbone.Collection.extend({
        model: b.Models.SoftwarePackage,
        initialize: function () {
            this.getData();
        },
        getData: function () {
            var a = this;
            b.activeRequests.add({ id: "GetInfo" });
            $.ajax({
                url: b.ApiUrls.GetInfo,
                dataType: "xml",
                success: function (b) {
                    a.parseData(b);
                },
                error: function (c, d, e) {
                    b.shouldSuspendPoll() || (Tools.handleAjaxError(this.url, c, d, e), a.getData());
                },
                complete: function () {
                    b.activeRequests.remove({ id: "GetInfo" });
                },
            });
        },
        parseData: function (a) {
            var c = [],
                d = $(a).find("device").find("pn").text(),
                e = "none";
            $(a).find("device").find("fast_data_port") && (e = $(a).find("device").find("fast_data_port").text());
            b.envoyModel.set({ part_number: d, fast_data_port: e });
            d = "none";
            $(a).find("device").find("fft_port") && (d = $(a).find("device").find("fft_port").text());
            b.envoyModel.set({ fft_port: d });
            _.each($(a).find("package"), function (a) {
                a = $(a);
                c.push({ name: a.attr("name"), part_number: a.find("pn").text(), version: a.find("version").text(), build: a.find("build").text() });
            });
            _.each($(a).find("build_info"), function (a) {
                a = $(a);
                c.push({ build_id: a.find("build_id").text(), build_time_gmt: a.find("build_time_gmt").text() });
            });
            this.set(c);
            b.mediator.trigger("software_packages:InfoLoaded");
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Collections.Tiers = Backbone.Collection.extend({ model: b.Models.tier });
})(EnvoyBackboneApp);
(function (b) {
    b.Collections.Timezones = Backbone.Collection.extend({
        model: b.Models.Timezone,
        initialize: function () {
            this.getData();
        },
        getData: function () {
            var a = this,
                c = b.ApiUrls.GetTimezones + "&locale=" + I18n.locale.split("-")[0];
            b.activeRequests.add({ id: "GetTimezones" });
            $.ajax({
                url: c,
                type: "GET",
                dataType: "json",
                success: function (b) {
                    a.parseData(b);
                },
                error: function (c, e, g) {
                    b.shouldSuspendPoll() || (Tools.handleAjaxError(this.url, c, e, g), a.getData());
                },
                complete: function () {
                    b.activeRequests.remove({ id: "GetTimezones" });
                },
            });
        },
        parseData: function (a) {
            this.reset(a.timezones);
            b.mediator.trigger("timezones:Loaded");
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Collections.WifiSites = Backbone.Collection.extend({
        polling_interval: void 0,
        model: b.Models.WifiSite,
        haveSiteData: !1,
        comparator: function (a) {
            return a.get("ssid").toLowerCase();
        },
        initialize: function () {
            this.on("change add remove", this.triggerSitesUpdated, this);
        },
        restartPolling: function () {
            void 0 == this.polling_interval ? ((this.polling_interval = setInterval(this.poll, 2e4)), this.poll(), this.on("destroy", this.stopPolling, this)) : this.poll();
        },
        stopPolling: function () {
            clearInterval(this.polling_interval);
            this.polling_interval = void 0;
        },
        poll: function () {
            b.wifiDoingScaryStuff || void 0 == b.wifiSites || void 0 == b.activeRequests || b.activeRequests.findWhere({ id: "WifiSettingsWithSites" }) || b.wifiSites.getWifiDataWithSites();
        },
        getWifiDataWithSites: function () {
            var a = this;
            a.pendingRequest = !0;
            b.activeRequests.add({ id: "WifiSettingsWithSites" });
            $.ajax({
                url: b.ApiUrls.WifiSettings,
                dataType: "json",
                success: function (c) {
                    a.pendingRequest = !1;
                    b.wifiModel.parseWifiData(c);
                    b.mediator.trigger("wifi:gotdata");
                    b.mediator.trigger("network:DiagnosticDataLoaded");
                },
                error: function (b, d, e) {
                    a.pendingRequest = !1;
                    Tools.handleAjaxError(this.url, b, d, e);
                },
                complete: function () {
                    b.activeRequests.remove({ id: "WifiSettingsWithSites" });
                },
            });
        },
        parseSiteData: function (a) {
            var b = [];
            _.each(a.sites, function (a, e) {
                var g = "",
                    f = "",
                    g = a.unsupported ? "wifi_unsupported" : a.wps ? "wifi_locked_wps" : "Open/Unsecured" == a.security_mode ? "" : "wifi_locked",
                    f = 4 >= a.bars ? "wifi_signal_" + a.bars : "wifi_signal_4";
                b.push({
                    site_id: e,
                    ssid: a.ssid,
                    is_current_ssid: a.is_current_ssid,
                    bars: a.bars,
                    wps: a.wps,
                    security_mode: a.security_mode,
                    secured: a.secured,
                    mac: a.mac,
                    encryption_type: a.encryption_type,
                    unsupported: a.unsupported,
                    channel: a.channel,
                    security_icon: g,
                    bars_icon: f,
                });
            });
            this.set(b);
            this.haveSiteData = !0;
        },
        triggerSitesUpdated: function () {
            b.mediator.trigger("wifi_sites:SitesUpdated");
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.PackagesSummary = Backbone.View.extend({
        className: "about_packages",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["more/about_packages"];
            this.collection = b.software_packages;
            b.mediator.on("software_packages:InfoLoaded", this.render, this);
            0 < this.collection.length && this.render();
            return this;
        },
        render: function () {
            var a = this.template({ sw_packages: this.collection.toJSON() });
            this.$el.html(a);
            return this;
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.AboutPage = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["more/about_page"];
            this.aboutEnvoyView = new b.Views.AboutEnvoySummary({ bOnOverview: !1 });
            this.aboutPackagesView = new b.Views.PackagesSummary();
            b.envoyModel.poll();
            b.loaderBar.setConcernedList([{ id: "Home" }, { id: "GetInfo" }]);
            return this;
        },
        render: function () {
            var a = this.template();
            this.$el.html(a);
            this.assign(this.aboutEnvoyView, ".about_envoy_summary");
            this.assign(this.aboutPackagesView, ".about_packages");
            return this;
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            this.aboutEnvoyView.close();
            this.aboutPackagesView.close();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.AddPMU = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["meters/add_pmus"];
            this.collection = b.pmus;
            b.loaderBar.setConcernedList([{ id: "PMUGet" }]);
            b.pmus.poll();
            this.listenTo(this.collection, "add", this.render);
            this.listenTo(this.collection, "remove", this.render);
            b.mediator.on("meters:PMUUpdateComplete", this.redirectToMain, this);
            b.mediator.on("meters:PMUUpdateFailed", this.turnOffLoader, this);
            this.isLoading = !1;
            return this;
        },
        events: { "click .add_pmu_header": "toggleFlaggedForChange", "click .submit": "submitForm", "submit form": "submitForm", keypress: "evaluateEnter" },
        render: function () {
            var a = [];
            0 < this.collection.where({ state: "available" }).length &&
                (a = _.map(this.collection.where({ state: "available" }), function (a) {
                    return a.toJSON();
                }));
            a = this.template({ available_pmus: a, isLoading: this.isLoading });
            this.$el.html(a);
            return this;
        },
        toggleFlaggedForChange: function (a) {
            a = $(a.target).first().closest(".add_pmu_header");
            if (void 0 != a) {
                var c = b.pmus.findWhere({ id: $(a).attr("data-pmu-id") });
                if (c) {
                    var d = $(a).find(".glyphicons").hasClass("unchecked");
                    c.set({ isFlaggedForAdd: d });
                    1 == d ? $(a).find(".glyphicons").removeClass("unchecked").addClass("check") : $(a).find(".glyphicons").removeClass("check").addClass("unchecked");
                }
            }
        },
        evaluateEnter: function (a) {
            13 == a.keyCode && a.preventDefault();
        },
        submitForm: function (a) {
            a.preventDefault();
            a = _.map(this.collection.where({ state: "available", isFlaggedForAdd: !0 }), function (a) {
                return a.get("ip");
            });
            _.isEmpty(a) || ((this.isLoading = !0), this.render(), b.pmus.updatePMUs("accept", a));
        },
        redirectToMain: function () {
            b.router.navigate("meters", { trigger: !0 });
        },
        turnOffLoader: function () {
            this.isLoading = !1;
            this.render();
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            this.stopListening(this.collection);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.AuthenticationPage = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["auth/main"];
            this.client_id = "envoy-ui-client";
            this.jwtStatus = "";
            this.supportConnection = new b.Views.SupportConnectionConfig();
            b.envoyModel.pollSupportConnectionState();
            this.monitoringView = new b.Views.MonitoringSummary({ bShowReportSettings: !1, bOnOverview: !0 });
            this.showNetworkEnabled = !1;
            b.mediator.on("network:EthernetConfigLoaded", this.showNetwork, this);
            b.network.pollEthernetConfig();
            return this;
        },
        events: { "click #authms": "goToAuthMS", "click #enterjwt": "enterJWT" },
        render: function () {
            var a = this.template({ jwtStatus: this.jwtStatus, showNetwork: this.showNetworkEnabled, auth_authority: BackboneConfig.authentication_authority_url });
            this.$el.html(a);
            this.assign(this.monitoringView, ".monitoring_summary");
            void 0 != this.supportConnection && this.assign(this.supportConnection, ".support_connection_summary");
            return this;
        },
        showNetwork: function () {
            this.showNetworkEnabled = !0;
            this.render();
        },
        goToAuthMS: function () {
            var a = BackboneConfig.authentication_authority_url,
                b = this.randomString(40),
                d = this.generateCodeChallenge(b);
            window.localStorage.setItem("code_verifier", b);
            //custom edited
            let redirectUrl =
                a +
                "authorize?code_challenge=" +
                d +
                "&client_id=" +
                this.client_id +
                "&redirect_uri=" +
                (window.location.protocol + "//" + window.location.host + "/auth/callback") +
                "&scope=" +
                BackboneConfig.serial +
                "&response_type=code&code_challenge_method=S256";

            console.log(redirectUrl)
            //disabled redirection
            //window.location.href = redirectUrl
        },
        enterJWT: function () {
            var a = this,
                c = this.$el.find("form textarea#jwtbox")[0].value;
            a.jwtStatus = "verifyingToken";
            a.render();
            $.ajax({
                url: "/auth/check_jwt",
                type: "GET",
                headers: { Authorization: "Bearer " + c },
                success: function (a) {
                    b.mediator.trigger("app:initReady");
                    b.router.navigate("overview", { trigger: !0 });
                },
                error: function (b, c, g) {
                    a.jwtStatus = 503 == b.status ? "tooManySessions" : "badToken";
                    a.render();
                },
            });
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            this.stopListening(this.model);
            this.monitoringView.close();
            void 0 != this.supportConnection && this.supportConnection.close();
        },
        randomString: function (a) {
            for (var b = "", d = 0; d < a; d++) b += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".charAt(Math.floor(62 * Math.random()));
            return b;
        },
        generateCodeChallenge: function (a) {
            var b = new jsSHA("SHA-256", "TEXT");
            b.update(a);
            a = b.getHash("BYTES");
            a = btoa(a).replace(/\+/g, "-").replace(/\//g, "_");
            BackboneConfig.authentication_authority_url.includes("mock-authms.herokuapp") || (a = a.replace(/=/g, ""));
            return a;
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.CellularPage = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["network/cellular"];
            this.model = b.network;
            1 == b.isPublic() ? ((this.isLoading = !0), b.mediator.on("cellular:ConfigLoaded", this.checkLoader, this)) : (this.isLoading = !1);
            b.loaderBar.setConcernedList([{ id: "Home" }, { id: "CellularConfig" }]);
            b.mediator.on("network:CellularConfigChange", this.render, this);
            this.model.startPollingCellularConfig();
            return this;
        },
        render: function () {
            var a = this.template({ model: this.model.toJSON(), isLoading: this.isLoading });
            this.$el.html(a);
            return this;
        },
        checkLoader: function () {
            1 == this.isLoading && ((this.isLoading = !1), this.render());
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            this.stopListening(this.model);
            this.model.stopPollingCellularConfig();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.CheckWiring = Backbone.View.extend({
        className: "check_wiring",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["meters/check_wiring"];
            this.meterType = a.meterType;
            this.listenTo(this.model, "change:meterStatus change:statusFlags", this.render);
        },
        render: function () {
            var a = {};
            void 0 != this.model && (a = this.model.toJSON());
            a = this.template({ model: a });
            this.$el.html(a);
            return this;
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.ConfirmConnectModal = Backbone.View.extend({
        className: "modal-dialog",
        tagName: "div",
        ssid: " ",
        initialize: function () {
            this.template = JST.confirm_connect;
            this.setElement($("#confirm_connect"));
            b.mediator.on("app:domReady", this.createModal, this);
            b.mediator.on("confirmConnect:show", this.showInfoAlert, this);
        },
        events: { "click .btn-primary": "okModal", "click .close": "cancelModal" },
        setSsid: function (a) {
            this.ssid = a;
        },
        render: function () {
            var a = I18n.t("envoy_backbone.wifi.connect.connect_warning"),
                c = b.wifiModel.get("hw_state");
            this.setElement($("#confirm_connect"));
            a = this.template({ ssid: this.ssid, confirm_note: a, configured: c.configured });
            this.$el.html(a);
            return this;
        },
        createModal: function () {
            this.render();
            $("#confirm_connect").modal({ show: !1 });
        },
        cancelModal: function () {
            $("#confirm_connect").modal("hide");
            b.mediator.trigger("confirmConnect:cancel");
        },
        okModal: function () {
            $("#confirm_connect").modal("hide");
            b.mediator.trigger("confirmConnect:ok");
        },
        showInfoAlert: function (a, b) {
            this.render();
            $("#confirm_connect").modal("show");
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.ConfirmSettingModal = Backbone.View.extend({
        className: "modal-dialog",
        tagName: "div",
        ssid: " ",
        initialize: function () {
            this.template = JST.confirm_setting;
            this.setElement($("#confirm_setting"));
            this.model = b.network;
            this.app_trigger = "confirmSetting:submit";
            b.mediator.on("app:domReady", this.createModal, this);
            b.mediator.on("confirmSetting:show", this.showInfoAlert, this);
        },
        events: { "click .btn-primary": "okModal", "click .close": "cancelModal" },
        render: function () {
            this.setElement($("#confirm_setting"));
            var a = this.template({ title: this.title, text: this.bodyText });
            this.$el.html(a);
            return this;
        },
        createModal: function () {
            this.render();
            $("#confirm_setting").modal({ show: !1 });
        },
        updateModalType: function (a, b, d, e) {
            this.title = a;
            this.bodyText = b;
            this.app_trigger = d;
            this.model = e;
        },
        cancelModal: function () {
            $("#confirm_setting").modal("hide");
            b.mediator.trigger("confirmSetting:hide");
        },
        okModal: function () {
            $("#confirm_setting").modal("hide");
            void 0 != this.model ? this.model.trigger(this.app_trigger) : b.mediator.trigger(this.app_trigger);
        },
        showInfoAlert: function () {
            this.render();
            $("#confirm_setting").modal("show");
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.ContentContainer = Backbone.View.extend({
        initialize: function (a) {
            return this;
        },
        render: function () {
            return this;
        },
        getPage: function (a) {
            b.currentView && b.currentView.close();
            b.currentView = a;
            b.currentView.render();
            $("#content-container").html(b.currentView.el);
            window.scrollTo(0, 0);
            return this;
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.DataErrorModal = Backbone.View.extend({
        className: "modal-dialog",
        tagName: "div",
        initialize: function () {
            this.template = JST.data_error;
            this.setElement($("#data_error"));
            this.model = new b.Models.Error();
            b.mediator.on("app:domReady", this.createModal, this);
            b.mediator.on("app:dataError", this.showError, this);
            b.mediator.on("app:dataNotAllowed", this.showNotAllowed, this);
            b.mediator.on("app:dataTimeout", this.showTimeout, this);
            b.mediator.on("startscan:DeviceCountTooLowInverter", this.showScanErrorInverter, this);
            b.mediator.on("startscan:DeviceCountTooLowBattery", this.showScanErrorBattery, this);
            b.mediator.on("startscan:DeviceCountTooLowNsr", this.showScanErrorNsr, this);
            b.mediator.on("startscan:DeviceCountTooLowBoth", this.showScanErrorBoth, this);
            b.mediator.on("app:networkUpdateBadRequest", this.show, this);
            b.mediator.on("app:dataNotAuthorized", this.show, this);
            b.mediator.on("acb:sleepEnableFailed", this.showACBSleepError, this);
            b.mediator.on("encharge_batteries:sleepEnableFailed", this.showEnchargeBatteriesSleepError, this);
        },
        events: {
            "click .btn-primary": "closeModal",
            "click .close": "closeModal",
            "click .open-target-count": "triggerOpenTargetCount",
            "click .open-manage-devices": "triggerOpenMicroManageDevices",
            "click .open-manage-devices-battery": "triggerOpenBatteryManageDevices",
            "click .open-manage-devices-nsr": "triggerOpenNsrManageDevices",
        },
        render: function () {
            this.setElement($("#data_error"));
            this.$el.html(this.template({ model: this.model.toJSON() }));
            return this;
        },
        createModal: function () {
            this.render();
            $("#data_error").modal({ show: !1 });
        },
        closeModal: function () {
            $("#data_error").modal("hide");
            this.model.get("setCountOpen") && $("#set_microinverter_count").modal("show");
        },
        showModal: function () {
            $("#data_error").hasClass("in") ||
                (this.model.set({ setCountOpen: $("#set_microinverter_count").hasClass("in") }), this.model.get("setCountOpen") && $("#set_microinverter_count").modal("hide"), this.render(), $("#data_error").modal("show"));
        },
        showError: function () {
            this.model.set({ title: I18n.t("envoy_backbone.errors.title"), text: I18n.t("envoy_backbone.errors.error_message") });
            this.showModal();
            b.error_count++;
            b.error_count <= b.maxErrorCount() && (window.location = "#appalert");
        },
        triggerOpenTargetCount: function (a) {
            a.preventDefault();
            this.closeModal();
            b.mediator.trigger("app:showMicroinverterCountModal");
        },
        triggerOpenMicroManageDevices: function (a) {
            a.preventDefault();
            this.closeModal();
            b.router.navigate("microinverters/manage", { trigger: !0 });
        },
        triggerOpenBatteryManageDevices: function (a) {
            a.preventDefault();
            this.closeModal();
            b.router.navigate("acb/manage", { trigger: !0 });
        },
        triggerOpenNsrManageDevices: function (a) {
            a.preventDefault();
            this.closeModal();
            b.router.navigate("nsr/manage", { trigger: !0 });
        },
        showNotAllowed: function () {
            this.model.set({ title: I18n.t("envoy_backbone.errors.title"), text: I18n.t("envoy_backbone.errors.not_allowed") });
            this.showModal();
        },
        showScanErrorInverter: function () {
            var a = I18n.t("envoy_backbone.errors.start_scan_target_too_low_micro", { count: b.target_microinverter_count }),
                a = a + I18n.t("envoy_backbone.errors.start_scan_target_too_low_micro_end");
            this.model.set({ title: I18n.t("envoy_backbone.errors.start_scan_title"), text: a });
            this.showModal();
        },
        showScanErrorBattery: function () {
            var a = I18n.t("envoy_backbone.errors.start_scan_target_too_low_battery", { count: b.target_acb_count }),
                a = a + I18n.t("envoy_backbone.errors.start_scan_target_too_low_battery_end");
            this.model.set({ title: I18n.t("envoy_backbone.errors.start_scan_title"), text: a });
            this.showModal();
        },
        showScanErrorNsr: function () {
            var a = I18n.t("envoy_backbone.errors.start_scan_target_too_low_nsr", { count: b.target_nsr_count }),
                a = a + I18n.t("envoy_backbone.errors.start_scan_target_too_low_nsr_end");
            this.model.set({ title: I18n.t("envoy_backbone.errors.start_scan_title"), text: a });
            this.showModal();
        },
        showScanErrorBoth: function () {
            this.model.set({ title: I18n.t("envoy_backbone.errors.start_scan_title"), text: I18n.t("envoy_backbone.errors.start_scan_target_too_low_both") });
            this.showModal();
        },
        showACBSleepError: function () {
            this.model.set({ title: I18n.t("envoy_backbone.errors.title"), text: I18n.t("envoy_backbone.ac_batteries.sleep_mode.enable_failed") });
            this.showModal();
        },
        showEnchargeBatteriesSleepError: function () {
            this.model.set({ title: I18n.t("envoy_backbone.errors.title"), text: I18n.t("envoy_backbone.ac_batteries.sleep_mode.enable_failed") });
            this.showModal();
        },
        showTimeout: function () {
            this.model.set({ title: I18n.t("envoy_backbone.errors.title"), text: I18n.t("envoy_backbone.errors.timeout_message") });
            this.showModal();
            b.timeout_count++;
            b.timeout_count <= b.maxTimeoutCount() && (window.location = "#appalert");
        },
        show: function () {
            this.showModal();
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.DateTimePage = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["more/datetime_page"];
            this.dateTimeSettings = new b.Views.DateTimeSettings();
            this.timezoneSettings = new b.Views.TimezoneSettings();
            b.loaderBar.setConcernedList([{ id: "Home" }, { id: "GetTimezones" }]);
            return this;
        },
        render: function () {
            var a = this.template();
            this.$el.html(a);
            this.assign(this.dateTimeSettings, ".datetime_settings");
            this.assign(this.timezoneSettings, ".timezone_settings");
            return this;
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            this.timezoneSettings.close();
            this.dateTimeSettings.close();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.DateTimeSettings = Backbone.View.extend({
        className: "datetime_settings",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["more/datetime_settings"];
            this.model = b.envoyModel;
            this.listenTo(this.model, "change:date", this.render);
            this.listenTo(this.model, "change:time", this.render);
            b.mediator.on("envoy:TimezoneUpdate", this.render, this);
            return this;
        },
        render: function () {
            this.$el.html(this.template({ model: this.model.toJSON() }));
            return this;
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            this.stopListening(this.model);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.DetectedPage = Backbone.View.extend({
        className: "detected-list",
        tagName: "div",
        initialize: function (a) {
            this.lastClickTime = this.click = 0;
            this.showPhase = this.showParamTable = !1;
            this.options = a;
            this.template = JST["shared/detected_main"];
            this.envoyModel = b.envoyModel;
            this.searchTerm = "";
            this.showDeviceLink = this.bExpandState = !1;
            this.collection = b[a.collection_type];
            this.collection_type = a.collection_type;
            b.mediator.on(a.collection_type + ":CommLevelUpdated", this.render, this);
            this.showDeviceLink = b.showInverterLink(this.collection_type);
            this.listenTo(this.collection, "change:last_interval_watts", this.render);
            b.mediator.on("inventory:InvUpdated", this.render, this);
            this.collection.poll();
            b.inventory.pollProfileStatus();
            b.inventory.pollInverterProduction();
            b.inventory.pollCommCheck();
            b.scanModel.poll();
            return this;
        },
        events: {
            "click .detected_device_header .accordion-toggle": "toggleDeviceExpanded",
            "click #toggle-list-state": "toggleWholeList",
            "change #searchDetectedDevices": "searchList",
            "click .remove": "clearSearch",
            "submit #filterDevices": "searchList",
            "keypress #filterDevices": "evaluateEnter",
            "click .clear-gfi": "clearGFITriggered",
            "click .select-phase": "showPhaseSelectModal",
            "click #cancel_sleep": "showCancelSleepPrompt",
            "click #wake_sleep": "showWakeSleepPrompt",
            "click #running_image": "runningImageClick",
            "click .line_help": "showLineStatusHelp",
        },
        render: function () {
            var a = this.envoyModel.getProfile();
            this.setUpExpandState();
            activeDevices = b[this.collection_type].getActiveDevices();
            if ("" != this.searchTerm) {
                var c = new RegExp(this.searchTerm, "g");
                activeDevices = _.filter(activeDevices, function (a) {
                    return a.id.match(c);
                });
            }
            var d = !1,
                e = 0;
            this.showPhase = !1;
            void 0 != EnvoyBackboneApp.meters &&
                void 0 != EnvoyBackboneApp.meters.findWhere({ type: "eim_production" }) &&
                void 0 != EnvoyBackboneApp.meters.findWhere({ type: "eim_consumption" }) &&
                ("three" == EnvoyBackboneApp.meters.findWhere({ type: "eim_production" }).get("phaseMode") && (this.showPhase = !0),
                (d = "enabled" == EnvoyBackboneApp.meters.findWhere({ type: "eim_production" }).get("state") && "enabled" == EnvoyBackboneApp.meters.findWhere({ type: "eim_consumption" }).get("state")) &&
                    (e = EnvoyBackboneApp.meters.findWhere({ type: "eim_production" }).get("phaseCount")));
            var g = this.envoyModel.get("enpower_grid_status").mains_oper_state;
            this.$el.html(
                this.template({
                    collection_type: this.collection_type,
                    searchTerm: this.searchTerm,
                    bExpandState: this.bExpandState,
                    current_profile: a,
                    devices: activeDevices,
                    isGFIClearable: "EU" != BackboneConfig.envoy_type && "microinverters" == this.collection_type,
                    showDeviceLink: this.showDeviceLink,
                    showProfiles: b.showProfiles(),
                    metersEnabled: d,
                    phaseCount: e,
                    showPhase: this.showPhase,
                    showParameterTable: this.showParamTable,
                    state_of_grid: g,
                })
            );
            return this;
        },
        toggleDeviceExpanded: function (a) {
            a = $(a.target).first().closest("a");
            void 0 != a && (a = this.collection.findWhere({ id: $(a).attr("data-device-id") })) && a.set({ isExpanded: !a.get("isExpanded") });
        },
        setUpExpandState: function () {
            this.bExpandState =
                "ac_batteries" == this.collection_type
                    ? b.acbDetectedListExpanded
                    : "encharge_batteries" == this.collection_type
                    ? b.enchargeBatteriesDetectedListExpanded
                    : "enpowers" == this.collection_type
                    ? b.enpowersDetectedListExpanded
                    : b.detectedListExpanded;
        },
        toggleWholeList: function (a) {
            var c = !1;
            1 == this.bExpandState
                ? ((this.bExpandState = !1), this.$el.find("#toggle-list-state").removeClass("collapse_top").addClass("expand"), this.$el.find("a.accordion-toggle").addClass("collapsed"), this.$el.find(".panel-collapse").collapse("hide"))
                : ((this.bExpandState = !0),
                  this.$el.find("#toggle-list-state").removeClass("expand").addClass("collapse_top"),
                  this.$el.find("a.accordion-toggle").removeClass("collapsed"),
                  this.$el.find(".panel-collapse").collapse("show"));
            "ac_batteries" == this.collection_type
                ? (b.acbDetectedListExpanded = this.bExpandState)
                : "encharge_batteries" == this.collection_type
                ? (b.enchargeBatteriesDetectedListExpanded = this.bExpandState)
                : "enpowers" == this.collection_type
                ? (b.enpowersDetectedListExpanded = this.bExpandState)
                : (b.detectedListExpanded = this.bExpandState);
            c = this.bExpandState;
            this.collection.each(function (a) {
                a.set({ isExpanded: c });
            });
        },
        clearGFITriggered: function (a) {
            device = b[this.collection_type].get($(a.target).data("device-id"));
            void 0 != device &&
                ((a = ""),
                _.contains(device.get("status"), "envoy.cond_flags.pcu_chan.dcresistancelowpoweroff")
                    ? (a = I18n.t("envoy_backbone.microinverters.condition_clear.description", { condition_flag: I18n.t("envoy.cond_flags.pcu_chan.dcresistancelowpoweroff") }))
                    : _.contains(device.get("status"), "envoy.cond_flags.pcu_chan.gfitripped") && (a = I18n.t("envoy_backbone.microinverters.condition_clear.description", { condition_flag: I18n.t("envoy.cond_flags.pcu_chan.gfitripped") })),
                "" != a && (b.confirmSettingModal.updateModalType(I18n.t("envoy_backbone.microinverters.condition_clear.title"), a, "gficlear:submit", device), b.mediator.trigger("confirmSetting:show")));
        },
        evaluateEnter: function (a) {
            13 == a.keyCode && this.searchList(a);
        },
        searchList: function (a) {
            this.$el.find("#searchDetectedDevices").focus();
            this.$el.find("#searchDetectedDevices").blur();
            this.searchTerm = this.$el.find("#searchDetectedDevices").val();
            void 0 != this.searchTerm && (this.searchTerm = this.searchTerm.trim());
            this.render();
        },
        clearSearch: function (a) {
            this.searchTerm = "";
            this.render();
        },
        showCancelSleepPrompt: function (a) {
            a = $(a.target).first().closest("#cancel_sleep");
            void 0 != a &&
                (a = b[this.collection_type].findWhere({ id: $(a).attr("data-device-id") })) &&
                (a.set({ isFlaggedForCancelSleep: !0 }), a.set({ cancelMode: "cancel" }), b.mediator.trigger("showSleepCancelModal", { collection_type: this.collection_type }));
        },
        showLineStatusHelp: function () {
            b.infoAlertModal.setTitle(I18n.t("envoy_backbone.nsr.line_status_help_title"));
            b.infoAlertModal.setText(I18n.t("envoy_backbone.nsr.line_status_help_text"));
            b.mediator.trigger("info:showInfo");
        },
        showWakeSleepPrompt: function (a) {
            a = $(a.target).first().closest("#wake_sleep");
            void 0 != a &&
                (a = b[this.collection_type].findWhere({ id: $(a).attr("data-device-id") })) &&
                (a.set({ isFlaggedForCancelSleep: !0 }), a.set({ cancelMode: "wake" }), b.mediator.trigger("showSleepCancelModal", { collection_type: this.collection_type }));
        },
        runningImageClick: function (a) {
            a = new Date().getTime();
            this.lastClickTime + 500 > a ? ((this.click += 1), 8 <= this.click && ((this.showParamTable = !0), this.render())) : (this.click = 0);
            this.lastClickTime = a;
        },
        close: function () {
            this.remove();
            this.unbind();
            b.mediator.off(null, null, this);
            this.stopListening(this.collection);
        },
        showPhaseSelectModal: function (a) {
            "ac_batteries" == this.collection_type
                ? ((device = b.ac_batteries.get($(a.target).data("device-id"))), b.setPhaseModal.showSelectPhaseModal(device))
                : "encharge_batteries" == this.collection_type && ((device = b.encharge_batteries.get($(a.target).data("device-id"))), b.setPhaseModal.showSelectPhaseModal(device));
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.DetectedScanState = Backbone.View.extend({
        className: "action",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["microinverters/device_scan_state"];
            this.model = b.scanModel;
            this.collection_type = a.collection_type;
            this.formEdited = !1;
            this.listenTo(this.model, "change", this.render);
            this.listenTo(this.model, "change:active", this.change);
            return this;
        },
        events: {
            "show.bs.collapse #advanced_options": "toggleAdvancedOptionsExpanded",
            "hide.bs.collapse #advanced_options": "toggleAdvancedOptionsExpanded",
            "click button.start": "startScan",
            "click button.stop": "stopScan",
            "focus input": "toggleFormEdited",
            "focus select": "toggleFormEdited",
            "change #scan_duration_total": "updatePriorityScanDuration",
            "keypress form": "evaluateEnter",
        },
        render: function () {
            0 == this.formEdited && this.$el.html(this.template({ model: this.model.toJSON(), device_scan_options: this.model.durationOptions(), scanFormOptionsExpanded: b.scanFormOptionsExpanded }));
            return this;
        },
        toggleFormEdited: function () {
            0 == this.formEdited && (this.formEdited = !0);
        },
        toggleAdvancedOptionsExpanded: function (a) {
            b.scanFormOptionsExpanded = "show" == a.type;
            "show" == a.type
                ? $("a.show-advanced-options").html('<span class = "glyphicons expand"></span> ' + I18n.t("envoy_backbone.microinverters.scan_settings.less_options"))
                : $("a.show-advanced-options").html('<span class = "glyphicons expand"></span> ' + I18n.t("envoy_backbone.microinverters.scan_settings.advanced_options"));
        },
        evaluateEnter: function (a) {
            13 == a.keyCode && this.startScan(a);
        },
        startScan: function (a) {
            a.preventDefault();
            a = { scan_duration_total: $("#scan_duration_total").val(), priority_duration_total: $("#priority_duration_total").val() };
            this.formEdited = !1;
            this.model.startScan(a, this.collection_type);
        },
        updatePriorityScanDuration: function () {
            var a = parseInt($("#scan_duration_total").val()),
                b = $("#priority_duration_total");
            b.empty();
            b.append($("<option></option>").attr("value", "").text(""));
            _.each(this.model.durationOptions(), function (d) {
                d.option_value <= a && b.append($("<option></option>").attr("value", d.option_value).text(d.option_text));
            });
        },
        stopScan: function (a) {
            this.formEdited = !1;
            this.model.stopScan();
        },
        change: function () {
            !1 === this.model.attributes.active && !1 === this.model.attributes.manual_stop && 1 <= $("#device_scan.in").length && $(".btn-scan").click();
        },
        close: function () {
            this.remove();
            this.unbind();
            b.mediator.off(null, null, this);
            this.stopListening(this.model);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.DiagnosticNetworkInfo = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["network/diagnostic_network_info"];
            this.model = b.network;
            this.wifiModel = b.wifiModel;
            this.checkListeners();
            this.listenTo(this.model, "change:primary_network", this.checkListeners);
            return this;
        },
        render: function () {
            var a = "",
                c = this.model.get("primary_network");
            "wifi" == c
                ? (a = "wifi_" + b.wifiModel.iconString())
                : "cellular" == c
                ? (a = "cellular_signal_" + this.model.get("cellular_config").bars)
                : "ethernet" == c && (a = void 0 != this.model.get("ethernet_config") && 1 == this.model.get("ethernet_config").network ? "ethernet_connected" : "ethernet_not_connected");
            a = this.template({ model: this.model.toJSON(), wifi: this.wifiModel.toJSON(), icon: a });
            this.$el.html(a);
            return this;
        },
        checkListeners: function () {
            "cellular" == this.model.get("primary_network")
                ? (this.stopListening(this.model, "change:ethernet_config"), this.stopListening(this.wifiModel), this.listenTo(this.model, "change:cellular_config", this.render), this.model.startPollingCellularConfig())
                : (this.model.stopPollingCellularConfig(),
                  this.stopListening(this.model, "change:cellular_config"),
                  "wifi" == this.model.get("primary_network")
                      ? (this.stopListening(this.model, "change:ethernet_config"), this.listenTo(this.wifiModel, "change", this.render))
                      : (this.stopListening(this.wifiModel), this.listenTo(this.model, "change:ethernet_config", this.render)));
            this.render();
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            this.stopListening(this.model);
            this.stopListening(this.wifiModel);
            this.model.stopPollingCellularConfig();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.EIMOverview = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["meters/eim_overview"];
            this.listenTo(b.meters, "add", this.assignMeters);
            this.assignMeters();
            b.mediator.trigger("meters:getCurrentCT");
            this.primaryAmpOptions = [400, 500, 600, 750, 800, 1e3, 1200, 1500, 1600, 2e3];
            b.mediator.on("meters:ctSettingsUpdated", this.render, this);
            b.mediator.on("SetCurrentCT:removeCheckBoxCT", this.removeCheckBox, this);
            this.desc = I18n.t("envoy_backbone.meters.wizard.desc");
            (a && a.wizardFinished) || b.meters.poll();
            a && (this.expandManual = a.expand);
            b.mediator.on("meters:updated", this.metersUpdateDone, this);
            return this;
        },
        events: {
            "click #get_started": "getStarted",
            "click .production-ct-edit": "replaceWithDropDown",
            "click .consumption-ct-edit": "replaceWithDropDown",
            "click .production-ct": "toggleProductionCT",
            "click .consumption-ct": "toggleConsumptionCT",
            "click #update-current-ct": "updateCurrentSettings",
        },
        render: function () {
            var a = "";
            void 0 !== this.ct_consumption_meter && (a = this.ct_consumption_meter.get("meteringStatus"));
            var c = "";
            void 0 !== this.ct_production_meter && (c = this.ct_production_meter.get("meteringStatus"));
            var d = b.meters.findWhere({ type: "eim_consumption" }) ? "none" != b.meters.findWhere({ type: "eim_consumption" }).attributes.attachType : !1,
                e = b.meters.findWhere({ type: "eim_production" }) ? "none" != b.meters.findWhere({ type: "eim_production" }).attributes.attachType : !1;
            this.setDisplayOptions();
            a = this.template({
                desc: this.desc,
                ct_consumption_status_class: a,
                ct_production_status_class: c,
                showInternalMeters: b.showInternalMeters(),
                prodPrimaryAmps: this.ct_production_meter ? this.ct_production_meter.get("primaryAmps") : 0,
                prodAttachType: this.ct_production_meter ? this.ct_production_meter.get("attachType") : 0,
                consPrimaryAmps: this.ct_consumption_meter ? this.ct_consumption_meter.get("primaryAmps") : 0,
                consAttachType: this.ct_consumption_meter ? this.ct_consumption_meter.get("attachType") : 0,
                primaryAmpOptions: this.primaryAmpOptions,
                consumptionCTIsChecked: d,
                productionCTIsChecked: e,
                showHighCurCt: !1,
            });
            this.$el.html(a);
            this.setVisibleElements();
            this.$el.find("#current-ct-title").removeClass("preloader preloader_sm").addClass("glyphicons expand");
            return this;
        },
        setDisplayOptions: function () {
            this.ct_production_meter && "enabled" === this.ct_production_meter.get("state")
                ? (this.desc = I18n.t("envoy_backbone.meters.wizard.desc_consumption"))
                : this.ct_consumption_meter && "enabled" === this.ct_consumption_meter.get("state")
                ? (this.desc = I18n.t("envoy_backbone.meters.wizard.desc_production"))
                : (this.desc = I18n.t("envoy_backbone.meters.wizard.desc"));
        },
        setVisibleElements: function () {
            this.ct_production_meter && "enabled" === this.ct_production_meter.get("state") && this.ct_consumption_meter && "enabled" === this.ct_consumption_meter.get("state")
                ? (this.$el.find("#not_enabled").hide(), this.$el.find("#manual_settings").hide(), this.$el.find(".meter_wizard").hide(), this.$el.find(".show-manual-meters").hide(), this.$el.find("#manual_settings").collapse("show"))
                : this.ct_production_meter && "enabled" === this.ct_production_meter.get("state")
                ? (this.$el.find("#not_enabled").html(I18n.t("envoy_backbone.meters.wizard.consumption_not_enabled")),
                  this.$el.find("#not_enabled").show(),
                  this.$el.find("#production_final_control").show(),
                  this.$el.find("#production_control").hide(),
                  this.$el.find("#consumption_final_control").hide())
                : this.ct_consumption_meter && "enabled" === this.ct_consumption_meter.get("state")
                ? (this.$el.find("#not_enabled").html(I18n.t("envoy_backbone.meters.wizard.production_not_enabled")),
                  this.$el.find("#not_enabled").show(),
                  this.$el.find("#consumption_final_control").show(),
                  this.$el.find("#consumption_control").hide(),
                  this.$el.find("#production_final_control").hide())
                : (this.$el.find("#not_enabled").hide(), this.$el.find("#production_final_control").hide(), this.$el.find("#consumption_final_control").hide());
            this.expandManual && this.$el.find("#manual_settings").collapse("show");
        },
        metersUpdateDone: function () {
            this.render();
        },
        assignMeters: function () {
            void 0 == this.ct_consumption_meter && ((this.ct_consumption_meter = b.meters.findWhere({ type: "eim_consumption" })), void 0 != this.ct_consumption_meter && this.listenTo(this.ct_consumption_meter, "change", this.render));
            void 0 == this.ct_production_meter && ((this.ct_production_meter = b.meters.findWhere({ type: "eim_production" })), void 0 != this.ct_production_meter && this.listenTo(this.ct_production_meter, "change", this.render));
        },
        getStarted: function (a) {
            b.wifiDoingScaryStuff = !0;
            b.mediator.trigger("meter:getMeterData");
            this.ct_production_meter.set("checkMeters", !0 === a);
            this.ct_consumption_meter.set("checkMeters", !0 === a);
            "disabled" === this.ct_production_meter.get("state") || !0 === a ? b.router.navigate("#meters/wizard_select/production", { trigger: !0 }) : b.router.navigate("#meters/wizard_select/consumption", { trigger: !0 });
            b.lastRoute = "meter_wizard";
        },
        replaceWithDropDown: function (a) {
            a = a.target.className.split("-")[0];
            this.$el.find("." + a + "-ct-amps").addClass("hidden");
            this.$el.find("." + a + "-ct-edit").addClass("hidden");
            this.$el.find("." + a + "-ct-amps-options").removeClass("hidden");
            this.$el.find("#update-current-ct").removeClass("hidden");
        },
        toggleCurrentSettingsDisplay: function () {
            this.currentCTSettingDisplayed = !this.currentCTSettingDisplayed;
        },
        removeCheckBox: function (a) {
            var c = this.$el.find("." + a + "-ct"),
                d = $(c).find(".glyphicons").hasClass("check"),
                e = this.$el.find("#" + a + "-ct-options");
            d && ($(c).find(".glyphicons").removeClass("check").addClass("unchecked"), $(e).removeClass("collapse in").addClass("collapse"), b.meters.updateCurrentConfig("eim_" + a, "none", 0));
        },
        toggleConsumptionCT: function (a) {
            var c = this.$el.find(".consumption-ct"),
                d = $(c).find(".glyphicons").hasClass("check"),
                e = this.$el.find("#consumption-ct-options");
            d
                ? "daisychain" == this.ct_consumption_meter.get("attachType")
                    ? b.mediator.trigger("showSetCurrentCTModal", a)
                    : ($(c).find(".glyphicons").removeClass("check").addClass("unchecked"), $(e).removeClass("collapse in").addClass("collapse"), this.setButtonVisiblity())
                : ($(c).find(".glyphicons").removeClass("unchecked").addClass("check"), $(e).removeClass("collapse").addClass("collapse in"), this.$el.find("#update-current-ct").removeClass("hidden"));
        },
        toggleProductionCT: function (a) {
            var c = this.$el.find(".production-ct"),
                d = $(c).find(".glyphicons").hasClass("check"),
                e = this.$el.find("#production-ct-options");
            d
                ? "daisychain" == this.ct_production_meter.get("attachType")
                    ? b.mediator.trigger("showSetCurrentCTModal", a)
                    : ($(c).find(".glyphicons").removeClass("check").addClass("unchecked"), $(e).removeClass("collapse in").addClass("collapse"), this.setButtonVisiblity())
                : ($(c).find(".glyphicons").removeClass("unchecked").addClass("check"), $(e).removeClass("collapse").addClass("collapse in"), this.$el.find("#update-current-ct").removeClass("hidden"));
        },
        setButtonVisiblity: function () {
            var a = this.$el.find(".production-ct"),
                b = $(a).find(".glyphicons").hasClass("check"),
                a = this.$el.find(".consumption-ct"),
                a = $(a).find(".glyphicons").hasClass("check");
            b || a || this.$el.find("#update-current-ct").addClass("hidden");
        },
        updateCurrentSettings: function () {
            var a = this.$el.find("select.consumption-ct-amps-options").val(),
                c = this.$el.find(".consumption-ct"),
                c = $(c).find(".glyphicons").hasClass("check");
            a && c && b.meters.updateCurrentConfig("eim_consumption", "daisychain", parseInt(a));
            a = this.$el.find("select.production-ct-amps-options").val();
            c = this.$el.find(".production-ct");
            c = $(c).find(".glyphicons").hasClass("check");
            a && c && b.meters.updateCurrentConfig("eim_production", "daisychain", parseInt(a));
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            this.stopListening(b.meters);
            this.stopListening(this.ct_consumption_meter);
            this.stopListening(this.ct_production_meter);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.EthernetPage = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["network/ethernet"];
            this.model = b.network;
            1 == b.isPublic() ? ((this.isLoading = !0), this.model.startPollingEthernetConfig(!0), b.mediator.on("network:EthernetConfigLoaded", this.hideLoader, this)) : (this.isLoading = !1);
            this.form = null;
            b.mediator.on("network:EthernetConfigChange", this.hideLoader, this);
            b.mediator.on("confirmSetting:submit", this.submitForm, this);
            b.loaderBar.setConcernedList([{ id: "Home" }, { id: "EthernetConfigGet" }]);
            return this;
        },
        events: { "click button.switch-setting": "switchDHCPTriggered", "click button.submit": "validateConfig", "submit form": "validateConfig", "keypress form": "evaluateEnter", "click button.get-new-ip": "updateIPAddress" },
        render: function () {
            void 0 != this.model.get("ethernet_config") && 0 == this.model.get("ethernet_config").dhcp && void 0 != this.model.get("ethernet_config").netmask
                ? (b.wifiDoingScaryStuff = !0)
                : void 0 != this.model.get("ethernet_config") && 0 == this.model.get("ethernet_config").dhcp
                ? ((this.isLoading = !0), this.model.getEthernetConfig())
                : ((b.wifiDoingScaryStuff = !1), (this.form = null));
            var a = this.template({ model: this.model.toJSON(), isLoading: this.isLoading });
            this.$el.html(a);
            return this;
        },
        evaluateEnter: function (a) {
            13 == a.keyCode && this.validateConfig(a);
        },
        switchDHCPTriggered: function (a) {
            a.preventDefault();
            this.form = "switch_dhcp";
            "on" == ("static" == this.$el.find("button.switch-setting").data("value") ? "off" : "on")
                ? b.confirmSettingModal.updateModalType(I18n.t("envoy_backbone.ethernet.confirm_change.title"), I18n.t("envoy_backbone.ethernet.confirm_change.description"), "confirmSetting:submit")
                : b.confirmSettingModal.updateModalType(I18n.t("envoy_backbone.ethernet.confirm_static.title"), I18n.t("envoy_backbone.ethernet.confirm_static.description"), "confirmSetting:submit");
            b.mediator.trigger("confirmSetting:show");
        },
        updateIPAddress: function (a) {
            this.form = "update_ip";
            b.confirmSettingModal.updateModalType(I18n.t("envoy_backbone.ethernet.new_ip_modal.title"), I18n.t("envoy_backbone.ethernet.new_ip_modal.description"), "confirmSetting:submit");
            b.mediator.trigger("confirmSetting:show");
        },
        showLoader: function () {
            this.isLoading = !0;
            this.render();
        },
        hideLoader: function () {
            this.isLoading = !1;
            this.render();
        },
        submitForm: function (a) {
            "update_ethernet_config" == this.form
                ? (this.model.updateEthernetConfig({
                      dhcp: !1,
                      ip_address: $("input#ip_address").val(),
                      netmask: $("input#netmask").val(),
                      gateway_ip: $("input#gateway_ip").val(),
                      primary_dns: $("input#primary_dns").val(),
                      secondary_dns: $("input#secondary_dns").val(),
                  }),
                  this.showLoader())
                : "switch_dhcp" == this.form
                ? ((a = this.model.get("ethernet_config")),
                  this.showLoader(),
                  this.model.updateEthernetConfig({ dhcp: !a.dhcp, ip_address: a.ip_address, netmask: a.netmask, gateway_ip: a.gateway_ip, primary_dns: a.primary_dns, secondary_dns: a.secondary_dns }))
                : "update_ip" == this.form && (this.showLoader(), this.model.updateIPAddress());
        },
        validateConfig: function (a) {
            a.preventDefault();
            this.form = "update_ethernet_config";
            $("#" + this.form)
                .validate({ errorClass: "has-error" })
                .form() &&
                (b.confirmSettingModal.updateModalType(I18n.t("envoy_backbone.ethernet.confirm_change.title"), I18n.t("envoy_backbone.ethernet.confirm_change.description"), "confirmSetting:submit"),
                b.mediator.trigger("confirmSetting:show"));
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            b.wifiDoingScaryStuff = !1;
            this.stopListening(this.model);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.EventsPage = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["more/events_page"];
            b.loaderBar.setConcernedList([]);
            return this;
        },
        startDatatables: function () {
            this.$el.find("#eventsTable").DataTable({
                serverSide: !0,
                processing: !0,
                language: {
                    processing: I18n.t("envoy.paging.processing"),
                    zeroRecords: I18n.t("envoy.paging.zerorecords"),
                    info: I18n.t("envoy.paging.info"),
                    infoEmpty: I18n.t("envoy.paging.infoempty"),
                    infoFiltered: I18n.t("envoy.paging.infofiltered"),
                    search: "",
                    sLoadingRecords: I18n.t("envoy.paging.processing"),
                    searchPlaceholder: I18n.t("envoy_backbone.forms.search"),
                },
                columnDefs: [
                    { targets: [0], visible: !1 },
                    { targets: [1], visible: !0 },
                    {
                        targets: [2],
                        render: function (a, b, d) {
                            return d[4];
                        },
                    },
                    {
                        targets: [3],
                        render: function (a, b, d) {
                            return a + " " + d[2];
                        },
                    },
                    { targets: [4], visible: !1 },
                ],
                ordering: !1,
                searching: !0,
                searchDelay: 500,
                ajax: b.ApiUrls.EventsGet + "?locale=" + I18n.locale.split("-")[0],
                dom: "firtS",
                info: !0,
                scrollY: $(window).height() - parseInt($("#navbar").css("height")) - $(".panel").offset().top - 20 - 28 - 66,
                scroller: { loadingIndicator: !0, serverWait: 1e3, boundaryScale: 1, rowHeight: 57 },
            });
        },
        render: function () {
            var a = this,
                b = this.template();
            this.$el.html(b);
            setTimeout(function () {
                a.startDatatables();
            }, 500);
            return this;
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.ExternalProductionMeter = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["meters/external_production_meter"];
            this.model = b.meters.get({ id: a.meter_id });
            void 0 == this.model ? b.router.navigate("meters", { trigger: !0 }) : this.listenTo(this.model, "change", this.render);
            return this;
        },
        render: function () {
            void 0 == this.model && b.router.navigate("meters", { trigger: !0 });
            var a = this.template({ model: this.model.toJSON() });
            this.$el.html(a);
            return this;
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            this.stopListening(this.model);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.FreqAnalysisView = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["microinverters/freq_analysis"];
            this.model && this.model.startConnection();
            b.mediator.on("freq_analysis:data_updated", this.plot, this);
            b.mediator.on("window:resize", this.resize, this);
            this.powerSpectrum = !0;
            this.DEBUG = !1;
            this.chart_title = I18n.t("envoy_backbone.meters.freq_analysis.plc_power_spectrum");
            return this;
        },
        events: { "click #freq_data_toggle": "toggleData" },
        debug_log: function () {
            this.DEBUG && console.log.apply(this, arguments);
        },
        render: function () {
            this.$el.html(this.template);
            this.$el.find(".device_scan_title").html(this.chart_title);
            return this;
        },
        resize: function () {
            this.setupDone = this.setupContainerDone = !1;
        },
        setupContainer: function () {
            if (!this.setupContainerDone) {
                d3.select("svg");
                var a = $("svg");
                this.margin = { top: 20, right: 10, bottom: 30, left: 40 };
                this.width = a.width() - this.margin.left - this.margin.right;
                console.log("width", this.width);
                this.height = a.height() - this.margin.top - this.margin.bottom;
                this.setupContainerDone = !0;
            }
        },
        setupGraph: function () {
            if (!this.setupDone) {
                var a = d3.select("svg");
                $("svg").empty();
                this.g = a.append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
                this.g.append("path").attr("fill", "none").attr("stroke", "steelblue").attr("stroke-linejoin", "round").attr("stroke-linecap", "round").attr("stroke-width", 0.5);
                this.g
                    .append("g")
                    .attr("transform", "translate(0, " + this.height + ")")
                    .call(d3.axisBottom(this.x));
                this.g.append("g").attr("transform", "translate(0, 0)").call(d3.axisLeft(this.y));
                this.g
                    .append("rect")
                    .attr("x", this.x(this.model.get("centerFreq") - this.model.get("bandwidth") / 2))
                    .attr("y", 0)
                    .attr("height", this.height)
                    .attr("width", this.x(this.model.get("bandwidth")))
                    .attr("fill-opacity", 0.2);
                this.setupDone = !0;
            }
        },
        toggleData: function () {
            this.chart_title = (this.powerSpectrum = !this.powerSpectrum) ? I18n.t("envoy_backbone.meters.freq_analysis.plc_power_spectrum") : I18n.t("envoy_backbone.meters.freq_analysis.plc_activity");
            this.$el.find(".device_scan_title").html(this.chart_title);
            this.resize();
        },
        plot: function (a, b) {
            var d = this;
            this.setupContainer();
            if (this.DEBUG) var e = Date.now();
            this.debug_log("Start New Update @ " + Date.now() + "ms");
            this.x = d3.scaleLinear().rangeRound([0, this.width || 400]);
            this.y = d3.scaleLinear().rangeRound([this.height || 500, 0]);
            this.line = d3
                .line()
                .x(function (a) {
                    return d.x(a.x);
                })
                .y(function (a) {
                    return d.y(a.y);
                });
            var g = this.powerSpectrum ? b || [[0, 0]] : a || [[0, 0]];
            this.x.domain(
                d3.extent(g, function (a) {
                    return a.x;
                })
            );
            this.y.domain(
                d3.extent(g, function (a) {
                    return a.y;
                })
            );
            this.setupGraph();
            this.g.select("path").datum(g).attr("d", this.line);
            this.debug_log("data graphed in " + (Date.now() - e) + "ms");
        },
        close: function () {
            this.model.stopEventListener();
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.GetPasswordModal = Backbone.View.extend({
        className: "modal-dialog",
        tagName: "div",
        password: "",
        error_text: "",
        site: {},
        initialize: function () {
            this.template = JST.get_password;
            this.setElement($("#get_password"));
            b.mediator.on("app:domReady", this.createModal, this);
            b.mediator.on("getPassword:show", this.showGetPassword, this);
        },
        events: { "click .btn-primary": "okModal", "keypress #get_password_textfield": "evaluateEnter", "click .close": "cancelModal" },
        evaluateEnter: function (a) {
            13 === a.which && this.okModal();
        },
        render: function () {
            this.setElement($("#get_password"));
            var a = I18n.t("envoy_backbone.wifi.connect.connect_warning"),
                c = "";
            _.isEmpty(this.site) || (c = this.site.get("ssid"));
            var d = b.wifiModel.get("hw_state"),
                a = this.template({ error_text: this.error_text, ssid: c, connect_note: a, configured: d.configured });
            this.$el.html(a);
            return this;
        },
        setSite: function (a) {
            this.site = a;
        },
        createModal: function () {
            this.render();
            $("#get_password").modal({ show: !1 });
            $("#get_password").on("shown.bs.modal", function (a) {
                $("#get_password input").first().focus();
            });
        },
        getPassword: function () {
            return this.password;
        },
        checkPassword: function (a, b) {
            var d = "";
            if (b)
                /[^a-fA-F0-9]/.test(a)
                    ? (d = I18n.t("lwui.admin.wireless_connectivity.manual_configuration.password_wep_chars"))
                    : 10 != a.length && 26 != a.length && 58 != a.length && (d = I18n.t("lwui.admin.wireless_connectivity.manual_configuration.password_wep"));
            else if (8 > a.length || 63 < a.length) d = I18n.t("lwui.admin.wireless_connectivity.manual_configuration.password_wpa");
            return d;
        },
        okModal: function () {
            var a = this.$el.find("input").val(),
                c = this.checkPassword(a, this.site.get("wps"));
            this.error_text = c;
            if ("" == c) (this.password = a), this.$el.find(".form-group"), $("#get_password").modal("hide"), b.mediator.trigger("getPassword:ok");
            else {
                a = "";
                _.isEmpty(this.site) || (a = this.site.get("ssid"));
                var c = b.wifiModel.get("hw_state"),
                    d = I18n.t("envoy_backbone.wifi.connect.connect_warning"),
                    a = this.template({ error_text: this.error_text, ssid: a, connect_note: d, configured: c.configured });
                this.$el.html(a);
                this.$el.find(".form-group .alert").removeClass("hidden");
                this.$el.find(".form-group").addClass("has-error");
            }
        },
        cancelModal: function () {
            $("#get_password").modal("hide");
            b.mediator.trigger("getPassword:cancel");
        },
        showGetPassword: function (a, b) {
            this.render();
            $("#get_password").modal("show");
            this.$el.find("input:password").trigger("focus");
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.InfoAlertModal = Backbone.View.extend({
        className: "modal-dialog",
        tagName: "div",
        info_title: " ",
        info_text: " ",
        initialize: function () {
            this.template = JST.info_alert;
            this.setElement($("#info_alert"));
            b.mediator.on("app:domReady", this.createModal, this);
            b.mediator.on("info:showInfo", this.showInfoAlert, this);
        },
        events: { "click .btn-primary": "okModal", "click .close": "okModal", "click .open-overview": "navigateToOverview" },
        setTitle: function (a) {
            this.info_title = a;
        },
        setText: function (a) {
            this.info_text = a;
        },
        render: function () {
            this.setElement($("#info_alert"));
            var a = this.template({ info_title: this.info_title, info_text: this.info_text });
            this.$el.html(a);
            return this;
        },
        createModal: function () {
            this.render();
            $("#info_alert").modal({ show: !1 });
        },
        okModal: function () {
            $("#info_alert").modal("hide");
            b.mediator.trigger("info:ok");
        },
        showInfoAlert: function () {
            this.render();
            $("#info_alert").modal("show");
        },
        navigateToOverview: function (a) {
            a.preventDefault();
            $("#info_alert").modal("hide");
            b.router.navigate("/overview", { trigger: !0 });
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.InitialSetup = Backbone.View.extend({
        tagName: "div",
        initialize: function (a) {
            this.template = JST.initial_setup;
            this.collection = b.agfProfiles;
            this.preview_profile = BackboneConfig.preview_profile;
            this.model = b.envoyModel;
            this.isLoading = !1;
            this.listenTo(b.agfProfiles, "add remove", this.render);
            this.listenTo(b.agfProfiles.agfInfo, "change:migration_in_progress", this.render);
            b.mediator.on("app:initReady", this.createView, this);
            b.mediator.on("agfProfiles:dataFetch_success", this.dataFetchSuccess, this);
            b.mediator.on("agfProfiles:dataFetch_failed", this.dataFetchFailed, this);
            return this;
        },
        events: {
            "click .btn-continue": "updateMicroinverterCount",
            "keypress #target_microinverter_count": "evaluateEnter",
            "keypress #target_acb_count": "evaluateEnter",
            "keypress #target_nsr_count": "evaluateEnter",
            "change select.profile_select": "selectingProfile",
            "click .pprofile": "getProfileData",
        },
        render: function () {
            var a = $("#target_microinverter_count")[0];
            if (a) var c = a.value;
            if ((a = $("#target_acb_count")[0])) var d = a.value;
            if ((a = $("#target_nsr_count")[0])) var e = a.value;
            this.loading = !b.agfProfiles.hasReceivedData;
            $(".profile_select").select2("close");
            $(".tariff_select").select2("close");
            if (this.collection.selectedProfile)
                var g = this.collection.selectedProfile,
                    a = g.match(/:\d+\.\d+\.\d+$/),
                    g = g.replace(a, "");
            this.$el.html(
                this.template({
                    model: this.model.toJSON(),
                    target_microinverter_count: c || b.target_microinverter_count,
                    initialTargetInverterCount: b.initialTargetInverterCount(),
                    showAcbInput: b.showInternalMeters(),
                    target_acb_count: d || b.target_acb_count,
                    initialTargetAcbCount: b.initialTargetAcbCount(),
                    showNsrInput: b.showNsrItems(),
                    target_nsr_count: e || b.target_nsr_count,
                    initialTargetNsrCount: b.initialTargetNsrCount(),
                    initialTargetEnchargeBatteriesCount: b.initialTargetEnchargeBatteriesCount(),
                    profiles: this.collection.profileDisplay,
                    preview_profile: this.preview_profile,
                    selected_profile: g,
                    migration_in_progress: this.collection.agfInfo.get("migration_in_progress"),
                    isLoading: this.isLoading,
                })
            );
            this.setInfoButtonVisiblity();
            c = this.$el.find("#profile_select").select2({ placeholder: I18n.t("envoy_backbone.forms.select_prompt"), minimumResultsForSearch: Infinity });
            d = this.model.getProfile();
            d.default_profile_set || c.val(d.profile_id).trigger("change");
            return this;
        },
        createView: function () {
            if (b.showInverterCountPrompt()) b.router.navigate("initial_setup", { trigger: b.showInverterCountPrompt(), replace: !0 }), $("#navbar").hide();
            else {
                var a = "" == b.initialTargetInverterCount() ? 0 : b.initialTargetInverterCount(),
                    c = "" == b.initialTargetAcbCount() ? 0 : b.initialTargetAcbCount(),
                    d = "" == b.initialTargetNsrCount() ? 0 : b.initialTargetNsrCount(),
                    e = "" == b.initialTargetEnchargeBatteriesCount() ? 0 : b.initialTargetEnchargeBatteriesCount(),
                    g = "" == b.initialTargetEnpowersCount() ? 0 : b.initialTargetEnpowersCount();
                b.updateTargetCounts(a, c, d);
                b.updateEnsTargetCounts(e, g);
            }
        },
        updateMicroinverterCount: function (a) {
            a.preventDefault();
            "EU" != b.envoyModel.get("envoy_type") && this.$el.find("#profile_select").removeClass("required");
            if ($("#initial_settings").validate({ errorClass: "has-error" }).form()) {
                var c = parseInt(this.$el.find("input#target_microinverter_count").val()),
                    d = 0;
                b.showInternalMeters() && (d = parseInt(this.$el.find("input#target_acb_count").val()));
                var e = 0;
                b.showNsrItems() && (e = parseInt(this.$el.find("input#target_nsr_count").val()));
                b.updateTargetCounts(c, d, e);
                this.setGridProfile(a);
                $("#navbar").show();
                b.router.navigate("overview", { trigger: !0 });
            }
        },
        updateEnsembleDevicesCount: function (a) {
            a.preventDefault();
            "EU" != b.envoyModel.get("envoy_type") && this.$el.find("#profile_select").removeClass("required");
            if ($("#initial_settings").validate({ errorClass: "has-error" }).form()) {
                var c = b.initialTargetEnchargeBatteriesCount(),
                    d = b.initialTargetEnpowersCount();
                b.updateEnsTargetCounts(c, d);
                this.setGridProfile(a);
                $("#navbar").show();
                b.router.navigate("overview", { trigger: !0 });
            }
        },
        evaluateEnter: function (a) {
            13 === a.which && this.updateMicroinverterCount(a);
        },
        setGridProfile: function (a) {
            var c = {};
            a.preventDefault();
            a = this.$el.find("form #profile_select option:selected").val();
            "" != a && void 0 != a && ((c.selected_profile = a), this.collection.userSettingAgfProfile(c), b.mediator.trigger("init:updateProfile"));
        },
        getProfileData: function (a) {
            if (this.isLoading) a.preventDefault();
            else {
                a = b.agfProfiles.get(this.$el.find("form #profile_select option:selected").val());
                var c = a.get("detailStatus");
                if (void 0 == c || "success" != c)
                    a.set({ detailStatus: "loading" }),
                        (this.isLoading = !0),
                        this.$el.find("#profile_select").prop("disabled", !0),
                        this.$el.find(".pprofile").removeClass("btn btn-primary btn-envoy"),
                        this.$el.find(".pprofile").addClass("preloader preloader_sm"),
                        b.agfProfiles.getDetailData(this.$el.find("form #profile_select option:selected").val(), !0);
            }
        },
        dataFetchSuccess: function () {
            this.$el.find(".pprofile").removeClass("preloader preloader_sm");
            this.$el.find(".pprofile").addClass("btn btn-primary btn-envoy");
            this.$el.find("#profile_select").prop("disabled", !1);
            this.isLoading = !1;
        },
        dataFetchFailed: function () {
            this.$el.find(".pprofile").removeClass("preloader preloader_sm");
            this.$el.find(".pprofile").addClass("btn btn-primary btn-envoy");
            this.$el.find("#profile_select").prop("disabled", !1);
            this.isLoading = !1;
        },
        selectingProfile: function (a) {
            this.editingProfile = !0;
            this.setInfoButtonVisiblity(a);
            this.showSelectedProfile();
            this.clearError();
            b.agfProfiles.previewSelectedProfile = this.$el.find("form #profile_select option:selected").val();
        },
        showSelectedProfile: function () {
            var a = this.$el.find("form #profile_select option:selected").text();
            this.$el.find("#selected_profile_name").html(a);
        },
        clearError: function () {
            this.$el.find("#profile_select-error").remove();
        },
        setInfoButtonVisiblity: function (a) {
            a = this.$el.find("form #profile_select option:selected").val();
            void 0 != a && "" != a ? this.$el.find(".pprofile").removeClass("hidden") : this.$el.find(".pprofile").addClass("hidden");
        },
        close: function () {
            this.remove();
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.InternalMeter = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.meterType = a.meterType;
            this.redirectToMeters = this.enabled = this.showStats = !1;
            this.wizard = a.wizard;
            this.ready = !this.wizard || a.enable;
            this.template = JST["meters/internal_" + this.meterType + "_meter"];
            this.listenTo(b.meters, "add", this.assignMeters);
            this.panelsExpanded = {};
            b.mediator.on("confirmSetting:submit", this.enableMeter, this);
            b.mediator.on("meterWizard:updateModel", this.updateModel, this);
            b.meters.poll();
            b.systemReadingStats.poll();
            b.loaderBar.setConcernedList([{ id: "InternalMeterInfo" }, { id: "SystemReadingStats" }]);
            this.assignMeters();
            b.systemReadingStats.startConnection();
            this.localSelPhaseCount = 0;
            return this;
        },
        events: {
            "submit form": "updateTriggered",
            "keypress form": "evaluateEnter",
            "focus select": "toggleFormEdited",
            "click button.submit": "updateTriggered",
            "click #disable": "disableMeter",
            "change select.phase-count-select": "selectChoice",
            "change select.measurement-type-select": "selectChoice",
        },
        render: function () {
            void 0 != this.model &&
                void 0 != this.otherMeter &&
                "production" == this.meterType &&
                ("three" != this.model.get("phaseMode") || ("enabled" == this.otherMeter.get("state") && 3 == this.otherMeter.get("phaseCount"))) &&
                this.model.set("firstConfig", !0);
            var a = [1, 2, 3],
                c = {};
            if (
                void 0 != this.model &&
                void 0 != this.otherMeter &&
                ((c = this.model.toJSON()),
                "enabled" == this.model.get("state") && (this.enabled = !0),
                "consumption" == this.meterType
                    ? (this.model.meterStats = _.findWhere(b.systemReadingStats.get(this.meterType), { type: "eim", measurementType: "net-consumption" }))
                    : ((this.model.meterStats = _.findWhere(b.systemReadingStats.get(this.meterType), { type: "eim" })), b.systemReadingStats.get("rtProduction")),
                "enabled" == this.model.get("state") || "enabled" == this.otherMeter.get("state"))
            )
                switch (("enabled" == this.model.get("state") ? this.model : this.otherMeter).get("phaseCount")) {
                    case 1:
                        a = [1, 2, 3];
                        break;
                    case 2:
                        a = [2, 3];
                        break;
                    case 3:
                        a = [3];
                }
            if (void 0 != this.model && void 0 != this.otheMeter) var d = this.model.meterStats;
            this.showStats = void 0 != this.model ? Boolean(this.model.get("localFirstConfig")) : !1;
            var e = void 0 != this.model ? this.model.get("measurementType") : "",
                g = Boolean(this.showStats) ? (void 0 != this.model ? this.model.get("phaseCount") : 0) : 0,
                a = this.template({
                    model: c,
                    meterStats: d,
                    showStats: Boolean(this.showStats),
                    eimStats: b.systemReadingStats.get("eimStats"),
                    selectedPhase: g,
                    selectedMeasurementType: e,
                    phaseOptions: a,
                    hasStorage: 0 < b.ac_batteries.getActiveDevices().length,
                    wizard: this.wizard,
                    meterDisableIsAllowed: b.meters.meterDisableIsAllowed(),
                });
            this.$el.html(a);
            this.$el.find("#btn_next").prop("disabled", !this.showStats);
            this.controlPhaseCouplerWarning();
            this.assignSubView();
            return this;
        },
        assignSubView: function () {
            this.checkWiringView && this.assign(this.checkWiringView, ".check_wiring_view");
            this.LoadOnlyStatsView && this.assign(this.LoadOnlyStatsView, ".load_only_meter_stats_view");
            this.LoadAndSolarStatsView && this.assign(this.LoadAndSolarStatsView, ".load_and_solar_meter_stats_view");
        },
        assignMeters: function () {
            if (void 0 == this.model || void 0 == this.otherMeter)
                (this.model = b.meters.findWhere({ type: "eim_" + this.meterType })),
                    (this.otherMeter = "consumption" == this.meterType ? b.meters.findWhere({ type: "eim_production" }) : b.meters.findWhere({ type: "eim_consumption" })),
                    void 0 != this.model && void 0 != this.otherMeter && (this.listenTo(this.model, "change", this.meterUpdated), this.listenTo(this.otherMeter, "change", this.meterUpdated), this.createSubViews());
            this.render();
        },
        meterUpdated: function () {
            this.redirectToMeters ? ((this.redirectToMeters = !1), b.router.navigate("#meters", { trigger: !0 })) : this.render();
        },
        enableMeter: function () {
            0 == this.enabled && ((this.redirectToMeters = this.enabled = !0), (b.lastRoute = "meters"));
            this.updateModel();
        },
        createSubViews: function () {
            this.checkWiringView = new b.Views.CheckWiring({ model: this.model });
            "consumption" == this.meterType
                ? ((this.LoadOnlyStatsView = new b.Views.MeterStats({ model: this.model, meterType: this.meterType, measurementType: "total-consumption" })),
                  (this.LoadAndSolarStatsView = new b.Views.MeterStats({ model: this.model, meterType: this.meterType, measurementType: "net-consumption" })))
                : (this.LoadOnlyStatsView = new b.Views.MeterStats({ model: this.model, meterType: this.meterType, measurementType: "" }));
        },
        toggleFormEdited: function () {
            this.model.toggleFormEdited();
        },
        evaluateEnter: function (a) {
            13 == a.keyCode && this.updateTriggered(a);
        },
        updateTriggered: function (a) {
            a ? a.preventDefault() : "";
            this.form = "update_" + this.meterType + "_config";
            if (
                this.$el
                    .find("#update_" + this.meterType + "_config")
                    .validate({ errorClass: "has-error" })
                    .form()
            )
                if (1 == this.enabled && $("select.phase-count-select").val() == this.model.get("phaseCount")) $("#details").collapse("toggle");
                else if (Boolean(this.showStats) && 1 == this.ready) {
                    var c;
                    if ("three" == this.model.get("phaseMode")) {
                        var d = "";
                        1 == this.enabled && (d = "_post_enable");
                        a = I18n.t("envoy_backbone.meters.enable_" + this.meterType + "_modal.title_mode_three" + d, {
                            type: this.$el.find("select.measurement-type-select option:selected").text(),
                            phCount: I18n.t("envoy_backbone.meters.multi_phase_options.mphase_" + this.model.get("phaseCount")),
                        });
                        c = I18n.t("envoy_backbone.meters.enable_" + this.meterType + "_modal.description_mode_three" + d);
                        "enabled" == this.otherMeter.get("state") &&
                            this.otherMeter.get("phaseCount") < $("select.phase-count-select").val() &&
                            (c = c + "</br></br>" + I18n.t("envoy_backbone.meters.enable_" + this.meterType + "_modal.note_three" + d));
                    } else
                        (a = I18n.t("envoy_backbone.meters.enable_" + this.meterType + "_modal.title", { type: this.$el.find("select.measurement-type-select option:selected").text() })),
                            (c = I18n.t("envoy_backbone.meters.enable_" + this.meterType + "_modal.description"));
                    b.confirmSettingModal.updateModalType(a, c, "confirmSetting:submit");
                    b.mediator.trigger("confirmSetting:show");
                } else this.updateModel(), (this.ready = !0);
        },
        disableMeter: function () {
            b.meters.meterDisableIsAllowed() && this.updateModel(!0);
        },
        updateModel: function (a) {
            var c = "production";
            "consumption" == this.meterType && (c = $("select.measurement-type-select").val());
            if (this.enabled) (d = "enabled"), void 0 != this.LoadOnlyStatsView && this.LoadOnlyStatsView.collapseDetails(), void 0 != this.LoadAndSolarStatsView && this.LoadAndSolarStatsView.collapseDetails();
            else var d = "disabled";
            c = { state: d, measurementType: c };
            d = {};
            if ("three" == this.model.get("phaseMode")) {
                var e = this.$el.find("select.phase-count-select").val();
                "" != e && (c = _.extend({ phaseCount: e }, c));
                d = _.extend({ phaseCount: e }, d);
            }
            b.systemReadingStats.set(this.meterType, []);
            void 0 != this.LoadOnlyStatsView && this.LoadOnlyStatsView.render();
            void 0 != this.LoadAndSolarStatsView && this.LoadAndSolarStatsView.render();
            this.model.set("localFirstConfig", !0);
            this.enabled ? (a && (c.state = "disabled"), "consumption" == this.meterType ? b.meters.updateConfig(d, c) : (a && (c.state = "disabled"), b.meters.updateConfig(c, d))) : this.model.updateConfig(c);
            b.mediator.trigger("meter:getMeterData");
            $("html,body").animate({ scrollTop: 0 }, "slow");
            a && (b.mediator.trigger("meter_wizard:getMeterStats"), b.router.navigate("#meters", { trigger: !0 }));
        },
        selectChoice: function (a) {
            0 == this.enabled &&
                Boolean(this.showStats) &&
                (this.$el.find("select.phase-count-select").val() != this.model.get("phaseCount") || (this.$el.find("select.measurement-type-select").val() != this.model.get("measurementType") && "consumption" == this.meterType)
                    ? ((this.ready = !1), this.$el.find("#main_button").html(I18n.t("envoy_backbone.meters.update_settings")))
                    : ((this.ready = !0), this.$el.find("#main_button").html(I18n.t("envoy_backbone.meters.enable_" + this.meterType + "_meter"))));
            this.$el.find("#btn_next").prop("disabled", !1);
            this.controlPhaseCouplerWarning();
            $(a.currentTarget).find("option[value='']").remove();
            a = $("#update_" + this.meterType + "_config").validate({ errorClass: "has-error" });
            void 0 != a && a.resetForm();
        },
        controlPhaseCouplerWarning: function () {
            "three" === this.model.get("phaseMode") && "eim_production" === this.model.get("type") && 1 < this.$el.find("select.phase-count-select").val()
                ? this.$el.find(".phase_coupler_warning").removeClass("hidden")
                : this.$el.find(".phase_coupler_warning").addClass("hidden");
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            this.stopListening(this.model);
            this.stopListening(this.otherMeter);
            EnvoyBackboneApp.systemReadingStats.stopEventListener(b.systemReadingStats.getRealTimeStats);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.AjaxLoader = Backbone.View.extend({
        className: "modal-dialog",
        tagName: "div",
        initialize: function () {
            this.template = JST.loader;
            b.mediator.on("app:domReady", this.render, this);
            this.concernedList = new b.Collections.AjaxRequests();
            this.activeList = b.activeRequests;
            this.listenTo(this.activeList, "add", this.evaluatePolling);
            this.listenTo(this.activeList, "remove", this.evaluatePolling);
            this.listenTo(this.activeList, "reset", this.evaluatePolling);
        },
        render: function () {
            this.setElement($("#loader"));
            this.$el.html(this.template({}));
            return this;
        },
        close: function () {
            this.remove();
        },
        evaluatePolling: function () {
            var a = this.activeList.pluck("id"),
                b = this.concernedList.pluck("id");
            0 < this.activeList.length && 0 < this.concernedList.length && 0 < _.intersection(a, b).length ? this.$el.find(".loader").addClass("active") : this.$el.find(".loader").removeClass("active");
        },
        setConcernedList: function (a) {
            this.concernedList.set(a);
            this.evaluatePolling();
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            this.stopListening(this.activeList);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.MeterStats = Backbone.View.extend({
        className: "meter_stats",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["meters/meter_stats_view"];
            this.meterType = a.meterType;
            this.measurementType = a.measurementType;
            this.panelsExpanded = {};
            this.panelsExpanded["#" + this.measurementType + "-power-details"] = "enabled" != this.model.get("state");
            this.panelsExpanded["#" + this.measurementType + "-energy-details"] = "enabled" != this.model.get("state");
            this.listenTo(b.systemReadingStats, "change", this.render);
            b.mediator.on("systemReadingStats:updated", this.render, this);
            b.mediator.on("systemReadingStats:fast_data_update", this.render, this);
            return this;
        },
        events: { "click .accordion-toggle": "toggleDetailExpanded" },
        render: function () {
            if (void 0 != this.template) {
                var a = {};
                void 0 != this.model && (a = this.model.toJSON());
                var c = {},
                    d = "",
                    e = "",
                    g = !0,
                    f = !1,
                    k = 0,
                    h = "",
                    l = 0,
                    n = "",
                    q = "",
                    u = 0,
                    v = "",
                    w = 0,
                    t = "",
                    y = !1;
                if ("production" == this.meterType)
                    if (((d = I18n.t("envoy_backbone.overview.production_meter_label")), (c = _.findWhere(b.systemReadingStats.get(this.meterType), { type: "eim" })), void 0 == c || 0 == c.lines.length)) f = !0;
                    else {
                        if (
                            (c.wNow && (k = c.wNow.formatted),
                            c.apprntPwr && (l = c.apprntPwr.formatted),
                            (u = c.whLifetime.formatted),
                            (w = c.vahLifetime.formatted),
                            (v = c.whLifetime.units),
                            (t = c.vahLifetime.units),
                            "enabled" == this.model.get("state") && (y = !0),
                            BackboneConfig.fast_data && b.systemReadingStats.get("rtProduction"))
                        ) {
                            var p = b.systemReadingStats.get("rtProduction");
                            c.time = p.time;
                            _.each(c.lines, function (a, b) {
                                _.each(p.lines[b], function (b, c) {
                                    _.extend(a[c], JSON.parse(JSON.stringify(b)));
                                });
                            });
                            k = p.wNow.formatted;
                            l = p.apprntPwr.formatted;
                        }
                    }
                else if ("consumption" == this.meterType)
                    if (((c = _.findWhere(b.systemReadingStats.get(this.meterType), { type: "eim", measurementType: this.measurementType })), void 0 == c || 0 == c.lines.length)) f = !0;
                    else if (
                        ((g = b.meters.findWhere({ type: "eim_production" }).get("state")),
                        (g = (this.measurementType != this.model.get("measurementType") && "enabled" == g) || this.measurementType == this.model.get("measurementType")),
                        "total-consumption" == this.measurementType)
                    ) {
                        if (
                            ((d = I18n.t("envoy_backbone.meters.meter_type_verbose.total-consumption")),
                            (e = I18n.t("envoy_backbone.meters.total_consumption_desc")),
                            (k = c.wNow.formatted),
                            (l = c.apprntPwr.formatted),
                            (u = c.whLifetime.formatted),
                            (w = c.vahLifetime.formatted),
                            (v = c.whLifetime.units),
                            (t = c.vahLifetime.units),
                            "enabled" == this.model.get("state") && (y = !0),
                            BackboneConfig.fast_data && b.systemReadingStats.get("rtConsumption"))
                        ) {
                            var C = _.findWhere(b.systemReadingStats.get("rtConsumption"), { measurementType: "total-consumption" });
                            c.time = C.time;
                            _.each(c.lines, function (a, b) {
                                _.each(C.lines[b], function (b, c) {
                                    _.extend(a[c], JSON.parse(JSON.stringify(b)));
                                });
                            });
                            k = C.wNow.formatted;
                            l = C.apprntPwr.formatted;
                        }
                    } else if (
                        "net-consumption" == this.measurementType &&
                        ((d = I18n.t("envoy_backbone.meters.meter_type_verbose.net-consumption")),
                        (e = I18n.t("envoy_backbone.meters.net_consumption_desc")),
                        (h = 0 > c.wNow.value ? I18n.t("envoy_backbone.meters.power_exporting") : I18n.t("envoy_backbone.meters.power_importing")),
                        (l = c.apprntPwr.formatted),
                        (k = c.wNow.formatted.replace(/-/, "")),
                        _.each(c.lines, function (a) {
                            a.wNow.formatted = a.wNow.formatted.replace(/-/, "");
                        }),
                        BackboneConfig.fast_data && b.systemReadingStats.get("rtConsumption"))
                    ) {
                        var r = _.findWhere(b.systemReadingStats.get("rtConsumption"), { measurementType: "net-consumption" });
                        c.time = r.time;
                        _.each(c.lines, function (a, b) {
                            _.each(r.lines[b], function (b, c) {
                                var d = JSON.parse(JSON.stringify(b));
                                _.extend(a[c], d);
                            });
                        });
                        k = r.wNow.formatted.replace(/-/, "");
                        _.each(c.lines, function (a) {
                            a.wNow.formatted = a.wNow.formatted.replace(/-/, "");
                        });
                        l = r.apprntPwr.formatted;
                    }
                void 0 != c && (c.wNow && (n = c.wNow.units), c.apprntPwr && (q = c.apprntPwr.units));
                var x = b.systemReadingStats.get("eimStats"),
                    z = _.findWhere(x, { labelKey: "active_power" }),
                    x = _.findWhere(x, { labelKey: "active_energy_lt" }),
                    a = this.template({
                        name: d,
                        measurementType: this.measurementType,
                        meteredCircuit: this.measurementType == this.model.get("measurementType"),
                        showValues: g,
                        description: e,
                        activePowerValue: k,
                        activePowerUnits: n,
                        activePowerDirection: h,
                        apparentPowerValue: l,
                        apparentPowerUnits: q,
                        lineEimStatsPower: z,
                        showLifetime: y,
                        activeEnergyValue: u,
                        activeEnergyUnits: v,
                        apparentEnergyValue: w,
                        apparentEnergyUnits: t,
                        lineEimStatsEnergy: x,
                        model: a,
                        meterStats: c,
                        isLoading: f,
                        panelsExpanded: this.panelsExpanded,
                        fastData: BackboneConfig.fast_data,
                    });
                this.$el.html(a);
                return this;
            }
        },
        toggleDetailExpanded: function (a) {
            a = a.currentTarget.attributes.href.nodeValue;
            void 0 != a && (this.panelsExpanded[a] = 1 == this.panelsExpanded[a] ? !1 : !0);
        },
        collapseDetails: function () {
            this.panelsExpanded["#" + this.measurementType + "-power-details"] = !1;
            this.panelsExpanded["#" + this.measurementType + "-energy-details"] = !1;
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.MeterWizard = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["meters/meter_wizard"];
            this.meterType = a.meterType;
            this.assignMeters();
            this.phaseMode = this.model.get("phaseMode");
            this.phaseCount = "three" == this.phaseMode ? this.model.get("phaseCount") : 1;
            b.mediator.on("setSubView", this.setSubView, this);
            !this.model.get("checkMeters") && "three" === this.phaseMode && this.canSelectPhase()
                ? this.setSubView(new b.Views.MeterWizardPhaseSel({ model: this.model }))
                : this.otherMeter && (b.systemReadingStats.startConnection(), b.mediator.trigger("setSubView", new b.Views.MeterWizardSubView1({ model: this.model })));
            b.wifiDoingScaryStuff = !0;
            return this;
        },
        events: { "click .check-item": "checkoff", "click #global_exit_wizard": "exitWizard" },
        canSelectPhase: function () {
            return "enabled" === this.model.get("state") || "enabled" === this.otherMeter.get("state") || this.otherMeter.get("just_done") ? 3 > ("enabled" === this.model.get("state") ? this.model : this.otherMeter).get("phaseCount") : !0;
        },
        render: function () {
            var a = this.template();
            this.$el.html(a);
            this.subView && this.assign(this.subView, ".wizard_view");
            return this;
        },
        assignMeters: function () {
            if (void 0 == this.model || void 0 == this.otherMeter)
                (this.model = b.meters.findWhere({ type: "eim_" + this.meterType })), (this.otherMeter = "consumption" == this.meterType ? b.meters.findWhere({ type: "eim_production" }) : b.meters.findWhere({ type: "eim_consumption" }));
        },
        setSubView: function (a) {
            this.subView && this.subView.close();
            this.subView = a;
            this.render();
        },
        exitWizard: function () {
            b.mediator.trigger("wizTrouble:show_exit_confirmation");
        },
        metersUpdateDone: function () {
            this.template = JST["meters/meter_wizard"];
            "three" === this.phaseMode && this.canSelectPhase() ? this.setSubView(new b.Views.MeterWizardPhaseSel({ model: this.model })) : this.setSubView(new b.Views.MeterWizardSubView1({ model: this.model }));
        },
        checkoff: function (a) {
            a = a.currentTarget;
            !0 === $(a).find(".glyphicons").hasClass("unchecked") ? $(a).find(".glyphicons").removeClass("unchecked").addClass("check") : $(a).find(".glyphicons").removeClass("check").addClass("unchecked");
            this.$el.find(".cb.check").length === $(".cb").length ? this.$el.find("#btn_next").prop("disabled", !1) : this.$el.find("#btn_next").prop("disabled", !0);
        },
        close: function () {
            b.wifiDoingScaryStuff = !!this.model.get("just_done");
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            EnvoyBackboneApp.systemReadingStats.stopEventListener(b.systemReadingStats.getRealTimeStats);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.MeterWizardEnable = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.widgetType = a.widget_type;
            this.template = JST["meters/meter_wizard_loading"];
            this.displayOptions = a.displayOptions;
            this.meterType = this.model.get("type").split("_")[1];
            this.phaseCount = this.model.get("phaseCount");
            this.wattTolerance = 10;
            this.meterStats = {};
            if (BackboneConfig.fast_data) b.mediator.once("systemReadingStats:fast_data_update", this.loadingDone, this);
            else b.mediator.on("meters:readingsUpdated", this.loadingDone, this), b.mediator.trigger("meter_wizard:getMeterReadings");
            return this;
        },
        events: { "click #btn_enable": "updateModel" },
        render: function () {
            var a = this.template({ meterType: this.meterType, phaseCount: this.phaseCount, displayOptions: this.displayOptions });
            this.$el.html(a);
            this.info_block && this.assign(this.info_block, ".meter-info-block");
            return this;
        },
        filterLineStats: function (a, b) {
            a.lines = _.filter(a.lines, function (a, e) {
                return e < b;
            });
            return a;
        },
        loadingDone: function () {
            var a = "production";
            this.setViewOptions();
            if ("production" === this.meterType)
                if (((this.meterStats = JSON.parse(JSON.stringify(this.model.getMeterData(a, !1)))), this.valuesAreCorrect(this.meterStats))) this.template = JST["meters/meter_wizard_enable"];
                else {
                    b.mediator.trigger("setSubView", new b.Views.MeterWizard_ts2({ model: this.model }));
                    return;
                }
            else (a = "net-consumption"), (this.meterStats = JSON.parse(JSON.stringify(this.model.getMeterData(a, !1)))), (this.template = JST["meters/meter_wizard_enable"]);
            this.info_block = new b.Views.MeterWizardInfoBlock({
                model: this.model,
                widget_type: this.widgetType,
                meterStats: this.meterStats,
                measurementType: a,
                showDirection: "consumption" === this.meterType,
                phaseCount: this.phaseCount,
                displayOptions: this.displayOptions,
            });
            this.render();
        },
        valuesAreCorrect: function (a) {
            var b = this,
                d = [];
            _.each(a.lines, function (a, g) {
                d[g] = a.wNow.value < -b.wattTolerance || a.wNow.value > b.wattTolerance;
            });
            return _.every(d, function (a) {
                return !1 === a;
            });
        },
        setViewOptions: function () {
            var a = this.model.get("checkMeters");
            this.displayOptions.button = a
                ? "consumption" === this.meterType
                    ? { text: I18n.t("envoy_backbone.meters.wizard.done"), state: "enabled" }
                    : { text: I18n.t("envoy_backbone.meters.wizard.btn_next"), state: "enabled" }
                : { text: I18n.t("envoy_backbone.meters.wizard.enable_button", { meterType: I18n.t("envoy_backbone.overview." + this.meterType + "_meter_label") }), state: "disabled" };
            "production" === this.meterType
                ? ((this.displayOptions.infoTitle = I18n.t("envoy_backbone.overview.current_production")),
                  (this.displayOptions.alert_text = I18n.t("envoy_backbone.meters.wizard.prod_enable_desc1") + (a ? "" : " " + I18n.t("envoy_backbone.meters.wizard.prod_enable_desc2"))))
                : ((this.displayOptions.alert_text =
                      this.widgetType === b.InfoBlockType.SUCCESS
                          ? I18n.t("envoy_backbone.meters.wizard.consumption_looks_good") + (a ? "" : " " + I18n.t("envoy_backbone.meters.wizard.consumption_enable_prompt"))
                          : I18n.t("envoy_backbone.meters.wizard.consumption_appears_good") + (a ? "" : " " + I18n.t("envoy_backbone.meters.wizard.consumption_enable_prompt"))),
                  (this.displayOptions.infoTitle = I18n.t("envoy_backbone.meters.wizard.total_load")));
        },
        updateModel: function () {
            var a = "production";
            "consumption" === this.meterType && (a = this.model.get("measurementType"));
            var a = { state: "enabled", measurementType: a },
                c = "consumption" === this.meterType ? b.meters.findWhere({ type: "eim_production" }) : b.meters.findWhere({ type: "eim_consumption" }),
                d = { measurementType: c.get("measurementType"), state: c.get("state") };
            "three" === this.model.get("phaseMode") && ("" !== this.phaseCount && (a = _.extend({ phaseCount: this.phaseCount }, a)), (d = _.extend({ phaseCount: this.phaseCount }, d)));
            "consumption" === this.meterType ? b.meters.updateConfig(d, a) : b.meters.updateConfig(a, d);
            "disabled" === this.model.get("state") && "disabled" === c.get("state")
                ? "production" === this.meterType
                    ? 0 < b.envoyModel.get("detected_acb_count")
                        ? "disabled" === c.get("state")
                            ? (this.model.set("just_done", !0), (b.lastRoute = "meters"), b.router.navigate("#meters/wizard_select/consumption", { trigger: !0 }))
                            : b.mediator.trigger("setSubView", new b.Views.MeterWizardSubViewW4({ model: this.model }))
                        : "disabled" === c.get("state")
                        ? (this.model.set("just_done", !0), b.mediator.trigger("setSubView", new b.Views.MeterWizardSubViewChoiceW1({ model: this.model })))
                        : b.mediator.trigger("setSubView", new b.Views.MeterWizardSubViewW2({ model: this.model }))
                    : 0 < b.envoyModel.get("detected_acb_count")
                    ? b.mediator.trigger("setSubView", new b.Views.MeterWizardSubViewW3({ model: this.model }))
                    : ((b.lastRoute = "#meters"), b.router.navigate("meters", { trigger: !0 }))
                : "disabled" === c.get("state")
                ? 0 < b.envoyModel.get("detected_acb_count")
                    ? b.mediator.trigger("setSubView", new b.Views.MeterWizardSubViewW3({ model: this.model }))
                    : ((b.lastRoute = "#meters"), b.router.navigate("meters", { trigger: !0 }))
                : ("production" === this.meterType && this.model.set("just_done", !0),
                  this.model.get("checkMeters") && "production" === this.meterType
                      ? ((b.lastRoute = "#meters"), b.router.navigate("#meters/wizard_select/consumption", { trigger: !0 }))
                      : 0 < b.envoyModel.get("detected_acb_count")
                      ? "production" === this.meterType
                          ? b.mediator.trigger("setSubView", new b.Views.MeterWizardSubViewW4({ model: this.model }))
                          : (this.model.set("just_done", !1), b.mediator.trigger("setSubView", new b.Views.MeterWizardSubViewW3({ model: this.model })))
                      : "production" === this.meterType
                      ? b.mediator.trigger("setSubView", new b.Views.MeterWizardSubViewW2({ model: this.model }))
                      : ((b.lastRoute = "#meters"), b.router.navigate("meters/wizard_finished", { trigger: !0 })));
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.MeterWizardInfoBlock = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["meters/meter_wizard_info_block"];
            this.phaseCount = this.model.get("phaseCount");
            this.displayOptions = a.displayOptions;
            this.measurementType = a.measurementType;
            this.icon_type = "";
            this.setIconType(a.widget_type);
            this.showDirection = a.showDirection;
            this.creator = a.displayOptions.creator;
            b.mediator.on("systemReadingStats:fast_data_update", this.render, this);
            return this;
        },
        render: function () {
            var a = {};
            this.measurementType &&
                ((a = JSON.parse(JSON.stringify(this.model.getMeterData(this.measurementType, this.displayOptions.showAllPhases)))), this.displayOptions.statHandler && this.displayOptions.statHandler(a, this.phaseCount));
            this.showDirection && this.setPowerDirectionString(a);
            a = this.template({ displayOptions: this.displayOptions, phaseCount: this.phaseCount, meterStats: a });
            this.$el.html(a);
            return this;
        },
        setIconType: function (a) {
            a === b.InfoBlockType.PROBLEM
                ? (this.displayOptions.icon_type = "glyphicons envoy-alrt envoy-alrt-warning warning_sign")
                : a === b.InfoBlockType.IN_PROGRESS
                ? (this.displayOptions.icon_type = "glyphicons-icon meter-wizard")
                : a === b.InfoBlockType.SUCCESS
                ? (this.displayOptions.icon_type = "glyphicons-icon meter-wizard-ok")
                : a === b.InfoBlockType.INFO && (this.displayOptions.icon_type = "glyphicons envoy-alrt-info circle_info");
        },
        setPowerDirectionString: function (a) {
            a &&
                ((a.wNow = Precision.normalize([a.wNow.value], "W", !0, null)[0]),
                (a.wNow.dirStr = 0 > a.wNow.value ? I18n.t("envoy_backbone.overview.power_exporting") : I18n.t("envoy_backbone.overview.power_importing")),
                _.each(a.lines, function (a) {
                    a.wNow = Precision.normalize([a.wNow.value], "W", !0, null)[0];
                    a.wNow.dirStr = 0 > a.wNow.value ? I18n.t("envoy_backbone.meters.wizard.power_exporting") : I18n.t("envoy_backbone.meters.wizard.power_importing");
                }));
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.MeterWizardPhaseSel = b.Views.InternalMeter.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.meterType = this.model.get("type").split("_")[1];
            b.wifiDoingScaryStuff = !0;
            this.viewName = "MeterWizardPhaseSel";
            b.Views.InternalMeter.prototype.initialize.apply(this, [{ meterType: this.meterType, wizard: !0 }]);
            this.template = JST["meters/meter_wizard_phase_sel"];
            return this;
        },
        events: { "click #btn_next": "proceed", "change select.phase-count-select": "selectChoice" },
        proceed: function () {
            var a = parseInt(this.$el.find("select.phase-count-select").val());
            this.updateModel(a);
            b.mediator.trigger("setSubView", new b.Views.MeterWizardSubView1({ model: this.model }));
        },
        updateModel: function (a) {
            var c = "production";
            "consumption" === this.meterType && (c = $("select.measurement-type-select").val());
            var c = { state: "disabled", measurementType: c },
                d = {};
            "three" === this.model.get("phaseMode") && ("" !== this.model.get("phaseCount") && (c = _.extend({ phaseCount: a }, c)), (d = _.extend({ phaseCount: a }, d)));
            this.enabled ? ("consumption" === this.meterType ? b.meters.updateConfig(d, c) : b.meters.updateConfig(c, d)) : this.model.updateConfig(c);
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.MeterWizardPhaseSelSubView = b.Views.InternalMeter.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            b.Views.InternalMeter.prototype.initialize.apply(this, [{ meterType: "production", wizard: !0 }]);
            this.template = JST["meters/meter_wizard_phase_sel_sub_view"];
            this.parent = a.parent;
            return this;
        },
        events: { "change select.phase-count-select": "selectChoice" },
        close: function () {
            this.info_block && this.info_block.close();
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.MeterWizardSubView = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.wattTolerance = 10;
            this.template = JST["meters/meter_wizard_loading"];
            b.mediator.once("meter:configUpdated", this.metersConfigDone, this);
            b.mediator.once("meters:updated", this.metersUpdateDone, this);
            b.mediator.once("meters:readingsUpdated", this.loadingDone, this);
            b.mediator.trigger("meter_wizard:getMeterData");
            this.meterType = this.model.get("type").split("_")[1];
            this.assignMeters();
            b.systemReadingStats.startConnection();
            this.dataTimer || (this.dataTimer = setTimeout(this.dataProblem, 12e4, this.viewName, this.model));
            "single" === this.model.get("phaseMode") ? (this.phaseCount = 1) : "split" === this.model.get("phaseMode") ? (this.phaseCount = 2) : "three" === this.model.get("phaseMode") && (this.phaseCount = this.model.get("phaseCount"));
            this.setViewOptions();
            return this;
        },
        events: { "click #btn_next": "proceed" },
        render: function () {
            var a = this.template({ meterType: this.meterType, displayOptions: this.displayOptions, phaseCount: this.phaseCount, batt_detected_count: b.envoyModel.get("detected_acb_count") });
            this.$el.html(a);
            this.info_block && this.assign(this.info_block, ".meter-info-block");
            this.info_block2 && this.assign(this.info_block2, ".meter-info-block2");
            return this;
        },
        proceed: function () {},
        assignMeters: function () {
            void 0 === this.model && (this.model = b.meters.findWhere({ type: "eim_" + this.meterType }));
            void 0 === this.otherMeter && (this.otherMeter = "consumption" === this.meterType ? b.meters.findWhere({ type: "eim_production" }) : b.meters.findWhere({ type: "eim_consumption" }));
        },
        checkForConditionFlag: function (a) {
            return _.contains(this.model.get("statusFlags"), a);
        },
        canSelectPhase: function () {
            return "enabled" === this.model.get("state") || "enabled" === this.otherMeter.get("state") ? 3 > ("enabled" === this.model.get("state") ? this.model : this.otherMeter).get("phaseCount") : !0;
        },
        metersConfigDone: function () {
            this.phaseCount = this.model.get("phaseCount");
            b.mediator.trigger("meter_wizard:getMeterData");
        },
        metersUpdateDone: function () {
            this.setViewOptions();
            b.mediator.trigger("meter_wizard:getMeterReadings");
        },
        dataProblem: function (a, c) {
            b.mediator.trigger("wizTrouble:show_dataProblem", a, c);
        },
        cancelDataTimer: function () {
            clearTimeout(this.dataTimer);
            this.dataTimer = null;
        },
        loadingDone: function () {
            this.cancelDataTimer();
        },
        filterLineStats: function (a, b) {
            a.lines = _.filter(a.lines, function (a, e) {
                return e < b;
            });
            return a;
        },
        setViewOptions: function () {},
        close: function () {
            this.info_block && this.info_block.close();
            this.cancelDataTimer();
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.MeterWizardSubView1 = b.Views.MeterWizardSubView.extend({
        initialize: function () {
            this.viewName = "MeterWizardSubView1";
            b.Views.MeterWizardSubView.prototype.initialize.call(this);
        },
        proceed: function () {
            "production" === this.meterType ? b.mediator.trigger("setSubView", new b.Views.MeterWizardSubViewP2({ model: this.model })) : b.mediator.trigger("setSubView", new b.Views.MeterWizardSubViewC2({ model: this.model }));
        },
        metersConfigDone: function () {
            this.phaseCount = this.model.get("phaseCount");
            b.mediator.trigger("meter_wizard:getMeterData");
        },
        loadingDone: function () {
            b.Views.MeterWizardSubView.prototype.loadingDone.call(this);
            if ("three" === this.model.get("phaseMode") && this.canSelectPhase() && this.checkForConditionFlag("power-on-unused-phase"))
                b.mediator.trigger("setSubView", new b.Views.MeterWizard_ts_p0_5({ model: this.model, phaseCount: this.phaseCount, displayOptions: this.displayOptions }));
            else if (this.otherMeter.get("just_done")) this.otherMeter.set("just_done", !1), b.mediator.trigger("setSubView", new b.Views.MeterWizardSubViewC2({ model: this.model }));
            else {
                this.template = JST["meters/meter_wizard_1"];
                var a = "production";
                "production" !== this.model.get("measurementType") && (a = "net-consumption");
                var c = JSON.parse(JSON.stringify(this.model.getMeterData(a, !1)));
                this.info_block = new b.Views.MeterWizardInfoBlock({
                    model: this.model,
                    widget_type: b.InfoBlockType.IN_PROGRESS,
                    meterStats: c,
                    measurementType: a,
                    showDirection: !1,
                    phaseCount: this.phaseCount,
                    displayOptions: this.displayOptions,
                });
            }
            this.render();
        },
        setViewOptions: function () {
            var a = this.model.get("checkMeters");
            this.displayOptions = {
                title: I18n.t("envoy_backbone.meters.wizard." + (a ? "check_title" : "setup_title"), { meter_type: I18n.t("envoy_backbone.overview." + this.meterType + "_meter_label") }),
                button: { text: I18n.t("envoy_backbone.meters.wizard.btn_next"), state: "disabled" },
                creator: "meter_wizard_sub_view_1",
            };
            "production" === this.meterType
                ? ((this.displayOptions.bullets = [I18n.t("envoy_backbone.meters.wizard.prod_su1_pv_on.counting", { count: this.phaseCount })]),
                  b.envoyModel.get("detected_acb_count") && this.displayOptions.bullets.push(I18n.t("envoy_backbone.meters.wizard.batt_off.counting", { count: this.phaseCount })),
                  (this.displayOptions.infoTitle = I18n.t("envoy_backbone.overview.current_production")))
                : ((this.displayOptions.bullets = [I18n.t("envoy_backbone.meters.wizard.sw_off_pv", { count: this.phaseCount })]),
                  b.envoyModel.get("detected_acb_count") && this.displayOptions.bullets.push(I18n.t("envoy_backbone.meters.wizard.sw_off_batt.counting", { count: this.phaseCount })),
                  (this.displayOptions.infoTitle = I18n.t("envoy_backbone.meters.wizard.total_load")));
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.MeterWizardSubViewC2 = b.Views.MeterWizardSubView.extend({
        initialize: function () {
            this.viewName = "MeterWizardSubViewC2";
            b.Views.MeterWizardSubView.prototype.initialize.call(this);
        },
        proceed: function () {
            b.mediator.trigger("setSubView", new b.Views.MeterWizardSubViewChoiceC2({ model: this.model }));
        },
        metersConfigDone: function () {
            this.phaseCount = this.model.get("phaseCount");
            b.mediator.trigger("meter_wizard:getMeterData");
        },
        loadingDone: function () {
            b.Views.MeterWizardSubView.prototype.loadingDone.call(this);
            var a = this.filterLineStats(this.model.get("meterReadings"), this.phaseCount);
            "three" === this.model.get("phaseMode") &&
                this.canSelectPhase() &&
                this.checkForConditionFlag("power-on-unused-phase") &&
                b.mediator.trigger("setSubView", new b.Views.MeterWizard_ts_p0_5({ model: this.model, phaseCount: this.phaseCount, displayOptions: this.displayOptions }));
            this.checkForConditionFlag("negative-total-consumption")
                ? b.mediator.trigger("setSubView", new b.Views.MeterWizardTsC6({ model: this.model }))
                : ((this.template = JST["meters/meter_wizard_1"]),
                  delete a.wNow.naughtyPower,
                  _.map(a.lines, function (a) {
                      delete a.naughtyPower;
                      return a;
                  }),
                  (this.info_block = new b.Views.MeterWizardInfoBlock({
                      model: this.model,
                      measurementType: "total-consumption",
                      widget_type: b.InfoBlockType.IN_PROGRESS,
                      meterStats: a,
                      showDirection: !1,
                      phaseCount: this.phaseCount,
                      displayOptions: this.displayOptions,
                  })));
            this.render();
        },
        valuesAreCorrect: function (a) {
            var b = this,
                d = [];
            _.each(a.lines, function (a, g) {
                d[g] = a.wNow.value > -b.wattTolerance;
                a.naughtyPower = d[g];
            });
            return _.every(d, function (a) {
                return !1 === a;
            });
        },
        setViewOptions: function () {
            var a = this.model.get("checkMeters");
            this.displayOptions = {
                title: I18n.t("envoy_backbone.meters.wizard." + (a ? "check_title" : "setup_title"), { meter_type: I18n.t("envoy_backbone.overview." + this.meterType + "_meter_label") }),
                bullets: [I18n.t("envoy_backbone.meters.wizard.bullet_turn_on_load")],
                button: { text: I18n.t("envoy_backbone.meters.wizard.btn_next"), state: "disabled" },
                infoTitle: I18n.t("envoy_backbone.meters.wizard.total_load"),
            };
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.MeterWizardSubViewC3 = b.Views.MeterWizardSubView.extend({
        initialize: function (a) {
            this.viewName = "MeterWizardSubViewC3";
            b.Views.MeterWizardSubView.prototype.initialize.call(this);
            b.mediator.on("systemReadingStats:updated", this.statsLoadingDone, this);
            b.mediator.trigger("meter:getMeterData");
            return this;
        },
        events: { "click #timer-control": "controlTimer", "click #meter_wizard_check_box": "controlTimer", "click #timer-reset": "resetTimer", "click #btn_next": "proceed" },
        proceed: function () {
            b.mediator.trigger("setSubView", new b.Views.MeterWizardSubViewC4({ model: this.model }));
        },
        metersConfigDone: function () {
            this.phaseCount = this.model.get("phaseCount");
            b.mediator.trigger("meter_wizard:getMeterData");
        },
        loadingDone: function () {
            b.Views.MeterWizardSubView.prototype.loadingDone.call(this);
            this.template = JST["meters/meter_wizard_1"];
            var a = JSON.parse(JSON.stringify(this.model.getMeterData("net-consumption", !1)));
            this.info_block = new b.Views.MeterWizardInfoBlock({
                model: this.model,
                widget_type: b.InfoBlockType.IN_PROGRESS,
                meterStats: a,
                measurementType: "net-consumption",
                showDirection: !0,
                phaseCount: this.phaseCount,
                displayOptions: this.displayOptions,
            });
            this.render();
        },
        setViewOptions: function () {
            var a = this.model.get("checkMeters");
            this.displayOptions = {
                title: I18n.t("envoy_backbone.meters.wizard." + (a ? "check_title" : "setup_title"), { meter_type: I18n.t("envoy_backbone.overview." + this.meterType + "_meter_label") }),
                bullets: [I18n.t("envoy_backbone.meters.wizard.bullet_pv_on")],
                button: { text: I18n.t("envoy_backbone.meters.wizard.btn_next"), state: "disabled" },
                infoTitle: I18n.t("envoy_backbone.overview.net_power"),
                timer: !0,
                timerCount: "5:00",
            };
        },
        controlTimer: function (a) {
            a.stopPropagation();
            a = this.$el.find("#meter_wizard_check_box");
            this.clickHandler(a);
            a = this.$el.find("#timer-control");
            if (this.meterWizardTimer)
                clearInterval(this.meterWizardTimer),
                    (this.meterWizardTimer = null),
                    a.text(I18n.t("envoy_backbone.meters.wizard.start_timer")),
                    a.removeClass("btn-danger").addClass("btn-success"),
                    this.$el.find("#timer-reset").prop("disabled", !1);
            else {
                a.text(I18n.t("envoy_backbone.meters.wizard.stop_timer"));
                a.removeClass("btn-success").addClass("btn-danger");
                a.prop("disabled", !1);
                a = 0 < this.timer ? this.timer : 300;
                var b = this.$el.find(".timer-val");
                this.timerStart(a, b);
                this.$el.find("#timer-reset").prop("disabled", !0);
            }
        },
        clickHandler: function (a) {
            !0 === a.find(".glyphicons").hasClass("unchecked") ? a.find(".glyphicons").removeClass("unchecked").addClass("check") : a.find(".glyphicons").removeClass("check").addClass("unchecked");
            this.$el.find(".cb.check").length === $(".cb").length ? this.$el.find("#btn_next").prop("disabled", !1) : this.$el.find("#btn_next").prop("disabled", !0);
        },
        stopTimer: function () {
            clearInterval(this.meterWizardTimer);
            this.meterWizardTimer = null;
            this.$el.find("#timer-reset").prop("disabled", !1);
            this.$el.find("#timer-control").removeClass("btn-danger").addClass("btn-success").prop("disabled", !0);
            this.$el.find("#timer-control").text(I18n.t("envoy_backbone.meters.wizard.start_timer"));
        },
        resetTimer: function () {
            this.timer = 0;
            this.$el.find("#timer-reset").prop("disabled", !0);
            this.$el.find("#timer-control").prop("disabled", !1);
            var a = this.$el.find(".timer-val"),
                b = 0,
                b = "5:" + (10 > b ? "0" + b : b);
            $(a).html(b);
        },
        timerStart: function (a, b) {
            var d = this;
            d.timer = a;
            var e, g;
            d.meterWizardTimer = setInterval(function () {
                e = parseInt(d.timer / 60, 10);
                g = parseInt(d.timer % 60, 10);
                g = 10 > g ? "0" + g : g;
                var a = e + ":" + g;
                $(b).html(a);
                0 > --d.timer && d.stopTimer();
            }, 1e3);
        },
        close: function () {
            this.stopTimer();
            b.Views.MeterWizardSubView.prototype.close.call(this);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.MeterWizardSubViewC4 = b.Views.MeterWizardSubView.extend({
        initialize: function (a) {
            this.meterType = this.model.get("type").split("_")[1];
            b.Views.MeterWizardSubView.prototype.initialize.call(this);
            b.mediator.on("systemReadingStats:updated", this.statsLoadingDone, this);
            b.mediator.trigger("meter:getMeterData");
            return this;
        },
        events: { "click .phase-type": "buttonHandler", "click #btn_next": "proceed" },
        proceed: function () {
            this.updateModel(this.measurementType);
            b.mediator.trigger("setSubView", new b.Views.MeterWizardSubViewC5({ model: this.model }));
        },
        metersConfigDone: function () {
            this.phaseCount = this.model.get("phaseCount");
            b.mediator.trigger("meter_wizard:getMeterData");
        },
        statsLoadingDone: function () {
            var a = {};
            a.totalConsumption = b.systemReadingStats.getConsumptionData("total-consumption");
            a.netConsumption = b.systemReadingStats.getConsumptionData("net-consumption");
            this.valuesAreCorrect(a)
                ? this.model.get("checkMeters")
                    ? b.mediator.trigger("setSubView", new b.Views.MeterWizardSubViewC5({ model: this.model }))
                    : (this.template = JST["meters/meter_wizard_c4"])
                : b.mediator.trigger("setSubView", new b.Views.MeterWizardTsC8({ model: this.model, phaseCount: this.phaseCount, meterStats: a, displayOptions: this.displayOptions }));
            this.render();
        },
        valuesAreCorrect: function (a) {
            var b = [];
            a.netConsumption.naughtyPower = a.totalConsumption.wNow.value < a.netConsumption.value;
            _.each(a.totalConsumption.lines, function (d, e) {
                b[e] = d.wNow.value < a.netConsumption.lines[e].wNow.value;
                a.netConsumption.lines[e].naughtyPower = b[e];
            });
            return _.every(b, function (a) {
                return !1 === a;
            });
        },
        setViewOptions: function () {
            var a = this.model.get("checkMeters");
            this.displayOptions = {
                title: I18n.t("envoy_backbone.meters.wizard." + (a ? "check_title" : "setup_title"), { meter_type: I18n.t("envoy_backbone.overview." + this.meterType + "_meter_label") }),
                question: I18n.t("envoy_backbone.meters.wizard.bullet_phase_select"),
                total_desc: I18n.t("envoy_backbone.meters.wizard.consumption_phase_sel_total"),
                net_desc: I18n.t("envoy_backbone.meters.wizard.consumption_phase_sel_net"),
                button: { text: I18n.t("envoy_backbone.meters.wizard.btn_next"), state: "disabled" },
            };
        },
        buttonHandler: function (a) {
            a = a.currentTarget;
            this.$el.find(".checkbox").addClass("disabled");
            $(a).removeClass("disabled");
            this.$el.find(".glyphicons.cb").removeClass("check").addClass("unchecked");
            $(a).find(".glyphicons").removeClass("unchecked").addClass("check");
            1 === this.$el.find(".cb.check").length ? this.$el.find("#btn_next").prop("disabled", !1) : this.$el.find("#btn_next").prop("disabled", !0);
            this.measurementType = a.id;
        },
        updateModel: function (a) {
            a = { state: "disabled", measurementType: a };
            var c = {};
            if ("three" === this.model.get("phaseMode") && "" !== this.model.get("phaseCount")) {
                var d = this.model.get("phaseCount");
                a = _.extend({ phaseCount: d }, a);
            }
            this.enabled ? ("consumption" === this.meterType ? b.meters.updateConfig(c, a) : b.meters.updateConfig(a, c)) : this.model.updateConfig(a);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.MeterWizardSubViewC5 = b.Views.MeterWizardSubView.extend({
        initialize: function () {
            this.viewName = "MeterWizardSubViewC5";
            b.Views.MeterWizardSubView.prototype.initialize.call(this);
        },
        events: { "click .wiz-choice": "buttonHandler" },
        metersConfigDone: function () {
            this.phaseCount = this.model.get("phaseCount");
            b.mediator.trigger("meter_wizard:getMeterData");
        },
        loadingDone: function () {
            b.Views.MeterWizardSubView.prototype.loadingDone.call(this);
            this.template = JST["meters/meter_wizard_choice"];
            var a = JSON.parse(JSON.stringify(this.model.getMeterData("net-consumption", !1)));
            this.info_block = new b.Views.MeterWizardInfoBlock({
                model: this.model,
                widget_type: b.InfoBlockType.IN_PROGRESS,
                meterStats: a,
                measurementType: "net-consumption",
                showDirection: !0,
                phaseCount: this.phaseCount,
                displayOptions: this.displayOptions,
            });
            this.render();
        },
        buttonHandler: function (a) {
            this.buttonPressed = a.currentTarget.id;
            "btn_yes" === this.buttonPressed
                ? b.mediator.trigger("setSubView", new b.Views.MeterWizardEnable({ model: this.model, phaseCount: this.phaseCount, widget_type: b.InfoBlockType.SUCCESS, displayOptions: this.displayOptions }))
                : "trouble" === this.buttonPressed
                ? b.mediator.trigger("setSubView", new b.Views.MeterWizardEnable({ model: this.model, phaseCount: this.phaseCount, widget_type: b.InfoBlockType.IN_PROGRESS, displayOptions: this.displayOptions }))
                : this.model.get("checkMeters")
                ? b.mediator.trigger("wiz:readings_dont_match_post")
                : b.mediator.trigger("wiz:readings_dont_match", "MeterWizardSubViewC4", this.model);
            this.render();
        },
        setViewOptions: function () {
            var a = this.model.get("checkMeters");
            this.displayOptions = {
                title: I18n.t("envoy_backbone.meters.wizard." + (a ? "check_title" : "setup_title"), { meter_type: I18n.t("envoy_backbone.overview." + this.meterType + "_meter_label") }),
                question: [I18n.t("envoy_backbone.meters.wizard.bullet_meters_match")],
                note: I18n.t("envoy_backbone.meters.wizard.unable_to_see_meter"),
                infoTitle: I18n.t("envoy_backbone.overview.net_power"),
            };
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.MeterWizardSubViewChoiceC2 = b.Views.MeterWizardSubView.extend({
        initialize: function () {
            this.viewName = "MeterWizardSubViewChoiceC2";
            b.Views.MeterWizardSubView.prototype.initialize.call(this);
        },
        events: { "click .wiz-choice": "buttonHandler" },
        proceed: function () {
            b.mediator.trigger("setSubView", new b.Views.MeterWizardSubViewC3({ model: this.model }));
        },
        metersConfigDone: function () {
            this.phaseCount = this.model.get("phaseCount");
            b.mediator.trigger("meter_wizard:getMeterData");
        },
        loadingDone: function () {
            b.Views.MeterWizardSubView.prototype.loadingDone.call(this);
            this.template = JST["meters/meter_wizard_choice"];
            var a = JSON.parse(JSON.stringify(this.model.getMeterData("total-consumption", !1)));
            this.info_block = new b.Views.MeterWizardInfoBlock({
                model: this.model,
                widget_type: b.InfoBlockType.IN_PROGRESS,
                meterStats: a,
                measurementType: "total-consumption",
                phaseCount: this.phaseCount,
                displayOptions: this.displayOptions,
            });
            this.render();
        },
        buttonHandler: function (a) {
            this.buttonPressed = a.currentTarget.id;
            "btn_yes" === this.buttonPressed
                ? b.mediator.trigger("setSubView", new b.Views.MeterWizardSubViewC3({ model: this.model, phaseCount: this.phaseCount, displayOptions: this.displayOptions }))
                : b.mediator.trigger("setSubView", new b.Views.MeterWizardTsC7({ model: this.model }));
            this.render();
        },
        setViewOptions: function () {
            var a = this.model.get("checkMeters");
            this.displayOptions = {
                title: I18n.t("envoy_backbone.meters.wizard." + (a ? "check_title" : "setup_title"), { meter_type: I18n.t("envoy_backbone.overview." + this.meterType + "_meter_label") }),
                question: [I18n.t("envoy_backbone.meters.wizard.bullet_load_increase")],
                infoTitle: I18n.t("envoy_backbone.meters.wizard.total_load"),
            };
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.MeterWizardSubViewChoiceW1 = b.Views.MeterWizardSubView.extend({
        initialize: function () {
            this.viewName = "MeterWizardSubViewChoiceW1";
            b.Views.MeterWizardSubView.prototype.initialize.call(this);
        },
        events: { "click .wiz-choice": "buttonHandler" },
        proceed: function () {
            b.mediator.trigger("setSubView", new b.Views.MeterWizardSubViewC3({ model: this.model }));
        },
        metersConfigDone: function () {
            this.phaseCount = this.model.get("phaseCount");
            b.mediator.trigger("meter_wizard:getMeterData");
        },
        loadingDone: function () {
            b.Views.MeterWizardSubView.prototype.loadingDone.call(this);
            this.template = JST["meters/meter_wizard_choice"];
            var a = this.filterLineStats(this.model.get("meterReadings"), this.phaseCount);
            delete a.wNow.naughtyPower;
            _.map(a.lines, function (a) {
                delete a.naughtyPower;
                return a;
            });
            this.setViewOptions();
            this.info_block = new b.Views.MeterWizardInfoBlock({ model: this.model, widget_type: b.InfoBlockType.SUCCESS, meterStats: a, phaseCount: this.phaseCount, displayOptions: this.displayOptions });
            this.render();
        },
        buttonHandler: function (a) {
            this.buttonPressed = a.currentTarget.id;
            "btn_yes" === this.buttonPressed
                ? ((b.lastRoute = "meters"), b.router.navigate("#meters/wizard_select/consumption", { trigger: !0 }))
                : b.mediator.trigger("setSubView", new b.Views.MeterWizardSubViewW2({ model: this.model, phaseCount: this.phaseCount, displayOptions: this.displayOptions }));
            this.render();
        },
        setViewOptions: function () {
            this.displayOptions = {
                title: I18n.t("envoy_backbone.meters.wizard.setup_title", { meter_type: I18n.t("envoy_backbone.overview." + this.meterType + "_meter_label") }),
                question: [I18n.t("envoy_backbone.meters.wizard.consumption_cts_installed")],
                infoTitle: I18n.t("envoy_backbone.overview.current_production"),
                alert_text: I18n.t("envoy_backbone.meters.wizard.prod_meter_enabled"),
            };
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.MeterWizardSubViewP2 = b.Views.MeterWizardSubView.extend({
        initialize: function () {
            this.viewName = "MeterWizardSubViewP2";
            b.Views.MeterWizardSubView.prototype.initialize.call(this);
        },
        loadingDone: function () {
            b.Views.MeterWizardSubView.prototype.loadingDone.call(this);
            this.setViewOptions();
            if (this.checkForConditionFlag("negative-production")) b.mediator.trigger("setSubView", new b.Views.MeterWizard_ts1({ model: this.model, phaseCount: this.phaseCount, configIsDone: !0 }));
            else {
                this.template = JST["meters/meter_wizard_1"];
                var a = JSON.parse(JSON.stringify(this.model.getMeterData("production", !1)));
                this.info_block = new b.Views.MeterWizardInfoBlock({
                    model: this.model,
                    widget_type: b.InfoBlockType.IN_PROGRESS,
                    meterStats: a,
                    measurementType: "production",
                    phaseCount: this.phaseCount,
                    displayOptions: this.displayOptions,
                });
            }
            this.render();
        },
        valuesAreCorrect: function (a) {
            var b = this,
                d = [];
            _.each(a.lines, function (a, g) {
                d[g] = a.wNow.value < -b.wattTolerance || a.wNow.value > b.wattTolerance;
            });
            return _.every(d, function (a) {
                return !1 === a;
            });
        },
        proceed: function () {
            b.lastRoute = "#meters/wizard_enable/production";
            b.mediator.trigger("setSubView", new b.Views.MeterWizardEnable({ model: this.model, widget_type: this.model.get("checkMeters") ? b.InfoBlockType.SUCCESS : b.InfoBlockType.IN_PROGRESS, displayOptions: this.displayOptions }));
        },
        setViewOptions: function () {
            var a = this.model.get("checkMeters");
            this.displayOptions = {
                title: I18n.t("envoy_backbone.meters.wizard." + (a ? "check_title" : "setup_title"), { meter_type: I18n.t("envoy_backbone.overview." + this.meterType + "_meter_label") }),
                button: { text: I18n.t("envoy_backbone.meters.wizard.btn_next"), state: "disabled" },
            };
            "production" === this.meterType
                ? ((this.displayOptions.infoTitle = I18n.t("envoy_backbone.overview.current_" + this.meterType)), (this.displayOptions.bullets = [I18n.t("envoy_backbone.meters.wizard.prod_su2_pv_off")]))
                : "consumption" === this.meterType &&
                  ((this.displayOptions.infoTitle = I18n.t("envoy_backbone.meters.wizard.total_load")),
                  (this.displayOptions.bullets = [I18n.t("envoy_backbone.meters.wizard.prod_su1_pv_on.counting", { count: this.phaseCount })]),
                  b.envoyModel.get("detected_acb_count") && this.displayOptions.bullets.push(I18n.t("envoy_backbone.meters.wizard.batt_off.counting", { count: this.phaseCount })));
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.MeterWizardSubViewW2 = b.Views.MeterWizardSubView.extend({
        initialize: function (a) {
            this.viewName = "MeterWizardSubViewW2";
            b.Views.MeterWizardSubView.prototype.initialize.call(this);
            this.template = JST["meters/meter_wizard_1"];
            this.meterType = this.model.get("type").split("_")[1];
            this.setViewOptions();
            this.info_block = new b.Views.MeterWizardInfoBlock({ model: this.model, widget_type: b.InfoBlockType.INFO, displayOptions: this.displayOptions });
            return this;
        },
        proceed: function () {
            b.lastRoute = "meters";
            b.router.navigate("meters", { trigger: !0 });
        },
        setViewOptions: function () {
            this.displayOptions = {
                title: I18n.t("envoy_backbone.meters.wizard.setup_title", { meter_type: I18n.t("envoy_backbone.overview." + this.meterType + "_meter_label") }),
                button: { text: I18n.t("envoy_backbone.buttons.ok"), state: "enabled" },
                alert_text: I18n.t("envoy_backbone.meters.wizard.pv_reminder"),
            };
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.MeterWizardSubViewW3 = b.Views.MeterWizardSubView.extend({
        initialize: function (a) {
            this.viewName = "MeterWizardSubViewW3";
            b.Views.MeterWizardSubView.prototype.initialize.call(this);
            this.template = JST["meters/meter_wizard_1"];
            this.meterType = this.model.get("type").split("_")[1];
            this.setViewOptions();
            this.info_block = new b.Views.MeterWizardInfoBlock({ model: this.model, widget_type: b.InfoBlockType.INFO, displayOptions: this.displayOptions });
            return this;
        },
        proceed: function () {
            b.lastRoute = "meters";
            b.router.navigate("meters", { trigger: !0 });
        },
        setViewOptions: function () {
            this.displayOptions = {
                title: I18n.t("envoy_backbone.meters.wizard.setup_title", { meter_type: I18n.t("envoy_backbone.overview." + this.meterType + "_meter_label") }),
                button: { text: I18n.t("envoy_backbone.buttons.ok"), state: "enabled" },
                alert_text: I18n.t("envoy_backbone.meters.wizard.battery_reminder"),
            };
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.MeterWizardSubViewW4 = b.Views.MeterWizardSubView.extend({
        initialize: function (a) {
            this.viewName = "MeterWizardSubViewW4";
            b.Views.MeterWizardSubView.prototype.initialize.call(this);
            this.template = JST["meters/meter_wizard_1"];
            this.meterType = this.model.get("type").split("_")[1];
            this.setViewOptions(1);
            this.info_block = new b.Views.MeterWizardInfoBlock({ model: this.model, widget_type: b.InfoBlockType.INFO, displayOptions: this.displayOptions });
            this.setViewOptions(2);
            this.info_block2 = new b.Views.MeterWizardInfoBlock({ model: this.model, widget_type: b.InfoBlockType.INFO, displayOptions: this.displayOptions });
            return this;
        },
        proceed: function () {
            b.lastRoute = "meters";
            b.router.navigate("meters", { trigger: !0 });
        },
        setViewOptions: function (a) {
            this.displayOptions = {
                title: I18n.t("envoy_backbone.meters.wizard.setup_title", { meter_type: I18n.t("envoy_backbone.overview." + this.meterType + "_meter_label") }),
                button: { text: I18n.t("envoy_backbone.buttons.ok"), state: "enabled" },
                alert_text: 1 === a ? I18n.t("envoy_backbone.meters.wizard.pv_reminder") : I18n.t("envoy_backbone.meters.wizard.battery_reminder"),
            };
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.MeterWizardTroubleModal = Backbone.View.extend({
        className: "modal-dialog",
        tagName: "div",
        wait_text: " ",
        initialize: function () {
            this.body = this.title = "";
            this.template = JST.meter_wizard_trouble;
            this.setElement($("#wiz_trouble"));
            b.mediator.on("app:domReady", this.createModal, this);
            b.mediator.on("wizTrouble:show_p0", this.showWizTroubleP0, this);
            b.mediator.on("wizTrouble:show_p4", this.showWizTroubleP4, this);
            b.mediator.on("wizTrouble:show_p5", this.showWizTroubleP5, this);
            b.mediator.on("wizTrouble:show_p7", this.showWizTroubleP7, this);
            b.mediator.on("wizTrouble:show_c6", this.showWizTroubleC6, this);
            b.mediator.on("wizTrouble:show_c8", this.showWizTroubleC8, this);
            b.mediator.on("wizTrouble:show_dataProblem", this.showDataProblem, this);
            b.mediator.on("wizTrouble:show_exit_confirmation", this.showWizExitConf, this);
            b.mediator.on("wizTrouble:hide", this.cancelTroubleWiz, this);
            b.mediator.on("wiz:readings_dont_match", this.showWizDontMatch, this);
            b.mediator.on("wiz:readings_dont_match_post", this.showWizDontMatchPost, this);
        },
        events: { "click #cancel": "cancelTroubleWiz", "click #exit_wizard": "exitTroubleWiz", "click .close": "cancelTroubleWiz" },
        render: function () {
            this.setElement($("#wiz_trouble"));
            var a = this.template({ title: this.title, body: this.body, neg_button: this.negButton, pos_button: this.posButton });
            this.$el.html(a);
            return this;
        },
        createModal: function () {
            this.render();
            $("#wiz_trouble").modal({ show: !1 });
        },
        lookupContactNumber: function () {
            var a = "US",
                b = "+18777974743",
                d = "(877) 797-4743";
            BackboneConfig.country_set && (a = BackboneConfig.country);
            "US" == a
                ? ((b = "+18777974743"), (d = "(877) 797-4743"))
                : "FR" == a
                ? ((b = "+33484350555"), (d = "+33 484350555"))
                : "GB" == a
                ? ((b = "+441908828928"), (d = "+44 1908828928"))
                : "CH" == a
                ? ((b = "+41435083891"), (d = "+41 435083891"))
                : "BE" == a
                ? ((b = "+3225885469"), (d = "+32 25885469"))
                : "AU" == a
                ? ((b = "1800006374"), (d = "1800 006 374"))
                : "NZ" == a
                ? ((b = "098870421"), (d = "09 887 0421"))
                : console.log("ERROR: invalid country code");
            return { dial_num: b, disp_num: d };
        },
        showWizTroubleP0: function (a) {
            console.dir(a);
            this.title = "";
            a.get("checkMeters")
                ? (this.body = "<p>" + I18n.t("envoy_backbone.meters.wizard.exit_check") + "</p>")
                : (this.body =
                      "<p>" +
                      I18n.t("envoy_backbone.meters.wizard.trouble_p0_desc1") +
                      I18n.t("envoy_backbone.meters.wizard.trouble_install_guide") +
                      I18n.t("envoy_backbone.meters.wizard.trouble_manual_prompt") +
                      "</p><p>" +
                      I18n.t("envoy_backbone.meters.wizard.trouble_desc2", this.lookupContactNumber()) +
                      "</p>");
            this.negButton = I18n.t("envoy_backbone.meters.wizard.btn_try_again");
            this.posButton = I18n.t("envoy_backbone.meters.wizard.exit_wizard");
            b.lastRoute = "meters";
            this.escapeHatch = !0;
            this.showModal();
        },
        showWizTroubleP4: function (a) {
            this.title = "";
            a.get("checkMeters")
                ? (this.body = "<p>" + I18n.t("envoy_backbone.meters.wizard.exit_check") + "</p>")
                : (this.body =
                      "<p>" +
                      I18n.t("envoy_backbone.meters.wizard.trouble_p4_desc1") +
                      I18n.t("envoy_backbone.meters.wizard.trouble_install_guide") +
                      I18n.t("envoy_backbone.meters.wizard.trouble_manual_prompt") +
                      "</p><p>" +
                      I18n.t("envoy_backbone.meters.wizard.trouble_desc2", this.lookupContactNumber()) +
                      "</p>");
            this.negButton = I18n.t("envoy_backbone.meters.wizard.btn_try_again");
            this.posButton = I18n.t("envoy_backbone.meters.wizard.exit_wizard");
            b.lastRoute = "meters";
            this.escapeHatch = !0;
            this.showModal();
        },
        showWizTroubleP5: function (a) {
            this.title = "";
            a.get("checkMeters")
                ? (this.body = "<p>" + I18n.t("envoy_backbone.meters.wizard.exit_check") + "</p>")
                : (this.body =
                      "<p>" +
                      I18n.t("envoy_backbone.meters.wizard.trouble_p5_desc1") +
                      I18n.t("envoy_backbone.meters.wizard.trouble_install_guide") +
                      I18n.t("envoy_backbone.meters.wizard.trouble_manual_prompt") +
                      "</p><p>" +
                      I18n.t("envoy_backbone.meters.wizard.trouble_desc2", this.lookupContactNumber()) +
                      "</p>");
            this.negButton = I18n.t("envoy_backbone.meters.wizard.btn_try_again");
            this.posButton = I18n.t("envoy_backbone.meters.wizard.exit_wizard");
            b.lastRoute = "meters";
            this.escapeHatch = !0;
            this.showModal();
        },
        showWizTroubleP7: function (a) {
            this.title = "";
            a.get("checkMeters")
                ? (this.body = "<p>" + I18n.t("envoy_backbone.meters.wizard.exit_check") + "</p>")
                : (this.body =
                      "<p>" +
                      I18n.t("envoy_backbone.meters.wizard.trouble_p7_desc1") +
                      I18n.t("envoy_backbone.meters.wizard.trouble_install_guide") +
                      I18n.t("envoy_backbone.meters.wizard.trouble_manual_prompt") +
                      "</p><p>" +
                      I18n.t("envoy_backbone.meters.wizard.trouble_desc2", this.lookupContactNumber()) +
                      "</p>");
            this.negButton = I18n.t("envoy_backbone.meters.wizard.btn_try_again");
            this.posButton = I18n.t("envoy_backbone.meters.wizard.exit_wizard");
            b.lastRoute = "meters";
            this.escapeHatch = !0;
            this.showModal();
        },
        showWizTroubleC6: function () {
            this.title = "";
            this.body =
                "<p>" +
                I18n.t("envoy_backbone.meters.wizard.trouble_c6_desc1") +
                I18n.t("envoy_backbone.meters.wizard.trouble_install_guide") +
                I18n.t("envoy_backbone.meters.wizard.trouble_manual_prompt") +
                "</p><p>" +
                I18n.t("envoy_backbone.meters.wizard.trouble_desc2", this.lookupContactNumber()) +
                "</p>";
            this.negButton = I18n.t("envoy_backbone.meters.wizard.btn_try_again");
            this.posButton = I18n.t("envoy_backbone.meters.wizard.exit_wizard");
            b.lastRoute = "meters";
            this.escapeHatch = !0;
            this.showModal();
        },
        showWizTroubleC8: function () {
            this.title = "";
            this.body =
                "<p>" +
                I18n.t("envoy_backbone.meters.wizard.trouble_c8_desc1") +
                I18n.t("envoy_backbone.meters.wizard.trouble_install_guide") +
                I18n.t("envoy_backbone.meters.wizard.trouble_manual_prompt") +
                "</p><p>" +
                I18n.t("envoy_backbone.meters.wizard.trouble_desc2", this.lookupContactNumber()) +
                "</p>";
            this.negButton = I18n.t("envoy_backbone.meters.wizard.btn_try_again");
            this.posButton = I18n.t("envoy_backbone.meters.wizard.exit_wizard");
            b.lastRoute = "meters";
            this.escapeHatch = !0;
            this.showModal();
        },
        showWizExitConf: function () {
            this.title = I18n.t("envoy_backbone.meters.wizard.exit_conf.title");
            this.body = "<p>" + I18n.t("envoy_backbone.meters.wizard.exit_conf.desc") + "</p>";
            this.negButton = I18n.t("envoy_backbone.meters.wizard.exit_conf.neg_button");
            this.posButton = I18n.t("envoy_backbone.meters.wizard.exit_wizard");
            this.escapeHatch = !1;
            this.showModal();
        },
        showWizDontMatch: function (a, c) {
            this.title = "";
            this.body = "<p>" + I18n.t("envoy_backbone.meters.wizard.readings_dont_match1") + "</p><p>" + I18n.t("envoy_backbone.meters.wizard.readings_dont_match2") + "</p>";
            this.negButton = I18n.t("envoy_backbone.meters.wizard.btn_try_again");
            this.posButton = I18n.t("envoy_backbone.meters.wizard.exit_wizard");
            b.lastRoute = "meters";
            this.escapeHatch = !1;
            this.viewName = a;
            this.viewModel = c;
            this.showModal();
        },
        showDataProblem: function (a, c) {
            this.viewModel = c;
            this.viewName = a;
            this.title = "";
            this.body = "<p>" + I18n.t("envoy_backbone.errors.error_message") + "</p>";
            this.negButton = I18n.t("envoy_backbone.meters.wizard.btn_try_again");
            this.posButton = I18n.t("envoy_backbone.meters.wizard.exit_wizard");
            b.lastRoute = "meters";
            this.escapeHatch = !0;
            this.showModal();
        },
        showWizDontMatchPost: function () {
            this.title = "";
            this.body = "<p>" + I18n.t("envoy_backbone.meters.wizard.readings_dont_match_post") + "</p>";
            this.negButton = I18n.t("envoy_backbone.meters.wizard.btn_try_again");
            this.posButton = I18n.t("envoy_backbone.meters.wizard.exit_wizard");
            b.lastRoute = "meters";
            this.escapeHatch = !1;
            this.showModal();
        },
        showModal: function () {
            this.render();
            $("#wiz_trouble").modal("show");
            window.scrollTo(0, 0);
        },
        cancelTroubleWiz: function () {
            $("#wiz_trouble").modal("hide");
            this.viewName ? b.mediator.trigger("setSubView", new b.Views[this.viewName]({ model: this.viewModel })) : ((b.lastRoute = "meter_wizard"), b.router.navigate(b.lastRoute, { trigger: !0 }));
        },
        exitTroubleWiz: function () {
            $("#wiz_trouble").modal("hide");
            b.lastRoute = "meters";
            this.escapeHatch ? b.router.navigate("meters/escape_hatch", { trigger: !0 }) : b.router.navigate("appalert", { trigger: !0 });
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.MeterWizard_ts1 = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.viewName = "MeterWizard_ts1";
            this.template = JST["meters/meter_wizard_loading"];
            this.meterType = this.model.get("measurementType");
            this.phaseCount = this.model.get("phaseCount");
            this.measurementType = "production";
            "production" !== this.model.get("measurementType") && (this.measurementType = "net-consumption");
            b.mediator.on("meters:readingsUpdated", this.loadingDone, this);
            b.mediator.on("meters:updated", this.configDone, this);
            a.configIsDone && this.configDone;
            b.mediator.trigger("meter_wizard:getMeterData");
            this.setViewOptions();
            return this;
        },
        events: { "click #btn_try_again": "try_again", "click #trouble": "troubleDialogue" },
        render: function () {
            var a = this.template({ meterType: this.meterType, phaseCount: this.phaseCount, displayOptions: this.displayOptions, batt_detected_count: b.envoyModel.get("detected_acb_count") });
            this.$el.html(a);
            this.info_block && this.assign(this.info_block, ".meter-info-block");
            return this;
        },
        try_again: function () {
            b.mediator.trigger("setSubView", new b.Views.MeterWizardSubView1({ model: this.model }));
        },
        troubleDialogue: function () {
            b.mediator.trigger("wizTrouble:show_p4", this.model);
        },
        configDone: function () {
            b.mediator.trigger("meter_wizard:getMeterReadings");
        },
        loadingDone: function () {
            this.template = JST["meters/meter_wizard_ts1"];
            this.meterStats = this.filterLineStats(this.model.get("meterReadings"), this.phaseCount);
            this.tagOffendingStats(this.meterStats);
            this.info_block = new b.Views.MeterWizardInfoBlock({
                model: this.model,
                widget_type: b.InfoBlockType.PROBLEM,
                measurementType: this.measurementType,
                meterStats: this.meterStats,
                phaseCount: this.phaseCount,
                displayOptions: this.displayOptions,
            });
            this.render();
        },
        tagOffendingStats: function (a) {
            a.wNow.naughtyPower = a.wNow.value < -b.METER_WIZARD_WATT_TOLERANCE;
            _.each(a.lines, function (a) {
                a.naughtyPower = a.wNow.value < -b.METER_WIZARD_WATT_TOLERANCE;
            });
        },
        filterLineStats: function (a, b) {
            a.lines = _.filter(a.lines, function (a, e) {
                return e < b;
            });
            return a;
        },
        setViewOptions: function () {
            this.displayOptions = {
                title: I18n.t("envoy_backbone.meters.wizard." + (this.model.get("checkMeters") ? "check_title" : "setup_title"), { meter_type: I18n.t("envoy_backbone.overview." + this.meterType + "_meter_label") }),
                button: { text: I18n.t("envoy_backbone.meters.wizard.btn_try_again"), state: "enabled" },
                infoTitle: I18n.t("envoy_backbone.overview.current_production"),
                alert_text: I18n.t("envoy_backbone.meters.wizard.prod_ts_p4.desc"),
                statHandler: this.tagOffendingStats,
            };
            this.model.get("checkMeters") ? (this.displayOptions.troublePrompt = I18n.t("envoy_backbone.meters.wizard.exit_wizard")) : (this.displayOptions.troublePrompt = I18n.t("envoy_backbone.meters.wizard.trouble_prompt"));
            this.displayOptions.bullets = [I18n.t("envoy_backbone.meters.wizard.prod_ts_p4.ts1.counting", { count: this.phaseCount })];
            b.envoyModel.get("detected_acb_count") && this.displayOptions.bullets.push(I18n.t("envoy_backbone.meters.wizard.prod_ts_p4.ts2.counting", { count: this.phaseCount }));
            this.displayOptions.bullets.push(I18n.t("envoy_backbone.meters.wizard.prod_ts_p4.ts3.counting", { count: this.phaseCount }));
            this.displayOptions.bullets.push(I18n.t("envoy_backbone.meters.wizard.ct_bw_correct"));
            this.displayOptions.bullets.push(I18n.t("envoy_backbone.meters.wizard.prod_ts_p4.ts5.counting", { count: this.phaseCount }));
            this.displayOptions.bullets.push(I18n.t("envoy_backbone.meters.wizard.prod_ts_p4.ts6"));
        },
        close: function () {
            this.info_block && this.info_block.close();
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.MeterWizard_ts2 = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["meters/meter_wizard_ts1"];
            this.meterType = this.model.get("measurementType");
            this.phaseCount = this.model.get("phaseCount");
            this.meterStats = this.filterLineStats(this.model.get("meterReadings"), this.phaseCount);
            this.setViewOptions();
            this.info_block = new b.Views.MeterWizardInfoBlock({
                model: this.model,
                widget_type: b.InfoBlockType.PROBLEM,
                meterStats: this.meterStats,
                measurementType: "production",
                phaseCount: this.phaseCount,
                displayOptions: this.displayOptions,
            });
            return this;
        },
        events: { "click #btn_try_again": "try_again", "click #trouble": "troubleDialogue" },
        render: function () {
            var a = this.template({ meterType: this.meterType, phaseCount: this.phaseCount, displayOptions: this.displayOptions });
            this.$el.html(a);
            this.info_block && this.assign(this.info_block, ".meter-info-block");
            return this;
        },
        filterLineStats: function (a, b) {
            a.lines = _.filter(a.lines, function (a, e) {
                return e < b;
            });
            return a;
        },
        tagOffendingStats: function (a) {
            a.wNow.naughtyPower = Math.abs(a.wNow.value) > b.METER_WIZARD_WATT_TOLERANCE;
            _.each(a.lines, function (a) {
                a.naughtyPower = Math.abs(a.wNow.value) > b.METER_WIZARD_WATT_TOLERANCE;
            });
            return a;
        },
        setViewOptions: function () {
            var a = this.model.get("checkMeters");
            this.displayOptions = {
                title: I18n.t("envoy_backbone.meters.wizard." + (a ? "check_title" : "setup_title"), { meter_type: I18n.t("envoy_backbone.overview." + this.meterType + "_meter_label") }),
                button: { text: I18n.t("envoy_backbone.meters.wizard.btn_try_again"), state: "enabled" },
                infoTitle: I18n.t("envoy_backbone.overview.current_production"),
                alert_text: I18n.t("envoy_backbone.meters.wizard.prod_ts_p5.desc"),
                statHandler: this.tagOffendingStats,
            };
            a || (this.displayOptions.troublePrompt = I18n.t("envoy_backbone.meters.wizard.trouble_prompt"));
            this.displayOptions.bullets = [I18n.t("envoy_backbone.meters.wizard.pv_off.counting", { count: this.phaseCount }), I18n.t("envoy_backbone.meters.wizard.prod_ts_p5.ts2.counting", { count: this.phaseCount })];
        },
        try_again: function () {
            b.mediator.trigger("setSubView", new b.Views.MeterWizardSubViewP2({ model: this.model }));
        },
        troubleDialogue: function () {
            b.mediator.trigger("wizTrouble:show_p5", this.model);
        },
        close: function () {
            this.info_block && this.info_block.close();
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.MeterWizardTsC6 = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.viewName = "MeterWizardTsC6";
            this.displayOptions = a.displayOptions;
            this.template = JST["meters/meter_wizard_loading"];
            this.meterType = this.model.get("type").split("_")[1];
            this.phaseCount = this.model.get("phaseCount");
            b.mediator.on("meters:readingsUpdated", this.loadingDone, this);
            b.mediator.on("meters:updated", this.configDone, this);
            a.configIsDone && this.configDone;
            b.mediator.trigger("meter_wizard:getMeterData");
            this.setViewOptions();
            return this;
        },
        events: { "click #btn_try_again": "try_again", "click #trouble": "troubleDialogue" },
        render: function () {
            var a = this.template({
                meterType: this.meterType,
                phaseCount: this.phaseCount,
                meterTranslatedName: I18n.t("envoy_backbone.overview." + this.meterType + "_meter_label"),
                batt_detected_count: b.envoyModel.get("detected_acb_count"),
                displayOptions: this.displayOptions,
            });
            this.$el.html(a);
            this.info_block && this.assign(this.info_block, ".meter-info-block");
            return this;
        },
        try_again: function () {
            b.mediator.trigger("setSubView", new b.Views.MeterWizardSubView1({ model: this.model }));
        },
        troubleDialogue: function () {
            b.mediator.trigger("wizTrouble:show_c6", this.model);
        },
        configDone: function () {
            b.mediator.trigger("meter_wizard:getMeterReadings");
        },
        loadingDone: function () {
            this.template = JST["meters/meter_wizard_ts_gen"];
            this.meterStats = this.filterLineStats(this.model.get("meterReadings"), this.phaseCount);
            this.tagOffendingStats(this.meterStats);
            this.info_block = new b.Views.MeterWizardInfoBlock({
                model: this.model,
                widget_type: b.InfoBlockType.PROBLEM,
                meterStats: this.meterStats,
                measurementType: "total-consumption",
                phaseCount: this.phaseCount,
                displayOptions: this.displayOptions,
            });
            this.render();
        },
        tagOffendingStats: function (a) {
            a.wNow.naughtyPower = a.wNow.value < -b.METER_WIZARD_WATT_TOLERANCE;
            _.each(a.lines, function (a) {
                a.naughtyPower = a.wNow.value < -b.METER_WIZARD_WATT_TOLERANCE;
            });
        },
        filterLineStats: function (a, b) {
            a.lines = _.filter(a.lines, function (a, e) {
                return e < b;
            });
            return a;
        },
        setViewOptions: function () {
            this.displayOptions = {
                title: I18n.t("envoy_backbone.meters.wizard.setup_title", { meter_type: I18n.t("envoy_backbone.overview." + this.meterType + "_meter_label") }),
                button: { text: I18n.t("envoy_backbone.meters.wizard.btn_try_again"), state: "disabled" },
                infoTitle: I18n.t("envoy_backbone.meters.wizard.total_load"),
                alert_text: I18n.t("envoy_backbone.meters.wizard.consumption_neg"),
                statHandler: this.tagOffendingStats,
            };
            this.displayOptions.bullets = [I18n.t("envoy_backbone.meters.wizard.pv_off.counting", { count: this.phaseCount })];
            b.envoyModel.get("detected_acb_count") && this.displayOptions.bullets.push(I18n.t("envoy_backbone.meters.wizard.batt_off.counting", { count: this.phaseCount }));
            this.displayOptions.bullets.push(I18n.t("envoy_backbone.meters.wizard.consumption_ct_direction"));
            this.displayOptions.bullets.push(I18n.t("envoy_backbone.meters.wizard.ct_bw_correct"));
            this.displayOptions.bullets.push(I18n.t("envoy_backbone.meters.wizard.prod_ts_p4.ts6"));
            this.model.get("checkMeters") ? (this.displayOptions.troublePrompt = I18n.t("envoy_backbone.meters.wizard.exit_wizard")) : (this.displayOptions.troublePrompt = I18n.t("envoy_backbone.meters.wizard.trouble_prompt"));
        },
        close: function () {
            this.info_block && this.info_block.close();
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.MeterWizardTsC7 = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.displayOptions = a.displayOptions;
            this.template = JST["meters/meter_wizard_ts_gen"];
            this.meterType = this.model.get("type").split("_")[1];
            this.phaseCount = this.model.get("phaseCount");
            this.setViewOptions();
            return this;
        },
        events: { "click #btn_try_again": "try_again", "click #trouble": "troubleDialogue" },
        render: function () {
            this.meterStats = this.filterLineStats(this.model.get("meterReadings"), this.phaseCount);
            this.tagOffendingStats(this.meterStats);
            this.info_block = new b.Views.MeterWizardInfoBlock({
                model: this.model,
                widget_type: b.InfoBlockType.PROBLEM,
                meterStats: this.meterStats,
                measurementType: "net-consumption",
                phaseCount: this.phaseCount,
                displayOptions: this.displayOptions,
            });
            var a = this.template({
                meterType: this.meterType,
                phaseCount: this.phaseCount,
                meterTranslatedName: I18n.t("envoy_backbone.overview." + this.meterType + "_meter_label"),
                batt_detected_count: b.envoyModel.get("detected_acb_count"),
                displayOptions: this.displayOptions,
            });
            this.$el.html(a);
            this.info_block && this.assign(this.info_block, ".meter-info-block");
            return this;
        },
        try_again: function () {
            b.mediator.trigger("setSubView", new b.Views.MeterWizardSubViewChoiceC2({ model: this.model }));
        },
        troubleDialogue: function () {
            b.mediator.trigger("wizTrouble:show_p7", this.model);
        },
        configDone: function () {
            b.mediator.trigger("meter_wizard:getMeterReadings");
        },
        tagOffendingStats: function (a) {
            var b = this;
            a.wNow.naughtyPower = a.wNow.value < b.wattTolerance;
            _.each(a.lines, function (a) {
                a.naughtyPower = a.wNow.value < b.wattTolerance;
            });
        },
        filterLineStats: function (a, b) {
            a.lines = _.filter(a.lines, function (a, e) {
                return e < b;
            });
            return a;
        },
        setViewOptions: function () {
            this.displayOptions = {
                title: I18n.t("envoy_backbone.meters.wizard.setup_title", { meter_type: I18n.t("envoy_backbone.overview." + this.meterType + "_meter_label") }),
                button: { text: I18n.t("envoy_backbone.meters.wizard.btn_next"), state: "disabled" },
                infoTitle: I18n.t("envoy_backbone.meters.wizard.total_load"),
                alert_text: I18n.t("envoy_backbone.meters.wizard.load_didnt_increase"),
            };
            this.displayOptions.bullets = [I18n.t("envoy_backbone.meters.wizard.confirm_ct_routing")];
            this.model.get("checkMeters") ? (this.displayOptions.troublePrompt = I18n.t("envoy_backbone.meters.wizard.exit_wizard")) : (this.displayOptions.troublePrompt = I18n.t("envoy_backbone.meters.wizard.trouble_prompt"));
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.MeterWizardTsC8 = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.displayOptions = a.displayOptions;
            this.template = JST["meters/meter_wizard_ts_gen"];
            this.meterType = this.model.get("type").split("_")[1];
            this.phaseCount = this.model.get("phaseCount");
            this.bothMeterStats = a.meterStats;
            this.setViewOptions();
            return this;
        },
        events: { "click #btn_try_again": "try_again", "click #trouble": "troubleDialogue" },
        render: function () {
            this.info_block = new b.Views.MeterWizardInfoBlock({
                model: this.model,
                widget_type: b.InfoBlockType.PROBLEM,
                meterStats: this.bothMeterStats.netConsumption,
                measurementType: "net-consumption",
                showDirection: !0,
                phaseCount: this.phaseCount,
                displayOptions: this.displayOptions,
            });
            var a = this.template({
                meterType: this.meterType,
                phaseCount: this.phaseCount,
                meterTranslatedName: I18n.t("envoy_backbone.overview." + this.meterType + "_meter_label"),
                batt_detected_count: b.envoyModel.get("detected_acb_count"),
                displayOptions: this.displayOptions,
            });
            this.$el.html(a);
            this.info_block && this.assign(this.info_block, ".meter-info-block");
            return this;
        },
        try_again: function () {
            b.mediator.trigger("setSubView", new b.Views.MeterWizardSubViewC3({ model: this.model }));
        },
        troubleDialogue: function () {
            b.mediator.trigger("wizTrouble:show_c8");
        },
        configDone: function () {
            b.mediator.trigger("meter_wizard:getMeterReadings");
        },
        tagOffendingStats: function (a) {
            var b = this;
            a.wNow.naughtyPower = a.wNow.value < b.wattTolerance;
            _.each(a.lines, function (a) {
                a.naughtyPower = a.wNow.value < b.wattTolerance;
            });
        },
        filterLineStats: function (a, b) {
            a.lines = _.filter(a.lines, function (a, e) {
                return e < b;
            });
            return a;
        },
        setViewOptions: function () {
            this.displayOptions = {
                title: I18n.t("envoy_backbone.meters.wizard.setup_title", { meter_type: I18n.t("envoy_backbone.overview." + this.meterType + "_meter_label") }),
                bullets: [
                    I18n.t("envoy_backbone.meters.wizard.prod_su1_pv_on.counting", { count: this.phaseCount }),
                    I18n.t("envoy_backbone.meters.wizard.enough_sun"),
                    I18n.t("envoy_backbone.meters.wizard.prod_ts_p4.ts3.counting", { count: this.phaseCount }),
                    I18n.t("envoy_backbone.meters.wizard.ct_bw_correct"),
                ],
                button: { text: I18n.t("envoy_backbone.meters.wizard.btn_next"), state: "disabled" },
                infoTitle: I18n.t("envoy_backbone.overview.net_power"),
                alert_text: I18n.t("envoy_backbone.meters.wizard.total_cons_not_reduced"),
            };
            this.model.get("checkMeters") ? (this.displayOptions.troublePrompt = I18n.t("envoy_backbone.meters.wizard.exit_wizard")) : (this.displayOptions.troublePrompt = I18n.t("envoy_backbone.meters.wizard.trouble_prompt"));
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.MeterWizard_ts_p0_5 = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.displayOptions = a.displayOptions;
            this.template = JST["meters/meter_wizard_loading"];
            this.buttonPressed = null;
            this.meterType = this.model.get("type").split("_")[1];
            this.phaseCount = this.model.get("phaseCount");
            this.info_block = null;
            if (BackboneConfig.fast_data) b.mediator.once("systemReadingStats:fast_data_update", this.loadingDone, this);
            else b.mediator.trigger("meter_wizard:getMeterReadings"), b.mediator.on("meters:readingsUpdated", this.loadingDone, this);
            return this;
        },
        events: { "click #btn_try_again": "try_again", "click #trouble": "troubleDialogue", "click #btn_yes": "buttonHandler", "click #btn_no": "buttonHandler" },
        render: function () {
            var a = this.template({ meterTranslatedName: I18n.t("envoy_backbone.overview." + this.meterType + "_meter_label"), button_pressed: this.buttonPressed, displayOptions: this.displayOptions });
            this.$el.html(a);
            this.info_block && this.assign(this.info_block, ".meter-info-block");
            "btn_yes" === this.buttonPressed && this.assign(this.phase_select_sub_view, ".phase-sel-subview");
            return this;
        },
        buttonHandler: function (a) {
            this.buttonPressed = a.currentTarget.id;
            "btn_yes" === this.buttonPressed ? (this.phase_select_sub_view = new b.Views.MeterWizardPhaseSelSubView({ model: this.model })) : (this.configIsDone = !0);
            this.setDisplayOptions();
            this.render();
        },
        try_again: function () {
            var a = this.$el.find("select.phase-count-select").val();
            this.configIsDone || this.updateModel(a);
            b.mediator.trigger("setSubView", new b.Views.MeterWizardSubView1({ model: this.model, configIsDone: this.configIsDone }));
            b.mediator.trigger("meter_wizard:getMeterData");
        },
        updateModel: function (a) {
            this.otherMeter = "consumption" === this.meterType ? b.meters.findWhere({ type: "eim_production" }) : b.meters.findWhere({ type: "eim_consumption" });
            var c = "enabled" === this.model.get("state") && "enabled" === this.otherMeter.get("state"),
                d = "production";
            "consumption" === this.meterType && (d = this.model.get("measurementType"));
            var d = { state: this.model.get("state"), measurementType: d },
                e = { state: this.otherMeter.get("state") };
            "three" === this.model.get("phaseMode") && ("" !== this.model.get("phaseCount") && (d = _.extend({ phaseCount: a }, d)), (e = _.extend({ phaseCount: a }, e)));
            c ? ("consumption" === this.meterType ? b.meters.updateConfig(e, d) : b.meters.updateConfig(d, e)) : this.model.updateConfig(d);
            this.model.set("localFirstConfig", !0);
        },
        troubleDialogue: function () {
            b.mediator.trigger("wizTrouble:show_p0", this.model);
        },
        loadingDone: function () {
            var a = "production";
            "production" !== this.meterType && (a = "total-consumption");
            this.meterStats = JSON.parse(JSON.stringify(this.model.getMeterData(a, !0)));
            this.template = JST["meters/meter_wizard_ts_p0_5"];
            this.setDisplayOptions();
            this.getUnusedPhasesWithPower(this.meterStats, this.phaseCount);
            this.info_block = new b.Views.MeterWizardInfoBlock({
                model: this.model,
                widget_type: b.InfoBlockType.PROBLEM,
                meterStats: this.meterStats,
                measurementType: a,
                showDirection: "consumption" === this.meterType,
                phaseCount: this.phaseCount,
                displayOptions: this.displayOptions,
            });
            this.render();
        },
        configDone: function () {},
        getUnusedPhasesWithPower: function (a, c) {
            _.each(a.lines, function (a, e) {
                a.naughtyPower = a.wNow.value > b.METER_WIZARD_WATT_TOLERANCE && e + 1 > c;
            });
            return a;
        },
        setupPhaseString: function (a, c) {
            var d = "";
            _.each(a.lines, function (a, g) {
                a.wNow.value > b.METER_WIZARD_WATT_TOLERANCE && g + 1 > c && (1 < g && 2 > c && (d = d.concat(" and ")), (d = d.concat(I18n.t("envoy_backbone.meters.phase_labels.phase_" + (g + 1)))));
            });
            console.log(d);
            return d;
        },
        setDisplayOptions: function () {
            this.displayOptions = {
                title: I18n.t("envoy_backbone.meters.wizard." + (this.model.get("checkMeters") ? "check_title" : "setup_title"), { meter_type: I18n.t("envoy_backbone.overview." + this.meterType + "_meter_label") }),
                alert_text: I18n.t("envoy_backbone.meters.wizard.trouble_p0_5.desc.counting", {
                    count: this.phaseCount,
                    selected_phases: I18n.t("envoy_backbone.meters.multi_phase_options.mphase_" + this.phaseCount),
                    phaseStr: this.setupPhaseString(this.meterStats, this.phaseCount),
                }),
                showAllPhases: !0,
                statHandler: this.getUnusedPhasesWithPower,
            };
            this.displayOptions.infoTitle = "production" === this.meterType ? I18n.t("envoy_backbone.overview.current_production") : I18n.t("envoy_backbone.meters.wizard.total_load");
            this.model.get("checkMeters") ? (this.displayOptions.troublePrompt = I18n.t("envoy_backbone.meters.wizard.exit_wizard")) : (this.displayOptions.troublePrompt = I18n.t("envoy_backbone.meters.wizard.trouble_prompt"));
            this.displayOptions.bullets = "btn_yes" === this.buttonPressed ? [I18n.t("envoy_backbone.meters.wizard.trouble_p0_5.ts_yes_resp")] : [I18n.t("envoy_backbone.meters.wizard.trouble_p0_5.ts_no_resp")];
        },
        close: function () {
            this.info_block && this.info_block.close();
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.MetersPage = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["meters/main"];
            b.showInternalMeters() ? ((this.eimView = new b.Views.EIMOverview(a)), b.mediator.on("meters:updated", this.render, this)) : (this.pmuView = new b.Views.PMUOverview());
            b.loaderBar.setConcernedList([{ id: "InternalMeterInfo" }, { id: "PMUGet" }]);
            return this;
        },
        events: { "click #check_meters": "getStarted" },
        render: function () {
            var a = !1;
            b.showInternalMeters() &&
                (a = _.every(EnvoyBackboneApp.meters.models, function (a) {
                    return "enabled" == a.get("state");
                }));
            a = this.template({ meters_enabled: a });
            this.$el.html(a);
            b.showInternalMeters() ? void 0 != this.eimView && this.assign(this.eimView, ".internal_meters") : void 0 != this.pmuView && this.assign(this.pmuView, ".pmu_list");
            return this;
        },
        getStarted: function (a) {
            this.eimView.getStarted(!0);
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            void 0 != this.pmuView && this.pmuView.close();
            void 0 != this.eimView && this.eimView.close();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.NavBar = Backbone.View.extend({
        initialize: function (a) {
            this.template = JST.nav_bar;
            b.mediator.on("app:domReady", this.render, this);
            Backbone.history.on(
                "route",
                function (a, d, e) {
                    a == b.router && "appalert" != d && this.updateActive(d);
                },
                this
            );
            return this;
        },
        render: function () {
            this.setElement($("#navbar"));
            this.$el.html(this.template({ model: b.envoyModel.toJSON() }));
            return this;
        },
        updateActive: function (a) {
            this.$el.find(".active").removeClass("active");
            this.$el.find("li." + a).addClass("active");
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.NetworkPage = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["network/main"];
            this.model = b.envoyModel;
            this.monitoringView = new b.Views.MonitoringSummary({ bShowReportSettings: !0, bOnOverview: !1 });
            this.networkConfigView = new b.Views.NetworkConfigLinks({ bShowHeader: !0 });
            b.loaderBar.setConcernedList([{ id: "Home" }, { id: "ReportSettingsGet" }]);
            b.envoyModel.poll();
            return this;
        },
        render: function () {
            var a = this.template({ model: this.model, plcAnalysIsEnabled: b.plcAnalysIsEnabled() });
            this.$el.html(a);
            this.assign(this.monitoringView, ".monitoring_summary");
            this.assign(this.networkConfigView, ".network_config");
            return this;
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            this.stopListening(this.model);
            this.monitoringView.close();
            this.networkConfigView.close();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.NetworkConfigLinks = Backbone.View.extend({
        className: "network_config",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["network/network_config_links"];
            this.model = b.network;
            this.bShowHeader = a.bShowHeader;
            this.listenTo(b.network, "change:primary_network", this.render);
            return this;
        },
        render: function () {
            this.$el.html(this.template({ model: this.model.toJSON(), bShowHeader: this.bShowHeader, showHelpIcon: b.showHelpIcon() }));
            return this;
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            this.stopListening(this.model);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.NetworkConnectivityCheck = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["network/network_connectivity"];
            this.model = b.networkConnectivityCheck;
            this.isLoading = void 0 == this.model.get("isLoading") || 0 == this.model.get("isLoading") ? !1 : !0;
            b.mediator.on("network:ConnectivityCheckUpdate", this.checkLoader, this);
            return this;
        },
        events: { "click button": "fetchNetworkConnectivity" },
        render: function () {
            var a = this.template({ model: this.model.toJSON(), isLoading: this.isLoading });
            this.$el.html(a);
            return this;
        },
        fetchNetworkConnectivity: function () {
            this.isLoading = !0;
            this.render();
            this.model.set({ isLoading: !0 });
            this.model.getNetworkConnectivityData();
        },
        checkLoader: function () {
            if (void 0 == this.model.get("isLoading") || 0 == this.model.get("isLoading")) this.isLoading = !1;
            this.render();
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            this.stopListening(this.model);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.NetworkDiagnosticTools = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["network/diagnostic_tools"];
            b.isPublic()
                ? ((this.isLoading = !0),
                  b.mediator.on("network:DiagnosticDataLoaded", this.checkLoader, this),
                  (a = b.network.get("primary_network")),
                  "wifi" == a ? b.wifiModel.poll() : "cellular" == a ? b.network.getCellularConfig() : b.network.getEthernetConfig())
                : ((this.isLoading = !1), this.createViews());
            b.loaderBar.setConcernedList([{ id: "Home" }]);
            return this;
        },
        render: function () {
            var a = this.template({ isLoading: this.isLoading });
            this.$el.html(a);
            void 0 != this.diagnosticNetworkInfoView && this.assign(this.diagnosticNetworkInfoView, ".diagnostic_network_info");
            void 0 != this.networkConnectivityView && this.assign(this.networkConnectivityView, ".network_connectivity");
            void 0 != this.networkPingView && this.assign(this.networkPingView, ".network_ping");
            void 0 != this.networkRouteCheckView && this.assign(this.networkRouteCheckView, ".network_route");
            return this;
        },
        checkLoader: function () {
            1 == this.isLoading && ((this.isLoading = !1), this.createViews(), b.mediator.off("network:EthernetConfigLoaded", null, this), this.render());
        },
        createViews: function () {
            void 0 == this.diagnosticNetworkInfoView &&
                ((this.diagnosticNetworkInfoView = new b.Views.DiagnosticNetworkInfo()),
                (this.networkConnectivityView = new b.Views.NetworkConnectivityCheck()),
                (this.networkPingView = new b.Views.NetworkPing()),
                (this.networkRouteCheckView = new b.Views.NetworkRoute()));
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            void 0 != this.diagnosticNetworkInfoView && this.diagnosticNetworkInfoView.close();
            void 0 != this.networkConnectivityView && this.networkConnectivityView.close();
            void 0 != this.networkPingView && this.networkPingView.close();
            void 0 != this.networkRouteCheckView && this.networkRouteCheckView.close();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.NetworkPing = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["network/network_ping"];
            this.model = b.networkPing;
            this.isLoading = void 0 == this.model.get("isLoading") || 0 == this.model.get("isLoading") ? !1 : !0;
            b.mediator.on("network:PingUpdate", this.checkLoader, this);
            return this;
        },
        events: { "click button.submit": "validatePing", "keypress form": "evaluateEnter" },
        render: function () {
            var a = this.template({ model: this.model.toJSON(), isLoading: this.isLoading });
            this.$el.html(a);
            return this;
        },
        evaluateEnter: function (a) {
            13 == a.keyCode && this.validatePing(a);
        },
        checkLoader: function () {
            if (void 0 == this.model.get("isLoading") || 0 == this.model.get("isLoading")) this.isLoading = !1;
            this.render();
        },
        validatePing: function (a) {
            a.preventDefault();
            $("#network_ping_form")
                .validate({ rules: { pingip: { required: !0, domain: !0 } }, errorClass: "has-error" })
                .form() && ((this.isLoading = !0), (a = $("#network_ping_form #pingip").val()), this.render(), this.model.set({ isLoading: !0 }), this.model.getNetworkPingData(a));
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            this.stopListening(this.model);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.NetworkRoute = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["network/network_route"];
            this.model = b.networkRouteCheck;
            this.isLoading = void 0 == this.model.get("isLoading") || 0 == this.model.get("isLoading") ? !1 : !0;
            b.mediator.on("network:RouteCheckUpdate", this.checkLoader, this);
            return this;
        },
        events: { "click button": "fetchNetworkRoute" },
        render: function () {
            var a = this.template({ model: this.model.toJSON(), isLoading: this.isLoading });
            this.$el.html(a);
            return this;
        },
        fetchNetworkRoute: function () {
            this.isLoading = !0;
            this.render();
            this.model.set({ isLoading: !0 });
            this.model.getNetworkRouteData();
        },
        checkLoader: function () {
            if (void 0 == this.model.get("isLoading") || 0 == this.model.get("isLoading")) this.isLoading = !1;
            this.render();
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            this.stopListening(this.model);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.NetworkSubPage = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["network/sub_page"];
            this.primary_tab = a.primary_tab;
            b.envoyModel.poll();
            return this;
        },
        render: function () {
            this.backLink = "#network";
            1 == b.isPublic() && (this.backLink = "#" + b.networkSourceRoute);
            "diagnostic_tools" == this.primary_tab
                ? ((this.subView = new b.Views.NetworkDiagnosticTools()), (this.pageTitle = I18n.t("envoy_backbone.network.diagnostic_tools.title")))
                : "cellular" == this.primary_tab
                ? ((this.subView = new b.Views.CellularPage()), (this.pageTitle = I18n.t("envoy_backbone.cellular.page_title")))
                : "wifi_available_networks" == this.primary_tab
                ? ((this.subView = new b.Views.WifiAvailableNetworks()),
                  (this.backLink = "#network/wifi"),
                  void 0 != b.wifiModel && b.wifiModel.isConnected() ? (this.pageTitle = I18n.t("envoy_backbone.wifi.join_another_network.title")) : (this.pageTitle = I18n.t("envoy_backbone.wifi.join_network.title")))
                : "wifi" == this.primary_tab
                ? ((this.subView = new b.Views.WifiPage()), (this.pageTitle = I18n.t("envoy_backbone.wifi.page_title")))
                : "freq_analysis" == this.primary_tab
                ? ((this.subView = new b.Views.FreqAnalysisView({ model: new b.Models.FreqAnalysisView() })), (this.pageTitle = I18n.t("envoy_backbone.meters.freq_analysis.power_line_analy")))
                : ((this.subView = new b.Views.EthernetPage()), (this.pageTitle = I18n.t("envoy_backbone.ethernet.page_title")));
            var a = this.template({ pageTitle: this.pageTitle, backLink: this.backLink });
            this.$el.html(a);
            this.assign(this.subView, ".subview");
            return this;
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            this.subView.close();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.AboutEnvoySummary = Backbone.View.extend({
        className: "about_envoy_summary",
        tagName: "div",
        initialize: function (a) {
            this.template = JST.about_envoy_summary;
            this.network = b.network;
            this.envoy = b.envoyModel;
            this.wifi = b.wifiModel;
            this.bOnOverview = a.bOnOverview;
            this.listenTo(this.wifi, "change", this.render);
            this.listenTo(this.envoy, "change", this.render);
            this.listenTo(this.network, "change", this.render);
            return this;
        },
        render: function () {
            var a = this.template({ envoy: this.envoy.toJSON(), network: this.network.toJSON(), wifi: this.wifi.toJSON(), bOnOverview: this.bOnOverview });
            this.$el.html(a);
            return this;
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            this.stopListening(this.wifi);
            this.stopListening(this.envoy);
            this.stopListening(this.network);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.CommLevelCounts = Backbone.View.extend({
        tagName: "div",
        initialize: function (a) {
            this.template = JST["overview/comm_levels"];
            this.model = b.envoyModel;
            this.collection_type = a.collection_type;
            this.commAttr = this.collection_type + "_comm_level";
            this.commEvent = "change:" + this.commAttr;
            this.listenTo(this.model, this.eventName, this.render);
            return this;
        },
        render: function () {
            this.commLevel = this.model.get(this.commAttr);
            this.listenTo(this.model, this.commEvent, this.render);
            this.$el.html(this.template({ comm_level: this.commLevel }));
            return this;
        },
        close: function () {
            this.remove();
            this.unbind();
            b.mediator.off(null, null, this);
            this.stopListening(this.model);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.DataAlert = Backbone.View.extend({
        initialize: function () {
            this.model = b.envoyModel.alerts;
            this.template = JST.data_alert;
            this.listenTo(this.model, "add remove", this.render);
        },
        events: { "click .close": "acknowledgeAlert" },
        render: function () {
            var a = [];
            this.model.each(function (b) {
                0 == b.get("acknowledged") && a.push(b.get("key"));
            });
            this.$el.html(this.template({ keys: a }));
            return this;
        },
        acknowledgeAlert: function (a) {
            a = this.model.findWhere({ key: a.currentTarget.id });
            a.set("acknowledged", !0);
            this.model.set(a, { remove: !1 });
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.OverviewDevicesSummary = Backbone.View.extend({
        className: "devices_summary",
        tagName: "div",
        initialize: function (a) {
            this.collection_type = a.collection_type;
            this.collection = b[a.collection_type];
            0 == b.isPublic()
                ? ((this.template = JST["overview/devices_summary"]),
                  (this.scanModel = b.scanModel),
                  this.scanModel.poll(),
                  this.listenTo(b.scanModel, "change:active", this.render),
                  this.listenTo(b.scanModel, "change:inhibited", this.render),
                  b.mediator.on("app:targetCountUpdated", this.render, this),
                  b.mediator.on("agfProfiles:selectedProfileUpdated", this.render, this),
                  b.mediator.on("inventory:ProfileStateUpdated", this.render, this),
                  b.mediator.on("deviceScan:nsrUpdated", this.render, this),
                  b.mediator.on("app:targetNsrCountUpdated", this.render, this))
                : ((this.template = JST["overview/public_devices_summary"]), (this.scanModel = void 0));
            this.listenTo(this.model, "change:detected_count", this.render);
            this.listenTo(this.model, "change:communicating_count", this.render);
            this.listenTo(this.model, "change:profile_count", this.render);
            this.listenTo(this.model, "change:grid_profile", this.render);
            this.listenTo(this.model, "change:producing_count", this.render);
            this.listenTo(this.model, "change:detected_acb_count", this.render);
            this.listenTo(this.model, "change:communicating_acb_count", this.render);
            this.listenTo(this.model, "change:profile_acb_count", this.render);
            this.listenTo(this.model, "change:producing_acb_count", this.render);
            this.listenTo(this.model, "change:detected_encharge_batteries_count", this.render);
            this.listenTo(this.model, "change:communicating_encharge_batteries_count", this.render);
            this.listenTo(this.model, "change:profile_encharge_batteries_count", this.render);
            this.listenTo(this.model, "change:producing_encharge_batteries_count", this.render);
            this.listenTo(b.tariff, "change:tariff_set", this.render);
            this.listenTo(b.envoyModel, "change:peakStartTime", this.render);
            this.commLevelView = new b.Views.CommLevelCounts({ collection_type: this.collection_type });
        },
        events: { "click .edit": "showSetMicroinverterCount" },
        render: function () {
            var a = this.model.toJSON(),
                c = this.collection.attrs,
                d = b.showProfiles() ? this.model.getProfile() : null,
                e = void 0 != this.scanModel ? this.scanModel.toJSON() : null,
                g = this.getDeviceSpecifcData(a, d);
            this.$el.html(
                this.template({
                    collection_type: this.collection_type,
                    collection_type_alias: c.alias || this.collection_type,
                    current_profile: d,
                    hasScan: c.hasScan,
                    isPublic: b.isPublic(),
                    model: this.model.toJSON(),
                    scanModel: e,
                    showProfiles: b.showProfiles(),
                    communicating_count: a[c.envoyModelCommCount],
                    detected_count: a[c.envoyModelDetectedCount],
                    profile_count: g.profile_count,
                    producing_count: a[c.envoyModelProducingCount],
                    target_count: b[c.appTargetCount],
                    text_producing: "envoy_backbone.overview.new_microinverter_counts.producing_power.counting_" + c.alias,
                    text_profile: g.profile_text,
                    text_profile_set: "envoy_backbone.overview.new_microinverter_counts.profile_set.counting_" + c.alias,
                    text_rate_structure: g.rate_structure_text,
                    text_title: "envoy_backbone.overview.new_microinverter_counts.total.counting_" + c.alias,
                })
            );
            this.assign(this.commLevelView, ".comm-level-count");
            this.commLevelView.render();
            return this;
        },
        showSetMicroinverterCount: function () {
            b.mediator.trigger("app:showMicroinverterCountModal");
        },
        getDeviceSpecifcData: function (a, b) {
            return "ac_batteries" == this.collection_type || "encharge_batteries" == this.collection_type ? this.getBatteriesProfileAndRate(a, b) : this.getMicroinvertersProfileAndRate(a, b);
        },
        getMicroinvertersProfileAndRate: function (a, c) {
            var d = { profile_text: "", rate_structure_text: "", profile_count: a[this.collection.attrs.envoyModelProfileCount] };
            null != b.agfProfiles && (d.profile_text = I18n.t("envoy_backbone.overview.profile") + ": " + c.translated_name);
            return d;
        },
        getBatteriesProfileAndRate: function (a, c) {
            var d = { profile_text: "", rate_structure_text: I18n.t("envoy_backbone.overview.tariff_rate_structure") + ": " + Tools.getTariffTranslatedString(b.tariff.get("envoy_tariff_type")), profile_count: 0 };
            !b.isPublic() && b.tariff.get("tariff_set") && (d.profile_count = a[this.collection.attrs.envoyModelProfileCount]);
            null != b.agfProfiles &&
                (d.profile_text =
                    void 0 != c.default_profile_set
                        ? I18n.t("envoy_backbone.overview.profile") + ": " + I18n.t("envoy_backbone.overview." + this.collection_type + "." + ("NA" == b.envoyModel.get("envoy_type") ? "factory_installed" : "not_set"))
                        : I18n.t("envoy_backbone.overview.profile") + ": " + c.translated_name);
            return d;
        },
        close: function () {
            this.remove();
            this.stopListening(this.model);
            void 0 != b.scanModel && this.stopListening(b.scanModel);
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.EnpowersSummary = Backbone.View.extend({
        className: "enpowers_summary",
        tagName: "div",
        initialize: function () {
            this.template = JST["overview/enpowers_summary"];
            this.model = b.envoyModel;
            this.listenTo(this.model, "change:enpower_connected change:enpower_grid_status", this.render);
            b.mediator.on("enpower:grid_status_action", this.render, this);
            this.isGridSwitchVisible = !b.isPublic();
        },
        events: { "click .switch": "handleGridStatusToggle" },
        render: function () {
            var a = !!b.activeRequests && (b.activeRequests.findWhere({ id: "EnchargeRelaySet" }) || b.activeRequests.findWhere({ id: "EnchargeRelayGet" }));
            this.$el.html(this.template({ connected: this.model.get("enpower_connected"), grid_status: this.isGridStatusOn(), is_grid_switch_disabled: a, is_grid_switch_visible: this.isGridSwitchVisible }));
            return this;
        },
        isGridStatusOn: function () {
            return "closed" === this.model.get("enpower_grid_status").mains_oper_state;
        },
        handleGridStatusToggle: function (a) {
            a.preventDefault();
            a = "closed" === this.model.get("enpower_grid_status").mains_oper_state ? "open" : "closed";
            b.enpowers.updateMainsAdminState(a);
        },
        close: function () {
            this.remove();
            this.stopListening(this.model);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.ExternalMeterSummary = Backbone.View.extend({
        className: "power_energy_summary",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["overview/ext_meter_summary"];
            this.model = b.systemReadingStats;
            this.listenTo(this.model, "change", this.render);
        },
        render: function () {
            var a = b.systemReadingStats.productionData("meters"),
                a = this.template({ isPublic: b.isPublic(), productionInfo: a });
            this.$el.html(a);
            return this;
        },
        close: function () {
            this.remove();
            this.stopListening(this.model);
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.MeterSummary = Backbone.View.extend({
        className: "power_energy_summary",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["overview/meter_summary"];
            this.model = b.systemReadingStats;
            this.listenTo(b.meters, "add", this.assignMeters);
            this.assignMeters();
            this.listenTo(this.model, "change", this.render);
            this.listenTo(b.ac_batteries, "change add remove", this.render);
        },
        render: function () {
            var a = b.systemReadingStats.consumptionData("total-consumption"),
                c = b.systemReadingStats.consumptionData("net-consumption"),
                d = b.systemReadingStats.productionData("meters");
            if (void 0 != this.ct_production_meter) var e = this.ct_production_meter.toJSON();
            if (void 0 != this.ct_consumption_meter) var g = this.ct_consumption_meter.toJSON();
            a = this.template({ isPublic: b.isPublic(), production_meter: e, consumption_meter: g, productionInfo: d, netConsumptionInfo: c, totalConsumptionInfo: a, hasStorage: 0 < b.ac_batteries.getActiveDevices().length });
            this.$el.html(a);
            return this;
        },
        assignMeters: function () {
            void 0 == this.ct_consumption_meter &&
                ((this.ct_consumption_meter = b.meters.findWhere({ type: "eim_consumption" })), void 0 != this.ct_consumption_meter && this.listenTo(this.ct_consumption_meter, "change:state", this.render));
            void 0 == this.ct_production_meter && ((this.ct_production_meter = b.meters.findWhere({ type: "eim_production" })), void 0 != this.ct_production_meter && this.listenTo(this.ct_production_meter, "change:state", this.render));
            this.render();
        },
        close: function () {
            this.remove();
            this.stopListening(this.model);
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.MonitoringSummary = Backbone.View.extend({
        className: "monitoring_summary",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["monitoring/monitoring_summary"];
            this.model = b.network;
            this.bShowReportSettings = a.bShowReportSettings;
            this.bOnOverview = a.bOnOverview;
            this.bShowReportSettingLoading = !0;
            this.listenTo(b.wifiModel, "change", this.render);
            this.listenTo(b.network, "change", this.render);
            this.listenTo(this.model, "change:primary_network", this.render);
            this.listenTo(this.model, "change:isPlusWeb", this.render);
            1 == this.bShowReportSettings && (b.mediator.on("network:ReportSettingsUpdated", this.checkReportLoader, this), b.mediator.on("confirmSetting:submit", this.submitReportSettingChange, this), b.network.initializeReportSettings());
            b.isPublic() && (this.networkConfigView = new b.Views.NetworkConfigLinks({ bShowHeader: !1 }));
        },
        events: {
            "click .toggle-report-setting": "openConfirmReportSettingModal",
            "click .monitoring-not-connected": "goToNetworkOverview",
            "show.bs.collapse #reporting_more_info": "toggleReportMoreInfoExpanded",
            "hide.bs.collapse #reporting_more_info": "toggleReportMoreInfoExpanded",
        },
        render: function () {
            var a = this.model.get("primary_network"),
                c = "low" == b.network.get("report_setting") ? I18n.t("envoy_backbone.monitoring.report_setting_modal.high_desc") : I18n.t("envoy_backbone.monitoring.report_setting_modal.low_desc");
            "cellular" == a && (c = I18n.t("envoy_backbone.monitoring.report_setting_modal.diagnostic_desc"));
            0 == b.isPublic() && b.confirmSettingModal.updateModalType(I18n.t("envoy_backbone.monitoring.report_setting_modal.title"), c, "confirmSetting:submit");
            c = "";
            1 == this.bOnOverview && 0 == b.isPublic() ? (this.networkLink = "#network") : (this.networkLink = "#network/" + a);
            0 == this.model.get("isPlusWeb") || "" == a || "none" == a
                ? (c = "")
                : "wifi" == a
                ? (c = b.wifiModel.iconString())
                : "cellular" == a
                ? (c = "signal_" + this.model.get("cellular_config").bars)
                : "ethernet" == a && (c = void 0 != this.model.get("ethernet_config") && 1 == this.model.get("ethernet_config").network ? "connected" : "not_connected");
            this.$el.html(
                this.template({
                    model: this.model.toJSON(),
                    icon: c,
                    bShowReportSettings: this.bShowReportSettings,
                    networkLink: this.networkLink,
                    bShowReportSettingLoading: this.bShowReportSettingLoading,
                    isPublic: b.isPublic(),
                    bOnOverview: this.bOnOverview,
                    reportMoreInfoExpanded: b.reportMoreInfoExpanded,
                    showProfiles: b.showProfiles(),
                })
            );
            void 0 != this.networkConfigView && (this.assign(this.networkConfigView, ".network_config"), this.networkConfigView.render());
            return this;
        },
        submitReportSettingChange: function (a) {
            b.network.putReportSettings();
            this.bShowReportSettingLoading = !0;
            this.render();
        },
        goToNetworkOverview: function (a) {
            this.bOnOverview && !b.isPublic() && b.router.navigate("network", { trigger: !0 });
        },
        openConfirmReportSettingModal: function (a) {
            b.mediator.trigger("confirmSetting:show");
        },
        toggleReportMoreInfoExpanded: function (a) {
            b.reportMoreInfoExpanded = "show" == a.type;
        },
        checkReportLoader: function (a) {
            1 == this.bShowReportSettingLoading && ((this.bShowReportSettingLoading = !1), this.render());
        },
        close: function () {
            this.remove();
            b.network.stopPollingReportSettings();
            void 0 != this.networkConfigView && this.networkConfigView.close();
            this.stopListening(this.model);
            this.stopListening(b.wifiModel);
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.MorePage = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["more/main"];
            this.model = b.envoyModel;
            return this;
        },
        render: function () {
            var a = this.template({ model: this.model.toJSON() });
            this.$el.html(a);
            return this;
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.OverviewPage = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["overview/main"];
            this.model = b.envoyModel;
            b.mediator.on("app:closeModal", this.hideSetMicroinverterCount, this);
            this.monitoringView = new b.Views.MonitoringSummary({ bShowReportSettings: !1, bOnOverview: !0 });
            this.wirelessConnectionView = new b.Views.WirelessConnectionSummary();
            this.microinverters = b.microinverters;
            b.isPublic() || b.systemReadingStats.poll();
            b.showInternalMeters()
                ? ((this.powerEnergyView = new b.Views.MeterSummary()),
                  (this.storageSummaryView = new b.Views.StorageSummary()),
                  (this.acBatteriesView = new b.Views.OverviewDevicesSummary({ model: this.model, collection_type: "ac_batteries" })),
                  (this.enchargeBatteriesView = new b.Views.OverviewDevicesSummary({ model: this.model, collection_type: "encharge_batteries" })))
                : ((this.extMeterView = new b.Views.ExternalMeterSummary()), (this.powerEnergyView = new b.Views.PowerEnergySummary({ inverterDataAccordian: !1 })), this.listenTo(b.systemReadingStats, "change:production", this.render));
            this.enpowersView = new b.Views.EnpowersSummary({ model: this.model, collection_type: "enpowers" });
            this.microinvertersView = new b.Views.OverviewDevicesSummary({ model: this.model, collection_type: "microinverters" });
            this.nsrView = new b.Views.OverviewDevicesSummary({ model: this.model, collection_type: "nsrs" });
            b.isPublic() || (this.systemView = new b.Views.System());
            this.supportConnection = new b.Views.SupportConnectionConfig();
            this.model.pollSupportConnectionState();
            b.envoyModel.poll();
            b.isPublic()
                ? ((this.aboutEnvoyView = new b.Views.AboutEnvoySummary({ bOnOverview: !0 })),
                  b.loaderBar.setConcernedList([{ id: "EnchargeRelayGet" }, { id: "EnchargeRelaySet" }, { id: "EnsembleInventory" }, { id: "Home" }, { id: "Inventory" }, { id: "TunnelStateGet" }]))
                : ((this.moreView = new b.Views.MorePage()),
                  b.inventory.poll(),
                  b.agfProfiles.poll(),
                  "" != EnvoyBackboneApp.profile_status_interval && b.inventory.pollProfileStatus(),
                  b.loaderBar.setConcernedList([
                      { id: "EnchargeRelayGet" },
                      { id: "EnchargeRelaySet" },
                      { id: "EnsembleInventory" },
                      { id: "Home" },
                      { id: "Inventory" },
                      { id: "NewScanGet" },
                      { id: "ProfileStatus" },
                      { id: "SystemReadingStats" },
                      { id: "TunnelStateGet" },
                  ]),
                  (this.systemAlertsView = new b.Views.SystemAlertsView()));
            return this;
        },
        render: function () {
            var a = this.template({ model: this.model.toJSON(), showAboutEnvoyView: b.isPublic() });
            this.$el.html(a);
            a = b.systemReadingStats.productionData("meters");
            b.showInternalMeters() || void 0 == a || ("pmus" != a.type && "rgms" != a.type)
                ? void 0 != this.powerEnergyView && this.assign(this.powerEnergyView, ".power_energy_summary")
                : void 0 != this.extMeterView && this.assign(this.extMeterView, ".power_energy_summary");
            void 0 != this.storageSummaryView && this.assign(this.storageSummaryView, ".storage_summary");
            this.assign(this.monitoringView, ".monitoring_summary");
            this.assign(this.wirelessConnectionView, ".wireless_connection_summary");
            void 0 != this.microinvertersView && this.assign(this.microinvertersView, ".microinverters_summary");
            void 0 != this.enpowersView && this.assign(this.enpowersView, ".enpowers_summary");
            void 0 != this.acBatteriesView && this.assign(this.acBatteriesView, ".ac_batteries_summary");
            void 0 != this.enchargeBatteriesView && this.assign(this.enchargeBatteriesView, ".encharge_batteries_summary");
            b.showNsrItems() && void 0 != this.nsrView && this.assign(this.nsrView, ".nsr_summary");
            void 0 != this.aboutEnvoyView && this.assign(this.aboutEnvoyView, ".about_envoy_summary");
            void 0 != this.supportConnection && this.assign(this.supportConnection, ".support_connection_summary");
            void 0 != this.systemAlertsView && (this.assign(this.systemAlertsView, ".system_alerts"), this.systemAlertsView.render());
            void 0 != this.moreView && (this.assign(this.moreView, ".more_items"), this.moreView.render());
            void 0 != this.systemView && (this.assign(this.systemView, ".system"), this.$el.find(".system").addClass("list-group"), this.systemView.render());
            return this;
        },
        close: function () {
            this.remove();
            this.stopListening(b.productionInfo);
            b.mediator.off(null, null, this);
            this.unbind();
            this.monitoringView.close();
            this.wirelessConnectionView.close();
            this.powerEnergyView.close();
            void 0 != this.storageSummaryView && this.storageSummaryView.close();
            void 0 != this.moreView && this.moreView.close();
            void 0 != this.microinvertersView && this.microinvertersView.close();
            void 0 != this.enpowersView && this.enpowersView.close();
            void 0 != this.acBatteriesView && this.acBatteriesView.close();
            void 0 != this.enchargeBatteriesView && this.enchargeBatteriesView.close();
            void 0 != this.aboutEnvoyView && this.aboutEnvoyView.close();
            void 0 != this.supportConnection && this.supportConnection.close();
            void 0 != this.systemAlertsView && this.systemAlertsView.close();
            void 0 != this.systemView && this.systemView.close();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.PowerEnergySummary = Backbone.View.extend({
        className: "power_energy_summary",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["overview/power_energy_summary"];
            this.model = b.systemReadingStats;
            this.inverterDataAccordion = a.inverterDataAccordion;
            this.inverterProductionExpanded = !1;
            this.listenTo(this.model, "change", this.render);
        },
        events: { "show.bs.collapse #show_inverter_production": "toggleInverterProductionExpanded", "hide.bs.collapse #show_inverter_production": "toggleInverterProductionExpanded" },
        render: function () {
            var a = b.systemReadingStats.productionData("inverters"),
                a = this.template({ inverterData: a, inverterProductionExpanded: this.inverterProductionExpanded, inverterDataAccordion: this.inverterDataAccordion });
            this.$el.html(a);
            return this;
        },
        toggleInverterProductionExpanded: function (a) {
            this.inverterProductionExpanded = "show" == a.type;
        },
        close: function () {
            this.remove();
            this.stopListening(this.model);
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.StorageSummary = Backbone.View.extend({
        className: "storage_summary",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["overview/storage_summary"];
            this.model = b.systemReadingStats;
            this.listenTo(b.envoyModel, "change:detected_acb_count", this.checkHasBatteries);
            this.listenTo(this.model, "change", this.render);
            this.hasBatteries = 0 < b.envoyModel.get("detected_acb_count");
        },
        render: function () {
            var a = b.systemReadingStats.storageData(),
                a = this.template({ hasBatteries: this.hasBatteries, isPublic: b.isPublic(), storageData: a });
            this.$el.html(a);
            return this;
        },
        checkHasBatteries: function () {
            (void 0 == this.hasBatteries || 0 == this.hasBatteries) && (this.hasBatteries = 0 < b.envoyModel.get("detected_acb_count")) && this.render();
        },
        close: function () {
            this.remove();
            this.stopListening(this.model);
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.SupportConnectionConfig = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["more/support_connection"];
            this.model = b.envoyModel;
            this.newState = 1 == this.model.bSupportConnectionOpen ? "close" : "open";
            this.listenTo(this.model, "change:bSupportConnectionOpen", this.render);
            this.model.startPollingSupportConnectionState();
            return this;
        },
        events: { "click button.open_connection": "openConnection", "click button.close_connection": "closeConnection" },
        render: function () {
            this.newState = 1 == this.model.get("bSupportConnectionOpen") ? "close" : "open";
            var a = this.template({ isLoading: void 0 == this.model.get("bSupportConnectionOpen"), newState: this.newState });
            this.$el.html(a);
            return this;
        },
        openConnection: function (a) {
            this.model.openSupportConnection();
        },
        closeConnection: function (a) {
            this.model.closeSupportConnection();
        },
        close: function () {
            this.model.stopPollingSupportConnectionState();
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.System = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["overview/system"];
            this.model = b.envoyModel;
            b.mediator.on("system:setPowerMode", this.setPowerMode, this);
            b.mediator.on("confirmSetting:hide", this.render, this);
            this.listenTo(this.model, "change:powerForcedOff", this.render, this);
            return this;
        },
        events: { "click .switch": "handlePowerMode" },
        render: function () {
            var a = this.template({ model: this.model.toJSON() });
            this.$el.html(a);
            return this;
        },
        handlePowerMode: function () {
            var a = this.model.get("powerForcedOff") ? I18n.t("envoy_backbone.system.power_control.modal.desc_set_on") : I18n.t("envoy_backbone.system.power_control.modal.desc_set_off"),
                a = a + " " + I18n.t("envoy_backbone.system.power_control.modal.verify");
            b.confirmSettingModal.updateModalType(I18n.t("envoy_backbone.system.power_control.modal.title"), a, "system:setPowerMode");
            b.mediator.trigger("confirmSetting:show");
        },
        setPowerMode: function () {
            var a = this.model.get("powerForcedOff");
            this.model.setPowerForceMode(!a);
        },
        updatePowerModeUI: function () {
            this.model.get("powerForcedOff") ? this.$el.find("#power_text").html(I18n.t("envoy_backbone.power.not_producing")) : this.$el.find("#power_text").html(I18n.t("envoy_backbone.power.producing"));
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.SystemAlertsView = Backbone.View.extend({
        className: "system_alerts",
        tagName: "div",
        initialize: function () {
            this.template = JST["overview/system_alerts"];
            this.model = b.envoyModel;
            this.listenTo(this.model.alerts, "add remove change", this.render);
            this.listenTo(this.model, "change:inverters_update_status", this.render);
        },
        events: { "click .stick .alert": "acknowledgeAlert" },
        render: function () {
            this.$el.html(this.template({ alerts: this.model.alerts, inverters_update_status: "satisfied" }));
            $(window).scroll(this.sticky_relocate);
            this.sticky_relocate();
            return this;
        },
        acknowledgeAlert: function (a) {
            a = this.model.alerts.findWhere({ key: a.currentTarget.id });
            a.set("acknowledged", !0);
            this.model.alerts.set(a, { remove: !1 });
        },
        sticky_relocate: function () {
            var a = $(window).scrollTop(),
                b = $("#sticky-anchor");
            void 0 != b &&
                $(b).is("div") &&
                ((b = b.offset()),
                void 0 != b &&
                    (a > b.top - 1
                        ? ($("#fixed").css({ opacity: 0 }),
                          $("#sticky").css({ opacity: 1 }),
                          $("*#circle_icon").each(function (a) {
                              $(this).addClass("remove_2");
                          }))
                        : ($("#fixed").css({ opacity: 1 }),
                          $("#sticky").css({ opacity: 0 }),
                          $("*#circle_icon").each(function (a) {
                              $(this).removeClass("remove_2");
                          }))));
        },
        close: function () {
            this.remove();
            this.stopListening(this.model);
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.WirelessConnectionSummary = Backbone.View.extend({
        className: "wireless_connection_summary",
        tagName: "div",
        initialize: function (a) {
            this.envoyModel = b.envoyModel;
            this.template = JST["overview/wireless_connection_summary"];
            this.listenTo(this.envoyModel, "change:encharge_batteries_comm_level change:enpower_comm_level", this.render);
        },
        render: function () {
            var a = this.envoyModel.getEnsembleCommLevel();
            this.$el.html(this.template({ comm_level: Math.round(a), device_count: b.encharge_batteries.length + b.enpowers.length }));
            return this;
        },
        close: function () {
            this.remove();
            this.stopListening(this.envoyModel);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.PleaseWaitModal = Backbone.View.extend({
        className: "modal-dialog",
        tagName: "div",
        wait_text: " ",
        initialize: function () {
            this.template = JST.please_wait;
            this.setElement($("#please_wait"));
            b.mediator.on("app:domReady", this.createModal, this);
            b.mediator.on("pleaseWait:show", this.showPleaseWait, this);
            b.mediator.on("pleaseWait:hide", this.hidePleaseWait, this);
        },
        render: function () {
            this.setElement($("#please_wait"));
            var a = this.template({ wait_text: this.wait_text });
            this.$el.html(a);
            return this;
        },
        createModal: function () {
            this.render();
            $("#please_wait").modal({ show: !1 });
        },
        setWaitText: function (a) {
            this.wait_text = a;
        },
        showPleaseWait: function () {
            this.render();
            $("#please_wait").modal("show");
            window.scrollTo(0, 0);
        },
        hidePleaseWait: function () {
            this.render();
            $("#please_wait").modal("hide");
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.PMUDetail = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["meters/pmu_detail"];
            this.model = b.pmus.findWhere({ id: a.meter_id, state: "associated" });
            void 0 != this.model && this.listenTo(this.model, "change", this.render);
            b.mediator.on("meters:PMUUpdateComplete", this.redirectToMain, this);
            b.mediator.on("meters:PMUUpdateFailed", this.turnOffLoader, this);
            b.pmus.poll();
            b.loaderBar.setConcernedList([{ id: "PMUGet" }]);
            this.isLoading = !1;
            return this;
        },
        events: { "click .submit": "submitForm" },
        render: function () {
            if (void 0 == this.model || "associated" != this.model.get("state")) b.router.navigate("meters", { trigger: !0 });
            else {
                var a = this.template({ model: this.model.toJSON(), isLoading: this.isLoading });
                this.$el.html(a);
            }
            return this;
        },
        submitForm: function (a) {
            a.preventDefault();
            void 0 != this.model.get("ip") && ((this.isLoading = !0), this.render(), b.pmus.updatePMUs("remove", [this.model.get("ip")]));
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            this.stopListening(this.model);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.PMUOverview = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["meters/pmu_overview"];
            this.collection = b.pmus;
            this.listenTo(this.collection, "add", this.render);
            this.listenTo(this.collection, "remove", this.render);
            b.loaderBar.setConcernedList([{ id: "PMUGet" }]);
            b.pmus.poll();
            return this;
        },
        render: function () {
            var a = [];
            0 < this.collection.where({ state: "associated" }).length &&
                (a = _.map(this.collection.where({ state: "associated" }), function (a) {
                    return a.toJSON();
                }));
            a = this.template({ associated_pmus: a });
            this.$el.html(a);
            return this;
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            this.stopListening(this.collection);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.PubTariff = Backbone.View.extend({
        tagName: "div",
        initialize: function (a) {
            this.options = a;
            this.template = JST["tariff/pub_tariff"];
            this.tariff_set = b.tariff.tariffStructIsSet();
            this.tariffView = new b.Views.TariffRate({ className: "tariff_rate" });
            this.model = b.envoyModel;
            this.collection_type = a.collection_type;
            this.collection = b[this.collection_type];
            b.mediator.on("profiles:loaded", this.render, this);
            b.mediator.on("tariff_rate:model_update", this.render, this);
            b.mediator.on("tariff:getComplete", this.updateLoader, this);
            this.isLoading = !0;
            this.editingTariff = this.isSettingProfile = !1;
            b.mediator.on("agfProfiles:rateStructureUpdated", this.updateFormProfile, this);
            b.mediator.on("agfProfiles:dataFetch_success", this.dataFetchSuccess, this);
            b.mediator.on("agfProfiles:dataFetch_failed", this.dataFetchFailed, this);
            return this;
        },
        events: { "click .edit": "tariffEdit", "click .cancel": "cancelSetGridProfile", "submit form#profile_set": "setTariff", "change select.profile_select": "selectingProfile" },
        render: function () {
            $(".tariff_select").select2("close");
            var a = b.ac_batteries.getActiveDevices();
            this.$el.html(
                this.template({
                    title_text: "envoy_backbone.overview.new_microinverter_counts.total.counting_" + this.collection.attrs.alias,
                    batteries: a,
                    isLoading: this.isLoading,
                    app: b,
                    model: this.model.toJSON(),
                    collection_type: this.collection_type,
                    editing: this.editingTariff,
                    tariff_set: b.tariff.tariffStructIsSet(),
                })
            );
            this.$el.find("#profile_select").select2({ placeholder: I18n.t("envoy_backbone.forms.select_prompt"), minimumResultsForSearch: Infinity });
            this.$el.addClass("no-select content");
            this.assign(this.tariffView, ".tariff_rate");
            this.tariffView.render();
            return this;
        },
        updateFormProfile: function () {
            this.render();
            this.isSettingProfile = !1;
        },
        updateLoader: function () {
            this.isLoading = !1;
            this.render();
        },
        tariffEdit: function (a) {
            this.editingTariff = !0;
            b.mediator.trigger("tariff:edit");
            this.render();
        },
        cancelSetGridProfile: function (a) {
            a.preventDefault();
            this.editingTariff = b.wifiDoingScaryStuff = !1;
            b.mediator.trigger("tariff:cancelEditing");
            this.render();
        },
        updatePeakLabel: function (a) {
            $("#peak_label").text(I18n.l("time.formats.hour_meridian", "2009-09-18 " + a.value.newValue + ":12:43"));
        },
        clearError: function () {
            this.$el.find("#profile_select-error").remove();
        },
        setInfoButtonVisiblity: function (a) {
            a = this.$el.find("form #profile_select option:selected").val();
            void 0 != a && "" != a ? this.$el.find(".pprofile").removeClass("hidden") : this.$el.find(".pprofile").addClass("hidden");
        },
        dataFetchSuccess: function () {
            this.$el.find(".pprofile").removeClass("preloader preloader_sm");
            this.$el.find(".pprofile").addClass("btn btn-primary btn-envoy");
            this.$el.find("#profile_select").prop("disabled", !1);
            this.isLoading = !1;
        },
        dataFetchFailed: function () {
            this.$el.find(".pprofile").removeClass("preloader preloader_sm");
            this.$el.find(".pprofile").addClass("btn btn-primary btn-envoy");
            this.$el.find("#profile_select").prop("disabled", !1);
            this.isLoading = !1;
        },
        setTariff: function (a) {
            a.preventDefault();
            this.isSettingProfile = !0;
            this.editingTariff = !1;
            1 == $("form#profile_set").validate({ errorClass: "has-error" }).form()
                ? (this.tariffView.setTariffData(!0), (b.wifiDoingScaryStuff = !1), b.mediator.trigger("profiles:hide_propagation_data"), this.render())
                : "tou" == this.$el.find("form #tariff_select option:selected").val() &&
                  _.each(EnvoyBackboneApp.tariff.activeCollection.models, function (a) {
                      _.each(a.get("days"), function (a) {
                          2 >= a.periods.length && b.mediator.trigger("profiles:validation_failed");
                      });
                  });
        },
        close: function () {
            this.tariffView.close();
            this.remove();
            this.unbind();
            b.mediator.off(null, null, this);
            b.wifiDoingScaryStuff = !1;
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.PublicFooterNavBar = Backbone.View.extend({
        initialize: function (a) {
            this.template = JST.public_footer_nav_bar;
            b.mediator.on("app:domReady", this.render, this);
            return this;
        },
        render: function () {
            this.setElement($("#public-footer"));
            var a = new Date(),
                c;
            b.isPublic() && (c = b.getInstallerUrl());
            this.$el.html(this.template({ current_year: a.getFullYear(), installer_login_link: c }));
            return this;
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.PublicHeaderNavBar = Backbone.View.extend({
        initialize: function (a) {
            this.template = JST.public_header_nav_bar;
            this.language_options = [
                { name: "English-US", locale: "en-US" },
                { name: "English-Great Britain", locale: "en-GB" },
                { name: "English-Canada", locale: "en-CA" },
                { name: "English-Australia", locale: "en-AU" },
                { name: "English-New Zealand", locale: "en-NZ" },
                { name: "Deutsch", locale: "de" },
                { name: "Espa\u00f1ol", locale: "es" },
                { name: "Fran\u00e7ais", locale: "fr" },
                { name: "Italiano", locale: "it" },
                { name: "Nederlands", locale: "nl" },
            ];
            b.mediator.on("app:domReady", this.render, this);
            return this;
        },
        render: function () {
            this.setElement($("#public-header"));
            this.current_language = _.find(this.language_options, function (a) {
                return a.locale == I18n.locale;
            });
            this.$el.html(this.template({ isPublic: b.isPublic(), language_options: this.language_options, current_language: this.current_language }));
            return this;
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.PubManageBatteries = Backbone.View.extend({
        tagName: "div",
        initialize: function (a) {
            this.template = JST["shared/public_manage_batteries"];
            this.isLoading = !0;
            this.collection_type = a.collection_type;
            this.collection = b[this.collection_type];
            b.mediator.on("batteries:SetToSleepStart", this.turnOnLoader, this);
            b.mediator.on("batteries:CancelSleepStart", this.turnOnLoader, this);
            b.mediator.on("inventory:BatteryInvUpdated", this.turnOffLoader, this);
            b.mediator.on("batteries:GotSleepModeData", this.turnOffLoader, this);
            "ac_batteries" == this.collection_type
                ? b.loaderBar.setConcernedList([{ id: "AcbSetSleepMode" }, { id: "Inventory" }])
                : "encharge_batteries" == this.collection_type && b.loaderBar.setConcernedList([{ id: "EnchargeSetSleepMode" }, { id: "EnsembleInventory" }]);
            this.listenTo(this.collection, "change:sleep_enabled change:sleeping", this.turnOffLoader, this);
            this.poll();
            return this;
        },
        events: { "click #manageSubmit": "submitForm", "click #sleepSubmit": "showSleepPrompt", "click #cancel_sleep": "showCancelSleepPrompt", "click .manage_device_header": "toggleFlaggedForChange" },
        render: function () {
            var a = this.collection.getActiveDevices();
            this.$el.html(this.template({ title_text: "envoy_backbone.overview.new_microinverter_counts.total.counting_" + this.collection.attrs.alias, batteries: a, isLoading: this.isLoading }));
            return this;
        },
        poll: function () {
            this.collection.poll();
            this.collection.getSleepData();
        },
        showSleepPrompt: function () {
            var a = !1;
            _.each(this.collection.models, function (b) {
                if (1 == b.get("isFlaggedForDelete")) return (a = !0), !1;
            });
            a && b.mediator.trigger("showSleepPromptModal", { collection_type: this.collection_type });
        },
        showCancelSleepPrompt: function (a) {
            a = $(a.target).first().closest("#cancel_sleep");
            void 0 != a &&
                (a = this.collection.findWhere({ id: $(a).attr("data-device-id") })) &&
                (a.set({ isFlaggedForCancelSleep: !0 }), a.set({ cancelMode: "cancel" }), b.mediator.trigger("showSleepCancelModal", { collection_type: "ac_batteries " }));
        },
        toggleFlaggedForChange: function (a) {
            a = $(a.target).first().closest(".manage_device_header");
            if (void 0 != a) {
                var b = this.collection.findWhere({ id: $(a).attr("data-device-id") });
                if (b) {
                    var d = $(a).find(".glyphicons").hasClass("unchecked");
                    b.set({ isFlaggedForDelete: d });
                    1 == d ? $(a).find(".glyphicons").removeClass("unchecked").addClass("check") : $(a).find(".glyphicons").removeClass("check").addClass("unchecked");
                }
            }
        },
        turnOffLoader: function () {
            this.isLoading = !1;
            this.render();
        },
        turnOnLoader: function () {
            this.isLoading = !0;
            this.render();
        },
        evaluateEnter: function (a) {
            13 == a.keyCode && this.searchList(a);
        },
        close: function () {
            this.remove();
            this.unbind();
            b.mediator.off(null, null, this);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.Report = Backbone.View.extend({
        initialize: function (a) {
            b.showInternalMeters() && (this.meters = !1);
            return this;
        },
        gotAllResponses: function () {
            var a = { ready: EnvoyBackboneApp.endpointTracker.gotAllResponses("report") };
            return JSON.stringify(a);
        },
        generateReport: function () {
            var a = {
                    reportDataComplete: "",
                    serial: BackboneConfig.serial,
                    sw_version: BackboneConfig.software_version,
                    envoy_type: BackboneConfig.envoy_type,
                    connection_type: null,
                    last_report_date: null,
                    software_build_date: null,
                    db_size: null,
                    db_percent_full: null,
                    timezone: null,
                },
                c = b.network.get("primary_network");
            a.connection_type = void 0 != c && "" != c ? I18n.t("envoy_backbone.network.network_configuration.types." + c) : I18n.t("envoy_backbone.network.network_configuration.types.none");
            c = b.network.get("lastReportDate");
            void 0 != c && "" != c && (a.last_report_date = b.network.get("lastReportDate").getTime());
            c = b.envoyModel.get("software_build_epoch").getTime();
            void 0 != c && (a.software_build_date = c);
            c = b.envoyModel.get("db_size");
            void 0 != c && (a.db_size = c);
            c = b.envoyModel.get("db_percent_full");
            void 0 != c && (a.db_percent_full = c);
            c = b.envoyModel.get("timezone");
            void 0 != c && (a.timezone = c);
            c = b.tariff.get("tariff_struct");
            a.tariff_rate_structure =
                "flat" == c ? I18n.t("envoy_backbone.tariff.single_rate") : "tou" == c ? I18n.t("envoy_backbone.tariff.time_of_use") : "tiered" == c ? I18n.t("envoy_backbone.tariff.tiered") : I18n.t("envoy_backbone.tariff.not_set");
            a.agf_reports = {};
            c = b.agfProfiles.getSelectedProfile();
            void 0 != c && ((a.agf_reports.profile_id = c.get("profile_id")), (a.agf_reports.profile_name = c.get("profile_name")), (a.agf_reports.profile_data = c.get("profileData")));
            a.agf_reports.propagation_statuses = {};
            _.each([0, 1, 2, 3, 4, 5, 6], function (b) {
                a.agf_reports.propagation_statuses[b] = I18n.t("envoy_backbone.profiles.tpm_state." + b);
            });
            a.meters = {};
            void 0 != b.meters &&
                _.each(b.meters.where(), function (c) {
                    var e = c.get("measurementType");
                    "production" != e && (e = "consumption");
                    a.meters[e] = {};
                    var g = a.meters[e];
                    g.eid = c.id;
                    g.state = c.get("state");
                    g.metering_status = I18n.t("envoy_backbone.meters.meter_status." + c.get("meteringStatus"));
                    var f = c.get("phaseMode");
                    g.phase_mode = I18n.t("envoy_backbone.meters.meter_mode." + f);
                    "three" == f && ((f = null == c.get("phaseCount") ? 0 : c.get("phaseCount")), (g.phase_count = I18n.t("envoy_backbone.meters.multi_phase_options.mphase_" + f)));
                    var f = c.get("statusFlags"),
                        k = [];
                    _.each(f, function (a) {
                        k.push(I18n.t("envoy_backbone.meters.meter_status.status_flags." + a));
                    });
                    g.status_flags = k;
                    "enabled" == c.get("state") &&
                        ((f = "production" != e ? _.findWhere(b.systemReadingStats.get(e), { type: "eim", measurementType: "total-consumption" }) : _.findWhere(b.systemReadingStats.get(e), { type: "eim" })),
                        void 0 != f && void 0 != f.whLifetime && (g.lifetime_energy = f.whLifetime.formatted + " " + f.whLifetime.units),
                        "production" != e && (g.consumption_type = I18n.t("envoy_backbone.meters.meter_type_verbose." + c.get("measurementType"))));
                });
            a.microinverters = [];
            _.each(b.microinverters.where(), function (b) {
                if (void 0 != b.get("admin_state") && "deleted" != b.get("admin_state")) {
                    var c = { serial: b.id, part_number: b.get("part_number"), profile_status: b.get("profile_status"), device_record_type: b.get("device_record_type"), lr_date: 0, lr_watts: 0 };
                    void 0 != b.get("last_report_date") && "" != b.get("last_report_date") && ((c.lr_date = b.get("last_report_date").getTime()), (c.lr_watts = b.get("last_interval_watts")));
                    a.microinverters.push(c);
                }
            });
            a.ac_batteries = [];
            _.each(b.ac_batteries.where(), function (b) {
                if (void 0 != b.get("admin_state") && "deleted" != b.get("admin_state")) {
                    var c = { serial: b.id, part_number: b.get("part_number"), profile_status: b.get("profile_status"), device_record_type: b.get("device_record_type"), lr_date: 0, lr_watts: 0 };
                    void 0 != b.get("last_report_date") && "" != b.get("last_report_date") && ((c.lr_date = b.get("last_report_date").getTime()), (c.lr_watts = b.get("signed_last_interval_watts")));
                    c.percent_charge = b.get("percentFull");
                    a.ac_batteries.push(c);
                }
            });
            a.nsrs = [];
            _.each(b.nsrs.where(), function (b) {
                if (void 0 != b.get("admin_state") && "deleted" != b.get("admin_state")) {
                    var c = { serial: b.id, part_number: b.get("part_number"), profile_status: b.get("profile_status"), device_record_type: "AGF", lr_date: 0 };
                    c.lr_date = b.get("last_report_date").getTime();
                    c.relay = b.get("relay");
                    a.nsrs.push(c);
                }
            });
            a.reportDataComplete = this.gotAllResponses();
            return JSON.stringify(a);
        },
        previewReport: function () {
            var a = { agf_reports: {} },
                c = b.agfProfiles.get(b.agfProfiles.previewSelectedProfile);
            if (void 0 != c) {
                var d = c.get("detailStatus");
                return void 0 == d || "success" == d ? ((a.agf_reports.profile_id = c.get("profile_id")), (a.agf_reports.profile_name = c.get("profile_name")), (a.agf_reports.profile_data = c.get("profileData")), JSON.stringify(a)) : d;
            }
            return "None Selected";
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.setCurrentCTModal = Backbone.View.extend({
        className: "modal-dialog",
        tagName: "div",
        initialize: function (a) {
            this.template = JST.set_current_ct_modal;
            this.setElement($("#set_current_ct_modal"));
            this.model = b.envoyModel;
            this.currentSettingType = "";
            b.mediator.on("app:domReady", this.createModal, this);
            b.mediator.on("showSetCurrentCTModal", this.updateCurrentTypeClicked, this);
        },
        events: { "click .close": "cancelModal", "click .btn-primary": "okModal" },
        render: function () {
            this.setElement($("#set_current_ct_modal"));
            var a = this.template({ currentSettingType: this.currentSettingType });
            this.$el.html(a);
            return this;
        },
        okModal: function (a) {
            this.removeCurrentSettings();
            b.mediator.trigger("SetCurrentCT:removeCheckBoxCT", this.currentSettingType);
        },
        removeCurrentSettings: function () {
            $("#set_current_ct_modal").modal("hide");
        },
        updateCurrentTypeClicked: function (a) {
            this.currentSettingType = a.currentTarget.id;
            this.showModal();
        },
        createModal: function () {
            this.render();
            $("#set_current_ct_modal").modal({ show: !1 });
        },
        showModal: function () {
            this.render();
            $("#set_current_ct_modal").modal("show");
        },
        cancelModal: function () {
            $("#set_current_ct_modal").modal("hide");
        },
        close: function () {
            this.remove();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.SetMicroinverterCount = Backbone.View.extend({
        className: "modal-dialog",
        tagName: "div",
        initialize: function () {
            this.template = JST.set_microinverter_count;
            this.setElement($("#set_microinverter_count"));
            this.model = b.envoyModel;
            b.mediator.on("app:domReady", this.createModal, this);
            b.mediator.on("app:showMicroinverterCountModal", this.showMicroinverterCountModal, this);
        },
        events: { "click .btn-primary": "updateMicroinverterCount", "keypress #target_microinverter_count": "evaluateEnter", "keypress #target_acb_count": "evaluateEnter", "keypress #target_nsr_count": "evaluateEnter" },
        render: function () {
            this.setElement($("#set_microinverter_count"));
            this.$el.html(
                this.template({ target_microinverter_count: b.target_microinverter_count, showAcbInput: b.showInternalMeters(), target_acb_count: b.target_acb_count, target_nsr_count: b.target_nsr_count, showNsrInput: b.showNsrItems() })
            );
            return this;
        },
        close: function () {
            this.remove();
        },
        createModal: function () {
            this.render();
            $("#set_microinverter_count").modal({ show: !1 });
        },
        evaluateEnter: function (a) {
            13 === a.which && this.updateMicroinverterCount(a);
        },
        showMicroinverterCountModal: function () {
            this.$el.find(".form-group").removeClass("has-error");
            this.$el.find(".form-group .alert").addClass("hidden");
            this.render();
            $("#set_microinverter_count").modal("show");
        },
        updateMicroinverterCount: function (a) {
            a.preventDefault();
            if (1 == $("#set_microinverter_count form").validate({ errorClass: "has-error" }).form()) {
                a = parseInt(this.$el.find("input#target_microinverter_count").val());
                var c = 0;
                b.showInternalMeters() && (c = parseInt(this.$el.find("input#target_acb_count").val()));
                var d = 0;
                b.showNsrItems() && (d = parseInt(this.$el.find("input#target_nsr_count").val()));
                b.updateTargetCounts(a, c, d);
                this.$el.find(".form-group");
                $("#set_microinverter_count").modal("hide");
                setTimeout(function () {
                    window.scrollTo(document.body.scrollLeft, document.body.scrollTop);
                }, 500);
            }
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.SetPhase = Backbone.View.extend({
        className: "modal-dialog",
        tagName: "div",
        initialize: function () {
            this.template = JST.set_phase;
            this.setElement($("#select_phase"));
        },
        events: { "click .btn-primary": "updateSelectedPhase", "click .btn-default": "cancel", "keypress #target_microinverter_count": "evaluateEnter", "keypress #target_acb_count": "evaluateEnter" },
        render: function () {
            this.setElement($("#select_phase"));
            var a = !1,
                b = 0;
            void 0 != EnvoyBackboneApp.meters &&
                void 0 != EnvoyBackboneApp.meters.findWhere({ type: "eim_production" }) &&
                void 0 != EnvoyBackboneApp.meters.findWhere({ type: "eim_consumption" }) &&
                (a = "enabled" == EnvoyBackboneApp.meters.findWhere({ type: "eim_production" }).get("state") && "enabled" == EnvoyBackboneApp.meters.findWhere({ type: "eim_consumption" }).get("state")) &&
                (b = EnvoyBackboneApp.meters.findWhere({ type: "eim_production" }).get("phaseCount"));
            this.$el.html(this.template({ id: this.model.id, phaseCount: b }));
            return this;
        },
        close: function () {
            this.remove();
        },
        createModal: function () {
            this.render();
            $("#select_phase").modal({ show: !1 });
        },
        evaluateEnter: function (a) {
            13 === a.which && this.updateSelectedPhase(a);
        },
        showSelectPhaseModal: function (a) {
            this.$el.find(".form-group").removeClass("has-error");
            this.$el.find(".form-group .alert").addClass("hidden");
            this.model = a;
            this.render();
            $("#select_phase").modal("show");
        },
        updateSelectedPhase: function (a) {
            a.preventDefault();
            1 == $("#select_phase form").validate({ errorClass: "has-error" }).form() && ((a = $(".set-phase-select").val()), this.model.updatePhase(a), $("#select_phase").modal("hide"));
        },
        cancel: function (a) {
            $("#select_phase").modal("hide");
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.CommsDetails = EnvoyBackboneApp.Views.DeviceList.extend({
        tagName: "div",
        initialize: function (a) {
            this.comm_state = this.options.comm_state;
            this.panel_id = this.options.panel_id;
            this.collection_type = a.collection_type;
            return this;
        },
        events: function () {
            return _.extend({}, EnvoyBackboneApp.Views.DeviceList.prototype.events, {});
        },
        render: function () {
            var a = EnvoyBackboneApp[this.collection_type].getActiveDevices();
            this.collection = _.sortBy(_.where(a, { communicating: this.comm_state }), function (a) {
                return a.id;
            });
            this.is_comm_list = !0;
            b.Views.CommsDetails.__super__.render.call(this);
            return this;
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.CommsPage = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["shared/comms_main"];
            this.model = b.envoyModel;
            this.nav_options = a.nav_options;
            this.active_nav = a.active_nav;
            b.mediator.on("app:targetCountUpdated", this.updateCount, this);
            b.mediator.on("inventory:InvUpdated", this.updateCount, this);
            this.collection_type = a.collection_type;
            this.collection = b[this.collection_type];
            this.listenTo(this.model, "change:" + this.collection.attrs.envoyModelCommCount, this.render);
            b.mediator.on(this.collection.attrs.eventCommLevel, this.render, this);
            this.subNavView = new b.Views.DeviceSubNavBar({ collection_type: this.collection_type, nav_options: this.nav_options, active_nav: this.active_nav, sub_name: "status" });
            this.CommListView = new b.Views.CommsDetails({ collection_type: this.collection_type, className: "communicating-list", comm_state: !0, panel_id: "communicating_panel" });
            this.NotCommListView = new b.Views.CommsDetails({ collection_type: this.collection_type, className: "not-communicating-list", comm_state: !1, panel_id: "not_communicating_panel" });
            return this;
        },
        events: { "click .communicating_list_header .accordion-toggle": "updatePageState", "click .not_communicating_list_header .accordion-toggle": "updatePageState" },
        render: function () {
            var a = EnvoyBackboneApp[this.collection_type].getActiveDevices(),
                a = _.where(a, { communicating: !1 }),
                a = this.template({
                    collection_type: this.collection_type,
                    not_communicating_count: a.length,
                    communicating_count: this.model.get(this.collection.attrs.envoyModelCommCount),
                    target_count: b[this.collection.attrs.appTargetCount],
                    communicatingOpen: b.page_states["communicating" + this.collection.attrs.collectionPascalized + "Open"],
                    notcommunicatingOpen: b.page_states["notcommunicating" + this.collection.attrs.collectionPascalized + "Open"],
                });
            this.$el.html(a);
            this.assign(this.subNavView, "#status_navbar");
            this.assign(this.CommListView, ".communicating-list");
            this.CommListView.render();
            this.assign(this.NotCommListView, ".not-communicating-list");
            this.NotCommListView.render();
            return this;
        },
        updatePageState: function (a) {
            a = $(a.target).closest("a");
            void 0 != a && ((a = a.attr("data-page-state-element") + this.collection.attrs.collectionPascalized + "Open"), (b.page_states[a] = !b.page_states[a]));
        },
        updateCount: function () {
            var a = this.collection.attrs.envoyModelCommCount,
                c = this.collection.attrs.appTargetCount,
                d = EnvoyBackboneApp[this.collection_type].getActiveDevices(),
                d = _.where(d, { communicating: !1 });
            this.$el.find(".communicating_list_header .counts").html(this.model.get(a));
            this.$el.find(".not_communicating_list_header .counts").html(d.length);
            0 < b[c] && this.model.get(a) >= b[c] ? this.$el.find("#target_glyphicon").addClass("ok_2") : this.$el.find("#target_glyphicon").removeClass("ok_2");
            0 != d.length || $(".not_communicating_list_header a").hasClass("collapsed") || $(".not_communicating_list_header a").click();
            0 != this.model.get("communicating_count") || $(".communicating_list_header a").hasClass("collapsed") || $(".communicating_list_header a").click();
            this.CommListView.render();
            this.NotCommListView.render();
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            this.stopListening(this.collection);
            this.CommListView.close();
            this.NotCommListView.close();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.DeviceCollectionPage = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.collection_type = a.collection_type;
            this.collection = b[a.collection_type];
            this.template = JST["shared/device_collection_main"];
            this.model = b.envoyModel;
            this.hasPowerSummary = a.hasPowerSummary;
            this.hasScan = this.collection.attrs.hasScan;
            b.inventory.pollInverterProduction();
            _.each(this.collection.attrs.triggersForCount, function (a) {
                b.mediator.on(a, this.updateDeviceCount, this);
            });
            this.hasScan && ((this.scanModel = b.scanModel), b.mediator.on("envoy:scanStateChange", this.updateScanState, this), (this.scanView = new b.Views.DetectedScanState({ collection_type: this.collection_type })));
            this.hasPowerSummary && (this.powerEnergyView = new b.Views.PowerEnergySummary({ inverterDataAccordion: !0 }));
            this.primary_nav_options = ["all", "status", "manage"];
            this.setActiveTabs(a.primary_tab, a.secondary_tab);
            b.loaderBar.setConcernedList(this.collection.attrs.concernedRequests);
            return this;
        },
        events: { "show.bs.collapse #device_scan": "setScanViewState", "hide.bs.collapse #device_scan": "setScanViewState" },
        render: function () {
            var a = this.template({
                actual_count: this.model.get(this.collection.attrs.envoyModelDetectedCount),
                collection_alias: this.collection.attrs.alias,
                collection_type: this.collection_type,
                hasPowerSummary: this.hasPowerSummary,
                hasScan: this.hasScan,
                primary_nav_options: this.primary_nav_options,
                primary_tab: this.primary_tab,
                scanViewOpen: b.scanViewOpen,
                total_count: b[this.collection.attrs.appTargetCount],
            });
            this.$el.html(a);
            this.powerEnergyView && this.assign(this.powerEnergyView, ".power_energy_summary");
            this.scanView && (this.updateScanState(), this.assign(this.scanView, ".device_scan_details"), this.scanView.render());
            this.assign(this.subView, ".tab-content");
            this.subView.render();
            return this;
        },
        setActiveTabs: function (a, c) {
            void 0 != a && null != a && _.contains(this.primary_nav_options, a)
                ? ((this.primary_tab = a),
                  "status" == a
                      ? "microinverters" != this.collection_type || b.showProfiles()
                          ? (this.secondary_nav_options = ["comm", "profile", "power"])
                          : (this.secondary_nav_options = ["comm", "power"])
                      : (this.secondary_nav_options = ["active", "deleted"]),
                  void 0 != c && null != c && _.contains(this.secondary_nav_options, c) ? (this.secondary_tab = c) : (this.secondary_tab = this.secondary_nav_options[0]))
                : (this.primary_tab = "all");
            this.subView && this.subView.close();
            "all" == this.primary_tab
                ? (this.subView = new b.Views.DetectedPage({ collection_type: this.collection_type }))
                : "comm" == this.secondary_tab
                ? (this.subView = new b.Views.CommsPage({ nav_options: this.secondary_nav_options, active_nav: this.secondary_tab, collection_type: this.collection_type }))
                : "profile" == this.secondary_tab
                ? (this.subView = new b.Views.ProfilesPage({ nav_options: this.secondary_nav_options, active_nav: this.secondary_tab, collection_type: this.collection_type }))
                : "power" == this.secondary_tab
                ? (this.subView = new b.Views.PowerPage({ nav_options: this.secondary_nav_options, active_nav: this.secondary_tab, collection_type: this.collection_type }))
                : "active" == this.secondary_tab
                ? (this.subView = new b.Views.ManagePage({ nav_options: this.secondary_nav_options, active_nav: this.secondary_tab, collection_type: this.collection_type, active: !0 }))
                : "deleted" == this.secondary_tab && (this.subView = new b.Views.ManagePage({ nav_options: this.secondary_nav_options, active_nav: this.secondary_tab, collection_type: this.collection_type, active: !1 }));
            this.assign(this.subView, ".tab-content");
            this.subView.render();
        },
        updateDeviceCount: function () {
            this.$el
                .find(".page-header .value")
                .html(I18n.t("envoy_backbone.devices.detected_total_count", { detected_count: this.model.get(this.collection.attrs.envoyModelDetectedCount), total_count: b[this.collection.attrs.appTargetCount] }));
        },
        setScanViewState: function (a) {
            b.scanViewOpen = "show" == a.type;
        },
        updateScanState: function () {
            if (this.hasScan) {
                var a = I18n.t("envoy_backbone.devices.device_scan"),
                    c = "";
                b.scanModel.get("inhibited")
                    ? ((a += " " + I18n.t("envoy_backbone.devices.scan_state.scan_inhibited")), (c = I18n.t("envoy_backbone.devices.device_scan_short") + "</br> " + I18n.t("envoy_backbone.devices.scan_state.scan_inhibited")))
                    : b.scanModel.get("suspended")
                    ? ((a += " " + I18n.t("envoy_backbone.devices.scan_state.scan_suspended")), (c = I18n.t("envoy_backbone.devices.device_scan_short") + "</br> " + I18n.t("envoy_backbone.devices.scan_state.scan_suspended")))
                    : b.scanModel.get("active") && b.scanModel.get("disabled")
                    ? ((a += " " + I18n.t("envoy_backbone.devices.scan_state.scan_disabled")), (c = I18n.t("envoy_backbone.devices.device_scan_short") + "</br> " + I18n.t("envoy_backbone.devices.scan_state.scan_disabled")))
                    : b.scanModel.get("active")
                    ? ((a += " " + I18n.t("envoy_backbone.devices.scan_state.active")), (c = I18n.t("envoy_backbone.devices.device_scan_short") + "<br> " + I18n.t("envoy_backbone.devices.scan_state.active")))
                    : ((a += " " + I18n.t("envoy_backbone.devices.scan_state.inactive")), (c = I18n.t("envoy_backbone.devices.device_scan_short") + "</br> " + I18n.t("envoy_backbone.devices.scan_state.inactive")));
                this.$el.find(".device_scan_header .device_scan_title").html(a);
                this.$el.find(".device_scan_button .device_scan_button_title").html(c);
            }
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            this.subView.close();
            this.scanView && this.scanView.close();
            this.powerEnergyView && this.powerEnergyView.close();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.DeviceSubNavBar = Backbone.View.extend({
        initialize: function (a) {
            this.template = JST["shared/device_sub_nav_bar"];
            this.model = b.envoyModel;
            this.collection_type = a.collection_type;
            this.collection = b[a.collection_type];
            this.nav_options = a.nav_options;
            this.sub_name = a.sub_name;
            this.active_nav = a.active_nav;
            "manage" == this.sub_name &&
                ((a = this.collection.attrs.envoyModelDeletedCount), this.listenTo(b.envoyModel, "change:" + this.collection.attrs.envoyModelDetectedCount, this.render), this.listenTo(b.envoyModel, "change:" + a, this.render));
            return this;
        },
        render: function () {
            this.$el.html(
                this.template({
                    active_nav: this.active_nav,
                    nav_options: this.nav_options,
                    sub_name: this.sub_name,
                    collection_type: this.collection_type,
                    collection_route: this.collection.attrs.route,
                    communicating_count: this.model.get(this.collection.attrs.envoyModelCommCount),
                    deleted_count: this.model.get(this.collection.attrs.envoyModelDeletedCount),
                    detected_count: this.model.get(this.collection.attrs.envoyModelDetectedCount),
                    producing_count: this.model.get(this.collection.attrs.envoyModelProducingCount),
                    profile_count: this.model.get(this.collection.attrs.envoyModelProfileCount),
                    target_count: b[this.collection.attrs.appTargetCount],
                    showProfiles: b.showProfiles(),
                })
            );
            return this;
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.ManageDeviceList = Backbone.View.extend({
        tagName: "div",
        initialize: function (a) {
            this.template = JST["shared/manage_device_list"];
            this.showActive = a.active;
            this.collection_type = a.collection_type;
            this.collection = b[a.collection_type];
            this.envoyModel = b.envoyModel;
            b.mediator.on("inventory:InvUpdated", this.render, this);
            b.mediator.on("microinverters:NsrInvUpdated", this.render, this);
            b.mediator.on("microinverters:DeleteComplete", this.turnOffLoader, this);
            b.mediator.on("microinverters:UndeleteComplete", this.turnOffLoader, this);
            b.mediator.on("enpowers:DeleteComplete", this.turnOffLoader, this);
            b.mediator.on("enpowers:UndeleteComplete", this.turnOffLoader, this);
            b.mediator.on("batteries:DeleteComplete", this.turnOffLoader, this);
            b.mediator.on("batteries:UndeleteComplete", this.turnOffLoader, this);
            b.mediator.on("nsrs:DeleteComplete", this.turnOffLoader, this);
            b.mediator.on("nsrs:UndeleteComplete", this.turnOffLoader, this);
            this.listenTo(b.ac_batteries, "change:sleep_enabled change:sleeping", this.render, this);
            this.listenTo(b.encharge_batteries, "change:sleep_enabled change:sleeping", this.render, this);
            this.searchTerm = "";
            this.isLoading = !1;
            return this;
        },
        events: {
            "click #manageSubmit": "submitForm",
            "click #sleepSubmit": "showSleepPrompt",
            "click #cancel_sleep": "showCancelSleepPrompt",
            "click #wake_sleep": "showWakeSleepPrompt",
            "click .manage_device_header": "toggleFlaggedForChange",
            "change #searchDevices": "searchList",
            "click .remove": "clearSearch",
            "submit #filterDevices": "searchList",
            "keypress #filterDevices": "evaluateEnter",
            "click .line_help": "showLineStatusHelp",
        },
        render: function () {
            var a = this.showActive ? this.collection.getActiveDevices() : this.collection.getDeletedDevices(),
                b = this.envoyModel.get("enpower_grid_status").mains_oper_state;
            if ("" != this.searchTerm)
                var d = new RegExp(this.searchTerm, "g"),
                    a = _.filter(a, function (a) {
                        return a.id.match(d);
                    });
            this.$el.html(this.template({ collection_type: this.collection_type, devices: a, is_active_list: this.showActive, isLoading: this.isLoading, searchTerm: this.searchTerm, state_of_grid: b }));
            return this;
        },
        submitForm: function () {
            this.isLoading = !0;
            this.render();
            this.showActive ? this.collection.deleteDevices() : this.collection.undeleteDevices();
        },
        showSleepPrompt: function () {
            var a = !1;
            _.each(b.ac_batteries.models, function (b) {
                if (1 == b.get("isFlaggedForDelete")) return (a = !0), !1;
            });
            _.each(b.encharge_batteries.models, function (b) {
                if (1 == b.get("isFlaggedForDelete")) return (a = !0), !1;
            });
            a && b.mediator.trigger("showSleepPromptModal", { collection_type: this.collection_type });
        },
        showCancelSleepPrompt: function (a) {
            a = $(a.target).first().closest("#cancel_sleep");
            void 0 != a &&
                (a = a = this.collection.findWhere({ id: $(a).attr("data-device-id") })) &&
                (a.set({ isFlaggedForCancelSleep: !0 }), a.set({ cancelMode: "cancel" }), b.mediator.trigger("showSleepCancelModal", { collection_type: this.collection_type }));
        },
        showWakeSleepPrompt: function (a) {
            if ((a = $(a.target).first().closest("#wake_sleep")))
                if ((a = this.collection.findWhere({ id: $(a).attr("data-device-id") })))
                    a.set({ isFlaggedForCancelSleep: !0 }), a.set({ cancelMode: "wake" }), b.mediator.trigger("showSleepCancelModal", { collection_type: this.collection_type });
        },
        showLineStatusHelp: function () {
            b.infoAlertModal.setTitle(I18n.t("envoy_backbone.nsr.line_status_help_title"));
            b.infoAlertModal.setText(I18n.t("envoy_backbone.nsr.line_status_help_text"));
            b.mediator.trigger("info:showInfo");
        },
        toggleFlaggedForChange: function (a) {
            a = $(a.target).first().closest(".manage_device_header");
            if (void 0 != a) {
                var b = this.collection.findWhere({ id: $(a).attr("data-device-id") });
                if (b) {
                    var d = $(a).find(".glyphicons").hasClass("unchecked");
                    1 == this.showActive ? b.set({ isFlaggedForDelete: d }) : b.set({ isFlaggedForUnDelete: d });
                    !0 === d ? $(a).find(".glyphicons").removeClass("unchecked").addClass("check") : $(a).find(".glyphicons").removeClass("check").addClass("unchecked");
                }
            }
        },
        turnOffLoader: function () {
            this.isLoading = !1;
            this.render();
        },
        turnOnLoader: function () {
            this.isLoading = !0;
            this.render();
        },
        evaluateEnter: function (a) {
            13 == a.keyCode && this.searchList(a);
        },
        searchList: function (a) {
            this.$el.find("#searchDevices").focus();
            this.$el.find("#searchDevices").blur();
            this.searchTerm = this.$el.find("#searchDevices").val();
            void 0 != this.searchTerm && (this.searchTerm = this.searchTerm.trim());
            this.render();
        },
        clearSearch: function (a) {
            this.searchTerm = "";
            this.render();
        },
        close: function () {
            this.remove();
            this.unbind();
            b.mediator.off(null, null, this);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.ManagePage = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["shared/manage_devices_main"];
            this.collection_type = a.collection_type;
            this.collection = b[a.collection_type];
            this.model = b.envoyModel;
            this.nav_options = a.nav_options;
            this.active_nav = a.active_nav;
            this.subNavView = new b.Views.DeviceSubNavBar({ collection_type: this.collection_type, nav_options: this.nav_options, active_nav: this.active_nav, sub_name: "manage" });
            this.ManageListView = new b.Views.ManageDeviceList({ collection_type: this.collection_type, className: "device-list", active: a.active });
            return this;
        },
        render: function () {
            var a = this.template({ collection_type: this.collection_type, model: this.model });
            this.$el.html(a);
            this.assign(this.subNavView, "#manage_navbar");
            this.subNavView.render();
            this.assign(this.ManageListView, ".device-list");
            this.ManageListView.render();
            return this;
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            this.ManageListView.close();
            this.stopListening(this.model);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.PowerPage = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["shared/power_main"];
            this.model = b.envoyModel;
            b.mediator.on("app:targetCountUpdated", this.updateCount, this);
            b.mediator.on("inventory:ProducingUpdated", this.updateCount, this);
            b.mediator.on("inventory:InvUpdated", this.updateCount, this);
            this.listenTo(b.envoyModel.alerts, "add remove change", this.render);
            this.collection_type = a.collection_type;
            this.collection = b[this.collection_type];
            this.nav_options = a.nav_options;
            this.active_nav = a.active_nav;
            this.subNavView = new b.Views.DeviceSubNavBar({ collection_type: this.collection_type, nav_options: this.nav_options, active_nav: this.active_nav, sub_name: "status" });
            this.listenTo(this.model, "change:" + this.collection.attrs.envoyModelProducingCount, this.render);
            ("ac_batteries" != this.collection_type && "encharge_batteries" != this.collection_type) ||
                "" == EnvoyBackboneApp.profile_status_interval ||
                (b.inventory.pollProfileStatus(), this.listenTo(this.collection, "change:profile_status", this.render));
            this.showDeviceLink = b.showInverterLink(this.collection_type);
            this.ProducingListView = new b.Views.ProducingDetails({ collection_type: this.collection_type, className: "producing-list", producing_state: !0, panel_id: "producing_panel" });
            this.NotProducingListView = new b.Views.ProducingDetails({ collection_type: this.collection_type, className: "not-producing-list", producing_state: !1, panel_id: "not_producing_panel" });
            return this;
        },
        events: { "click .producing_list_header .accordion-toggle": "updatePageState", "click .not_producing_list_header .accordion-toggle": "updatePageState" },
        render: function () {
            var a = EnvoyBackboneApp[this.collection_type].getActiveDevices(),
                a = _.where(a, { producing: !1 }),
                c = "microinverters" === this.collection_type ? "producing" : "operating",
                d,
                e,
                g;
            if ("ac_batteries" == this.collection_type || "encharge_batteries" == this.collection_type)
                (d = void 0 != b.agfProfiles.getSelectedProfile()),
                    (e = void 0 !== EnvoyBackboneApp.envoyModel.alerts.findWhere({ key: "lwui.home.warnings.both_meter_enabled" })),
                    (g = void 0 !== EnvoyBackboneApp.envoyModel.alerts.findWhere({ key: "lwui.home.warnings.no_phase_assignment" }));
            d = this.template({
                collection_type: this.collection_type,
                not_producing_count: a.length,
                producing_count: this.model.get(this.collection.attrs.envoyModelProducingCount),
                producing_title: "envoy_backbone.power." + c,
                not_producing_title: "envoy_backbone.power.not_" + c,
                target_count: b[this.collection.attrs.appTargetCount],
                producingOpen: b.page_states["producing" + this.collection.attrs.collectionPascalized + "Open"],
                notproducingOpen: b.page_states["notproducing" + this.collection.attrs.collectionPascalized + "Open"],
                batts_configured: d,
                meters_not_enabled: e,
                no_phase_assignment: g,
                showMeters: b.showInternalMeters(),
            });
            this.$el.html(d);
            this.assign(this.subNavView, "#status_navbar");
            this.subNavView.render();
            this.assign(this.ProducingListView, ".producing-list");
            this.ProducingListView.render();
            this.assign(this.NotProducingListView, ".not-producing-list");
            this.NotProducingListView.render();
            return this;
        },
        updatePageState: function (a) {
            a = $(a.target).closest("a");
            void 0 != a && ((a = a.attr("data-page-state-element") + this.collection.attrs.collectionPascalized + "Open"), (b.page_states[a] = !b.page_states[a]));
        },
        updateCount: function () {
            var a = this.collection.attrs.envoyModelProducingCount,
                c = this.collection.attrs.appTargetCount,
                d = EnvoyBackboneApp[this.collection_type].getActiveDevices(),
                e = _.where(d, { producing: !1 });
            "nsrs" === this.collection_type && (e = _.where(d, { relay: "open" }).length);
            this.$el.find(".producing_list_header .counts").html(this.model.get(a));
            this.$el.find(".not_producing_list_header .counts").html(e.length);
            0 < b[c] && this.model.get(a) >= b[c] ? this.$el.find("#target_glyphicon").addClass("ok_2") : this.$el.find("#target_glyphicon").removeClass("ok_2");
            this.ProducingListView.render();
            this.NotProducingListView.render();
        },
        updateAlerts: function () {
            "ac_batteries" == this.collection_type && this.collection;
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            this.ProducingListView.close();
            this.NotProducingListView.close();
            this.stopListening(this.collection);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.ProducingDetails = b.Views.DeviceList.extend({
        tagName: "div",
        initialize: function (a) {
            this.producing_state = this.options.producing_state;
            this.panel_id = this.options.panel_id;
            return this;
        },
        events: function () {
            return _.extend({}, b.Views.DeviceList.prototype.events, {});
        },
        render: function () {
            var a = EnvoyBackboneApp[this.collection_type].getActiveDevices(),
                a = _.where(a, { producing: this.producing_state });
            this.collection = _.sortBy(a, function (a) {
                return a.id;
            });
            this.is_power_list = !0;
            b.Views.ProducingDetails.__super__.render.call(this);
            return this;
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.ProfilesAgfProfile = Backbone.View.extend({
        tagName: "div",
        initialize: function (a) {
            this.options = a;
            this.template = JST["profiles/agf_profile"];
            this.collection = b.agfProfiles;
            this.collection_type = a.collection_type;
            this.tariff_set = b.tariff.tariffStructIsSet();
            if ("ac_batteries" == this.collection_type || "encharge_batteries" == this.collection_type) this.tariffView = new b.Views.TariffRate({ className: "tariff_rate" });
            this.model = b.envoyModel;
            this.listenTo(b.agfProfiles.agfInfo, "change:migration_in_progress", this.migration_status_change);
            b.mediator.on("profiles:loaded", this.render, this);
            b.mediator.on("tariff_rate:model_update", this.render, this);
            b.mediator.on("tariff:getComplete", this.tariffSet, this);
            this.form_selected_profile = this.collection.selectedProfile;
            this.preview_profile = BackboneConfig.preview_profile;
            this.editingProfile = this.isSettingProfile = this.isLoading = !1;
            b.mediator.on("agfProfiles:selectedProfileUpdated", this.updateFormProfile, this);
            b.mediator.on("agfProfiles:rateStructureUpdated", this.updateFormProfile, this);
            b.mediator.on("agfProfiles:dataFetch_success", this.dataFetchSuccess, this);
            b.mediator.on("agfProfiles:dataFetch_failed", this.dataFetchFailed, this);
            return this;
        },
        events: {
            "click .edit": "showSetGridProfile",
            "click .cancel": "cancelSetGridProfile",
            "click .pprofile": "getProfileData",
            "change input.slider": "updatePeakLabel",
            "submit form#profile_set": "setGridProfile",
            "change select.profile_select": "selectingProfile",
        },
        render: function () {
            $(".profile_select").select2("close");
            $(".tariff_select").select2("close");
            _.isNull(this.collection.selectedProfile) || _.isEmpty(this.collection.selectedProfile) || !_.isEmpty(this.form_selected_profile) || (this.form_selected_profile = this.collection.selectedProfile);
            var a = this.model.getProfile();
            this.isSettingProfile && this.form_selected_profile && (a = b.agfProfiles.get(this.form_selected_profile).attributes);
            this.$el.html(
                this.template({
                    app: b,
                    model: this.model.toJSON(),
                    current_profile: a,
                    collection_type: this.collection_type,
                    form_selected_profile: this.form_selected_profile,
                    preview_profile: this.preview_profile,
                    profiles: this.collection.profileDisplay,
                    editing: this.editingProfile,
                    showHelpIcon: b.showHelpIcon(),
                    migration_in_progress: b.agfProfiles.agfInfo.get("migration_in_progress"),
                    showGridAlert: this.isShowGridAlert(),
                    isCancelAllowed: this.isCancelAllowed(),
                })
            );
            this.$el.find("#profile_select").select2({ placeholder: I18n.t("envoy_backbone.forms.select_prompt"), minimumResultsForSearch: Infinity });
            this.$el.addClass("no-select");
            if ("ac_batteries" == this.collection_type || "encharge_batteries" == this.collection_type) this.assign(this.tariffView, ".tariff_rate"), this.tariffView.render();
            "nsrs" === this.collection_type && this.$el.find("#prof_edit").addClass("hidden").prop("disabled", !0);
            this.showScreenInRightState();
            return this;
        },
        showScreenInRightState: function () {
            this.model.getProfile();
            var a = !1,
                c = "NA" == b.envoyModel.get("envoy_type") ? !0 : void 0 != this.form_selected_profile,
                a = "ac_batteries" == this.collection_type || "encharge_batteries" == this.collection_type ? b.tariff.get("tariff_set") : !0;
            void 0 != b.activeRequests && b.activeRequests.findWhere({ id: "TariffSettingsGet" })
                ? (this.$el.find("#prof_edit").prop("disabled", !0), this.$el.find("#prof_edit").addClass("preloader preloader_sm"), this.$el.find("#grid_profile_set").addClass("hidden"))
                : (this.$el.find("#prof_edit").removeClass("preloader preloader_sm"), this.$el.find("#prof_edit").prop("disabled", !1));
            c && a
                ? (this.$el.find("#grid_profile_set").removeClass("hidden"), b.mediator.trigger("profiles:show_propagation_state"))
                : (this.$el.find("#grid_profile_form").removeClass("hidden"), b.mediator.trigger("profiles:hide_propagation_state"));
            this.setInfoButtonVisiblity();
        },
        tariffSet: function () {
            "NA" == b.envoyModel.get("envoy_type") && b.mediator.trigger("profiles:hide_propagation_state");
            this.render();
        },
        updateFormProfile: function () {
            this.form_selected_profile = this.collection.selectedProfile;
            this.form_selected_peak_time = this.collection.getSelectedStartTime();
            this.render();
            this.isSettingProfile = !1;
        },
        showSetGridProfile: function (a) {
            b.mediator.trigger("profiles:hide_propagation_state");
            this.form_selected_profile = this.collection.selectedProfile;
            this.$el.find("#grid_profile_form").removeClass("hidden");
            this.$el.find("#grid_profile_set").addClass("hidden");
            this.$el.find("input.slider").slider();
            this.showSelectedProfile();
            this.editingProfile = !0;
            this.setInfoButtonVisiblity();
            b.mediator.trigger("profiles:edit");
        },
        migration_status_change: function (a) {
            b.agfProfiles.agfInfo.get("migration_in_progress")
                ? (this.$el.find("#profile_select_div").addClass("hidden"), this.$el.find("#submit_button").addClass("hidden"), this.$el.find("#migration_in_progress_div").removeClass("hidden"))
                : (this.$el.find("#profile_select_div").removeClass("hidden"), this.$el.find("#submit_button").removeClass("hidden"), this.$el.find("#migration_in_progress_div").addClass("hidden"));
        },
        cancelSetGridProfile: function (a) {
            a.preventDefault();
            _.isNull(this.collection.selectedProfile) || _.isEmpty(this.collection.selectedProfile) || (this.form_selected_profile = this.collection.selectedProfile);
            this.editingProfile = this.isSettingProfile = b.wifiDoingScaryStuff = !1;
            b.mediator.trigger("profiles:cancelEditing");
            this.render();
        },
        updatePeakLabel: function (a) {
            $("#peak_label").text(I18n.l("time.formats.hour_meridian", "2009-09-18 " + a.value.newValue + ":12:43"));
        },
        getProfileData: function (a) {
            if (this.isLoading) a.preventDefault();
            else {
                this.getSelectedGridProfile();
                a = b.agfProfiles.get(this.form_selected_profile);
                var c = a.get("detailStatus");
                if (void 0 == c || "success" != c)
                    a.set({ detailStatus: "loading" }),
                        (this.isLoading = !0),
                        this.$el.find("#profile_select").prop("disabled", !0),
                        this.$el.find(".pprofile").removeClass("btn btn-primary btn-envoy"),
                        this.$el.find(".pprofile").addClass("preloader preloader_sm"),
                        b.agfProfiles.getDetailData(this.form_selected_profile, !0);
            }
        },
        selectingProfile: function (a) {
            this.editingProfile = !0;
            this.setInfoButtonVisiblity(a);
            this.showSelectedProfile();
            this.clearError();
        },
        showSelectedProfile: function () {
            var a = this.$el.find("form #profile_select option:selected").text();
            this.$el.find("#selected_profile_name").html(a);
        },
        clearError: function () {
            this.$el.find("#profile_select-error").remove();
        },
        setInfoButtonVisiblity: function (a) {
            a = this.$el.find("form #profile_select option:selected").val();
            void 0 != a && "" != a ? this.$el.find(".pprofile").removeClass("hidden") : this.$el.find(".pprofile").addClass("hidden");
        },
        dataFetchSuccess: function () {
            this.$el.find(".pprofile").removeClass("preloader preloader_sm");
            this.$el.find(".pprofile").addClass("btn btn-primary btn-envoy");
            this.$el.find("#profile_select").prop("disabled", !1);
            this.isLoading = !1;
        },
        dataFetchFailed: function () {
            this.$el.find(".pprofile").removeClass("preloader preloader_sm");
            this.$el.find(".pprofile").addClass("btn btn-primary btn-envoy");
            this.$el.find("#profile_select").prop("disabled", !1);
            this.isLoading = !1;
        },
        setGridProfile: function (a) {
            var c = {};
            a.preventDefault();
            this.form_selected_profile = a = this.$el.find("form #profile_select option:selected").val();
            this.isSettingProfile = !0;
            this.editingProfile = !1;
            1 == $("form#profile_set").validate({ errorClass: "has-error" }).form() &&
                (("ac_batteries" != this.collection_type && "encharge_batteries" != this.collection_type) || this.tariffView.setTariffData(!0),
                (c.selected_profile = a),
                (b.wifiDoingScaryStuff = !1),
                b.mediator.trigger("profiles:hide_propagation_data"),
                this.collection.userSettingAgfProfile(c),
                this.render());
        },
        getSelectedGridProfile: function () {
            this.form_selected_profile = this.$el.find("form #profile_select option:selected").val();
            var a = this.$el.find("form#profile_set").validate({ errorClass: "has-error" });
            this.preview_profile ? a.resetForm() : a.form();
            b.agfProfiles.previewSelectedProfile = this.form_selected_profile;
        },
        close: function () {
            this.tariffView && this.tariffView.close();
            this.remove();
            this.unbind();
            b.mediator.off(null, null, this);
            b.agfProfiles.previewSelectedProfile = null;
            b.wifiDoingScaryStuff = !1;
        },
        isShowGridAlert: function () {
            var a = b.initialTargetInverterCount(),
                c = b.initialTargetAcbCount(),
                d = b.initialTargetEnchargeBatteriesCount(),
                e = b.initialTargetEnpowersCount();
            switch (this.collection_type) {
                case "ac_batteries":
                    return 0 < a + d + e;
                case "microinverters":
                    return 0 < c + d + e;
                case "encharge_batteries":
                    return 0 < c + a + e;
                case "enpowers":
                    return 0 < c + d + a;
                default:
                    return !1;
            }
        },
        isCancelAllowed: function () {
            if ("ac_batteries" == this.collection_type || "encharge_batteries" == this.collection_type) return b.tariff.tariffStructIsSet();
            var a = this.model.getProfile();
            return !_.isEmpty(a) && a.hasOwnProperty("profile_id") && "" != a.profile_id;
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.ProfilesDetails = EnvoyBackboneApp.Views.DeviceList.extend({
        tagName: "div",
        initialize: function (a) {
            this.template = JST["profiles/details"];
            this.collection_type = a.collection_type;
            this.profile_status = this.options.profile_status;
            return this;
        },
        events: function () {
            return _.extend({}, EnvoyBackboneApp.Views.DeviceList.prototype.events, {});
        },
        render: function () {
            var a = b[this.collection_type];
            this.collection = _.sortBy(_.where(a.getActiveDevices(), { profile_status: this.profile_status }), function (a) {
                return a.id;
            });
            this.setupMeterInfo();
            var c = this.envoyModel.getProfile(),
                d = this.envoyModel.get("enpower_grid_status").mains_oper_state,
                c = JST.device_list({
                    collection: this.collection,
                    collection_type: this.collection_type,
                    current_profile: c,
                    is_detected_list: !1,
                    is_power_list: !1,
                    is_comm_list: !1,
                    isGFIClearable: "EU" != BackboneConfig.envoy_type,
                    showDeviceLink: b.showInverterLink(this.collection_type),
                    showProfiles: b.showProfiles(),
                    metersEnabled: this.metersEnabled,
                    phaseCount: this.phaseCount,
                    showPhase: this.showPhase,
                    showParameterTable: this.showParamTable,
                    state_of_grid: d,
                });
            this.$el.html(this.template({ collection: this.collection, target_device_count: b[a.attrs.appTargetCount], profile_status: this.profile_status }));
            this.$el.find(".set-list").html(c);
            return this;
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.ProfilesPage = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["shared/profiles_main"];
            this.model = b.envoyModel;
            b.mediator.on("profiles:show_propagation_state", this.showPropagationState, this);
            b.mediator.on("profiles:hide_propagation_state", this.hidePropagationState, this);
            b.mediator.on("profiles:hide_propagation_data", this.hidePropagationData, this);
            this.nav_options = a.nav_options;
            this.active_nav = a.active_nav;
            b.mediator.on("inventory:ProfileStateUpdated", this.updateLists, this);
            b.mediator.on("app:targetCountUpdated", this.updateTargets, this);
            this.collection_type = a.collection_type;
            this.collection = b[a.collection_type];
            this.subNavView = new b.Views.DeviceSubNavBar({ collection_type: this.collection_type, nav_options: this.nav_options, active_nav: this.active_nav, sub_name: "status" });
            this.listenTo(this.model, "change" + this.collection.attrs.envoyModelProfileCount, this.render);
            this.showDeviceLink = b.showInverterLink(this.collection_type);
            this.gridProfileView = new b.Views.ProfilesAgfProfile({ collection_type: this.collection_type, className: "grid_profile" });
            this.propagationView = new b.Views.ProfilesPropagationStatus({ collection_type: this.collection_type, className: "action" });
            this.details0View = new b.Views.ProfilesDetails({ collection_type: this.collection_type, className: "details_0", profile_status: 0 });
            this.details1View = new b.Views.ProfilesDetails({ collection_type: this.collection_type, className: "details_1", profile_status: 1 });
            this.details2View = new b.Views.ProfilesDetails({ collection_type: this.collection_type, className: "details_2", profile_status: 2 });
            this.details3View = new b.Views.ProfilesDetails({ collection_type: this.collection_type, className: "details_3", profile_status: 3 });
            this.details4View = new b.Views.ProfilesDetails({ collection_type: this.collection_type, className: "details_4", profile_status: 4 });
            this.details5View = new b.Views.ProfilesDetails({ collection_type: this.collection_type, className: "details_5", profile_status: 5 });
            this.details6View = new b.Views.ProfilesDetails({ collection_type: this.collection_type, className: "details_6", profile_status: 6 });
            return this;
        },
        events: {
            "show.bs.collapse #propagation_data": function (a) {
                a.stopPropagation();
                $(a.target).hasClass("panel-collapse") || this.$el.find("#propagation_loading").collapse("hide");
            },
            "hide.bs.collapse #propagation_data": function (a) {
                a.stopPropagation();
                $(a.target).hasClass("panel-collapse") || this.$el.find("#propagation_loading").collapse("show");
            },
        },
        render: function () {
            var a = this.template({ model: this.model.toJSON() });
            this.$el.html(a);
            this.assign(this.subNavView, "#status_navbar");
            this.subNavView.render();
            this.assign(this.gridProfileView, ".grid_profile");
            this.gridProfileView.render();
            this.assign(this.propagationView, ".action");
            this.propagationView.render();
            this.assign(this.details0View, ".details_0");
            this.details0View.render();
            this.assign(this.details1View, ".details_1");
            this.details1View.render();
            this.assign(this.details2View, ".details_2");
            this.details2View.render();
            this.assign(this.details3View, ".details_3");
            this.details3View.render();
            this.assign(this.details4View, ".details_4");
            this.details4View.render();
            this.assign(this.details5View, ".details_5");
            this.details5View.render();
            this.assign(this.details6View, ".details_6");
            this.details6View.render();
            return this;
        },
        showPropagationState: function () {
            this.$el.find("#propagation_state").removeClass("hidden");
            this.$el.find("#propagation_data").collapse("show");
        },
        hidePropagationState: function () {
            this.$el.find("#propagation_state").addClass("hidden");
        },
        hidePropagationData: function () {
            this.$el.find("#propagation_data").collapse("hide");
        },
        updateLists: function () {
            this.$el.find("#propagation_data").collapse("hide");
            setTimeout(function () {
                $("#propagation_data").collapse("show");
            }, 1e3);
        },
        updateTargets: function () {
            this.model.get(this.collection.attrs.envoyModelProfileCount) >= b[this.collection.attrs.appTargetCount] && $("#target_glyphicon").addClass("ok_2");
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            this.gridProfileView.close();
            this.propagationView.close();
            this.details0View.close();
            this.details1View.close();
            this.details2View.close();
            this.details3View.close();
            this.details4View.close();
            this.details5View.close();
            this.details6View.close();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.ProfilesPropagationStatus = Backbone.View.extend({
        tagName: "div",
        initialize: function (a) {
            this.options = a;
            this.collection_type = a.collection_type;
            this.collection = b[a.collection_type];
            this.template = JST["profiles/propagation_status"];
            b.mediator.on("inventory:ProfileStateUpdated", this.render, this);
            return this;
        },
        render: function () {
            var a = "incomplete",
                c = 0,
                c = b.envoyModel.get("envoy_type"),
                d = "ac_batteries" == this.collection_type || "encharge_batteries" == this.collection_type,
                e = this.collection.getActiveDevices(),
                c = "NA" == c && d ? e.length : _.where(e, { profile_status: 2 }).length + _.where(e, { profile_status: 3 }).length;
            0 < this.collection.getActiveDevices().length && c == this.collection.getActiveDevices().length
                ? (a = "complete")
                : 0 < this.collection.getActiveDevices().length &&
                  (0 < _.where(this.collection.getActiveDevices(), { profile_status: 0 }).length ||
                      0 < _.where(this.collection.getActiveDevices(), { profile_status: 1 }).length ||
                      0 < _.where(this.collection.getActiveDevices(), { profile_status: 5 }).length) &&
                  (a = "propagating");
            this.$el.html(this.template({ state: a, collection_type: this.collection_type }));
            return this;
        },
        close: function () {
            this.remove();
            this.unbind();
            b.mediator.off(null, null, this);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.SleepCancelPrompt = Backbone.View.extend({
        className: "modal-dialog",
        tagName: "div",
        initialize: function () {
            this.template = JST.sleep_cancel_prompt;
            this.setElement($("#sleep_cancel_prompt"));
            this.model = b.envoyModel;
            this.collection_type = "ac_batteries";
            b.mediator.on("app:domReady", this.createModal, this);
            b.mediator.on("showSleepCancelModal", this.showSleepCancelModal, this);
        },
        events: { "click .btn-primary": "cancelSleepMode", "click .close": "cancelModal" },
        render: function () {
            this.setElement($("#sleep_cancel_prompt"));
            var a = b.ac_batteries.findWhere({ isFlaggedForCancelSleep: !0 }),
                c = "";
            a && (c = a.get("cancelMode"));
            this.$el.html(this.template({ mode: c }));
            return this;
        },
        close: function () {
            this.remove();
        },
        createModal: function () {
            this.render();
            $("#sleep_cancel_prompt").modal({ show: !1 });
        },
        evaluateEnter: function (a) {
            13 === a.which && this.setTargetSoC(a);
        },
        showSleepCancelModal: function (a) {
            this.collection_type = a.collection_type;
            a = "ac_batteries" == this.collection_type ? "AcbCancelSleepMode" : "EnchargeCancelSleepMode";
            b.activeRequests && !b.activeRequests.findWhere({ id: a }) && (this.render(), $("#sleep_cancel_prompt").modal("show"));
        },
        cancelSleepMode: function (a) {
            a.preventDefault();
            b.mediator.trigger("batteries:CancelSleepStart");
            $("#sleep_cancel_prompt").modal("hide");
            b[this.collection_type].cancelSleepMode();
            setTimeout(function () {
                window.scrollTo(document.body.scrollLeft, document.body.scrollTop);
            }, 500);
        },
        cancelModal: function () {
            $("#sleep_cancel_prompt").modal("hide");
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.SleepModePrompt = Backbone.View.extend({
        className: "modal-dialog",
        tagName: "div",
        initialize: function () {
            this.template = JST.sleep_mode_prompt;
            this.setElement($("#sleep_mode_prompt"));
            this.model = b.envoyModel;
            this.collection_type = "ac_batteries";
            b.mediator.on("app:domReady", this.createModal, this);
            b.mediator.on("showSleepPromptModal", this.showSleepModePromptModal, this);
            this.min_target = 25;
            this.max_target = 30;
            this.default_range = {};
            this.range_spread = 5;
            this.top_range = 100 - this.range_spread;
            this.ranges = [];
            for (var a = 0; a <= this.top_range; a += this.range_spread) {
                var c = {};
                c.min = a;
                c.max = a + this.range_spread;
                c.str = c.min.toString() + "-" + c.max.toString() + "%";
                this.ranges.push(c);
                c.min === this.min_target && (this.default_range = c);
            }
        },
        events: { "click .btn-primary": "setTargetSoC", "click .close": "cancelModal" },
        render: function () {
            this.setElement($("#sleep_mode_prompt"));
            this.$el.html(this.template({ ranges: this.ranges, selected_range: this.default_range, min_target: this.min_target, max_target: this.max_target, tsocExpanded: !1, showAcbInput: !1 }));
            return this;
        },
        close: function () {
            this.remove();
        },
        createModal: function () {
            this.render();
            $("#sleep_mode_prompt").modal({ show: !1 });
        },
        evaluateEnter: function (a) {
            13 === a.which && this.setTargetSoC(a);
        },
        showSleepModePromptModal: function (a) {
            void 0 == b.activeRequests || b.activeRequests.findWhere({ id: "AcbSetSleepMode" }) || ((this.collection_type = a.collection_type), this.render(), $("#sleep_mode_prompt").modal("show"));
        },
        setTargetSoC: function (a) {
            a.preventDefault();
            a = parseInt(this.$el.find("#soc_select").val());
            $("#sleep_mode_prompt").modal("hide");
            a = { min: a, max: a + this.range_spread };
            b.mediator.trigger("batteries:SetToSleepStart");
            b[this.collection_type].setSleepMode(a);
            setTimeout(function () {
                window.scrollTo(document.body.scrollLeft, document.body.scrollTop);
            }, 500);
        },
        cancelModal: function () {
            $("#sleep_mode_prompt").modal("hide");
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.StartScanModal = Backbone.View.extend({
        className: "modal-dialog",
        tagName: "div",
        ssid: " ",
        initialize: function () {
            this.template = JST.start_device_scan_modal;
            this.setElement($("#start_scan_modal"));
            this.model = b.scanModel;
            this.modalType = "startScan";
            b.mediator.on("app:domReady", this.createModal, this);
            b.mediator.on("deviceScan:showStartScanModalInverter", this.showInfoAlertInverter, this);
            b.mediator.on("deviceScan:showStartScanModalBattery", this.showInfoAlertBattery, this);
            b.mediator.on("deviceScan:showStartScanModalNsr", this.showInfoAlertNsr, this);
            b.mediator.on("deviceScan:showStartScanModalBoth", this.showInfoAlertBoth, this);
            b.mediator.on("deviceScan:evaluateScanTimeoutModal", this.evaluateScanTimeoutModal, this);
        },
        events: { "click .btn-primary": "okModal", "click .close": "cancelModal", "click .open-target-count": "triggerOpenTargetCount", "click .edit": "showSetMicroinverterCount" },
        render: function () {
            this.setElement($("#start_scan_modal"));
            var a = "",
                c = "";
            switch (this.modalType) {
                case "startScanInverter":
                    a = I18n.t("envoy_backbone.overview.scan_modal.title");
                    c = I18n.t("envoy_backbone.overview.scan_modal.description");
                    break;
                case "startScanBattery":
                    a = I18n.t("envoy_backbone.overview.scan_modal.title");
                    c = I18n.t("envoy_backbone.overview.scan_modal.description_battery");
                    break;
                case "startScanBoth":
                    a = I18n.t("envoy_backbone.overview.scan_modal.title");
                    c = I18n.t("envoy_backbone.overview.scan_modal.description_both");
                    break;
                case "startScanNsr":
                    a = I18n.t("envoy_backbone.overview.scan_modal.title");
                    c = I18n.t("envoy_backbone.overview.scan_modal.description_nsr");
                    break;
                case "scanTimeoutInverter":
                    var a = I18n.t("envoy_backbone.overview.scan_modal.scan_timeout_title"),
                        d = b.target_microinverter_count - b.envoyModel.get("detected_count"),
                        c = I18n.t("envoy_backbone.overview.scan_modal.scan_timeout_description_micro", { target_count: b.target_microinverter_count, detected_count: b.envoyModel.get("detected_count") }),
                        c = c + " " + I18n.t("envoy_backbone.overview.scan_modal.scan_timeout_description_micro_second", { count: d });
                    break;
                case "scanTimeoutBattery":
                    d = b.target_acb_count - b.envoyModel.get("detected_acb_count");
                    a = I18n.t("envoy_backbone.overview.scan_modal.scan_timeout_title");
                    c = I18n.t("envoy_backbone.overview.scan_modal.scan_timeout_description_battery", { target_count: b.target_acb_count, detected_count: b.envoyModel.get("detected_acb_count") });
                    c = c + " " + I18n.t("envoy_backbone.overview.scan_modal.scan_timeout_description_battery_second", { count: d });
                    break;
                case "scanTimeoutBoth":
                    (a = I18n.t("envoy_backbone.overview.scan_modal.scan_timeout_title")),
                        (c = I18n.t("envoy_backbone.overview.scan_modal.scan_timeout_description_both", {
                            target_count_micro: b.target_microinverter_count,
                            detected_count_micro: b.envoyModel.get("detected_count"),
                            target_count_battery: b.target_acb_count,
                            detected_count_battery: b.envoyModel.get("detected_acb_count"),
                        }));
            }
            a = this.template({ title: a, body: c });
            this.$el.html(a);
            return this;
        },
        createModal: function () {
            this.render();
            $("#start_scan_modal").modal({ show: !1 });
        },
        cancelModal: function () {
            $("#start_scan_modal").modal("hide");
        },
        okModal: function () {
            $("#start_scan_modal").modal("hide");
            var a = [15, 30, 60, 120, 240, 480],
                c = 30,
                d = (b.target_microinverter_count - b.envoyModel.get("detected_count") + b.target_acb_count - b.envoyModel.get("detected_acb_count")) / 2;
            30 < d && 241 > d
                ? (c = _.find(a, function (a) {
                      return d <= a;
                  }))
                : 240 < d && (c = 480);
            this.model.startScan({ scan_duration_total: c, priority_duration_total: 0 });
        },
        showInfoAlertInverter: function () {
            this.modalType = "startScanInverter";
            this.render();
            $("#start_scan_modal").modal("show");
        },
        showInfoAlertBattery: function () {
            this.modalType = "startScanBattery";
            this.render();
            $("#start_scan_modal").modal("show");
        },
        showInfoAlertNsr: function () {
            this.modalType = "startScanNsr";
            this.render();
            $("#start_scan_modal").modal("show");
        },
        showInfoAlertBoth: function () {
            this.modalType = "startScanBoth";
            this.render();
            $("#start_scan_modal").modal("show");
        },
        evaluateScanTimeoutModal: function () {
            0 == b.modalIsOpen &&
                0 == b.scanModel.get("active") &&
                0 == b.scanModel.get("inhibited") &&
                0 == b.scanModel.get("suspended") &&
                0 == b.scanModel.get("disabled") &&
                (0 < b.scanModel.attributes.pcu_target &&
                b.scanModel.attributes.pcu_target > b.scanModel.attributes.pcu_discovered &&
                0 < b.scanModel.attributes.acb_target &&
                b.scanModel.attributes.acb_target > b.scanModel.attributes.acb_discovered
                    ? ((this.modalType = "scanTimeoutBoth"), this.render(), $("#start_scan_modal").modal("show"))
                    : 0 < b.scanModel.attributes.acb_target && b.scanModel.attributes.acb_target > b.scanModel.attributes.acb_discovered
                    ? ((this.modalType = "scanTimeoutBattery"), this.render(), $("#start_scan_modal").modal("show"))
                    : 0 < b.scanModel.attributes.pcu_target && b.scanModel.attributes.pcu_target > b.scanModel.attributes.pcu_discovered && ((this.modalType = "scanTimeoutInverter"), this.render(), $("#start_scan_modal").modal("show")));
        },
        triggerOpenTargetCount: function () {
            $("#start_scan_modal").modal("hide");
            b.mediator.trigger("app:showMicroinverterCountModal");
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.TariffRate = Backbone.View.extend({
        tagName: "div",
        initialize: function (a) {
            this.options = a;
            this.template = JST["tariff/tariff_main"];
            this.model = b.tariff;
            this.renderCount = 0;
            this.season_names = ["summer", "winter"];
            this.TIERED_TIER_IDX = 1;
            this.TIERED_SEASON_IDX = 2;
            this.TOU_SEASON_IDX = 3;
            this.TOU_DAY_IDX = 2;
            this.TOU_PERIOD_IDX = 1;
            this.TOU_SE_IDX = 0;
            this.winter_text = I18n.t("envoy_backbone.tariff.winter_months_desc");
            b.mediator.on("profiles:edit", this.setEditing, this);
            b.mediator.on("tariff:edit", this.setEditing, this);
            b.mediator.on("profiles:cancelEditing", this.cancelEditing, this);
            b.mediator.on("tariff:cancelEditing", this.cancelEditing, this);
            b.mediator.on("tariff:getComplete", this.updateTariffStruct, this);
            b.mediator.on("profiles:validation_failed", this.tariffTypeWarning, this);
            b.mediator.on("tariff_rate:model_update", this.getDaysChargeAtNightFromModel, this);
            b.mediator.on("tariff:putComplete", this.updateTariffStruct, this);
            this.model.getTariffSettings();
            this.form_selected_tariff_rate = this.model.currentTariffType();
            (this.local_tariff_selected = this.isSelectedTariffSet()) || this.setEditing();
            this.model.startPollingTariffData();
            this.numberFormat = iso.getNumberFormat(BackboneConfig.country);
            this.selectedCountry = BackboneConfig.country;
            this.selectedSeasonMonths = this.getSeasonMonths();
            this.isLoading = !1;
            this.localChargeAtNightSettings = this.getDaysChargeAtNightFromModel();
            this.seasonalRateIsChecked = this.model.activeCollection.seasonal_rates;
            this.weekendRateIsChecked = this.model.activeCollection.weekend_rates;
            this.editingProfile = this.configDetailsExpanded = this.isSettingProfile = this.removingPeriod = this.addingPeriod = this.editing = !1;
            this.nextMonthValue = function (a) {
                return (a % 12) + 1;
            };
            this.prevMonthValue = function (a) {
                return ((a - 1 + 11) % 12) + 1;
            };
            this.countries = this.getCountriesSortedByName();
            return this;
        },
        events: {
            "change select#tariff_select": "selectTariffRate",
            "change select.month-select": "selectSeasonMonth",
            "change .period-timepicker": "syncTimeSelectors",
            "change .charge_at_night": "selectChargeAtNightTime",
            "change .tariff-country-select": "selectCountry",
            "change input": "inputChanged",
            "show.bs.collapse #config_details": "toggleTariffDetails",
            "hide.bs.collapse #config_details": "toggleTariffDetails",
            "click .add_peak": "addPeriod",
            "click .add_link_box .add_tier": "addTier",
            "click .remove_tier": "removeTier",
            "click .remove_peak": "removePeriod",
            "click .chg-at-night": "toggleChargeAtNight",
            "click .seasonal-rate": "toggleSeasonalRate",
            "click .weekend-rate": "toggleWeekendRate",
        },
        inputChanged: function (a) {
            this.setTariffData(!1);
        },
        render: function () {
            var a = this;
            if (!b.activeRequests.findWhere({ id: "TariffSettingsGet" })) {
                this.renderCount++;
                this.currencyFormat = Tools.getCurrencyFormat(BackboneConfig.country);
                this.model.setCurrencyCode(BackboneConfig.country);
                this.numberFormat = iso.getNumberFormat(BackboneConfig.country);
                this.placeholderText = $('<input value="0.00">').autoNumeric("init", this.currencyFormat).val();
                a.$el.html(
                    a.template({
                        app: b,
                        model: a.model.toJSON(),
                        tariff_set: this.local_tariff_selected,
                        editing: a.editing,
                        seasons: a.model.activeCollection,
                        season_names: a.season_names,
                        month_names: I18n.t("date.month_names"),
                        selectedSeasonMonths: a.getSeasonMonths(),
                        winter_text: a.getMonthText(),
                        chargeAtNightSettings: a.localChargeAtNightSettings,
                        seasonalRateIsChecked: a.seasonalRateIsChecked,
                        weekendRateIsChecked: a.weekendRateIsChecked,
                        tariff_rate_choices: Tools.getTariffRateChoices(),
                        showHelpIcon: b.showHelpIcon(),
                        selected_tariff_type: a.form_selected_tariff_rate,
                        configDetailsExpanded: a.configDetailsExpanded,
                        countries: a.countries,
                        selected_country: a.selectedCountry,
                        country_set: BackboneConfig.country_set,
                        placeholder_text: a.placeholderText,
                    })
                );
                a.setupView();
                a.$el.find(".tariff-rate-required, .tariff-configured-rate").autoNumeric("init", this.currencyFormat);
                a.$el.find(".tariff-percent-required, .tariff-limit-required").autoNumeric("init", this.numberFormat);
                if ("tou" === a.form_selected_tariff_rate && (a.local_tariff_selected || a.addingPeriod || a.removingPeriod)) {
                    var c = {},
                        d = {};
                    _.each(a.model.activeCollection.models, function (b) {
                        _.each(b.get("days"), function (g) {
                            var f = g.id + "-" + b.id;
                            c = a.$el.find("#nightcharge_start_time-" + f);
                            if (_.findWhere(_.findWhere(a.localChargeAtNightSettings.seasons, { id: b.id }).days, { id: g.id }).must_charge) {
                                var k = _.findWhere(_.findWhere(a.localChargeAtNightSettings.seasons, { id: b.id }).days, { id: g.id }).start;
                                c.val(k / 60);
                            }
                            d = a.$el.find("#nightcharge_end_time-" + f);
                            var h = _.findWhere(_.findWhere(a.localChargeAtNightSettings.seasons, { id: b.id }).days, { id: g.id }).duration;
                            h && d.val((k + h) / 60);
                            a.setChargeAtNightRanges("#nightcharge_start_time-" + f, "#nightcharge_end_time-" + f);
                            f = _.filter(g.periods, function (a) {
                                return "period_0" != a.id;
                            });
                            _.each(f, function (f) {
                                var h = f.id + "-" + g.id + "-" + b.id,
                                    k = "select#start_time-" + h,
                                    h = "select#end_time-" + h;
                                c = a.$el.find(k);
                                f.start || 0 === f.start ? (c.val(f.start / 60), a.$el.find(k + " option[value='']").remove(), a.$el.find(h).prop("disabled", !1)) : a.$el.find(h).prop("disabled", !0);
                                d = a.$el.find(h);
                                if (f.end || 0 === f.end) d.val(f.end / 60), a.$el.find(h + " option[value='']").remove();
                                a.validateTimeSelectors(k, h, f.id);
                            });
                        });
                    });
                }
                a.setWinterMonthText();
                a.$el.find(".tariff-country-select").select2({ placeholder: I18n.t("envoy_backbone.wifi.country_config.select_prompt") });
                a.$el.find("#tariff_select").select2({ placeholder: I18n.t("envoy_backbone.tariff.select_type"), minimumResultsForSearch: Infinity });
                this.$el.addClass("no-select");
                return this;
            }
        },
        isSelectedTariffSet: function () {
            return this.model.get("tariff_set");
        },
        setupView: function () {
            var a = this;
            a.selectedCountry ? this.$el.parent().find(".profile-buttons").removeClass("hidden") : this.$el.parent().find(".profile-buttons").addClass("hidden");
            this.local_tariff_selected && this.editing && this.$el.parent().find(".cancel").removeClass("hidden");
            this.editing
                ? "flat" === this.form_selected_tariff_rate
                    ? (this.$el.find(".tou_edit").addClass("hidden"), this.$el.find(".tariff_group").removeClass("hidden"), this.$el.find(".single_rate_edit").removeClass("hidden"))
                    : "tou" === this.form_selected_tariff_rate
                    ? (this.$el.find(".single_rate_edit").addClass("hidden"),
                      this.$el.find("#tariff_rate_form").removeClass("hidden"),
                      this.$el.find(".tariff_group").removeClass("hidden"),
                      this.$el.find(".tou_edit").removeClass("hidden"),
                      _.each(a.model.activeCollection.models, function (b) {
                          _.each(b.get("days"), function (d) {
                              d = d.id + "-" + b.id;
                              a.$el
                                  .find("#chg_at_night-" + d)
                                  .find(".glyphicons")
                                  .hasClass("check")
                                  ? a.$el.find("#nightcharge_group-" + d).removeClass("hidden")
                                  : a.$el.find("#nightcharge_group-" + d).addClass("hidden");
                          });
                      }))
                    : "tiered" === this.form_selected_tariff_rate && this.$el.find("#winter_month_selectors").hide()
                : this.model.get("tariff_set")
                ? "flat" === this.model.get("tariff_struct")
                    ? this.$el.find("#tariff_rate_form").addClass("hidden")
                    : this.model.get("tariff_struct")
                : 0 == this.model.get("tariff_set") && this.$el.find(".tariff_group").addClass("hidden");
        },
        updateTariffStruct: function (a) {
            var b = this;
            _.each(b.model.activeCollection.models, function (a, e) {
                _.each(a.get("days"), function (e) {
                    _.each(e.periods, function (f) {
                        "period_0" != f.id && ((f.start || 0 === f.start) && b.timeSlotTracker(Math.round(f.start / 60), !0, a.id, e.id, f.id), (f.end || 0 === f.end) && b.timeSlotTracker(Math.round(f.end / 60), !1, a.id, e.id, f.id));
                    });
                });
            });
            BackboneConfig.country = this.selectedCountry;
            this.localChargeAtNightSettings = this.getDaysChargeAtNightFromModel();
            this.form_selected_tariff_rate = this.model.get("tariff_struct");
            this.local_tariff_selected = this.isSelectedTariffSet();
            this.seasonalRateIsChecked = this.model.activeCollection.seasonal_rates;
            this.weekendRateIsChecked = this.model.activeCollection.weekend_rates;
            this.render();
        },
        updateTimeSlotData: function () {
            var a = this;
            _.each(a.model.activeCollection.models, function (b, d) {
                _.each(b.get("days"), function (d) {
                    a.resetTimeTracker(b.id, d.id);
                    _.each(d.periods, function (g) {
                        "period_0" != g.id && ((g.start || 0 === g.start) && a.timeSlotTracker(g.start / 60, !0, b.id, d.id, g.id), (g.end || 0 === g.end) && a.timeSlotTracker(g.end / 60, !1, b.id, d.id, g.id));
                    });
                });
            });
        },
        toggleChargeAtNight: function (a) {
            a.preventDefault();
            var b = a.currentTarget;
            a = b.id.split("-");
            var d = $(b).find(".glyphicons").hasClass("unchecked");
            this.setChargeAtNight(a[2], a[1], d);
            1 == d
                ? (this.$el.find(b).find(".glyphicons").removeClass("unchecked").addClass("check"),
                  (b = a[1] + "-" + a[2]),
                  this.$el.find("#nightcharge_group-" + b).removeClass("hidden"),
                  (d = _.findWhere(this.localChargeAtNightSettings.seasons, { id: a[2] })),
                  (a = _.findWhere(d.days, { id: a[1] })),
                  a.duration
                      ? (this.$el.find("#nightcharge_start_time-" + b).val(a.start / 60), this.$el.find("#nightcharge_end_time-" + b).val((a.start + a.duration) / 60))
                      : (this.$el.find("#nightcharge_start_time-" + b).val(3), this.$el.find("#nightcharge_end_time-" + b).val(4), (a.duration = 60)),
                  this.setChargeAtNightRanges("#nightcharge_start_time-" + b, "#nightcharge_end_time-" + b))
                : (this.$el.find(b).find(".glyphicons").removeClass("check").addClass("unchecked"), (b = a[1] + "-" + a[2]), this.$el.find("#nightcharge_group-" + b).addClass("hidden"));
            this.setTariffData(!1);
        },
        setChargeAtNightRanges: function (a, b) {
            var d = this;
            _.each(_.range(0, 7), function (e) {
                d.$el.find(a + " option[value=" + e + "]").prop("disabled", !1);
                d.$el.find(b + " option[value=" + e + "]").prop("disabled", !1);
            });
            var e = this.$el.find(a).val(),
                g = this.$el.find(b).val();
            _.each(_.range(0, 7), function (f) {
                f >= g && d.$el.find(a + " option[value=" + f + "]").prop("disabled", !0);
                f <= e && d.$el.find(b + " option[value=" + f + "]").prop("disabled", !0);
            });
        },
        toggleSeasonalRate: function (a) {
            a = this.$el.find(".seasonal-rate");
            this.seasonalRateIsChecked = $(a).find(".glyphicons").hasClass("unchecked");
            1 == this.seasonalRateIsChecked ? $(a).find(".glyphicons").removeClass("unchecked").addClass("check") : $(a).find(".glyphicons").removeClass("check").addClass("unchecked");
            this.model.setTariffActiveCollection(this.form_selected_tariff_rate, this.seasonalRateIsChecked, this.weekendRateIsChecked);
            this.localChargeAtNightSettings = this.getDaysChargeAtNightFromModel();
            this.updateTimeSlotData();
            this.setEditing();
            this.setTariffData(!1);
        },
        toggleWeekendRate: function (a) {
            a = this.$el.find(".weekend-rate");
            this.weekendRateIsChecked = $(a).find(".glyphicons").hasClass("unchecked");
            1 == this.weekendRateIsChecked ? $(a).find(".glyphicons").removeClass("unchecked").addClass("check") : $(a).find(".glyphicons").removeClass("check").addClass("unchecked");
            this.model.setTariffActiveCollection(this.form_selected_tariff_rate, this.seasonalRateIsChecked, this.weekendRateIsChecked);
            this.localChargeAtNightSettings = this.getDaysChargeAtNightFromModel();
            this.updateTimeSlotData();
            this.setEditing();
            this.setTariffData(!1);
        },
        addPeriod: function (a) {
            var b = this;
            a = a.currentTarget.id;
            var d = a.substr(a.indexOf("-") + 1),
                e = "",
                g = null,
                f = "",
                k = "",
                h = {};
            _.each(b.model.activeCollection.models, function (a) {
                _.each(a.get("days"), function (n) {
                    g = null;
                    _.each(n.periods, function (q, v) {
                        e = q.id + "-" + n.id + "-" + a.id;
                        b.savePeriodData(q, e, v);
                        d == e && ((g = parseInt(d.split("-")[0].split("_")[1]) + 1), (f = "period_" + g), (k = n.id), (h = 1440 == q.end ? 0 : q.end));
                    });
                    if (g) {
                        if (h || 0 === h) {
                            var q = b.getUsedTimeRanges(a.id, n.id, f, !1),
                                q = b.valueInRange(h / 60 + 1, q);
                            b.timeSlotTracker(h / 60, !0, a.id, n.id, f);
                        }
                        q && (h = null);
                        b.model.addNewPeriod(a.id, k, f, h);
                    }
                });
            });
            b.addingPeriod = !0;
            b.removingPeriod = !1;
            this.setEditing();
        },
        addTier: function (a) {
            var b = this;
            _.each(b.model.activeCollection.models, function (a) {
                _.each(a.get("tiers"), function (e) {
                    b.getTierInputData(a, e);
                });
            });
            a = a.currentTarget.id.split("-")[b.TIERED_SEASON_IDX];
            b.model.addNewTier(a);
            this.setEditing();
        },
        getTierInputData: function (a, b) {
            if ("tier_1" == b.id) {
                var d = this.$el.find("#tier_limit-" + b.id + "-" + a.id).autoNumeric("get");
                b.limit = "" != d ? 1e3 * d : null;
                arguments.callee.baseline = b.limit;
            } else
                0 < this.$el.find("#tier_percent-" + b.id + "-" + a.id).length &&
                    ((d = this.$el.find("#tier_percent-" + b.id + "-" + a.id).autoNumeric("get")), (b.percent = "" != d ? +d : null), (b.limit = (d * arguments.callee.baseline) / 100));
            d = this.$el.find("#tier_rate-" + b.id + "-" + a.id).autoNumeric("get");
            b.rate = "" != d ? +this.$el.find("#tier_rate-" + b.id + "-" + a.id).autoNumeric("get") : null;
        },
        getTierSeasonMonths: function () {
            var a = this.$el.find("#summer_tiered_rate_start").val(),
                b = this.$el.find("#summer_rate_end").val(),
                d = this.nextMonthValue(b),
                e = this.prevMonthValue(a);
            return [
                { id: "season_1", start: a, end: b },
                { id: "season_2", start: d, end: e },
            ];
        },
        removeTier: function (a) {
            var b = this;
            _.each(b.model.activeCollection.models, function (a) {
                _.each(a.get("tiers"), function (d) {
                    b.getTierInputData(a, d);
                });
            });
            var d = a.currentTarget.id.split("-");
            a = parseInt(d[this.TIERED_TIER_IDX].split("_")[1]) - 1;
            d = this.model.activeCollection.get([d[this.TIERED_SEASON_IDX]]).get("tiers");
            d.splice(a, 1);
            _.each(_.rest(d, a), function (a) {
                var b = a.id.split("_");
                a.id = b[0] + "_" + (b[1] - 1);
            });
            this.render();
        },
        savePeriodData: function (a, b, d) {
            b = this.getPeakInputData(b, d);
            "period_0" != a.id ? (b.start || 0 === b.start) && _.extend(a, { start: b.start, end: b.end, rate: b.rate }) : _.extend(a, { rate: b.rate });
        },
        getPeakInputData: function (a, b) {
            if (0 > a.indexOf("period_0"))
                var d = this.$el.find("#start_time-" + a).val(),
                    d = d || 0 === d ? 60 * d : null,
                    e = this.$el.find("#end_time-" + a).val(),
                    e = e || 0 === e ? 60 * e : null;
            var g = this.$el.find("#peak_rate-" + a).autoNumeric("get");
            0 <= a.indexOf("period_0") && this.model.set({ "tariff.single_rate.rate": g });
            g = g || 0 === g ? +Number(g).toFixed(2) : null;
            return { start: d, end: e, rate: g };
        },
        createPeriod: function (a) {
            a = a.model.activeCollection.get("season_1").get("days")[0].periods;
            var b = _.last(a).end;
            a.push({ id: "period_" + (a.length + 1), start: b, end: void 0, rate: "" });
        },
        createLastPeriod: function (a, b) {
            var d = this.local_model_data.tariff.seasons[0].days[0].periods;
            1440 != a && d.push({ id: "last_peak", start: a, rate: _.first(d).rate });
        },
        removePeriod: function (a) {
            var b = this,
                d = a.currentTarget.id.split("-");
            a = _.findWhere(b.model.activeCollection.get([d[3]]).get("days"), { id: d[2] }).periods;
            b.addingPeriod = !1;
            b.removingPeriod = !0;
            var e = "";
            _.each(b.model.activeCollection.models, function (a) {
                _.each(a.get("days"), function (d) {
                    _.each(d.periods, function (g, l) {
                        e = g.id + "-" + d.id + "-" + a.id;
                        b.savePeriodData(g, e, l);
                    });
                });
            });
            var g = _.findIndex(a, function (a) {
                return a.id == d[1];
            });
            a.splice(g, 1);
            b.resetTimeTracker(d[this.TOU_SEASON_IDX], d[this.TOU_DAY_IDX]);
            _.each(_.rest(a, g), function (a) {
                if ("period_0" != a.id) {
                    var b = a.id.split("_");
                    a.id = b[0] + "_" + (b[1] - 1);
                }
            });
            _.each(a, function (a) {
                "period_0" != a.id && (b.timeSlotTracker(a.start / 60, !0, d[b.TOU_SEASON_IDX], d[b.TOU_DAY_IDX], a.id), b.timeSlotTracker(a.end / 60, !1, d[b.TOU_SEASON_IDX], d[b.TOU_DAY_IDX], a.id));
            });
            b.render();
        },
        setEditing: function () {
            this.editing = !0;
            this.weekendRateIsChecked = this.model.activeCollection.weekend_rates;
            b.wifiDoingScaryStuff = !0;
            this.render();
        },
        cancelEditing: function () {
            this.editing = !1;
            b.wifiDoingScaryStuff = !1;
            this.selectedCountry = BackboneConfig.country;
            this.updateFormats(this.selectedCountry);
            this.model.getTariffSettings();
            this.localChargeAtNightSettings = this.getDaysChargeAtNightFromModel();
            this.configDetailsExpanded = !1;
        },
        updatePeakLabel: function (a) {
            $("#peak_label").text(I18n.l("time.formats.hour_meridian", "2009-09-18 " + a.value.newValue + ":12:43"));
        },
        clearError: function () {
            this.$el.find("#profile_select-error").remove();
        },
        setTariffData: function (a) {
            var b = this;
            b.isSettingProfile = !0;
            b.addingPeriod = !1;
            b.configDetailsExpanded = !1;
            if (b.seasonalRateIsChecked) {
                b.model.activeCollection.seasonal_rates = !0;
                var d = b.$el.find("#summer_rate_start").val();
                b.model.activeCollection.get("season_1").set({ start: d + "/1" });
                var e = b.$el.find("#summer_rate_end").val();
                b.model.activeCollection.get("season_1").set({ end: e });
                b.model.activeCollection.get("season_2").set({ start: this.nextMonthValue(e) + "/1" });
                b.model.activeCollection.get("season_2").set({ end: this.prevMonthValue(d) });
            } else (b.model.activeCollection.seasonal_rates = !1), b.model.activeCollection.get("season_1").set({ start: "1/1" });
            "flat" == b.form_selected_tariff_rate
                ? b.seasonalRateIsChecked
                    ? b.weekendRateIsChecked
                        ? _.each(b.model.activeCollection.models, function (a, d) {
                              _.each(a.get("days"), function (a) {
                                  _.each(a.periods, function (e, f) {
                                      e.rate = +Number(b.$el.find("#" + a.id + "_rate_" + b.season_names[d]).autoNumeric("get")).toFixed(2);
                                  });
                              });
                          })
                        : ((this.model.singleRateTwoSeasonsCollection.get("season_1").get("days")[0].periods[0].rate = +Number(b.$el.find("#summer_rate").autoNumeric("get")).toFixed(2)),
                          (this.model.singleRateTwoSeasonsCollection.get("season_2").get("days")[0].periods[0].rate = +Number(b.$el.find("#winter_rate").autoNumeric("get")).toFixed(2)))
                    : b.weekendRateIsChecked
                    ? ((b.model.activeCollection.models[0].attributes.days[0].periods["0"].rate = +Number(b.$el.find("#base_rate").autoNumeric("get")).toFixed(2)),
                      (b.model.activeCollection.models[0].attributes.days[1].periods["0"].rate = +Number(b.$el.find("#weekend_rate").autoNumeric("get")).toFixed(2)))
                    : b.model.set({ "tariff.single_rate.rate": b.$el.find("#base_rate").autoNumeric("get") })
                : "tou" == b.form_selected_tariff_rate
                ? _.each(b.model.activeCollection.models, function (a) {
                      _.each(a.get("days"), function (d) {
                          if (b.getChargeAtNight(b.localChargeAtNightSettings, a, d)) {
                              var e = 60 * b.$el.find("#nightcharge_start_time-" + d.id + "-" + a.id).val();
                              d.must_charge_start = e;
                              d.must_charge_duration = 60 * b.$el.find("#nightcharge_end_time-" + d.id + "-" + a.id).val() - e;
                          } else d.must_charge_duration = 0;
                          _.each(d.periods, function (e, g) {
                              b.savePeriodData(e, e.id + "-" + d.id + "-" + a.id, g);
                          });
                      });
                  })
                : "tiered" == b.form_selected_tariff_rate &&
                  _.each(b.model.activeCollection.models, function (a) {
                      _.each(a.get("tiers"), function (d) {
                          b.getTierInputData(a, d);
                      });
                  });
            var g = { tariff: { currency: { code: this.model.get("tariff.currency.code") }, single_rate: { rate: this.model.get("tariff.single_rate.rate") } } },
                d = this.model.activeCollection.tariffType,
                e = JSON.parse(JSON.stringify(this.model.activeCollection));
            g.tariff.seasons = _.map(e, function (a) {
                return _.omit(a, "end");
            });
            g.tariff.single_rate = { rate: parseFloat(this.model.get("tariff.single_rate.rate")) };
            "flat" == d
                ? this.model.activeCollection.seasonal_rates ||
                  this.model.activeCollection.weekend_rates ||
                  ((g.tariff.single_rate = { rate: parseFloat(this.model.get("tariff.single_rate.rate")) }), (g.tariff = _.omit(g.tariff, "seasons")))
                : "tou" == d
                ? _.each(g.tariff.seasons, function (a, d) {
                      _.each(a.days, function (a, e) {
                          var f = a.periods,
                              f = _.sortBy(f, "start"),
                              q = [],
                              u = null;
                          void 0 != _.findWhere(a.periods, { id: "period_0" }) && (u = _.findWhere(a.periods, { id: "period_0" }).rate);
                          "weekend" === a.id && 1 === f.length
                              ? q.push(b.createFillerPeriod(0, u))
                              : 1 <= f.length &&
                                ((f = _.reject(f, function (a) {
                                    return "period_0" === a.id;
                                })),
                                _.each(f, function (a, d, e) {
                                    var f = {};
                                    if (void 0 != e[d + 1]) a.end != e[d + 1].start && (f = b.createFillerPeriod(a.end, u));
                                    else if (1440 != a.end || 0 != _.first(e).start) f = b.createFillerPeriod(a.end % 1440, u);
                                    delete a.end;
                                    q.push(a);
                                    _.isEmpty(f) || q.push(f);
                                }));
                          g.tariff.seasons[d].days[e].periods = q;
                      });
                  })
                : "tiered" == d &&
                  _.each(g.tariff.seasons, function (a) {
                      _.each(a.tiers, function (a) {
                          delete a.percent;
                      });
                  });
            b.model.set({ tariff_set: !0 });
            b.model.set({ tou_set: !0 });
            b.model.set({ tariff_struct: d });
            b.model.set({ envoy_tariff_type: d });
            a && ((b.editing = !1), b.model.putTariffSettings(g));
        },
        syncTimeSelectors: function (a) {
            var b = this,
                d = a.currentTarget.id.split("-"),
                e = parseInt(b.$el.find("#" + a.currentTarget.id).val());
            b.$el.find("#" + a.currentTarget.id + " option[value='']").remove();
            0 <= a.currentTarget.id.indexOf("start") && ((a = a.currentTarget.id.replace("start", "end")), b.$el.find("#" + a).prop("disabled", !1));
            b.timeSlotTracker(e, "start_time" == d[b.TOU_SE_IDX], d[b.TOU_SEASON_IDX], d[b.TOU_DAY_IDX], d[b.TOU_PERIOD_IDX]);
            e = _.findWhere(this.model.activeCollection.get(d[b.TOU_SEASON_IDX]).get("days"), { id: d[b.TOU_DAY_IDX] }).periods;
            _.each(e, function (a) {
                if ("period_0" != a.id) {
                    var e = a.id + "-" + d[b.TOU_DAY_IDX] + "-" + d[b.TOU_SEASON_IDX],
                        k = b.getUsedTimeRanges(d[b.TOU_SEASON_IDX], d[b.TOU_DAY_IDX], a.id, !1);
                    b.disableRanges("#start_time-" + e, k, !0, b);
                    k = b.getUsedTimeRanges(d[b.TOU_SEASON_IDX], d[b.TOU_DAY_IDX], a.id, !0);
                    b.disableRanges("#end_time-" + e, k, !1, b);
                }
            });
            this.setTariffData(!1);
        },
        disableRanges: function (a, b, d, e) {
            _.each(_.range(0, 25), function (b) {
                e.$el.find(a + " option[value=" + b + "]").prop("disabled", !1);
            });
            _.each(b, function (b) {
                b = _.range(b[0], b[1]);
                _.each(b, function (b) {
                    e.$el.find(a + " option[value=" + b + "]").prop("disabled", !0);
                });
            });
        },
        timeSlotTracker: function (a, b, d, e, g) {
            if (a || 0 === a)
                (d = _.findWhere(this.model.activeCollection.allTimeSlots.seasons, { id: d })),
                    (e = _.findWhere(d.days, { id: e }).periods),
                    b
                        ? (b = _.findWhere(e, { start: g }))
                            ? b.hour != a && (delete _.findWhere(e, { start: g }).start, (e[a].start = g))
                            : (e[a].start = g)
                        : (b = _.findWhere(e, { end: g }))
                        ? b.hour != a && (delete _.findWhere(e, { end: g }).end, (e[a].end = g))
                        : (e[a].end = g);
        },
        resetTimeTracker: function (a, b) {
            var d = _.findWhere(this.model.activeCollection.allTimeSlots.seasons, { id: a }),
                d = _.findWhere(d.days, { id: b }).periods;
            _.each(d, function (a) {
                delete a.start;
                delete a.end;
            });
        },
        mergeRanges: function (a) {
            a = a.slice().sort(function (a, b) {
                return a[0] > b[0];
            });
            for (var b = 0; b < a.length - 1; ) {
                var d = a[b],
                    e = a[b + 1];
                d[1] >= e[0] ? ((d[1] = Math.max(d[1], e[1])), a.splice(b + 1, 1)) : b++;
            }
            return a;
        },
        getUsedTimeRanges: function (a, b, d, e) {
            a = _.findWhere(this.model.activeCollection.allTimeSlots.seasons, { id: a });
            b = _.findWhere(a.days, { id: b }).periods;
            var g = [];
            if (e) {
                var f = _.findWhere(b, { start: d });
                if (f) {
                    var k = !1,
                        h = 0;
                    _.each(b, function (a) {
                        a.hour == f.hour ? g.push([h, a.hour + 1]) : void 0 != a.start && a.hour > f.hour && 0 == k && ((k = !0), g.push([a.hour + 1, 25]));
                    });
                }
                _.each(g, function (a) {
                    24 == a[1] && g.push([0, 1]);
                });
                e = _.first(g);
                1 == _.range(_.first(e), _.last(e)).length && g.push([24, 25]);
            } else {
                var l = _.findWhere(b, { end: d });
                l
                    ? ((k = !1),
                      _.each(_.clone(b).reverse(), function (a) {
                          a.hour == l.hour ? g.push([a.hour, 24]) : void 0 != a.end && a.hour < l.hour && 0 == k && ((k = !0), g.push([0, a.hour]));
                      }))
                    : ((h = 0),
                      _.each(b, function (a) {
                          void 0 != a.end && a.periodID != d && g.push([h, a.hour]);
                          void 0 != a.start && a.periodId != d && (h = a.hour);
                      }));
            }
            return g;
        },
        valueInRange: function (a, b) {
            return this.mergeRanges(b).some(function (b) {
                return a >= b[0] && a <= b[1];
            });
        },
        validateTimeSelectors: function (a, b, d) {
            var e = this.getUsedTimeRanges(a.split("-")[this.TOU_SEASON_IDX], a.split("-")[this.TOU_DAY_IDX], d, !1);
            this.disableRanges(a, e, !0, this);
            e = this.getUsedTimeRanges(b.split("-")[this.TOU_SEASON_IDX], b.split("-")[this.TOU_DAY_IDX], d, !0);
            this.disableRanges(b, e, !0, this);
        },
        createFillerPeriod: function (a, b) {
            return { id: "filler", start: 1440 === a ? 0 : a, rate: Number(b) };
        },
        selectTariffRate: function (a) {
            a = $(a.target).val();
            this.model.setTariffActiveCollection(a, !1, !1);
            this.form_selected_tariff_rate = this.model.activeCollection.tariffType;
            this.localChargeAtNightSettings = this.getDaysChargeAtNightFromModel();
            this.seasonalRateIsChecked = this.model.activeCollection.seasonal_rates;
            this.weekendRateIsChecked = this.model.activeCollection.weekend_rates;
            this.configDetailsExpanded = !1;
            this.local_tariff_selected = !0;
            this.resetTimeTracker("season_1", "all_days");
            b.mediator.trigger("tariff:selectChanged");
            this.setEditing();
            this.setupView();
        },
        selectSeasonMonth: function (a) {
            var b = a.currentTarget.id;
            a = $(a.target).val();
            var d = "",
                e = null,
                g = null,
                f = null;
            this.$el.find("#" + b + " option[value='']").remove();
            0 <= b.indexOf("start")
                ? ((f = this.prevMonthValue(a)),
                  (d = b.replace("start", "end")),
                  (e = this.$el.find("#" + d).val()),
                  this.$el
                      .find("#" + d + " option[value=" + f + "]")
                      .prop("disabled", !0)
                      .siblings()
                      .prop("disabled", !1),
                  e && (g = this.nextMonthValue(e)))
                : ((g = this.nextMonthValue(a)),
                  (d = b.replace("end", "start")),
                  (e = this.$el.find("#" + d).val()),
                  this.$el
                      .find("#" + d + " option[value=" + g + "]")
                      .prop("disabled", !0)
                      .siblings()
                      .prop("disabled", !1),
                  e && (f = this.prevMonthValue(e)));
            e
                ? this.$el.find("#winter_month_desc").text(I18n.t("date.month_names")[g] + " " + I18n.t("envoy_backbone.tariff.month_connector") + " " + I18n.t("date.month_names")[f])
                : this.$el.find("#winter_month_desc").text(I18n.t("envoy_backbone.tariff.winter_months_desc"));
            this.setTariffData(!1);
        },
        selectChargeAtNightTime: function (a) {
            if (0 <= a.currentTarget.id.indexOf("start"))
                var b = a.currentTarget.id.replace("start", "end"),
                    d = a.currentTarget.id;
            else (d = a.currentTarget.id.replace("end", "start")), (b = a.currentTarget.id);
            this.setChargeAtNightRanges("#" + d, "#" + b);
            this.setTariffData(!1);
        },
        setWinterMonthText: function () {
            var a = this.getSeasonMonths();
            a.winter.start && a.winter.end
                ? this.$el.find("#winter_month_desc").text(I18n.t("date.month_names")[a.winter.start] + " " + I18n.t("envoy_backbone.tariff.month_connector") + " " + I18n.t("date.month_names")[a.winter.end])
                : this.$el.find("#winter_month_desc").text(I18n.t("envoy_backbone.tariff.winter_months_desc"));
            this.setMonthOptions(a);
        },
        setMonthOptions: function (a) {
            if (0 < a.summer.start) {
                var b = this.prevMonthValue(a.summer.start);
                this.$el
                    .find("#summer_rate_end option[value=" + b + "]")
                    .prop("disabled", !0)
                    .siblings()
                    .prop("disabled", !1);
            }
            0 < a.summer.end &&
                ((b = this.nextMonthValue(a.summer.end)),
                this.$el
                    .find("#summer_rate_start option[value=" + b + "]")
                    .prop("disabled", !0)
                    .siblings()
                    .prop("disabled", !1));
        },
        selectCountry: function (a) {
            this.selectedCountry = a.currentTarget.value.toString();
            BackboneConfig.country = this.selectedCountry;
            this.updateFormats(this.selectedCountry);
            this.render();
        },
        updateFormats: function (a) {
            this.model.setCurrencyCode(a);
            this.currencyFormat = Tools.getCurrencyFormat(a);
            this.numberFormat = iso.getNumberFormat(a);
            this.placeholderText = $('<input value="0.00">').autoNumeric("init", this.currencyFormat).val();
            this.render();
        },
        getCountriesSortedByName: function () {
            var a = [];
            _.each(I18n.t("envoy_backbone.countries"), function (b, d) {
                a.push({ cc: d, name: b });
            });
            return (a = _.sortBy(a, "name"));
        },
        getSeasonMonths: function () {
            var a = { summer: { start: "", end: "" }, winter: { start: "", end: "" } };
            this.model.activeCollection.get("season_1") && _.extend(a, { summer: { start: this.model.activeCollection.get("season_1").get("start").split("/")[0], end: this.model.activeCollection.get("season_1").get("end") } });
            this.model.activeCollection.get("season_2") && _.extend(a, { winter: { start: this.model.activeCollection.get("season_2").get("start").split("/")[0], end: this.model.activeCollection.get("season_2").get("end") } });
            return a;
        },
        getMonthText: function () {
            var a = this.getSeasonMonths();
            return a.winter.start && a.winter.end
                ? I18n.t("date.month_names")[a.winter.start] + " " + I18n.t("envoy_backbone.tariff.month_connector") + " " + I18n.t("date.month_names")[a.winter.end]
                : I18n.t("envoy_backbone.tariff.winter_months_desc");
        },
        getDaysChargeAtNightFromModel: function () {
            var a = { seasons: [] };
            _.each(this.model.activeCollection.models, function (b, d) {
                a.seasons.push({ id: b.id, days: [] });
                _.each(b.get("days"), function (b) {
                    a.seasons[d].days.push({ id: b.id, must_charge: 0 < b.must_charge_duration, start: b.must_charge_start, duration: b.must_charge_duration });
                });
            });
            return a;
        },
        getChargeAtNight: function (a, b, d) {
            if ((a = _.findWhere(a.seasons, { id: b.id }))) var e = _.findWhere(a.days, { id: d.id }).must_charge;
            return e;
        },
        setChargeAtNight: function (a, b, d) {
            if ((a = _.findWhere(this.localChargeAtNightSettings.seasons, { id: a }))) _.findWhere(a.days, { id: b }).must_charge = d;
        },
        toggleTariffDetails: function (a) {
            this.configDetailsExpanded = "show" == a.type;
            this.render();
        },
        tariffTypeWarning: function () {
            this.$el.find(".tariff-type-warning").removeClass("hidden");
        },
        close: function () {
            this.remove();
            this.unbind();
            b.mediator.off(null, null, this);
            b.wifiDoingScaryStuff = !1;
            b.tariff.stopPollingTariffData();
            this.stopListening();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.TimezoneSettings = Backbone.View.extend({
        className: "datetime_settings",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["more/timezone_settings"];
            this.isLoading = !0;
            this.model = b.envoyModel;
            this.collection = b.timezones;
            this.checkLoader();
            b.mediator.on("timezones:Loaded", this.checkLoader, this);
            b.mediator.on("envoy:TimezoneUpdate", this.checkLoader, this);
            return this;
        },
        events: { "click button.btn-primary": "updateTimezone", "keypress form": "evaluateEnter" },
        render: function () {
            var a = this.template({ isLoading: this.isLoading, timezones: this.collection.toJSON(), model: this.model.toJSON() });
            this.$el.html(a);
            0 == this.isLoading && this.$el.find(".timezone-select").select2();
            return this;
        },
        updateTimezone: function (a) {
            a.preventDefault();
            a = this.$el.find(".timezone-select").val();
            this.model.get("timezone") != a && ((this.isLoading = !0), this.render(), this.model.setTimezone(a));
        },
        checkLoader: function () {
            1 > this.collection.length || void 0 == this.model.get("timezone") ? (this.isLoading = !0) : (this.isLoading = !1);
            this.render();
        },
        evaluateEnter: function (a) {
            13 == a.keyCode && this.startScan(a);
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.WifiPage = Backbone.View.extend({
        className: "content",
        tagName: "div",
        haveCurrentData: !1,
        refreshTimer: void 0,
        initialize: function (a) {
            this.template = JST["wifi/main"];
            this.model = b.wifiModel;
            1 == b.isPublic() ? (void 0 == b.wifiSites && (b.wifiSites = new b.Collections.WifiSites()), (this.isLoading = !0)) : (this.isLoading = !1);
            b.loaderBar.setConcernedList([{ id: "Home" }, { id: "WifiSettings" }, { id: "WifiSettingsWithSites" }]);
            this.sites = b.wifiSites;
            b.mediator.on("wifi:gotdata", this.checkLoading, this);
            this.currentNetworkView = new b.Views.WifiCurrentNetwork({ wifiSitesView: this.wifiSitesView });
            this.wifiCountry = new b.Views.WifiCountryConfig();
            this.wifiDeviceInfoView = new b.Views.WifiDeviceInfo();
            this.apMode = new b.Views.WifiApModeConfig();
            this.sites.poll();
            return this;
        },
        checkLoading: function () {
            1 == this.isLoading && 0 == this.model.get("pendingRequest") && ((this.isLoading = !1), this.render());
        },
        render: function () {
            var a = this.template({ model: this.model.toJSON(), isLoading: this.isLoading });
            this.$el.html(a);
            this.assign(this.currentNetworkView, "#wifi_network");
            this.assign(this.wifiCountry, ".country_config");
            this.assign(this.apMode, ".ap_mode_config");
            this.assign(this.wifiDeviceInfoView, "#wifi_device_info");
            return this;
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            this.currentNetworkView.close();
            this.wifiCountry.close();
            this.apMode.close();
            this.wifiDeviceInfoView.close();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.WifiApModeConfig = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["wifi/ap_mode_config"];
            this.model = b.wifiModel;
            this.isSupported = void 0 != this.model.get("hw_state") && this.model.get("hw_state").present;
            this.isLoading = !1;
            this.formValue = !this.model.get("ap_mode_enabled");
            this.listenTo(this.model, "change:hw_state", this.checkSupported);
            this.listenTo(this.model, "change:ap_mode_enabled", this.hideLoader);
            this.listenTo(this.model, "change:ap_mode_time_remaining", this.hideLoader);
            b.mediator.on("confirmSetting:submit", this.submitForm, this);
            return this;
        },
        events: { "click button.switch-setting": "updateApMode", "keypress form": "evaluateEnter" },
        render: function () {
            var a = this.template({ ap_mode_enabled: this.model.get("ap_mode_enabled"), ap_mode_time_remaining: this.model.get("ap_mode_time_remaining"), isSupported: this.isSupported, isLoading: this.isLoading });
            this.$el.html(a);
            return this;
        },
        checkSupported: function () {
            var a = void 0 != this.model.get("hw_state") && this.model.get("hw_state").present;
            if (0 == a || this.isSupported != a) (this.isSupported = a), this.render();
        },
        showLoader: function () {
            this.isLoading = !0;
            this.render();
        },
        hideLoader: function () {
            this.formValue = !this.model.get("ap_mode_enabled");
            this.isLoading = !1;
            this.render();
        },
        evaluateEnter: function (a) {
            13 == a.keyCode && this.updateApMode(a);
        },
        updateApMode: function (a) {
            b.confirmSettingModal.updateModalType(
                I18n.t("envoy_backbone.wifi.ap_mode_config.confirm_switch_modal.title_" + this.formValue),
                I18n.t("envoy_backbone.wifi.ap_mode_config.confirm_switch_modal.description"),
                "confirmSetting:submit"
            );
            b.mediator.trigger("confirmSetting:show");
        },
        submitForm: function (a) {
            this.showLoader();
            this.model.setAPMode(this.formValue);
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            this.stopListening(this.model);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.WifiAvailableNetworks = Backbone.View.extend({
        className: "content",
        tagName: "div",
        selectedSite: {},
        initialize: function (a) {
            this.template = JST["wifi/available_networks"];
            this.model = b.wifiModel;
            1 == b.isPublic() && void 0 == b.wifiSites && (b.wifiSites = new b.Collections.WifiSites());
            this.wifiSites = b.wifiSites;
            this.wifiSitesView = new b.Views.WifiSites({ sites: this.wifiSites.get("sites"), wifiAvailableNetworks: this });
            this.otherNetwork = new b.Views.WifiOtherNetworkConfig({ wifiAvailableNetworks: this });
            this.haveCurrentData = this.model.get("haveData");
            b.availableNetworksPolling = !0;
            this.selected_site = null;
            this.listenTo(this.model, "change:hw_state", this.render);
            b.loaderBar.setConcernedList([{ id: "WifiSettingsWithSites" }]);
            b.mediator.on("wifi_sites:siteSelected", this.siteSelected, this);
            b.mediator.on("getPassword:ok", this.passwordProvided, this);
            b.mediator.on("confirmConnect:ok", this.noPasswordConnectConfirmed, this);
            b.mediator.on("wifi:joinAttemptSuccess", this.joinAttemptSuccess, this);
            b.mediator.on("wifi:joinAttemptTimeout", this.joinAttemptTimeout, this);
            b.mediator.on("wifi:joinAttemptFailed", this.joinAttemptFailed, this);
            return this;
        },
        render: function () {
            var a = this.model.get("hw_state"),
                a = this.template({ show_list: a.supported && a.present });
            this.$el.html(a);
            this.assign(this.wifiSitesView, ".wifi_sites");
            this.assign(this.otherNetwork, ".other_network");
            return this;
        },
        getSelectedSite: function () {
            return this.selected_site;
        },
        siteSelected: function () {
            this.selectedSite = this.getSelectedSite();
            if (this.selectedSite.get("unsupported"))
                b.infoAlertModal.setTitle(I18n.t("envoy_backbone.wifi.unsupported_site")), b.infoAlertModal.setText(I18n.t("envoy_backbone.wifi.unsupported_site_explanation")), b.mediator.trigger("info:showInfo");
            else {
                var a = !1;
                this.selectedSite.get("wps") || "Open/Unsecured" == this.selectedSite.get("security_mode") || (a = !0);
                a ? (b.getPasswordModal.setSite(this.selectedSite), b.mediator.trigger("getPassword:show")) : (b.confirmConnectModal.setSsid(this.selectedSite.get("ssid")), b.mediator.trigger("confirmConnect:show"));
            }
        },
        joinStart: function (a) {
            this.selectedSite = a;
            this.render();
        },
        joinAttemptSuccess: function () {
            b.mediator.trigger("wifi:refreshSiteData");
            b.mediator.trigger("pleaseWait:hide");
            this.model.get("current_network");
            b.infoAlertModal.setTitle(I18n.t("envoy_backbone.wifi.connect_success.title"));
            b.infoAlertModal.setText(I18n.t("envoy_backbone.wifi.connect_success.description", { site_name: this.selectedSite.get("ssid") }));
            b.mediator.trigger("info:showInfo");
            b.router.navigate("network/wifi", { trigger: !0 });
        },
        joinAttemptTimeout: function () {
            b.mediator.trigger("pleaseWait:hide");
            b.mediator.trigger("wifi:refreshSiteData");
            b.infoAlertModal.setTitle(I18n.t("envoy_backbone.wifi.connect_incomplete.title"));
            b.infoAlertModal.setText(I18n.t("envoy_backbone.wifi.connect_incomplete.description", { site_name: this.selectedSite.get("ssid") }));
            b.mediator.trigger("info:showInfo");
            b.router.navigate("network/wifi", { trigger: !0 });
        },
        joinAttemptFailed: function () {
            b.mediator.trigger("pleaseWait:hide");
            b.infoAlertModal.setTitle(I18n.t("envoy_backbone.wifi.connection_status.failed"));
            b.infoAlertModal.setText(I18n.t("envoy_backbone.wifi.connect.connection_failure_explanation", { site_name: this.selectedSite.get("ssid") }));
            b.mediator.trigger("info:showInfo");
            b.mediator.trigger("wifi:refreshSiteData");
            this.selectedSite = {};
            this.render();
        },
        connectToSelectedSite: function (a) {
            b.pleaseWaitModal.setWaitText(I18n.t("envoy_backbone.wifi.connect.wait_join", { site_name: this.selectedSite.get("ssid") }));
            b.mediator.trigger("pleaseWait:show");
            this.model.testAndJoinWirelessConnection(
                this.selectedSite.get("ssid"),
                this.selectedSite.get("security_mode"),
                this.selectedSite.get("encryption_type"),
                this.selectedSite.get("mac"),
                this.selectedSite.get("wps") ? 1 : 0,
                a,
                !1
            );
            this.render();
        },
        passwordProvided: function () {
            var a = b.getPasswordModal.getPassword();
            this.connectToSelectedSite(a);
        },
        noPasswordConnectConfirmed: function () {
            this.connectToSelectedSite("");
        },
        close: function () {
            this.remove();
            this.stopListening(this.model);
            b.availableNetworksPolling = !1;
            b.mediator.off(null, null, this);
            this.unbind();
            this.otherNetwork.close();
            this.wifiSitesView.close();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.WifiConfirmForgetModal = Backbone.View.extend({
        className: "modal-dialog",
        tagName: "div",
        initialize: function () {
            this.model = b.wifiModel;
            this.template = JST["wifi/wifi_confirm_forget"];
            this.setElement($("#wifi_confirm_forget"));
            b.mediator.on("app:domReady", this.createModal, this);
            b.mediator.on("wifi:showForgetConfirm", this.showForgetConfirmation, this);
        },
        events: { "click .btn-primary": "okModal", "click .close": "cancelModal" },
        render: function () {
            this.model.get("current_network");
            var a = I18n.t("envoy_backbone.wifi.forget.forget_warning");
            this.setElement($("#wifi_confirm_forget"));
            a = this.template({ model: this.model.toJSON(), forget_note: a });
            this.$el.html(a);
            return this;
        },
        createModal: function () {
            this.render();
            $("#wifi_confirm_forget").modal({ show: !1 });
        },
        cancelModal: function () {
            $("#wifi_confirm_forget").modal("hide");
            b.mediator.trigger("wifi:forgetCancel");
        },
        okModal: function () {
            $("#wifi_confirm_forget").modal("hide");
            b.mediator.trigger("wifi:forgetConfirm");
        },
        showForgetConfirmation: function () {
            this.render();
            $("#wifi_confirm_forget").modal("show");
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.WifiCountryConfig = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["wifi/country_config"];
            this.model = b.wifiModel;
            this.isSupported = void 0 != this.model.get("hw_state") && this.model.get("hw_state").present;
            this.isLoading = !1;
            this.listenTo(this.model, "change:hw_state", this.checkSupported);
            this.listenTo(this.model, "change:regions", this.hideLoader);
            this.listenTo(this.model, "change:selected_region", this.hideLoader);
            return this;
        },
        events: { "submit form": "setWifiRegion", "keypress form": "evaluateEnter", "click button.submit": "setWifiRegion" },
        render: function () {
            var a = this.template({ regions: this.model.get("regions"), selected_region: this.model.get("selected_region"), isSupported: this.isSupported, isLoading: this.isLoading });
            this.$el.html(a);
            return this;
        },
        checkSupported: function () {
            var a = void 0 != this.model.get("hw_state") && this.model.get("hw_state").present;
            if (0 == a || this.isSupported != a) (this.isSupported = a), this.render();
        },
        setWifiRegion: function (a) {
            a = $("#wifi_region").val();
            this.showLoader();
            this.model.setCountryData(a);
        },
        evaluateEnter: function (a) {
            13 == a.keyCode && this.setWifiRegion(a);
        },
        showLoader: function () {
            this.isLoading = !0;
            this.render();
        },
        hideLoader: function () {
            this.isLoading = !1;
            this.render();
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            this.stopListening(this.model);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.WifiCurrentNetwork = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["wifi/wifi_current_network"];
            this.model = b.wifiModel;
            this.showMoreInfo = !1;
            this.bars_icon = this.security_icon = void 0;
            this.isLoading = !0;
            b.mediator.on("wifi:CurrentNetworkUpdated", this.evaluateRender, this);
            b.mediator.on("wifi:forgetSuccess", this.forgetFinishedSuccess, this);
            b.mediator.on("wifi:forgetFailure", this.forgetFailed, this);
            b.mediator.on("wifi:forgetTimeout", this.forgetTimedOut, this);
            b.mediator.on("wifi:forgetCancel", this.forgetCanceled, this);
            b.mediator.on("wifi:forgetConfirm", this.forgetConfirmed, this);
            this.evaluateRender();
            return this;
        },
        events: { "click button.forget": "forgetCurrentWifi", "show.bs.collapse #show_current_wifi_details": "toggleMoreInfoExpanded", "hide.bs.collapse #show_current_wifi_details": "toggleMoreInfoExpanded" },
        render: function () {
            var a = this.template({ model: this.model.toJSON(), security_icon: this.security_icon, bars_icon: this.bars_icon, showMoreInfo: this.showMoreInfo, isLoading: this.isLoading });
            this.$el.html(a);
            return this;
        },
        evaluateRender: function () {
            var a = this.model.get("current_network"),
                b = this.model.get("hw_state");
            b.configured &&
                ((this.security_icon = b.supported ? ("Open/Unsecured" == a.security_mode || "NONE" == a.security_mode ? "" : "wifi_locked") : "wifi_unsupported"),
                "connected" == a.status && (this.bars_icon = 4 >= a.bars ? "wifi_signal_" + a.bars : "wifi_signal_4"));
            1 != this.isLoading || ((!b.configured || _.isEmpty(a.ssid)) && b.configured) || (this.isLoading = !1);
            this.render();
        },
        toggleMoreInfoExpanded: function (a) {
            this.showMoreInfo = "show" == a.type;
        },
        updateHaveData: function () {
            this.haveCurrentData = this.model.get("haveData");
            this.render();
            if (this.model.get("hw_state").configured) {
                var a = this.model.get("current_network");
                if ("connecting" == a.status || "dhcp" == a.status)
                    void 0 != this.refreshTimer && clearTimeout(this.refreshTimer),
                        (this.refreshTimer = setTimeout(function () {
                            b.mediator.trigger("wifi:refreshMainData");
                            this.refreshTimer = void 0;
                        }, 15e3));
            }
        },
        forgetCurrentWifi: function (a) {
            b.mediator.trigger("wifi:showForgetConfirm");
        },
        forgetCanceled: function () {},
        forgetConfirmed: function () {
            this.haveCurrentData = !1;
            b.pleaseWaitModal.setWaitText(I18n.t("envoy_backbone.wifi.forget.wait_forget"));
            b.mediator.trigger("pleaseWait:show");
            this.model.forgetWirelessCurrent();
            this.render();
        },
        forgetFinishedSuccess: function () {
            this.showMoreInfo = !1;
            b.mediator.trigger("pleaseWait:hide");
        },
        forgetFailed: function () {
            b.mediator.trigger("pleaseWait:hide");
            b.infoAlertModal.setTitle(I18n.t("envoy_backbone.wifi.forget_failed.title"));
            b.infoAlertModal.setText(I18n.t("envoy_backbone.wifi.forget_failed.description"));
            b.mediator.trigger("info:showInfo");
            this.render();
        },
        forgetTimedOut: function () {
            b.mediator.trigger("pleaseWait:hide");
            b.infoAlertModal.setTitle(I18n.t("envoy_backbone.wifi.forget_incomplete.title"));
            b.infoAlertModal.setText(I18n.t("envoy_backbone.wifi.forget_incomplete.description"));
            b.mediator.trigger("info:showInfo");
            this.render();
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            this.stopListening(this.model);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.WifiDeviceInfo = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["wifi/wifi_device_info"];
            this.model = b.wifiModel;
            this.listenTo(this.model, "change:device_info", this.render);
            return this;
        },
        render: function () {
            var a = this.template({ model: this.model.toJSON() });
            this.$el.html(a);
            return this;
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            this.stopListening(this.model);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.WifiOtherNetworkConfig = Backbone.View.extend({
        className: "content",
        tagName: "div",
        initialize: function (a) {
            this.template = JST["wifi/other_network"];
            this.model = b.wifiModel;
            this.wifiAvailableNetworks = a.wifiAvailableNetworks;
            this.isLoading = this.isExpanded = !1;
            this.resetForm();
            this.listenTo(this.model, "change:hw_state", this.render);
            b.mediator.on("confirmSetting:OtherNetworkSubmit", this.submitForm, this);
            return this;
        },
        events: {
            "change select#security_mode": "toggleFormFields",
            "click .accordion-toggle": "toggleIsOpen",
            "click input.submit": "validateConfig",
            "submit form": "validateConfig",
            "keypress form": "evaluateEnter",
            "shown.bs.collapse #other_network_panel": "focusOnFirstField",
        },
        render: function () {
            var a = this.template({ model: this.model.toJSON(), isExpanded: this.isExpanded, isLoading: this.isLoading, temp_options: this.temp_options });
            this.$el.html(a);
            return this;
        },
        evaluateEnter: function (a) {
            13 == a.keyCode && this.validateConfig(a);
        },
        checkForm: function () {
            this.formValidator = $("#connect_other_network_form").validate({ errorClass: "has-error" });
        },
        validateConfig: function (a) {
            a.preventDefault();
            this.checkForm();
            this.formValidator.form() &&
                ((this.temp_options = { bssid: "", wps_pbc: "", essid: $("#essid").val(), security_mode: $("#security_mode").val(), wificrypto: $("#encryption").val(), password: $("#password").val() }),
                b.confirmSettingModal.updateModalType(
                    I18n.t("envoy_backbone.wifi.other_network.confirm_switch_modal.title"),
                    I18n.t("envoy_backbone.wifi.other_network.confirm_switch_modal.description"),
                    "confirmSetting:OtherNetworkSubmit"
                ),
                b.mediator.trigger("confirmSetting:show"));
        },
        resetForm: function () {
            this.temp_options = { bssid: "", wps_pbc: "", essid: "", security_mode: "Open/Unsecured", wificrypto: "NONE", password: "" };
        },
        toggleFormFields: function (a) {
            a = $(a.target).val();
            "WEP" == a
                ? (this.$el.find(".encryption_group").addClass("hidden"), this.$el.find(".password_group").removeClass("hidden"), this.$el.find("#password").removeClass("password").addClass("wep_key"))
                : "WPA Personal" == a || "WPA2 Personal" == a
                ? (this.$el.find(".password_group, .encryption_group").removeClass("hidden"), this.$el.find("#password").removeClass("wep_key").addClass("password"))
                : (this.$el.find(".password_group, .encryption_group").addClass("hidden"), this.$el.find("#password").val("").removeClass("wep_key").removeClass("password"));
            this.checkForm();
            "" != this.$el.find("#password").val() && this.$el.find("#password").valid();
        },
        submitForm: function () {
            b.pleaseWaitModal.setWaitText(I18n.t("envoy_backbone.wifi.connect.wait_join", { site_name: this.temp_options.essid }));
            b.mediator.trigger("pleaseWait:show");
            this.wifiAvailableNetworks.joinStart(new b.Models.WifiSite({ ssid: this.temp_options.essid }));
            this.model.testAndJoinWirelessConnection(this.temp_options.essid, this.temp_options.security_mode, this.temp_options.wificrypto, this.temp_options.bssid, this.temp_options.wps_pbc, this.temp_options.password, !0);
        },
        focusOnFirstField: function () {
            $("#connect_other_network_form input:text").first().focus();
        },
        toggleIsOpen: function (a) {
            this.isExpanded = !this.isExpanded;
            0 == this.isExpanded && ((this.isLoading = !1), this.resetForm());
        },
        close: function () {
            this.remove();
            b.mediator.off(null, null, this);
            this.unbind();
            this.stopListening(this.model);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Views.WifiSites = Backbone.View.extend({
        className: "wifi_sites",
        tagName: "div",
        hideSiteData: !0,
        goingForExtraRefresh: !1,
        extraRefreshTimer: void 0,
        lastSiteRefreshTime: void 0,
        initialize: function (a) {
            this.template = JST["wifi/wifi_sites"];
            this.wifiSites = b.wifiSites;
            this.wifiModel = b.wifiModel;
            this.wifiAvailableNetworks = a.wifiAvailableNetworks;
            b.mediator.on("wifi_sites:SitesUpdated", this.render, this);
            this.wifiSites.restartPolling();
        },
        events: { "click .site-row": "selectSite" },
        render: function () {
            var a = 0 == this.wifiSites.length;
            1 == this.wifiSites.length && (a = this.wifiSites.models[0].get("is_current_ssid"));
            a = this.template({ list_empty: a, sites: this.wifiSites.toJSON() });
            this.$el.html(a);
            return this;
        },
        selectSite: function (a) {
            a = $(a.target).closest("a").attr("id");
            a = a.substring(a.lastIndexOf("e") + 1);
            site_id = parseInt(a);
            a = this.wifiSites.find(function (a) {
                if (a.get("site_id") == site_id) return a;
            });
            void 0 != a && ((this.wifiAvailableNetworks.selected_site = a), b.mediator.trigger("wifi_sites:siteSelected"));
        },
        close: function () {
            this.remove();
            this.wifiSites.stopPolling();
            b.mediator.off(null, null, this);
            this.unbind();
            this.stopListening(this.sites);
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.Router = Backbone.Router.extend({
        execute: function (a, c, d) {
            if (0 <= b.lastRoute.lastIndexOf("wizard")) return (b.lastRoute = d), b.mediator.trigger("wizTrouble:show_exit_confirmation"), !1;
            a && a.apply(this, c);
        },
        routes: {
            "": "overview",
            "microinverters(/:tab)": "microinverters",
            "microinverters(/:tab/:secondary)": "microinverters",
            "acb(/:tab)": "acb",
            "acb(/:tab/:secondary)": "acb",
            "nsr(/:tab)": "nsr",
            "nsr(/:tab/:secondary)": "nsr",
            overview: "overview",
            "network(/:tab)": "network",
            "meters(/:tab)": "meters",
            "meters(/:tab/:id)": "meters",
            "more/:tab": "more",
            more: "overview",
            appalert: "appalert",
            initial_setup: "initialSetup",
            "encharge(/:tab)": "encharge",
            "encharge(/:tab/:secondary)": "encharge",
            "enpower(/:tab)": "enpower",
            "enpower(/:tab/:secondary)": "enpower",
            auth: "auth",
        },
        overview: function () {
            var a = new b.Views.OverviewPage();
            b.contentContainer.getPage(a);
            b.lastRoute = "overview";
        },
        microinverters: function (a, c) {
            var d = new b.Views.DeviceCollectionPage({ collection_type: "microinverters", hasPowerSummary: !0, primary_tab: a, secondary_tab: c });
            b.contentContainer.getPage(d);
            b.lastRoute = void 0 != c ? "microinverters/" + a + "/" + c : void 0 != a ? "microinverters/" + a : "microinverters";
        },
        acb: function (a, c) {
            var d = new b.Views.DeviceCollectionPage({ collection_type: "ac_batteries", primary_tab: a, secondary_tab: c });
            b.contentContainer.getPage(d);
            b.lastRoute = void 0 != c ? "acb/" + a + "/" + c : void 0 != a ? "acb/" + a : "acb";
        },
        auth: function () {
            var a = new b.Views.AuthenticationPage();
            b.contentContainer.getPage(a);
            b.lastRoute = "auth";
        },
        nsr: function (a, c) {
            var d = new b.Views.DeviceCollectionPage({ collection_type: "nsrs", primary_tab: a, secondary_tab: c });
            b.contentContainer.getPage(d);
            b.lastRoute = void 0 != c ? "nsr/" + a + "/" + c : void 0 != a ? "nsr/" + a : "nsr";
        },
        enpower: function (a, c) {
            var d = new b.Views.DeviceCollectionPage({ collection_type: "enpowers", primary_tab: a, secondary_tab: c });
            b.contentContainer.getPage(d);
            b.lastRoute = void 0 != c ? "enpower/" + a + "/" + c : void 0 != a ? "enpower/" + a : "enpower";
        },
        encharge: function (a, c) {
            var d = new b.Views.DeviceCollectionPage({ collection_type: "encharge_batteries", primary_tab: a, secondary_tab: c });
            b.contentContainer.getPage(d);
            b.lastRoute = void 0 != c ? "encharge/" + a + "/" + c : void 0 != a ? "encharge/" + a : "encharge";
        },
        network: function (a) {
            0 !== b.lastRoute.lastIndexOf("network", 0) && (b.networkSourceRoute = b.lastRoute);
            if (void 0 != a) {
                var c = new b.Views.NetworkSubPage({ primary_tab: a });
                b.lastRoute = "network/" + a;
            } else (c = new b.Views.NetworkPage()), (b.lastRoute = "network");
            b.contentContainer.getPage(c);
        },
        meters: function (a, c) {
            var d = "meters";
            if (void 0 != a && "detail" == a)
                if (void 0 != c && "production" == c && b.showInternalMeters())
                    var e = new b.Views.InternalMeter({ meterType: c }),
                        d = "meters/detail/" + c;
                else
                    void 0 != c && "consumption" == c && b.showInternalMeters()
                        ? ((e = new b.Views.InternalMeter({ meterType: c })), (d = "meters/detail/" + c))
                        : void 0 == c || b.showInternalMeters()
                        ? ((e = new b.Views.MetersPage()), (d = "meters"))
                        : ((e = new b.Views.ExternalProductionMeter({ meter_id: c })), (d = "meters/detail/" + c));
            else
                void 0 != a && "pmu_detail" == a && void 0 != c
                    ? ((e = new b.Views.PMUDetail({ meter_id: c })), (d = "meters/pmu_detail/" + c))
                    : void 0 != a && "add_pmu" == a
                    ? ((e = new b.Views.AddPMU()), (d = "meters/add_pmu/"))
                    : void 0 != a && "meter_wizard" == a
                    ? ((e = new b.Views.MeterWizard({ meterType: c })), (d = "meter_wizard"))
                    : void 0 != a && "wizard_select" == a
                    ? ((e = new b.Views.MeterWizard({ meterType: c, wizard: !0, select: !0 })), (d = "meter_wizard/" + c))
                    : void 0 != a && "wizard_enable" == a
                    ? ((e = new b.Views.InternalMeter({ meterType: c, wizard: !0, enable: !0 })), (d = "meter_wizard/" + c))
                    : ((e = void 0 != a && "escape_hatch" == a ? new b.Views.MetersPage({ expand: !0 }) : void 0 != a && "wizard_finished" == a ? new b.Views.MetersPage({ wizardFinished: !0 }) : new b.Views.MetersPage()), (d = "meters"));
            b.contentContainer.getPage(e);
            b.lastRoute = d;
        },
        more: function (a) {
            void 0 != a && "events" == a
                ? ((a = new b.Views.EventsPage()), (b.lastRoute = "more/events"))
                : void 0 != a && "about" == a
                ? ((a = new b.Views.AboutPage()), (b.lastRoute = "more/about"))
                : void 0 != a && "datetime" == a
                ? ((a = new b.Views.DateTimePage()), (b.lastRoute = "more/about"))
                : ((a = new b.Views.MorePage()), (b.lastRoute = "more"));
            b.contentContainer.getPage(a);
        },
        appalert: function () {
            b.router.navigate(b.lastRoute, { trigger: !0 });
        },
        initialSetup: function () {
            var a = new b.Views.InitialSetup();
            b.contentContainer.getPage(a);
            b.lastRoute = "initial_setup";
        },
    });
    b.PublicRouter = Backbone.Router.extend({
        execute: function (a, b, d) {
            a && a.apply(this, b);
        },
        routes: {
            "": "overview",
            overview: "overview",
            "network(/:tab)": "network",
            appalert: "appalert",
            "acb/manage": "acb",
            "acb/status/profile": "acbPubTariff",
            "encharge/manage": "encharge",
            "encharge/status/profile": "enchargePubTariff",
            auth: "auth",
        },
        overview: function () {
            var a = new b.Views.OverviewPage();
            b.contentContainer.getPage(a);
            b.lastRoute = "overview";
        },
        auth: function () {
            var a = new b.Views.AuthenticationPage();
            b.contentContainer.getPage(a);
            b.lastRoute = "auth";
        },
        network: function (a) {
            0 !== b.lastRoute.lastIndexOf("network", 0) && (b.networkSourceRoute = b.lastRoute);
            void 0 == a && void 0 != b.network ? a == b.network.get("primary_network") : "ethernet" == a;
            if (void 0 != a) {
                var c = new b.Views.NetworkSubPage({ primary_tab: a });
                b.lastRoute = "network/" + a;
            }
            b.contentContainer.getPage(c);
        },
        acb: function () {
            var a = new b.Views.PubManageBatteries({ collection_type: "ac_batteries" });
            b.lastRoute = "acb";
            b.contentContainer.getPage(a);
        },
        acbPubTariff: function () {
            var a = new b.Views.PubTariff({ collection_type: "ac_batteries" });
            b.lastRoute = "overview";
            b.contentContainer.getPage(a);
        },
        encharge: function () {
            var a = new b.Views.PubManageBatteries({ collection_type: "encharge_batteries" });
            b.lastRoute = "encharge";
            b.contentContainer.getPage(a);
        },
        enchargePubTariff: function () {
            var a = new b.Views.PubTariff({ collection_type: "encharge_batteries" });
            b.lastRoute = "overview";
            b.contentContainer.getPage(a);
        },
        appalert: function () {
            b.router.navigate(b.lastRoute, { trigger: !0 });
        },
    });
})(EnvoyBackboneApp);
(function (b) {
    b.startInstaller = function () {
        b.unloading = !1;
        b.wifiDoingScaryStuff = !1;
        $.ajaxSetup({ timeout: EnvoyBackboneApp.ajaxTimeoutLength() });
        $.ajaxSetup({
            dataFilter: function (a, b) {
                "json" == b && "" == a && (a = null);
                return a;
            },
        });
        b.router = new b.Router();
        b.mediator = new b.Mediator();
        b.touch = new b.Tools.Touch();
        b.activeRequests = new b.Collections.AjaxRequests();
        b.endpointTracker = new b.Models.EndpointTracker();
        b.envoyModel = new b.Models.Envoy();
        b.systemReadingStats = new b.Models.SystemReadingStats();
        b.scanModel = new b.Models.DeviceScan();
        b.inventory = new b.Models.Inventory();
        b.ac_batteries = new b.Collections.ACBatteries();
        b.encharge_batteries = new b.Collections.EnchargeBatteries();
        b.enpowers = new b.Collections.Enpowers();
        b.microinverters = new b.Collections.Inverters();
        b.nsrs = new b.Collections.Nsrs();
        b.network = new b.Models.Network();
        b.showInternalMeters() ? ((b.meters = new b.Collections.Meters()), (b.meterWizard = new b.Collections.MeterWizard())) : (b.pmus = new b.Collections.PMUMeters());
        b.events = new b.Models.Events();
        b.agfProfiles = new b.Collections.AgfProfiles();
        b.networkConnectivityCheck = new b.Models.NetworkConnectivity();
        b.networkPing = new b.Models.NetworkPing();
        b.networkRouteCheck = new b.Models.NetworkRouteCheck();
        b.wifiModel = new b.Models.WiFi();
        b.wifiSites = new b.Collections.WifiSites();
        b.timezones = new b.Collections.Timezones();
        b.software_packages = new b.Collections.SoftwarePackages();
        b.tariff = new b.Models.Tariff();
        b.report = new b.Views.Report();
        b.navbar = new b.Views.NavBar();
        b.loaderBar = new b.Views.AjaxLoader();
        b.microinverterCountModal = new b.Views.SetMicroinverterCount();
        b.setPhaseModal = new b.Views.SetPhase();
        b.initialSetup = new b.Views.InitialSetup();
        b.authentication = new b.Views.AuthenticationPage();
        b.wifiConfirmForgetModal = new b.Views.WifiConfirmForgetModal();
        b.infoAlertModal = new b.Views.InfoAlertModal();
        b.pleaseWaitModal = new b.Views.PleaseWaitModal();
        b.errorModal = new b.Views.DataErrorModal();
        b.getPasswordModal = new b.Views.GetPasswordModal();
        b.confirmConnectModal = new b.Views.ConfirmConnectModal();
        b.confirmSettingModal = new b.Views.ConfirmSettingModal();
        b.startScanModal = new b.Views.StartScanModal();
        b.contentContainer = new b.Views.ContentContainer();
        b.sleepModePromptModal = new b.Views.SleepModePrompt();
        b.sleepCancelModal = new b.Views.SleepCancelPrompt();
        b.setCurrentCTModal = new b.Views.setCurrentCTModal();
        0 == b.isToolkit() && ((b.topnavbar = new b.Views.PublicHeaderNavBar()), (b.footernavbar = new b.Views.PublicFooterNavBar()));
        b.meterWizTroubleModal = new b.Views.MeterWizardTroubleModal();
        BackboneConfig.country && ((BackboneConfig.country_set = !0), b.tariff.setCurrencyCode(BackboneConfig.country));
        $(function () {
            $(window).on("unload", function () {
                b.unloading = !0;
            });
            0 == b.isToolkit() && ($("body").addClass("browser"), $("body").append("<div id='public-header' class='navbar navbar-default'></div>"));
            $("body").append("<div id='loader'></div><div class='page container' id='content-container'><div class='content'></div></div>");
            0 == b.isToolkit()
                ? ($("<nav class='navbar navbar-default nav-toolbar' id='navbar'></nav>").insertBefore("#loader"), $("body").append("<div id='public-footer' class='navbar navbar-default'></div>"))
                : $("body").append("<nav class='navbar navbar-default navbar-fixed-bottom nav-toolbar no-select' id='navbar'></nav>");
            $("body").append(
                "<div class='modal fade' id='select_phase' data-backdrop='static'></div><div class='modal fade' id='set_microinverter_count' data-backdrop='static'></div><div class='modal fade' id='data_error'></div><div class='modal fade' id='wifi_confirm_forget' data-backdrop='static'></div><div class='modal fade' id='info_alert' data-backdrop='static'></div><div class='modal fade' id='please_wait' data-backdrop='static'></div><div class='modal fade' id='wiz_trouble' data-backdrop='static'></div><div class='modal fade' id='confirm_connect' data-backdrop='static'></div><div class='modal fade' id='confirm_setting' data-backdrop='static'></div><div class='modal fade' id='start_scan_modal' data-backdrop='static'></div><div class='modal fade' id='sleep_mode_prompt' data-backdrop='static'></div><div class='modal fade' id='sleep_cancel_prompt' data-backdrop='static'></div><div class='modal fade' id='set_current_ct_modal' data-backdrop='static'></div><div class='modal fade' id='get_password' data-backdrop='static'></div>"
            );
            b.domReady = !0;
            b.mediator.trigger("app:domReady");
            b.wallpaper = new b.Wallpaper({});
            $(".modal").on("hide.bs.modal", function () {
                b.modalIsOpen = !1;
            });
            $(".modal").on("show.bs.modal", function () {
                b.modalIsOpen = !0;
            });
            Backbone.history.start();
            a();
        });
    };
    b.startPublic = function () {
        b.unloading = !1;
        b.wifiDoingScaryStuff = !1;
        b.isLoggedIn = !1;
        $.ajaxSetup({ timeout: EnvoyBackboneApp.ajaxTimeoutLength() });
        $.ajaxSetup({
            dataFilter: function (a, b) {
                "json" == b && "" == a && (a = null);
                return a;
            },
        });
        b.router = new b.PublicRouter();
        b.mediator = new b.Mediator();
        b.touch = new b.Tools.Touch();
        b.activeRequests = new b.Collections.AjaxRequests();
        b.envoyModel = new b.Models.Envoy();
        b.systemReadingStats = new b.Models.SystemReadingStats();
        b.showInternalMeters() && (b.meters = new b.Collections.Meters());
        b.pmu;
        b.wifiModel = new b.Models.WiFi();
        b.network = new b.Models.Network();
        b.inventory = new b.Models.Inventory();
        b.ac_batteries = new b.Collections.ACBatteries();
        b.encharge_batteries = new b.Collections.EnchargeBatteries();
        b.enpowers = new b.Collections.Enpowers();
        b.microinverters = new b.Collections.Inverters();
        b.nsrs = new b.Collections.Nsrs();
        b.networkConnectivityCheck = new b.Models.NetworkConnectivity();
        b.networkPing = new b.Models.NetworkPing();
        b.networkRouteCheck = new b.Models.NetworkRouteCheck();
        b.endpointTracker = new b.Models.EndpointTracker();
        b.tariff = new b.Models.Tariff();
        b.loaderBar = new b.Views.AjaxLoader();
        b.topnavbar = new b.Views.PublicHeaderNavBar();
        b.footernavbar = new b.Views.PublicFooterNavBar();
        b.wifiConfirmForgetModal = new b.Views.WifiConfirmForgetModal();
        b.infoAlertModal = new b.Views.InfoAlertModal();
        b.pleaseWaitModal = new b.Views.PleaseWaitModal();
        b.errorModal = new b.Views.DataErrorModal();
        b.getPasswordModal = new b.Views.GetPasswordModal();
        b.confirmConnectModal = new b.Views.ConfirmConnectModal();
        b.confirmSettingModal = new b.Views.ConfirmSettingModal();
        b.contentContainer = new b.Views.ContentContainer();
        b.software_packages = new b.Collections.SoftwarePackages();
        b.sleepModePromptModal = new b.Views.SleepModePrompt();
        b.sleepCancelModal = new b.Views.SleepCancelPrompt();
        $(function () {
            $(window).on("unload", function () {
                b.unloading = !0;
            });
            $("body").addClass("public");
            $("body").append(
                "<div id='public-header' class='navbar navbar-default'></div><div id='loader'></div><div class='page container' id='content-container'><div class='content'></div></div><div id='public-footer' class='navbar navbar-default'></div><div class='modal fade' id='data_error'></div><div class='modal fade' id='wifi_confirm_forget' data-backdrop='static'></div><div class='modal fade' id='info_alert' data-backdrop='static'></div><div class='modal fade' id='please_wait' data-backdrop='static'></div><div class='modal fade' id='confirm_connect' data-backdrop='static'></div><div class='modal fade' id='confirm_setting' data-backdrop='static'></div><div class='modal fade' id='sleep_mode_prompt' data-backdrop='static'></div><div class='modal fade' id='sleep_cancel_prompt' data-backdrop='static'></div><div class='modal fade' id='get_password' data-backdrop='static'></div>"
            );
            b.domReady = !0;
            b.mediator.trigger("app:domReady");
            b.wallpaper = new b.Wallpaper({});
            Backbone.history.start();
            a();
        });
    };
    var a = function () {
        $.validator.addClassRules("ipv4_required", { required: !0, ipv4: !0 });
        $.validator.addClassRules("essid", { required: !0, rangelength: [1, 32] });
        $.validator.addMethod(
            "domain",
            function (a, b) {
                return (
                    this.optional(b) ||
                    /^(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)$/i.test(a) ||
                    /^(([a-zA-Z]{1})|([a-zA-Z]{1}[a-zA-Z]{1})|([a-zA-Z]{1}[0-9]{1})|([0-9]{1}[a-zA-Z]{1})|([a-zA-Z0-9][a-zA-Z0-9-_]{1,61}[a-zA-Z0-9]))\.([a-zA-Z]{2,6}|[a-zA-Z0-9-]{2,30}\.[a-zA-Z]{2,})$/.test(a)
                );
            },
            I18n.t("envoy_backbone.jquery_validate.messages.domain")
        );
        $.validator.addMethod(
            "wep_key",
            function (a, b) {
                return this.optional(b) || /^([0-9a-fA-F]{10}|[0-9a-fA-F]{26}|[0-9a-fA-F]{58})$/i.test(a);
            },
            I18n.t("envoy_backbone.jquery_validate.messages.wep_key")
        );
        $.validator.addClassRules("wep_key", { required: !0, wep_key: !0 });
        $.validator.addClassRules("password", { required: !0, rangelength: [8, 63] });
        $.validator.addMethod("addedTierPercent", function (a, b, e) {
            if (0 <= b.id.indexOf("tier_2")) var g = 100 < a;
            else {
                e = b.id.split("-");
                var f = e[1].split("_");
                f[1]--;
                e[1] = f.join("_");
                e = e.join("-");
                0 < $(this.currentForm).find("#" + e).length &&
                    ((g = $(this.currentForm)
                        .find("#" + e)
                        .autoNumeric("get")),
                    (g = +a > +g));
            }
            return this.optional(b) || g;
        });
        $.validator.addClassRules("target_inverter_count", { required: !0, digits: !0, range: [0, 600] });
        $.validator.addClassRules("target_acb_count", { required: !0, digits: !0, range: [0, 39] });
        $.validator.addClassRules("target_nsr_count", { required: !0, digits: !0, range: [0, 60] });
        $.validator.addMethod("an_number", function (a, b, e) {
            a = $(b).autoNumeric("get");
            a = $.isNumeric(a);
            return this.optional(b) || a;
        });
        $.validator.addMethod("an_not_zero", function (a, b, e) {
            a = 0 < $(b).autoNumeric("get");
            return this.optional(b) || a;
        });
        $.validator.addClassRules("tariff-rate-required", { required: !0, an_number: "true" });
        $.validator.addClassRules("tariff-limit-required", { required: !0, an_number: "true" });
        $.validator.addClassRules("tariff-not-zero", { an_number: "true", an_not_zero: "true" });
        $.validator.addClassRules("tier_percent-tier_2", { required: !0, digits: !1, min: 100 });
        $.validator.addClassRules("tier_percent-additional", { addedTierPercent: "the prior tier" });
        $.validator.addClassRules("tariff_select", { tariffTouCheck: "true" });
        $.validator.addMethod("tariffTouCheck", function (a, d, e) {
            "tou" == a &&
                _.each(EnvoyBackboneApp.tariff.activeCollection.models, function (a) {
                    _.each(a.get("days"), function (a) {
                        2 >= a.periods.length && b.mediator.trigger("profiles:validation_failed");
                    });
                });
            return this.optional(d) || !0;
        });
    };
})(EnvoyBackboneApp);
!(function (b, a) {
    "object" == typeof exports && "undefined" != typeof module ? (module.exports = a()) : "function" == typeof define && define.amd ? define(a) : ((b = "undefined" != typeof globalThis ? globalThis : b || self).jsSHA = a());
})(this, function () {
    function b(a, b, c, d) {
        var e,
            f,
            g = b || [0],
            h = (c = c || 0) >>> 3,
            k = -1 === d ? 3 : 0;
        for (b = 0; b < a.length; b += 1) (e = (f = b + h) >>> 2), g.length <= e && g.push(0), (g[e] |= a[b] << (8 * (k + (f % 4) * d)));
        return { value: g, binLen: 8 * a.length + c };
    }
    function a(a, c, d) {
        switch (c) {
            case "UTF8":
            case "UTF16BE":
            case "UTF16LE":
                break;
            default:
                throw Error("encoding must be UTF8, UTF16BE, or UTF16LE");
        }
        switch (a) {
            case "HEX":
                return function (a, b, c) {
                    var e, f, g;
                    if (0 != a.length % 2) throw Error("String of HEX type must be in byte increments");
                    var h = b || [0],
                        k = (c = c || 0) >>> 3,
                        l = -1 === d ? 3 : 0;
                    for (b = 0; b < a.length; b += 2) {
                        if (((e = parseInt(a.substr(b, 2), 16)), isNaN(e))) throw Error("String of HEX type contains invalid characters");
                        for (f = (g = (b >>> 1) + k) >>> 2; h.length <= f; ) h.push(0);
                        h[f] |= e << (8 * (l + (g % 4) * d));
                    }
                    return { value: h, binLen: 4 * a.length + c };
                };
            case "TEXT":
                return function (a, b, e) {
                    var f,
                        g,
                        h,
                        k,
                        l,
                        n,
                        q = 0,
                        u = b || [0],
                        A = (e = e || 0) >>> 3;
                    if ("UTF8" === c)
                        for (n = -1 === d ? 3 : 0, b = 0; b < a.length; b += 1)
                            for (
                                g = [],
                                    128 > (f = a.charCodeAt(b))
                                        ? g.push(f)
                                        : 2048 > f
                                        ? (g.push(192 | (f >>> 6)), g.push(128 | (63 & f)))
                                        : 55296 > f || 57344 <= f
                                        ? g.push(224 | (f >>> 12), 128 | ((f >>> 6) & 63), 128 | (63 & f))
                                        : ((b += 1), (f = 65536 + (((1023 & f) << 10) | (1023 & a.charCodeAt(b)))), g.push(240 | (f >>> 18), 128 | ((f >>> 12) & 63), 128 | ((f >>> 6) & 63), 128 | (63 & f))),
                                    h = 0;
                                h < g.length;
                                h += 1
                            ) {
                                for (k = (l = q + A) >>> 2; u.length <= k; ) u.push(0);
                                u[k] |= g[h] << (8 * (n + (l % 4) * d));
                                q += 1;
                            }
                    else
                        for (n = -1 === d ? 2 : 0, g = ("UTF16LE" === c && 1 !== d) || ("UTF16LE" !== c && 1 === d), b = 0; b < a.length; b += 1) {
                            f = a.charCodeAt(b);
                            !0 === g && (f = ((255 & f) << 8) | (f >>> 8));
                            for (k = (l = q + A) >>> 2; u.length <= k; ) u.push(0);
                            u[k] |= f << (8 * (n + (l % 4) * d));
                            q += 2;
                        }
                    return { value: u, binLen: 8 * q + e };
                };
            case "B64":
                return function (a, b, c) {
                    var e,
                        f,
                        g,
                        h,
                        k,
                        l,
                        n = 0;
                    b = b || [0];
                    var q = (c = c || 0) >>> 3,
                        u = -1 === d ? 3 : 0;
                    e = a.indexOf("=");
                    if (-1 === a.search(/^[a-zA-Z0-9=+/]+$/)) throw Error("Invalid character in base-64 string");
                    if (((a = a.replace(/=/g, "")), -1 !== e && e < a.length)) throw Error("Invalid '=' found in base-64 string");
                    for (e = 0; e < a.length; e += 4) {
                        h = a.substr(e, 4);
                        for (f = g = 0; f < h.length; f += 1) g |= "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(h.charAt(f)) << (18 - 6 * f);
                        for (f = 0; f < h.length - 1; f += 1) {
                            for (k = (l = n + q) >>> 2; b.length <= k; ) b.push(0);
                            b[k] |= ((g >>> (16 - 8 * f)) & 255) << (8 * (u + (l % 4) * d));
                            n += 1;
                        }
                    }
                    return { value: b, binLen: 8 * n + c };
                };
            case "BYTES":
                return function (a, b, c) {
                    var e,
                        f,
                        g,
                        h = b || [0],
                        k = (c = c || 0) >>> 3,
                        l = -1 === d ? 3 : 0;
                    for (e = 0; e < a.length; e += 1) (b = a.charCodeAt(e)), (f = (g = e + k) >>> 2), h.length <= f && h.push(0), (h[f] |= b << (8 * (l + (g % 4) * d)));
                    return { value: h, binLen: 8 * a.length + c };
                };
            case "ARRAYBUFFER":
                try {
                    new ArrayBuffer(0);
                } catch (e) {
                    throw Error("ARRAYBUFFER not supported by this environment");
                }
                return function (a, c, e) {
                    return b(new Uint8Array(a), c, e, d);
                };
            case "UINT8ARRAY":
                try {
                    new Uint8Array(0);
                } catch (e) {
                    throw Error("UINT8ARRAY not supported by this environment");
                }
                return function (a, c, e) {
                    return b(a, c, e, d);
                };
            default:
                throw Error("format must be HEX, TEXT, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY");
        }
    }
    function c(a, b, c, d) {
        switch (a) {
            case "HEX":
                return function (a) {
                    var e,
                        f,
                        g = "",
                        h = b / 8,
                        k = -1 === c ? 3 : 0;
                    for (e = 0; e < h; e += 1) (f = a[e >>> 2] >>> (8 * (k + (e % 4) * c))), (g += "0123456789abcdef".charAt((f >>> 4) & 15) + "0123456789abcdef".charAt(15 & f));
                    return d.outputUpper ? g.toUpperCase() : g;
                };
            case "B64":
                return function (a) {
                    var e,
                        f,
                        g,
                        h = "",
                        k = b / 8,
                        l = -1 === c ? 3 : 0;
                    for (e = 0; e < k; e += 3)
                        for (
                            f = e + 1 < k ? a[(e + 1) >>> 2] : 0,
                                g = e + 2 < k ? a[(e + 2) >>> 2] : 0,
                                g = (((a[e >>> 2] >>> (8 * (l + (e % 4) * c))) & 255) << 16) | (((f >>> (8 * (l + ((e + 1) % 4) * c))) & 255) << 8) | ((g >>> (8 * (l + ((e + 2) % 4) * c))) & 255),
                                f = 0;
                            4 > f;
                            f += 1
                        )
                            h += 8 * e + 6 * f <= b ? "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt((g >>> (6 * (3 - f))) & 63) : d.b64Pad;
                    return h;
                };
            case "BYTES":
                return function (a) {
                    var d,
                        e,
                        f = "",
                        g = b / 8,
                        h = -1 === c ? 3 : 0;
                    for (d = 0; d < g; d += 1) (e = (a[d >>> 2] >>> (8 * (h + (d % 4) * c))) & 255), (f += String.fromCharCode(e));
                    return f;
                };
            case "ARRAYBUFFER":
                try {
                    new ArrayBuffer(0);
                } catch (e) {
                    throw Error("ARRAYBUFFER not supported by this environment");
                }
                return function (a) {
                    var d,
                        e = b / 8,
                        f = new ArrayBuffer(e),
                        g = new Uint8Array(f),
                        h = -1 === c ? 3 : 0;
                    for (d = 0; d < e; d += 1) g[d] = (a[d >>> 2] >>> (8 * (h + (d % 4) * c))) & 255;
                    return f;
                };
            case "UINT8ARRAY":
                try {
                    new Uint8Array(0);
                } catch (e) {
                    throw Error("UINT8ARRAY not supported by this environment");
                }
                return function (a) {
                    var d,
                        e = b / 8,
                        f = -1 === c ? 3 : 0,
                        g = new Uint8Array(e);
                    for (d = 0; d < e; d += 1) g[d] = (a[d >>> 2] >>> (8 * (f + (d % 4) * c))) & 255;
                    return g;
                };
            default:
                throw Error("format must be HEX, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY");
        }
    }
    function d(a) {
        var b = { outputUpper: !1, b64Pad: "=", outputLen: -1 };
        a = a || {};
        if (((b.outputUpper = a.outputUpper || !1), a.b64Pad && (b.b64Pad = a.b64Pad), a.outputLen)) {
            if (0 != a.outputLen % 8) throw Error("Output length must be a multiple of 8");
            b.outputLen = a.outputLen;
        } else if (a.shakeLen) {
            if (0 != a.shakeLen % 8) throw Error("Output length must be a multiple of 8");
            b.outputLen = a.shakeLen;
        }
        if ("boolean" != typeof b.outputUpper) throw Error("Invalid outputUpper formatting option");
        if ("string" != typeof b.b64Pad) throw Error("Invalid b64Pad formatting option");
        return b;
    }
    function e(a, b) {
        return (a >>> b) | (a << (32 - b));
    }
    function g(a, b) {
        var c = (65535 & a) + (65535 & b);
        return ((65535 & ((a >>> 16) + (b >>> 16) + (c >>> 16))) << 16) | (65535 & c);
    }
    function f(a) {
        return "SHA-224" == a ? n.slice() : q.slice();
    }
    function k(a, b) {
        var c,
            d,
            f,
            h,
            k,
            n,
            q,
            z,
            B,
            G,
            H,
            J,
            A = [];
        c = b[0];
        d = b[1];
        f = b[2];
        h = b[3];
        k = b[4];
        n = b[5];
        q = b[6];
        z = b[7];
        for (H = 0; 64 > H; H += 1) {
            B = H;
            if (16 > H) G = a[H];
            else {
                G = e((J = A[H - 2]), 17) ^ e(J, 19) ^ (J >>> 10);
                var ea = A[H - 7],
                    ga;
                ga = A[H - 15];
                ga = e(ga, 7) ^ e(ga, 18) ^ (ga >>> 3);
                var ha = A[H - 16],
                    va = (65535 & G) + (65535 & ea) + (65535 & ga) + (65535 & ha);
                G = ((65535 & ((G >>> 16) + (ea >>> 16) + (ga >>> 16) + (ha >>> 16) + (va >>> 16))) << 16) | (65535 & va);
            }
            A[B] = G;
            B = k;
            B = e(B, 6) ^ e(B, 11) ^ e(B, 25);
            G = (k & n) ^ (~k & q);
            ea = l[H];
            ga = A[H];
            ha = (65535 & z) + (65535 & B) + (65535 & G) + (65535 & ea) + (65535 & ga);
            B = ((65535 & ((z >>> 16) + (B >>> 16) + (G >>> 16) + (ea >>> 16) + (ga >>> 16) + (ha >>> 16))) << 16) | (65535 & ha);
            z = c;
            z = e(z, 2) ^ e(z, 13) ^ e(z, 22);
            G = g(z, (c & d) ^ (c & f) ^ (d & f));
            z = q;
            q = n;
            n = k;
            k = g(h, B);
            h = f;
            f = d;
            d = c;
            c = g(B, G);
        }
        return (b[0] = g(c, b[0])), (b[1] = g(d, b[1])), (b[2] = g(f, b[2])), (b[3] = g(h, b[3])), (b[4] = g(k, b[4])), (b[5] = g(n, b[5])), (b[6] = g(q, b[6])), (b[7] = g(z, b[7])), b;
    }
    var h = function (a, b) {
            return (h =
                Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array &&
                    function (a, b) {
                        a.__proto__ = b;
                    }) ||
                function (a, b) {
                    for (var c in b) Object.prototype.hasOwnProperty.call(b, c) && (a[c] = b[c]);
                })(a, b);
        },
        l = [
            1116352408,
            1899447441,
            3049323471,
            3921009573,
            961987163,
            1508970993,
            2453635748,
            2870763221,
            3624381080,
            310598401,
            607225278,
            1426881987,
            1925078388,
            2162078206,
            2614888103,
            3248222580,
            3835390401,
            4022224774,
            264347078,
            604807628,
            770255983,
            1249150122,
            1555081692,
            1996064986,
            2554220882,
            2821834349,
            2952996808,
            3210313671,
            3336571891,
            3584528711,
            113926993,
            338241895,
            666307205,
            773529912,
            1294757372,
            1396182291,
            1695183700,
            1986661051,
            2177026350,
            2456956037,
            2730485921,
            2820302411,
            3259730800,
            3345764771,
            3516065817,
            3600352804,
            4094571909,
            275423344,
            430227734,
            506948616,
            659060556,
            883997877,
            958139571,
            1322822218,
            1537002063,
            1747873779,
            1955562222,
            2024104815,
            2227730452,
            2361852424,
            2428436474,
            2756734187,
            3204031479,
            3329325298,
        ],
        n = [3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428],
        q = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225];
    return (function (b) {
        function c(d, e, g) {
            var h = this;
            if ("SHA-224" !== d && "SHA-256" !== d) throw Error("Chosen SHA variant is not supported");
            var l = g || {};
            return (
                ((h = b.call(this, d, e, g) || this).t = h.i),
                (h.o = !0),
                (h.u = -1),
                (h.s = a(h.h, h.v, h.u)),
                (h.A = k),
                (h.p = function (a) {
                    return a.slice();
                }),
                (h.l = f),
                (h.R = function (a, b, c, e) {
                    var f = 15 + (((b + 65) >>> 9) << 4);
                    for (c = b + c; a.length <= f; ) a.push(0);
                    a[b >>> 5] |= 128 << (24 - (b % 32));
                    a[f] = 4294967295 & c;
                    a[f - 1] = (c / 4294967296) | 0;
                    for (b = 0; b < a.length; b += 16) e = k(a.slice(b, b + 16), e);
                    return "SHA-224" === d ? [e[0], e[1], e[2], e[3], e[4], e[5], e[6]] : e;
                }),
                (h.U = f(d)),
                (h.T = 512),
                (h.m = "SHA-224" === d ? 224 : 256),
                (h.F = !1),
                l.hmacKey &&
                    h.B(
                        (function (b, c, d, e) {
                            b += " must include a value and format";
                            if (!c) {
                                if (!e) throw Error(b);
                                return e;
                            }
                            if (void 0 === c.value || !c.format) throw Error(b);
                            return a(c.format, c.encoding || "UTF8", d)(c.value);
                        })("hmacKey", l.hmacKey, h.u)
                    ),
                h
            );
        }
        return (
            (function (a, b) {
                function c() {
                    this.constructor = a;
                }
                h(a, b);
                a.prototype = null === b ? Object.create(b) : ((c.prototype = b.prototype), new c());
            })(c, b),
            c
        );
    })(
        (function () {
            function b(a, c, d) {
                d = d || {};
                if (((this.h = c), (this.v = d.encoding || "UTF8"), (this.numRounds = d.numRounds || 1), isNaN(this.numRounds) || this.numRounds !== parseInt(this.numRounds, 10) || 1 > this.numRounds))
                    throw Error("numRounds must a integer >= 1");
                this.g = a;
                this.Y = [];
                this.H = 0;
                this.S = !1;
                this.I = 0;
                this.C = !1;
                this.L = [];
                this.N = [];
            }
            return (
                (b.prototype.update = function (a) {
                    var b,
                        c = 0,
                        d = this.T >>> 5;
                    b = this.s(a, this.Y, this.H);
                    a = b.binLen;
                    var e = b.value,
                        f = a >>> 5;
                    for (b = 0; b < f; b += d) c + this.T <= a && ((this.U = this.A(e.slice(b, b + d), this.U)), (c += this.T));
                    this.I += c;
                    this.Y = e.slice(c >>> 5);
                    this.H = a % this.T;
                    this.S = !0;
                }),
                (b.prototype.getHash = function (a, b) {
                    var e,
                        f,
                        g = this.m;
                    e = d(b);
                    if (this.F) {
                        if (-1 === e.outputLen) throw Error("Output length must be specified in options");
                        g = e.outputLen;
                    }
                    var h = c(a, g, this.u, e);
                    if (this.C && this.t) return h(this.t(e));
                    f = this.R(this.Y.slice(), this.H, this.I, this.p(this.U), g);
                    for (e = 1; e < this.numRounds; e += 1) this.F && 0 != g % 32 && (f[f.length - 1] &= 16777215 >>> (24 - (g % 32))), (f = this.R(f, g, 0, this.l(this.g), g));
                    return h(f);
                }),
                (b.prototype.setHMACKey = function (b, c, d) {
                    if (!this.o) throw Error("Variant does not support HMAC");
                    if (this.S) throw Error("Cannot set MAC key after calling update");
                    c = a(c, (d || {}).encoding || "UTF8", this.u);
                    this.B(c(b));
                }),
                (b.prototype.B = function (a) {
                    var b;
                    b = this.T >>> 3;
                    var c = b / 4 - 1;
                    if (1 !== this.numRounds) throw Error("Cannot set numRounds with MAC");
                    if (this.C) throw Error("MAC key already set");
                    for (b < a.binLen / 8 && (a.value = this.R(a.value, a.binLen, 0, this.l(this.g), this.m)); a.value.length <= c; ) a.value.push(0);
                    for (b = 0; b <= c; b += 1) (this.L[b] = 909522486 ^ a.value[b]), (this.N[b] = 1549556828 ^ a.value[b]);
                    this.U = this.A(this.L, this.U);
                    this.I = this.T;
                    this.C = !0;
                }),
                (b.prototype.getHMAC = function (a, b) {
                    var e = d(b);
                    return c(a, this.m, this.u, e)(this.i());
                }),
                (b.prototype.i = function () {
                    var a;
                    if (!this.C) throw Error("Cannot call getHMAC without first setting MAC key");
                    var b = this.R(this.Y.slice(), this.H, this.I, this.p(this.U), this.m);
                    return (a = this.A(this.N, this.l(this.g))), this.R(b, this.m, this.T, a, this.m);
                }),
                b
            );
        })()
    );
});
